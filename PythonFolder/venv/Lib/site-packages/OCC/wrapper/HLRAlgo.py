# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HLRAlgo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HLRAlgo')
    _HLRAlgo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRAlgo', [dirname(__file__)])
        except ImportError:
            import _HLRAlgo
            return _HLRAlgo
        try:
            _mod = imp.load_module('_HLRAlgo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HLRAlgo = swig_import_helper()
    del swig_import_helper
else:
    import _HLRAlgo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRAlgo.delete_SwigPyIterator

    def value(self):
        return _HLRAlgo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HLRAlgo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HLRAlgo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HLRAlgo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HLRAlgo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HLRAlgo.SwigPyIterator_copy(self)

    def next(self):
        return _HLRAlgo.SwigPyIterator_next(self)

    def __next__(self):
        return _HLRAlgo.SwigPyIterator___next__(self)

    def previous(self):
        return _HLRAlgo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HLRAlgo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HLRAlgo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HLRAlgo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HLRAlgo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HLRAlgo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HLRAlgo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HLRAlgo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _HLRAlgo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _HLRAlgo.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_HLRAlgo.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _HLRAlgo.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _HLRAlgo.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRAlgo.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _HLRAlgo.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _HLRAlgo.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _HLRAlgo.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _HLRAlgo.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_HLRAlgo.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _HLRAlgo.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _HLRAlgo.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRAlgo.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _HLRAlgo.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _HLRAlgo.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _HLRAlgo.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _HLRAlgo.ptr_to_number(item)
ptr_to_number = _HLRAlgo.ptr_to_number

def HashCode(*args):
    return _HLRAlgo.HashCode(*args)
HashCode = _HLRAlgo.HashCode

def ptr_equal(a, b):
    return _HLRAlgo.ptr_equal(a, b)
ptr_equal = _HLRAlgo.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
HLRAlgo_PolyMask_EMskOutLin1 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin1
HLRAlgo_PolyMask_EMskOutLin2 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin2
HLRAlgo_PolyMask_EMskOutLin3 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin3
HLRAlgo_PolyMask_EMskGrALin1 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin1
HLRAlgo_PolyMask_EMskGrALin2 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin2
HLRAlgo_PolyMask_EMskGrALin3 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin3
HLRAlgo_PolyMask_FMskBack = _HLRAlgo.HLRAlgo_PolyMask_FMskBack
HLRAlgo_PolyMask_FMskSide = _HLRAlgo.HLRAlgo_PolyMask_FMskSide
HLRAlgo_PolyMask_FMskHiding = _HLRAlgo.HLRAlgo_PolyMask_FMskHiding
HLRAlgo_PolyMask_FMskFlat = _HLRAlgo.HLRAlgo_PolyMask_FMskFlat
HLRAlgo_PolyMask_FMskOnOutL = _HLRAlgo.HLRAlgo_PolyMask_FMskOnOutL
HLRAlgo_PolyMask_FMskOrBack = _HLRAlgo.HLRAlgo_PolyMask_FMskOrBack
HLRAlgo_PolyMask_FMskFrBack = _HLRAlgo.HLRAlgo_PolyMask_FMskFrBack
class HLRAlgo_PolyAlgo(Standard.Standard_Transient):
    """to remove Hidden lines on Triangulations."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_PolyAlgo
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_PolyAlgo(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_PolyAlgo self) -> HLRAlgo_PolyAlgo

        to remove Hidden lines on Triangulations.
        """
        this = _HLRAlgo.new_HLRAlgo_PolyAlgo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(HLRAlgo_PolyAlgo self, Handle_TColStd_HArray1OfTransient HShell)

        :type HShell: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Init(self, *args)


    def PolyShell(self, *args):
        """
        PolyShell(HLRAlgo_PolyAlgo self) -> NCollection_Array1_Handle_Standard_Transient

        :rtype: OCC.wrapper.TColStd.TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_PolyShell(self, *args)


    def Clear(self, *args):
        """Clear(HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_Clear(self, *args)


    def Update(self, *args):
        """
        Update(HLRAlgo_PolyAlgo self)

        Prepare all the data to process the algo.


        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Update(self, *args)


    def InitHide(self, *args):
        """InitHide(HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_InitHide(self, *args)


    def MoreHide(self, *args):
        """
        MoreHide(HLRAlgo_PolyAlgo self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_MoreHide(self, *args)


    def NextHide(self, *args):
        """NextHide(HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_NextHide(self, *args)


    def Hide(self, *args):
        """
        Hide(HLRAlgo_PolyAlgo self, HLRAlgo_EdgeStatus status) -> HLRAlgo_BiPoint::PointsT &

        process hiding between <Pt1> and <Pt2>.

        :type status: OCC.wrapper.HLRAlgo.HLRAlgo_EdgeStatus
        :type Index: int
        :type reg1: bool
        :type regn: bool
        :type outl: bool
        :type intl: bool
        :rtype: PointsT

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Hide(self, *args)


    def InitShow(self, *args):
        """InitShow(HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_InitShow(self, *args)


    def MoreShow(self, *args):
        """
        MoreShow(HLRAlgo_PolyAlgo self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_MoreShow(self, *args)


    def NextShow(self, *args):
        """NextShow(HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_NextShow(self, *args)


    def Show(self, *args):
        """
        Show(HLRAlgo_PolyAlgo self) -> HLRAlgo_BiPoint::PointsT &

        process hiding between <Pt1> and <Pt2>.

        :type Index: int
        :type reg1: bool
        :type regn: bool
        :type outl: bool
        :type intl: bool
        :rtype: PointsT

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Show(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_PolyAlgo_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyAlgo
HLRAlgo_PolyAlgo_swigregister = _HLRAlgo.HLRAlgo_PolyAlgo_swigregister
HLRAlgo_PolyAlgo_swigregister(HLRAlgo_PolyAlgo)

def HLRAlgo_PolyAlgo_get_type_name(*args):
    """
    HLRAlgo_PolyAlgo_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_PolyAlgo_get_type_name(*args)

def HLRAlgo_PolyAlgo_get_type_descriptor(*args):
    """
    HLRAlgo_PolyAlgo_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_PolyAlgo_get_type_descriptor(*args)

class HLRAlgo_HArray1OfPINod(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_HArray1OfPINod
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_HArray1OfPINod(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_HArray1OfPINod self, Standard_Integer const theLower, Standard_Integer const theUpper) -> HLRAlgo_HArray1OfPINod
        __init__(HLRAlgo_HArray1OfPINod self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_HLRAlgo_PolyInternalNode theValue) -> HLRAlgo_HArray1OfPINod
        __init__(HLRAlgo_HArray1OfPINod self, NCollection_Array1_Handle_HLRAlgo_PolyInternalNode theOther) -> HLRAlgo_HArray1OfPINod

        :type theOther: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        this = _HLRAlgo.new_HLRAlgo_HArray1OfPINod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        res = _HLRAlgo.HLRAlgo_HArray1OfPINod_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(HLRAlgo_HArray1OfPINod self) -> NCollection_Array1_Handle_HLRAlgo_PolyInternalNode

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_HArray1OfPINod_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPINod
HLRAlgo_HArray1OfPINod_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPINod_swigregister
HLRAlgo_HArray1OfPINod_swigregister(HLRAlgo_HArray1OfPINod)

def HLRAlgo_HArray1OfPINod_get_type_name(*args):
    """
    HLRAlgo_HArray1OfPINod_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_HArray1OfPINod_get_type_name(*args)

def HLRAlgo_HArray1OfPINod_get_type_descriptor(*args):
    """
    HLRAlgo_HArray1OfPINod_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_HArray1OfPINod_get_type_descriptor(*args)

class HLRAlgo_WiresBlock(Standard.Standard_Transient):
    """
    A WiresBlock is a set of Blocks. It is used by the
    DataStructure to structure the Edges.

    A WiresBlock contains :

    * An Array  of Blocks.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_WiresBlock
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_WiresBlock(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_WiresBlock self, Standard_Integer const NbWires) -> HLRAlgo_WiresBlock

        Create a Block of Blocks.

        :type NbWires: int

        """
        this = _HLRAlgo.new_HLRAlgo_WiresBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbWires(self, *args):
        """
        NbWires(HLRAlgo_WiresBlock self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_NbWires(self, *args)


    def Set(self, *args):
        """
        Set(HLRAlgo_WiresBlock self, Standard_Integer const I, Handle_HLRAlgo_EdgesBlock W)

        :type I: int
        :type W: OCC.wrapper.HLRAlgo.Handle_HLRAlgo_EdgesBlock

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_Set(self, *args)


    def Wire(self, *args):
        """
        Wire(HLRAlgo_WiresBlock self, Standard_Integer const I) -> Handle_HLRAlgo_EdgesBlock

        :type I: int
        :rtype: OCC.wrapper.HLRAlgo.Handle_HLRAlgo_EdgesBlock

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_Wire(self, *args)


    def UpdateMinMax(self, *args):
        """
        UpdateMinMax(HLRAlgo_WiresBlock self, HLRAlgo_EdgesBlock::MinMaxIndices const & theMinMaxes)

        :type theMinMaxes: MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_UpdateMinMax(self, *args)


    def MinMax(self, *args):
        """
        MinMax(HLRAlgo_WiresBlock self) -> HLRAlgo_EdgesBlock::MinMaxIndices &

        :rtype: MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_MinMax(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_WiresBlock_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_WiresBlock
HLRAlgo_WiresBlock_swigregister = _HLRAlgo.HLRAlgo_WiresBlock_swigregister
HLRAlgo_WiresBlock_swigregister(HLRAlgo_WiresBlock)

def HLRAlgo_WiresBlock_get_type_name(*args):
    """
    HLRAlgo_WiresBlock_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_WiresBlock_get_type_name(*args)

def HLRAlgo_WiresBlock_get_type_descriptor(*args):
    """
    HLRAlgo_WiresBlock_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_WiresBlock_get_type_descriptor(*args)

class HLRAlgo_PolyShellData(Standard.Standard_Transient):
    """All the PolyData of a Shell"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_PolyShellData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_PolyShellData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_PolyShellData self, Standard_Integer const nbFace) -> HLRAlgo_PolyShellData

        :type nbFace: int

        """
        this = _HLRAlgo.new_HLRAlgo_PolyShellData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def UpdateGlobalMinMax(self, *args):
        """
        UpdateGlobalMinMax(HLRAlgo_PolyShellData self, HLRAlgo_PolyData::Box & theBox)

        :type theBox: Box

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_UpdateGlobalMinMax(self, *args)


    def UpdateHiding(self, *args):
        """
        UpdateHiding(HLRAlgo_PolyShellData self, Standard_Integer const nbHiding)

        :type nbHiding: int

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_UpdateHiding(self, *args)


    def Hiding(self, *args):
        """
        Hiding(HLRAlgo_PolyShellData self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_Hiding(self, *args)


    def PolyData(self, *args):
        """
        PolyData(HLRAlgo_PolyShellData self) -> NCollection_Array1_Handle_Standard_Transient

        :rtype: OCC.wrapper.TColStd.TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_PolyData(self, *args)


    def HidingPolyData(self, *args):
        """
        HidingPolyData(HLRAlgo_PolyShellData self) -> NCollection_Array1_Handle_Standard_Transient

        :rtype: OCC.wrapper.TColStd.TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_HidingPolyData(self, *args)


    def Edges(self, *args):
        """
        Edges(HLRAlgo_PolyShellData self) -> HLRAlgo_ListOfBPoint &

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_ListOfBPoint

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_Edges(self, *args)


    def Indices(self, *args):
        """
        Indices(HLRAlgo_PolyShellData self) -> HLRAlgo_PolyShellData::ShellIndices &

        :rtype: ShellIndices

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_Indices(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_PolyShellData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyShellData
HLRAlgo_PolyShellData_swigregister = _HLRAlgo.HLRAlgo_PolyShellData_swigregister
HLRAlgo_PolyShellData_swigregister(HLRAlgo_PolyShellData)

def HLRAlgo_PolyShellData_get_type_name(*args):
    """
    HLRAlgo_PolyShellData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_PolyShellData_get_type_name(*args)

def HLRAlgo_PolyShellData_get_type_descriptor(*args):
    """
    HLRAlgo_PolyShellData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_PolyShellData_get_type_descriptor(*args)

class HLRAlgo_HArray1OfPHDat(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_HArray1OfPHDat
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_HArray1OfPHDat(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_HArray1OfPHDat self, Standard_Integer const theLower, Standard_Integer const theUpper) -> HLRAlgo_HArray1OfPHDat
        __init__(HLRAlgo_HArray1OfPHDat self, Standard_Integer const theLower, Standard_Integer const theUpper, HLRAlgo_PolyHidingData theValue) -> HLRAlgo_HArray1OfPHDat
        __init__(HLRAlgo_HArray1OfPHDat self, NCollection_Array1_HLRAlgo_PolyHidingData theOther) -> HLRAlgo_HArray1OfPHDat

        :type theOther: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPHDat

        """
        this = _HLRAlgo.new_HLRAlgo_HArray1OfPHDat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPHDat

        """
        res = _HLRAlgo.HLRAlgo_HArray1OfPHDat_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(HLRAlgo_HArray1OfPHDat self) -> NCollection_Array1_HLRAlgo_PolyHidingData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_HArray1OfPHDat_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPHDat
HLRAlgo_HArray1OfPHDat_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPHDat_swigregister
HLRAlgo_HArray1OfPHDat_swigregister(HLRAlgo_HArray1OfPHDat)

def HLRAlgo_HArray1OfPHDat_get_type_name(*args):
    """
    HLRAlgo_HArray1OfPHDat_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_HArray1OfPHDat_get_type_name(*args)

def HLRAlgo_HArray1OfPHDat_get_type_descriptor(*args):
    """
    HLRAlgo_HArray1OfPHDat_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_HArray1OfPHDat_get_type_descriptor(*args)

class HLRAlgo_PolyHidingData(object):
    """Data structure of a set of Hiding Triangles."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRAlgo_PolyHidingData self) -> HLRAlgo_PolyHidingData

        Data structure of a set of Hiding Triangles.
        """
        this = _HLRAlgo.new_HLRAlgo_PolyHidingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        """
        Set(HLRAlgo_PolyHidingData self, Standard_Integer const Index, Standard_Integer const Minim, Standard_Integer const Maxim, Standard_Real const A, Standard_Real const B, Standard_Real const C, Standard_Real const D)

        :type Index: int
        :type Minim: int
        :type Maxim: int
        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _HLRAlgo.HLRAlgo_PolyHidingData_Set(self, *args)


    def Indices(self, *args):
        """
        Indices(HLRAlgo_PolyHidingData self) -> HLRAlgo_PolyHidingData::TriangleIndices &

        :rtype: TriangleIndices

        """
        return _HLRAlgo.HLRAlgo_PolyHidingData_Indices(self, *args)


    def Plane(self, *args):
        """
        Plane(HLRAlgo_PolyHidingData self) -> HLRAlgo_PolyHidingData::PlaneT &

        :rtype: PlaneT

        """
        return _HLRAlgo.HLRAlgo_PolyHidingData_Plane(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyHidingData
HLRAlgo_PolyHidingData_swigregister = _HLRAlgo.HLRAlgo_PolyHidingData_swigregister
HLRAlgo_PolyHidingData_swigregister(HLRAlgo_PolyHidingData)

class HLRAlgo_HArray1OfTData(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_HArray1OfTData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_HArray1OfTData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_HArray1OfTData self, Standard_Integer const theLower, Standard_Integer const theUpper) -> HLRAlgo_HArray1OfTData
        __init__(HLRAlgo_HArray1OfTData self, Standard_Integer const theLower, Standard_Integer const theUpper, HLRAlgo_Array1OfTData::value_type const & theValue) -> HLRAlgo_HArray1OfTData
        __init__(HLRAlgo_HArray1OfTData self, NCollection_Array1_HLRAlgo_TriangleData theOther) -> HLRAlgo_HArray1OfTData

        :type theOther: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        this = _HLRAlgo.new_HLRAlgo_HArray1OfTData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        res = _HLRAlgo.HLRAlgo_HArray1OfTData_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(HLRAlgo_HArray1OfTData self) -> NCollection_Array1_HLRAlgo_TriangleData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_HArray1OfTData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfTData
HLRAlgo_HArray1OfTData_swigregister = _HLRAlgo.HLRAlgo_HArray1OfTData_swigregister
HLRAlgo_HArray1OfTData_swigregister(HLRAlgo_HArray1OfTData)

def HLRAlgo_HArray1OfTData_get_type_name(*args):
    """
    HLRAlgo_HArray1OfTData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_HArray1OfTData_get_type_name(*args)

def HLRAlgo_HArray1OfTData_get_type_descriptor(*args):
    """
    HLRAlgo_HArray1OfTData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_HArray1OfTData_get_type_descriptor(*args)

class HLRAlgo_(object):
    """
    In order to have the precision required in
    industrial design, drawings need to offer the
    possibility of removing lines, which are hidden
    in a given projection. To do this, the Hidden
    Line Removal component provides two
    algorithms: HLRBRep_Algo and HLRBRep_PolyAlgo.
    These algorithms remove or indicate lines
    hidden by surfaces. For a given projection, they
    calculate a set of lines characteristic of the
    object being represented. They are also used
    in conjunction with extraction utilities, which
    reconstruct a new, simplified shape from a
    selection of calculation results. This new shape
    is made up of edges, which represent the lines
    of the visualized shape in a plane. This plane is the projection plane.
    HLRBRep_Algo takes into account the shape
    itself. HLRBRep_PolyAlgo works with a
    polyhedral simplification of the shape. When
    you use HLRBRep_Algo, you obtain an exact
    result, whereas, when you use
    HLRBRep_PolyAlgo, you reduce computation
    time but obtain polygonal segments.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def UpdateMinMax(*args):
        """
        UpdateMinMax(Standard_Real const x, Standard_Real const y, Standard_Real const z, Standard_Real * Min, Standard_Real * Max)

        Iterator  on the  visible or  hidden  parts of  an
        EdgeStatus.

        :type x: float
        :type y: float
        :type z: float
        :type Min: OCC.wrapper.Standard.Standard_Real [16]
        :type Max: OCC.wrapper.Standard.Standard_Real [16]

        """
        return _HLRAlgo.HLRAlgo__UpdateMinMax(*args)

    UpdateMinMax = staticmethod(UpdateMinMax)

    def EnlargeMinMax(*args):
        """
        EnlargeMinMax(Standard_Real const tol, Standard_Real * Min, Standard_Real * Max)

        :type tol: float
        :type Min: OCC.wrapper.Standard.Standard_Real [16]
        :type Max: OCC.wrapper.Standard.Standard_Real [16]

        """
        return _HLRAlgo.HLRAlgo__EnlargeMinMax(*args)

    EnlargeMinMax = staticmethod(EnlargeMinMax)

    def InitMinMax(*args):
        """
        InitMinMax(Standard_Real const Big, Standard_Real * Min, Standard_Real * Max)

        :type Big: float
        :type Min: OCC.wrapper.Standard.Standard_Real [16]
        :type Max: OCC.wrapper.Standard.Standard_Real [16]

        """
        return _HLRAlgo.HLRAlgo__InitMinMax(*args)

    InitMinMax = staticmethod(InitMinMax)

    def EncodeMinMax(*args):
        """
        EncodeMinMax(HLRAlgo_EdgesBlock::MinMaxIndices & Min, HLRAlgo_EdgesBlock::MinMaxIndices & Max, HLRAlgo_EdgesBlock::MinMaxIndices & MinMax)

        :type Min: MinMaxIndices
        :type Max: MinMaxIndices
        :type MinMax: MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo__EncodeMinMax(*args)

    EncodeMinMax = staticmethod(EncodeMinMax)

    def SizeBox(*args):
        """
        SizeBox(HLRAlgo_EdgesBlock::MinMaxIndices & Min, HLRAlgo_EdgesBlock::MinMaxIndices & Max) -> Standard_Real

        :type Min: MinMaxIndices
        :type Max: MinMaxIndices
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _HLRAlgo.HLRAlgo__SizeBox(*args)

    SizeBox = staticmethod(SizeBox)

    def DecodeMinMax(*args):
        """
        DecodeMinMax(HLRAlgo_EdgesBlock::MinMaxIndices const & MinMax, HLRAlgo_EdgesBlock::MinMaxIndices & Min, HLRAlgo_EdgesBlock::MinMaxIndices & Max)

        :type MinMax: MinMaxIndices
        :type Min: MinMaxIndices
        :type Max: MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo__DecodeMinMax(*args)

    DecodeMinMax = staticmethod(DecodeMinMax)

    def CopyMinMax(*args):
        """
        CopyMinMax(HLRAlgo_EdgesBlock::MinMaxIndices & IMin, HLRAlgo_EdgesBlock::MinMaxIndices & IMax, HLRAlgo_EdgesBlock::MinMaxIndices & OMin, HLRAlgo_EdgesBlock::MinMaxIndices & OMax)

        :type IMin: MinMaxIndices
        :type IMax: MinMaxIndices
        :type OMin: MinMaxIndices
        :type OMax: MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo__CopyMinMax(*args)

    CopyMinMax = staticmethod(CopyMinMax)

    def AddMinMax(*args):
        """
        AddMinMax(HLRAlgo_EdgesBlock::MinMaxIndices & IMin, HLRAlgo_EdgesBlock::MinMaxIndices & IMax, HLRAlgo_EdgesBlock::MinMaxIndices & OMin, HLRAlgo_EdgesBlock::MinMaxIndices & OMax)

        :type IMin: MinMaxIndices
        :type IMax: MinMaxIndices
        :type OMin: MinMaxIndices
        :type OMax: MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo__AddMinMax(*args)

    AddMinMax = staticmethod(AddMinMax)

    def __init__(self):
        """
        In order to have the precision required in
        industrial design, drawings need to offer the
        possibility of removing lines, which are hidden
        in a given projection. To do this, the Hidden
        Line Removal component provides two
        algorithms: HLRBRep_Algo and HLRBRep_PolyAlgo.
        These algorithms remove or indicate lines
        hidden by surfaces. For a given projection, they
        calculate a set of lines characteristic of the
        object being represented. They are also used
        in conjunction with extraction utilities, which
        reconstruct a new, simplified shape from a
        selection of calculation results. This new shape
        is made up of edges, which represent the lines
        of the visualized shape in a plane. This plane is the projection plane.
        HLRBRep_Algo takes into account the shape
        itself. HLRBRep_PolyAlgo works with a
        polyhedral simplification of the shape. When
        you use HLRBRep_Algo, you obtain an exact
        result, whereas, when you use
        HLRBRep_PolyAlgo, you reduce computation
        time but obtain polygonal segments.
        """
        this = _HLRAlgo.new_HLRAlgo_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_
HLRAlgo__swigregister = _HLRAlgo.HLRAlgo__swigregister
HLRAlgo__swigregister(HLRAlgo_)

def HLRAlgo__UpdateMinMax(*args):
    """
    HLRAlgo__UpdateMinMax(Standard_Real const x, Standard_Real const y, Standard_Real const z, Standard_Real * Min, Standard_Real * Max)

    Iterator  on the  visible or  hidden  parts of  an
    EdgeStatus.

    :type x: float
    :type y: float
    :type z: float
    :type Min: OCC.wrapper.Standard.Standard_Real [16]
    :type Max: OCC.wrapper.Standard.Standard_Real [16]

    """
    return _HLRAlgo.HLRAlgo__UpdateMinMax(*args)

def HLRAlgo__EnlargeMinMax(*args):
    """
    HLRAlgo__EnlargeMinMax(Standard_Real const tol, Standard_Real * Min, Standard_Real * Max)

    :type tol: float
    :type Min: OCC.wrapper.Standard.Standard_Real [16]
    :type Max: OCC.wrapper.Standard.Standard_Real [16]

    """
    return _HLRAlgo.HLRAlgo__EnlargeMinMax(*args)

def HLRAlgo__InitMinMax(*args):
    """
    HLRAlgo__InitMinMax(Standard_Real const Big, Standard_Real * Min, Standard_Real * Max)

    :type Big: float
    :type Min: OCC.wrapper.Standard.Standard_Real [16]
    :type Max: OCC.wrapper.Standard.Standard_Real [16]

    """
    return _HLRAlgo.HLRAlgo__InitMinMax(*args)

def HLRAlgo__EncodeMinMax(*args):
    """
    HLRAlgo__EncodeMinMax(HLRAlgo_EdgesBlock::MinMaxIndices & Min, HLRAlgo_EdgesBlock::MinMaxIndices & Max, HLRAlgo_EdgesBlock::MinMaxIndices & MinMax)

    :type Min: MinMaxIndices
    :type Max: MinMaxIndices
    :type MinMax: MinMaxIndices

    """
    return _HLRAlgo.HLRAlgo__EncodeMinMax(*args)

def HLRAlgo__SizeBox(*args):
    """
    HLRAlgo__SizeBox(HLRAlgo_EdgesBlock::MinMaxIndices & Min, HLRAlgo_EdgesBlock::MinMaxIndices & Max) -> Standard_Real

    :type Min: MinMaxIndices
    :type Max: MinMaxIndices
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _HLRAlgo.HLRAlgo__SizeBox(*args)

def HLRAlgo__DecodeMinMax(*args):
    """
    HLRAlgo__DecodeMinMax(HLRAlgo_EdgesBlock::MinMaxIndices const & MinMax, HLRAlgo_EdgesBlock::MinMaxIndices & Min, HLRAlgo_EdgesBlock::MinMaxIndices & Max)

    :type MinMax: MinMaxIndices
    :type Min: MinMaxIndices
    :type Max: MinMaxIndices

    """
    return _HLRAlgo.HLRAlgo__DecodeMinMax(*args)

def HLRAlgo__CopyMinMax(*args):
    """
    HLRAlgo__CopyMinMax(HLRAlgo_EdgesBlock::MinMaxIndices & IMin, HLRAlgo_EdgesBlock::MinMaxIndices & IMax, HLRAlgo_EdgesBlock::MinMaxIndices & OMin, HLRAlgo_EdgesBlock::MinMaxIndices & OMax)

    :type IMin: MinMaxIndices
    :type IMax: MinMaxIndices
    :type OMin: MinMaxIndices
    :type OMax: MinMaxIndices

    """
    return _HLRAlgo.HLRAlgo__CopyMinMax(*args)

def HLRAlgo__AddMinMax(*args):
    """
    HLRAlgo__AddMinMax(HLRAlgo_EdgesBlock::MinMaxIndices & IMin, HLRAlgo_EdgesBlock::MinMaxIndices & IMax, HLRAlgo_EdgesBlock::MinMaxIndices & OMin, HLRAlgo_EdgesBlock::MinMaxIndices & OMax)

    :type IMin: MinMaxIndices
    :type IMax: MinMaxIndices
    :type OMin: MinMaxIndices
    :type OMax: MinMaxIndices

    """
    return _HLRAlgo.HLRAlgo__AddMinMax(*args)

class Handle_HLRAlgo_PolyAlgo(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_PolyAlgo self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_PolyAlgo self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_PolyAlgo self, HLRAlgo_PolyAlgo thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_PolyAlgo self, Handle_HLRAlgo_PolyAlgo theHandle) -> Handle_HLRAlgo_PolyAlgo
        assign(Handle_HLRAlgo_PolyAlgo self, HLRAlgo_PolyAlgo thePtr) -> Handle_HLRAlgo_PolyAlgo
        assign(Handle_HLRAlgo_PolyAlgo self, Handle_HLRAlgo_PolyAlgo theHandle) -> Handle_HLRAlgo_PolyAlgo

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_PolyAlgo self) -> HLRAlgo_PolyAlgo

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_PolyAlgo self) -> HLRAlgo_PolyAlgo

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_PolyAlgo self) -> HLRAlgo_PolyAlgo

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_PolyAlgo___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_PolyAlgo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_PolyAlgo

    def Init(self, *args):
        """
        Init(Handle_HLRAlgo_PolyAlgo self, Handle_TColStd_HArray1OfTransient HShell)

        :type HShell: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfTransient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Init(self, *args)


    def PolyShell(self, *args):
        """
        PolyShell(Handle_HLRAlgo_PolyAlgo self) -> NCollection_Array1_Handle_Standard_Transient

        :rtype: OCC.wrapper.TColStd.TColStd_Array1OfTransient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_PolyShell(self, *args)


    def Clear(self, *args):
        """Clear(Handle_HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Clear(self, *args)


    def Update(self, *args):
        """
        Update(Handle_HLRAlgo_PolyAlgo self)

        Prepare all the data to process the algo.


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Update(self, *args)


    def InitHide(self, *args):
        """InitHide(Handle_HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_InitHide(self, *args)


    def MoreHide(self, *args):
        """
        MoreHide(Handle_HLRAlgo_PolyAlgo self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_MoreHide(self, *args)


    def NextHide(self, *args):
        """NextHide(Handle_HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_NextHide(self, *args)


    def Hide(self, *args):
        """
        Hide(Handle_HLRAlgo_PolyAlgo self, HLRAlgo_EdgeStatus status) -> HLRAlgo_BiPoint::PointsT &

        process hiding between <Pt1> and <Pt2>.

        :type status: OCC.wrapper.HLRAlgo.HLRAlgo_EdgeStatus
        :type Index: int
        :type reg1: bool
        :type regn: bool
        :type outl: bool
        :type intl: bool
        :rtype: PointsT

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Hide(self, *args)


    def InitShow(self, *args):
        """InitShow(Handle_HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_InitShow(self, *args)


    def MoreShow(self, *args):
        """
        MoreShow(Handle_HLRAlgo_PolyAlgo self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_MoreShow(self, *args)


    def NextShow(self, *args):
        """NextShow(Handle_HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_NextShow(self, *args)


    def Show(self, *args):
        """
        Show(Handle_HLRAlgo_PolyAlgo self) -> HLRAlgo_BiPoint::PointsT &

        process hiding between <Pt1> and <Pt2>.

        :type Index: int
        :type reg1: bool
        :type regn: bool
        :type outl: bool
        :type intl: bool
        :rtype: PointsT

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Show(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_PolyAlgo self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_PolyAlgo self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_PolyAlgo self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_PolyAlgo self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_PolyAlgo self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_PolyAlgo self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_PolyAlgo self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_PolyAlgo self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_PolyAlgo self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_PolyAlgo self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DecrementRefCounter(self, *args)

Handle_HLRAlgo_PolyAlgo_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_swigregister
Handle_HLRAlgo_PolyAlgo_swigregister(Handle_HLRAlgo_PolyAlgo)

def Handle_HLRAlgo_PolyAlgo_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast(thing)
Handle_HLRAlgo_PolyAlgo_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast

class HLRAlgo_PolyData(Standard.Standard_Transient):
    """Data structure of a set of Triangles."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_PolyData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_PolyData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_PolyData self) -> HLRAlgo_PolyData

        Data structure of a set of Triangles.
        """
        this = _HLRAlgo.new_HLRAlgo_PolyData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HNodes(self, *args):
        """
        HNodes(HLRAlgo_PolyData self, Handle_TColgp_HArray1OfXYZ HNodes)

        :type HNodes: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _HLRAlgo.HLRAlgo_PolyData_HNodes(self, *args)


    def HTData(self, *args):
        """
        HTData(HLRAlgo_PolyData self, Handle_HLRAlgo_HArray1OfTData HTData)

        :type HTData: OCC.wrapper.HLRAlgo.Handle_HLRAlgo_HArray1OfTData

        """
        return _HLRAlgo.HLRAlgo_PolyData_HTData(self, *args)


    def HPHDat(self, *args):
        """
        HPHDat(HLRAlgo_PolyData self, Handle_HLRAlgo_HArray1OfPHDat HPHDat)

        :type HPHDat: OCC.wrapper.HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_PolyData_HPHDat(self, *args)


    def FaceIndex(self, *args):
        """
        FaceIndex(HLRAlgo_PolyData self, Standard_Integer const I)
        FaceIndex(HLRAlgo_PolyData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_PolyData_FaceIndex(self, *args)


    def Nodes(self, *args):
        """
        Nodes(HLRAlgo_PolyData self) -> NCollection_Array1_gp_XYZ

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXYZ

        """
        return _HLRAlgo.HLRAlgo_PolyData_Nodes(self, *args)


    def TData(self, *args):
        """
        TData(HLRAlgo_PolyData self) -> NCollection_Array1_HLRAlgo_TriangleData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_PolyData_TData(self, *args)


    def PHDat(self, *args):
        """
        PHDat(HLRAlgo_PolyData self) -> NCollection_Array1_HLRAlgo_PolyHidingData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_PolyData_PHDat(self, *args)


    def UpdateGlobalMinMax(self, *args):
        """
        UpdateGlobalMinMax(HLRAlgo_PolyData self, HLRAlgo_PolyData::Box & theBox)

        :type theBox: Box

        """
        return _HLRAlgo.HLRAlgo_PolyData_UpdateGlobalMinMax(self, *args)


    def Hiding(self, *args):
        """
        Hiding(HLRAlgo_PolyData self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.HLRAlgo_PolyData_Hiding(self, *args)


    def HideByPolyData(self, *args):
        """
        HideByPolyData(HLRAlgo_PolyData self, HLRAlgo_BiPoint::PointsT const & thePoints, HLRAlgo_PolyData::Triangle & theTriangle, HLRAlgo_BiPoint::IndicesT & theIndices, Standard_Boolean const HidingShell, HLRAlgo_EdgeStatus status)

        process hiding between <Pt1> and <Pt2>.

        :type thePoints: PointsT
        :type theTriangle: Triangle
        :type theIndices: IndicesT
        :type HidingShell: bool
        :type status: OCC.wrapper.HLRAlgo.HLRAlgo_EdgeStatus

        """
        return _HLRAlgo.HLRAlgo_PolyData_HideByPolyData(self, *args)


    def Indices(self, *args):
        """
        Indices(HLRAlgo_PolyData self) -> HLRAlgo_PolyData::FaceIndices &

        :rtype: FaceIndices

        """
        return _HLRAlgo.HLRAlgo_PolyData_Indices(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_PolyData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_PolyData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_PolyData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyData
HLRAlgo_PolyData_swigregister = _HLRAlgo.HLRAlgo_PolyData_swigregister
HLRAlgo_PolyData_swigregister(HLRAlgo_PolyData)

def HLRAlgo_PolyData_get_type_name(*args):
    """
    HLRAlgo_PolyData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_PolyData_get_type_name(*args)

def HLRAlgo_PolyData_get_type_descriptor(*args):
    """
    HLRAlgo_PolyData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_PolyData_get_type_descriptor(*args)

class Handle_HLRAlgo_HArray1OfPINod(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_HArray1OfPINod self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_HArray1OfPINod self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_HArray1OfPINod self, HLRAlgo_HArray1OfPINod thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_HArray1OfPINod self, Handle_HLRAlgo_HArray1OfPINod theHandle) -> Handle_HLRAlgo_HArray1OfPINod
        assign(Handle_HLRAlgo_HArray1OfPINod self, HLRAlgo_HArray1OfPINod thePtr) -> Handle_HLRAlgo_HArray1OfPINod
        assign(Handle_HLRAlgo_HArray1OfPINod self, Handle_HLRAlgo_HArray1OfPINod theHandle) -> Handle_HLRAlgo_HArray1OfPINod

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_HArray1OfPINod self) -> HLRAlgo_HArray1OfPINod

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_HArray1OfPINod self) -> HLRAlgo_HArray1OfPINod

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_HArray1OfPINod self) -> HLRAlgo_HArray1OfPINod

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_HArray1OfPINod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_HArray1OfPINod

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_HLRAlgo_HArray1OfPINod self) -> NCollection_Array1_Handle_HLRAlgo_PolyInternalNode

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_HArray1OfPINod self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_HArray1OfPINod self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_HArray1OfPINod self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_HArray1OfPINod self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_HArray1OfPINod self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_HArray1OfPINod self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_HArray1OfPINod self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_HArray1OfPINod self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_HArray1OfPINod self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_HArray1OfPINod self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DecrementRefCounter(self, *args)

Handle_HLRAlgo_HArray1OfPINod_swigregister = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_swigregister
Handle_HLRAlgo_HArray1OfPINod_swigregister(Handle_HLRAlgo_HArray1OfPINod)

def Handle_HLRAlgo_HArray1OfPINod_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast(thing)
Handle_HLRAlgo_HArray1OfPINod_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast

class Handle_HLRAlgo_HArray1OfPHDat(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_HArray1OfPHDat self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_HArray1OfPHDat self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_HArray1OfPHDat self, HLRAlgo_HArray1OfPHDat thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_HArray1OfPHDat self, Handle_HLRAlgo_HArray1OfPHDat theHandle) -> Handle_HLRAlgo_HArray1OfPHDat
        assign(Handle_HLRAlgo_HArray1OfPHDat self, HLRAlgo_HArray1OfPHDat thePtr) -> Handle_HLRAlgo_HArray1OfPHDat
        assign(Handle_HLRAlgo_HArray1OfPHDat self, Handle_HLRAlgo_HArray1OfPHDat theHandle) -> Handle_HLRAlgo_HArray1OfPHDat

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_HArray1OfPHDat self) -> HLRAlgo_HArray1OfPHDat

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_HArray1OfPHDat self) -> HLRAlgo_HArray1OfPHDat

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_HArray1OfPHDat self) -> HLRAlgo_HArray1OfPHDat

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_HArray1OfPHDat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_HArray1OfPHDat

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPHDat

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_HLRAlgo_HArray1OfPHDat self) -> NCollection_Array1_HLRAlgo_PolyHidingData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_HArray1OfPHDat self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_HArray1OfPHDat self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_HArray1OfPHDat self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_HArray1OfPHDat self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_HArray1OfPHDat self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_HArray1OfPHDat self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_HArray1OfPHDat self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_HArray1OfPHDat self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_HArray1OfPHDat self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_HArray1OfPHDat self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DecrementRefCounter(self, *args)

Handle_HLRAlgo_HArray1OfPHDat_swigregister = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_swigregister
Handle_HLRAlgo_HArray1OfPHDat_swigregister(Handle_HLRAlgo_HArray1OfPHDat)

def Handle_HLRAlgo_HArray1OfPHDat_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast(thing)
Handle_HLRAlgo_HArray1OfPHDat_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast

class HLRAlgo_PolyInternalData(Standard.Standard_Transient):
    """to Update OutLines."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_PolyInternalData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_PolyInternalData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_PolyInternalData self, Standard_Integer const nbNod, Standard_Integer const nbTri) -> HLRAlgo_PolyInternalData

        :type nbNod: int
        :type nbTri: int

        """
        this = _HLRAlgo.new_HLRAlgo_PolyInternalData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AddNode(self, *args):
        """
        AddNode(HLRAlgo_PolyInternalData self, HLRAlgo_PolyInternalNode::NodeData & Nod1RValues, HLRAlgo_PolyInternalNode::NodeData & Nod2RValues, HLRAlgo_Array1OfPINod *& PINod1, HLRAlgo_Array1OfPINod *& PINod2, Standard_Real const coef1, Standard_Real const X3, Standard_Real const Y3, Standard_Real const Z3) -> Standard_Integer

        :type Nod1RValues: NodeData
        :type Nod2RValues: NodeData
        :type PINod1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod
        :type PINod2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod
        :type coef1: float
        :type X3: float
        :type Y3: float
        :type Z3: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_AddNode(self, *args)


    def UpdateLinks(self, *args):
        """
        UpdateLinks(HLRAlgo_PolyInternalData self, HLRAlgo_Array1OfTData *& TData, HLRAlgo_Array1OfPISeg *& PISeg, HLRAlgo_Array1OfPINod *& PINod)
        UpdateLinks(HLRAlgo_PolyInternalData self, Standard_Integer const ip1, Standard_Integer const ip2, Standard_Integer const ip3, HLRAlgo_Array1OfTData *& TData1, HLRAlgo_Array1OfTData *& TData2, HLRAlgo_Array1OfPISeg *& PISeg1, HLRAlgo_Array1OfPISeg *& PISeg2, HLRAlgo_Array1OfPINod *& PINod1, HLRAlgo_Array1OfPINod *& PINod2)

        :type ip1: int
        :type ip2: int
        :type ip3: int
        :type TData1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData
        :type TData2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData
        :type PISeg1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg
        :type PISeg2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg
        :type PINod1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod
        :type PINod2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_UpdateLinks(self, *args)


    def Dump(self, *args):
        """Dump(HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_Dump(self, *args)


    def IncTData(self, *args):
        """
        IncTData(HLRAlgo_PolyInternalData self, HLRAlgo_Array1OfTData *& TData1, HLRAlgo_Array1OfTData *& TData2)

        :type TData1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData
        :type TData2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncTData(self, *args)


    def IncPISeg(self, *args):
        """
        IncPISeg(HLRAlgo_PolyInternalData self, HLRAlgo_Array1OfPISeg *& PISeg1, HLRAlgo_Array1OfPISeg *& PISeg2)

        :type PISeg1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg
        :type PISeg2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncPISeg(self, *args)


    def IncPINod(self, *args):
        """
        IncPINod(HLRAlgo_PolyInternalData self, HLRAlgo_Array1OfPINod *& PINod1, HLRAlgo_Array1OfPINod *& PINod2)

        :type PINod1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod
        :type PINod2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncPINod(self, *args)


    def DecTData(self, *args):
        """DecTData(HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecTData(self, *args)


    def DecPISeg(self, *args):
        """DecPISeg(HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecPISeg(self, *args)


    def DecPINod(self, *args):
        """DecPINod(HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecPINod(self, *args)


    def NbTData(self, *args):
        """
        NbTData(HLRAlgo_PolyInternalData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbTData(self, *args)


    def NbPISeg(self, *args):
        """
        NbPISeg(HLRAlgo_PolyInternalData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbPISeg(self, *args)


    def NbPINod(self, *args):
        """
        NbPINod(HLRAlgo_PolyInternalData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbPINod(self, *args)


    def Planar(self, *args):
        """
        Planar(HLRAlgo_PolyInternalData self) -> Standard_Boolean
        Planar(HLRAlgo_PolyInternalData self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_Planar(self, *args)


    def IntOutL(self, *args):
        """
        IntOutL(HLRAlgo_PolyInternalData self) -> Standard_Boolean
        IntOutL(HLRAlgo_PolyInternalData self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IntOutL(self, *args)


    def TData(self, *args):
        """
        TData(HLRAlgo_PolyInternalData self) -> NCollection_Array1_HLRAlgo_TriangleData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_TData(self, *args)


    def PISeg(self, *args):
        """
        PISeg(HLRAlgo_PolyInternalData self) -> NCollection_Array1_HLRAlgo_PolyInternalSegment

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_PISeg(self, *args)


    def PINod(self, *args):
        """
        PINod(HLRAlgo_PolyInternalData self) -> NCollection_Array1_Handle_HLRAlgo_PolyInternalNode

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_PINod(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_PolyInternalData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyInternalData
HLRAlgo_PolyInternalData_swigregister = _HLRAlgo.HLRAlgo_PolyInternalData_swigregister
HLRAlgo_PolyInternalData_swigregister(HLRAlgo_PolyInternalData)

def HLRAlgo_PolyInternalData_get_type_name(*args):
    """
    HLRAlgo_PolyInternalData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_PolyInternalData_get_type_name(*args)

def HLRAlgo_PolyInternalData_get_type_descriptor(*args):
    """
    HLRAlgo_PolyInternalData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_PolyInternalData_get_type_descriptor(*args)

class HLRAlgo_EdgeStatus(object):
    """
    This class describes the Hidden  Line status of an
    Edge. It contains :

    The Bounds of the Edge and their tolerances

    Two flags indicating if the edge is full visible
    or full hidden.

    The Sequence  of visible Intervals  on the Edge.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRAlgo_EdgeStatus self) -> HLRAlgo_EdgeStatus
        __init__(HLRAlgo_EdgeStatus self, Standard_Real const Start, Standard_ShortReal const TolStart, Standard_Real const End, Standard_ShortReal const TolEnd) -> HLRAlgo_EdgeStatus

        Creates a  new  EdgeStatus.  Default visible.  The
        Edge is   bounded by the  interval  <Start>, <End>
        with the tolerances <TolStart>, <TolEnd>.

        :type Start: float
        :type TolStart: float
        :type End: float
        :type TolEnd: float

        """
        this = _HLRAlgo.new_HLRAlgo_EdgeStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        """
        Initialize(HLRAlgo_EdgeStatus self, Standard_Real const Start, Standard_ShortReal const TolStart, Standard_Real const End, Standard_ShortReal const TolEnd)

        Initialize  an  EdgeStatus.  Default visible.  The
        Edge is   bounded by the  interval  <Start>, <End>
        with the tolerances <TolStart>, <TolEnd>.

        :type Start: float
        :type TolStart: float
        :type End: float
        :type TolEnd: float

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Initialize(self, *args)


    def Bounds(self, *args):
        """
        Bounds(HLRAlgo_EdgeStatus self)

        :type theStart: float
        :type theTolStart: float
        :type theEnd: float
        :type theTolEnd: float

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Bounds(self, *args)


    def NbVisiblePart(self, *args):
        """
        NbVisiblePart(HLRAlgo_EdgeStatus self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_NbVisiblePart(self, *args)


    def VisiblePart(self, *args):
        """
        VisiblePart(HLRAlgo_EdgeStatus self, Standard_Integer const Index)

        :type Index: int
        :type Start: float
        :type TolStart: float
        :type End: float
        :type TolEnd: float

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_VisiblePart(self, *args)


    def Hide(self, *args):
        """
        Hide(HLRAlgo_EdgeStatus self, Standard_Real const Start, Standard_ShortReal const TolStart, Standard_Real const End, Standard_ShortReal const TolEnd, Standard_Boolean const OnFace, Standard_Boolean const OnBoundary)

        Hides  the  interval  <Start>,    <End>   with the
        tolerances <TolStart>,  <TolEnd>. This interval is
        subtracted from the visible  parts.  If the hidden
        part is on ( or under ) the face the flag <OnFace>
        is True ( or False ).  If the hidden  part is on (
        or  inside  ) the boundary  of  the  face the flag
        <OnBoundary> is True ( or False ).

        :type Start: float
        :type TolStart: float
        :type End: float
        :type TolEnd: float
        :type OnFace: bool
        :type OnBoundary: bool

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Hide(self, *args)


    def HideAll(self, *args):
        """
        HideAll(HLRAlgo_EdgeStatus self)

        Hide the whole Edge.


        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_HideAll(self, *args)


    def ShowAll(self, *args):
        """
        ShowAll(HLRAlgo_EdgeStatus self)

        Show the whole Edge.


        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_ShowAll(self, *args)


    def AllHidden(self, *args):
        """
        AllHidden(HLRAlgo_EdgeStatus self) -> Standard_Boolean
        AllHidden(HLRAlgo_EdgeStatus self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_AllHidden(self, *args)


    def AllVisible(self, *args):
        """
        AllVisible(HLRAlgo_EdgeStatus self) -> Standard_Boolean
        AllVisible(HLRAlgo_EdgeStatus self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_AllVisible(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgeStatus
HLRAlgo_EdgeStatus_swigregister = _HLRAlgo.HLRAlgo_EdgeStatus_swigregister
HLRAlgo_EdgeStatus_swigregister(HLRAlgo_EdgeStatus)

class Handle_HLRAlgo_PolyData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_PolyData self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_PolyData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_PolyData self, HLRAlgo_PolyData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_PolyData self, Handle_HLRAlgo_PolyData theHandle) -> Handle_HLRAlgo_PolyData
        assign(Handle_HLRAlgo_PolyData self, HLRAlgo_PolyData thePtr) -> Handle_HLRAlgo_PolyData
        assign(Handle_HLRAlgo_PolyData self, Handle_HLRAlgo_PolyData theHandle) -> Handle_HLRAlgo_PolyData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_PolyData self) -> HLRAlgo_PolyData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_PolyData self) -> HLRAlgo_PolyData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_PolyData self) -> HLRAlgo_PolyData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_PolyData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_PolyData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_PolyData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyData_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_PolyData

    def HNodes(self, *args):
        """
        HNodes(Handle_HLRAlgo_PolyData self, Handle_TColgp_HArray1OfXYZ HNodes)

        :type HNodes: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_HNodes(self, *args)


    def HTData(self, *args):
        """
        HTData(Handle_HLRAlgo_PolyData self, Handle_HLRAlgo_HArray1OfTData HTData)

        :type HTData: OCC.wrapper.HLRAlgo.Handle_HLRAlgo_HArray1OfTData

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_HTData(self, *args)


    def HPHDat(self, *args):
        """
        HPHDat(Handle_HLRAlgo_PolyData self, Handle_HLRAlgo_HArray1OfPHDat HPHDat)

        :type HPHDat: OCC.wrapper.HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_HPHDat(self, *args)


    def FaceIndex(self, *args):
        """
        FaceIndex(Handle_HLRAlgo_PolyData self, Standard_Integer const I)
        FaceIndex(Handle_HLRAlgo_PolyData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_FaceIndex(self, *args)


    def Nodes(self, *args):
        """
        Nodes(Handle_HLRAlgo_PolyData self) -> NCollection_Array1_gp_XYZ

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXYZ

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_Nodes(self, *args)


    def TData(self, *args):
        """
        TData(Handle_HLRAlgo_PolyData self) -> NCollection_Array1_HLRAlgo_TriangleData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_TData(self, *args)


    def PHDat(self, *args):
        """
        PHDat(Handle_HLRAlgo_PolyData self) -> NCollection_Array1_HLRAlgo_PolyHidingData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_PHDat(self, *args)


    def UpdateGlobalMinMax(self, *args):
        """
        UpdateGlobalMinMax(Handle_HLRAlgo_PolyData self, HLRAlgo_PolyData::Box & theBox)

        :type theBox: Box

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_UpdateGlobalMinMax(self, *args)


    def Hiding(self, *args):
        """
        Hiding(Handle_HLRAlgo_PolyData self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_Hiding(self, *args)


    def HideByPolyData(self, *args):
        """
        HideByPolyData(Handle_HLRAlgo_PolyData self, HLRAlgo_BiPoint::PointsT const & thePoints, HLRAlgo_PolyData::Triangle & theTriangle, HLRAlgo_BiPoint::IndicesT & theIndices, Standard_Boolean const HidingShell, HLRAlgo_EdgeStatus status)

        process hiding between <Pt1> and <Pt2>.

        :type thePoints: PointsT
        :type theTriangle: Triangle
        :type theIndices: IndicesT
        :type HidingShell: bool
        :type status: OCC.wrapper.HLRAlgo.HLRAlgo_EdgeStatus

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_HideByPolyData(self, *args)


    def Indices(self, *args):
        """
        Indices(Handle_HLRAlgo_PolyData self) -> HLRAlgo_PolyData::FaceIndices &

        :rtype: FaceIndices

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_Indices(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_PolyData self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_PolyData self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_PolyData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_PolyData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_PolyData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_PolyData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_PolyData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_PolyData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_PolyData self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_PolyData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyData_DecrementRefCounter(self, *args)

Handle_HLRAlgo_PolyData_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyData_swigregister
Handle_HLRAlgo_PolyData_swigregister(Handle_HLRAlgo_PolyData)

def Handle_HLRAlgo_PolyData_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast(thing)
Handle_HLRAlgo_PolyData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast

class HLRAlgo_Interference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRAlgo_Interference self) -> HLRAlgo_Interference
        __init__(HLRAlgo_Interference self, HLRAlgo_Intersection Inters, HLRAlgo_Coincidence Bound, TopAbs_Orientation const Orient, TopAbs_Orientation const Trans, TopAbs_Orientation const BTrans) -> HLRAlgo_Interference

        :type Inters: OCC.wrapper.HLRAlgo.HLRAlgo_Intersection
        :type Bound: OCC.wrapper.HLRAlgo.HLRAlgo_Coincidence
        :type Orient: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type Trans: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type BTrans: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        this = _HLRAlgo.new_HLRAlgo_Interference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Intersection(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Intersection

        """
        res = _HLRAlgo.HLRAlgo_Interference_Intersection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeIntersection(self, *args):
        """
        ChangeIntersection(HLRAlgo_Interference self) -> HLRAlgo_Intersection

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Intersection

        """
        return _HLRAlgo.HLRAlgo_Interference_ChangeIntersection(self, *args)


    def Boundary(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Coincidence

        """
        res = _HLRAlgo.HLRAlgo_Interference_Boundary(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeBoundary(self, *args):
        """
        ChangeBoundary(HLRAlgo_Interference self) -> HLRAlgo_Coincidence

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Coincidence

        """
        return _HLRAlgo.HLRAlgo_Interference_ChangeBoundary(self, *args)


    def Orientation(self, *args):
        """
        Orientation(HLRAlgo_Interference self, TopAbs_Orientation const O)
        Orientation(HLRAlgo_Interference self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_Orientation(self, *args)


    def Transition(self, *args):
        """
        Transition(HLRAlgo_Interference self, TopAbs_Orientation const Tr)
        Transition(HLRAlgo_Interference self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_Transition(self, *args)


    def BoundaryTransition(self, *args):
        """
        BoundaryTransition(HLRAlgo_Interference self, TopAbs_Orientation const BTr)
        BoundaryTransition(HLRAlgo_Interference self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_BoundaryTransition(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Interference
HLRAlgo_Interference_swigregister = _HLRAlgo.HLRAlgo_Interference_swigregister
HLRAlgo_Interference_swigregister(HLRAlgo_Interference)

class Handle_HLRAlgo_WiresBlock(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_WiresBlock self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_WiresBlock self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_WiresBlock self, HLRAlgo_WiresBlock thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_WiresBlock self, Handle_HLRAlgo_WiresBlock theHandle) -> Handle_HLRAlgo_WiresBlock
        assign(Handle_HLRAlgo_WiresBlock self, HLRAlgo_WiresBlock thePtr) -> Handle_HLRAlgo_WiresBlock
        assign(Handle_HLRAlgo_WiresBlock self, Handle_HLRAlgo_WiresBlock theHandle) -> Handle_HLRAlgo_WiresBlock

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_WiresBlock self) -> HLRAlgo_WiresBlock

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_WiresBlock self) -> HLRAlgo_WiresBlock

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_WiresBlock self) -> HLRAlgo_WiresBlock

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_WiresBlock___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_WiresBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_WiresBlock

    def NbWires(self, *args):
        """
        NbWires(Handle_HLRAlgo_WiresBlock self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_NbWires(self, *args)


    def Set(self, *args):
        """
        Set(Handle_HLRAlgo_WiresBlock self, Standard_Integer const I, Handle_HLRAlgo_EdgesBlock W)

        :type I: int
        :type W: OCC.wrapper.HLRAlgo.Handle_HLRAlgo_EdgesBlock

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_Set(self, *args)


    def Wire(self, *args):
        """
        Wire(Handle_HLRAlgo_WiresBlock self, Standard_Integer const I) -> Handle_HLRAlgo_EdgesBlock

        :type I: int
        :rtype: OCC.wrapper.HLRAlgo.Handle_HLRAlgo_EdgesBlock

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_Wire(self, *args)


    def UpdateMinMax(self, *args):
        """
        UpdateMinMax(Handle_HLRAlgo_WiresBlock self, HLRAlgo_EdgesBlock::MinMaxIndices const & theMinMaxes)

        :type theMinMaxes: MinMaxIndices

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_UpdateMinMax(self, *args)


    def MinMax(self, *args):
        """
        MinMax(Handle_HLRAlgo_WiresBlock self) -> HLRAlgo_EdgesBlock::MinMaxIndices &

        :rtype: MinMaxIndices

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_MinMax(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_WiresBlock self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_WiresBlock_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_WiresBlock_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_WiresBlock self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_WiresBlock self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_WiresBlock self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_WiresBlock self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_WiresBlock self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_WiresBlock self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_WiresBlock self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_WiresBlock self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_WiresBlock self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_WiresBlock_DecrementRefCounter(self, *args)

Handle_HLRAlgo_WiresBlock_swigregister = _HLRAlgo.Handle_HLRAlgo_WiresBlock_swigregister
Handle_HLRAlgo_WiresBlock_swigregister(Handle_HLRAlgo_WiresBlock)

def Handle_HLRAlgo_WiresBlock_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast(thing)
Handle_HLRAlgo_WiresBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast

class Handle_HLRAlgo_PolyShellData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_PolyShellData self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_PolyShellData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_PolyShellData self, HLRAlgo_PolyShellData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_PolyShellData self, Handle_HLRAlgo_PolyShellData theHandle) -> Handle_HLRAlgo_PolyShellData
        assign(Handle_HLRAlgo_PolyShellData self, HLRAlgo_PolyShellData thePtr) -> Handle_HLRAlgo_PolyShellData
        assign(Handle_HLRAlgo_PolyShellData self, Handle_HLRAlgo_PolyShellData theHandle) -> Handle_HLRAlgo_PolyShellData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_PolyShellData self) -> HLRAlgo_PolyShellData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_PolyShellData self) -> HLRAlgo_PolyShellData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_PolyShellData self) -> HLRAlgo_PolyShellData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_PolyShellData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_PolyShellData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_PolyShellData

    def UpdateGlobalMinMax(self, *args):
        """
        UpdateGlobalMinMax(Handle_HLRAlgo_PolyShellData self, HLRAlgo_PolyData::Box & theBox)

        :type theBox: Box

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_UpdateGlobalMinMax(self, *args)


    def UpdateHiding(self, *args):
        """
        UpdateHiding(Handle_HLRAlgo_PolyShellData self, Standard_Integer const nbHiding)

        :type nbHiding: int

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_UpdateHiding(self, *args)


    def Hiding(self, *args):
        """
        Hiding(Handle_HLRAlgo_PolyShellData self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_Hiding(self, *args)


    def PolyData(self, *args):
        """
        PolyData(Handle_HLRAlgo_PolyShellData self) -> NCollection_Array1_Handle_Standard_Transient

        :rtype: OCC.wrapper.TColStd.TColStd_Array1OfTransient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_PolyData(self, *args)


    def HidingPolyData(self, *args):
        """
        HidingPolyData(Handle_HLRAlgo_PolyShellData self) -> NCollection_Array1_Handle_Standard_Transient

        :rtype: OCC.wrapper.TColStd.TColStd_Array1OfTransient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_HidingPolyData(self, *args)


    def Edges(self, *args):
        """
        Edges(Handle_HLRAlgo_PolyShellData self) -> HLRAlgo_ListOfBPoint &

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_ListOfBPoint

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_Edges(self, *args)


    def Indices(self, *args):
        """
        Indices(Handle_HLRAlgo_PolyShellData self) -> HLRAlgo_PolyShellData::ShellIndices &

        :rtype: ShellIndices

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_Indices(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_PolyShellData self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyShellData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyShellData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_PolyShellData self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_PolyShellData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_PolyShellData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_PolyShellData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_PolyShellData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_PolyShellData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_PolyShellData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_PolyShellData self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_PolyShellData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyShellData_DecrementRefCounter(self, *args)

Handle_HLRAlgo_PolyShellData_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyShellData_swigregister
Handle_HLRAlgo_PolyShellData_swigregister(Handle_HLRAlgo_PolyShellData)

def Handle_HLRAlgo_PolyShellData_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast(thing)
Handle_HLRAlgo_PolyShellData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast

class HLRAlgo_PolyInternalNode(Standard.Standard_Transient):
    """to Update OutLines."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_PolyInternalNode
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_PolyInternalNode(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_PolyInternalNode self) -> HLRAlgo_PolyInternalNode

        to Update OutLines.
        """
        this = _HLRAlgo.new_HLRAlgo_PolyInternalNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Indices(self, *args):
        """
        Indices(HLRAlgo_PolyInternalNode self) -> HLRAlgo_PolyInternalNode::NodeIndices &

        :rtype: NodeIndices

        """
        return _HLRAlgo.HLRAlgo_PolyInternalNode_Indices(self, *args)


    def Data(self, *args):
        """
        Data(HLRAlgo_PolyInternalNode self) -> HLRAlgo_PolyInternalNode::NodeData &

        :rtype: NodeData

        """
        return _HLRAlgo.HLRAlgo_PolyInternalNode_Data(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_PolyInternalNode_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_PolyInternalNode_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_PolyInternalNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyInternalNode
HLRAlgo_PolyInternalNode_swigregister = _HLRAlgo.HLRAlgo_PolyInternalNode_swigregister
HLRAlgo_PolyInternalNode_swigregister(HLRAlgo_PolyInternalNode)

def HLRAlgo_PolyInternalNode_get_type_name(*args):
    """
    HLRAlgo_PolyInternalNode_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_PolyInternalNode_get_type_name(*args)

def HLRAlgo_PolyInternalNode_get_type_descriptor(*args):
    """
    HLRAlgo_PolyInternalNode_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_PolyInternalNode_get_type_descriptor(*args)

class HLRAlgo_Intersection(object):
    """
    Describes  an intersection  on   an edge to  hide.
    Contains a parameter and   a state (ON =   on  the
    face, OUT = above the face, IN = under the Face)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRAlgo_Intersection self) -> HLRAlgo_Intersection
        __init__(HLRAlgo_Intersection self, TopAbs_Orientation const Ori, Standard_Integer const Lev, Standard_Integer const SegInd, Standard_Integer const Ind, Standard_Real const P, Standard_ShortReal const Tol, TopAbs_State const S) -> HLRAlgo_Intersection

        :type Ori: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type Lev: int
        :type SegInd: int
        :type Ind: int
        :type P: float
        :type Tol: float
        :type S: OCC.wrapper.TopAbs.TopAbs_State

        """
        this = _HLRAlgo.new_HLRAlgo_Intersection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Orientation(self, *args):
        """
        Orientation(HLRAlgo_Intersection self, TopAbs_Orientation const Ori)
        Orientation(HLRAlgo_Intersection self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Intersection_Orientation(self, *args)


    def Level(self, *args):
        """
        Level(HLRAlgo_Intersection self, Standard_Integer const Lev)
        Level(HLRAlgo_Intersection self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_Intersection_Level(self, *args)


    def SegIndex(self, *args):
        """
        SegIndex(HLRAlgo_Intersection self, Standard_Integer const SegInd)
        SegIndex(HLRAlgo_Intersection self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_Intersection_SegIndex(self, *args)


    def Index(self, *args):
        """
        Index(HLRAlgo_Intersection self, Standard_Integer const Ind)
        Index(HLRAlgo_Intersection self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_Intersection_Index(self, *args)


    def Parameter(self, *args):
        """
        Parameter(HLRAlgo_Intersection self, Standard_Real const P)
        Parameter(HLRAlgo_Intersection self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _HLRAlgo.HLRAlgo_Intersection_Parameter(self, *args)


    def Tolerance(self, *args):
        """
        Tolerance(HLRAlgo_Intersection self, Standard_ShortReal const T)
        Tolerance(HLRAlgo_Intersection self) -> Standard_ShortReal

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _HLRAlgo.HLRAlgo_Intersection_Tolerance(self, *args)


    def State(self, *args):
        """
        State(HLRAlgo_Intersection self, TopAbs_State const S)
        State(HLRAlgo_Intersection self) -> TopAbs_State

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _HLRAlgo.HLRAlgo_Intersection_State(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Intersection
HLRAlgo_Intersection_swigregister = _HLRAlgo.HLRAlgo_Intersection_swigregister
HLRAlgo_Intersection_swigregister(HLRAlgo_Intersection)

class HLRAlgo_Coincidence(object):
    """
    The Coincidence class is used in an Inteference to
    store informations on the "hiding" edge.

    2D  Data : The  tangent  and the  curvature of the
    projection of the edge  at the intersection point.
    This is necesserary  when the intersection  is  at
    the extremity of the edge.

    3D   Data  :  The   state of  the   edge  near the
    intersection   with  the face (before  and after).
    This is necessary  when the  intersection is  "ON"
    the face.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRAlgo_Coincidence self) -> HLRAlgo_Coincidence

        The Coincidence class is used in an Inteference to
        store informations on the "hiding" edge.

        2D  Data : The  tangent  and the  curvature of the
        projection of the edge  at the intersection point.
        This is necesserary  when the intersection  is  at
        the extremity of the edge.

        3D   Data  :  The   state of  the   edge  near the
        intersection   with  the face (before  and after).
        This is necessary  when the  intersection is  "ON"
        the face.
        """
        this = _HLRAlgo.new_HLRAlgo_Coincidence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set2D(self, *args):
        """
        Set2D(HLRAlgo_Coincidence self, Standard_Integer const FE, Standard_Real const Param)

        :type FE: int
        :type Param: float

        """
        return _HLRAlgo.HLRAlgo_Coincidence_Set2D(self, *args)


    def SetState3D(self, *args):
        """
        SetState3D(HLRAlgo_Coincidence self, TopAbs_State const stbef, TopAbs_State const staft)

        :type stbef: OCC.wrapper.TopAbs.TopAbs_State
        :type staft: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _HLRAlgo.HLRAlgo_Coincidence_SetState3D(self, *args)


    def Value2D(self, *args):
        """
        Value2D(HLRAlgo_Coincidence self)

        :type FE: int
        :type Param: float

        """
        return _HLRAlgo.HLRAlgo_Coincidence_Value2D(self, *args)


    def State3D(self, *args):
        """
        State3D(HLRAlgo_Coincidence self)

        :type stbef: OCC.wrapper.TopAbs.TopAbs_State
        :type staft: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _HLRAlgo.HLRAlgo_Coincidence_State3D(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Coincidence
HLRAlgo_Coincidence_swigregister = _HLRAlgo.HLRAlgo_Coincidence_swigregister
HLRAlgo_Coincidence_swigregister(HLRAlgo_Coincidence)

class HLRAlgo_BiPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRAlgo_BiPoint self) -> HLRAlgo_BiPoint
        __init__(HLRAlgo_BiPoint self, Standard_Real const X1, Standard_Real const Y1, Standard_Real const Z1, Standard_Real const X2, Standard_Real const Y2, Standard_Real const Z2, Standard_Real const XT1, Standard_Real const YT1, Standard_Real const ZT1, Standard_Real const XT2, Standard_Real const YT2, Standard_Real const ZT2, Standard_Integer const Index, Standard_Boolean const reg1, Standard_Boolean const regn, Standard_Boolean const outl, Standard_Boolean const intl) -> HLRAlgo_BiPoint
        __init__(HLRAlgo_BiPoint self, Standard_Real const X1, Standard_Real const Y1, Standard_Real const Z1, Standard_Real const X2, Standard_Real const Y2, Standard_Real const Z2, Standard_Real const XT1, Standard_Real const YT1, Standard_Real const ZT1, Standard_Real const XT2, Standard_Real const YT2, Standard_Real const ZT2, Standard_Integer const Index, Standard_Integer const flag) -> HLRAlgo_BiPoint
        __init__(HLRAlgo_BiPoint self, Standard_Real const X1, Standard_Real const Y1, Standard_Real const Z1, Standard_Real const X2, Standard_Real const Y2, Standard_Real const Z2, Standard_Real const XT1, Standard_Real const YT1, Standard_Real const ZT1, Standard_Real const XT2, Standard_Real const YT2, Standard_Real const ZT2, Standard_Integer const Index, Standard_Integer const i1, Standard_Integer const i1p1, Standard_Integer const i1p2, Standard_Boolean const reg1, Standard_Boolean const regn, Standard_Boolean const outl, Standard_Boolean const intl) -> HLRAlgo_BiPoint
        __init__(HLRAlgo_BiPoint self, Standard_Real const X1, Standard_Real const Y1, Standard_Real const Z1, Standard_Real const X2, Standard_Real const Y2, Standard_Real const Z2, Standard_Real const XT1, Standard_Real const YT1, Standard_Real const ZT1, Standard_Real const XT2, Standard_Real const YT2, Standard_Real const ZT2, Standard_Integer const Index, Standard_Integer const i1, Standard_Integer const i1p1, Standard_Integer const i1p2, Standard_Integer const flag) -> HLRAlgo_BiPoint
        __init__(HLRAlgo_BiPoint self, Standard_Real const X1, Standard_Real const Y1, Standard_Real const Z1, Standard_Real const X2, Standard_Real const Y2, Standard_Real const Z2, Standard_Real const XT1, Standard_Real const YT1, Standard_Real const ZT1, Standard_Real const XT2, Standard_Real const YT2, Standard_Real const ZT2, Standard_Integer const Index, Standard_Integer const i1, Standard_Integer const i1p1, Standard_Integer const i1p2, Standard_Integer const i2, Standard_Integer const i2p1, Standard_Integer const i2p2, Standard_Boolean const reg1, Standard_Boolean const regn, Standard_Boolean const outl, Standard_Boolean const intl) -> HLRAlgo_BiPoint
        __init__(HLRAlgo_BiPoint self, Standard_Real const X1, Standard_Real const Y1, Standard_Real const Z1, Standard_Real const X2, Standard_Real const Y2, Standard_Real const Z2, Standard_Real const XT1, Standard_Real const YT1, Standard_Real const ZT1, Standard_Real const XT2, Standard_Real const YT2, Standard_Real const ZT2, Standard_Integer const Index, Standard_Integer const i1, Standard_Integer const i1p1, Standard_Integer const i1p2, Standard_Integer const i2, Standard_Integer const i2p1, Standard_Integer const i2p2, Standard_Integer const flag) -> HLRAlgo_BiPoint

        :type X1: float
        :type Y1: float
        :type Z1: float
        :type X2: float
        :type Y2: float
        :type Z2: float
        :type XT1: float
        :type YT1: float
        :type ZT1: float
        :type XT2: float
        :type YT2: float
        :type ZT2: float
        :type Index: int
        :type i1: int
        :type i1p1: int
        :type i1p2: int
        :type i2: int
        :type i2p1: int
        :type i2p2: int
        :type flag: int

        """
        this = _HLRAlgo.new_HLRAlgo_BiPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Rg1Line(self, *args):
        """
        Rg1Line(HLRAlgo_BiPoint self) -> Standard_Boolean
        Rg1Line(HLRAlgo_BiPoint self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Rg1Line(self, *args)


    def RgNLine(self, *args):
        """
        RgNLine(HLRAlgo_BiPoint self) -> Standard_Boolean
        RgNLine(HLRAlgo_BiPoint self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_BiPoint_RgNLine(self, *args)


    def OutLine(self, *args):
        """
        OutLine(HLRAlgo_BiPoint self) -> Standard_Boolean
        OutLine(HLRAlgo_BiPoint self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_BiPoint_OutLine(self, *args)


    def IntLine(self, *args):
        """
        IntLine(HLRAlgo_BiPoint self) -> Standard_Boolean
        IntLine(HLRAlgo_BiPoint self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_BiPoint_IntLine(self, *args)


    def Hidden(self, *args):
        """
        Hidden(HLRAlgo_BiPoint self) -> Standard_Boolean
        Hidden(HLRAlgo_BiPoint self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Hidden(self, *args)


    def Indices(self, *args):
        """
        Indices(HLRAlgo_BiPoint self) -> HLRAlgo_BiPoint::IndicesT &

        :rtype: IndicesT

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Indices(self, *args)


    def Points(self, *args):
        """
        Points(HLRAlgo_BiPoint self) -> HLRAlgo_BiPoint::PointsT &

        :rtype: PointsT

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Points(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_BiPoint
HLRAlgo_BiPoint_swigregister = _HLRAlgo.HLRAlgo_BiPoint_swigregister
HLRAlgo_BiPoint_swigregister(HLRAlgo_BiPoint)

class NCollection_Array1_Handle_HLRAlgo_PolyInternalNode(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _HLRAlgo.new_NCollection_Array1_Handle_HLRAlgo_PolyInternalNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self, Handle_HLRAlgo_PolyInternalNode theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self, NCollection_Array1_Handle_HLRAlgo_PolyInternalNode theOther) -> NCollection_Array1_Handle_HLRAlgo_PolyInternalNode

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self, NCollection_Array1_Handle_HLRAlgo_PolyInternalNode theOther) -> NCollection_Array1_Handle_HLRAlgo_PolyInternalNode

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self, NCollection_Array1_Handle_HLRAlgo_PolyInternalNode theOther) -> NCollection_Array1_Handle_HLRAlgo_PolyInternalNode
        assign(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self, NCollection_Array1_Handle_HLRAlgo_PolyInternalNode theOther) -> NCollection_Array1_Handle_HLRAlgo_PolyInternalNode

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Handle_HLRAlgo_PolyInternalNode

        @return first element

        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self) -> Handle_HLRAlgo_PolyInternalNode

        @return last element

        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self, Standard_Integer const theIndex) -> Handle_HLRAlgo_PolyInternalNode

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self, Standard_Integer const theIndex, Handle_HLRAlgo_PolyInternalNode theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_Resize(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_NCollection_Array1_Handle_HLRAlgo_PolyInternalNode
NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_swigregister = _HLRAlgo.NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_swigregister
NCollection_Array1_Handle_HLRAlgo_PolyInternalNode_swigregister(NCollection_Array1_Handle_HLRAlgo_PolyInternalNode)


try:
	HLRAlgo_Array1OfPINod = NCollection_Array1_Handle_HLRAlgo_PolyInternalNode
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_HLRAlgo_PolyHidingData(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_HLRAlgo_PolyHidingData self) -> NCollection_Array1< HLRAlgo_PolyHidingData >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_HLRAlgo_PolyHidingData self) -> NCollection_Array1< HLRAlgo_PolyHidingData >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_HLRAlgo_PolyHidingData self) -> NCollection_Array1< HLRAlgo_PolyHidingData >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_HLRAlgo_PolyHidingData self) -> NCollection_Array1< HLRAlgo_PolyHidingData >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _HLRAlgo.new_NCollection_Array1_HLRAlgo_PolyHidingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_HLRAlgo_PolyHidingData self, HLRAlgo_PolyHidingData theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_HLRAlgo_PolyHidingData self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_HLRAlgo_PolyHidingData self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_HLRAlgo_PolyHidingData self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_HLRAlgo_PolyHidingData self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_HLRAlgo_PolyHidingData self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_HLRAlgo_PolyHidingData self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_HLRAlgo_PolyHidingData self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_HLRAlgo_PolyHidingData self, NCollection_Array1_HLRAlgo_PolyHidingData theOther) -> NCollection_Array1_HLRAlgo_PolyHidingData

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_HLRAlgo_PolyHidingData self, NCollection_Array1_HLRAlgo_PolyHidingData theOther) -> NCollection_Array1_HLRAlgo_PolyHidingData

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_HLRAlgo_PolyHidingData self, NCollection_Array1_HLRAlgo_PolyHidingData theOther) -> NCollection_Array1_HLRAlgo_PolyHidingData
        assign(NCollection_Array1_HLRAlgo_PolyHidingData self, NCollection_Array1_HLRAlgo_PolyHidingData theOther) -> NCollection_Array1_HLRAlgo_PolyHidingData

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_HLRAlgo_PolyHidingData self) -> HLRAlgo_PolyHidingData

        @return first element

        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_HLRAlgo_PolyHidingData self) -> HLRAlgo_PolyHidingData

        @return last element

        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_HLRAlgo_PolyHidingData self, Standard_Integer const theIndex) -> HLRAlgo_PolyHidingData

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_HLRAlgo_PolyHidingData self, Standard_Integer const theIndex, HLRAlgo_PolyHidingData theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_HLRAlgo_PolyHidingData self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_Resize(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_NCollection_Array1_HLRAlgo_PolyHidingData
NCollection_Array1_HLRAlgo_PolyHidingData_swigregister = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyHidingData_swigregister
NCollection_Array1_HLRAlgo_PolyHidingData_swigregister(NCollection_Array1_HLRAlgo_PolyHidingData)


try:
	HLRAlgo_Array1OfPHDat = NCollection_Array1_HLRAlgo_PolyHidingData
except NameError:
	pass # does not exist, probably ignored

class HLRAlgo_EdgeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRAlgo_EdgeIterator self) -> HLRAlgo_EdgeIterator

        Iterator  on the  visible or  hidden  parts of  an
        edge.


        """
        this = _HLRAlgo.new_HLRAlgo_EdgeIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitHidden(self, *args):
        """
        InitHidden(HLRAlgo_EdgeIterator self, HLRAlgo_EdgeStatus status)

        :type status: OCC.wrapper.HLRAlgo.HLRAlgo_EdgeStatus

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_InitHidden(self, *args)


    def MoreHidden(self, *args):
        """
        MoreHidden(HLRAlgo_EdgeIterator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_MoreHidden(self, *args)


    def NextHidden(self, *args):
        """NextHidden(HLRAlgo_EdgeIterator self)"""
        return _HLRAlgo.HLRAlgo_EdgeIterator_NextHidden(self, *args)


    def Hidden(self, *args):
        """
        Hidden(HLRAlgo_EdgeIterator self)

        Returns the bounds and the tolerances
        of the current Hidden Interval

        :type Start: float
        :type TolStart: float
        :type End: float
        :type TolEnd: float

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_Hidden(self, *args)


    def InitVisible(self, *args):
        """
        InitVisible(HLRAlgo_EdgeIterator self, HLRAlgo_EdgeStatus status)

        :type status: OCC.wrapper.HLRAlgo.HLRAlgo_EdgeStatus

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_InitVisible(self, *args)


    def MoreVisible(self, *args):
        """
        MoreVisible(HLRAlgo_EdgeIterator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_MoreVisible(self, *args)


    def NextVisible(self, *args):
        """NextVisible(HLRAlgo_EdgeIterator self)"""
        return _HLRAlgo.HLRAlgo_EdgeIterator_NextVisible(self, *args)


    def Visible(self, *args):
        """
        Visible(HLRAlgo_EdgeIterator self)

        Returns the bounds and the tolerances
        of the current Visible Interval

        :type Start: float
        :type TolStart: float
        :type End: float
        :type TolEnd: float

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_Visible(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgeIterator
HLRAlgo_EdgeIterator_swigregister = _HLRAlgo.HLRAlgo_EdgeIterator_swigregister
HLRAlgo_EdgeIterator_swigregister(HLRAlgo_EdgeIterator)

class HLRAlgo_Projector(object):
    """
    Implements a  projector object.
    To transform and project Points and Planes.
    This object is designed to be used in the
    removal of hidden lines and is returned by the
    Prs3d_Projector::Projector function.
    You define the projection of the selected shape
    by calling one of the following functions:
    -   HLRBRep_Algo::Projector, or
    -   HLRBRep_PolyAlgo::Projector
    The choice depends on the algorithm, which you are using.
    The parameters of the view are defined at the
    time of construction of a Prs3d_Projector object.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRAlgo_Projector self) -> HLRAlgo_Projector
        __init__(HLRAlgo_Projector self, gp_Ax2 CS) -> HLRAlgo_Projector
        __init__(HLRAlgo_Projector self, gp_Ax2 CS, Standard_Real const Focus) -> HLRAlgo_Projector
        __init__(HLRAlgo_Projector self, gp_Trsf T, Standard_Boolean const Persp, Standard_Real const Focus) -> HLRAlgo_Projector
        __init__(HLRAlgo_Projector self, gp_Trsf T, Standard_Boolean const Persp, Standard_Real const Focus, gp_Vec2d v1, gp_Vec2d v2, gp_Vec2d v3) -> HLRAlgo_Projector

        build a Projector with given minmax directions.

        :type T: OCC.wrapper.gp.gp_Trsf
        :type Persp: bool
        :type Focus: float
        :type v1: OCC.wrapper.gp.gp_Vec2d
        :type v2: OCC.wrapper.gp.gp_Vec2d
        :type v3: OCC.wrapper.gp.gp_Vec2d

        """
        this = _HLRAlgo.new_HLRAlgo_Projector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        """
        Set(HLRAlgo_Projector self, gp_Trsf T, Standard_Boolean const Persp, Standard_Real const Focus)

        :type T: OCC.wrapper.gp.gp_Trsf
        :type Persp: bool
        :type Focus: float

        """
        return _HLRAlgo.HLRAlgo_Projector_Set(self, *args)


    def Directions(self, *args):
        """
        Directions(HLRAlgo_Projector self, gp_Vec2d D1, gp_Vec2d D2, gp_Vec2d D3)

        :type D1: OCC.wrapper.gp.gp_Vec2d
        :type D2: OCC.wrapper.gp.gp_Vec2d
        :type D3: OCC.wrapper.gp.gp_Vec2d

        """
        return _HLRAlgo.HLRAlgo_Projector_Directions(self, *args)


    def Scaled(self, *args):
        """
        Scaled(HLRAlgo_Projector self, Standard_Boolean const On)

        to compute with the given scale and translation.

        :type On: bool

        """
        return _HLRAlgo.HLRAlgo_Projector_Scaled(self, *args)


    def Perspective(self, *args):
        """
        Perspective(HLRAlgo_Projector self) -> Standard_Boolean

        Returns True if there is a perspective transformation.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.HLRAlgo_Projector_Perspective(self, *args)


    def Transformation(self, *args):
        """
        Returns the active transformation.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _HLRAlgo.HLRAlgo_Projector_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InvertedTransformation(self, *args):
        """
        Returns the active inverted transformation.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _HLRAlgo.HLRAlgo_Projector_InvertedTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FullTransformation(self, *args):
        """
        Returns the original transformation.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _HLRAlgo.HLRAlgo_Projector_FullTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Focus(self, *args):
        """
        Focus(HLRAlgo_Projector self) -> Standard_Real

        Returns the focal length.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _HLRAlgo.HLRAlgo_Projector_Focus(self, *args)


    def Transform(self, *args):
        """
        Transform(HLRAlgo_Projector self, gp_Vec D)
        Transform(HLRAlgo_Projector self, gp_Pnt Pnt)

        :type Pnt: OCC.wrapper.gp.gp_Pnt

        """
        return _HLRAlgo.HLRAlgo_Projector_Transform(self, *args)


    def Project(self, *args):
        """
        Project(HLRAlgo_Projector self, gp_Pnt P, gp_Pnt2d Pout)
        Project(HLRAlgo_Projector self, gp_Pnt P)
        Project(HLRAlgo_Projector self, gp_Pnt P, gp_Vec D1, gp_Pnt2d Pout, gp_Vec2d D1out)

        Transform and apply perspective if needed.

        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1: OCC.wrapper.gp.gp_Vec
        :type Pout: OCC.wrapper.gp.gp_Pnt2d
        :type D1out: OCC.wrapper.gp.gp_Vec2d

        """
        return _HLRAlgo.HLRAlgo_Projector_Project(self, *args)


    def Shoot(self, *args):
        """
        Shoot(HLRAlgo_Projector self, Standard_Real const X, Standard_Real const Y) -> gp_Lin

        return a line going through the eye towards the
        2d point <X,Y>.

        :type X: float
        :type Y: float
        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _HLRAlgo.HLRAlgo_Projector_Shoot(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Projector
HLRAlgo_Projector_swigregister = _HLRAlgo.HLRAlgo_Projector_swigregister
HLRAlgo_Projector_swigregister(HLRAlgo_Projector)

class Handle_HLRAlgo_PolyInternalData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_PolyInternalData self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_PolyInternalData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_PolyInternalData self, HLRAlgo_PolyInternalData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_PolyInternalData self, Handle_HLRAlgo_PolyInternalData theHandle) -> Handle_HLRAlgo_PolyInternalData
        assign(Handle_HLRAlgo_PolyInternalData self, HLRAlgo_PolyInternalData thePtr) -> Handle_HLRAlgo_PolyInternalData
        assign(Handle_HLRAlgo_PolyInternalData self, Handle_HLRAlgo_PolyInternalData theHandle) -> Handle_HLRAlgo_PolyInternalData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_PolyInternalData self) -> HLRAlgo_PolyInternalData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_PolyInternalData self) -> HLRAlgo_PolyInternalData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_PolyInternalData self) -> HLRAlgo_PolyInternalData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_PolyInternalData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_PolyInternalData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_PolyInternalData

    def UpdateLinks(self, *args):
        """
        UpdateLinks(Handle_HLRAlgo_PolyInternalData self, HLRAlgo_Array1OfTData *& TData, HLRAlgo_Array1OfPISeg *& PISeg, HLRAlgo_Array1OfPINod *& PINod)
        UpdateLinks(Handle_HLRAlgo_PolyInternalData self, Standard_Integer const ip1, Standard_Integer const ip2, Standard_Integer const ip3, HLRAlgo_Array1OfTData *& TData1, HLRAlgo_Array1OfTData *& TData2, HLRAlgo_Array1OfPISeg *& PISeg1, HLRAlgo_Array1OfPISeg *& PISeg2, HLRAlgo_Array1OfPINod *& PINod1, HLRAlgo_Array1OfPINod *& PINod2)

        :type ip1: int
        :type ip2: int
        :type ip3: int
        :type TData1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData
        :type TData2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData
        :type PISeg1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg
        :type PISeg2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg
        :type PINod1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod
        :type PINod2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_UpdateLinks(self, *args)


    def AddNode(self, *args):
        """
        AddNode(Handle_HLRAlgo_PolyInternalData self, HLRAlgo_PolyInternalNode::NodeData & Nod1RValues, HLRAlgo_PolyInternalNode::NodeData & Nod2RValues, HLRAlgo_Array1OfPINod *& PINod1, HLRAlgo_Array1OfPINod *& PINod2, Standard_Real const coef1, Standard_Real const X3, Standard_Real const Y3, Standard_Real const Z3) -> Standard_Integer

        :type Nod1RValues: NodeData
        :type Nod2RValues: NodeData
        :type PINod1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod
        :type PINod2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod
        :type coef1: float
        :type X3: float
        :type Y3: float
        :type Z3: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_AddNode(self, *args)


    def Dump(self, *args):
        """Dump(Handle_HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Dump(self, *args)


    def IncTData(self, *args):
        """
        IncTData(Handle_HLRAlgo_PolyInternalData self, HLRAlgo_Array1OfTData *& TData1, HLRAlgo_Array1OfTData *& TData2)

        :type TData1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData
        :type TData2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IncTData(self, *args)


    def IncPISeg(self, *args):
        """
        IncPISeg(Handle_HLRAlgo_PolyInternalData self, HLRAlgo_Array1OfPISeg *& PISeg1, HLRAlgo_Array1OfPISeg *& PISeg2)

        :type PISeg1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg
        :type PISeg2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IncPISeg(self, *args)


    def IncPINod(self, *args):
        """
        IncPINod(Handle_HLRAlgo_PolyInternalData self, HLRAlgo_Array1OfPINod *& PINod1, HLRAlgo_Array1OfPINod *& PINod2)

        :type PINod1: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod
        :type PINod2: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IncPINod(self, *args)


    def DecTData(self, *args):
        """DecTData(Handle_HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DecTData(self, *args)


    def DecPISeg(self, *args):
        """DecPISeg(Handle_HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DecPISeg(self, *args)


    def DecPINod(self, *args):
        """DecPINod(Handle_HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DecPINod(self, *args)


    def NbTData(self, *args):
        """
        NbTData(Handle_HLRAlgo_PolyInternalData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_NbTData(self, *args)


    def NbPISeg(self, *args):
        """
        NbPISeg(Handle_HLRAlgo_PolyInternalData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_NbPISeg(self, *args)


    def NbPINod(self, *args):
        """
        NbPINod(Handle_HLRAlgo_PolyInternalData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_NbPINod(self, *args)


    def Planar(self, *args):
        """
        Planar(Handle_HLRAlgo_PolyInternalData self) -> Standard_Boolean
        Planar(Handle_HLRAlgo_PolyInternalData self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Planar(self, *args)


    def IntOutL(self, *args):
        """
        IntOutL(Handle_HLRAlgo_PolyInternalData self) -> Standard_Boolean
        IntOutL(Handle_HLRAlgo_PolyInternalData self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IntOutL(self, *args)


    def TData(self, *args):
        """
        TData(Handle_HLRAlgo_PolyInternalData self) -> NCollection_Array1_HLRAlgo_TriangleData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_TData(self, *args)


    def PISeg(self, *args):
        """
        PISeg(Handle_HLRAlgo_PolyInternalData self) -> NCollection_Array1_HLRAlgo_PolyInternalSegment

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_PISeg(self, *args)


    def PINod(self, *args):
        """
        PINod(Handle_HLRAlgo_PolyInternalData self) -> NCollection_Array1_Handle_HLRAlgo_PolyInternalNode

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_PINod(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_PolyInternalData self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_PolyInternalData self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_PolyInternalData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_PolyInternalData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_PolyInternalData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_PolyInternalData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_PolyInternalData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_PolyInternalData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_PolyInternalData self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_PolyInternalData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DecrementRefCounter(self, *args)

Handle_HLRAlgo_PolyInternalData_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_swigregister
Handle_HLRAlgo_PolyInternalData_swigregister(Handle_HLRAlgo_PolyInternalData)

def Handle_HLRAlgo_PolyInternalData_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast(thing)
Handle_HLRAlgo_PolyInternalData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast

class Handle_HLRAlgo_HArray1OfTData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_HArray1OfTData self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_HArray1OfTData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_HArray1OfTData self, HLRAlgo_HArray1OfTData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_HArray1OfTData self, Handle_HLRAlgo_HArray1OfTData theHandle) -> Handle_HLRAlgo_HArray1OfTData
        assign(Handle_HLRAlgo_HArray1OfTData self, HLRAlgo_HArray1OfTData thePtr) -> Handle_HLRAlgo_HArray1OfTData
        assign(Handle_HLRAlgo_HArray1OfTData self, Handle_HLRAlgo_HArray1OfTData theHandle) -> Handle_HLRAlgo_HArray1OfTData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_HArray1OfTData self) -> HLRAlgo_HArray1OfTData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_HArray1OfTData self) -> HLRAlgo_HArray1OfTData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_HArray1OfTData self) -> HLRAlgo_HArray1OfTData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_HArray1OfTData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_HArray1OfTData

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_HLRAlgo_HArray1OfTData self) -> NCollection_Array1_HLRAlgo_TriangleData

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_HArray1OfTData self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_HArray1OfTData self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_HArray1OfTData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_HArray1OfTData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_HArray1OfTData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_HArray1OfTData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_HArray1OfTData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_HArray1OfTData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_HArray1OfTData self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_HArray1OfTData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DecrementRefCounter(self, *args)

Handle_HLRAlgo_HArray1OfTData_swigregister = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_swigregister
Handle_HLRAlgo_HArray1OfTData_swigregister(Handle_HLRAlgo_HArray1OfTData)

def Handle_HLRAlgo_HArray1OfTData_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast(thing)
Handle_HLRAlgo_HArray1OfTData_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast

class NCollection_Array1_HLRAlgo_TriangleData(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_HLRAlgo_TriangleData self) -> NCollection_Array1< HLRAlgo_TriangleData >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_HLRAlgo_TriangleData self) -> NCollection_Array1< HLRAlgo_TriangleData >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_HLRAlgo_TriangleData self) -> NCollection_Array1< HLRAlgo_TriangleData >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_HLRAlgo_TriangleData self) -> NCollection_Array1< HLRAlgo_TriangleData >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _HLRAlgo.new_NCollection_Array1_HLRAlgo_TriangleData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_HLRAlgo_TriangleData self, HLRAlgo_TriangleData const & theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_HLRAlgo_TriangleData self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_HLRAlgo_TriangleData self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_HLRAlgo_TriangleData self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_HLRAlgo_TriangleData self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_HLRAlgo_TriangleData self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_HLRAlgo_TriangleData self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_HLRAlgo_TriangleData self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_HLRAlgo_TriangleData self, NCollection_Array1_HLRAlgo_TriangleData theOther) -> NCollection_Array1_HLRAlgo_TriangleData

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_HLRAlgo_TriangleData self, NCollection_Array1_HLRAlgo_TriangleData theOther) -> NCollection_Array1_HLRAlgo_TriangleData

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_HLRAlgo_TriangleData self, NCollection_Array1_HLRAlgo_TriangleData theOther) -> NCollection_Array1_HLRAlgo_TriangleData
        assign(NCollection_Array1_HLRAlgo_TriangleData self, NCollection_Array1_HLRAlgo_TriangleData theOther) -> NCollection_Array1_HLRAlgo_TriangleData

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_HLRAlgo_TriangleData self) -> HLRAlgo_TriangleData &

        @return first element

        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_HLRAlgo_TriangleData self) -> HLRAlgo_TriangleData &

        @return last element

        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_HLRAlgo_TriangleData self, Standard_Integer const theIndex) -> HLRAlgo_TriangleData &

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_HLRAlgo_TriangleData self, Standard_Integer const theIndex, HLRAlgo_TriangleData const & theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_HLRAlgo_TriangleData self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_Resize(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_NCollection_Array1_HLRAlgo_TriangleData
NCollection_Array1_HLRAlgo_TriangleData_swigregister = _HLRAlgo.NCollection_Array1_HLRAlgo_TriangleData_swigregister
NCollection_Array1_HLRAlgo_TriangleData_swigregister(NCollection_Array1_HLRAlgo_TriangleData)


try:
	HLRAlgo_Array1OfTData = NCollection_Array1_HLRAlgo_TriangleData
except NameError:
	pass # does not exist, probably ignored

class HLRAlgo_HArray1OfPISeg(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_HArray1OfPISeg
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_HArray1OfPISeg(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_HArray1OfPISeg self, Standard_Integer const theLower, Standard_Integer const theUpper) -> HLRAlgo_HArray1OfPISeg
        __init__(HLRAlgo_HArray1OfPISeg self, Standard_Integer const theLower, Standard_Integer const theUpper, HLRAlgo_Array1OfPISeg::value_type const & theValue) -> HLRAlgo_HArray1OfPISeg
        __init__(HLRAlgo_HArray1OfPISeg self, NCollection_Array1_HLRAlgo_PolyInternalSegment theOther) -> HLRAlgo_HArray1OfPISeg

        :type theOther: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        this = _HLRAlgo.new_HLRAlgo_HArray1OfPISeg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        res = _HLRAlgo.HLRAlgo_HArray1OfPISeg_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(HLRAlgo_HArray1OfPISeg self) -> NCollection_Array1_HLRAlgo_PolyInternalSegment

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_HArray1OfPISeg_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPISeg
HLRAlgo_HArray1OfPISeg_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPISeg_swigregister
HLRAlgo_HArray1OfPISeg_swigregister(HLRAlgo_HArray1OfPISeg)

def HLRAlgo_HArray1OfPISeg_get_type_name(*args):
    """
    HLRAlgo_HArray1OfPISeg_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_HArray1OfPISeg_get_type_name(*args)

def HLRAlgo_HArray1OfPISeg_get_type_descriptor(*args):
    """
    HLRAlgo_HArray1OfPISeg_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_HArray1OfPISeg_get_type_descriptor(*args)

class NCollection_List_HLRAlgo_Interference_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _HLRAlgo.new_NCollection_List_HLRAlgo_Interference_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRAlgo.delete_NCollection_List_HLRAlgo_Interference_IteratorHelper

    def __next__(self):
        return _HLRAlgo.NCollection_List_HLRAlgo_Interference_IteratorHelper___next__(self)
NCollection_List_HLRAlgo_Interference_IteratorHelper_swigregister = _HLRAlgo.NCollection_List_HLRAlgo_Interference_IteratorHelper_swigregister
NCollection_List_HLRAlgo_Interference_IteratorHelper_swigregister(NCollection_List_HLRAlgo_Interference_IteratorHelper)


try:
	HLRAlgo_InterferenceList = NCollection_List_HLRAlgo_Interference
except NameError:
	pass # does not exist, probably ignored

class Handle_HLRAlgo_HArray1OfPISeg(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_HArray1OfPISeg self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_HArray1OfPISeg self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_HArray1OfPISeg self, HLRAlgo_HArray1OfPISeg thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_HArray1OfPISeg self, Handle_HLRAlgo_HArray1OfPISeg theHandle) -> Handle_HLRAlgo_HArray1OfPISeg
        assign(Handle_HLRAlgo_HArray1OfPISeg self, HLRAlgo_HArray1OfPISeg thePtr) -> Handle_HLRAlgo_HArray1OfPISeg
        assign(Handle_HLRAlgo_HArray1OfPISeg self, Handle_HLRAlgo_HArray1OfPISeg theHandle) -> Handle_HLRAlgo_HArray1OfPISeg

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_HArray1OfPISeg self) -> HLRAlgo_HArray1OfPISeg

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_HArray1OfPISeg self) -> HLRAlgo_HArray1OfPISeg

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_HArray1OfPISeg self) -> HLRAlgo_HArray1OfPISeg

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_HArray1OfPISeg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_HArray1OfPISeg

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_HLRAlgo_HArray1OfPISeg self) -> NCollection_Array1_HLRAlgo_PolyInternalSegment

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_HArray1OfPISeg self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_HArray1OfPISeg self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_HArray1OfPISeg self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_HArray1OfPISeg self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_HArray1OfPISeg self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_HArray1OfPISeg self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_HArray1OfPISeg self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_HArray1OfPISeg self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_HArray1OfPISeg self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_HArray1OfPISeg self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DecrementRefCounter(self, *args)

Handle_HLRAlgo_HArray1OfPISeg_swigregister = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_swigregister
Handle_HLRAlgo_HArray1OfPISeg_swigregister(Handle_HLRAlgo_HArray1OfPISeg)

def Handle_HLRAlgo_HArray1OfPISeg_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast(thing)
Handle_HLRAlgo_HArray1OfPISeg_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast

class HLRAlgo_EdgesBlock(Standard.Standard_Transient):
    """
    An EdgesBlock is a set of Edges. It is used by the
    DataStructure to structure the Edges.

    An EdgesBlock contains :

    * An Array  of index of Edges.

    * An Array of flagsf ( Orientation
    OutLine
    Internal
    Double
    IsoLine)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRAlgo_EdgesBlock
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRAlgo_EdgesBlock(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRAlgo_EdgesBlock self, Standard_Integer const NbEdges) -> HLRAlgo_EdgesBlock

        Create a Block of Edges for a wire.

        :type NbEdges: int

        """
        this = _HLRAlgo.new_HLRAlgo_EdgesBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbEdges(self, *args):
        """
        NbEdges(HLRAlgo_EdgesBlock self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_NbEdges(self, *args)


    def Edge(self, *args):
        """
        Edge(HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Integer const EI)
        Edge(HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Integer

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Edge(self, *args)


    def Orientation(self, *args):
        """
        Orientation(HLRAlgo_EdgesBlock self, Standard_Integer const I, TopAbs_Orientation const Or)
        Orientation(HLRAlgo_EdgesBlock self, Standard_Integer const I) -> TopAbs_Orientation

        :type I: int
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Orientation(self, *args)


    def OutLine(self, *args):
        """
        OutLine(HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Boolean
        OutLine(HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Boolean const B)

        :type I: int
        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_OutLine(self, *args)


    def Internal(self, *args):
        """
        Internal(HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Boolean
        Internal(HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Boolean const B)

        :type I: int
        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Internal(self, *args)


    def Double(self, *args):
        """
        Double(HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Boolean
        Double(HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Boolean const B)

        :type I: int
        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Double(self, *args)


    def IsoLine(self, *args):
        """
        IsoLine(HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Boolean
        IsoLine(HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Boolean const B)

        :type I: int
        :type B: bool

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_IsoLine(self, *args)


    def UpdateMinMax(self, *args):
        """
        UpdateMinMax(HLRAlgo_EdgesBlock self, HLRAlgo_EdgesBlock::MinMaxIndices const & TotMinMax)

        :type TotMinMax: MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_UpdateMinMax(self, *args)


    def MinMax(self, *args):
        """
        MinMax(HLRAlgo_EdgesBlock self) -> HLRAlgo_EdgesBlock::MinMaxIndices &

        :rtype: MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_MinMax(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.HLRAlgo_EdgesBlock_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgesBlock
HLRAlgo_EdgesBlock_swigregister = _HLRAlgo.HLRAlgo_EdgesBlock_swigregister
HLRAlgo_EdgesBlock_swigregister(HLRAlgo_EdgesBlock)

def HLRAlgo_EdgesBlock_get_type_name(*args):
    """
    HLRAlgo_EdgesBlock_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRAlgo.HLRAlgo_EdgesBlock_get_type_name(*args)

def HLRAlgo_EdgesBlock_get_type_descriptor(*args):
    """
    HLRAlgo_EdgesBlock_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRAlgo.HLRAlgo_EdgesBlock_get_type_descriptor(*args)

class NCollection_List_HLRAlgo_BiPoint_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _HLRAlgo.new_NCollection_List_HLRAlgo_BiPoint_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRAlgo.delete_NCollection_List_HLRAlgo_BiPoint_IteratorHelper

    def __next__(self):
        return _HLRAlgo.NCollection_List_HLRAlgo_BiPoint_IteratorHelper___next__(self)
NCollection_List_HLRAlgo_BiPoint_IteratorHelper_swigregister = _HLRAlgo.NCollection_List_HLRAlgo_BiPoint_IteratorHelper_swigregister
NCollection_List_HLRAlgo_BiPoint_IteratorHelper_swigregister(NCollection_List_HLRAlgo_BiPoint_IteratorHelper)


try:
	HLRAlgo_ListOfBPoint = NCollection_List_HLRAlgo_BiPoint
except NameError:
	pass # does not exist, probably ignored

class Handle_HLRAlgo_PolyInternalNode(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_PolyInternalNode self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_PolyInternalNode self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_PolyInternalNode self, HLRAlgo_PolyInternalNode thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_PolyInternalNode self, Handle_HLRAlgo_PolyInternalNode theHandle) -> Handle_HLRAlgo_PolyInternalNode
        assign(Handle_HLRAlgo_PolyInternalNode self, HLRAlgo_PolyInternalNode thePtr) -> Handle_HLRAlgo_PolyInternalNode
        assign(Handle_HLRAlgo_PolyInternalNode self, Handle_HLRAlgo_PolyInternalNode theHandle) -> Handle_HLRAlgo_PolyInternalNode

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_PolyInternalNode self) -> HLRAlgo_PolyInternalNode

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_PolyInternalNode self) -> HLRAlgo_PolyInternalNode

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_PolyInternalNode self) -> HLRAlgo_PolyInternalNode

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_PolyInternalNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_PolyInternalNode

    def Indices(self, *args):
        """
        Indices(Handle_HLRAlgo_PolyInternalNode self) -> HLRAlgo_PolyInternalNode::NodeIndices &

        :rtype: NodeIndices

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Indices(self, *args)


    def Data(self, *args):
        """
        Data(Handle_HLRAlgo_PolyInternalNode self) -> HLRAlgo_PolyInternalNode::NodeData &

        :rtype: NodeData

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Data(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_PolyInternalNode self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_PolyInternalNode self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_PolyInternalNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_PolyInternalNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_PolyInternalNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_PolyInternalNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_PolyInternalNode self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_PolyInternalNode self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_PolyInternalNode self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_PolyInternalNode self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DecrementRefCounter(self, *args)

Handle_HLRAlgo_PolyInternalNode_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_swigregister
Handle_HLRAlgo_PolyInternalNode_swigregister(Handle_HLRAlgo_PolyInternalNode)

def Handle_HLRAlgo_PolyInternalNode_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast(thing)
Handle_HLRAlgo_PolyInternalNode_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast

class Handle_HLRAlgo_EdgesBlock(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRAlgo_EdgesBlock self)

        Nullify the handle


        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRAlgo_EdgesBlock self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRAlgo_EdgesBlock self, HLRAlgo_EdgesBlock thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRAlgo_EdgesBlock self, Handle_HLRAlgo_EdgesBlock theHandle) -> Handle_HLRAlgo_EdgesBlock
        assign(Handle_HLRAlgo_EdgesBlock self, HLRAlgo_EdgesBlock thePtr) -> Handle_HLRAlgo_EdgesBlock
        assign(Handle_HLRAlgo_EdgesBlock self, Handle_HLRAlgo_EdgesBlock theHandle) -> Handle_HLRAlgo_EdgesBlock

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRAlgo_EdgesBlock self) -> HLRAlgo_EdgesBlock

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRAlgo_EdgesBlock self) -> HLRAlgo_EdgesBlock

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRAlgo_EdgesBlock self) -> HLRAlgo_EdgesBlock

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock___ref__(self, *args)


    def __hash__(self):
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRAlgo.Handle_HLRAlgo_EdgesBlock___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRAlgo.new_Handle_HLRAlgo_EdgesBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast)
    __swig_destroy__ = _HLRAlgo.delete_Handle_HLRAlgo_EdgesBlock

    def NbEdges(self, *args):
        """
        NbEdges(Handle_HLRAlgo_EdgesBlock self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_NbEdges(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Integer const EI)
        Edge(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Integer

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Edge(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I, TopAbs_Orientation const Or)
        Orientation(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I) -> TopAbs_Orientation

        :type I: int
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Orientation(self, *args)


    def OutLine(self, *args):
        """
        OutLine(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Boolean
        OutLine(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Boolean const B)

        :type I: int
        :type B: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_OutLine(self, *args)


    def Internal(self, *args):
        """
        Internal(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Boolean
        Internal(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Boolean const B)

        :type I: int
        :type B: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Internal(self, *args)


    def Double(self, *args):
        """
        Double(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Boolean
        Double(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Boolean const B)

        :type I: int
        :type B: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Double(self, *args)


    def IsoLine(self, *args):
        """
        IsoLine(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I) -> Standard_Boolean
        IsoLine(Handle_HLRAlgo_EdgesBlock self, Standard_Integer const I, Standard_Boolean const B)

        :type I: int
        :type B: bool

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsoLine(self, *args)


    def UpdateMinMax(self, *args):
        """
        UpdateMinMax(Handle_HLRAlgo_EdgesBlock self, HLRAlgo_EdgesBlock::MinMaxIndices const & TotMinMax)

        :type TotMinMax: MinMaxIndices

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_UpdateMinMax(self, *args)


    def MinMax(self, *args):
        """
        MinMax(Handle_HLRAlgo_EdgesBlock self) -> HLRAlgo_EdgesBlock::MinMaxIndices &

        :rtype: MinMaxIndices

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_MinMax(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRAlgo_EdgesBlock self) -> char const *

        :rtype: const char *

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRAlgo_EdgesBlock self)

        Memory deallocator for transient classes


        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRAlgo_EdgesBlock self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRAlgo_EdgesBlock self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRAlgo_EdgesBlock self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRAlgo_EdgesBlock self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRAlgo_EdgesBlock self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRAlgo_EdgesBlock self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRAlgo_EdgesBlock self)

        Increments the reference counter of this object


        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRAlgo_EdgesBlock self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DecrementRefCounter(self, *args)

Handle_HLRAlgo_EdgesBlock_swigregister = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_swigregister
Handle_HLRAlgo_EdgesBlock_swigregister(Handle_HLRAlgo_EdgesBlock)

def Handle_HLRAlgo_EdgesBlock_DownCast(thing):
    return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast(thing)
Handle_HLRAlgo_EdgesBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast

class NCollection_Array1_HLRAlgo_PolyInternalSegment(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> NCollection_Array1< HLRAlgo_PolyInternalSegment >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> NCollection_Array1< HLRAlgo_PolyInternalSegment >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> NCollection_Array1< HLRAlgo_PolyInternalSegment >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> NCollection_Array1< HLRAlgo_PolyInternalSegment >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _HLRAlgo.new_NCollection_Array1_HLRAlgo_PolyInternalSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_HLRAlgo_PolyInternalSegment self, HLRAlgo_PolyInternalSegment const & theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_HLRAlgo_PolyInternalSegment self, NCollection_Array1_HLRAlgo_PolyInternalSegment theOther) -> NCollection_Array1_HLRAlgo_PolyInternalSegment

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_HLRAlgo_PolyInternalSegment self, NCollection_Array1_HLRAlgo_PolyInternalSegment theOther) -> NCollection_Array1_HLRAlgo_PolyInternalSegment

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_HLRAlgo_PolyInternalSegment self, NCollection_Array1_HLRAlgo_PolyInternalSegment theOther) -> NCollection_Array1_HLRAlgo_PolyInternalSegment
        assign(NCollection_Array1_HLRAlgo_PolyInternalSegment self, NCollection_Array1_HLRAlgo_PolyInternalSegment theOther) -> NCollection_Array1_HLRAlgo_PolyInternalSegment

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> HLRAlgo_PolyInternalSegment &

        @return first element

        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_HLRAlgo_PolyInternalSegment self) -> HLRAlgo_PolyInternalSegment &

        @return last element

        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_HLRAlgo_PolyInternalSegment self, Standard_Integer const theIndex) -> HLRAlgo_PolyInternalSegment &

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_HLRAlgo_PolyInternalSegment self, Standard_Integer const theIndex, HLRAlgo_PolyInternalSegment const & theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_HLRAlgo_PolyInternalSegment self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_Resize(self, *args)

    __swig_destroy__ = _HLRAlgo.delete_NCollection_Array1_HLRAlgo_PolyInternalSegment
NCollection_Array1_HLRAlgo_PolyInternalSegment_swigregister = _HLRAlgo.NCollection_Array1_HLRAlgo_PolyInternalSegment_swigregister
NCollection_Array1_HLRAlgo_PolyInternalSegment_swigregister(NCollection_Array1_HLRAlgo_PolyInternalSegment)


try:
	HLRAlgo_Array1OfPISeg = NCollection_Array1_HLRAlgo_PolyInternalSegment
except NameError:
	pass # does not exist, probably ignored



