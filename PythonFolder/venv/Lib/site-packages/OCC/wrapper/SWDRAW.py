# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SWDRAW')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SWDRAW')
    _SWDRAW = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SWDRAW', [dirname(__file__)])
        except ImportError:
            import _SWDRAW
            return _SWDRAW
        try:
            _mod = imp.load_module('_SWDRAW', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SWDRAW = swig_import_helper()
    del swig_import_helper
else:
    import _SWDRAW
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SWDRAW.delete_SwigPyIterator

    def value(self):
        return _SWDRAW.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SWDRAW.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SWDRAW.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SWDRAW.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SWDRAW.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SWDRAW.SwigPyIterator_copy(self)

    def next(self):
        return _SWDRAW.SwigPyIterator_next(self)

    def __next__(self):
        return _SWDRAW.SwigPyIterator___next__(self)

    def previous(self):
        return _SWDRAW.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SWDRAW.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SWDRAW.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SWDRAW.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SWDRAW.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SWDRAW.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SWDRAW.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SWDRAW.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SWDRAW.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SWDRAW.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_SWDRAW.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _SWDRAW.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SWDRAW.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _SWDRAW.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _SWDRAW.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _SWDRAW.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SWDRAW.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_SWDRAW.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _SWDRAW.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SWDRAW.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _SWDRAW.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _SWDRAW.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _SWDRAW.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _SWDRAW.ptr_to_number(item)
ptr_to_number = _SWDRAW.ptr_to_number

def HashCode(*args):
    return _SWDRAW.HashCode(*args)
HashCode = _SWDRAW.HashCode

def ptr_equal(a, b):
    return _SWDRAW.ptr_equal(a, b)
ptr_equal = _SWDRAW.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
class SWDRAW_ShapeUpgrade(object):
    """
    Contains commands to activate package ShapeUpgrade
    List of DRAW commands and corresponding functionalities:
    DT_ShapeDivide         - ShapeUpgrade_ShapeDivide
    DT_PlaneDividedFace    - ShapeUpgrade_PlaneDividedFace
    DT_PlaneGridShell      - ShapeUpgrade_PlaneGridShell
    DT_PlaneFaceCommon     - ShapeUpgrade_PlaneFaceCommon
    DT_Split2dCurve        - ShapeUpgrade_Split2dCurve
    DT_SplitCurve          - ShapeUpgrade_SplitCurve
    DT_SplitSurface        - ShapeUpgrade_SplitSurface
    DT_SupportModification - ShapeUpgrade_DataMapOfShapeSurface
    DT_Debug               - ShapeUpgrade::SetDebug
    shellsolid             - ShapeAnalysis_Shell/ShapeUpgrade_ShellSewing
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Loads commands defined in ShapeUpgrade

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW_ShapeUpgrade_InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def __init__(self):
        """
        Contains commands to activate package ShapeUpgrade
        List of DRAW commands and corresponding functionalities:
        DT_ShapeDivide         - ShapeUpgrade_ShapeDivide
        DT_PlaneDividedFace    - ShapeUpgrade_PlaneDividedFace
        DT_PlaneGridShell      - ShapeUpgrade_PlaneGridShell
        DT_PlaneFaceCommon     - ShapeUpgrade_PlaneFaceCommon
        DT_Split2dCurve        - ShapeUpgrade_Split2dCurve
        DT_SplitCurve          - ShapeUpgrade_SplitCurve
        DT_SplitSurface        - ShapeUpgrade_SplitSurface
        DT_SupportModification - ShapeUpgrade_DataMapOfShapeSurface
        DT_Debug               - ShapeUpgrade::SetDebug
        shellsolid             - ShapeAnalysis_Shell/ShapeUpgrade_ShellSewing
        """
        this = _SWDRAW.new_SWDRAW_ShapeUpgrade()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_ShapeUpgrade
SWDRAW_ShapeUpgrade_swigregister = _SWDRAW.SWDRAW_ShapeUpgrade_swigregister
SWDRAW_ShapeUpgrade_swigregister(SWDRAW_ShapeUpgrade)

def SWDRAW_ShapeUpgrade_InitCommands(*args):
    """
    SWDRAW_ShapeUpgrade_InitCommands(Draw_Interpretor theCommands)

    Loads commands defined in ShapeUpgrade

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW_ShapeUpgrade_InitCommands(*args)

class SWDRAW_ShapeTool(object):
    """
    Defines functions to control shapes (in way useful for XSTEP),
    additional features which should be basic, or call tools which
    are bound with transfer needs.
    But these functions work on shapes, geometry, nothing else
    (no file, no model, no entity)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Defines and loads all basic functions for SWDRAW on Shapes

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW_ShapeTool_InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def __init__(self):
        """
        Defines functions to control shapes (in way useful for XSTEP),
        additional features which should be basic, or call tools which
        are bound with transfer needs.
        But these functions work on shapes, geometry, nothing else
        (no file, no model, no entity)
        """
        this = _SWDRAW.new_SWDRAW_ShapeTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_ShapeTool
SWDRAW_ShapeTool_swigregister = _SWDRAW.SWDRAW_ShapeTool_swigregister
SWDRAW_ShapeTool_swigregister(SWDRAW_ShapeTool)

def SWDRAW_ShapeTool_InitCommands(*args):
    """
    SWDRAW_ShapeTool_InitCommands(Draw_Interpretor theCommands)

    Defines and loads all basic functions for SWDRAW on Shapes

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW_ShapeTool_InitCommands(*args)

class SWDRAW_(object):
    """
    Provides DRAW interface to the functionalities of Shape Healing
    toolkit (SHAPEWORKS Delivery Unit).

    Classes prefixed with Shape* corresponds to the packages of
    Shape Healing.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init(Draw_Interpretor theCommands)

        Loads commands defined in SWDRAW

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW__Init(*args)

    Init = staticmethod(Init)

    def __init__(self):
        """
        Provides DRAW interface to the functionalities of Shape Healing
        toolkit (SHAPEWORKS Delivery Unit).

        Classes prefixed with Shape* corresponds to the packages of
        Shape Healing.
        """
        this = _SWDRAW.new_SWDRAW_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_
SWDRAW__swigregister = _SWDRAW.SWDRAW__swigregister
SWDRAW__swigregister(SWDRAW_)

def SWDRAW__Init(*args):
    """
    SWDRAW__Init(Draw_Interpretor theCommands)

    Loads commands defined in SWDRAW

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW__Init(*args)

class SWDRAW_ShapeCustom(object):
    """
    Contains commands to activate package ShapeCustom
    List of DRAW commands and corresponding functionalities:
    directfaces - ShapeCustom::DirectFaces
    scaleshape  - ShapeCustom::ScaleShape
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Loads commands defined in ShapeCustom

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW_ShapeCustom_InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def __init__(self):
        """
        Contains commands to activate package ShapeCustom
        List of DRAW commands and corresponding functionalities:
        directfaces - ShapeCustom::DirectFaces
        scaleshape  - ShapeCustom::ScaleShape
        """
        this = _SWDRAW.new_SWDRAW_ShapeCustom()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_ShapeCustom
SWDRAW_ShapeCustom_swigregister = _SWDRAW.SWDRAW_ShapeCustom_swigregister
SWDRAW_ShapeCustom_swigregister(SWDRAW_ShapeCustom)

def SWDRAW_ShapeCustom_InitCommands(*args):
    """
    SWDRAW_ShapeCustom_InitCommands(Draw_Interpretor theCommands)

    Loads commands defined in ShapeCustom

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW_ShapeCustom_InitCommands(*args)

class SWDRAW_ShapeProcessAPI(object):
    """Contains commands to activate package ShapeProcessAPI"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Loads commands defined in ShapeProcessAPI

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW_ShapeProcessAPI_InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def __init__(self):
        """Contains commands to activate package ShapeProcessAPI"""
        this = _SWDRAW.new_SWDRAW_ShapeProcessAPI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_ShapeProcessAPI
SWDRAW_ShapeProcessAPI_swigregister = _SWDRAW.SWDRAW_ShapeProcessAPI_swigregister
SWDRAW_ShapeProcessAPI_swigregister(SWDRAW_ShapeProcessAPI)

def SWDRAW_ShapeProcessAPI_InitCommands(*args):
    """
    SWDRAW_ShapeProcessAPI_InitCommands(Draw_Interpretor theCommands)

    Loads commands defined in ShapeProcessAPI

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW_ShapeProcessAPI_InitCommands(*args)

class SWDRAW_ShapeFix(object):
    """
    Contains commands to activate package ShapeFix
    List of DRAW commands and corresponding functionalities:
    edgesameparam - ShapeFix::SameParameter
    settolerance  - ShapeFix_ShapeTolerance
    stwire        - ShapeFix_Wire
    reface        - ShapeFix_Face
    repcurve      - ShapeFix_PCurves
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Loads commands defined in ShapeFix

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW_ShapeFix_InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def __init__(self):
        """
        Contains commands to activate package ShapeFix
        List of DRAW commands and corresponding functionalities:
        edgesameparam - ShapeFix::SameParameter
        settolerance  - ShapeFix_ShapeTolerance
        stwire        - ShapeFix_Wire
        reface        - ShapeFix_Face
        repcurve      - ShapeFix_PCurves
        """
        this = _SWDRAW.new_SWDRAW_ShapeFix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_ShapeFix
SWDRAW_ShapeFix_swigregister = _SWDRAW.SWDRAW_ShapeFix_swigregister
SWDRAW_ShapeFix_swigregister(SWDRAW_ShapeFix)

def SWDRAW_ShapeFix_InitCommands(*args):
    """
    SWDRAW_ShapeFix_InitCommands(Draw_Interpretor theCommands)

    Loads commands defined in ShapeFix

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW_ShapeFix_InitCommands(*args)

class SWDRAW_ShapeProcess(object):
    """Contains commands to activate package ShapeProcess"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Loads commands defined in ShapeProc

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW_ShapeProcess_InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def __init__(self):
        """Contains commands to activate package ShapeProcess"""
        this = _SWDRAW.new_SWDRAW_ShapeProcess()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_ShapeProcess
SWDRAW_ShapeProcess_swigregister = _SWDRAW.SWDRAW_ShapeProcess_swigregister
SWDRAW_ShapeProcess_swigregister(SWDRAW_ShapeProcess)

def SWDRAW_ShapeProcess_InitCommands(*args):
    """
    SWDRAW_ShapeProcess_InitCommands(Draw_Interpretor theCommands)

    Loads commands defined in ShapeProc

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW_ShapeProcess_InitCommands(*args)

class SWDRAW_ShapeAnalysis(object):
    """
    Contains commands to activate package ShapeAnalysis
    List of DRAW commands and corresponding functionalities:
    tolerance - ShapeAnalysis_ShapeTolerance
    projcurve - ShapeAnalysis_Curve
    projface  - ShapeAnalysis_Surface
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Loads commands defined in ShapeAnalysis

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW_ShapeAnalysis_InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def __init__(self):
        """
        Contains commands to activate package ShapeAnalysis
        List of DRAW commands and corresponding functionalities:
        tolerance - ShapeAnalysis_ShapeTolerance
        projcurve - ShapeAnalysis_Curve
        projface  - ShapeAnalysis_Surface
        """
        this = _SWDRAW.new_SWDRAW_ShapeAnalysis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_ShapeAnalysis
SWDRAW_ShapeAnalysis_swigregister = _SWDRAW.SWDRAW_ShapeAnalysis_swigregister
SWDRAW_ShapeAnalysis_swigregister(SWDRAW_ShapeAnalysis)

def SWDRAW_ShapeAnalysis_InitCommands(*args):
    """
    SWDRAW_ShapeAnalysis_InitCommands(Draw_Interpretor theCommands)

    Loads commands defined in ShapeAnalysis

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW_ShapeAnalysis_InitCommands(*args)

class SWDRAW_ShapeExtend(object):
    """
    Contains commands to activate package ShapeExtend
    List of DRAW commands and corresponding functionalities:
    sortcompound - ShapeExtend_Explorer::SortedCompound
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Loads commands defined in ShapeExtend

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _SWDRAW.SWDRAW_ShapeExtend_InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def __init__(self):
        """
        Contains commands to activate package ShapeExtend
        List of DRAW commands and corresponding functionalities:
        sortcompound - ShapeExtend_Explorer::SortedCompound
        """
        this = _SWDRAW.new_SWDRAW_ShapeExtend()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SWDRAW.delete_SWDRAW_ShapeExtend
SWDRAW_ShapeExtend_swigregister = _SWDRAW.SWDRAW_ShapeExtend_swigregister
SWDRAW_ShapeExtend_swigregister(SWDRAW_ShapeExtend)

def SWDRAW_ShapeExtend_InitCommands(*args):
    """
    SWDRAW_ShapeExtend_InitCommands(Draw_Interpretor theCommands)

    Loads commands defined in ShapeExtend

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _SWDRAW.SWDRAW_ShapeExtend_InitCommands(*args)



