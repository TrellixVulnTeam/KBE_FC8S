# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TColGeom2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TColGeom2d')
    _TColGeom2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TColGeom2d', [dirname(__file__)])
        except ImportError:
            import _TColGeom2d
            return _TColGeom2d
        try:
            _mod = imp.load_module('_TColGeom2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TColGeom2d = swig_import_helper()
    del swig_import_helper
else:
    import _TColGeom2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColGeom2d.delete_SwigPyIterator

    def value(self):
        return _TColGeom2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TColGeom2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TColGeom2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TColGeom2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TColGeom2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TColGeom2d.SwigPyIterator_copy(self)

    def next(self):
        return _TColGeom2d.SwigPyIterator_next(self)

    def __next__(self):
        return _TColGeom2d.SwigPyIterator___next__(self)

    def previous(self):
        return _TColGeom2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TColGeom2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TColGeom2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TColGeom2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TColGeom2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TColGeom2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TColGeom2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TColGeom2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TColGeom2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TColGeom2d.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TColGeom2d.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TColGeom2d.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TColGeom2d.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColGeom2d.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TColGeom2d.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TColGeom2d.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TColGeom2d.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TColGeom2d.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TColGeom2d.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TColGeom2d.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TColGeom2d.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColGeom2d.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TColGeom2d.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TColGeom2d.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TColGeom2d.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TColGeom2d.ptr_to_number(item)
ptr_to_number = _TColGeom2d.ptr_to_number

def HashCode(*args):
    return _TColGeom2d.HashCode(*args)
HashCode = _TColGeom2d.HashCode

def ptr_equal(a, b):
    return _TColGeom2d.ptr_equal(a, b)
ptr_equal = _TColGeom2d.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
class TColGeom2d_HArray1OfBSplineCurve(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColGeom2d_HArray1OfBSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColGeom2d_HArray1OfBSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColGeom2d_HArray1OfBSplineCurve self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColGeom2d_HArray1OfBSplineCurve
        __init__(TColGeom2d_HArray1OfBSplineCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_Geom2d_BSplineCurve theValue) -> TColGeom2d_HArray1OfBSplineCurve
        __init__(TColGeom2d_HArray1OfBSplineCurve self, NCollection_Array1_Handle_Geom2d_BSplineCurve theOther) -> TColGeom2d_HArray1OfBSplineCurve

        :type theOther: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBSplineCurve

        """
        this = _TColGeom2d.new_TColGeom2d_HArray1OfBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBSplineCurve

        """
        res = _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColGeom2d_HArray1OfBSplineCurve self) -> NCollection_Array1_Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBSplineCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfBSplineCurve
TColGeom2d_HArray1OfBSplineCurve_swigregister = _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_swigregister
TColGeom2d_HArray1OfBSplineCurve_swigregister(TColGeom2d_HArray1OfBSplineCurve)

def TColGeom2d_HArray1OfBSplineCurve_get_type_name(*args):
    """
    TColGeom2d_HArray1OfBSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_get_type_name(*args)

def TColGeom2d_HArray1OfBSplineCurve_get_type_descriptor(*args):
    """
    TColGeom2d_HArray1OfBSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_get_type_descriptor(*args)

class TColGeom2d_HSequenceOfCurve(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColGeom2d_HSequenceOfCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColGeom2d_HSequenceOfCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColGeom2d_HSequenceOfCurve self) -> TColGeom2d_HSequenceOfCurve
        __init__(TColGeom2d_HSequenceOfCurve self, NCollection_Sequence_Handle_Geom2d_Curve theOther) -> TColGeom2d_HSequenceOfCurve

        :type theOther: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        this = _TColGeom2d.new_TColGeom2d_HSequenceOfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        res = _TColGeom2d.TColGeom2d_HSequenceOfCurve_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColGeom2d_HSequenceOfCurve self, Handle_Geom2d_Curve theItem)
        Append(TColGeom2d_HSequenceOfCurve self, NCollection_Sequence_Handle_Geom2d_Curve theSequence)

        :type theSequence: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColGeom2d_HSequenceOfCurve self) -> NCollection_Sequence_Handle_Geom2d_Curve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.TColGeom2d_HSequenceOfCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HSequenceOfCurve
TColGeom2d_HSequenceOfCurve_swigregister = _TColGeom2d.TColGeom2d_HSequenceOfCurve_swigregister
TColGeom2d_HSequenceOfCurve_swigregister(TColGeom2d_HSequenceOfCurve)

def TColGeom2d_HSequenceOfCurve_get_type_name(*args):
    """
    TColGeom2d_HSequenceOfCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColGeom2d.TColGeom2d_HSequenceOfCurve_get_type_name(*args)

def TColGeom2d_HSequenceOfCurve_get_type_descriptor(*args):
    """
    TColGeom2d_HSequenceOfCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColGeom2d.TColGeom2d_HSequenceOfCurve_get_type_descriptor(*args)

class TColGeom2d_HArray1OfCurve(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColGeom2d_HArray1OfCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColGeom2d_HArray1OfCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColGeom2d_HArray1OfCurve self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColGeom2d_HArray1OfCurve
        __init__(TColGeom2d_HArray1OfCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_Geom2d_Curve theValue) -> TColGeom2d_HArray1OfCurve
        __init__(TColGeom2d_HArray1OfCurve self, NCollection_Array1_Handle_Geom2d_Curve theOther) -> TColGeom2d_HArray1OfCurve

        :type theOther: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfCurve

        """
        this = _TColGeom2d.new_TColGeom2d_HArray1OfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfCurve

        """
        res = _TColGeom2d.TColGeom2d_HArray1OfCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColGeom2d_HArray1OfCurve self) -> NCollection_Array1_Handle_Geom2d_Curve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.TColGeom2d_HArray1OfCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfCurve
TColGeom2d_HArray1OfCurve_swigregister = _TColGeom2d.TColGeom2d_HArray1OfCurve_swigregister
TColGeom2d_HArray1OfCurve_swigregister(TColGeom2d_HArray1OfCurve)

def TColGeom2d_HArray1OfCurve_get_type_name(*args):
    """
    TColGeom2d_HArray1OfCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColGeom2d.TColGeom2d_HArray1OfCurve_get_type_name(*args)

def TColGeom2d_HArray1OfCurve_get_type_descriptor(*args):
    """
    TColGeom2d_HArray1OfCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColGeom2d.TColGeom2d_HArray1OfCurve_get_type_descriptor(*args)

class Handle_TColGeom2d_HSequenceOfCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColGeom2d_HSequenceOfCurve self)

        Nullify the handle


        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColGeom2d_HSequenceOfCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColGeom2d_HSequenceOfCurve self, TColGeom2d_HSequenceOfCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColGeom2d_HSequenceOfCurve self, Handle_TColGeom2d_HSequenceOfCurve theHandle) -> Handle_TColGeom2d_HSequenceOfCurve
        assign(Handle_TColGeom2d_HSequenceOfCurve self, TColGeom2d_HSequenceOfCurve thePtr) -> Handle_TColGeom2d_HSequenceOfCurve
        assign(Handle_TColGeom2d_HSequenceOfCurve self, Handle_TColGeom2d_HSequenceOfCurve theHandle) -> Handle_TColGeom2d_HSequenceOfCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColGeom2d_HSequenceOfCurve self) -> TColGeom2d_HSequenceOfCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColGeom2d_HSequenceOfCurve self) -> TColGeom2d_HSequenceOfCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColGeom2d_HSequenceOfCurve self) -> TColGeom2d_HSequenceOfCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve___ref__(self, *args)


    def __hash__(self):
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColGeom2d.new_Handle_TColGeom2d_HSequenceOfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DownCast)
    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HSequenceOfCurve

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        res = _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColGeom2d_HSequenceOfCurve self, Handle_Geom2d_Curve theItem)
        Append(Handle_TColGeom2d_HSequenceOfCurve self, NCollection_Sequence_Handle_Geom2d_Curve theSequence)

        :type theSequence: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColGeom2d_HSequenceOfCurve self) -> NCollection_Sequence_Handle_Geom2d_Curve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColGeom2d_HSequenceOfCurve self) -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColGeom2d_HSequenceOfCurve self)

        Memory deallocator for transient classes


        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColGeom2d_HSequenceOfCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColGeom2d_HSequenceOfCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColGeom2d_HSequenceOfCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColGeom2d_HSequenceOfCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColGeom2d_HSequenceOfCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColGeom2d_HSequenceOfCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColGeom2d_HSequenceOfCurve self)

        Increments the reference counter of this object


        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColGeom2d_HSequenceOfCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DecrementRefCounter(self, *args)

Handle_TColGeom2d_HSequenceOfCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_swigregister
Handle_TColGeom2d_HSequenceOfCurve_swigregister(Handle_TColGeom2d_HSequenceOfCurve)

def Handle_TColGeom2d_HSequenceOfCurve_DownCast(thing):
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DownCast(thing)
Handle_TColGeom2d_HSequenceOfCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DownCast

class NCollection_Sequence_Handle_Geom2d_Geometry(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Geom2d_Geometry self) -> NCollection_Sequence< opencascade::handle< Geom2d_Geometry > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Geom2d_Geometry self) -> NCollection_Sequence< opencascade::handle< Geom2d_Geometry > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Geom2d_Geometry self) -> NCollection_Sequence< opencascade::handle< Geom2d_Geometry > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Geom2d_Geometry self) -> NCollection_Sequence< opencascade::handle< Geom2d_Geometry > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColGeom2d.new_NCollection_Sequence_Handle_Geom2d_Geometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Geom2d_Geometry self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Geom2d_Geometry self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Geom2d_Geometry self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Geom2d_Geometry self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Geom2d_Geometry self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Geom2d_Geometry self)

        Reverse sequence


        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Geom2d_Geometry self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Geom2d_Geometry self, NCollection_Sequence_Handle_Geom2d_Geometry theOther) -> NCollection_Sequence_Handle_Geom2d_Geometry

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Geom2d_Geometry self, NCollection_Sequence_Handle_Geom2d_Geometry theOther) -> NCollection_Sequence_Handle_Geom2d_Geometry

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Geom2d_Geometry self, NCollection_Sequence< opencascade::handle< Geom2d_Geometry > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Geom2d_Geometry self, Handle_Geom2d_Geometry theItem)
        Append(NCollection_Sequence_Handle_Geom2d_Geometry self, NCollection_Sequence_Handle_Geom2d_Geometry theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Geom2d_Geometry self, Handle_Geom2d_Geometry theItem)
        Prepend(NCollection_Sequence_Handle_Geom2d_Geometry self, NCollection_Sequence_Handle_Geom2d_Geometry theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theIndex, Handle_Geom2d_Geometry theItem)
        InsertBefore(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Geometry theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Geom2d_Geometry self, NCollection_Sequence< opencascade::handle< Geom2d_Geometry > >::Iterator & thePosition, Handle_Geom2d_Geometry theItem)
        InsertAfter(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Geometry theSeq)
        InsertAfter(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theIndex, Handle_Geom2d_Geometry theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Geometry theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Geom2d_Geometry self) -> Handle_Geom2d_Geometry

        First item access

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Geom2d_Geometry self) -> Handle_Geom2d_Geometry

        Last item access

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theIndex) -> Handle_Geom2d_Geometry

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Geom2d_Geometry self, Standard_Integer const theIndex, Handle_Geom2d_Geometry theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_SetValue(self, *args)


    def __iter__(self):
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry___iter__(self)
    __swig_destroy__ = _TColGeom2d.delete_NCollection_Sequence_Handle_Geom2d_Geometry
NCollection_Sequence_Handle_Geom2d_Geometry_swigregister = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_swigregister
NCollection_Sequence_Handle_Geom2d_Geometry_swigregister(NCollection_Sequence_Handle_Geom2d_Geometry)

def NCollection_Sequence_Handle_Geom2d_Geometry_delNode(*args):
    """
    NCollection_Sequence_Handle_Geom2d_Geometry_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_delNode(*args)

class NCollection_Sequence_Handle_Geom2d_Geometry_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColGeom2d.new_NCollection_Sequence_Handle_Geom2d_Geometry_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColGeom2d.delete_NCollection_Sequence_Handle_Geom2d_Geometry_IteratorHelper

    def __next__(self):
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Geom2d_Geometry_IteratorHelper_swigregister = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry_IteratorHelper_swigregister
NCollection_Sequence_Handle_Geom2d_Geometry_IteratorHelper_swigregister(NCollection_Sequence_Handle_Geom2d_Geometry_IteratorHelper)


try:
	TColGeom2d_SequenceOfGeometry = NCollection_Sequence_Handle_Geom2d_Geometry
except NameError:
	pass # does not exist, probably ignored

class Handle_TColGeom2d_HArray1OfBSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColGeom2d_HArray1OfBSplineCurve self)

        Nullify the handle


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColGeom2d_HArray1OfBSplineCurve self, TColGeom2d_HArray1OfBSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColGeom2d_HArray1OfBSplineCurve self, Handle_TColGeom2d_HArray1OfBSplineCurve theHandle) -> Handle_TColGeom2d_HArray1OfBSplineCurve
        assign(Handle_TColGeom2d_HArray1OfBSplineCurve self, TColGeom2d_HArray1OfBSplineCurve thePtr) -> Handle_TColGeom2d_HArray1OfBSplineCurve
        assign(Handle_TColGeom2d_HArray1OfBSplineCurve self, Handle_TColGeom2d_HArray1OfBSplineCurve theHandle) -> Handle_TColGeom2d_HArray1OfBSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> TColGeom2d_HArray1OfBSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> TColGeom2d_HArray1OfBSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> TColGeom2d_HArray1OfBSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColGeom2d.new_Handle_TColGeom2d_HArray1OfBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast)
    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HArray1OfBSplineCurve

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBSplineCurve

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> NCollection_Array1_Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBSplineCurve

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColGeom2d_HArray1OfBSplineCurve self)

        Memory deallocator for transient classes


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColGeom2d_HArray1OfBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColGeom2d_HArray1OfBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColGeom2d_HArray1OfBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColGeom2d_HArray1OfBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColGeom2d_HArray1OfBSplineCurve self)

        Increments the reference counter of this object


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColGeom2d_HArray1OfBSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DecrementRefCounter(self, *args)

Handle_TColGeom2d_HArray1OfBSplineCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_swigregister
Handle_TColGeom2d_HArray1OfBSplineCurve_swigregister(Handle_TColGeom2d_HArray1OfBSplineCurve)

def Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast(thing):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast(thing)
Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast

class NCollection_Array1_Handle_Geom2d_BSplineCurve(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BSplineCurve > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BSplineCurve > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BSplineCurve > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BSplineCurve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColGeom2d.new_NCollection_Array1_Handle_Geom2d_BSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_Geom2d_BSplineCurve self, Handle_Geom2d_BSplineCurve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_Geom2d_BSplineCurve self, NCollection_Array1_Handle_Geom2d_BSplineCurve theOther) -> NCollection_Array1_Handle_Geom2d_BSplineCurve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_Geom2d_BSplineCurve self, NCollection_Array1_Handle_Geom2d_BSplineCurve theOther) -> NCollection_Array1_Handle_Geom2d_BSplineCurve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_Geom2d_BSplineCurve self, NCollection_Array1_Handle_Geom2d_BSplineCurve theOther) -> NCollection_Array1_Handle_Geom2d_BSplineCurve
        assign(NCollection_Array1_Handle_Geom2d_BSplineCurve self, NCollection_Array1_Handle_Geom2d_BSplineCurve theOther) -> NCollection_Array1_Handle_Geom2d_BSplineCurve

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Handle_Geom2d_BSplineCurve

        @return first element

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_Geom2d_BSplineCurve self) -> Handle_Geom2d_BSplineCurve

        @return last element

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_Geom2d_BSplineCurve self, Standard_Integer const theIndex) -> Handle_Geom2d_BSplineCurve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_Geom2d_BSplineCurve self, Standard_Integer const theIndex, Handle_Geom2d_BSplineCurve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_Geom2d_BSplineCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_Resize(self, *args)

    __swig_destroy__ = _TColGeom2d.delete_NCollection_Array1_Handle_Geom2d_BSplineCurve
NCollection_Array1_Handle_Geom2d_BSplineCurve_swigregister = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BSplineCurve_swigregister
NCollection_Array1_Handle_Geom2d_BSplineCurve_swigregister(NCollection_Array1_Handle_Geom2d_BSplineCurve)


try:
	TColGeom2d_Array1OfBSplineCurve = NCollection_Array1_Handle_Geom2d_BSplineCurve
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_Handle_Geom2d_BezierCurve(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BezierCurve > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BezierCurve > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BezierCurve > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BezierCurve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColGeom2d.new_NCollection_Array1_Handle_Geom2d_BezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_Geom2d_BezierCurve self, Handle_Geom2d_BezierCurve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_Geom2d_BezierCurve self, NCollection_Array1_Handle_Geom2d_BezierCurve theOther) -> NCollection_Array1_Handle_Geom2d_BezierCurve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_Geom2d_BezierCurve self, NCollection_Array1_Handle_Geom2d_BezierCurve theOther) -> NCollection_Array1_Handle_Geom2d_BezierCurve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_Geom2d_BezierCurve self, NCollection_Array1_Handle_Geom2d_BezierCurve theOther) -> NCollection_Array1_Handle_Geom2d_BezierCurve
        assign(NCollection_Array1_Handle_Geom2d_BezierCurve self, NCollection_Array1_Handle_Geom2d_BezierCurve theOther) -> NCollection_Array1_Handle_Geom2d_BezierCurve

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Handle_Geom2d_BezierCurve

        @return first element

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_Geom2d_BezierCurve self) -> Handle_Geom2d_BezierCurve

        @return last element

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_Geom2d_BezierCurve self, Standard_Integer const theIndex) -> Handle_Geom2d_BezierCurve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_Geom2d_BezierCurve self, Standard_Integer const theIndex, Handle_Geom2d_BezierCurve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_Geom2d_BezierCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_Resize(self, *args)

    __swig_destroy__ = _TColGeom2d.delete_NCollection_Array1_Handle_Geom2d_BezierCurve
NCollection_Array1_Handle_Geom2d_BezierCurve_swigregister = _TColGeom2d.NCollection_Array1_Handle_Geom2d_BezierCurve_swigregister
NCollection_Array1_Handle_Geom2d_BezierCurve_swigregister(NCollection_Array1_Handle_Geom2d_BezierCurve)


try:
	TColGeom2d_Array1OfBezierCurve = NCollection_Array1_Handle_Geom2d_BezierCurve
except NameError:
	pass # does not exist, probably ignored

class Handle_TColGeom2d_HArray1OfCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColGeom2d_HArray1OfCurve self)

        Nullify the handle


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColGeom2d_HArray1OfCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColGeom2d_HArray1OfCurve self, TColGeom2d_HArray1OfCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColGeom2d_HArray1OfCurve self, Handle_TColGeom2d_HArray1OfCurve theHandle) -> Handle_TColGeom2d_HArray1OfCurve
        assign(Handle_TColGeom2d_HArray1OfCurve self, TColGeom2d_HArray1OfCurve thePtr) -> Handle_TColGeom2d_HArray1OfCurve
        assign(Handle_TColGeom2d_HArray1OfCurve self, Handle_TColGeom2d_HArray1OfCurve theHandle) -> Handle_TColGeom2d_HArray1OfCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColGeom2d_HArray1OfCurve self) -> TColGeom2d_HArray1OfCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColGeom2d_HArray1OfCurve self) -> TColGeom2d_HArray1OfCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColGeom2d_HArray1OfCurve self) -> TColGeom2d_HArray1OfCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve___ref__(self, *args)


    def __hash__(self):
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColGeom2d.new_Handle_TColGeom2d_HArray1OfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DownCast)
    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HArray1OfCurve

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfCurve

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColGeom2d_HArray1OfCurve self) -> NCollection_Array1_Handle_Geom2d_Curve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfCurve

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColGeom2d_HArray1OfCurve self) -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColGeom2d_HArray1OfCurve self)

        Memory deallocator for transient classes


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColGeom2d_HArray1OfCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColGeom2d_HArray1OfCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColGeom2d_HArray1OfCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColGeom2d_HArray1OfCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColGeom2d_HArray1OfCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColGeom2d_HArray1OfCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColGeom2d_HArray1OfCurve self)

        Increments the reference counter of this object


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColGeom2d_HArray1OfCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DecrementRefCounter(self, *args)

Handle_TColGeom2d_HArray1OfCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_swigregister
Handle_TColGeom2d_HArray1OfCurve_swigregister(Handle_TColGeom2d_HArray1OfCurve)

def Handle_TColGeom2d_HArray1OfCurve_DownCast(thing):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DownCast(thing)
Handle_TColGeom2d_HArray1OfCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DownCast

class NCollection_Array1_Handle_Geom2d_Curve(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_Geom2d_Curve self) -> NCollection_Array1< opencascade::handle< Geom2d_Curve > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_Geom2d_Curve self) -> NCollection_Array1< opencascade::handle< Geom2d_Curve > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_Geom2d_Curve self) -> NCollection_Array1< opencascade::handle< Geom2d_Curve > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_Geom2d_Curve self) -> NCollection_Array1< opencascade::handle< Geom2d_Curve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColGeom2d.new_NCollection_Array1_Handle_Geom2d_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_Geom2d_Curve self, Handle_Geom2d_Curve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_Geom2d_Curve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_Geom2d_Curve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_Geom2d_Curve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_Geom2d_Curve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_Geom2d_Curve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_Geom2d_Curve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_Geom2d_Curve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_Geom2d_Curve self, NCollection_Array1_Handle_Geom2d_Curve theOther) -> NCollection_Array1_Handle_Geom2d_Curve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_Geom2d_Curve self, NCollection_Array1_Handle_Geom2d_Curve theOther) -> NCollection_Array1_Handle_Geom2d_Curve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_Geom2d_Curve self, NCollection_Array1_Handle_Geom2d_Curve theOther) -> NCollection_Array1_Handle_Geom2d_Curve
        assign(NCollection_Array1_Handle_Geom2d_Curve self, NCollection_Array1_Handle_Geom2d_Curve theOther) -> NCollection_Array1_Handle_Geom2d_Curve

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_Geom2d_Curve self) -> Handle_Geom2d_Curve

        @return first element

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_Geom2d_Curve self) -> Handle_Geom2d_Curve

        @return last element

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_Geom2d_Curve self, Standard_Integer const theIndex) -> Handle_Geom2d_Curve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_Geom2d_Curve self, Standard_Integer const theIndex, Handle_Geom2d_Curve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_Geom2d_Curve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_Resize(self, *args)

    __swig_destroy__ = _TColGeom2d.delete_NCollection_Array1_Handle_Geom2d_Curve
NCollection_Array1_Handle_Geom2d_Curve_swigregister = _TColGeom2d.NCollection_Array1_Handle_Geom2d_Curve_swigregister
NCollection_Array1_Handle_Geom2d_Curve_swigregister(NCollection_Array1_Handle_Geom2d_Curve)


try:
	TColGeom2d_Array1OfCurve = NCollection_Array1_Handle_Geom2d_Curve
except NameError:
	pass # does not exist, probably ignored

class TColGeom2d_HSequenceOfBoundedCurve(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColGeom2d_HSequenceOfBoundedCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColGeom2d_HSequenceOfBoundedCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColGeom2d_HSequenceOfBoundedCurve self) -> TColGeom2d_HSequenceOfBoundedCurve
        __init__(TColGeom2d_HSequenceOfBoundedCurve self, NCollection_Sequence_Handle_Geom2d_BoundedCurve theOther) -> TColGeom2d_HSequenceOfBoundedCurve

        :type theOther: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfBoundedCurve

        """
        this = _TColGeom2d.new_TColGeom2d_HSequenceOfBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfBoundedCurve

        """
        res = _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColGeom2d_HSequenceOfBoundedCurve self, Handle_Geom2d_BoundedCurve theItem)
        Append(TColGeom2d_HSequenceOfBoundedCurve self, NCollection_Sequence_Handle_Geom2d_BoundedCurve theSequence)

        :type theSequence: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfBoundedCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColGeom2d_HSequenceOfBoundedCurve self) -> NCollection_Sequence_Handle_Geom2d_BoundedCurve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfBoundedCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HSequenceOfBoundedCurve
TColGeom2d_HSequenceOfBoundedCurve_swigregister = _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_swigregister
TColGeom2d_HSequenceOfBoundedCurve_swigregister(TColGeom2d_HSequenceOfBoundedCurve)

def TColGeom2d_HSequenceOfBoundedCurve_get_type_name(*args):
    """
    TColGeom2d_HSequenceOfBoundedCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_get_type_name(*args)

def TColGeom2d_HSequenceOfBoundedCurve_get_type_descriptor(*args):
    """
    TColGeom2d_HSequenceOfBoundedCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_get_type_descriptor(*args)

class NCollection_Sequence_Handle_Geom2d_BoundedCurve(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> NCollection_Sequence< opencascade::handle< Geom2d_BoundedCurve > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> NCollection_Sequence< opencascade::handle< Geom2d_BoundedCurve > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> NCollection_Sequence< opencascade::handle< Geom2d_BoundedCurve > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> NCollection_Sequence< opencascade::handle< Geom2d_BoundedCurve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColGeom2d.new_NCollection_Sequence_Handle_Geom2d_BoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Geom2d_BoundedCurve self)

        Reverse sequence


        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, NCollection_Sequence_Handle_Geom2d_BoundedCurve theOther) -> NCollection_Sequence_Handle_Geom2d_BoundedCurve

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, NCollection_Sequence_Handle_Geom2d_BoundedCurve theOther) -> NCollection_Sequence_Handle_Geom2d_BoundedCurve

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, NCollection_Sequence< opencascade::handle< Geom2d_BoundedCurve > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Handle_Geom2d_BoundedCurve theItem)
        Append(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, NCollection_Sequence_Handle_Geom2d_BoundedCurve theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Handle_Geom2d_BoundedCurve theItem)
        Prepend(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, NCollection_Sequence_Handle_Geom2d_BoundedCurve theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theIndex, Handle_Geom2d_BoundedCurve theItem)
        InsertBefore(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_BoundedCurve theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, NCollection_Sequence< opencascade::handle< Geom2d_BoundedCurve > >::Iterator & thePosition, Handle_Geom2d_BoundedCurve theItem)
        InsertAfter(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_BoundedCurve theSeq)
        InsertAfter(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theIndex, Handle_Geom2d_BoundedCurve theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_BoundedCurve theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> Handle_Geom2d_BoundedCurve

        First item access

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Geom2d_BoundedCurve self) -> Handle_Geom2d_BoundedCurve

        Last item access

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theIndex) -> Handle_Geom2d_BoundedCurve

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Geom2d_BoundedCurve self, Standard_Integer const theIndex, Handle_Geom2d_BoundedCurve theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_SetValue(self, *args)


    def __iter__(self):
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve___iter__(self)
    __swig_destroy__ = _TColGeom2d.delete_NCollection_Sequence_Handle_Geom2d_BoundedCurve
NCollection_Sequence_Handle_Geom2d_BoundedCurve_swigregister = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_swigregister
NCollection_Sequence_Handle_Geom2d_BoundedCurve_swigregister(NCollection_Sequence_Handle_Geom2d_BoundedCurve)

def NCollection_Sequence_Handle_Geom2d_BoundedCurve_delNode(*args):
    """
    NCollection_Sequence_Handle_Geom2d_BoundedCurve_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_delNode(*args)

class NCollection_Sequence_Handle_Geom2d_BoundedCurve_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColGeom2d.new_NCollection_Sequence_Handle_Geom2d_BoundedCurve_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColGeom2d.delete_NCollection_Sequence_Handle_Geom2d_BoundedCurve_IteratorHelper

    def __next__(self):
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Geom2d_BoundedCurve_IteratorHelper_swigregister = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_BoundedCurve_IteratorHelper_swigregister
NCollection_Sequence_Handle_Geom2d_BoundedCurve_IteratorHelper_swigregister(NCollection_Sequence_Handle_Geom2d_BoundedCurve_IteratorHelper)


try:
	TColGeom2d_SequenceOfBoundedCurve = NCollection_Sequence_Handle_Geom2d_BoundedCurve
except NameError:
	pass # does not exist, probably ignored

class TColGeom2d_HArray1OfBezierCurve(NCollection_Array1_Handle_Geom2d_BezierCurve, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColGeom2d_HArray1OfBezierCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColGeom2d_HArray1OfBezierCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColGeom2d_HArray1OfBezierCurve self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColGeom2d_HArray1OfBezierCurve
        __init__(TColGeom2d_HArray1OfBezierCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_Geom2d_BezierCurve theValue) -> TColGeom2d_HArray1OfBezierCurve
        __init__(TColGeom2d_HArray1OfBezierCurve self, NCollection_Array1_Handle_Geom2d_BezierCurve theOther) -> TColGeom2d_HArray1OfBezierCurve

        :type theOther: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBezierCurve

        """
        this = _TColGeom2d.new_TColGeom2d_HArray1OfBezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBezierCurve

        """
        res = _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColGeom2d_HArray1OfBezierCurve self) -> NCollection_Array1_Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBezierCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfBezierCurve
TColGeom2d_HArray1OfBezierCurve_swigregister = _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_swigregister
TColGeom2d_HArray1OfBezierCurve_swigregister(TColGeom2d_HArray1OfBezierCurve)

def TColGeom2d_HArray1OfBezierCurve_get_type_name(*args):
    """
    TColGeom2d_HArray1OfBezierCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_get_type_name(*args)

def TColGeom2d_HArray1OfBezierCurve_get_type_descriptor(*args):
    """
    TColGeom2d_HArray1OfBezierCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_get_type_descriptor(*args)

class NCollection_Sequence_Handle_Geom2d_Curve(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Geom2d_Curve self) -> NCollection_Sequence< opencascade::handle< Geom2d_Curve > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Geom2d_Curve self) -> NCollection_Sequence< opencascade::handle< Geom2d_Curve > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Geom2d_Curve self) -> NCollection_Sequence< opencascade::handle< Geom2d_Curve > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Geom2d_Curve self) -> NCollection_Sequence< opencascade::handle< Geom2d_Curve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColGeom2d.new_NCollection_Sequence_Handle_Geom2d_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Geom2d_Curve self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Geom2d_Curve self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Geom2d_Curve self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Geom2d_Curve self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Geom2d_Curve self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Geom2d_Curve self)

        Reverse sequence


        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Geom2d_Curve self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Geom2d_Curve self, NCollection_Sequence_Handle_Geom2d_Curve theOther) -> NCollection_Sequence_Handle_Geom2d_Curve

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Geom2d_Curve self, NCollection_Sequence_Handle_Geom2d_Curve theOther) -> NCollection_Sequence_Handle_Geom2d_Curve

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Geom2d_Curve self, NCollection_Sequence< opencascade::handle< Geom2d_Curve > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Geom2d_Curve self, Handle_Geom2d_Curve theItem)
        Append(NCollection_Sequence_Handle_Geom2d_Curve self, NCollection_Sequence_Handle_Geom2d_Curve theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Geom2d_Curve self, Handle_Geom2d_Curve theItem)
        Prepend(NCollection_Sequence_Handle_Geom2d_Curve self, NCollection_Sequence_Handle_Geom2d_Curve theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theIndex, Handle_Geom2d_Curve theItem)
        InsertBefore(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Curve theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Geom2d_Curve self, NCollection_Sequence< opencascade::handle< Geom2d_Curve > >::Iterator & thePosition, Handle_Geom2d_Curve theItem)
        InsertAfter(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Curve theSeq)
        InsertAfter(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theIndex, Handle_Geom2d_Curve theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Curve theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Geom2d_Curve self) -> Handle_Geom2d_Curve

        First item access

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Geom2d_Curve self) -> Handle_Geom2d_Curve

        Last item access

        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theIndex) -> Handle_Geom2d_Curve

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Geom2d_Curve self, Standard_Integer const theIndex, Handle_Geom2d_Curve theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_SetValue(self, *args)


    def __iter__(self):
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve___iter__(self)
    __swig_destroy__ = _TColGeom2d.delete_NCollection_Sequence_Handle_Geom2d_Curve
NCollection_Sequence_Handle_Geom2d_Curve_swigregister = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_swigregister
NCollection_Sequence_Handle_Geom2d_Curve_swigregister(NCollection_Sequence_Handle_Geom2d_Curve)

def NCollection_Sequence_Handle_Geom2d_Curve_delNode(*args):
    """
    NCollection_Sequence_Handle_Geom2d_Curve_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_delNode(*args)

class NCollection_Sequence_Handle_Geom2d_Curve_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColGeom2d.new_NCollection_Sequence_Handle_Geom2d_Curve_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColGeom2d.delete_NCollection_Sequence_Handle_Geom2d_Curve_IteratorHelper

    def __next__(self):
        return _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Geom2d_Curve_IteratorHelper_swigregister = _TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve_IteratorHelper_swigregister
NCollection_Sequence_Handle_Geom2d_Curve_IteratorHelper_swigregister(NCollection_Sequence_Handle_Geom2d_Curve_IteratorHelper)


try:
	TColGeom2d_SequenceOfCurve = NCollection_Sequence_Handle_Geom2d_Curve
except NameError:
	pass # does not exist, probably ignored

class Handle_TColGeom2d_HArray1OfBezierCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColGeom2d_HArray1OfBezierCurve self)

        Nullify the handle


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColGeom2d_HArray1OfBezierCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColGeom2d_HArray1OfBezierCurve self, TColGeom2d_HArray1OfBezierCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColGeom2d_HArray1OfBezierCurve self, Handle_TColGeom2d_HArray1OfBezierCurve theHandle) -> Handle_TColGeom2d_HArray1OfBezierCurve
        assign(Handle_TColGeom2d_HArray1OfBezierCurve self, TColGeom2d_HArray1OfBezierCurve thePtr) -> Handle_TColGeom2d_HArray1OfBezierCurve
        assign(Handle_TColGeom2d_HArray1OfBezierCurve self, Handle_TColGeom2d_HArray1OfBezierCurve theHandle) -> Handle_TColGeom2d_HArray1OfBezierCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColGeom2d_HArray1OfBezierCurve self) -> TColGeom2d_HArray1OfBezierCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColGeom2d_HArray1OfBezierCurve self) -> TColGeom2d_HArray1OfBezierCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColGeom2d_HArray1OfBezierCurve self) -> TColGeom2d_HArray1OfBezierCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve___ref__(self, *args)


    def __hash__(self):
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColGeom2d.new_Handle_TColGeom2d_HArray1OfBezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DownCast)
    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HArray1OfBezierCurve

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBezierCurve

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColGeom2d_HArray1OfBezierCurve self) -> NCollection_Array1_Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_Array1OfBezierCurve

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColGeom2d_HArray1OfBezierCurve self) -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_TColGeom2d_HArray1OfBezierCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BezierCurve > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_TColGeom2d_HArray1OfBezierCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BezierCurve > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_TColGeom2d_HArray1OfBezierCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BezierCurve > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_TColGeom2d_HArray1OfBezierCurve self) -> NCollection_Array1< opencascade::handle< Geom2d_BezierCurve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_TColGeom2d_HArray1OfBezierCurve self, Handle_Geom2d_BezierCurve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_TColGeom2d_HArray1OfBezierCurve self, NCollection_Array1_Handle_Geom2d_BezierCurve theOther) -> NCollection_Array1_Handle_Geom2d_BezierCurve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_TColGeom2d_HArray1OfBezierCurve self, NCollection_Array1_Handle_Geom2d_BezierCurve theOther) -> NCollection_Array1_Handle_Geom2d_BezierCurve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Handle_Geom2d_BezierCurve

        @return first element

        :rtype: TheItemType &

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Handle_Geom2d_BezierCurve

        @return last element

        :rtype: TheItemType &

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_TColGeom2d_HArray1OfBezierCurve self, Standard_Integer const theIndex) -> Handle_Geom2d_BezierCurve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_TColGeom2d_HArray1OfBezierCurve self, Standard_Integer const theIndex, Handle_Geom2d_BezierCurve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_TColGeom2d_HArray1OfBezierCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TColGeom2d_HArray1OfBezierCurve self)

        Memory deallocator for transient classes


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColGeom2d_HArray1OfBezierCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColGeom2d_HArray1OfBezierCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColGeom2d_HArray1OfBezierCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColGeom2d_HArray1OfBezierCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColGeom2d_HArray1OfBezierCurve self)

        Increments the reference counter of this object


        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColGeom2d_HArray1OfBezierCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DecrementRefCounter(self, *args)

Handle_TColGeom2d_HArray1OfBezierCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_swigregister
Handle_TColGeom2d_HArray1OfBezierCurve_swigregister(Handle_TColGeom2d_HArray1OfBezierCurve)

def Handle_TColGeom2d_HArray1OfBezierCurve_DownCast(thing):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DownCast(thing)
Handle_TColGeom2d_HArray1OfBezierCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DownCast

class Handle_TColGeom2d_HSequenceOfBoundedCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColGeom2d_HSequenceOfBoundedCurve self)

        Nullify the handle


        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColGeom2d_HSequenceOfBoundedCurve self, TColGeom2d_HSequenceOfBoundedCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColGeom2d_HSequenceOfBoundedCurve self, Handle_TColGeom2d_HSequenceOfBoundedCurve theHandle) -> Handle_TColGeom2d_HSequenceOfBoundedCurve
        assign(Handle_TColGeom2d_HSequenceOfBoundedCurve self, TColGeom2d_HSequenceOfBoundedCurve thePtr) -> Handle_TColGeom2d_HSequenceOfBoundedCurve
        assign(Handle_TColGeom2d_HSequenceOfBoundedCurve self, Handle_TColGeom2d_HSequenceOfBoundedCurve theHandle) -> Handle_TColGeom2d_HSequenceOfBoundedCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> TColGeom2d_HSequenceOfBoundedCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> TColGeom2d_HSequenceOfBoundedCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> TColGeom2d_HSequenceOfBoundedCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve___ref__(self, *args)


    def __hash__(self):
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColGeom2d.new_Handle_TColGeom2d_HSequenceOfBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast)
    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HSequenceOfBoundedCurve

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfBoundedCurve

        """
        res = _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColGeom2d_HSequenceOfBoundedCurve self, Handle_Geom2d_BoundedCurve theItem)
        Append(Handle_TColGeom2d_HSequenceOfBoundedCurve self, NCollection_Sequence_Handle_Geom2d_BoundedCurve theSequence)

        :type theSequence: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfBoundedCurve

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> NCollection_Sequence_Handle_Geom2d_BoundedCurve

        :rtype: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfBoundedCurve

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> char const *

        :rtype: const char *

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColGeom2d_HSequenceOfBoundedCurve self)

        Memory deallocator for transient classes


        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColGeom2d_HSequenceOfBoundedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColGeom2d_HSequenceOfBoundedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColGeom2d_HSequenceOfBoundedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColGeom2d_HSequenceOfBoundedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColGeom2d_HSequenceOfBoundedCurve self)

        Increments the reference counter of this object


        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColGeom2d_HSequenceOfBoundedCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DecrementRefCounter(self, *args)

Handle_TColGeom2d_HSequenceOfBoundedCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_swigregister
Handle_TColGeom2d_HSequenceOfBoundedCurve_swigregister(Handle_TColGeom2d_HSequenceOfBoundedCurve)

def Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast(thing):
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast(thing)
Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast



