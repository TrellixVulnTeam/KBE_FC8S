# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESData')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESData')
    _IGESData = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESData', [dirname(__file__)])
        except ImportError:
            import _IGESData
            return _IGESData
        try:
            _mod = imp.load_module('_IGESData', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESData = swig_import_helper()
    del swig_import_helper
else:
    import _IGESData
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESData.delete_SwigPyIterator

    def value(self):
        return _IGESData.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESData.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESData.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESData.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESData.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESData.SwigPyIterator_copy(self)

    def next(self):
        return _IGESData.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESData.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESData.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESData.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESData.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESData.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESData.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESData.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESData.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESData.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESData.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESData.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESData.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESData.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESData.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESData.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESData.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESData.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESData.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESData.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESData.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESData.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESData.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESData.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESData.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESData.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESData.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESData.ptr_to_number(item)
ptr_to_number = _IGESData.ptr_to_number

def HashCode(*args):
    return _IGESData.HashCode(*args)
HashCode = _IGESData.HashCode

def ptr_equal(a, b):
    return _IGESData.ptr_equal(a, b)
ptr_equal = _IGESData.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
IGESData_DefVoid = _IGESData.IGESData_DefVoid
IGESData_DefValue = _IGESData.IGESData_DefValue
IGESData_DefReference = _IGESData.IGESData_DefReference
IGESData_DefAny = _IGESData.IGESData_DefAny
IGESData_ErrorVal = _IGESData.IGESData_ErrorVal
IGESData_ErrorRef = _IGESData.IGESData_ErrorRef
IGESData_DefNone = _IGESData.IGESData_DefNone
IGESData_DefOne = _IGESData.IGESData_DefOne
IGESData_DefSeveral = _IGESData.IGESData_DefSeveral
IGESData_ErrorOne = _IGESData.IGESData_ErrorOne
IGESData_ErrorSeveral = _IGESData.IGESData_ErrorSeveral
IGESData_ReadDir = _IGESData.IGESData_ReadDir
IGESData_ReadOwn = _IGESData.IGESData_ReadOwn
IGESData_ReadAssocs = _IGESData.IGESData_ReadAssocs
IGESData_ReadProps = _IGESData.IGESData_ReadProps
IGESData_ReadEnd = _IGESData.IGESData_ReadEnd
IGESData_EntityOK = _IGESData.IGESData_EntityOK
IGESData_EntityError = _IGESData.IGESData_EntityError
IGESData_ReferenceError = _IGESData.IGESData_ReferenceError
IGESData_TypeError = _IGESData.IGESData_TypeError
class IGESData_IGESEntity(Standard.Standard_Transient):
    """
    defines root of IGES Entity definition, including Directory
    Part, lists of (optionnal) Properties and Associativities
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_IGESEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_IGESEntity(self) 
            return h


    def IGESType(self, *args):
        """
        IGESType(IGESData_IGESEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.IGESData_IGESEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESData_IGESEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(IGESData_IGESEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(IGESData_IGESEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(IGESData_IGESEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(IGESData_IGESEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(IGESData_IGESEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_IGESEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(IGESData_IGESEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(IGESData_IGESEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.IGESData_IGESEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(IGESData_IGESEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.IGESData_IGESEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(IGESData_IGESEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(IGESData_IGESEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.IGESData_IGESEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(IGESData_IGESEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.IGESData_IGESEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(IGESData_IGESEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.IGESData_IGESEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(IGESData_IGESEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.IGESData_IGESEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(IGESData_IGESEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.IGESData_IGESEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(IGESData_IGESEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.IGESData_IGESEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(IGESData_IGESEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.IGESData_IGESEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(IGESData_IGESEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(IGESData_IGESEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(IGESData_IGESEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(IGESData_IGESEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(IGESData_IGESEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(IGESData_IGESEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.IGESData_IGESEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(IGESData_IGESEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_IGESEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(IGESData_IGESEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(IGESData_IGESEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.IGESData_IGESEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(IGESData_IGESEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(IGESData_IGESEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(IGESData_IGESEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_IGESEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(IGESData_IGESEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(IGESData_IGESEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(IGESData_IGESEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(IGESData_IGESEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.IGESData_IGESEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(IGESData_IGESEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.IGESData_IGESEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(IGESData_IGESEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.IGESData_IGESEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(IGESData_IGESEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.IGESData_IGESEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(IGESData_IGESEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.IGESData_IGESEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(IGESData_IGESEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.IGESData_IGESEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(IGESData_IGESEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.IGESData_IGESEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(IGESData_IGESEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.IGESData_IGESEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(IGESData_IGESEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(IGESData_IGESEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.IGESData_IGESEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(IGESData_IGESEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.IGESData_IGESEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(IGESData_IGESEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.IGESData_IGESEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(IGESData_IGESEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(IGESData_IGESEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_IGESEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(IGESData_IGESEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(IGESData_IGESEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.IGESData_IGESEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(IGESData_IGESEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(IGESData_IGESEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(IGESData_IGESEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(IGESData_IGESEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(IGESData_IGESEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(IGESData_IGESEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.IGESData_IGESEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(IGESData_IGESEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(IGESData_IGESEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(IGESData_IGESEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(IGESData_IGESEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(IGESData_IGESEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.IGESData_IGESEntity_SetLineWeight(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_IGESEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_IGESEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_IGESEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_IGESEntity
IGESData_IGESEntity_swigregister = _IGESData.IGESData_IGESEntity_swigregister
IGESData_IGESEntity_swigregister(IGESData_IGESEntity)

def IGESData_IGESEntity_get_type_name(*args):
    """
    IGESData_IGESEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_IGESEntity_get_type_name(*args)

def IGESData_IGESEntity_get_type_descriptor(*args):
    """
    IGESData_IGESEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_IGESEntity_get_type_descriptor(*args)

class IGESData_Protocol(Interface.Interface_Protocol):
    """
    Description of basic Protocol for IGES
    This comprises treatement of IGESModel and Recognition of
    Undefined-FreeFormat-Entity
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_Protocol self) -> IGESData_Protocol

        Description of basic Protocol for IGES
        This comprises treatement of IGESModel and Recognition of
        Undefined-FreeFormat-Entity
        """
        this = _IGESData.new_IGESData_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESData_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, none

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESData_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank. Here, none

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.IGESData_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESData_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        Here, Undefined and Free Format Entities have the Number 1.

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_Protocol_TypeNumber(self, *args)


    def NewModel(self, *args):
        """
        NewModel(IGESData_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.IGESData_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(IGESData_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(IGESData_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.IGESData_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(IGESData_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_Protocol_IsUnknownEntity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_Protocol
IGESData_Protocol_swigregister = _IGESData.IGESData_Protocol_swigregister
IGESData_Protocol_swigregister(IGESData_Protocol)

def IGESData_Protocol_get_type_name(*args):
    """
    IGESData_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_Protocol_get_type_name(*args)

def IGESData_Protocol_get_type_descriptor(*args):
    """
    IGESData_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_Protocol_get_type_descriptor(*args)

class IGESData_GeneralModule(Interface.Interface_GeneralModule):
    """
    Definition of General Services adapted to IGES.
    This Services comprise : Shared & Implied Lists, Copy, Check
    They are adapted according to the organisation of IGES
    Entities : Directory Part, Lists of Associativities and
    Properties are specifically processed
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_GeneralModule(self) 
            return h


    def FillSharedCase(self, *args):
        """
        FillSharedCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.IGESData_GeneralModule_FillSharedCase(self, *args)


    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.IGESData_GeneralModule_OwnSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.IGESData_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.IGESData_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.IGESData_GeneralModule_CheckCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESData.IGESData_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.IGESData_GeneralModule_OwnCheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_GeneralModule_CanCopy(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_GeneralModule_NewVoid(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.IGESData_GeneralModule_CopyCase(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.IGESData_GeneralModule_OwnCopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.IGESData_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.IGESData_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESData.IGESData_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GeneralModule_Name(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_GeneralModule
IGESData_GeneralModule_swigregister = _IGESData.IGESData_GeneralModule_swigregister
IGESData_GeneralModule_swigregister(IGESData_GeneralModule)

def IGESData_GeneralModule_get_type_name(*args):
    """
    IGESData_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_GeneralModule_get_type_name(*args)

def IGESData_GeneralModule_get_type_descriptor(*args):
    """
    IGESData_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_GeneralModule_get_type_descriptor(*args)

class IGESData_ViewKindEntity(IGESData_IGESEntity):
    """
    defines required type for ViewKind in directory part
    that is, Single view or Multiple view
    An effective ViewKind entity must inherit it and define
    IsSingle (True for Single, False for List of Views),
    NbViews and ViewItem (especially for a List)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_ViewKindEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_ViewKindEntity(self) 
            return h


    def IsSingle(self, *args):
        """
        IsSingle(IGESData_ViewKindEntity self) -> Standard_Boolean

        says if "me" is a Single View (True) or a List of Views (False)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ViewKindEntity_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(IGESData_ViewKindEntity self) -> Standard_Integer

        Returns the count of Views for a List of Views. For a Single
        View, may return simply 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ViewKindEntity_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESData_ViewKindEntity self, Standard_Integer const num) -> Handle_IGESData_ViewKindEntity

        Returns the View n0. <num> for a List of Views. For a Single
        Views, may return <me> itself

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.IGESData_ViewKindEntity_ViewItem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_ViewKindEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_ViewKindEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_ViewKindEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_ViewKindEntity
IGESData_ViewKindEntity_swigregister = _IGESData.IGESData_ViewKindEntity_swigregister
IGESData_ViewKindEntity_swigregister(IGESData_ViewKindEntity)

def IGESData_ViewKindEntity_get_type_name(*args):
    """
    IGESData_ViewKindEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_ViewKindEntity_get_type_name(*args)

def IGESData_ViewKindEntity_get_type_descriptor(*args):
    """
    IGESData_ViewKindEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_ViewKindEntity_get_type_descriptor(*args)

class IGESData_FileRecognizer(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_FileRecognizer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_FileRecognizer(self) 
            return h


    def Evaluate(self, *args):
        """
        Evaluate(IGESData_FileRecognizer self, IGESData_IGESType akey, Handle_IGESData_IGESEntity res) -> Standard_Boolean

        Evaluates if recognition has a result, returns it if yes
        In case of success, Returns True and puts result in "res"
        In case of Failure, simply Returns False
        Works by calling deferred method Eval, and in case of failure,
        looks for Added Recognizers to work

        :type akey: OCC.wrapper.IGESData.IGESData_IGESType
        :type res: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_FileRecognizer_Evaluate(self, *args)


    def Result(self, *args):
        """
        Result(IGESData_FileRecognizer self) -> Handle_IGESData_IGESEntity

        Returns result of last recognition (call of Evaluate)

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_FileRecognizer_Result(self, *args)


    def Add(self, *args):
        """
        Add(IGESData_FileRecognizer self, Handle_IGESData_FileRecognizer reco)

        Adds a new Recognizer to the Compound, at the end
        Several calls to Add work by adding in the order of calls :
        Hence, when Eval has failed to recognize, Evaluate will call
        Evaluate from the first added Recognizer if there is one,
        and to the second if there is still no result, and so on

        :type reco: OCC.wrapper.IGESData.Handle_IGESData_FileRecognizer

        """
        return _IGESData.IGESData_FileRecognizer_Add(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_FileRecognizer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_FileRecognizer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_FileRecognizer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_FileRecognizer
IGESData_FileRecognizer_swigregister = _IGESData.IGESData_FileRecognizer_swigregister
IGESData_FileRecognizer_swigregister(IGESData_FileRecognizer)

def IGESData_FileRecognizer_get_type_name(*args):
    """
    IGESData_FileRecognizer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_FileRecognizer_get_type_name(*args)

def IGESData_FileRecognizer_get_type_descriptor(*args):
    """
    IGESData_FileRecognizer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_FileRecognizer_get_type_descriptor(*args)

class IGESData_SpecificModule(Standard.Standard_Transient):
    """
    This class defines some Services which are specifically
    attached to IGES Entities : Dump
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_SpecificModule(self) 
            return h


    def OwnDump(self, *args):
        """
        OwnDump(IGESData_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump for each type of IGES Entity : it concerns only
        own parameters, the general data (Directory Part, Lists) are
        taken into account by the IGESDumper
        See class IGESDumper for the rules to follow for <own> and
        <attached> level

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESData.IGESData_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESData_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Specific Automatic Correction on own Parameters of an Entity.
        It works by setting in accordance redundant data, if there are
        when there is no ambiguity (else, it does nothing).
        Remark that classic Corrections on Directory Entry (to set
        void data) are taken into account alsewhere.

        For instance, many "Associativity Entities" have a Number of
        Properties which must have a fixed value.
        Or, a ConicalArc has its Form Number which records the kind of
        Conic, also determined from its coefficients
        But, a CircularArc of which Distances (Center-Start) and
        (Center-End) are not equal cannot be corrected ...

        Returns True if something has been corrected in <ent>
        By default, does nothing. If at least one of the Types
        processed by a sub-class of SpecificModule has a Correct
        procedure attached, this method can be redefined

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_SpecificModule
IGESData_SpecificModule_swigregister = _IGESData.IGESData_SpecificModule_swigregister
IGESData_SpecificModule_swigregister(IGESData_SpecificModule)

def IGESData_SpecificModule_get_type_name(*args):
    """
    IGESData_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_SpecificModule_get_type_name(*args)

def IGESData_SpecificModule_get_type_descriptor(*args):
    """
    IGESData_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_SpecificModule_get_type_descriptor(*args)

class IGESData_UndefinedEntity(IGESData_IGESEntity):
    """
    undefined (unknown or error) entity specific of IGES
    DirPart can be correct or not : if it is not, a flag indicates
    it, and each corrupted field has an associated error flag
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_UndefinedEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_UndefinedEntity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_UndefinedEntity self) -> IGESData_UndefinedEntity

        creates an unknown entity


        """
        this = _IGESData.new_IGESData_UndefinedEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def UndefinedContent(self, *args):
        """
        UndefinedContent(IGESData_UndefinedEntity self) -> Handle_Interface_UndefinedContent

        Returns own data as an UndefinedContent

        :rtype: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.IGESData_UndefinedEntity_UndefinedContent(self, *args)


    def ChangeableContent(self, *args):
        """
        ChangeableContent(IGESData_UndefinedEntity self) -> Handle_Interface_UndefinedContent

        Returns own data as an UndefinedContent, in order to touch it

        :rtype: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.IGESData_UndefinedEntity_ChangeableContent(self, *args)


    def SetNewContent(self, *args):
        """
        SetNewContent(IGESData_UndefinedEntity self, Handle_Interface_UndefinedContent cont)

        Redefines a completely new UndefinedContent
        Used by a Copy which begins by ShallowCopy, for instance

        :type cont: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.IGESData_UndefinedEntity_SetNewContent(self, *args)


    def IsOKDirPart(self, *args):
        """
        IsOKDirPart(IGESData_UndefinedEntity self) -> Standard_Boolean

        says if DirPart is OK or not (if not, it is erroneous)
        Note that if it is not, Def* methods can return Error status

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_UndefinedEntity_IsOKDirPart(self, *args)


    def DirStatus(self, *args):
        """
        DirStatus(IGESData_UndefinedEntity self) -> Standard_Integer

        returns Directory Error Status (used for Copy)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_UndefinedEntity_DirStatus(self, *args)


    def SetOKDirPart(self, *args):
        """
        SetOKDirPart(IGESData_UndefinedEntity self)

        Erases the Directory Error Status
        Warning : Be sure that data are consistent to call this method ...


        """
        return _IGESData.IGESData_UndefinedEntity_SetOKDirPart(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(IGESData_UndefinedEntity self) -> IGESData_DefType

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_UndefinedEntity_DefLineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(IGESData_UndefinedEntity self) -> IGESData_DefList

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.IGESData_UndefinedEntity_DefLevel(self, *args)


    def DefView(self, *args):
        """
        DefView(IGESData_UndefinedEntity self) -> IGESData_DefList

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.IGESData_UndefinedEntity_DefView(self, *args)


    def DefColor(self, *args):
        """
        DefColor(IGESData_UndefinedEntity self) -> IGESData_DefType

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_UndefinedEntity_DefColor(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(IGESData_UndefinedEntity self) -> Standard_Boolean

        returns Error status if necessary, else calls original method
        (that is, if SubScript field is not blank or positive integer)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_UndefinedEntity_HasSubScriptNumber(self, *args)


    def ReadDir(self, *args):
        """
        ReadDir(IGESData_UndefinedEntity self, Handle_IGESData_IGESReaderData IR, IGESData_DirPart DP, Handle_Interface_Check ach) -> Standard_Boolean

        Computes the Directory Error Status, to be called before
        standard ReadDir from IGESReaderTool
        Returns True if OK (hence, Directory can be loaded),
        Else returns False and the DirPart <DP> is modified
        (hence, Directory Error Status is non null; and standard Read
        will work with an acceptable DirectoryPart)

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type DP: OCC.wrapper.IGESData.IGESData_DirPart
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_UndefinedEntity_ReadDir(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESData_UndefinedEntity self, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        reads own parameters from file; PR gives access to them, IR
        detains parameter types and values
        Here, reads all parameters, integers are considered as entity
        reference unless they cannot be; no list interpretation
        No property or associativity list is managed

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESData.IGESData_UndefinedEntity_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESData_UndefinedEntity self, IGESData_IGESWriter IW)

        writes parameters to IGESWriter, taken from UndefinedContent

        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESData.IGESData_UndefinedEntity_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_UndefinedEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_UndefinedEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_UndefinedEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_UndefinedEntity
IGESData_UndefinedEntity_swigregister = _IGESData.IGESData_UndefinedEntity_swigregister
IGESData_UndefinedEntity_swigregister(IGESData_UndefinedEntity)

def IGESData_UndefinedEntity_get_type_name(*args):
    """
    IGESData_UndefinedEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_UndefinedEntity_get_type_name(*args)

def IGESData_UndefinedEntity_get_type_descriptor(*args):
    """
    IGESData_UndefinedEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_UndefinedEntity_get_type_descriptor(*args)

class IGESData_LineFontEntity(IGESData_IGESEntity):
    """
    defines required type for LineFont in directory part
    an effective LineFont entity must inherits it
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_LineFontEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_LineFontEntity(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_LineFontEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_LineFontEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_LineFontEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self):
        """
        defines required type for LineFont in directory part
        an effective LineFont entity must inherits it
        """
        this = _IGESData.new_IGESData_LineFontEntity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _IGESData.delete_IGESData_LineFontEntity
IGESData_LineFontEntity_swigregister = _IGESData.IGESData_LineFontEntity_swigregister
IGESData_LineFontEntity_swigregister(IGESData_LineFontEntity)

def IGESData_LineFontEntity_get_type_name(*args):
    """
    IGESData_LineFontEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_LineFontEntity_get_type_name(*args)

def IGESData_LineFontEntity_get_type_descriptor(*args):
    """
    IGESData_LineFontEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_LineFontEntity_get_type_descriptor(*args)

class IGESData_GlobalNodeOfWriterLib(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_GlobalNodeOfWriterLib
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_GlobalNodeOfWriterLib(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_GlobalNodeOfWriterLib self) -> IGESData_GlobalNodeOfWriterLib

        Creates an empty GlobalNode, with no Next


        """
        this = _IGESData.new_IGESData_GlobalNodeOfWriterLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Add(self, *args):
        """
        Add(IGESData_GlobalNodeOfWriterLib self, Handle_IGESData_ReadWriteModule amodule, Handle_IGESData_Protocol aprotocol)

        Adds a Module bound with a Protocol to the list : does
        nothing if already in the list, THAT IS, Same Type (exact
        match) and Same State (that is, IsEqual is not required)
        Once added, stores its attached Protocol in correspondance

        :type amodule: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule
        :type aprotocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.IGESData_GlobalNodeOfWriterLib_Add(self, *args)


    def Module(self, *args):
        """
        Returns the Module stored in a given GlobalNode

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule

        """
        res = _IGESData.IGESData_GlobalNodeOfWriterLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the attached Protocol stored in a given GlobalNode

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.IGESData_GlobalNodeOfWriterLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Next(self, *args):
        """
        Returns the Next GlobalNode. If none is defined, returned
        value is a Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_GlobalNodeOfWriterLib

        """
        res = _IGESData.IGESData_GlobalNodeOfWriterLib_Next(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_GlobalNodeOfWriterLib_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_GlobalNodeOfWriterLib_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_GlobalNodeOfWriterLib_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_GlobalNodeOfWriterLib
IGESData_GlobalNodeOfWriterLib_swigregister = _IGESData.IGESData_GlobalNodeOfWriterLib_swigregister
IGESData_GlobalNodeOfWriterLib_swigregister(IGESData_GlobalNodeOfWriterLib)

def IGESData_GlobalNodeOfWriterLib_get_type_name(*args):
    """
    IGESData_GlobalNodeOfWriterLib_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_GlobalNodeOfWriterLib_get_type_name(*args)

def IGESData_GlobalNodeOfWriterLib_get_type_descriptor(*args):
    """
    IGESData_GlobalNodeOfWriterLib_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_GlobalNodeOfWriterLib_get_type_descriptor(*args)

class IGESData_GlobalNodeOfSpecificLib(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_GlobalNodeOfSpecificLib
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_GlobalNodeOfSpecificLib(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_GlobalNodeOfSpecificLib self) -> IGESData_GlobalNodeOfSpecificLib

        Creates an empty GlobalNode, with no Next


        """
        this = _IGESData.new_IGESData_GlobalNodeOfSpecificLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Add(self, *args):
        """
        Add(IGESData_GlobalNodeOfSpecificLib self, Handle_IGESData_SpecificModule amodule, Handle_IGESData_Protocol aprotocol)

        Adds a Module bound with a Protocol to the list : does
        nothing if already in the list, THAT IS, Same Type (exact
        match) and Same State (that is, IsEqual is not required)
        Once added, stores its attached Protocol in correspondance

        :type amodule: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule
        :type aprotocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.IGESData_GlobalNodeOfSpecificLib_Add(self, *args)


    def Module(self, *args):
        """
        Returns the Module stored in a given GlobalNode

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule

        """
        res = _IGESData.IGESData_GlobalNodeOfSpecificLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the attached Protocol stored in a given GlobalNode

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.IGESData_GlobalNodeOfSpecificLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Next(self, *args):
        """
        Returns the Next GlobalNode. If none is defined, returned
        value is a Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_GlobalNodeOfSpecificLib

        """
        res = _IGESData.IGESData_GlobalNodeOfSpecificLib_Next(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_GlobalNodeOfSpecificLib_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_GlobalNodeOfSpecificLib_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_GlobalNodeOfSpecificLib_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_GlobalNodeOfSpecificLib
IGESData_GlobalNodeOfSpecificLib_swigregister = _IGESData.IGESData_GlobalNodeOfSpecificLib_swigregister
IGESData_GlobalNodeOfSpecificLib_swigregister(IGESData_GlobalNodeOfSpecificLib)

def IGESData_GlobalNodeOfSpecificLib_get_type_name(*args):
    """
    IGESData_GlobalNodeOfSpecificLib_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_GlobalNodeOfSpecificLib_get_type_name(*args)

def IGESData_GlobalNodeOfSpecificLib_get_type_descriptor(*args):
    """
    IGESData_GlobalNodeOfSpecificLib_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_GlobalNodeOfSpecificLib_get_type_descriptor(*args)

class IGESData_FileProtocol(IGESData_Protocol):
    """
    This class allows to define complex protocols, in order to
    treat various sub-sets (or the complete set) of the IGES Norm,
    such as Solid + Draw (which are normally independant), etc...
    While it inherits Protocol from IGESData, it admits
    UndefinedEntity too
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_FileProtocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_FileProtocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_FileProtocol self) -> IGESData_FileProtocol

        Returns an empty FileProtocol


        """
        this = _IGESData.new_IGESData_FileProtocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Add(self, *args):
        """
        Add(IGESData_FileProtocol self, Handle_IGESData_Protocol protocol)

        Adds a resource

        :type protocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.IGESData_FileProtocol_Add(self, *args)


    def NbResources(self, *args):
        """
        NbResources(IGESData_FileProtocol self) -> Standard_Integer

        Gives the count of Resources : the count of Added Protocols

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_FileProtocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESData_FileProtocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank (rank of call to Add)

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.IGESData_FileProtocol_Resource(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_FileProtocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_FileProtocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_FileProtocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_FileProtocol
IGESData_FileProtocol_swigregister = _IGESData.IGESData_FileProtocol_swigregister
IGESData_FileProtocol_swigregister(IGESData_FileProtocol)

def IGESData_FileProtocol_get_type_name(*args):
    """
    IGESData_FileProtocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_FileProtocol_get_type_name(*args)

def IGESData_FileProtocol_get_type_descriptor(*args):
    """
    IGESData_FileProtocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_FileProtocol_get_type_descriptor(*args)

class IGESData_ColorEntity(IGESData_IGESEntity):
    """
    defines required type for Color in directory part
    an effective Color entity must inherits it
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_ColorEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_ColorEntity(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_ColorEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_ColorEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_ColorEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self):
        """
        defines required type for Color in directory part
        an effective Color entity must inherits it
        """
        this = _IGESData.new_IGESData_ColorEntity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _IGESData.delete_IGESData_ColorEntity
IGESData_ColorEntity_swigregister = _IGESData.IGESData_ColorEntity_swigregister
IGESData_ColorEntity_swigregister(IGESData_ColorEntity)

def IGESData_ColorEntity_get_type_name(*args):
    """
    IGESData_ColorEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_ColorEntity_get_type_name(*args)

def IGESData_ColorEntity_get_type_descriptor(*args):
    """
    IGESData_ColorEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_ColorEntity_get_type_descriptor(*args)

class IGESData_NameEntity(IGESData_IGESEntity):
    """
    a NameEntity is a kind of IGESEntity which can provide a Name
    under alphanumeric (String) form, from Properties list
    an effective Name entity must inherit it
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_NameEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_NameEntity(self) 
            return h


    def Value(self, *args):
        """
        Value(IGESData_NameEntity self) -> Handle_TCollection_HAsciiString

        Retyrns the alphanumeric value of the Name, to be defined

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_NameEntity_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_NameEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_NameEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_NameEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_NameEntity
IGESData_NameEntity_swigregister = _IGESData.IGESData_NameEntity_swigregister
IGESData_NameEntity_swigregister(IGESData_NameEntity)

def IGESData_NameEntity_get_type_name(*args):
    """
    IGESData_NameEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_NameEntity_get_type_name(*args)

def IGESData_NameEntity_get_type_descriptor(*args):
    """
    IGESData_NameEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_NameEntity_get_type_descriptor(*args)

class IGESData_DefaultSpecific(IGESData_SpecificModule):
    """Specific IGES Services for UndefinedEntity, FreeFormatEntity"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_DefaultSpecific
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_DefaultSpecific(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_DefaultSpecific self) -> IGESData_DefaultSpecific

        Creates a DefaultSpecific and puts it into SpecificLib


        """
        this = _IGESData.new_IGESData_DefaultSpecific(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESData_DefaultSpecific self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump for UndefinedEntity : it concerns only
        own parameters, the general data (Directory Part, Lists) are
        taken into account by the IGESDumper

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESData.IGESData_DefaultSpecific_OwnDump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_DefaultSpecific_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_DefaultSpecific_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_DefaultSpecific_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_DefaultSpecific
IGESData_DefaultSpecific_swigregister = _IGESData.IGESData_DefaultSpecific_swigregister
IGESData_DefaultSpecific_swigregister(IGESData_DefaultSpecific)

def IGESData_DefaultSpecific_get_type_name(*args):
    """
    IGESData_DefaultSpecific_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_DefaultSpecific_get_type_name(*args)

def IGESData_DefaultSpecific_get_type_descriptor(*args):
    """
    IGESData_DefaultSpecific_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_DefaultSpecific_get_type_descriptor(*args)

class IGESData_LevelListEntity(IGESData_IGESEntity):
    """
    defines required type for LevelList in directory part
    an effective LevelList entity must inherits it
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_LevelListEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_LevelListEntity(self) 
            return h


    def NbLevelNumbers(self, *args):
        """
        NbLevelNumbers(IGESData_LevelListEntity self) -> Standard_Integer

        Must return the count of levels

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_LevelListEntity_NbLevelNumbers(self, *args)


    def LevelNumber(self, *args):
        """
        LevelNumber(IGESData_LevelListEntity self, Standard_Integer const num) -> Standard_Integer

        returns the Level Number of <me>, indicated by <num>
        raises an exception if num is out of range

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_LevelListEntity_LevelNumber(self, *args)


    def HasLevelNumber(self, *args):
        """
        HasLevelNumber(IGESData_LevelListEntity self, Standard_Integer const level) -> Standard_Boolean

        returns True if <level> is in the list

        :type level: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_LevelListEntity_HasLevelNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_LevelListEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_LevelListEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_LevelListEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_LevelListEntity
IGESData_LevelListEntity_swigregister = _IGESData.IGESData_LevelListEntity_swigregister
IGESData_LevelListEntity_swigregister(IGESData_LevelListEntity)

def IGESData_LevelListEntity_get_type_name(*args):
    """
    IGESData_LevelListEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_LevelListEntity_get_type_name(*args)

def IGESData_LevelListEntity_get_type_descriptor(*args):
    """
    IGESData_LevelListEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_LevelListEntity_get_type_descriptor(*args)

class IGESData_ToolLocation(Standard.Standard_Transient):
    """
    This Tool determines and gives access to effective Locations
    of IGES Entities as defined by the IGES Norm. These Locations
    can be for each Entity :
    - on one part, explicitly defined by a Transf in Directory
    Part (this Transf can be itself compound); if not defined,
    no proper Transformation is defined
    - on the other part, implicitly defined by a reference from
    another Entity : its Parent
    Both implicit and explicit locations are combinable.

    Implicit definition can be itself defined, either through the
    definition of an Entity (i.e. a Composite Curve references
    a list of Curves), or by a specific Associativity, of type
    SingleParentEntity, by which the Location of the Parent is
    applied to the Childs defined by this Associativity.
    Remark that a Transf itself has no Location, but it can be
    compound

    This is a TShared object, then it is easier to use in an
    interactive session
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_ToolLocation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_ToolLocation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_ToolLocation self, Handle_IGESData_IGESModel amodel, Handle_IGESData_Protocol protocol) -> IGESData_ToolLocation

        Creates a ToolLocation on a given Model, filled with the help
        of a Protocol (which allows to known Entities referenced by
        other ones)

        :type amodel: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type protocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        this = _IGESData.new_IGESData_ToolLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Load(self, *args):
        """
        Load(IGESData_ToolLocation self)

        Does the effective work of determining Locations of Entities


        """
        return _IGESData.IGESData_ToolLocation_Load(self, *args)


    def SetPrecision(self, *args):
        """
        SetPrecision(IGESData_ToolLocation self, Standard_Real const prec)

        Sets a precision for the Analysis of Locations
        (default by constructor is 1.E-05)

        :type prec: float

        """
        return _IGESData.IGESData_ToolLocation_SetPrecision(self, *args)


    def SetReference(self, *args):
        """
        SetReference(IGESData_ToolLocation self, Handle_IGESData_IGESEntity parent, Handle_IGESData_IGESEntity child)

        Sets the "Reference" information for <child> as being <parent>
        Sets an Error Status if already set (see method IsAmbiguous)

        :type parent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type child: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_ToolLocation_SetReference(self, *args)


    def SetParentAssoc(self, *args):
        """
        SetParentAssoc(IGESData_ToolLocation self, Handle_IGESData_IGESEntity parent, Handle_IGESData_IGESEntity child)

        Sets the "Associativity" information for <child> as being
        <parent> (it must be the Parent itself, not the Associativity)

        :type parent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type child: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_ToolLocation_SetParentAssoc(self, *args)


    def ResetDependences(self, *args):
        """
        ResetDependences(IGESData_ToolLocation self, Handle_IGESData_IGESEntity child)

        Resets all informations about dependences for <child>

        :type child: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_ToolLocation_ResetDependences(self, *args)


    def SetOwnAsDependent(self, *args):
        """
        SetOwnAsDependent(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent)

        Unitary action which defines Entities referenced by <ent>
        (except those in Directory Part and Associativities List)
        as Dependent (their Locations are related to that of <ent>)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_ToolLocation_SetOwnAsDependent(self, *args)


    def IsTransf(self, *args):
        """
        IsTransf(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if <ent> is kind of TransfEntity. Then, it has
        no location, while it can be used to define a Location)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ToolLocation_IsTransf(self, *args)


    def IsAssociativity(self, *args):
        """
        IsAssociativity(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if <ent> is an Associativity (IGES Type 402).
        Then, Location does not apply.

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ToolLocation_IsAssociativity(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if <ent> has a Transformation Matrix in proper
        (referenced from its Directory Part)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ToolLocation_HasTransf(self, *args)


    def ExplicitLocation(self, *args):
        """
        ExplicitLocation(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> gp_GTrsf

        Returns the Explicit Location defined by the Transformation
        Matrix of <ent>. Identity if there is none

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.IGESData_ToolLocation_ExplicitLocation(self, *args)


    def IsAmbiguous(self, *args):
        """
        IsAmbiguous(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if more than one Parent has been determined for
        <ent>, by adding direct References and Associativities

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ToolLocation_IsAmbiguous(self, *args)


    def HasParent(self, *args):
        """
        HasParent(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if <ent> is dependent from one and only one other
        Entity, either by Reference or by Associativity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ToolLocation_HasParent(self, *args)


    def Parent(self, *args):
        """
        Parent(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Handle_IGESData_IGESEntity

        Returns the unique Parent recorded for <ent>.
        Returns a Null Handle if there is none

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_ToolLocation_Parent(self, *args)


    def HasParentByAssociativity(self, *args):
        """
        HasParentByAssociativity(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if the Parent, if there is one, is defined by
        a SingleParentEntity Associativity
        Else, if HasParent is True, it is by Reference

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ToolLocation_HasParentByAssociativity(self, *args)


    def ParentLocation(self, *args):
        """
        ParentLocation(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> gp_GTrsf

        Returns the effective Location of the Parent of <ent>, if
        there is one : this Location is itself given as compound
        according dependences on the Parent, if there are some.
        Returns an Identity Transformation if no Parent is recorded.

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.IGESData_ToolLocation_ParentLocation(self, *args)


    def EffectiveLocation(self, *args):
        """
        EffectiveLocation(IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> gp_GTrsf

        Returns the effective Location of an Entity, i.e. the
        composition of its proper Transformation Matrix (returned by
        Transf) and its Parent's Location (returned by ParentLocation)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.IGESData_ToolLocation_EffectiveLocation(self, *args)


    def AnalyseLocation(self, *args):
        """
        AnalyseLocation(IGESData_ToolLocation self, gp_GTrsf loc, gp_Trsf result) -> Standard_Boolean

        Analysis a Location given as a GTrsf, by trying to convert it
        to a Trsf (i.e. to a True Location of which effect is
        described by an Isometry or a Similarity)
        Works with the Precision given by default or by SetPrecision
        Calls ConvertLocation (see below)

        :type loc: OCC.wrapper.gp.gp_GTrsf
        :type result: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ToolLocation_AnalyseLocation(self, *args)


    def ConvertLocation(*args):
        """
        ConvertLocation(Standard_Real const prec, gp_GTrsf loc, gp_Trsf result, Standard_Real const uni=1) -> Standard_Boolean

        Convertion of a Location, from GTrsf form to Trsf form
        Works with a precision given as argument.
        Returns True if the Conversion is possible, (hence, <result>
        contains the converted location), False else
        <unit>, if given, indicates the unit in which <loc> is defined
        in meters. It concerns the translation part (to be converted.

        As a class method, it can be called separately

        :type prec: float
        :type loc: OCC.wrapper.gp.gp_GTrsf
        :type result: OCC.wrapper.gp.gp_Trsf
        :type uni: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ToolLocation_ConvertLocation(*args)

    ConvertLocation = staticmethod(ConvertLocation)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_ToolLocation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_ToolLocation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_ToolLocation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_ToolLocation
IGESData_ToolLocation_swigregister = _IGESData.IGESData_ToolLocation_swigregister
IGESData_ToolLocation_swigregister(IGESData_ToolLocation)

def IGESData_ToolLocation_ConvertLocation(*args):
    """
    IGESData_ToolLocation_ConvertLocation(Standard_Real const prec, gp_GTrsf loc, gp_Trsf result, Standard_Real const uni=1) -> Standard_Boolean

    Convertion of a Location, from GTrsf form to Trsf form
    Works with a precision given as argument.
    Returns True if the Conversion is possible, (hence, <result>
    contains the converted location), False else
    <unit>, if given, indicates the unit in which <loc> is defined
    in meters. It concerns the translation part (to be converted.

    As a class method, it can be called separately

    :type prec: float
    :type loc: OCC.wrapper.gp.gp_GTrsf
    :type result: OCC.wrapper.gp.gp_Trsf
    :type uni: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESData.IGESData_ToolLocation_ConvertLocation(*args)

def IGESData_ToolLocation_get_type_name(*args):
    """
    IGESData_ToolLocation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_ToolLocation_get_type_name(*args)

def IGESData_ToolLocation_get_type_descriptor(*args):
    """
    IGESData_ToolLocation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_ToolLocation_get_type_descriptor(*args)

class IGESData_DefaultGeneral(IGESData_GeneralModule):
    """
    Processes the specific case of UndefinedEntity from IGESData
    (Case Number 1)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_DefaultGeneral
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_DefaultGeneral(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_DefaultGeneral self) -> IGESData_DefaultGeneral

        Creates a DefaultGeneral and puts it into GeneralLib,
        bound with a Protocol from IGESData


        """
        this = _IGESData.new_IGESData_DefaultGeneral(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by an IGESEntity, which must be
        an UndefinedEntity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.IGESData_DefaultGeneral_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        Here, Returns an empty DirChecker (no constraint to check)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESData.IGESData_DefaultGeneral_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity
        Here, does nothing (no constraint to check)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.IGESData_DefaultGeneral_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity (UndefinedEntity only)

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_DefaultGeneral_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.IGESData_DefaultGeneral_OwnCopyCase(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_DefaultGeneral_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_DefaultGeneral_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_DefaultGeneral_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_DefaultGeneral
IGESData_DefaultGeneral_swigregister = _IGESData.IGESData_DefaultGeneral_swigregister
IGESData_DefaultGeneral_swigregister(IGESData_DefaultGeneral)

def IGESData_DefaultGeneral_get_type_name(*args):
    """
    IGESData_DefaultGeneral_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_DefaultGeneral_get_type_name(*args)

def IGESData_DefaultGeneral_get_type_descriptor(*args):
    """
    IGESData_DefaultGeneral_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_DefaultGeneral_get_type_descriptor(*args)

class IGESData_LabelDisplayEntity(IGESData_IGESEntity):
    """
    defines required type for LabelDisplay in directory part
    an effective LabelDisplay entity must inherits it
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_LabelDisplayEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_LabelDisplayEntity(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_LabelDisplayEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_LabelDisplayEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_LabelDisplayEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self):
        """
        defines required type for LabelDisplay in directory part
        an effective LabelDisplay entity must inherits it
        """
        this = _IGESData.new_IGESData_LabelDisplayEntity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _IGESData.delete_IGESData_LabelDisplayEntity
IGESData_LabelDisplayEntity_swigregister = _IGESData.IGESData_LabelDisplayEntity_swigregister
IGESData_LabelDisplayEntity_swigregister(IGESData_LabelDisplayEntity)

def IGESData_LabelDisplayEntity_get_type_name(*args):
    """
    IGESData_LabelDisplayEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_LabelDisplayEntity_get_type_name(*args)

def IGESData_LabelDisplayEntity_get_type_descriptor(*args):
    """
    IGESData_LabelDisplayEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_LabelDisplayEntity_get_type_descriptor(*args)

class IGESData_NodeOfWriterLib(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_NodeOfWriterLib
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_NodeOfWriterLib(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_NodeOfWriterLib self) -> IGESData_NodeOfWriterLib

        Creates an empty Node, with no Next


        """
        this = _IGESData.new_IGESData_NodeOfWriterLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AddNode(self, *args):
        """
        AddNode(IGESData_NodeOfWriterLib self, Handle_IGESData_GlobalNodeOfWriterLib anode)

        Adds a couple (Module,Protocol), that is, stores it into
        itself if not yet done, else creates a Next Node to do it

        :type anode: OCC.wrapper.IGESData.Handle_IGESData_GlobalNodeOfWriterLib

        """
        return _IGESData.IGESData_NodeOfWriterLib_AddNode(self, *args)


    def Module(self, *args):
        """
        Returns the Module designated by a precise Node

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule

        """
        res = _IGESData.IGESData_NodeOfWriterLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the Protocol designated by a precise Node

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.IGESData_NodeOfWriterLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Next(self, *args):
        """
        Returns the Next Node. If none was defined, returned value
        is a Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_NodeOfWriterLib

        """
        res = _IGESData.IGESData_NodeOfWriterLib_Next(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_NodeOfWriterLib_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_NodeOfWriterLib_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_NodeOfWriterLib_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_NodeOfWriterLib
IGESData_NodeOfWriterLib_swigregister = _IGESData.IGESData_NodeOfWriterLib_swigregister
IGESData_NodeOfWriterLib_swigregister(IGESData_NodeOfWriterLib)

def IGESData_NodeOfWriterLib_get_type_name(*args):
    """
    IGESData_NodeOfWriterLib_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_NodeOfWriterLib_get_type_name(*args)

def IGESData_NodeOfWriterLib_get_type_descriptor(*args):
    """
    IGESData_NodeOfWriterLib_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_NodeOfWriterLib_get_type_descriptor(*args)

class Handle_IGESData_ToolLocation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_ToolLocation self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_ToolLocation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_ToolLocation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_ToolLocation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_ToolLocation self, IGESData_ToolLocation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_ToolLocation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_ToolLocation self, Handle_IGESData_ToolLocation theHandle) -> Handle_IGESData_ToolLocation
        assign(Handle_IGESData_ToolLocation self, IGESData_ToolLocation thePtr) -> Handle_IGESData_ToolLocation
        assign(Handle_IGESData_ToolLocation self, Handle_IGESData_ToolLocation theHandle) -> Handle_IGESData_ToolLocation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_ToolLocation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_ToolLocation self) -> IGESData_ToolLocation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_ToolLocation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_ToolLocation self) -> IGESData_ToolLocation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_ToolLocation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_ToolLocation self) -> IGESData_ToolLocation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_ToolLocation___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_ToolLocation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_ToolLocation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_ToolLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_ToolLocation_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_ToolLocation

    def Load(self, *args):
        """
        Load(Handle_IGESData_ToolLocation self)

        Does the effective work of determining Locations of Entities


        """
        return _IGESData.Handle_IGESData_ToolLocation_Load(self, *args)


    def SetPrecision(self, *args):
        """
        SetPrecision(Handle_IGESData_ToolLocation self, Standard_Real const prec)

        Sets a precision for the Analysis of Locations
        (default by constructor is 1.E-05)

        :type prec: float

        """
        return _IGESData.Handle_IGESData_ToolLocation_SetPrecision(self, *args)


    def SetReference(self, *args):
        """
        SetReference(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity parent, Handle_IGESData_IGESEntity child)

        Sets the "Reference" information for <child> as being <parent>
        Sets an Error Status if already set (see method IsAmbiguous)

        :type parent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type child: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ToolLocation_SetReference(self, *args)


    def SetParentAssoc(self, *args):
        """
        SetParentAssoc(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity parent, Handle_IGESData_IGESEntity child)

        Sets the "Associativity" information for <child> as being
        <parent> (it must be the Parent itself, not the Associativity)

        :type parent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type child: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ToolLocation_SetParentAssoc(self, *args)


    def ResetDependences(self, *args):
        """
        ResetDependences(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity child)

        Resets all informations about dependences for <child>

        :type child: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ToolLocation_ResetDependences(self, *args)


    def SetOwnAsDependent(self, *args):
        """
        SetOwnAsDependent(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent)

        Unitary action which defines Entities referenced by <ent>
        (except those in Directory Part and Associativities List)
        as Dependent (their Locations are related to that of <ent>)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ToolLocation_SetOwnAsDependent(self, *args)


    def IsTransf(self, *args):
        """
        IsTransf(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if <ent> is kind of TransfEntity. Then, it has
        no location, while it can be used to define a Location)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_IsTransf(self, *args)


    def IsAssociativity(self, *args):
        """
        IsAssociativity(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if <ent> is an Associativity (IGES Type 402).
        Then, Location does not apply.

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_IsAssociativity(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if <ent> has a Transformation Matrix in proper
        (referenced from its Directory Part)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_HasTransf(self, *args)


    def ExplicitLocation(self, *args):
        """
        ExplicitLocation(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> gp_GTrsf

        Returns the Explicit Location defined by the Transformation
        Matrix of <ent>. Identity if there is none

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ToolLocation_ExplicitLocation(self, *args)


    def IsAmbiguous(self, *args):
        """
        IsAmbiguous(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if more than one Parent has been determined for
        <ent>, by adding direct References and Associativities

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_IsAmbiguous(self, *args)


    def HasParent(self, *args):
        """
        HasParent(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if <ent> is dependent from one and only one other
        Entity, either by Reference or by Associativity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_HasParent(self, *args)


    def Parent(self, *args):
        """
        Parent(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Handle_IGESData_IGESEntity

        Returns the unique Parent recorded for <ent>.
        Returns a Null Handle if there is none

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ToolLocation_Parent(self, *args)


    def HasParentByAssociativity(self, *args):
        """
        HasParentByAssociativity(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Returns True if the Parent, if there is one, is defined by
        a SingleParentEntity Associativity
        Else, if HasParent is True, it is by Reference

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_HasParentByAssociativity(self, *args)


    def ParentLocation(self, *args):
        """
        ParentLocation(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> gp_GTrsf

        Returns the effective Location of the Parent of <ent>, if
        there is one : this Location is itself given as compound
        according dependences on the Parent, if there are some.
        Returns an Identity Transformation if no Parent is recorded.

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ToolLocation_ParentLocation(self, *args)


    def EffectiveLocation(self, *args):
        """
        EffectiveLocation(Handle_IGESData_ToolLocation self, Handle_IGESData_IGESEntity ent) -> gp_GTrsf

        Returns the effective Location of an Entity, i.e. the
        composition of its proper Transformation Matrix (returned by
        Transf) and its Parent's Location (returned by ParentLocation)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ToolLocation_EffectiveLocation(self, *args)


    def AnalyseLocation(self, *args):
        """
        AnalyseLocation(Handle_IGESData_ToolLocation self, gp_GTrsf loc, gp_Trsf result) -> Standard_Boolean

        Analysis a Location given as a GTrsf, by trying to convert it
        to a Trsf (i.e. to a True Location of which effect is
        described by an Isometry or a Similarity)
        Works with the Precision given by default or by SetPrecision
        Calls ConvertLocation (see below)

        :type loc: OCC.wrapper.gp.gp_GTrsf
        :type result: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_AnalyseLocation(self, *args)


    def ConvertLocation(self, *args):
        """
        ConvertLocation(Handle_IGESData_ToolLocation self, Standard_Real const prec, gp_GTrsf loc, gp_Trsf result, Standard_Real const uni=1) -> Standard_Boolean

        Convertion of a Location, from GTrsf form to Trsf form
        Works with a precision given as argument.
        Returns True if the Conversion is possible, (hence, <result>
        contains the converted location), False else
        <unit>, if given, indicates the unit in which <loc> is defined
        in meters. It concerns the translation part (to be converted.

        As a class method, it can be called separately

        :type prec: float
        :type loc: OCC.wrapper.gp.gp_GTrsf
        :type result: OCC.wrapper.gp.gp_Trsf
        :type uni: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_ConvertLocation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_ToolLocation self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_ToolLocation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_ToolLocation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_ToolLocation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_ToolLocation self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_ToolLocation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_ToolLocation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_ToolLocation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_ToolLocation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_ToolLocation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ToolLocation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_ToolLocation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_ToolLocation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_ToolLocation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ToolLocation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_ToolLocation self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_ToolLocation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_ToolLocation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ToolLocation_DecrementRefCounter(self, *args)

Handle_IGESData_ToolLocation_swigregister = _IGESData.Handle_IGESData_ToolLocation_swigregister
Handle_IGESData_ToolLocation_swigregister(Handle_IGESData_ToolLocation)

def Handle_IGESData_ToolLocation_DownCast(thing):
    return _IGESData.Handle_IGESData_ToolLocation_DownCast(thing)
Handle_IGESData_ToolLocation_DownCast = _IGESData.Handle_IGESData_ToolLocation_DownCast

class Handle_IGESData_ViewKindEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_ViewKindEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_ViewKindEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_ViewKindEntity self, IGESData_ViewKindEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_ViewKindEntity self, Handle_IGESData_ViewKindEntity theHandle) -> Handle_IGESData_ViewKindEntity
        assign(Handle_IGESData_ViewKindEntity self, IGESData_ViewKindEntity thePtr) -> Handle_IGESData_ViewKindEntity
        assign(Handle_IGESData_ViewKindEntity self, Handle_IGESData_ViewKindEntity theHandle) -> Handle_IGESData_ViewKindEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_ViewKindEntity self) -> IGESData_ViewKindEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_ViewKindEntity self) -> IGESData_ViewKindEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_ViewKindEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_ViewKindEntity self) -> IGESData_ViewKindEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_ViewKindEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_ViewKindEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_ViewKindEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_ViewKindEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_ViewKindEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_ViewKindEntity

    def IsSingle(self, *args):
        """
        IsSingle(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        says if "me" is a Single View (True) or a List of Views (False)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Returns the count of Views for a List of Views. For a Single
        View, may return simply 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESData_ViewKindEntity self, Standard_Integer const num) -> Handle_IGESData_ViewKindEntity

        Returns the View n0. <num> for a List of Views. For a Single
        Views, may return <me> itself

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_ViewItem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_ViewKindEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_ViewKindEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_ViewKindEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_ViewKindEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_ViewKindEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_ViewKindEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_ViewKindEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_ViewKindEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_ViewKindEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_ViewKindEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_ViewKindEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_ViewKindEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_ViewKindEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_ViewKindEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_ViewKindEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_ViewKindEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_ViewKindEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_ViewKindEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_ViewKindEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_ViewKindEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_ViewKindEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_ViewKindEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_ViewKindEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_ViewKindEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_ViewKindEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_ViewKindEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_ViewKindEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_ViewKindEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_ViewKindEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_ViewKindEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_ViewKindEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_ViewKindEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_ViewKindEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_ViewKindEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_ViewKindEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_ViewKindEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_ViewKindEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_ViewKindEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_ViewKindEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_ViewKindEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_ViewKindEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_ViewKindEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_ViewKindEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_ViewKindEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_ViewKindEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ViewKindEntity_DecrementRefCounter(self, *args)

Handle_IGESData_ViewKindEntity_swigregister = _IGESData.Handle_IGESData_ViewKindEntity_swigregister
Handle_IGESData_ViewKindEntity_swigregister(Handle_IGESData_ViewKindEntity)

def Handle_IGESData_ViewKindEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_ViewKindEntity_DownCast(thing)
Handle_IGESData_ViewKindEntity_DownCast = _IGESData.Handle_IGESData_ViewKindEntity_DownCast

class Handle_IGESData_ColorEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_ColorEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_ColorEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_ColorEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_ColorEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_ColorEntity self, IGESData_ColorEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_ColorEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_ColorEntity self, Handle_IGESData_ColorEntity theHandle) -> Handle_IGESData_ColorEntity
        assign(Handle_IGESData_ColorEntity self, IGESData_ColorEntity thePtr) -> Handle_IGESData_ColorEntity
        assign(Handle_IGESData_ColorEntity self, Handle_IGESData_ColorEntity theHandle) -> Handle_IGESData_ColorEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_ColorEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_ColorEntity self) -> IGESData_ColorEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_ColorEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_ColorEntity self) -> IGESData_ColorEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_ColorEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_ColorEntity self) -> IGESData_ColorEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_ColorEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_ColorEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_ColorEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_ColorEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_ColorEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_ColorEntity

    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_ColorEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_ColorEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_ColorEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_ColorEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_ColorEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_ColorEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_ColorEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_ColorEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_ColorEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_ColorEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_ColorEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_ColorEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_ColorEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_ColorEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_ColorEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_ColorEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_ColorEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_ColorEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_ColorEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_ColorEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_ColorEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_ColorEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_ColorEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_ColorEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_ColorEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_ColorEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_ColorEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_ColorEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_ColorEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_ColorEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_ColorEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_ColorEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_ColorEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_ColorEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_ColorEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_ColorEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_ColorEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_ColorEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_ColorEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_ColorEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_ColorEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_ColorEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_ColorEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_ColorEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_ColorEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_ColorEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_ColorEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_ColorEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_ColorEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_ColorEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_ColorEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ColorEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_ColorEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ColorEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_ColorEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_ColorEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_ColorEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_ColorEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_ColorEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_ColorEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_ColorEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_ColorEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_ColorEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_ColorEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_ColorEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_ColorEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_ColorEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_ColorEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_ColorEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_ColorEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_ColorEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_ColorEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_ColorEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_ColorEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_ColorEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_ColorEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_ColorEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_ColorEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_ColorEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_ColorEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_ColorEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ColorEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_ColorEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_ColorEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_ColorEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_ColorEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_ColorEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ColorEntity_DecrementRefCounter(self, *args)

Handle_IGESData_ColorEntity_swigregister = _IGESData.Handle_IGESData_ColorEntity_swigregister
Handle_IGESData_ColorEntity_swigregister(Handle_IGESData_ColorEntity)

def Handle_IGESData_ColorEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_ColorEntity_DownCast(thing)
Handle_IGESData_ColorEntity_DownCast = _IGESData.Handle_IGESData_ColorEntity_DownCast

class IGESData_(object):
    """basic description of an IGES Interface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares General dynamic data used for IGESData specifically :
        Protocol and Modules, which treat UndefinedEntity


        """
        return _IGESData.IGESData__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESData_Protocol

        Returns a Protocol from IGESData (avoids to create it)

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.IGESData__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """basic description of an IGES Interface"""
        this = _IGESData.new_IGESData_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESData.delete_IGESData_
IGESData__swigregister = _IGESData.IGESData__swigregister
IGESData__swigregister(IGESData_)

def IGESData__Init(*args):
    """
    IGESData__Init()

    Prepares General dynamic data used for IGESData specifically :
    Protocol and Modules, which treat UndefinedEntity


    """
    return _IGESData.IGESData__Init(*args)

def IGESData__Protocol(*args):
    """
    IGESData__Protocol() -> Handle_IGESData_Protocol

    Returns a Protocol from IGESData (avoids to create it)

    :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

    """
    return _IGESData.IGESData__Protocol(*args)

class Handle_IGESData_FileProtocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_FileProtocol self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_FileProtocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_FileProtocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_FileProtocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_FileProtocol self, IGESData_FileProtocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_FileProtocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_FileProtocol self, Handle_IGESData_FileProtocol theHandle) -> Handle_IGESData_FileProtocol
        assign(Handle_IGESData_FileProtocol self, IGESData_FileProtocol thePtr) -> Handle_IGESData_FileProtocol
        assign(Handle_IGESData_FileProtocol self, Handle_IGESData_FileProtocol theHandle) -> Handle_IGESData_FileProtocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_FileProtocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_FileProtocol self) -> IGESData_FileProtocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_FileProtocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_FileProtocol self) -> IGESData_FileProtocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_FileProtocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_FileProtocol self) -> IGESData_FileProtocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_FileProtocol___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_FileProtocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_FileProtocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_FileProtocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_FileProtocol_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_FileProtocol

    def Add(self, *args):
        """
        Add(Handle_IGESData_FileProtocol self, Handle_IGESData_Protocol protocol)

        Adds a resource

        :type protocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.Handle_IGESData_FileProtocol_Add(self, *args)


    def NbResources(self, *args):
        """
        NbResources(Handle_IGESData_FileProtocol self) -> Standard_Integer

        Gives the count of Resources : the count of Added Protocols

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FileProtocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESData_FileProtocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank (rank of call to Add)

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.Handle_IGESData_FileProtocol_Resource(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_FileProtocol self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_FileProtocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_FileProtocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_FileProtocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_FileProtocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        Here, Undefined and Free Format Entities have the Number 1.

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FileProtocol_TypeNumber(self, *args)


    def NewModel(self, *args):
        """
        NewModel(Handle_IGESData_FileProtocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.Handle_IGESData_FileProtocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESData_FileProtocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileProtocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESData_FileProtocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.Handle_IGESData_FileProtocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESData_FileProtocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileProtocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESData_FileProtocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.Handle_IGESData_FileProtocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESData_FileProtocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.Handle_IGESData_FileProtocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESData_FileProtocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESData.Handle_IGESData_FileProtocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESData_FileProtocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FileProtocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESData_FileProtocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileProtocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESData_FileProtocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FileProtocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESData_FileProtocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.Handle_IGESData_FileProtocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESData_FileProtocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileProtocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_FileProtocol self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_FileProtocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_FileProtocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_FileProtocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileProtocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_FileProtocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_FileProtocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileProtocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_FileProtocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_FileProtocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_FileProtocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FileProtocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_FileProtocol self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_FileProtocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_FileProtocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FileProtocol_DecrementRefCounter(self, *args)

Handle_IGESData_FileProtocol_swigregister = _IGESData.Handle_IGESData_FileProtocol_swigregister
Handle_IGESData_FileProtocol_swigregister(Handle_IGESData_FileProtocol)

def Handle_IGESData_FileProtocol_DownCast(thing):
    return _IGESData.Handle_IGESData_FileProtocol_DownCast(thing)
Handle_IGESData_FileProtocol_DownCast = _IGESData.Handle_IGESData_FileProtocol_DownCast

class Handle_IGESData_FileRecognizer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_FileRecognizer self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_FileRecognizer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_FileRecognizer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_FileRecognizer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_FileRecognizer self, IGESData_FileRecognizer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_FileRecognizer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_FileRecognizer self, Handle_IGESData_FileRecognizer theHandle) -> Handle_IGESData_FileRecognizer
        assign(Handle_IGESData_FileRecognizer self, IGESData_FileRecognizer thePtr) -> Handle_IGESData_FileRecognizer
        assign(Handle_IGESData_FileRecognizer self, Handle_IGESData_FileRecognizer theHandle) -> Handle_IGESData_FileRecognizer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_FileRecognizer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_FileRecognizer self) -> IGESData_FileRecognizer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_FileRecognizer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_FileRecognizer self) -> IGESData_FileRecognizer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_FileRecognizer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_FileRecognizer self) -> IGESData_FileRecognizer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_FileRecognizer___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_FileRecognizer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_FileRecognizer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_FileRecognizer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_FileRecognizer_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_FileRecognizer

    def Evaluate(self, *args):
        """
        Evaluate(Handle_IGESData_FileRecognizer self, IGESData_IGESType akey, Handle_IGESData_IGESEntity res) -> Standard_Boolean

        Evaluates if recognition has a result, returns it if yes
        In case of success, Returns True and puts result in "res"
        In case of Failure, simply Returns False
        Works by calling deferred method Eval, and in case of failure,
        looks for Added Recognizers to work

        :type akey: OCC.wrapper.IGESData.IGESData_IGESType
        :type res: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileRecognizer_Evaluate(self, *args)


    def Result(self, *args):
        """
        Result(Handle_IGESData_FileRecognizer self) -> Handle_IGESData_IGESEntity

        Returns result of last recognition (call of Evaluate)

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FileRecognizer_Result(self, *args)


    def Add(self, *args):
        """
        Add(Handle_IGESData_FileRecognizer self, Handle_IGESData_FileRecognizer reco)

        Adds a new Recognizer to the Compound, at the end
        Several calls to Add work by adding in the order of calls :
        Hence, when Eval has failed to recognize, Evaluate will call
        Evaluate from the first added Recognizer if there is one,
        and to the second if there is still no result, and so on

        :type reco: OCC.wrapper.IGESData.Handle_IGESData_FileRecognizer

        """
        return _IGESData.Handle_IGESData_FileRecognizer_Add(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_FileRecognizer self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_FileRecognizer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_FileRecognizer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_FileRecognizer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_FileRecognizer self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_FileRecognizer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_FileRecognizer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_FileRecognizer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileRecognizer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_FileRecognizer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_FileRecognizer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FileRecognizer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_FileRecognizer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_FileRecognizer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_FileRecognizer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FileRecognizer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_FileRecognizer self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_FileRecognizer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_FileRecognizer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FileRecognizer_DecrementRefCounter(self, *args)

Handle_IGESData_FileRecognizer_swigregister = _IGESData.Handle_IGESData_FileRecognizer_swigregister
Handle_IGESData_FileRecognizer_swigregister(Handle_IGESData_FileRecognizer)

def Handle_IGESData_FileRecognizer_DownCast(thing):
    return _IGESData.Handle_IGESData_FileRecognizer_DownCast(thing)
Handle_IGESData_FileRecognizer_DownCast = _IGESData.Handle_IGESData_FileRecognizer_DownCast

class IGESData_SpecificLib(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetGlobal(*args):
        """
        SetGlobal(Handle_IGESData_SpecificModule amodule, Handle_IGESData_Protocol aprotocol)

        Adds a couple (Module-Protocol) into the global definition set
        for this class of Library.

        :type amodule: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule
        :type aprotocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.IGESData_SpecificLib_SetGlobal(*args)

    SetGlobal = staticmethod(SetGlobal)

    def __init__(self, *args):
        """
        __init__(IGESData_SpecificLib self, Handle_IGESData_Protocol aprotocol) -> IGESData_SpecificLib
        __init__(IGESData_SpecificLib self) -> IGESData_SpecificLib

        Creates an empty Library : it will later by filled by method
        AddProtocol


        """
        this = _IGESData.new_IGESData_SpecificLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddProtocol(self, *args):
        """
        AddProtocol(IGESData_SpecificLib self, Handle_Standard_Transient aprotocol)

        Adds a couple (Module-Protocol) to the Library, given the
        class of a Protocol. Takes Resources into account.
        (if <aprotocol> is not of type TheProtocol, it is not added)

        :type aprotocol: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.IGESData_SpecificLib_AddProtocol(self, *args)


    def Clear(self, *args):
        """
        Clear(IGESData_SpecificLib self)

        Clears the list of Modules of a library (can be used to
        redefine the order of Modules before action : Clear then
        refill the Library by calls to AddProtocol)


        """
        return _IGESData.IGESData_SpecificLib_Clear(self, *args)


    def SetComplete(self, *args):
        """
        SetComplete(IGESData_SpecificLib self)

        Sets a library to be defined with the complete Global list
        (all the couples Protocol/Modules recorded in it)


        """
        return _IGESData.IGESData_SpecificLib_SetComplete(self, *args)


    def Select(self, *args):
        """
        Select(IGESData_SpecificLib self, Handle_IGESData_IGESEntity obj, Handle_IGESData_SpecificModule module) -> Standard_Boolean

        Selects a Module from the Library, given an Object.
        Returns True if Select has succeeded, False else.
        Also Returns (as arguments) the selected Module and the Case
        Number determined by the associated Protocol.
        If Select has failed, <module> is Null Handle and CN is zero.
        (Select can work on any criterium, such as Object DynamicType)

        :type obj: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type module: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule
        :type CN: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_SpecificLib_Select(self, *args)


    def Start(self, *args):
        """
        Start(IGESData_SpecificLib self)

        Starts Iteration on the Modules (sets it on the first one)


        """
        return _IGESData.IGESData_SpecificLib_Start(self, *args)


    def More(self, *args):
        """
        More(IGESData_SpecificLib self) -> Standard_Boolean

        Returns True if there are more Modules to iterate on

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_SpecificLib_More(self, *args)


    def Next(self, *args):
        """
        Next(IGESData_SpecificLib self)

        Iterates by getting the next Module in the list
        If there is none, the exception will be raised by Value


        """
        return _IGESData.IGESData_SpecificLib_Next(self, *args)


    def Module(self, *args):
        """
        Returns the current Module in the Iteration

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule

        """
        res = _IGESData.IGESData_SpecificLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the current Protocol in the Iteration

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.IGESData_SpecificLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_SpecificLib
IGESData_SpecificLib_swigregister = _IGESData.IGESData_SpecificLib_swigregister
IGESData_SpecificLib_swigregister(IGESData_SpecificLib)

def IGESData_SpecificLib_SetGlobal(*args):
    """
    IGESData_SpecificLib_SetGlobal(Handle_IGESData_SpecificModule amodule, Handle_IGESData_Protocol aprotocol)

    Adds a couple (Module-Protocol) into the global definition set
    for this class of Library.

    :type amodule: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule
    :type aprotocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

    """
    return _IGESData.IGESData_SpecificLib_SetGlobal(*args)

class IGESData_IGESDumper(object):
    """
    Provides a way to obtain a clear Dump of an IGESEntity
    (distinct from normalized output). It works with tools
    attached to Entities, as for normalized Reade and Write

    For each Entity, displaying data is splitted in own data
    (specific to each type) and other attached data, which are
    defined for all IGES Types (either from "Directory Entry" or
    from Lists of Associativities and Properties)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_IGESDumper self, Handle_IGESData_IGESModel model, Handle_IGESData_Protocol protocol) -> IGESData_IGESDumper

        Returns an IGESDumper ready to work. The IGESModel provides
        the numbering of Entities : as for any InterfaceModel, it
        gives each Entity a number; but for IGESEntities, the "Number
        of Directory Entry" according to the definition of IGES Files,
        is also usefull

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type protocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        this = _IGESData.new_IGESData_IGESDumper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PrintDNum(self, *args):
        """
        PrintDNum(IGESData_IGESDumper self, Handle_IGESData_IGESEntity ent, Handle_Message_Messenger S)

        Prints onto an output, the "Number of Directory Entry" which
        corresponds to an IGESEntity in the IGESModel, under the form
        "D#nnn" (a Null Handle gives D#0)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESData.IGESData_IGESDumper_PrintDNum(self, *args)


    def PrintShort(self, *args):
        """
        PrintShort(IGESData_IGESDumper self, Handle_IGESData_IGESEntity ent, Handle_Message_Messenger S)

        Prints onto an output, the "Number of Directory Entry" (see
        PrintDNum) plus IGES Type and Form Numbers, which gives
        "D#nnn  Type nnn  Form nnn"

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESData.IGESData_IGESDumper_PrintShort(self, *args)


    def Dump(self, *args):
        """
        Dump(IGESData_IGESDumper self, Handle_IGESData_IGESEntity ent, Handle_Message_Messenger S, Standard_Integer const own, Standard_Integer const attached=-1)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int
        :type attached: int

        """
        return _IGESData.IGESData_IGESDumper_Dump(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESData_IGESDumper self, Handle_IGESData_IGESEntity ent, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump for each IGES Entity, call by Dump (just above)
        <own> is the parameter <own> from Dump

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESData.IGESData_IGESDumper_OwnDump(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_IGESDumper
IGESData_IGESDumper_swigregister = _IGESData.IGESData_IGESDumper_swigregister
IGESData_IGESDumper_swigregister(IGESData_IGESDumper)

class Handle_IGESData_UndefinedEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_UndefinedEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_UndefinedEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_UndefinedEntity self, IGESData_UndefinedEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_UndefinedEntity self, Handle_IGESData_UndefinedEntity theHandle) -> Handle_IGESData_UndefinedEntity
        assign(Handle_IGESData_UndefinedEntity self, IGESData_UndefinedEntity thePtr) -> Handle_IGESData_UndefinedEntity
        assign(Handle_IGESData_UndefinedEntity self, Handle_IGESData_UndefinedEntity theHandle) -> Handle_IGESData_UndefinedEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_UndefinedEntity self) -> IGESData_UndefinedEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_UndefinedEntity self) -> IGESData_UndefinedEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_UndefinedEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_UndefinedEntity self) -> IGESData_UndefinedEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_UndefinedEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_UndefinedEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_UndefinedEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_UndefinedEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_UndefinedEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_UndefinedEntity

    def UndefinedContent(self, *args):
        """
        UndefinedContent(Handle_IGESData_UndefinedEntity self) -> Handle_Interface_UndefinedContent

        Returns own data as an UndefinedContent

        :rtype: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_UndefinedContent(self, *args)


    def ChangeableContent(self, *args):
        """
        ChangeableContent(Handle_IGESData_UndefinedEntity self) -> Handle_Interface_UndefinedContent

        Returns own data as an UndefinedContent, in order to touch it

        :rtype: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_ChangeableContent(self, *args)


    def SetNewContent(self, *args):
        """
        SetNewContent(Handle_IGESData_UndefinedEntity self, Handle_Interface_UndefinedContent cont)

        Redefines a completely new UndefinedContent
        Used by a Copy which begins by ShallowCopy, for instance

        :type cont: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_SetNewContent(self, *args)


    def IsOKDirPart(self, *args):
        """
        IsOKDirPart(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        says if DirPart is OK or not (if not, it is erroneous)
        Note that if it is not, Def* methods can return Error status

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_IsOKDirPart(self, *args)


    def DirStatus(self, *args):
        """
        DirStatus(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        returns Directory Error Status (used for Copy)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_DirStatus(self, *args)


    def SetOKDirPart(self, *args):
        """
        SetOKDirPart(Handle_IGESData_UndefinedEntity self)

        Erases the Directory Error Status
        Warning : Be sure that data are consistent to call this method ...


        """
        return _IGESData.Handle_IGESData_UndefinedEntity_SetOKDirPart(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_UndefinedEntity self) -> IGESData_DefType

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_DefLineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_UndefinedEntity self) -> IGESData_DefList

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_DefLevel(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_UndefinedEntity self) -> IGESData_DefList

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_DefView(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_UndefinedEntity self) -> IGESData_DefType

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_DefColor(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        returns Error status if necessary, else calls original method
        (that is, if SubScript field is not blank or positive integer)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_HasSubScriptNumber(self, *args)


    def ReadDir(self, *args):
        """
        ReadDir(Handle_IGESData_UndefinedEntity self, Handle_IGESData_IGESReaderData IR, IGESData_DirPart DP, Handle_Interface_Check ach) -> Standard_Boolean

        Computes the Directory Error Status, to be called before
        standard ReadDir from IGESReaderTool
        Returns True if OK (hence, Directory can be loaded),
        Else returns False and the DirPart <DP> is modified
        (hence, Directory Error Status is non null; and standard Read
        will work with an acceptable DirectoryPart)

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type DP: OCC.wrapper.IGESData.IGESData_DirPart
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_ReadDir(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESData_UndefinedEntity self, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        reads own parameters from file; PR gives access to them, IR
        detains parameter types and values
        Here, reads all parameters, integers are considered as entity
        reference unless they cannot be; no list interpretation
        No property or associativity list is managed

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESData_UndefinedEntity self, IGESData_IGESWriter IW)

        writes parameters to IGESWriter, taken from UndefinedContent

        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_UndefinedEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_UndefinedEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_UndefinedEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_UndefinedEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_UndefinedEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Structure(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_LineFont(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_LevelList(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_UndefinedEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_LineWeight(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_UndefinedEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_UndefinedEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_ShortLabel(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_UndefinedEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_UndefinedEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_UndefinedEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_UndefinedEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_UndefinedEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_UndefinedEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_UndefinedEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_UndefinedEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_UndefinedEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_UndefinedEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_UndefinedEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_UndefinedEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_UndefinedEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_UndefinedEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_UndefinedEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_UndefinedEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_UndefinedEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_UndefinedEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_UndefinedEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_UndefinedEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_UndefinedEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_UndefinedEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_UndefinedEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_UndefinedEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_UndefinedEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_UndefinedEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_UndefinedEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_UndefinedEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_UndefinedEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_UndefinedEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_UndefinedEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_UndefinedEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_UndefinedEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_UndefinedEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_UndefinedEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_UndefinedEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_UndefinedEntity_DecrementRefCounter(self, *args)

Handle_IGESData_UndefinedEntity_swigregister = _IGESData.Handle_IGESData_UndefinedEntity_swigregister
Handle_IGESData_UndefinedEntity_swigregister(Handle_IGESData_UndefinedEntity)

def Handle_IGESData_UndefinedEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_UndefinedEntity_DownCast(thing)
Handle_IGESData_UndefinedEntity_DownCast = _IGESData.Handle_IGESData_UndefinedEntity_DownCast

class IGESData_FreeFormatEntity(IGESData_UndefinedEntity):
    """
    This class allows to create IGES Entities in a literal form :
    their definition is free, but they are not recognized as
    instances of specific classes.

    This is a way to define test files without having to create
    and fill specific classes of Entities, or creating an IGES
    File ex nihilo, with respect for all format constraints
    (such a way is very difficult to run and to master).

    This class has the same content as an UndefinedEntity, only
    it gives way to act on its content
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_FreeFormatEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_FreeFormatEntity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_FreeFormatEntity self) -> IGESData_FreeFormatEntity

        Creates a completely empty FreeFormatEntity


        """
        this = _IGESData.new_IGESData_FreeFormatEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetTypeNumber(self, *args):
        """
        SetTypeNumber(IGESData_FreeFormatEntity self, Standard_Integer const typenum)

        Sets Type Number to a new Value, and Form Number to Zero

        :type typenum: int

        """
        return _IGESData.IGESData_FreeFormatEntity_SetTypeNumber(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESData_FreeFormatEntity self, Standard_Integer const formnum)

        Sets Form Number to a new Value (to called after SetTypeNumber)

        :type formnum: int

        """
        return _IGESData.IGESData_FreeFormatEntity_SetFormNumber(self, *args)


    def NbParams(self, *args):
        """
        NbParams(IGESData_FreeFormatEntity self) -> Standard_Integer

        Gives count of recorded parameters

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_FreeFormatEntity_NbParams(self, *args)


    def ParamData(self, *args):
        """
        ParamData(IGESData_FreeFormatEntity self, Standard_Integer const num, Handle_IGESData_IGESEntity ent, Handle_TCollection_HAsciiString val) -> Standard_Boolean

        Returns data of a Parameter : its type, and the entity if it
        designates en entity ("ent") or its literal value else ("str")
        Returned value (Boolean) : True if it is an Entity, False else

        :type num: int
        :type ptype: OCC.wrapper.Interface.Interface_ParamType
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_FreeFormatEntity_ParamData(self, *args)


    def ParamType(self, *args):
        """
        ParamType(IGESData_FreeFormatEntity self, Standard_Integer const num) -> Interface_ParamType

        Returns the ParamType of a Param, given its rank
        Error if num is not between 1 and NbParams

        :type num: int
        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _IGESData.IGESData_FreeFormatEntity_ParamType(self, *args)


    def IsParamEntity(self, *args):
        """
        IsParamEntity(IGESData_FreeFormatEntity self, Standard_Integer const num) -> Standard_Boolean

        Returns True if a Parameter is recorded as an entity
        Error if num is not between 1 and NbParams

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_FreeFormatEntity_IsParamEntity(self, *args)


    def ParamEntity(self, *args):
        """
        ParamEntity(IGESData_FreeFormatEntity self, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        Returns Entity corresponding to a Param, given its rank
        Error if out of range or if Param num does not designate
        an Entity

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_FreeFormatEntity_ParamEntity(self, *args)


    def IsNegativePointer(self, *args):
        """
        IsNegativePointer(IGESData_FreeFormatEntity self, Standard_Integer const num) -> Standard_Boolean

        Returns True if <num> is noted as for a "Negative Pointer"
        (see AddEntity for details). Senseful only if IsParamEntity
        answers True for <num>, else returns False.

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_FreeFormatEntity_IsNegativePointer(self, *args)


    def ParamValue(self, *args):
        """
        ParamValue(IGESData_FreeFormatEntity self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        Returns litteral value of a Parameter, given its rank
        Error if num is out of range, or if Parameter is not literal

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_FreeFormatEntity_ParamValue(self, *args)


    def NegativePointers(self, *args):
        """
        NegativePointers(IGESData_FreeFormatEntity self) -> Handle_TColStd_HSequenceOfInteger

        Returns the complete list of Ramks of Parameters which have
        been noted as Negative Pointers
        Warning : It is returned as a Null Handle if none was noted

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfInteger

        """
        return _IGESData.IGESData_FreeFormatEntity_NegativePointers(self, *args)


    def AddLiteral(self, *args):
        """
        AddLiteral(IGESData_FreeFormatEntity self, Interface_ParamType const ptype, Handle_TCollection_HAsciiString val)
        AddLiteral(IGESData_FreeFormatEntity self, Interface_ParamType const ptype, Standard_CString const val)

        Adds a literal Parameter to the list (builds an HAsciiString)

        :type ptype: OCC.wrapper.Interface.Interface_ParamType
        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_FreeFormatEntity_AddLiteral(self, *args)


    def AddEntity(self, *args):
        """
        AddEntity(IGESData_FreeFormatEntity self, Interface_ParamType const ptype, Handle_IGESData_IGESEntity ent, Standard_Boolean const negative)

        Adds a Parameter which references an Entity. If the Entity is
        Null, the added parameter will define a "Null Pointer" (0)
        If <negative> is given True, this will command Sending to File
        (see IGESWriter) to produce a "Negative Pointer"
        (Default is False)

        :type ptype: OCC.wrapper.Interface.Interface_ParamType
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type negative: bool

        """
        return _IGESData.IGESData_FreeFormatEntity_AddEntity(self, *args)


    def AddEntities(self, *args):
        """
        AddEntities(IGESData_FreeFormatEntity self, Handle_IGESData_HArray1OfIGESEntity ents)

        Adds a set of Entities, given as a HArray1OfIGESEntity
        Causes creation of : an Integer Parameter which gives count
        of Entities, then the list of Entities of the Array
        Error if an Entity is not an IGESEntity
        All these Entities will be interpreted as "Positive Pointers"
        by IGESWriter

        :type ents: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESData.IGESData_FreeFormatEntity_AddEntities(self, *args)


    def AddNegativePointers(self, *args):
        """
        AddNegativePointers(IGESData_FreeFormatEntity self, Handle_TColStd_HSequenceOfInteger list)

        Adds a list of Ranks of Parameters to be noted as Negative
        Pointers (this will be taken into account for Parameters
        which are Entities)

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfInteger

        """
        return _IGESData.IGESData_FreeFormatEntity_AddNegativePointers(self, *args)


    def ClearNegativePointers(self, *args):
        """
        ClearNegativePointers(IGESData_FreeFormatEntity self)

        Clears all informations about Negative Pointers, hence every
        Entity kind Parameter will be send normally, as Positive


        """
        return _IGESData.IGESData_FreeFormatEntity_ClearNegativePointers(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESData_FreeFormatEntity self, IGESData_IGESWriter IW)

        WriteOwnParams is redefined for FreeFormatEntity to take
        into account the supplementary information "Negative Pointer"

        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESData.IGESData_FreeFormatEntity_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_FreeFormatEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_FreeFormatEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_FreeFormatEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_FreeFormatEntity
IGESData_FreeFormatEntity_swigregister = _IGESData.IGESData_FreeFormatEntity_swigregister
IGESData_FreeFormatEntity_swigregister(IGESData_FreeFormatEntity)

def IGESData_FreeFormatEntity_get_type_name(*args):
    """
    IGESData_FreeFormatEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_FreeFormatEntity_get_type_name(*args)

def IGESData_FreeFormatEntity_get_type_descriptor(*args):
    """
    IGESData_FreeFormatEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_FreeFormatEntity_get_type_descriptor(*args)

class Handle_IGESData_NameEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_NameEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_NameEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_NameEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_NameEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_NameEntity self, IGESData_NameEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_NameEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_NameEntity self, Handle_IGESData_NameEntity theHandle) -> Handle_IGESData_NameEntity
        assign(Handle_IGESData_NameEntity self, IGESData_NameEntity thePtr) -> Handle_IGESData_NameEntity
        assign(Handle_IGESData_NameEntity self, Handle_IGESData_NameEntity theHandle) -> Handle_IGESData_NameEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_NameEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_NameEntity self) -> IGESData_NameEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_NameEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_NameEntity self) -> IGESData_NameEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_NameEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_NameEntity self) -> IGESData_NameEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_NameEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_NameEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_NameEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_NameEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_NameEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_NameEntity

    def Value(self, *args):
        """
        Value(Handle_IGESData_NameEntity self) -> Handle_TCollection_HAsciiString

        Retyrns the alphanumeric value of the Name, to be defined

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_NameEntity_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_NameEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_NameEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_NameEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_NameEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_NameEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_NameEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_NameEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_NameEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_NameEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_NameEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_NameEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_NameEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_NameEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_NameEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_NameEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_NameEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_NameEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_NameEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_NameEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_NameEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_NameEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_NameEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_NameEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_NameEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_NameEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_NameEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_NameEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_NameEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_NameEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_NameEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_NameEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_NameEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_NameEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_NameEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_NameEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_NameEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_NameEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_NameEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_NameEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_NameEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_NameEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_NameEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_NameEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_NameEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_NameEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_NameEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_NameEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_NameEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_NameEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_NameEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_NameEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_NameEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_NameEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_NameEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_NameEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_NameEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_NameEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_NameEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_NameEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_NameEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_NameEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_NameEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_NameEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_NameEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_NameEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_NameEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_NameEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_NameEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_NameEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_NameEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_NameEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_NameEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_NameEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_NameEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_NameEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_NameEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_NameEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_NameEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_NameEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_NameEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_NameEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_NameEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_NameEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_NameEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_NameEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_NameEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_NameEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_NameEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_NameEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_NameEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_NameEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_NameEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_NameEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_NameEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_NameEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_NameEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NameEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_NameEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_NameEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_NameEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_NameEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_NameEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_NameEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NameEntity_DecrementRefCounter(self, *args)

Handle_IGESData_NameEntity_swigregister = _IGESData.Handle_IGESData_NameEntity_swigregister
Handle_IGESData_NameEntity_swigregister(Handle_IGESData_NameEntity)

def Handle_IGESData_NameEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_NameEntity_DownCast(thing)
Handle_IGESData_NameEntity_DownCast = _IGESData.Handle_IGESData_NameEntity_DownCast

class Handle_IGESData_GlobalNodeOfWriterLib(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_GlobalNodeOfWriterLib self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_GlobalNodeOfWriterLib self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_GlobalNodeOfWriterLib self, IGESData_GlobalNodeOfWriterLib thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_GlobalNodeOfWriterLib self, Handle_IGESData_GlobalNodeOfWriterLib theHandle) -> Handle_IGESData_GlobalNodeOfWriterLib
        assign(Handle_IGESData_GlobalNodeOfWriterLib self, IGESData_GlobalNodeOfWriterLib thePtr) -> Handle_IGESData_GlobalNodeOfWriterLib
        assign(Handle_IGESData_GlobalNodeOfWriterLib self, Handle_IGESData_GlobalNodeOfWriterLib theHandle) -> Handle_IGESData_GlobalNodeOfWriterLib

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_GlobalNodeOfWriterLib self) -> IGESData_GlobalNodeOfWriterLib

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_GlobalNodeOfWriterLib self) -> IGESData_GlobalNodeOfWriterLib

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_GlobalNodeOfWriterLib self) -> IGESData_GlobalNodeOfWriterLib

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_GlobalNodeOfWriterLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_GlobalNodeOfWriterLib_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_GlobalNodeOfWriterLib

    def Add(self, *args):
        """
        Add(Handle_IGESData_GlobalNodeOfWriterLib self, Handle_IGESData_ReadWriteModule amodule, Handle_IGESData_Protocol aprotocol)

        Adds a Module bound with a Protocol to the list : does
        nothing if already in the list, THAT IS, Same Type (exact
        match) and Same State (that is, IsEqual is not required)
        Once added, stores its attached Protocol in correspondance

        :type amodule: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule
        :type aprotocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_Add(self, *args)


    def Module(self, *args):
        """
        Returns the Module stored in a given GlobalNode

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the attached Protocol stored in a given GlobalNode

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Next(self, *args):
        """
        Returns the Next GlobalNode. If none is defined, returned
        value is a Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_GlobalNodeOfWriterLib

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_Next(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_GlobalNodeOfWriterLib self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_GlobalNodeOfWriterLib self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_GlobalNodeOfWriterLib self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_GlobalNodeOfWriterLib self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_GlobalNodeOfWriterLib self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_GlobalNodeOfWriterLib self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_GlobalNodeOfWriterLib self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_GlobalNodeOfWriterLib self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_GlobalNodeOfWriterLib self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_GlobalNodeOfWriterLib self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_DecrementRefCounter(self, *args)

Handle_IGESData_GlobalNodeOfWriterLib_swigregister = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_swigregister
Handle_IGESData_GlobalNodeOfWriterLib_swigregister(Handle_IGESData_GlobalNodeOfWriterLib)

def Handle_IGESData_GlobalNodeOfWriterLib_DownCast(thing):
    return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_DownCast(thing)
Handle_IGESData_GlobalNodeOfWriterLib_DownCast = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_DownCast

class IGESData_DirPart(object):
    """
    litteral/numeric description of an entity's directory section,
    taken from file
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_DirPart self) -> IGESData_DirPart

        creates an empty DirPart, ready to be filled by Init


        """
        this = _IGESData.new_IGESData_DirPart(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(IGESData_DirPart self, Standard_Integer const i1, Standard_Integer const i2, Standard_Integer const i3, Standard_Integer const i4, Standard_Integer const i5, Standard_Integer const i6, Standard_Integer const i7, Standard_Integer const i8, Standard_Integer const i9, Standard_Integer const i19, Standard_Integer const i11, Standard_Integer const i12, Standard_Integer const i13, Standard_Integer const i14, Standard_Integer const i15, Standard_Integer const i16, Standard_Integer const i17, Standard_CString const res1, Standard_CString const res2, Standard_CString const label, Standard_CString const subscript)

        fills DirPart with consistant data read from file

        :type i1: int
        :type i2: int
        :type i3: int
        :type i4: int
        :type i5: int
        :type i6: int
        :type i7: int
        :type i8: int
        :type i9: int
        :type i19: int
        :type i11: int
        :type i12: int
        :type i13: int
        :type i14: int
        :type i15: int
        :type i16: int
        :type i17: int
        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :type label: OCC.wrapper.Standard.Standard_CString
        :type subscript: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_DirPart_Init(self, *args)


    def Values(self, *args):
        """
        Values(IGESData_DirPart self, Standard_CString const res1, Standard_CString const res2, Standard_CString const label, Standard_CString const subscript)

        returns values recorded in DirPart
        (content of cstrings are modified)

        :type i1: int
        :type i2: int
        :type i3: int
        :type i4: int
        :type i5: int
        :type i6: int
        :type i7: int
        :type i8: int
        :type i9: int
        :type i19: int
        :type i11: int
        :type i12: int
        :type i13: int
        :type i14: int
        :type i15: int
        :type i16: int
        :type i17: int
        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :type label: OCC.wrapper.Standard.Standard_CString
        :type subscript: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_DirPart_Values(self, *args)


    def Type(self, *args):
        """
        Type(IGESData_DirPart self) -> IGESData_IGESType

        returns "type" and "form" info, used to recognize the entity

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.IGESData_DirPart_Type(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_DirPart
IGESData_DirPart_swigregister = _IGESData.IGESData_DirPart_swigregister
IGESData_DirPart_swigregister(IGESData_DirPart)

class IGESData_HArray1OfIGESEntity(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_HArray1OfIGESEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_HArray1OfIGESEntity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_HArray1OfIGESEntity self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESData_HArray1OfIGESEntity
        __init__(IGESData_HArray1OfIGESEntity self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESData_IGESEntity theValue) -> IGESData_HArray1OfIGESEntity
        __init__(IGESData_HArray1OfIGESEntity self, NCollection_Array1_Handle_IGESData_IGESEntity theOther) -> IGESData_HArray1OfIGESEntity

        :type theOther: OCC.wrapper.IGESData.IGESData_Array1OfIGESEntity

        """
        this = _IGESData.new_IGESData_HArray1OfIGESEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESData.IGESData_Array1OfIGESEntity

        """
        res = _IGESData.IGESData_HArray1OfIGESEntity_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESData_HArray1OfIGESEntity self) -> NCollection_Array1_Handle_IGESData_IGESEntity

        :rtype: OCC.wrapper.IGESData.IGESData_Array1OfIGESEntity

        """
        return _IGESData.IGESData_HArray1OfIGESEntity_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_HArray1OfIGESEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_HArray1OfIGESEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_HArray1OfIGESEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_HArray1OfIGESEntity
IGESData_HArray1OfIGESEntity_swigregister = _IGESData.IGESData_HArray1OfIGESEntity_swigregister
IGESData_HArray1OfIGESEntity_swigregister(IGESData_HArray1OfIGESEntity)

def IGESData_HArray1OfIGESEntity_get_type_name(*args):
    """
    IGESData_HArray1OfIGESEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_HArray1OfIGESEntity_get_type_name(*args)

def IGESData_HArray1OfIGESEntity_get_type_descriptor(*args):
    """
    IGESData_HArray1OfIGESEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_HArray1OfIGESEntity_get_type_descriptor(*args)

class IGESData_TransfEntity(IGESData_IGESEntity):
    """
    defines required type for Transf in directory part
    an effective Transf entity must inherits it
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_TransfEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_TransfEntity(self) 
            return h


    def Value(self, *args):
        """
        Value(IGESData_TransfEntity self) -> gp_GTrsf

        gives value of the transformation, as a GTrsf
        To be defined by an effective class of Transformation Entity
        Warning : Must take in account Composition : if a TransfEntity has in
        its Directory Part, a Transf, this means that it is Compound,
        Value must return the global result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.IGESData_TransfEntity_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_TransfEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_TransfEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_TransfEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_TransfEntity
IGESData_TransfEntity_swigregister = _IGESData.IGESData_TransfEntity_swigregister
IGESData_TransfEntity_swigregister(IGESData_TransfEntity)

def IGESData_TransfEntity_get_type_name(*args):
    """
    IGESData_TransfEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_TransfEntity_get_type_name(*args)

def IGESData_TransfEntity_get_type_descriptor(*args):
    """
    IGESData_TransfEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_TransfEntity_get_type_descriptor(*args)

class IGESData_IGESWriter(object):
    """
    manages atomic file writing, under control of IGESModel :
    prepare text to be sent then sends it
    takes into account distinction between successive Sections
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_IGESWriter self, Handle_IGESData_IGESModel amodel) -> IGESData_IGESWriter
        __init__(IGESData_IGESWriter self) -> IGESData_IGESWriter
        __init__(IGESData_IGESWriter self, IGESData_IGESWriter other) -> IGESData_IGESWriter

        Constructor by copy (not used) to satisfy the compiler

        :type other: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        this = _IGESData.new_IGESData_IGESWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FloatWriter(self, *args):
        """
        FloatWriter(IGESData_IGESWriter self) -> Interface_FloatWriter

        Returns the embedded FloatWriter, which controls sending Reals
        Use this method to access FloatWriter in order to consult or
        change its options (MainFormat, FormatForRange,ZeroSuppress),
        because it is returned as the address of its field

        :rtype: OCC.wrapper.Interface.Interface_FloatWriter

        """
        return _IGESData.IGESData_IGESWriter_FloatWriter(self, *args)


    def WriteMode(self, *args):
        """
        WriteMode(IGESData_IGESWriter self) -> Standard_Integer &

        Returns the write mode, in order to be read and/or changed
        Write Mode controls the way final print works
        0 (D) : Normal IGES, 10 : FNES

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESWriter_WriteMode(self, *args)


    def SendStartLine(self, *args):
        """
        SendStartLine(IGESData_IGESWriter self, Standard_CString const startline)

        Sends an additionnal Starting Line : this is the way used to
        send comments in an IGES File (at beginning of the file).
        If the line is more than 72 char.s long, it is splited into
        as many lines as required to send it completely

        :type startline: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_IGESWriter_SendStartLine(self, *args)


    def SendModel(self, *args):
        """
        SendModel(IGESData_IGESWriter self, Handle_IGESData_Protocol protocol)

        Sends the complete IGESModel (Global Section, Entities as
        Directory Entries & Parameter Lists, etc...)
        i.e. fills a list of texts. Once filled, it can be sent by
        method Print

        :type protocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.IGESData_IGESWriter_SendModel(self, *args)


    def SectionS(self, *args):
        """
        SectionS(IGESData_IGESWriter self)

        declares sending of S section (only a declaration)
        error if state is not initial


        """
        return _IGESData.IGESData_IGESWriter_SectionS(self, *args)


    def SectionG(self, *args):
        """
        SectionG(IGESData_IGESWriter self, IGESData_GlobalSection header)

        prepares sending of header, from a GlobalSection (stores it)
        error if SectionS was not called just before
        takes in account special characters (Separator, EndMark)

        :type header: OCC.wrapper.IGESData.IGESData_GlobalSection

        """
        return _IGESData.IGESData_IGESWriter_SectionG(self, *args)


    def SectionsDP(self, *args):
        """
        SectionsDP(IGESData_IGESWriter self)

        prepares sending of list of entities, as Sections D (directory
        list) and P (Parameters lists, one per entity)
        Entities will be then processed, one after the other
        error if SectionG has not be called just before


        """
        return _IGESData.IGESData_IGESWriter_SectionsDP(self, *args)


    def SectionT(self, *args):
        """
        SectionT(IGESData_IGESWriter self)

        declares sending of T section (only a declaration)
        error if does not follow Entities sending


        """
        return _IGESData.IGESData_IGESWriter_SectionT(self, *args)


    def DirPart(self, *args):
        """
        DirPart(IGESData_IGESWriter self, Handle_IGESData_IGESEntity anent)

        translates directory part of an Entity into a litteral DirPart
        Some infos are computed after sending parameters
        Error if not in sections DP or Stage not "Dir"

        :type anent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESWriter_DirPart(self, *args)


    def OwnParams(self, *args):
        """
        OwnParams(IGESData_IGESWriter self, Handle_IGESData_IGESEntity anent)

        sends own parameters of the entity, by sending firstly its
        type, then calling specific method WriteOwnParams
        Error if not in sections DP or Stage not "Own"

        :type anent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESWriter_OwnParams(self, *args)


    def Associativities(self, *args):
        """
        Associativities(IGESData_IGESWriter self, Handle_IGESData_IGESEntity anent)

        sends associativity list, as complement of parameters list
        error if not in sections DP or Stage not "Associativity"

        :type anent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESWriter_Associativities(self, *args)


    def Properties(self, *args):
        """
        Properties(IGESData_IGESWriter self, Handle_IGESData_IGESEntity anent)

        sends property list, as complement of parameters list
        error if not in sections DP or Stage not "Property"

        :type anent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESWriter_Properties(self, *args)


    def EndEntity(self, *args):
        """
        EndEntity(IGESData_IGESWriter self)

        declares end of sending an entity (ends param list by ';')


        """
        return _IGESData.IGESData_IGESWriter_EndEntity(self, *args)


    def SendVoid(self, *args):
        """
        SendVoid(IGESData_IGESWriter self)

        sends a void parameter, that is null text


        """
        return _IGESData.IGESData_IGESWriter_SendVoid(self, *args)


    def SendBoolean(self, *args):
        """
        SendBoolean(IGESData_IGESWriter self, Standard_Boolean const val)

        sends a Boolean parameter as an Integer value 0(False)/1(True)

        :type val: bool

        """
        return _IGESData.IGESData_IGESWriter_SendBoolean(self, *args)


    def SendString(self, *args):
        """
        SendString(IGESData_IGESWriter self, Handle_TCollection_HAsciiString val)

        sends a parameter under its exact form given as a string

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_IGESWriter_SendString(self, *args)


    def Send(self, *args):
        """
        Send(IGESData_IGESWriter self, Standard_Integer const val)
        Send(IGESData_IGESWriter self, Standard_Real const val)
        Send(IGESData_IGESWriter self, Handle_TCollection_HAsciiString val)
        Send(IGESData_IGESWriter self, Handle_IGESData_IGESEntity val, Standard_Boolean const negative)
        Send(IGESData_IGESWriter self, gp_XY val)
        Send(IGESData_IGESWriter self, gp_XYZ val)

        Sends a XYZ, interpreted as a couple of 2 Reals (X , Y & Z)

        :type val: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESData.IGESData_IGESWriter_Send(self, *args)


    def SectionStrings(self, *args):
        """
        SectionStrings(IGESData_IGESWriter self, Standard_Integer const numsec) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the list of strings for a section given its rank
        1 : Start (if not empty)  2 : Global  3 or 4 : Parameters
        RQ: no string list for Directory section
        An empty section gives a null handle

        :type numsec: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESData.IGESData_IGESWriter_SectionStrings(self, *args)


    def Print(self, *args):
        """
        Print(IGESData_IGESWriter self, Standard_OStream & S) -> Standard_Boolean

        Writes result on an output defined as an OStream
        resolves stored infos at this time; in particular, numbers of
        lines used to adress P-section from D-section and final totals
        Takes WriteMode into account

        :type S: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESWriter_Print(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_IGESWriter
IGESData_IGESWriter_swigregister = _IGESData.IGESData_IGESWriter_swigregister
IGESData_IGESWriter_swigregister(IGESData_IGESWriter)

class IGESData_IGESReaderData(Interface.Interface_FileReaderData):
    """
    specific FileReaderData for IGES
    contains header as GlobalSection, and for each Entity, its
    directory part as DirPart, list of Parameters as ParamSet
    Each Item has a DirPart, plus classically a ParamSet and the
    correspondant recognized Entity (inherited from FileReaderData)
    Parameters are accessed through specific objects, ParamReaders
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_IGESReaderData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_IGESReaderData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_IGESReaderData self, Standard_Integer const nbe, Standard_Integer const nbp) -> IGESData_IGESReaderData

        creates IGESReaderData correctly dimensionned (for arrays)
        <nbe> count of entities, that is, half nb of directory lines
        <nbp> : count of parameters

        :type nbe: int
        :type nbp: int

        """
        this = _IGESData.new_IGESData_IGESReaderData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AddStartLine(self, *args):
        """
        AddStartLine(IGESData_IGESReaderData self, Standard_CString const aval)

        adds a start line to start section

        :type aval: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_IGESReaderData_AddStartLine(self, *args)


    def StartSection(self, *args):
        """
        StartSection(IGESData_IGESReaderData self) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the Start Section in once

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESData.IGESData_IGESReaderData_StartSection(self, *args)


    def AddGlobal(self, *args):
        """
        AddGlobal(IGESData_IGESReaderData self, Interface_ParamType const atype, Standard_CString const aval)

        adds a parameter to global section's parameter list

        :type atype: OCC.wrapper.Interface.Interface_ParamType
        :type aval: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_IGESReaderData_AddGlobal(self, *args)


    def SetGlobalSection(self, *args):
        """
        SetGlobalSection(IGESData_IGESReaderData self)

        reads header (as GlobalSection) content from the ParamSet
        after it has been filled by successive calls to AddGlobal


        """
        return _IGESData.IGESData_IGESReaderData_SetGlobalSection(self, *args)


    def GlobalSection(self, *args):
        """
        returns header as GlobalSection

        :rtype: OCC.wrapper.IGESData.IGESData_GlobalSection

        """
        res = _IGESData.IGESData_IGESReaderData_GlobalSection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDirPart(self, *args):
        """
        SetDirPart(IGESData_IGESReaderData self, Standard_Integer const num, Standard_Integer const i1, Standard_Integer const i2, Standard_Integer const i3, Standard_Integer const i4, Standard_Integer const i5, Standard_Integer const i6, Standard_Integer const i7, Standard_Integer const i8, Standard_Integer const i9, Standard_Integer const i10, Standard_Integer const i11, Standard_Integer const i12, Standard_Integer const i13, Standard_Integer const i14, Standard_Integer const i15, Standard_Integer const i16, Standard_Integer const i17, Standard_CString const res1, Standard_CString const res2, Standard_CString const label, Standard_CString const subs)

        fills a DirPart, designated by its rank (that is, (N+1)/2 if N
        is its first number in section D)

        :type num: int
        :type i1: int
        :type i2: int
        :type i3: int
        :type i4: int
        :type i5: int
        :type i6: int
        :type i7: int
        :type i8: int
        :type i9: int
        :type i10: int
        :type i11: int
        :type i12: int
        :type i13: int
        :type i14: int
        :type i15: int
        :type i16: int
        :type i17: int
        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :type label: OCC.wrapper.Standard.Standard_CString
        :type subs: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_IGESReaderData_SetDirPart(self, *args)


    def DirPart(self, *args):
        """
        returns DirPart identified by record no (half Dsect number)

        :type num: int
        :rtype: OCC.wrapper.IGESData.IGESData_DirPart

        """
        res = _IGESData.IGESData_IGESReaderData_DirPart(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DirValues(self, *args):
        """
        DirValues(IGESData_IGESReaderData self, Standard_Integer const num, Standard_CString & res1, Standard_CString & res2, Standard_CString & label, Standard_CString & subs)

        returns values recorded in directory part n0 <num>

        :type num: int
        :type i1: int
        :type i2: int
        :type i3: int
        :type i4: int
        :type i5: int
        :type i6: int
        :type i7: int
        :type i8: int
        :type i9: int
        :type i10: int
        :type i11: int
        :type i12: int
        :type i13: int
        :type i14: int
        :type i15: int
        :type i16: int
        :type i17: int
        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :type label: OCC.wrapper.Standard.Standard_CString
        :type subs: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_IGESReaderData_DirValues(self, *args)


    def DirType(self, *args):
        """
        DirType(IGESData_IGESReaderData self, Standard_Integer const num) -> IGESData_IGESType

        returns "type" and "form" info from a directory part

        :type num: int
        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.IGESData_IGESReaderData_DirType(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(IGESData_IGESReaderData self) -> Standard_Integer

        Returns count of recorded Entities (i.e. size of Directory)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESReaderData_NbEntities(self, *args)


    def FindNextRecord(self, *args):
        """
        FindNextRecord(IGESData_IGESReaderData self, Standard_Integer const num) -> Standard_Integer

        determines next suitable record from num; that is num+1 except
        for last one which gives 0

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESReaderData_FindNextRecord(self, *args)


    def SetEntityNumbers(self, *args):
        """
        SetEntityNumbers(IGESData_IGESReaderData self)

        determines reference numbers in EntityNumber fields (called by
        SetEntities from IGESReaderTool)
        works on "Integer" type Parameters, because IGES does not
        distinguish Integer and Entity Refs : every Integer which is
        odd and less than twice NbRecords can be an Entity Ref ...
        (Ref Number is then (N+1)/2 if N is the Integer Value)


        """
        return _IGESData.IGESData_IGESReaderData_SetEntityNumbers(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(IGESData_IGESReaderData self) -> Handle_Interface_Check

        Returns the recorded Global Check

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.IGESData_IGESReaderData_GlobalCheck(self, *args)


    def SetDefaultLineWeight(self, *args):
        """
        SetDefaultLineWeight(IGESData_IGESReaderData self, Standard_Real const defw)

        allows to set a default line weight, will be later applied at
        load time, on Entities which have no specified line weight

        :type defw: float

        """
        return _IGESData.IGESData_IGESReaderData_SetDefaultLineWeight(self, *args)


    def DefaultLineWeight(self, *args):
        """
        DefaultLineWeight(IGESData_IGESReaderData self) -> Standard_Real

        Returns the recorded Default Line Weight, if there is
        (else, returns 0)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.IGESData_IGESReaderData_DefaultLineWeight(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_IGESReaderData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_IGESReaderData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_IGESReaderData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_IGESReaderData
IGESData_IGESReaderData_swigregister = _IGESData.IGESData_IGESReaderData_swigregister
IGESData_IGESReaderData_swigregister(IGESData_IGESReaderData)

def IGESData_IGESReaderData_get_type_name(*args):
    """
    IGESData_IGESReaderData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_IGESReaderData_get_type_name(*args)

def IGESData_IGESReaderData_get_type_descriptor(*args):
    """
    IGESData_IGESReaderData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_IGESReaderData_get_type_descriptor(*args)

class Handle_IGESData_TransfEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_TransfEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_TransfEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_TransfEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_TransfEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_TransfEntity self, IGESData_TransfEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_TransfEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_TransfEntity self, Handle_IGESData_TransfEntity theHandle) -> Handle_IGESData_TransfEntity
        assign(Handle_IGESData_TransfEntity self, IGESData_TransfEntity thePtr) -> Handle_IGESData_TransfEntity
        assign(Handle_IGESData_TransfEntity self, Handle_IGESData_TransfEntity theHandle) -> Handle_IGESData_TransfEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_TransfEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_TransfEntity self) -> IGESData_TransfEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_TransfEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_TransfEntity self) -> IGESData_TransfEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_TransfEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_TransfEntity self) -> IGESData_TransfEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_TransfEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_TransfEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_TransfEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_TransfEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_TransfEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_TransfEntity

    def Value(self, *args):
        """
        Value(Handle_IGESData_TransfEntity self) -> gp_GTrsf

        gives value of the transformation, as a GTrsf
        To be defined by an effective class of Transformation Entity
        Warning : Must take in account Composition : if a TransfEntity has in
        its Directory Part, a Transf, this means that it is Compound,
        Value must return the global result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_TransfEntity_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_TransfEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_TransfEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_TransfEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_TransfEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_TransfEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_TransfEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_TransfEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_TransfEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_TransfEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_TransfEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_TransfEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_TransfEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_TransfEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_TransfEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_TransfEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_TransfEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_TransfEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_TransfEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_TransfEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_TransfEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_TransfEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_TransfEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_TransfEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_TransfEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_TransfEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_TransfEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_TransfEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_TransfEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_TransfEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_TransfEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_TransfEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_TransfEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_TransfEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_TransfEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_TransfEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_TransfEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_TransfEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_TransfEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_TransfEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_TransfEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_TransfEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_TransfEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_TransfEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_TransfEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_TransfEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_TransfEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_TransfEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_TransfEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_TransfEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_TransfEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_TransfEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_TransfEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_TransfEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_TransfEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_TransfEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_TransfEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_TransfEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_TransfEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_TransfEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_TransfEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_TransfEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_TransfEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_TransfEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_TransfEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_TransfEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_TransfEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_TransfEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_TransfEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_TransfEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_TransfEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_TransfEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_TransfEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_TransfEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_TransfEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_TransfEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_TransfEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_TransfEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_TransfEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_TransfEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_TransfEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_TransfEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_TransfEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_TransfEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_TransfEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_TransfEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_TransfEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_TransfEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_TransfEntity_DecrementRefCounter(self, *args)

Handle_IGESData_TransfEntity_swigregister = _IGESData.Handle_IGESData_TransfEntity_swigregister
Handle_IGESData_TransfEntity_swigregister(Handle_IGESData_TransfEntity)

def Handle_IGESData_TransfEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_TransfEntity_DownCast(thing)
Handle_IGESData_TransfEntity_DownCast = _IGESData.Handle_IGESData_TransfEntity_DownCast

class IGESData_SingleParentEntity(IGESData_IGESEntity):
    """
    a SingleParentEntity is a kind of IGESEntity which can refer
    to a (Single) Parent, from Associativities list of an Entity
    a effective SingleParent definition entity must inherit it
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_SingleParentEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_SingleParentEntity(self) 
            return h


    def SingleParent(self, *args):
        """
        SingleParent(IGESData_SingleParentEntity self) -> Handle_IGESData_IGESEntity

        Returns the parent designated by the Entity, if only one !

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_SingleParentEntity_SingleParent(self, *args)


    def NbChildren(self, *args):
        """
        NbChildren(IGESData_SingleParentEntity self) -> Standard_Integer

        Returns the count of Entities designated as children

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_SingleParentEntity_NbChildren(self, *args)


    def Child(self, *args):
        """
        Child(IGESData_SingleParentEntity self, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        Returns a Child given its rank

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_SingleParentEntity_Child(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_SingleParentEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_SingleParentEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_SingleParentEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_SingleParentEntity
IGESData_SingleParentEntity_swigregister = _IGESData.IGESData_SingleParentEntity_swigregister
IGESData_SingleParentEntity_swigregister(IGESData_SingleParentEntity)

def IGESData_SingleParentEntity_get_type_name(*args):
    """
    IGESData_SingleParentEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_SingleParentEntity_get_type_name(*args)

def IGESData_SingleParentEntity_get_type_descriptor(*args):
    """
    IGESData_SingleParentEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_SingleParentEntity_get_type_descriptor(*args)

class IGESData_GlobalSection(object):
    """
    Description of a global section (corresponds to file header)
    used as well in IGESModel, IGESReader and IGESWriter
    Warning : From IGES-5.1, a parameter is added : LastChangeDate (concerns
    transferred set of data, not the file itself)
    Of course, it can be absent if read from earlier versions
    (a default is then to be set to current date)
    From 5.3, one more : ApplicationProtocol (optional)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_GlobalSection self) -> IGESData_GlobalSection

        Creates an empty GlobalSection, ready to be filled,
        Warning : No default value is provided


        """
        this = _IGESData.new_IGESData_GlobalSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(IGESData_GlobalSection self, Handle_Interface_ParamSet params, Handle_Interface_Check ach)

        Fills GlobalSection from a ParamSet (i.e. taken from file)
        undefined parameters do not change default values when defined
        Fills Check about Corrections or Fails

        :type params: OCC.wrapper.Interface.Handle_Interface_ParamSet
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.IGESData_GlobalSection_Init(self, *args)


    def CopyRefs(self, *args):
        """
        CopyRefs(IGESData_GlobalSection self)

        Copies data referenced by Handle (that is, Strings)
        usefull to "isolate" a GlobalSection after copy by "="
        (from a Model to another Model for instance)


        """
        return _IGESData.IGESData_GlobalSection_CopyRefs(self, *args)


    def Params(self, *args):
        """
        Params(IGESData_GlobalSection self) -> Handle_Interface_ParamSet

        Returns all contained data in the form of a ParamSet
        Remark : Strings are given under Hollerith form

        :rtype: OCC.wrapper.Interface.Handle_Interface_ParamSet

        """
        return _IGESData.IGESData_GlobalSection_Params(self, *args)


    def TranslatedFromHollerith(self, *args):
        """
        TranslatedFromHollerith(IGESData_GlobalSection self, Handle_TCollection_HAsciiString astr) -> Handle_TCollection_HAsciiString

        Returns a string withpout its Hollerith marks (nnnH ahead).
        Remark : all strings stored in GlobalSection are expurged
        from Hollerith informations (without nnnH)
        If <astr> is not Hollerith form, it is simply copied

        :type astr: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_TranslatedFromHollerith(self, *args)


    def Separator(self, *args):
        """
        Separator(IGESData_GlobalSection self) -> Standard_Character

        Returns the parameter delimiter character.

        :rtype: OCC.wrapper.Standard.Standard_Character

        """
        return _IGESData.IGESData_GlobalSection_Separator(self, *args)


    def EndMark(self, *args):
        """
        EndMark(IGESData_GlobalSection self) -> Standard_Character

        Returns the record delimiter character.

        :rtype: OCC.wrapper.Standard.Standard_Character

        """
        return _IGESData.IGESData_GlobalSection_EndMark(self, *args)


    def SendName(self, *args):
        """
        SendName(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the name of the sending system.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SendName(self, *args)


    def FileName(self, *args):
        """
        FileName(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the name of the IGES file.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_FileName(self, *args)


    def SystemId(self, *args):
        """
        SystemId(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the Native System ID of the system that created the IGES file.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SystemId(self, *args)


    def InterfaceVersion(self, *args):
        """
        InterfaceVersion(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the name of the pre-processor used to write the IGES file.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_InterfaceVersion(self, *args)


    def IntegerBits(self, *args):
        """
        IntegerBits(IGESData_GlobalSection self) -> Standard_Integer

        Returns the number of binary bits for integer representations.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_IntegerBits(self, *args)


    def MaxPower10Single(self, *args):
        """
        MaxPower10Single(IGESData_GlobalSection self) -> Standard_Integer

        Returns the maximum power of a decimal representation of a
        single-precision floating point number in the sending system.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_MaxPower10Single(self, *args)


    def MaxDigitsSingle(self, *args):
        """
        MaxDigitsSingle(IGESData_GlobalSection self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_MaxDigitsSingle(self, *args)


    def MaxPower10Double(self, *args):
        """
        MaxPower10Double(IGESData_GlobalSection self) -> Standard_Integer

        Returns the maximum power of a decimal representation of a
        double-precision floating point number in the sending system.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_MaxPower10Double(self, *args)


    def MaxDigitsDouble(self, *args):
        """
        MaxDigitsDouble(IGESData_GlobalSection self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_MaxDigitsDouble(self, *args)


    def ReceiveName(self, *args):
        """
        ReceiveName(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the name of the receiving system.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_ReceiveName(self, *args)


    def Scale(self, *args):
        """
        Scale(IGESData_GlobalSection self) -> Standard_Real

        Returns the scale used in the IGES file.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.IGESData_GlobalSection_Scale(self, *args)


    def UnitFlag(self, *args):
        """
        UnitFlag(IGESData_GlobalSection self) -> Standard_Integer

        Returns the unit flag that was used to write the IGES file.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_UnitFlag(self, *args)


    def UnitName(self, *args):
        """
        UnitName(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the name of the unit the IGES file was written in.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_UnitName(self, *args)


    def LineWeightGrad(self, *args):
        """
        LineWeightGrad(IGESData_GlobalSection self) -> Standard_Integer

        Returns the maximum number of line weight gradations.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_LineWeightGrad(self, *args)


    def MaxLineWeight(self, *args):
        """
        MaxLineWeight(IGESData_GlobalSection self) -> Standard_Real

        Returns the of maximum line weight width in IGES file units.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.IGESData_GlobalSection_MaxLineWeight(self, *args)


    def Date(self, *args):
        """
        Date(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the IGES file creation date.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_Date(self, *args)


    def Resolution(self, *args):
        """
        Resolution(IGESData_GlobalSection self) -> Standard_Real

        Returns the resolution used in the IGES file.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.IGESData_GlobalSection_Resolution(self, *args)


    def MaxCoord(self, *args):
        """
        MaxCoord(IGESData_GlobalSection self) -> Standard_Real

        Returns the approximate maximum coordinate value found in the model.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.IGESData_GlobalSection_MaxCoord(self, *args)


    def HasMaxCoord(self, *args):
        """
        HasMaxCoord(IGESData_GlobalSection self) -> Standard_Boolean

        Returns True if the approximate maximum coordinate value found in
        the model is greater than 0.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_GlobalSection_HasMaxCoord(self, *args)


    def AuthorName(self, *args):
        """
        AuthorName(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the name of the IGES file author.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_AuthorName(self, *args)


    def CompanyName(self, *args):
        """
        CompanyName(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the name of the company where the IGES file was written.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_CompanyName(self, *args)


    def IGESVersion(self, *args):
        """
        IGESVersion(IGESData_GlobalSection self) -> Standard_Integer

        Returns the IGES version that the IGES file was written in.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_IGESVersion(self, *args)


    def DraftingStandard(self, *args):
        """
        DraftingStandard(IGESData_GlobalSection self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_GlobalSection_DraftingStandard(self, *args)


    def LastChangeDate(self, *args):
        """
        LastChangeDate(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        Returns the date and time when the model was created or last
        modified (for IGES 5.1 and later).

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_LastChangeDate(self, *args)


    def HasLastChangeDate(self, *args):
        """
        HasLastChangeDate(IGESData_GlobalSection self) -> Standard_Boolean

        Returns True if the date and time when the model was created or
        last modified are specified, i.e. not defaulted to NULL.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_GlobalSection_HasLastChangeDate(self, *args)


    def ApplicationProtocol(self, *args):
        """
        ApplicationProtocol(IGESData_GlobalSection self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_ApplicationProtocol(self, *args)


    def HasApplicationProtocol(self, *args):
        """
        HasApplicationProtocol(IGESData_GlobalSection self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_GlobalSection_HasApplicationProtocol(self, *args)


    def NewDateString(*args):
        """
        NewDateString(Standard_Integer const year, Standard_Integer const month, Standard_Integer const day, Standard_Integer const hour, Standard_Integer const minut, Standard_Integer const second, Standard_Integer const mode=-1) -> Handle_TCollection_HAsciiString
        NewDateString(Handle_TCollection_HAsciiString date, Standard_Integer const mode=1) -> Handle_TCollection_HAsciiString

        Converts the string given in the
        form YYMMDD.HHNNSS or YYYYMMDD.HHNNSS to either
        YYMMDD.HHNNSS, YYYYMMDD.HHNNSS or YYYY-MM-DD:HH-NN-SS.

        :type date: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type mode: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_NewDateString(*args)

    NewDateString = staticmethod(NewDateString)

    def UnitValue(self, *args):
        """
        UnitValue(IGESData_GlobalSection self) -> Standard_Real

        Returns the unit value (in
        meters) that the IGES file was written in.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.IGESData_GlobalSection_UnitValue(self, *args)


    def SetSeparator(self, *args):
        """
        SetSeparator(IGESData_GlobalSection self, Standard_Character const val)

        :type val: OCC.wrapper.Standard.Standard_Character

        """
        return _IGESData.IGESData_GlobalSection_SetSeparator(self, *args)


    def SetEndMark(self, *args):
        """
        SetEndMark(IGESData_GlobalSection self, Standard_Character const val)

        :type val: OCC.wrapper.Standard.Standard_Character

        """
        return _IGESData.IGESData_GlobalSection_SetEndMark(self, *args)


    def SetSendName(self, *args):
        """
        SetSendName(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetSendName(self, *args)


    def SetFileName(self, *args):
        """
        SetFileName(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetFileName(self, *args)


    def SetSystemId(self, *args):
        """
        SetSystemId(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetSystemId(self, *args)


    def SetInterfaceVersion(self, *args):
        """
        SetInterfaceVersion(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetInterfaceVersion(self, *args)


    def SetIntegerBits(self, *args):
        """
        SetIntegerBits(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetIntegerBits(self, *args)


    def SetMaxPower10Single(self, *args):
        """
        SetMaxPower10Single(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetMaxPower10Single(self, *args)


    def SetMaxDigitsSingle(self, *args):
        """
        SetMaxDigitsSingle(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetMaxDigitsSingle(self, *args)


    def SetMaxPower10Double(self, *args):
        """
        SetMaxPower10Double(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetMaxPower10Double(self, *args)


    def SetMaxDigitsDouble(self, *args):
        """
        SetMaxDigitsDouble(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetMaxDigitsDouble(self, *args)


    def SetReceiveName(self, *args):
        """
        SetReceiveName(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetReceiveName(self, *args)


    def SetScale(self, *args):
        """
        SetScale(IGESData_GlobalSection self, Standard_Real const val)

        :type val: float

        """
        return _IGESData.IGESData_GlobalSection_SetScale(self, *args)


    def SetUnitFlag(self, *args):
        """
        SetUnitFlag(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetUnitFlag(self, *args)


    def SetUnitName(self, *args):
        """
        SetUnitName(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetUnitName(self, *args)


    def SetLineWeightGrad(self, *args):
        """
        SetLineWeightGrad(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetLineWeightGrad(self, *args)


    def SetMaxLineWeight(self, *args):
        """
        SetMaxLineWeight(IGESData_GlobalSection self, Standard_Real const val)

        :type val: float

        """
        return _IGESData.IGESData_GlobalSection_SetMaxLineWeight(self, *args)


    def SetDate(self, *args):
        """
        SetDate(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetDate(self, *args)


    def SetResolution(self, *args):
        """
        SetResolution(IGESData_GlobalSection self, Standard_Real const val)

        :type val: float

        """
        return _IGESData.IGESData_GlobalSection_SetResolution(self, *args)


    def SetMaxCoord(self, *args):
        """
        SetMaxCoord(IGESData_GlobalSection self, Standard_Real const val=0.0)

        :type val: float

        """
        return _IGESData.IGESData_GlobalSection_SetMaxCoord(self, *args)


    def MaxMaxCoord(self, *args):
        """
        MaxMaxCoord(IGESData_GlobalSection self, Standard_Real const val=0.0)

        :type val: float

        """
        return _IGESData.IGESData_GlobalSection_MaxMaxCoord(self, *args)


    def MaxMaxCoords(self, *args):
        """
        MaxMaxCoords(IGESData_GlobalSection self, gp_XYZ xyz)

        :type xyz: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESData.IGESData_GlobalSection_MaxMaxCoords(self, *args)


    def SetAuthorName(self, *args):
        """
        SetAuthorName(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetAuthorName(self, *args)


    def SetCompanyName(self, *args):
        """
        SetCompanyName(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetCompanyName(self, *args)


    def SetIGESVersion(self, *args):
        """
        SetIGESVersion(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetIGESVersion(self, *args)


    def SetDraftingStandard(self, *args):
        """
        SetDraftingStandard(IGESData_GlobalSection self, Standard_Integer const val)

        :type val: int

        """
        return _IGESData.IGESData_GlobalSection_SetDraftingStandard(self, *args)


    def SetLastChangeDate(self, *args):
        """
        SetLastChangeDate(IGESData_GlobalSection self)
        SetLastChangeDate(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetLastChangeDate(self, *args)


    def SetApplicationProtocol(self, *args):
        """
        SetApplicationProtocol(IGESData_GlobalSection self, Handle_TCollection_HAsciiString val)

        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_GlobalSection_SetApplicationProtocol(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_GlobalSection
IGESData_GlobalSection_swigregister = _IGESData.IGESData_GlobalSection_swigregister
IGESData_GlobalSection_swigregister(IGESData_GlobalSection)

def IGESData_GlobalSection_NewDateString(*args):
    """
    NewDateString(Standard_Integer const year, Standard_Integer const month, Standard_Integer const day, Standard_Integer const hour, Standard_Integer const minut, Standard_Integer const second, Standard_Integer const mode=-1) -> Handle_TCollection_HAsciiString
    IGESData_GlobalSection_NewDateString(Handle_TCollection_HAsciiString date, Standard_Integer const mode=1) -> Handle_TCollection_HAsciiString

    Converts the string given in the
    form YYMMDD.HHNNSS or YYYYMMDD.HHNNSS to either
    YYMMDD.HHNNSS, YYYYMMDD.HHNNSS or YYYY-MM-DD:HH-NN-SS.

    :type date: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
    :type mode: int
    :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

    """
    return _IGESData.IGESData_GlobalSection_NewDateString(*args)

class Handle_IGESData_FreeFormatEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_FreeFormatEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_FreeFormatEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_FreeFormatEntity self, IGESData_FreeFormatEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_FreeFormatEntity theHandle) -> Handle_IGESData_FreeFormatEntity
        assign(Handle_IGESData_FreeFormatEntity self, IGESData_FreeFormatEntity thePtr) -> Handle_IGESData_FreeFormatEntity
        assign(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_FreeFormatEntity theHandle) -> Handle_IGESData_FreeFormatEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_FreeFormatEntity self) -> IGESData_FreeFormatEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_FreeFormatEntity self) -> IGESData_FreeFormatEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_FreeFormatEntity self) -> IGESData_FreeFormatEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_FreeFormatEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_FreeFormatEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_FreeFormatEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_FreeFormatEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_FreeFormatEntity

    def SetTypeNumber(self, *args):
        """
        SetTypeNumber(Handle_IGESData_FreeFormatEntity self, Standard_Integer const typenum)

        Sets Type Number to a new Value, and Form Number to Zero

        :type typenum: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SetTypeNumber(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESData_FreeFormatEntity self, Standard_Integer const formnum)

        Sets Form Number to a new Value (to called after SetTypeNumber)

        :type formnum: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SetFormNumber(self, *args)


    def NbParams(self, *args):
        """
        NbParams(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Gives count of recorded parameters

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_NbParams(self, *args)


    def ParamData(self, *args):
        """
        ParamData(Handle_IGESData_FreeFormatEntity self, Standard_Integer const num, Handle_IGESData_IGESEntity ent, Handle_TCollection_HAsciiString val) -> Standard_Boolean

        Returns data of a Parameter : its type, and the entity if it
        designates en entity ("ent") or its literal value else ("str")
        Returned value (Boolean) : True if it is an Entity, False else

        :type num: int
        :type ptype: OCC.wrapper.Interface.Interface_ParamType
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ParamData(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_IGESData_FreeFormatEntity self, Standard_Integer const num) -> Interface_ParamType

        Returns the ParamType of a Param, given its rank
        Error if num is not between 1 and NbParams

        :type num: int
        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ParamType(self, *args)


    def IsParamEntity(self, *args):
        """
        IsParamEntity(Handle_IGESData_FreeFormatEntity self, Standard_Integer const num) -> Standard_Boolean

        Returns True if a Parameter is recorded as an entity
        Error if num is not between 1 and NbParams

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_IsParamEntity(self, *args)


    def ParamEntity(self, *args):
        """
        ParamEntity(Handle_IGESData_FreeFormatEntity self, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        Returns Entity corresponding to a Param, given its rank
        Error if out of range or if Param num does not designate
        an Entity

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ParamEntity(self, *args)


    def IsNegativePointer(self, *args):
        """
        IsNegativePointer(Handle_IGESData_FreeFormatEntity self, Standard_Integer const num) -> Standard_Boolean

        Returns True if <num> is noted as for a "Negative Pointer"
        (see AddEntity for details). Senseful only if IsParamEntity
        answers True for <num>, else returns False.

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_IsNegativePointer(self, *args)


    def ParamValue(self, *args):
        """
        ParamValue(Handle_IGESData_FreeFormatEntity self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        Returns litteral value of a Parameter, given its rank
        Error if num is out of range, or if Parameter is not literal

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ParamValue(self, *args)


    def NegativePointers(self, *args):
        """
        NegativePointers(Handle_IGESData_FreeFormatEntity self) -> Handle_TColStd_HSequenceOfInteger

        Returns the complete list of Ramks of Parameters which have
        been noted as Negative Pointers
        Warning : It is returned as a Null Handle if none was noted

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfInteger

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_NegativePointers(self, *args)


    def AddLiteral(self, *args):
        """
        AddLiteral(Handle_IGESData_FreeFormatEntity self, Interface_ParamType const ptype, Handle_TCollection_HAsciiString val)
        AddLiteral(Handle_IGESData_FreeFormatEntity self, Interface_ParamType const ptype, Standard_CString const val)

        Adds a literal Parameter to the list (builds an HAsciiString)

        :type ptype: OCC.wrapper.Interface.Interface_ParamType
        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_AddLiteral(self, *args)


    def AddEntity(self, *args):
        """
        AddEntity(Handle_IGESData_FreeFormatEntity self, Interface_ParamType const ptype, Handle_IGESData_IGESEntity ent, Standard_Boolean const negative)

        Adds a Parameter which references an Entity. If the Entity is
        Null, the added parameter will define a "Null Pointer" (0)
        If <negative> is given True, this will command Sending to File
        (see IGESWriter) to produce a "Negative Pointer"
        (Default is False)

        :type ptype: OCC.wrapper.Interface.Interface_ParamType
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type negative: bool

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_AddEntity(self, *args)


    def AddEntities(self, *args):
        """
        AddEntities(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_HArray1OfIGESEntity ents)

        Adds a set of Entities, given as a HArray1OfIGESEntity
        Causes creation of : an Integer Parameter which gives count
        of Entities, then the list of Entities of the Array
        Error if an Entity is not an IGESEntity
        All these Entities will be interpreted as "Positive Pointers"
        by IGESWriter

        :type ents: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_AddEntities(self, *args)


    def AddNegativePointers(self, *args):
        """
        AddNegativePointers(Handle_IGESData_FreeFormatEntity self, Handle_TColStd_HSequenceOfInteger list)

        Adds a list of Ranks of Parameters to be noted as Negative
        Pointers (this will be taken into account for Parameters
        which are Entities)

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfInteger

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_AddNegativePointers(self, *args)


    def ClearNegativePointers(self, *args):
        """
        ClearNegativePointers(Handle_IGESData_FreeFormatEntity self)

        Clears all informations about Negative Pointers, hence every
        Entity kind Parameter will be send normally, as Positive


        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ClearNegativePointers(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESData_FreeFormatEntity self, IGESData_IGESWriter IW)

        WriteOwnParams is redefined for FreeFormatEntity to take
        into account the supplementary information "Negative Pointer"

        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_FreeFormatEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_FreeFormatEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_FreeFormatEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def UndefinedContent(self, *args):
        """
        UndefinedContent(Handle_IGESData_FreeFormatEntity self) -> Handle_Interface_UndefinedContent

        Returns own data as an UndefinedContent

        :rtype: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_UndefinedContent(self, *args)


    def ChangeableContent(self, *args):
        """
        ChangeableContent(Handle_IGESData_FreeFormatEntity self) -> Handle_Interface_UndefinedContent

        Returns own data as an UndefinedContent, in order to touch it

        :rtype: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ChangeableContent(self, *args)


    def SetNewContent(self, *args):
        """
        SetNewContent(Handle_IGESData_FreeFormatEntity self, Handle_Interface_UndefinedContent cont)

        Redefines a completely new UndefinedContent
        Used by a Copy which begins by ShallowCopy, for instance

        :type cont: OCC.wrapper.Interface.Handle_Interface_UndefinedContent

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SetNewContent(self, *args)


    def IsOKDirPart(self, *args):
        """
        IsOKDirPart(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        says if DirPart is OK or not (if not, it is erroneous)
        Note that if it is not, Def* methods can return Error status

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_IsOKDirPart(self, *args)


    def DirStatus(self, *args):
        """
        DirStatus(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        returns Directory Error Status (used for Copy)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_DirStatus(self, *args)


    def SetOKDirPart(self, *args):
        """
        SetOKDirPart(Handle_IGESData_FreeFormatEntity self)

        Erases the Directory Error Status
        Warning : Be sure that data are consistent to call this method ...


        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SetOKDirPart(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_FreeFormatEntity self) -> IGESData_DefType

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_DefLineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_FreeFormatEntity self) -> IGESData_DefList

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_DefLevel(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_FreeFormatEntity self) -> IGESData_DefList

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_DefView(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_FreeFormatEntity self) -> IGESData_DefType

        returns Error status if necessary, else calls original method

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_DefColor(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        returns Error status if necessary, else calls original method
        (that is, if SubScript field is not blank or positive integer)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_HasSubScriptNumber(self, *args)


    def ReadDir(self, *args):
        """
        ReadDir(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_IGESReaderData IR, IGESData_DirPart DP, Handle_Interface_Check ach) -> Standard_Boolean

        Computes the Directory Error Status, to be called before
        standard ReadDir from IGESReaderTool
        Returns True if OK (hence, Directory can be loaded),
        Else returns False and the DirPart <DP> is modified
        (hence, Directory Error Status is non null; and standard Read
        will work with an acceptable DirectoryPart)

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type DP: OCC.wrapper.IGESData.IGESData_DirPart
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ReadDir(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        reads own parameters from file; PR gives access to them, IR
        detains parameter types and values
        Here, reads all parameters, integers are considered as entity
        reference unless they cannot be; no list interpretation
        No property or associativity list is managed

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ReadOwnParams(self, *args)


    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_FreeFormatEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_FreeFormatEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Structure(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_LineFont(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_LevelList(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_FreeFormatEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_LineWeight(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_FreeFormatEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_FreeFormatEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ShortLabel(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_FreeFormatEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_FreeFormatEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_FreeFormatEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_FreeFormatEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_FreeFormatEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_FreeFormatEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_FreeFormatEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_FreeFormatEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_FreeFormatEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_FreeFormatEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_FreeFormatEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_FreeFormatEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_FreeFormatEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_FreeFormatEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_FreeFormatEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_FreeFormatEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_FreeFormatEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_FreeFormatEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_FreeFormatEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_FreeFormatEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_FreeFormatEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_FreeFormatEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_FreeFormatEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_FreeFormatEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_FreeFormatEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_FreeFormatEntity_DecrementRefCounter(self, *args)

Handle_IGESData_FreeFormatEntity_swigregister = _IGESData.Handle_IGESData_FreeFormatEntity_swigregister
Handle_IGESData_FreeFormatEntity_swigregister(Handle_IGESData_FreeFormatEntity)

def Handle_IGESData_FreeFormatEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_FreeFormatEntity_DownCast(thing)
Handle_IGESData_FreeFormatEntity_DownCast = _IGESData.Handle_IGESData_FreeFormatEntity_DownCast

class Handle_IGESData_IGESReaderData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_IGESReaderData self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_IGESReaderData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_IGESReaderData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_IGESReaderData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_IGESReaderData self, IGESData_IGESReaderData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_IGESReaderData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_IGESReaderData self, Handle_IGESData_IGESReaderData theHandle) -> Handle_IGESData_IGESReaderData
        assign(Handle_IGESData_IGESReaderData self, IGESData_IGESReaderData thePtr) -> Handle_IGESData_IGESReaderData
        assign(Handle_IGESData_IGESReaderData self, Handle_IGESData_IGESReaderData theHandle) -> Handle_IGESData_IGESReaderData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_IGESReaderData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_IGESReaderData self) -> IGESData_IGESReaderData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_IGESReaderData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_IGESReaderData self) -> IGESData_IGESReaderData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_IGESReaderData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_IGESReaderData self) -> IGESData_IGESReaderData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_IGESReaderData___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_IGESReaderData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_IGESReaderData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_IGESReaderData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_IGESReaderData_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_IGESReaderData

    def AddStartLine(self, *args):
        """
        AddStartLine(Handle_IGESData_IGESReaderData self, Standard_CString const aval)

        adds a start line to start section

        :type aval: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_IGESReaderData_AddStartLine(self, *args)


    def StartSection(self, *args):
        """
        StartSection(Handle_IGESData_IGESReaderData self) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the Start Section in once

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESData.Handle_IGESData_IGESReaderData_StartSection(self, *args)


    def AddGlobal(self, *args):
        """
        AddGlobal(Handle_IGESData_IGESReaderData self, Interface_ParamType const atype, Standard_CString const aval)

        adds a parameter to global section's parameter list

        :type atype: OCC.wrapper.Interface.Interface_ParamType
        :type aval: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_IGESReaderData_AddGlobal(self, *args)


    def SetGlobalSection(self, *args):
        """
        SetGlobalSection(Handle_IGESData_IGESReaderData self)

        reads header (as GlobalSection) content from the ParamSet
        after it has been filled by successive calls to AddGlobal


        """
        return _IGESData.Handle_IGESData_IGESReaderData_SetGlobalSection(self, *args)


    def GlobalSection(self, *args):
        """
        returns header as GlobalSection

        :rtype: OCC.wrapper.IGESData.IGESData_GlobalSection

        """
        res = _IGESData.Handle_IGESData_IGESReaderData_GlobalSection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDirPart(self, *args):
        """
        SetDirPart(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_Integer const i1, Standard_Integer const i2, Standard_Integer const i3, Standard_Integer const i4, Standard_Integer const i5, Standard_Integer const i6, Standard_Integer const i7, Standard_Integer const i8, Standard_Integer const i9, Standard_Integer const i10, Standard_Integer const i11, Standard_Integer const i12, Standard_Integer const i13, Standard_Integer const i14, Standard_Integer const i15, Standard_Integer const i16, Standard_Integer const i17, Standard_CString const res1, Standard_CString const res2, Standard_CString const label, Standard_CString const subs)

        fills a DirPart, designated by its rank (that is, (N+1)/2 if N
        is its first number in section D)

        :type num: int
        :type i1: int
        :type i2: int
        :type i3: int
        :type i4: int
        :type i5: int
        :type i6: int
        :type i7: int
        :type i8: int
        :type i9: int
        :type i10: int
        :type i11: int
        :type i12: int
        :type i13: int
        :type i14: int
        :type i15: int
        :type i16: int
        :type i17: int
        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :type label: OCC.wrapper.Standard.Standard_CString
        :type subs: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_IGESReaderData_SetDirPart(self, *args)


    def DirPart(self, *args):
        """
        returns DirPart identified by record no (half Dsect number)

        :type num: int
        :rtype: OCC.wrapper.IGESData.IGESData_DirPart

        """
        res = _IGESData.Handle_IGESData_IGESReaderData_DirPart(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DirValues(self, *args):
        """
        DirValues(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_CString & res1, Standard_CString & res2, Standard_CString & label, Standard_CString & subs)

        returns values recorded in directory part n0 <num>

        :type num: int
        :type i1: int
        :type i2: int
        :type i3: int
        :type i4: int
        :type i5: int
        :type i6: int
        :type i7: int
        :type i8: int
        :type i9: int
        :type i10: int
        :type i11: int
        :type i12: int
        :type i13: int
        :type i14: int
        :type i15: int
        :type i16: int
        :type i17: int
        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :type label: OCC.wrapper.Standard.Standard_CString
        :type subs: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_IGESReaderData_DirValues(self, *args)


    def DirType(self, *args):
        """
        DirType(Handle_IGESData_IGESReaderData self, Standard_Integer const num) -> IGESData_IGESType

        returns "type" and "form" info from a directory part

        :type num: int
        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_IGESReaderData_DirType(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESData_IGESReaderData self) -> Standard_Integer

        Returns count of recorded Entities (i.e. size of Directory)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESReaderData_NbEntities(self, *args)


    def FindNextRecord(self, *args):
        """
        FindNextRecord(Handle_IGESData_IGESReaderData self, Standard_Integer const num) -> Standard_Integer

        determines next suitable record from num; that is num+1 except
        for last one which gives 0

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESReaderData_FindNextRecord(self, *args)


    def SetEntityNumbers(self, *args):
        """
        SetEntityNumbers(Handle_IGESData_IGESReaderData self)

        determines reference numbers in EntityNumber fields (called by
        SetEntities from IGESReaderTool)
        works on "Integer" type Parameters, because IGES does not
        distinguish Integer and Entity Refs : every Integer which is
        odd and less than twice NbRecords can be an Entity Ref ...
        (Ref Number is then (N+1)/2 if N is the Integer Value)


        """
        return _IGESData.Handle_IGESData_IGESReaderData_SetEntityNumbers(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESData_IGESReaderData self) -> Handle_Interface_Check

        Returns the recorded Global Check

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.Handle_IGESData_IGESReaderData_GlobalCheck(self, *args)


    def SetDefaultLineWeight(self, *args):
        """
        SetDefaultLineWeight(Handle_IGESData_IGESReaderData self, Standard_Real const defw)

        allows to set a default line weight, will be later applied at
        load time, on Entities which have no specified line weight

        :type defw: float

        """
        return _IGESData.Handle_IGESData_IGESReaderData_SetDefaultLineWeight(self, *args)


    def DefaultLineWeight(self, *args):
        """
        DefaultLineWeight(Handle_IGESData_IGESReaderData self) -> Standard_Real

        Returns the recorded Default Line Weight, if there is
        (else, returns 0)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_IGESReaderData_DefaultLineWeight(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_IGESReaderData self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_IGESReaderData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_IGESReaderData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_IGESReaderData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbRecords(self, *args):
        """
        NbRecords(Handle_IGESData_IGESReaderData self) -> Standard_Integer

        Returns the count of registered records
        That is, value given for Initialization (can be redefined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESReaderData_NbRecords(self, *args)


    def InitParams(self, *args):
        """
        InitParams(Handle_IGESData_IGESReaderData self, Standard_Integer const num)

        attaches an empty ParamList to a Record

        :type num: int

        """
        return _IGESData.Handle_IGESData_IGESReaderData_InitParams(self, *args)


    def AddParam(self, *args):
        """
        AddParam(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_CString const aval, Interface_ParamType const atype, Standard_Integer const nument=0)
        AddParam(Handle_IGESData_IGESReaderData self, Standard_Integer const num, TCollection_AsciiString aval, Interface_ParamType const atype, Standard_Integer const nument=0)
        AddParam(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Interface_FileParameter FP)

        Same as above, but gets a complete FileParameter
        Warning : Content of <FP> is NOT copied : its original address and space
        in memory are assumed to be managed elsewhere (see ParamSet)

        :type num: int
        :type FP: OCC.wrapper.Interface.Interface_FileParameter

        """
        return _IGESData.Handle_IGESData_IGESReaderData_AddParam(self, *args)


    def SetParam(self, *args):
        """
        SetParam(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_Integer const nump, Interface_FileParameter FP)

        Sets a new value for a parameter of a record, given by :
        num : record number; nump : parameter number in the record

        :type num: int
        :type nump: int
        :type FP: OCC.wrapper.Interface.Interface_FileParameter

        """
        return _IGESData.Handle_IGESData_IGESReaderData_SetParam(self, *args)


    def NbParams(self, *args):
        """
        NbParams(Handle_IGESData_IGESReaderData self, Standard_Integer const num) -> Standard_Integer

        Returns count of parameters attached to record "num"
        If <num> = 0, returns the total recorded count of parameters

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESReaderData_NbParams(self, *args)


    def Params(self, *args):
        """
        Params(Handle_IGESData_IGESReaderData self, Standard_Integer const num) -> Handle_Interface_ParamList

        Returns the complete ParamList of a record (read only)
        num = 0 to return the whole param list for the file

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_ParamList

        """
        return _IGESData.Handle_IGESData_IGESReaderData_Params(self, *args)


    def Param(self, *args):
        """
        Returns parameter "nump" of record "num", as a complete
        FileParameter

        :type num: int
        :type nump: int
        :rtype: OCC.wrapper.Interface.Interface_FileParameter

        """
        res = _IGESData.Handle_IGESData_IGESReaderData_Param(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeParam(self, *args):
        """
        ChangeParam(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_Integer const nump) -> Interface_FileParameter

        Same as above, but in order to be modified on place

        :type num: int
        :type nump: int
        :rtype: OCC.wrapper.Interface.Interface_FileParameter

        """
        return _IGESData.Handle_IGESData_IGESReaderData_ChangeParam(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_Integer const nump) -> Interface_ParamType

        Returns type of parameter "nump" of record "num"
        Returns literal value of parameter "nump" of record "num"
        was C++ : return const &

        :type num: int
        :type nump: int
        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _IGESData.Handle_IGESData_IGESReaderData_ParamType(self, *args)


    def ParamCValue(self, *args):
        """
        ParamCValue(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_Integer const nump) -> Standard_CString

        Same as above, but as a CString
        was C++ : return const

        :type num: int
        :type nump: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_IGESReaderData_ParamCValue(self, *args)


    def IsParamDefined(self, *args):
        """
        IsParamDefined(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_Integer const nump) -> Standard_Boolean

        Returns True if parameter "nump" of record "num" is defined
        (it is not if its type is ParamVoid)

        :type num: int
        :type nump: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESReaderData_IsParamDefined(self, *args)


    def ParamNumber(self, *args):
        """
        ParamNumber(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Standard_Integer const nump) -> Standard_Integer

        Returns record number of an entity referenced by a parameter
        of type Ident; 0 if no EntityNumber has been determined
        Note that it is used to reference Entities but also Sublists
        (sublists are not objects, but internal descriptions)

        :type num: int
        :type nump: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESReaderData_ParamNumber(self, *args)


    def ParamEntity(self, *args):
        """
        Returns the StepEntity referenced by a parameter
        Error if none

        :type num: int
        :type nump: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        res = _IGESData.Handle_IGESData_IGESReaderData_ParamEntity(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ParamFirstRank(self, *args):
        """
        ParamFirstRank(Handle_IGESData_IGESReaderData self, Standard_Integer const num) -> Standard_Integer

        Returns the absolute rank of the beginning of a record
        (its lsit is from ParamFirstRank+1 to ParamFirstRank+NbParams)

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESReaderData_ParamFirstRank(self, *args)


    def BoundEntity(self, *args):
        """
        Returns the entity bound to a record, set by SetEntities

        :type num: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        res = _IGESData.Handle_IGESData_IGESReaderData_BoundEntity(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BindEntity(self, *args):
        """
        BindEntity(Handle_IGESData_IGESReaderData self, Standard_Integer const num, Handle_Standard_Transient ent)

        Binds an entity to a record

        :type num: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.Handle_IGESData_IGESReaderData_BindEntity(self, *args)


    def SetErrorLoad(self, *args):
        """
        SetErrorLoad(Handle_IGESData_IGESReaderData self, Standard_Boolean const val)

        Sets the status "Error Load" on, to overside check fails
        <val> True  : declares unloaded
        <val> False : declares loaded
        If not called before loading (see FileReaderTool), check fails
        give the status
        IsErrorLoad says if SetErrorLoad has been called by user
        ResetErrorLoad resets it (called by FileReaderTool)
        This allows to specify that the currently loaded entity
        remains unloaded (because of syntactic fail)

        :type val: bool

        """
        return _IGESData.Handle_IGESData_IGESReaderData_SetErrorLoad(self, *args)


    def IsErrorLoad(self, *args):
        """
        IsErrorLoad(Handle_IGESData_IGESReaderData self) -> Standard_Boolean

        Returns True if the status "Error Load" has been set (to True
        or False)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESReaderData_IsErrorLoad(self, *args)


    def ResetErrorLoad(self, *args):
        """
        ResetErrorLoad(Handle_IGESData_IGESReaderData self) -> Standard_Boolean

        Returns the former value of status "Error Load" then resets it
        Used to read the status then ensure it is reset

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESReaderData_ResetErrorLoad(self, *args)


    def Destroy(self, *args):
        """
        Destroy(Handle_IGESData_IGESReaderData self)

        Destructor (waiting for memory management)


        """
        return _IGESData.Handle_IGESData_IGESReaderData_Destroy(self, *args)


    def Fastof(self, *args):
        """
        Fastof(Handle_IGESData_IGESReaderData self, Standard_CString const str) -> Standard_Real

        Same spec.s as standard <atof> but 5 times faster

        :type str: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_IGESReaderData_Fastof(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_IGESReaderData self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_IGESReaderData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_IGESReaderData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_IGESReaderData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESReaderData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_IGESReaderData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_IGESReaderData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESReaderData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_IGESReaderData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_IGESReaderData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_IGESReaderData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESReaderData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_IGESReaderData self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_IGESReaderData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_IGESReaderData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESReaderData_DecrementRefCounter(self, *args)

Handle_IGESData_IGESReaderData_swigregister = _IGESData.Handle_IGESData_IGESReaderData_swigregister
Handle_IGESData_IGESReaderData_swigregister(Handle_IGESData_IGESReaderData)

def Handle_IGESData_IGESReaderData_DownCast(thing):
    return _IGESData.Handle_IGESData_IGESReaderData_DownCast(thing)
Handle_IGESData_IGESReaderData_DownCast = _IGESData.Handle_IGESData_IGESReaderData_DownCast

class Handle_IGESData_LineFontEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_LineFontEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_LineFontEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_LineFontEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_LineFontEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_LineFontEntity self, IGESData_LineFontEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_LineFontEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_LineFontEntity self, Handle_IGESData_LineFontEntity theHandle) -> Handle_IGESData_LineFontEntity
        assign(Handle_IGESData_LineFontEntity self, IGESData_LineFontEntity thePtr) -> Handle_IGESData_LineFontEntity
        assign(Handle_IGESData_LineFontEntity self, Handle_IGESData_LineFontEntity theHandle) -> Handle_IGESData_LineFontEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_LineFontEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_LineFontEntity self) -> IGESData_LineFontEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_LineFontEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_LineFontEntity self) -> IGESData_LineFontEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_LineFontEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_LineFontEntity self) -> IGESData_LineFontEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_LineFontEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_LineFontEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_LineFontEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_LineFontEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_LineFontEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_LineFontEntity

    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_LineFontEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_LineFontEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_LineFontEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_LineFontEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_LineFontEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_LineFontEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_LineFontEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_LineFontEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_LineFontEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_LineFontEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_LineFontEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_LineFontEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_LineFontEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_LineFontEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_LineFontEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_LineFontEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_LineFontEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_LineFontEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_LineFontEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_LineFontEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_LineFontEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_LineFontEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_LineFontEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_LineFontEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_LineFontEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_LineFontEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_LineFontEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_LineFontEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_LineFontEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_LineFontEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_LineFontEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_LineFontEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_LineFontEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_LineFontEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_LineFontEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_LineFontEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_LineFontEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_LineFontEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LineFontEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_LineFontEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LineFontEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_LineFontEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_LineFontEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_LineFontEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_LineFontEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_LineFontEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_LineFontEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_LineFontEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_LineFontEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_LineFontEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_LineFontEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_LineFontEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_LineFontEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_LineFontEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LineFontEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_LineFontEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_LineFontEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_LineFontEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_LineFontEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_LineFontEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_LineFontEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_LineFontEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_LineFontEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LineFontEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_LineFontEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_LineFontEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_LineFontEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_LineFontEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LineFontEntity_DecrementRefCounter(self, *args)

Handle_IGESData_LineFontEntity_swigregister = _IGESData.Handle_IGESData_LineFontEntity_swigregister
Handle_IGESData_LineFontEntity_swigregister(Handle_IGESData_LineFontEntity)

def Handle_IGESData_LineFontEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_LineFontEntity_DownCast(thing)
Handle_IGESData_LineFontEntity_DownCast = _IGESData.Handle_IGESData_LineFontEntity_DownCast

class Handle_IGESData_LevelListEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_LevelListEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_LevelListEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_LevelListEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_LevelListEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_LevelListEntity self, IGESData_LevelListEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_LevelListEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_LevelListEntity self, Handle_IGESData_LevelListEntity theHandle) -> Handle_IGESData_LevelListEntity
        assign(Handle_IGESData_LevelListEntity self, IGESData_LevelListEntity thePtr) -> Handle_IGESData_LevelListEntity
        assign(Handle_IGESData_LevelListEntity self, Handle_IGESData_LevelListEntity theHandle) -> Handle_IGESData_LevelListEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_LevelListEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_LevelListEntity self) -> IGESData_LevelListEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_LevelListEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_LevelListEntity self) -> IGESData_LevelListEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_LevelListEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_LevelListEntity self) -> IGESData_LevelListEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_LevelListEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_LevelListEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_LevelListEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_LevelListEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_LevelListEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_LevelListEntity

    def NbLevelNumbers(self, *args):
        """
        NbLevelNumbers(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Must return the count of levels

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_NbLevelNumbers(self, *args)


    def LevelNumber(self, *args):
        """
        LevelNumber(Handle_IGESData_LevelListEntity self, Standard_Integer const num) -> Standard_Integer

        returns the Level Number of <me>, indicated by <num>
        raises an exception if num is out of range

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_LevelNumber(self, *args)


    def HasLevelNumber(self, *args):
        """
        HasLevelNumber(Handle_IGESData_LevelListEntity self, Standard_Integer const level) -> Standard_Boolean

        returns True if <level> is in the list

        :type level: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HasLevelNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_LevelListEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_LevelListEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_LevelListEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_LevelListEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_LevelListEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_LevelListEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_LevelListEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_LevelListEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_LevelListEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_LevelListEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_LevelListEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_LevelListEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_LevelListEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_LevelListEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_LevelListEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_LevelListEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_LevelListEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_LevelListEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_LevelListEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_LevelListEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_LevelListEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_LevelListEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_LevelListEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_LevelListEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_LevelListEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_LevelListEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_LevelListEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_LevelListEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_LevelListEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_LevelListEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_LevelListEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_LevelListEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_LevelListEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_LevelListEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_LevelListEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_LevelListEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_LevelListEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_LevelListEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LevelListEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_LevelListEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LevelListEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_LevelListEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_LevelListEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_LevelListEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_LevelListEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_LevelListEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_LevelListEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_LevelListEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_LevelListEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_LevelListEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_LevelListEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_LevelListEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_LevelListEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_LevelListEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_LevelListEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LevelListEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_LevelListEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_LevelListEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_LevelListEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_LevelListEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_LevelListEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_LevelListEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_LevelListEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_LevelListEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LevelListEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_LevelListEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_LevelListEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_LevelListEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_LevelListEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_LevelListEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LevelListEntity_DecrementRefCounter(self, *args)

Handle_IGESData_LevelListEntity_swigregister = _IGESData.Handle_IGESData_LevelListEntity_swigregister
Handle_IGESData_LevelListEntity_swigregister(Handle_IGESData_LevelListEntity)

def Handle_IGESData_LevelListEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_LevelListEntity_DownCast(thing)
Handle_IGESData_LevelListEntity_DownCast = _IGESData.Handle_IGESData_LevelListEntity_DownCast

class IGESData_IGESReaderTool(Interface.Interface_FileReaderTool):
    """
    specific FileReaderTool for IGES
    Parameters are accessed through specific objects, ParamReaders
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_IGESReaderTool self, Handle_IGESData_IGESReaderData reader, Handle_IGESData_Protocol protocol) -> IGESData_IGESReaderTool

        creates IGESReaderTool to work with an IGESReaderData and an
        IGES Protocol.
        Actually, no Lib is used

        :type reader: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type protocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        this = _IGESData.new_IGESData_IGESReaderTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Prepare(self, *args):
        """
        Prepare(IGESData_IGESReaderTool self, Handle_IGESData_FileRecognizer reco)

        binds empty entities to records, works with the Protocol
        (from IGESData) stored and later used
        RQ : Actually, sets DNum into IGES Entities
        Also loads the list of parameters for ParamReader

        :type reco: OCC.wrapper.IGESData.Handle_IGESData_FileRecognizer

        """
        return _IGESData.IGESData_IGESReaderTool_Prepare(self, *args)


    def Recognize(self, *args):
        """
        Recognize(IGESData_IGESReaderTool self, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        recognizes records by asking Protocol (on data of DirType)

        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESReaderTool_Recognize(self, *args)


    def BeginRead(self, *args):
        """
        BeginRead(IGESData_IGESReaderTool self, Handle_Interface_InterfaceModel amodel)

        fills model's header, that is, its GlobalSection

        :type amodel: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.IGESData_IGESReaderTool_BeginRead(self, *args)


    def AnalyseRecord(self, *args):
        """
        AnalyseRecord(IGESData_IGESReaderTool self, Standard_Integer const num, Handle_Standard_Transient anent, Handle_Interface_Check acheck) -> Standard_Boolean

        fills an entity, given record no; works by calling ReadDirPart
        then ReadParams (with help of a ParamReader), then if required
        ReadProps and ReadAssocs, from IGESEntity
        Returns True if no fail has been recorded

        :type num: int
        :type anent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type acheck: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESReaderTool_AnalyseRecord(self, *args)


    def EndRead(self, *args):
        """
        EndRead(IGESData_IGESReaderTool self, Handle_Interface_InterfaceModel amodel)

        after reading entities, true line weights can be computed

        :type amodel: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.IGESData_IGESReaderTool_EndRead(self, *args)


    def ReadDir(self, *args):
        """
        ReadDir(IGESData_IGESReaderTool self, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_DirPart DP, Handle_Interface_Check ach)

        Reads directory part componants from file; DP is the litteral
        directory part, IR detains entities referenced by DP

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type DP: OCC.wrapper.IGESData.IGESData_DirPart
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.IGESData_IGESReaderTool_ReadDir(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESData_IGESReaderTool self, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Performs Reading of own Parameters for each IGESEntity
        Works with the ReaderLib loaded with ReadWriteModules for IGES
        In case of failure, tries UndefinedEntity from IGES

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESData.IGESData_IGESReaderTool_ReadOwnParams(self, *args)


    def ReadProps(self, *args):
        """
        ReadProps(IGESData_IGESReaderTool self, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads Property List, if there is (if not, does nothing)
        criterium is : current parameter of PR remains inside params
        list, and Stage is "Own"
        Current parameter must be a positive integer, which value
        gives the length of the list; else, a Fail is produced (into
        Check of PR) and reading process is stopped

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESData.IGESData_IGESReaderTool_ReadProps(self, *args)


    def ReadAssocs(self, *args):
        """
        ReadAssocs(IGESData_IGESReaderTool self, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads Associativity List, if there is (if not, does nothing)
        criterium is : current parameter of PR remains inside params
        list, and Stage is "Own"
        Same conditions as above; in addition, no parameter must be
        let after the list once read
        Note that "Associated" entities are not declared "Shared"

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESData.IGESData_IGESReaderTool_ReadAssocs(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_IGESReaderTool
IGESData_IGESReaderTool_swigregister = _IGESData.IGESData_IGESReaderTool_swigregister
IGESData_IGESReaderTool_swigregister(IGESData_IGESReaderTool)

class Handle_IGESData_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_GeneralModule self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_GeneralModule self, IGESData_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_GeneralModule self, Handle_IGESData_GeneralModule theHandle) -> Handle_IGESData_GeneralModule
        assign(Handle_IGESData_GeneralModule self, IGESData_GeneralModule thePtr) -> Handle_IGESData_GeneralModule
        assign(Handle_IGESData_GeneralModule self, Handle_IGESData_GeneralModule theHandle) -> Handle_IGESData_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_GeneralModule self) -> IGESData_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_GeneralModule self) -> IGESData_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_GeneralModule self) -> IGESData_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_GeneralModule_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_GeneralModule

    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_GeneralModule_FillSharedCase(self, *args)


    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_GeneralModule_OwnSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.Handle_IGESData_GeneralModule_CheckCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESData.Handle_IGESData_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.Handle_IGESData_GeneralModule_OwnCheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GeneralModule_CanCopy(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GeneralModule_NewVoid(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.Handle_IGESData_GeneralModule_CopyCase(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.Handle_IGESData_GeneralModule_OwnCopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.Handle_IGESData_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.Handle_IGESData_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESData.Handle_IGESData_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_GeneralModule_Name(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillShared(self, *args):
        """
        FillShared(Handle_IGESData_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESData_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.Handle_IGESData_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESData_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GeneralModule_NewCopiedCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESData_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Category Numbers are managed by the class Category
        <shares> can be used to evaluate this number in the context
        Default returns 0 which means "unspecified"

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_GeneralModule_CategoryNumber(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESData_GeneralModule_swigregister = _IGESData.Handle_IGESData_GeneralModule_swigregister
Handle_IGESData_GeneralModule_swigregister(Handle_IGESData_GeneralModule)

def Handle_IGESData_GeneralModule_DownCast(thing):
    return _IGESData.Handle_IGESData_GeneralModule_DownCast(thing)
Handle_IGESData_GeneralModule_DownCast = _IGESData.Handle_IGESData_GeneralModule_DownCast

class IGESData_IGESType(object):
    """
    taken from directory part of an entity (from file or model),
    gives "type" and "form" data, used to recognize entity's type
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_IGESType self) -> IGESData_IGESType
        __init__(IGESData_IGESType self, Standard_Integer const atype, Standard_Integer const aform) -> IGESData_IGESType

        :type atype: int
        :type aform: int

        """
        this = _IGESData.new_IGESData_IGESType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Type(self, *args):
        """
        Type(IGESData_IGESType self) -> Standard_Integer

        returns "type" data

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESType_Type(self, *args)


    def Form(self, *args):
        """
        Form(IGESData_IGESType self) -> Standard_Integer

        returns "form" data

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESType_Form(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(IGESData_IGESType self, IGESData_IGESType another) -> Standard_Boolean

        compares two IGESTypes, avoiding comparing their fields

        :type another: OCC.wrapper.IGESData.IGESData_IGESType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESType_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(IGESData_IGESType self, IGESData_IGESType another) -> Standard_Boolean

        :type another: OCC.wrapper.IGESData.IGESData_IGESType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESType___eq__(self, *args)


    def Nullify(self, *args):
        """
        Nullify(IGESData_IGESType self)

        resets fields (usefull when an IGESType is stored as mask)


        """
        return _IGESData.IGESData_IGESType_Nullify(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_IGESType
IGESData_IGESType_swigregister = _IGESData.IGESData_IGESType_swigregister
IGESData_IGESType_swigregister(IGESData_IGESType)

class IGESData_WriterLib(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetGlobal(*args):
        """
        SetGlobal(Handle_IGESData_ReadWriteModule amodule, Handle_IGESData_Protocol aprotocol)

        Adds a couple (Module-Protocol) into the global definition set
        for this class of Library.

        :type amodule: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule
        :type aprotocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.IGESData_WriterLib_SetGlobal(*args)

    SetGlobal = staticmethod(SetGlobal)

    def __init__(self, *args):
        """
        __init__(IGESData_WriterLib self, Handle_IGESData_Protocol aprotocol) -> IGESData_WriterLib
        __init__(IGESData_WriterLib self) -> IGESData_WriterLib

        Creates an empty Library : it will later by filled by method
        AddProtocol


        """
        this = _IGESData.new_IGESData_WriterLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddProtocol(self, *args):
        """
        AddProtocol(IGESData_WriterLib self, Handle_Standard_Transient aprotocol)

        Adds a couple (Module-Protocol) to the Library, given the
        class of a Protocol. Takes Resources into account.
        (if <aprotocol> is not of type TheProtocol, it is not added)

        :type aprotocol: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.IGESData_WriterLib_AddProtocol(self, *args)


    def Clear(self, *args):
        """
        Clear(IGESData_WriterLib self)

        Clears the list of Modules of a library (can be used to
        redefine the order of Modules before action : Clear then
        refill the Library by calls to AddProtocol)


        """
        return _IGESData.IGESData_WriterLib_Clear(self, *args)


    def SetComplete(self, *args):
        """
        SetComplete(IGESData_WriterLib self)

        Sets a library to be defined with the complete Global list
        (all the couples Protocol/Modules recorded in it)


        """
        return _IGESData.IGESData_WriterLib_SetComplete(self, *args)


    def Select(self, *args):
        """
        Select(IGESData_WriterLib self, Handle_IGESData_IGESEntity obj, Handle_IGESData_ReadWriteModule module) -> Standard_Boolean

        Selects a Module from the Library, given an Object.
        Returns True if Select has succeeded, False else.
        Also Returns (as arguments) the selected Module and the Case
        Number determined by the associated Protocol.
        If Select has failed, <module> is Null Handle and CN is zero.
        (Select can work on any criterium, such as Object DynamicType)

        :type obj: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type module: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule
        :type CN: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_WriterLib_Select(self, *args)


    def Start(self, *args):
        """
        Start(IGESData_WriterLib self)

        Starts Iteration on the Modules (sets it on the first one)


        """
        return _IGESData.IGESData_WriterLib_Start(self, *args)


    def More(self, *args):
        """
        More(IGESData_WriterLib self) -> Standard_Boolean

        Returns True if there are more Modules to iterate on

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_WriterLib_More(self, *args)


    def Next(self, *args):
        """
        Next(IGESData_WriterLib self)

        Iterates by getting the next Module in the list
        If there is none, the exception will be raised by Value


        """
        return _IGESData.IGESData_WriterLib_Next(self, *args)


    def Module(self, *args):
        """
        Returns the current Module in the Iteration

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule

        """
        res = _IGESData.IGESData_WriterLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the current Protocol in the Iteration

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.IGESData_WriterLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_WriterLib
IGESData_WriterLib_swigregister = _IGESData.IGESData_WriterLib_swigregister
IGESData_WriterLib_swigregister(IGESData_WriterLib)

def IGESData_WriterLib_SetGlobal(*args):
    """
    IGESData_WriterLib_SetGlobal(Handle_IGESData_ReadWriteModule amodule, Handle_IGESData_Protocol aprotocol)

    Adds a couple (Module-Protocol) into the global definition set
    for this class of Library.

    :type amodule: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule
    :type aprotocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

    """
    return _IGESData.IGESData_WriterLib_SetGlobal(*args)

class NCollection_Array1_IGESData_DirPart(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_IGESData_DirPart self) -> NCollection_Array1< IGESData_DirPart >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_IGESData_DirPart self) -> NCollection_Array1< IGESData_DirPart >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_IGESData_DirPart self) -> NCollection_Array1< IGESData_DirPart >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_IGESData_DirPart self) -> NCollection_Array1< IGESData_DirPart >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESData.new_NCollection_Array1_IGESData_DirPart(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_IGESData_DirPart self, IGESData_DirPart theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_IGESData_DirPart self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_IGESData_DirPart self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_IGESData_DirPart self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_IGESData_DirPart self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_IGESData_DirPart self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_IGESData_DirPart self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_IGESData_DirPart self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_IGESData_DirPart self, NCollection_Array1_IGESData_DirPart theOther) -> NCollection_Array1_IGESData_DirPart

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_IGESData_DirPart self, NCollection_Array1_IGESData_DirPart theOther) -> NCollection_Array1_IGESData_DirPart

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_IGESData_DirPart self, NCollection_Array1_IGESData_DirPart theOther) -> NCollection_Array1_IGESData_DirPart
        assign(NCollection_Array1_IGESData_DirPart self, NCollection_Array1_IGESData_DirPart theOther) -> NCollection_Array1_IGESData_DirPart

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_IGESData_DirPart_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_IGESData_DirPart self) -> IGESData_DirPart

        @return first element

        :rtype: TheItemType &

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_IGESData_DirPart_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_IGESData_DirPart self) -> IGESData_DirPart

        @return last element

        :rtype: TheItemType &

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_IGESData_DirPart_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_IGESData_DirPart self, Standard_Integer const theIndex) -> IGESData_DirPart

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_IGESData_DirPart___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_IGESData_DirPart_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_IGESData_DirPart self, Standard_Integer const theIndex, IGESData_DirPart theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_IGESData_DirPart self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESData.NCollection_Array1_IGESData_DirPart_Resize(self, *args)

    __swig_destroy__ = _IGESData.delete_NCollection_Array1_IGESData_DirPart
NCollection_Array1_IGESData_DirPart_swigregister = _IGESData.NCollection_Array1_IGESData_DirPart_swigregister
NCollection_Array1_IGESData_DirPart_swigregister(NCollection_Array1_IGESData_DirPart)


try:
	IGESData_Array1OfDirPart = NCollection_Array1_IGESData_DirPart
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESData_GlobalNodeOfSpecificLib(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_GlobalNodeOfSpecificLib self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_GlobalNodeOfSpecificLib self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_GlobalNodeOfSpecificLib self, IGESData_GlobalNodeOfSpecificLib thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_GlobalNodeOfSpecificLib self, Handle_IGESData_GlobalNodeOfSpecificLib theHandle) -> Handle_IGESData_GlobalNodeOfSpecificLib
        assign(Handle_IGESData_GlobalNodeOfSpecificLib self, IGESData_GlobalNodeOfSpecificLib thePtr) -> Handle_IGESData_GlobalNodeOfSpecificLib
        assign(Handle_IGESData_GlobalNodeOfSpecificLib self, Handle_IGESData_GlobalNodeOfSpecificLib theHandle) -> Handle_IGESData_GlobalNodeOfSpecificLib

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_GlobalNodeOfSpecificLib self) -> IGESData_GlobalNodeOfSpecificLib

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_GlobalNodeOfSpecificLib self) -> IGESData_GlobalNodeOfSpecificLib

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_GlobalNodeOfSpecificLib self) -> IGESData_GlobalNodeOfSpecificLib

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_GlobalNodeOfSpecificLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_GlobalNodeOfSpecificLib

    def Add(self, *args):
        """
        Add(Handle_IGESData_GlobalNodeOfSpecificLib self, Handle_IGESData_SpecificModule amodule, Handle_IGESData_Protocol aprotocol)

        Adds a Module bound with a Protocol to the list : does
        nothing if already in the list, THAT IS, Same Type (exact
        match) and Same State (that is, IsEqual is not required)
        Once added, stores its attached Protocol in correspondance

        :type amodule: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule
        :type aprotocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_Add(self, *args)


    def Module(self, *args):
        """
        Returns the Module stored in a given GlobalNode

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the attached Protocol stored in a given GlobalNode

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Next(self, *args):
        """
        Returns the Next GlobalNode. If none is defined, returned
        value is a Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_GlobalNodeOfSpecificLib

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_Next(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_GlobalNodeOfSpecificLib self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_GlobalNodeOfSpecificLib self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_GlobalNodeOfSpecificLib self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_GlobalNodeOfSpecificLib self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_GlobalNodeOfSpecificLib self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_GlobalNodeOfSpecificLib self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_GlobalNodeOfSpecificLib self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_GlobalNodeOfSpecificLib self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_GlobalNodeOfSpecificLib self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_GlobalNodeOfSpecificLib self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_DecrementRefCounter(self, *args)

Handle_IGESData_GlobalNodeOfSpecificLib_swigregister = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_swigregister
Handle_IGESData_GlobalNodeOfSpecificLib_swigregister(Handle_IGESData_GlobalNodeOfSpecificLib)

def Handle_IGESData_GlobalNodeOfSpecificLib_DownCast(thing):
    return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_DownCast(thing)
Handle_IGESData_GlobalNodeOfSpecificLib_DownCast = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_DownCast

class Handle_IGESData_DefaultGeneral(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_DefaultGeneral self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_DefaultGeneral_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_DefaultGeneral self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_DefaultGeneral self, IGESData_DefaultGeneral thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_DefaultGeneral self, Handle_IGESData_DefaultGeneral theHandle) -> Handle_IGESData_DefaultGeneral
        assign(Handle_IGESData_DefaultGeneral self, IGESData_DefaultGeneral thePtr) -> Handle_IGESData_DefaultGeneral
        assign(Handle_IGESData_DefaultGeneral self, Handle_IGESData_DefaultGeneral theHandle) -> Handle_IGESData_DefaultGeneral

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_DefaultGeneral self) -> IGESData_DefaultGeneral

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_DefaultGeneral self) -> IGESData_DefaultGeneral

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_DefaultGeneral___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_DefaultGeneral self) -> IGESData_DefaultGeneral

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_DefaultGeneral___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_DefaultGeneral___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_DefaultGeneral___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_DefaultGeneral(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_DefaultGeneral_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_DefaultGeneral

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by an IGESEntity, which must be
        an UndefinedEntity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        Here, Returns an empty DirChecker (no constraint to check)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity
        Here, does nothing (no constraint to check)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity (UndefinedEntity only)

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_OwnCopyCase(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_DefaultGeneral self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_DefaultGeneral_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_DefaultGeneral_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESData_DefaultGeneral self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESData_DefaultGeneral self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESData_DefaultGeneral self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_NewCopiedCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESData_DefaultGeneral self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Category Numbers are managed by the class Category
        <shares> can be used to evaluate this number in the context
        Default returns 0 which means "unspecified"

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_CategoryNumber(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_DefaultGeneral self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_DefaultGeneral_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_DefaultGeneral self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_DefaultGeneral self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_DefaultGeneral self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_DefaultGeneral self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_DefaultGeneral self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_DefaultGeneral self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_DefaultGeneral self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_DefaultGeneral_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_DefaultGeneral self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_DefaultGeneral_DecrementRefCounter(self, *args)

Handle_IGESData_DefaultGeneral_swigregister = _IGESData.Handle_IGESData_DefaultGeneral_swigregister
Handle_IGESData_DefaultGeneral_swigregister(Handle_IGESData_DefaultGeneral)

def Handle_IGESData_DefaultGeneral_DownCast(thing):
    return _IGESData.Handle_IGESData_DefaultGeneral_DownCast(thing)
Handle_IGESData_DefaultGeneral_DownCast = _IGESData.Handle_IGESData_DefaultGeneral_DownCast

class Handle_IGESData_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_SpecificModule self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_SpecificModule self, IGESData_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_SpecificModule self, Handle_IGESData_SpecificModule theHandle) -> Handle_IGESData_SpecificModule
        assign(Handle_IGESData_SpecificModule self, IGESData_SpecificModule thePtr) -> Handle_IGESData_SpecificModule
        assign(Handle_IGESData_SpecificModule self, Handle_IGESData_SpecificModule theHandle) -> Handle_IGESData_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_SpecificModule self) -> IGESData_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_SpecificModule self) -> IGESData_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_SpecificModule self) -> IGESData_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_SpecificModule_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESData_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump for each type of IGES Entity : it concerns only
        own parameters, the general data (Directory Part, Lists) are
        taken into account by the IGESDumper
        See class IGESDumper for the rules to follow for <own> and
        <attached> level

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESData.Handle_IGESData_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESData_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Specific Automatic Correction on own Parameters of an Entity.
        It works by setting in accordance redundant data, if there are
        when there is no ambiguity (else, it does nothing).
        Remark that classic Corrections on Directory Entry (to set
        void data) are taken into account alsewhere.

        For instance, many "Associativity Entities" have a Number of
        Properties which must have a fixed value.
        Or, a ConicalArc has its Form Number which records the kind of
        Conic, also determined from its coefficients
        But, a CircularArc of which Distances (Center-Start) and
        (Center-End) are not equal cannot be corrected ...

        Returns True if something has been corrected in <ent>
        By default, does nothing. If at least one of the Types
        processed by a sub-class of SpecificModule has a Correct
        procedure attached, this method can be redefined

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESData_SpecificModule_swigregister = _IGESData.Handle_IGESData_SpecificModule_swigregister
Handle_IGESData_SpecificModule_swigregister(Handle_IGESData_SpecificModule)

def Handle_IGESData_SpecificModule_DownCast(thing):
    return _IGESData.Handle_IGESData_SpecificModule_DownCast(thing)
Handle_IGESData_SpecificModule_DownCast = _IGESData.Handle_IGESData_SpecificModule_DownCast

class IGESData_IGESModel(Interface.Interface_InterfaceModel):
    """
    Defines the file header and
    entities for IGES files. These headers and entities result from
    a complete data translation using the IGES data exchange processor.
    Each entity is contained in a single model only and has a
    unique identifier. You can access this identifier using the method Number.
    Gives an access to the general data in the Start and the Global
    sections of an IGES file.
    The IGES file includes the following sections:
    -Start,
    -Global,
    -Directory Entry,
    -Parameter Data,
    -Terminate
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_IGESModel
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_IGESModel(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_IGESModel self) -> IGESData_IGESModel

        Defines the file header and
        entities for IGES files. These headers and entities result from
        a complete data translation using the IGES data exchange processor.
        Each entity is contained in a single model only and has a
        unique identifier. You can access this identifier using the method Number.
        Gives an access to the general data in the Start and the Global
        sections of an IGES file.
        The IGES file includes the following sections:
        -Start,
        -Global,
        -Directory Entry,
        -Parameter Data,
        -Terminate
        """
        this = _IGESData.new_IGESData_IGESModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ClearHeader(self, *args):
        """
        ClearHeader(IGESData_IGESModel self)

        Erases all data specific to IGES file Header (Start + Global)


        """
        return _IGESData.IGESData_IGESModel_ClearHeader(self, *args)


    def DumpHeader(self, *args):
        """
        DumpHeader(IGESData_IGESModel self, Handle_Message_Messenger S, Standard_Integer const level=0)

        Prints the IGES file header
        (Start and Global Sections) to the log file. The integer
        parameter is intended to be used as a level indicator but is not used at present.

        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type level: int

        """
        return _IGESData.IGESData_IGESModel_DumpHeader(self, *args)


    def StartSection(self, *args):
        """
        StartSection(IGESData_IGESModel self) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns Model's Start Section (list of comment lines)

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESData.IGESData_IGESModel_StartSection(self, *args)


    def NbStartLines(self, *args):
        """
        NbStartLines(IGESData_IGESModel self) -> Standard_Integer

        Returns the count of recorded Start Lines

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESModel_NbStartLines(self, *args)


    def StartLine(self, *args):
        """
        StartLine(IGESData_IGESModel self, Standard_Integer const num) -> Standard_CString

        Returns a line from the IGES file
        Start section by specifying its number. An empty string is
        returned if the number given is out of range, the range being
        from 1 to NbStartLines.

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_IGESModel_StartLine(self, *args)


    def ClearStartSection(self, *args):
        """
        ClearStartSection(IGESData_IGESModel self)

        Clears the IGES file Start Section


        """
        return _IGESData.IGESData_IGESModel_ClearStartSection(self, *args)


    def SetStartSection(self, *args):
        """
        SetStartSection(IGESData_IGESModel self, Handle_TColStd_HSequenceOfHAsciiString list, Standard_Boolean const copy)

        Sets a new Start section from a list of strings.
        If copy is false, the Start section will be shared. Any
        modifications made to the strings later on, will have an effect on
        the Start section. If copy is true (default value),
        an independent copy of the strings is created and used as
        the Start section. Any modifications made to the strings
        later on, will have no effect on the Start section.

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString
        :type copy: bool

        """
        return _IGESData.IGESData_IGESModel_SetStartSection(self, *args)


    def AddStartLine(self, *args):
        """
        AddStartLine(IGESData_IGESModel self, Standard_CString const line, Standard_Integer const atnum=0)

        Adds a new string to the existing
        Start section at the end if atnum is 0 or not given, or before
        atnumth line.

        :type line: OCC.wrapper.Standard.Standard_CString
        :type atnum: int

        """
        return _IGESData.IGESData_IGESModel_AddStartLine(self, *args)


    def GlobalSection(self, *args):
        """
        Returns the Global section of the IGES file.

        :rtype: OCC.wrapper.IGESData.IGESData_GlobalSection

        """
        res = _IGESData.IGESData_IGESModel_GlobalSection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGlobalSection(self, *args):
        """
        SetGlobalSection(IGESData_IGESModel self, IGESData_GlobalSection header)

        Sets the Global section of the IGES file.

        :type header: OCC.wrapper.IGESData.IGESData_GlobalSection

        """
        return _IGESData.IGESData_IGESModel_SetGlobalSection(self, *args)


    def ApplyStatic(self, *args):
        """
        ApplyStatic(IGESData_IGESModel self, Standard_CString const param) -> Standard_Boolean

        Sets some of the Global section
        parameters with the values defined by the translation
        parameters. param may be:
        - receiver (value read in XSTEP.iges.header.receiver),
        - author (value read in XSTEP.iges.header.author),
        - company (value read in XSTEP.iges.header.company).
        The default value for param is an empty string.
        Returns True when done and if param is given, False if param is
        unknown or empty. Note: Set the unit in the IGES
        file Global section via IGESData_BasicEditor class.

        :type param: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_IGESModel_ApplyStatic(self, *args)


    def Entity(self, *args):
        """
        Entity(IGESData_IGESModel self, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        Returns an IGES entity given by its rank number.

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_IGESModel_Entity(self, *args)


    def DNum(self, *args):
        """
        DNum(IGESData_IGESModel self, Handle_IGESData_IGESEntity ent) -> Standard_Integer

        Returns the equivalent DE Number for an Entity, i.e.
        2*Number(ent)-1 , or 0 if <ent> is unknown from <me>
        This DE Number is used for File Writing for instance

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_IGESModel_DNum(self, *args)


    def GetFromAnother(self, *args):
        """
        GetFromAnother(IGESData_IGESModel self, Handle_Interface_InterfaceModel other)

        gets Header (GlobalSection) from another Model

        :type other: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.IGESData_IGESModel_GetFromAnother(self, *args)


    def NewEmptyModel(self, *args):
        """
        NewEmptyModel(IGESData_IGESModel self) -> Handle_Interface_InterfaceModel

        Returns a New Empty Model, same type as <me> i.e. IGESModel

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.IGESData_IGESModel_NewEmptyModel(self, *args)


    def VerifyCheck(self, *args):
        """
        VerifyCheck(IGESData_IGESModel self, Handle_Interface_Check ach)

        Checks that the IGES file Global
        section contains valid data that conforms to the IGES specifications.

        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.IGESData_IGESModel_VerifyCheck(self, *args)


    def SetLineWeights(self, *args):
        """
        SetLineWeights(IGESData_IGESModel self, Standard_Real const defw)

        Sets LineWeights of contained Entities according header data
        (MaxLineWeight and LineWeightGrad) or to a default value for
        undefined weights

        :type defw: float

        """
        return _IGESData.IGESData_IGESModel_SetLineWeights(self, *args)


    def ClearLabels(self, *args):
        """
        ClearLabels(IGESData_IGESModel self)

        erases specific labels, i.e. does nothing


        """
        return _IGESData.IGESData_IGESModel_ClearLabels(self, *args)


    def PrintLabel(self, *args):
        """
        PrintLabel(IGESData_IGESModel self, Handle_Standard_Transient ent, Handle_Message_Messenger S)

        Prints label specific to IGES norm for a given entity, i.e.
        its directory entry number (2*Number-1)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESData.IGESData_IGESModel_PrintLabel(self, *args)


    def PrintToLog(self, *args):
        """
        PrintToLog(IGESData_IGESModel self, Handle_Standard_Transient ent, Handle_Message_Messenger S)

        Prints label specific to IGES norm  for a given -- --
        entity,  i.e.  its directory entry number (2*Number-1)
        in the log file format.

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESData.IGESData_IGESModel_PrintToLog(self, *args)


    def PrintInfo(self, *args):
        """
        PrintInfo(IGESData_IGESModel self, Handle_Standard_Transient ent, Handle_Message_Messenger S)

        Prints label specific to IGES norm for a given entity, i.e.
        its directory entry number (2*Number-1)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESData.IGESData_IGESModel_PrintInfo(self, *args)


    def StringLabel(self, *args):
        """
        StringLabel(IGESData_IGESModel self, Handle_Standard_Transient ent) -> Handle_TCollection_HAsciiString

        Returns a string with the label attached to a given entity,
        i.e. a string "Dnn" with nn = directory entry number (2*N-1)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_IGESModel_StringLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_IGESModel_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_IGESModel_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_IGESModel_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_IGESModel
IGESData_IGESModel_swigregister = _IGESData.IGESData_IGESModel_swigregister
IGESData_IGESModel_swigregister(IGESData_IGESModel)

def IGESData_IGESModel_get_type_name(*args):
    """
    IGESData_IGESModel_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_IGESModel_get_type_name(*args)

def IGESData_IGESModel_get_type_descriptor(*args):
    """
    IGESData_IGESModel_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_IGESModel_get_type_descriptor(*args)

class Handle_IGESData_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_Protocol self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_Protocol self, IGESData_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_Protocol self, Handle_IGESData_Protocol theHandle) -> Handle_IGESData_Protocol
        assign(Handle_IGESData_Protocol self, IGESData_Protocol thePtr) -> Handle_IGESData_Protocol
        assign(Handle_IGESData_Protocol self, Handle_IGESData_Protocol theHandle) -> Handle_IGESData_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_Protocol self) -> IGESData_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_Protocol self) -> IGESData_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_Protocol self) -> IGESData_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_Protocol_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESData_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, none

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESData_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank. Here, none

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.Handle_IGESData_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        Here, Undefined and Free Format Entities have the Number 1.

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_Protocol_TypeNumber(self, *args)


    def NewModel(self, *args):
        """
        NewModel(Handle_IGESData_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.Handle_IGESData_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESData_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESData_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.Handle_IGESData_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESData_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_Protocol_IsUnknownEntity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Active(self, *args):
        """
        Active(Handle_IGESData_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.Handle_IGESData_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESData_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.Handle_IGESData_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESData_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESData.Handle_IGESData_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESData_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESData_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESData_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESData_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.Handle_IGESData_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESData_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_Protocol_DecrementRefCounter(self, *args)

Handle_IGESData_Protocol_swigregister = _IGESData.Handle_IGESData_Protocol_swigregister
Handle_IGESData_Protocol_swigregister(Handle_IGESData_Protocol)

def Handle_IGESData_Protocol_DownCast(thing):
    return _IGESData.Handle_IGESData_Protocol_DownCast(thing)
Handle_IGESData_Protocol_DownCast = _IGESData.Handle_IGESData_Protocol_DownCast

class IGESData_DirChecker(object):
    """
    This class centralizes general Checks upon an IGES Entity's
    Directory Part. That is : such field Ignored or Required,
    or Required with a given Value (for an Integer field)
    More precise checks can be performed as necessary, by each
    Entity (method OwnCheck).

    Each class of Entity defines its DirChecker (method DirChecker)
    and the DirChecker is able to perform its Checks on an Entity

    A Required Value or presence of a field causes a Fail Message
    if criterium is not satisfied
    An Ignored field causes a Correction Message if the field is
    not null/zero
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_DirChecker self) -> IGESData_DirChecker
        __init__(IGESData_DirChecker self, Standard_Integer const atype) -> IGESData_DirChecker
        __init__(IGESData_DirChecker self, Standard_Integer const atype, Standard_Integer const aform) -> IGESData_DirChecker
        __init__(IGESData_DirChecker self, Standard_Integer const atype, Standard_Integer const aform1, Standard_Integer const aform2) -> IGESData_DirChecker

        Returns a DirChecker, with no criterium except Required values
        for Type number (atype), and Required Range for Form number
        (which must be between aform1 and aform2 included)

        :type atype: int
        :type aform1: int
        :type aform2: int

        """
        this = _IGESData.new_IGESData_DirChecker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsSet(self, *args):
        """
        IsSet(IGESData_DirChecker self) -> Standard_Boolean

        Returns True if at least one criterium has already been set
        Allows user to store a DirChecker (static variable) then ask
        if it has been set before setting it

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_DirChecker_IsSet(self, *args)


    def SetDefault(self, *args):
        """
        SetDefault(IGESData_DirChecker self)

        Sets a DirChecker with most current criteria, that is :
        Structure Ignored ( worths call Structure(crit = DefVoid) )


        """
        return _IGESData.IGESData_DirChecker_SetDefault(self, *args)


    def Structure(self, *args):
        """
        Structure(IGESData_DirChecker self, IGESData_DefType const crit)

        Sets Structure criterium.
        If crit is DefVoid, Ignored : should not be defined
        If crit is DefReference, Required : must be defined
        Other values are not taken in account

        :type crit: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_DirChecker_Structure(self, *args)


    def LineFont(self, *args):
        """
        LineFont(IGESData_DirChecker self, IGESData_DefType const crit)

        Sets LineFont criterium
        If crit is DefVoid, Ignored : should not be defined
        If crit is DefAny, Required : must be defined (value or ref)
        If crit is DefValue, Required as a Value (error if Reference)
        Other values are not taken in account

        :type crit: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_DirChecker_LineFont(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(IGESData_DirChecker self, IGESData_DefType const crit)

        Sets LineWeight criterium
        If crit is DefVoid, Ignored : should not be defined
        If crit is DefValue, Required
        Other values are not taken in account

        :type crit: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_DirChecker_LineWeight(self, *args)


    def Color(self, *args):
        """
        Color(IGESData_DirChecker self, IGESData_DefType const crit)

        Sets Color criterium
        If crit is DefVoid, Ignored : should not be defined
        If crit is DefAny, Required : must be defined (value or ref)
        Other values are not taken in account

        :type crit: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_DirChecker_Color(self, *args)


    def GraphicsIgnored(self, *args):
        """
        GraphicsIgnored(IGESData_DirChecker self, Standard_Integer const hierarchy=-1)

        Sets Graphics data (LineFont, LineWeight, Color, Level, View)
        to be ignored according value of Hierarchy status :
        If hierarchy is not given, they are Ignored any way
        (that is, they should not be defined)
        If hierarchy is given, Graphics are Ignored if the Hierarchy
        status has the value given in argument "hierarchy"

        :type hierarchy: int

        """
        return _IGESData.IGESData_DirChecker_GraphicsIgnored(self, *args)


    def BlankStatusIgnored(self, *args):
        """
        BlankStatusIgnored(IGESData_DirChecker self)

        Sets Blank Status to be ignored
        (should not be defined, or its value should be 0)


        """
        return _IGESData.IGESData_DirChecker_BlankStatusIgnored(self, *args)


    def BlankStatusRequired(self, *args):
        """
        BlankStatusRequired(IGESData_DirChecker self, Standard_Integer const val)

        Sets Blank Status to be required at a given value

        :type val: int

        """
        return _IGESData.IGESData_DirChecker_BlankStatusRequired(self, *args)


    def SubordinateStatusIgnored(self, *args):
        """
        SubordinateStatusIgnored(IGESData_DirChecker self)

        Sets Subordinate Status to be ignored
        (should not be defined, or its value should be 0)


        """
        return _IGESData.IGESData_DirChecker_SubordinateStatusIgnored(self, *args)


    def SubordinateStatusRequired(self, *args):
        """
        SubordinateStatusRequired(IGESData_DirChecker self, Standard_Integer const val)

        Sets Subordinate Status to be required at a given value

        :type val: int

        """
        return _IGESData.IGESData_DirChecker_SubordinateStatusRequired(self, *args)


    def UseFlagIgnored(self, *args):
        """
        UseFlagIgnored(IGESData_DirChecker self)

        Sets Blank Status to be ignored
        (should not be defined, or its value should be 0)


        """
        return _IGESData.IGESData_DirChecker_UseFlagIgnored(self, *args)


    def UseFlagRequired(self, *args):
        """
        UseFlagRequired(IGESData_DirChecker self, Standard_Integer const val)

        Sets Blank Status to be required at a given value
        Give -1 to demand UseFlag not zero (but no precise value req.)

        :type val: int

        """
        return _IGESData.IGESData_DirChecker_UseFlagRequired(self, *args)


    def HierarchyStatusIgnored(self, *args):
        """
        HierarchyStatusIgnored(IGESData_DirChecker self)

        Sets Hierarchy Status to be ignored
        (should not be defined, or its value should be 0)


        """
        return _IGESData.IGESData_DirChecker_HierarchyStatusIgnored(self, *args)


    def HierarchyStatusRequired(self, *args):
        """
        HierarchyStatusRequired(IGESData_DirChecker self, Standard_Integer const val)

        Sets Hierarchy Status to be required at a given value

        :type val: int

        """
        return _IGESData.IGESData_DirChecker_HierarchyStatusRequired(self, *args)


    def Check(self, *args):
        """
        Check(IGESData_DirChecker self, Handle_Interface_Check ach, Handle_IGESData_IGESEntity ent)

        Performs the Checks on an IGESEntity, according to the
        recorded criteria
        In addition, does minimal Checks, such as admitted range for
        Status, or presence of Error status in some data (Color, ...)

        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_DirChecker_Check(self, *args)


    def CheckTypeAndForm(self, *args):
        """
        CheckTypeAndForm(IGESData_DirChecker self, Handle_Interface_Check ach, Handle_IGESData_IGESEntity ent)

        Performs a Check only on Values of Type Number and Form Number
        This allows to do a check on an Entity not yet completely
        filled but of which Type and Form Number have been already set

        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_DirChecker_CheckTypeAndForm(self, *args)


    def Correct(self, *args):
        """
        Correct(IGESData_DirChecker self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Corrects the Directory Entry of an IGES Entity as far as it is
        possible according recorded criteria without any ambiguity :
        - if a numeric Status is required a given value, this value is
        enforced
        - if an item is required to be Void, or if it recorded as
        Erroneous, it is cleared (set to Void)
        - Type Number is enforced
        - finally Form Number is enforced only if one and only Value
        is admitted (no range, see Constructors of DirChecker)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_DirChecker_Correct(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_DirChecker
IGESData_DirChecker_swigregister = _IGESData.IGESData_DirChecker_swigregister
IGESData_DirChecker_swigregister(IGESData_DirChecker)

class IGESData_NodeOfSpecificLib(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_NodeOfSpecificLib
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_NodeOfSpecificLib(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESData_NodeOfSpecificLib self) -> IGESData_NodeOfSpecificLib

        Creates an empty Node, with no Next


        """
        this = _IGESData.new_IGESData_NodeOfSpecificLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AddNode(self, *args):
        """
        AddNode(IGESData_NodeOfSpecificLib self, Handle_IGESData_GlobalNodeOfSpecificLib anode)

        Adds a couple (Module,Protocol), that is, stores it into
        itself if not yet done, else creates a Next Node to do it

        :type anode: OCC.wrapper.IGESData.Handle_IGESData_GlobalNodeOfSpecificLib

        """
        return _IGESData.IGESData_NodeOfSpecificLib_AddNode(self, *args)


    def Module(self, *args):
        """
        Returns the Module designated by a precise Node

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule

        """
        res = _IGESData.IGESData_NodeOfSpecificLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the Protocol designated by a precise Node

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.IGESData_NodeOfSpecificLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Next(self, *args):
        """
        Returns the Next Node. If none was defined, returned value
        is a Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_NodeOfSpecificLib

        """
        res = _IGESData.IGESData_NodeOfSpecificLib_Next(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_NodeOfSpecificLib_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_NodeOfSpecificLib_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_NodeOfSpecificLib_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_NodeOfSpecificLib
IGESData_NodeOfSpecificLib_swigregister = _IGESData.IGESData_NodeOfSpecificLib_swigregister
IGESData_NodeOfSpecificLib_swigregister(IGESData_NodeOfSpecificLib)

def IGESData_NodeOfSpecificLib_get_type_name(*args):
    """
    IGESData_NodeOfSpecificLib_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_NodeOfSpecificLib_get_type_name(*args)

def IGESData_NodeOfSpecificLib_get_type_descriptor(*args):
    """
    IGESData_NodeOfSpecificLib_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_NodeOfSpecificLib_get_type_descriptor(*args)

class IGESData_DefSwitch(object):
    """
    description of a directory componant which can be either
    undefined (let Void), defined as a Reference to an entity,
    or as a Rank, integer value adressing a builtin table
    The entity reference is not included here, only reference
    status is kept (because entity type must be adapted)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_DefSwitch self) -> IGESData_DefSwitch

        creates a DefSwitch as Void


        """
        this = _IGESData.new_IGESData_DefSwitch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetVoid(self, *args):
        """
        SetVoid(IGESData_DefSwitch self)

        sets DefSwitch to "Void" status (in file : Integer = 0)


        """
        return _IGESData.IGESData_DefSwitch_SetVoid(self, *args)


    def SetReference(self, *args):
        """
        SetReference(IGESData_DefSwitch self)

        sets DefSwitch to "Reference" Status (in file : Integer < 0)


        """
        return _IGESData.IGESData_DefSwitch_SetReference(self, *args)


    def SetRank(self, *args):
        """
        SetRank(IGESData_DefSwitch self, Standard_Integer const val)

        sets DefSwitch to "Rank" with a Value (in file : Integer > 0)

        :type val: int

        """
        return _IGESData.IGESData_DefSwitch_SetRank(self, *args)


    def DefType(self, *args):
        """
        DefType(IGESData_DefSwitch self) -> IGESData_DefType

        returns DefType status (Void,Reference,Rank)

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.IGESData_DefSwitch_DefType(self, *args)


    def Value(self, *args):
        """
        Value(IGESData_DefSwitch self) -> Standard_Integer

        returns Value as Integer (sensefull for a Rank)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_DefSwitch_Value(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_DefSwitch
IGESData_DefSwitch_swigregister = _IGESData.IGESData_DefSwitch_swigregister
IGESData_DefSwitch_swigregister(IGESData_DefSwitch)

class Handle_IGESData_SingleParentEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_SingleParentEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_SingleParentEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_SingleParentEntity self, IGESData_SingleParentEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_SingleParentEntity self, Handle_IGESData_SingleParentEntity theHandle) -> Handle_IGESData_SingleParentEntity
        assign(Handle_IGESData_SingleParentEntity self, IGESData_SingleParentEntity thePtr) -> Handle_IGESData_SingleParentEntity
        assign(Handle_IGESData_SingleParentEntity self, Handle_IGESData_SingleParentEntity theHandle) -> Handle_IGESData_SingleParentEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_SingleParentEntity self) -> IGESData_SingleParentEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_SingleParentEntity self) -> IGESData_SingleParentEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_SingleParentEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_SingleParentEntity self) -> IGESData_SingleParentEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_SingleParentEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_SingleParentEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_SingleParentEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_SingleParentEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_SingleParentEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_SingleParentEntity

    def SingleParent(self, *args):
        """
        SingleParent(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_IGESEntity

        Returns the parent designated by the Entity, if only one !

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_SingleParent(self, *args)


    def NbChildren(self, *args):
        """
        NbChildren(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Returns the count of Entities designated as children

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_NbChildren(self, *args)


    def Child(self, *args):
        """
        Child(Handle_IGESData_SingleParentEntity self, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        Returns a Child given its rank

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Child(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_SingleParentEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_SingleParentEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_SingleParentEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_SingleParentEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_SingleParentEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_SingleParentEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_SingleParentEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_SingleParentEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_SingleParentEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_SingleParentEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_SingleParentEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_SingleParentEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_SingleParentEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_SingleParentEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_SingleParentEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_SingleParentEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_SingleParentEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_SingleParentEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_SingleParentEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_SingleParentEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_SingleParentEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_SingleParentEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_SingleParentEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_SingleParentEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_SingleParentEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_SingleParentEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_SingleParentEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_SingleParentEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_SingleParentEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_SingleParentEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_SingleParentEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_SingleParentEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_SingleParentEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_SingleParentEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_SingleParentEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_SingleParentEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_SingleParentEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_SingleParentEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_SingleParentEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_SingleParentEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_SingleParentEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_SingleParentEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_SingleParentEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_SingleParentEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_SingleParentEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_SingleParentEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_SingleParentEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_SingleParentEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_SingleParentEntity_DecrementRefCounter(self, *args)

Handle_IGESData_SingleParentEntity_swigregister = _IGESData.Handle_IGESData_SingleParentEntity_swigregister
Handle_IGESData_SingleParentEntity_swigregister(Handle_IGESData_SingleParentEntity)

def Handle_IGESData_SingleParentEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_SingleParentEntity_DownCast(thing)
Handle_IGESData_SingleParentEntity_DownCast = _IGESData.Handle_IGESData_SingleParentEntity_DownCast

class Handle_IGESData_IGESModel(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_IGESModel self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_IGESModel_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_IGESModel self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_IGESModel_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_IGESModel self, IGESData_IGESModel thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_IGESModel_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_IGESModel self, Handle_IGESData_IGESModel theHandle) -> Handle_IGESData_IGESModel
        assign(Handle_IGESData_IGESModel self, IGESData_IGESModel thePtr) -> Handle_IGESData_IGESModel
        assign(Handle_IGESData_IGESModel self, Handle_IGESData_IGESModel theHandle) -> Handle_IGESData_IGESModel

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_IGESModel_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_IGESModel self) -> IGESData_IGESModel

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_IGESModel_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_IGESModel self) -> IGESData_IGESModel

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_IGESModel___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_IGESModel self) -> IGESData_IGESModel

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_IGESModel___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_IGESModel___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_IGESModel___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_IGESModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_IGESModel_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_IGESModel

    def ClearHeader(self, *args):
        """
        ClearHeader(Handle_IGESData_IGESModel self)

        Erases all data specific to IGES file Header (Start + Global)


        """
        return _IGESData.Handle_IGESData_IGESModel_ClearHeader(self, *args)


    def DumpHeader(self, *args):
        """
        DumpHeader(Handle_IGESData_IGESModel self, Handle_Message_Messenger S, Standard_Integer const level=0)

        Prints the IGES file header
        (Start and Global Sections) to the log file. The integer
        parameter is intended to be used as a level indicator but is not used at present.

        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type level: int

        """
        return _IGESData.Handle_IGESData_IGESModel_DumpHeader(self, *args)


    def StartSection(self, *args):
        """
        StartSection(Handle_IGESData_IGESModel self) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns Model's Start Section (list of comment lines)

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESData.Handle_IGESData_IGESModel_StartSection(self, *args)


    def NbStartLines(self, *args):
        """
        NbStartLines(Handle_IGESData_IGESModel self) -> Standard_Integer

        Returns the count of recorded Start Lines

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_NbStartLines(self, *args)


    def StartLine(self, *args):
        """
        StartLine(Handle_IGESData_IGESModel self, Standard_Integer const num) -> Standard_CString

        Returns a line from the IGES file
        Start section by specifying its number. An empty string is
        returned if the number given is out of range, the range being
        from 1 to NbStartLines.

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_IGESModel_StartLine(self, *args)


    def ClearStartSection(self, *args):
        """
        ClearStartSection(Handle_IGESData_IGESModel self)

        Clears the IGES file Start Section


        """
        return _IGESData.Handle_IGESData_IGESModel_ClearStartSection(self, *args)


    def SetStartSection(self, *args):
        """
        SetStartSection(Handle_IGESData_IGESModel self, Handle_TColStd_HSequenceOfHAsciiString list, Standard_Boolean const copy)

        Sets a new Start section from a list of strings.
        If copy is false, the Start section will be shared. Any
        modifications made to the strings later on, will have an effect on
        the Start section. If copy is true (default value),
        an independent copy of the strings is created and used as
        the Start section. Any modifications made to the strings
        later on, will have no effect on the Start section.

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString
        :type copy: bool

        """
        return _IGESData.Handle_IGESData_IGESModel_SetStartSection(self, *args)


    def AddStartLine(self, *args):
        """
        AddStartLine(Handle_IGESData_IGESModel self, Standard_CString const line, Standard_Integer const atnum=0)

        Adds a new string to the existing
        Start section at the end if atnum is 0 or not given, or before
        atnumth line.

        :type line: OCC.wrapper.Standard.Standard_CString
        :type atnum: int

        """
        return _IGESData.Handle_IGESData_IGESModel_AddStartLine(self, *args)


    def GlobalSection(self, *args):
        """
        Returns the Global section of the IGES file.

        :rtype: OCC.wrapper.IGESData.IGESData_GlobalSection

        """
        res = _IGESData.Handle_IGESData_IGESModel_GlobalSection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGlobalSection(self, *args):
        """
        SetGlobalSection(Handle_IGESData_IGESModel self, IGESData_GlobalSection header)

        Sets the Global section of the IGES file.

        :type header: OCC.wrapper.IGESData.IGESData_GlobalSection

        """
        return _IGESData.Handle_IGESData_IGESModel_SetGlobalSection(self, *args)


    def ApplyStatic(self, *args):
        """
        ApplyStatic(Handle_IGESData_IGESModel self, Standard_CString const param) -> Standard_Boolean

        Sets some of the Global section
        parameters with the values defined by the translation
        parameters. param may be:
        - receiver (value read in XSTEP.iges.header.receiver),
        - author (value read in XSTEP.iges.header.author),
        - company (value read in XSTEP.iges.header.company).
        The default value for param is an empty string.
        Returns True when done and if param is given, False if param is
        unknown or empty. Note: Set the unit in the IGES
        file Global section via IGESData_BasicEditor class.

        :type param: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_ApplyStatic(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESData_IGESModel self, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        Returns an IGES entity given by its rank number.

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESModel_Entity(self, *args)


    def DNum(self, *args):
        """
        DNum(Handle_IGESData_IGESModel self, Handle_IGESData_IGESEntity ent) -> Standard_Integer

        Returns the equivalent DE Number for an Entity, i.e.
        2*Number(ent)-1 , or 0 if <ent> is unknown from <me>
        This DE Number is used for File Writing for instance

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_DNum(self, *args)


    def GetFromAnother(self, *args):
        """
        GetFromAnother(Handle_IGESData_IGESModel self, Handle_Interface_InterfaceModel other)

        gets Header (GlobalSection) from another Model

        :type other: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.Handle_IGESData_IGESModel_GetFromAnother(self, *args)


    def NewEmptyModel(self, *args):
        """
        NewEmptyModel(Handle_IGESData_IGESModel self) -> Handle_Interface_InterfaceModel

        Returns a New Empty Model, same type as <me> i.e. IGESModel

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.Handle_IGESData_IGESModel_NewEmptyModel(self, *args)


    def VerifyCheck(self, *args):
        """
        VerifyCheck(Handle_IGESData_IGESModel self, Handle_Interface_Check ach)

        Checks that the IGES file Global
        section contains valid data that conforms to the IGES specifications.

        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.Handle_IGESData_IGESModel_VerifyCheck(self, *args)


    def SetLineWeights(self, *args):
        """
        SetLineWeights(Handle_IGESData_IGESModel self, Standard_Real const defw)

        Sets LineWeights of contained Entities according header data
        (MaxLineWeight and LineWeightGrad) or to a default value for
        undefined weights

        :type defw: float

        """
        return _IGESData.Handle_IGESData_IGESModel_SetLineWeights(self, *args)


    def ClearLabels(self, *args):
        """
        ClearLabels(Handle_IGESData_IGESModel self)

        erases specific labels, i.e. does nothing


        """
        return _IGESData.Handle_IGESData_IGESModel_ClearLabels(self, *args)


    def PrintLabel(self, *args):
        """
        PrintLabel(Handle_IGESData_IGESModel self, Handle_Standard_Transient ent, Handle_Message_Messenger S)

        Prints label specific to IGES norm for a given entity, i.e.
        its directory entry number (2*Number-1)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESData.Handle_IGESData_IGESModel_PrintLabel(self, *args)


    def PrintToLog(self, *args):
        """
        PrintToLog(Handle_IGESData_IGESModel self, Handle_Standard_Transient ent, Handle_Message_Messenger S)

        Prints label specific to IGES norm  for a given -- --
        entity,  i.e.  its directory entry number (2*Number-1)
        in the log file format.

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESData.Handle_IGESData_IGESModel_PrintToLog(self, *args)


    def PrintInfo(self, *args):
        """
        PrintInfo(Handle_IGESData_IGESModel self, Handle_Standard_Transient ent, Handle_Message_Messenger S)

        Prints label specific to IGES norm for a given entity, i.e.
        its directory entry number (2*Number-1)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESData.Handle_IGESData_IGESModel_PrintInfo(self, *args)


    def StringLabel(self, *args):
        """
        StringLabel(Handle_IGESData_IGESModel self, Handle_Standard_Transient ent) -> Handle_TCollection_HAsciiString

        Returns a string with the label attached to a given entity,
        i.e. a string "Dnn" with nn = directory entry number (2*N-1)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_IGESModel_StringLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_IGESModel self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_IGESModel_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_IGESModel_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_IGESModel_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Destroy(self, *args):
        """
        Destroy(Handle_IGESData_IGESModel self)

        Clears the list of entities (service WhenDelete)


        """
        return _IGESData.Handle_IGESData_IGESModel_Destroy(self, *args)


    def SetProtocol(self, *args):
        """
        SetProtocol(Handle_IGESData_IGESModel self, Handle_Interface_Protocol proto)

        Sets a Protocol for this Model
        It is also set by a call to AddWithRefs with Protocol
        It is used for : DumpHeader (as required), ClearEntities ...

        :type proto: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.Handle_IGESData_IGESModel_SetProtocol(self, *args)


    def Protocol(self, *args):
        """
        Protocol(Handle_IGESData_IGESModel self) -> Handle_Interface_Protocol

        Returns the Protocol which has been set by SetProtocol, or
        AddWithRefs with Protocol

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESData.Handle_IGESData_IGESModel_Protocol(self, *args)


    def SetGTool(self, *args):
        """
        SetGTool(Handle_IGESData_IGESModel self, Handle_Interface_GTool gtool)

        Sets a GTool for this model, which already defines a Protocol

        :type gtool: OCC.wrapper.Interface.Handle_Interface_GTool

        """
        return _IGESData.Handle_IGESData_IGESModel_SetGTool(self, *args)


    def GTool(self, *args):
        """
        GTool(Handle_IGESData_IGESModel self) -> Handle_Interface_GTool

        Returns the GTool, set by SetProtocol or by SetGTool

        :rtype: OCC.wrapper.Interface.Handle_Interface_GTool

        """
        return _IGESData.Handle_IGESData_IGESModel_GTool(self, *args)


    def DispatchStatus(self, *args):
        """
        DispatchStatus(Handle_IGESData_IGESModel self) -> Standard_Boolean &

        Returns the Dispatch Status, either for get or set
        A Model which is produced from Dispatch may share entities
        with the original (according to the Protocol), hence these
        non-copied entities should not be deleted

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_DispatchStatus(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_IGESData_IGESModel self)

        Erases contained data; used when a Model is copied to others :
        the new copied ones begin from clear
        Clear calls specific method ClearHeader (see below)


        """
        return _IGESData.Handle_IGESData_IGESModel_Clear(self, *args)


    def ClearEntities(self, *args):
        """
        ClearEntities(Handle_IGESData_IGESModel self)

        Clears the entities; uses the general service WhenDelete, in
        addition to the standard Memory Manager; can be redefined


        """
        return _IGESData.Handle_IGESData_IGESModel_ClearEntities(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESData_IGESModel self) -> Standard_Integer

        Returns count of contained Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_NbEntities(self, *args)


    def Contains(self, *args):
        """
        Contains(Handle_IGESData_IGESModel self, Handle_Standard_Transient anentity) -> Standard_Boolean

        Returns True if a Model contains an Entity (for a ReportEntity,
        looks for the ReportEntity itself AND its Concerned Entity)

        :type anentity: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_Contains(self, *args)


    def Number(self, *args):
        """
        Number(Handle_IGESData_IGESModel self, Handle_Standard_Transient anentity) -> Standard_Integer

        Returns the Number of an Entity in the Model if it contains it.
        Else returns 0. For a ReportEntity, looks at Concerned Entity.
        Returns the Directory entry   Number of  an Entity in
        the  Model if it contains it.   Else returns  0.  For a
        ReportEntity, looks at Concerned Entity.

        :type anentity: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_Number(self, *args)


    def Value(self, *args):
        """
        Returns an Entity identified by its number in the Model
        Each sub-class of InterfaceModel can define its own method
        Entity to return its specific class of Entity (e.g. for VDA,
        VDAModel returns a VDAEntity), working by calling Value
        Remark : For a Reported Entity, (Erroneous, Corrected, Unknown), this
        method returns this Reported Entity.
        See ReportEntity for other questions.

        :type num: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        res = _IGESData.Handle_IGESData_IGESModel_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESData_IGESModel self, Handle_Standard_Transient ent) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Defined by the Protocol, which gives default as
        1 (dynamic Type).

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESData_IGESModel self, Handle_Standard_Transient ent, Standard_Integer const num=1) -> Handle_Standard_Type

        Returns a type, given its rank : defined by the Protocol
        (by default, the first one)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type num: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.Handle_IGESData_IGESModel_Type(self, *args)


    def TypeName(self, *args):
        """
        TypeName(Handle_IGESData_IGESModel self, Handle_Standard_Transient ent, Standard_Boolean const complete) -> Standard_CString

        Returns the type name of an entity, from the list of types
        (one or more ...)
        <complete> True (D) gives the complete type, else packages are
        removed
        WARNING : buffered, to be immediately copied or printed

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type complete: bool
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_IGESModel_TypeName(self, *args)


    def ClassName(self, *args):
        """
        ClassName(Handle_IGESData_IGESModel self, Standard_CString const typnam) -> Standard_CString

        From a CDL Type Name, returns the Class part (package dropped)
        WARNING : buffered, to be immediately copied or printed

        :type typnam: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.Handle_IGESData_IGESModel_ClassName(self, *args)


    def EntityState(self, *args):
        """
        EntityState(Handle_IGESData_IGESModel self, Standard_Integer const num) -> Interface_DataState

        Returns the State of an entity, given its number

        :type num: int
        :rtype: OCC.wrapper.Interface.Interface_DataState

        """
        return _IGESData.Handle_IGESData_IGESModel_EntityState(self, *args)


    def IsReportEntity(self, *args):
        """
        IsReportEntity(Handle_IGESData_IGESModel self, Standard_Integer const num, Standard_Boolean const semantic) -> Standard_Boolean

        Returns True if <num> identifies a ReportEntity in the Model
        Hence, ReportEntity can be called.

        By default, queries main report, if <semantic> is True, it
        queries report for semantic check

        Remember that a Report Entity can be defined for an Unknown
        Entity, or a Corrected or Erroneous (at read time) Entity.
        The ReportEntity is defined before call to method AddEntity.

        :type num: int
        :type semantic: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_IsReportEntity(self, *args)


    def ReportEntity(self, *args):
        """
        ReportEntity(Handle_IGESData_IGESModel self, Standard_Integer const num, Standard_Boolean const semantic) -> Handle_Interface_ReportEntity

        Returns a ReportEntity identified by its number in the Model,
        or a Null Handle If <num> does not identify a ReportEntity.

        By default, queries main report, if <semantic> is True, it
        queries report for semantic check

        :type num: int
        :type semantic: bool
        :rtype: OCC.wrapper.Interface.Handle_Interface_ReportEntity

        """
        return _IGESData.Handle_IGESData_IGESModel_ReportEntity(self, *args)


    def IsErrorEntity(self, *args):
        """
        IsErrorEntity(Handle_IGESData_IGESModel self, Standard_Integer const num) -> Standard_Boolean

        Returns True if <num> identifies an Error Entity : in this
        case, a ReportEntity brings Fail Messages and possibly an
        "undefined" Content, see IsRedefinedEntity

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_IsErrorEntity(self, *args)


    def IsRedefinedContent(self, *args):
        """
        IsRedefinedContent(Handle_IGESData_IGESModel self, Standard_Integer const num) -> Standard_Boolean

        Returns True if <num> identifies an Entity which content is
        redefined through a ReportEntity (i.e. with literal data only)
        This happens when an entity is syntactically erroneous in the
        way that its basic content remains empty.
        For more details (such as content itself), see ReportEntity

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_IsRedefinedContent(self, *args)


    def ClearReportEntity(self, *args):
        """
        ClearReportEntity(Handle_IGESData_IGESModel self, Standard_Integer const num) -> Standard_Boolean

        Removes the ReportEntity attached to Entity <num>. Returns
        True if done, False if no ReportEntity was attached to <num>.
        Warning : the caller must assume that this clearing is meaningfull

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_ClearReportEntity(self, *args)


    def SetReportEntity(self, *args):
        """
        SetReportEntity(Handle_IGESData_IGESModel self, Standard_Integer const num, Handle_Interface_ReportEntity rep) -> Standard_Boolean

        Sets or Replaces a ReportEntity for the Entity <num>. Returns
        True if Report is replaced, False if it has been replaced
        Warning : the caller must assume that this setting is meaningfull

        :type num: int
        :type rep: OCC.wrapper.Interface.Handle_Interface_ReportEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_SetReportEntity(self, *args)


    def AddReportEntity(self, *args):
        """
        AddReportEntity(Handle_IGESData_IGESModel self, Handle_Interface_ReportEntity rep, Standard_Boolean const semantic) -> Standard_Boolean

        Adds a ReportEntity as such. Returns False if the concerned
        entity is not recorded in the Model
        Else, adds it into, either the main report list or the
        list for semantic checks, then returns True

        :type rep: OCC.wrapper.Interface.Handle_Interface_ReportEntity
        :type semantic: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_AddReportEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESData_IGESModel self, Standard_Integer const num) -> Standard_Boolean

        Returns True if <num> identifies an Unknown Entity : in this
        case, a ReportEntity with no Check Messages designates it.

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_IsUnknownEntity(self, *args)


    def FillSemanticChecks(self, *args):
        """
        FillSemanticChecks(Handle_IGESData_IGESModel self, Interface_CheckIterator checks, Standard_Boolean const clear)

        Fills the list of semantic checks.
        This list is computed (by CheckTool). Hence, it can be stored
        in the model for later queries
        <clear> True (D) : new list replaces
        <clear> False    : new list is cumulated

        :type checks: OCC.wrapper.Interface.Interface_CheckIterator
        :type clear: bool

        """
        return _IGESData.Handle_IGESData_IGESModel_FillSemanticChecks(self, *args)


    def HasSemanticChecks(self, *args):
        """
        HasSemanticChecks(Handle_IGESData_IGESModel self) -> Standard_Boolean

        Returns True if semantic checks have been filled

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_HasSemanticChecks(self, *args)


    def Check(self, *args):
        """
        Returns the check attached to an entity, designated by its
        Number. 0 for global check
        <semantic> True  : recorded semantic check
        <semantic> False : recorded syntactic check (see ReportEntity)
        If no check is recorded for <num>, returns an empty Check

        :type num: int
        :type syntactic: bool
        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        res = _IGESData.Handle_IGESData_IGESModel_Check(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Reservate(self, *args):
        """
        Reservate(Handle_IGESData_IGESModel self, Standard_Integer const nbent)

        Does a reservation for the List of Entities (for optimized
        storage management). If it is not called, storage management
        can be less efficient. <nbent> is the expected count of
        Entities to store

        :type nbent: int

        """
        return _IGESData.Handle_IGESData_IGESModel_Reservate(self, *args)


    def AddEntity(self, *args):
        """
        AddEntity(Handle_IGESData_IGESModel self, Handle_Standard_Transient anentity)

        Internal method for adding an Entity. Used by file reading
        (defined by each Interface) and Transfer tools. It adds the
        entity required to be added, not its refs : see AddWithRefs.
        If <anentity> is a ReportEntity, it is added to the list of
        Reports, its Concerned Entity (Erroneous or Corrected, else
        Unknown) is added to the list of Entities.
        That is, the ReportEntity must be created before Adding

        :type anentity: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.Handle_IGESData_IGESModel_AddEntity(self, *args)


    def AddWithRefs(self, *args):
        """
        AddWithRefs(Handle_IGESData_IGESModel self, Handle_Standard_Transient anent, Handle_Interface_Protocol proto, Standard_Integer const level=0, Standard_Boolean const listall)
        AddWithRefs(Handle_IGESData_IGESModel self, Handle_Standard_Transient anent, Standard_Integer const level=0, Standard_Boolean const listall)
        AddWithRefs(Handle_IGESData_IGESModel self, Handle_Standard_Transient anent, Interface_GeneralLib lib, Standard_Integer const level=0, Standard_Boolean const listall)

        Same as above, but works with an already created GeneralLib

        :type anent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type lib: OCC.wrapper.Interface.Interface_GeneralLib
        :type level: int
        :type listall: bool

        """
        return _IGESData.Handle_IGESData_IGESModel_AddWithRefs(self, *args)


    def ReplaceEntity(self, *args):
        """
        ReplaceEntity(Handle_IGESData_IGESModel self, Standard_Integer const nument, Handle_Standard_Transient anent)

        Replace Entity with Number=nument on other entity - "anent"

        :type nument: int
        :type anent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.Handle_IGESData_IGESModel_ReplaceEntity(self, *args)


    def ReverseOrders(self, *args):
        """
        ReverseOrders(Handle_IGESData_IGESModel self, Standard_Integer const after=0)

        Reverses the Numbers of the Entities, between <after> and the
        total count of Entities. Thus, the entities :
        1,2 ... after, after+1 ... nb-1, nb  become numbered as :
        1,2 ... after, nb, nb-1 ... after+1
        By default (after = 0) the whole list of Entities is reversed

        :type after: int

        """
        return _IGESData.Handle_IGESData_IGESModel_ReverseOrders(self, *args)


    def ChangeOrder(self, *args):
        """
        ChangeOrder(Handle_IGESData_IGESModel self, Standard_Integer const oldnum, Standard_Integer const newnum, Standard_Integer const count=1)

        Changes the Numbers of some Entities : <oldnum> is moved to
        <newnum>, same for <count> entities. Thus :
        1,2 ... newnum-1 newnum ... oldnum .. oldnum+count oldnum+count+1 .. gives
        1,2 ... newnum-1 oldnum .. oldnum+count newnum ... oldnum+count+1
        (can be seen as a circular permutation)

        :type oldnum: int
        :type newnum: int
        :type count: int

        """
        return _IGESData.Handle_IGESData_IGESModel_ChangeOrder(self, *args)


    def GetFromTransfer(self, *args):
        """
        GetFromTransfer(Handle_IGESData_IGESModel self, Interface_EntityIterator aniter)

        Gets contents from an EntityIterator, prepared by a
        Transfer tool (e.g TransferCopy). Starts from clear

        :type aniter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_IGESModel_GetFromTransfer(self, *args)


    def SetCategoryNumber(self, *args):
        """
        SetCategoryNumber(Handle_IGESData_IGESModel self, Standard_Integer const num, Standard_Integer const val) -> Standard_Boolean

        Records a category number for an entity number
        Returns True when done, False if <num> is out of range

        :type num: int
        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_SetCategoryNumber(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESData_IGESModel self, Standard_Integer const num) -> Standard_Integer

        Returns the recorded category number for a given entity number
        0 if none was defined for this entity

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_CategoryNumber(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESData_IGESModel self, Interface_EntityIterator iter)

        Allows an EntityIterator to get a list of Entities

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_IGESModel_FillIterator(self, *args)


    def Entities(self, *args):
        """
        Entities(Handle_IGESData_IGESModel self) -> Interface_EntityIterator

        Returns the list of all Entities, as an Iterator on Entities
        (the Entities themselves, not the Reports)

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_IGESModel_Entities(self, *args)


    def Reports(self, *args):
        """
        Reports(Handle_IGESData_IGESModel self, Standard_Boolean const semantic) -> Interface_EntityIterator

        Returns the list of all ReportEntities, i.e. data about
        Entities read with Error or Warning informations
        (each item has to be casted to Report Entity then it can be
        queried for Concerned Entity, Content, Check ...)
        By default, returns the main reports, is <semantic> is True it
        returns the list for sematic checks

        :type semantic: bool
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_IGESModel_Reports(self, *args)


    def Redefineds(self, *args):
        """
        Redefineds(Handle_IGESData_IGESModel self) -> Interface_EntityIterator

        Returns the list of ReportEntities which redefine data
        (generally, if concerned entity is "Error", a literal content
        is added to it : this is a "redefined entity"

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_IGESModel_Redefineds(self, *args)


    def GlobalCheck(self, *args):
        """
        Returns the GlobalCheck, which memorizes messages global to
        the file (not specific to an Entity), especially Header

        :type syntactic: bool
        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        res = _IGESData.Handle_IGESData_IGESModel_GlobalCheck(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGlobalCheck(self, *args):
        """
        SetGlobalCheck(Handle_IGESData_IGESModel self, Handle_Interface_Check ach)

        Allows to modify GlobalCheck, after getting then completing it
        Remark : it is SYNTACTIC check. Semantics, see FillChecks

        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.Handle_IGESData_IGESModel_SetGlobalCheck(self, *args)


    def Print(self, *args):
        """
        Print(Handle_IGESData_IGESModel self, Handle_Standard_Transient ent, Handle_Message_Messenger s, Standard_Integer const mode=0)

        Prints identification of a given entity in <me>, in order to
        be printed in a list or phrase
        <mode> < 0 : prints only its number
        <mode> = 1 : just calls PrintLabel
        <mode> = 0 (D) : prints its number plus '/' plus PrintLabel
        If <ent> == <me>, simply prints "Global"
        If <ent> is unknown, prints "??/its type"

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type s: OCC.wrapper.Message.Handle_Message_Messenger
        :type mode: int

        """
        return _IGESData.Handle_IGESData_IGESModel_Print(self, *args)


    def NextNumberForLabel(self, *args):
        """
        NextNumberForLabel(Handle_IGESData_IGESModel self, Standard_CString const label, Standard_Integer const lastnum=0, Standard_Boolean const exact) -> Standard_Integer

        Searches a label which matches with one entity.
        Begins from <lastnum>+1 (default:1) and scans the entities
        until <NbEntities>. For the first which matches <label>,
        this method returns its Number. Returns 0 if nothing found
        Can be called recursively (labels are not specified as unique)
        <exact> : if True (default), exact match is required
        else, checks the END of entity label

        This method is virtual, hence it can be redefined for a more
        efficient search (if exact is true).

        :type label: OCC.wrapper.Standard.Standard_CString
        :type lastnum: int
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_NextNumberForLabel(self, *args)


    def HasTemplate(self, *args):
        """
        HasTemplate(Handle_IGESData_IGESModel self, Standard_CString const name) -> Standard_Boolean

        Returns true if a template is attached to a given name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_HasTemplate(self, *args)


    def Template(self, *args):
        """
        Template(Handle_IGESData_IGESModel self, Standard_CString const name) -> Handle_Interface_InterfaceModel

        Returns the template model attached to a name, or a Null Handle

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESData.Handle_IGESData_IGESModel_Template(self, *args)


    def SetTemplate(self, *args):
        """
        SetTemplate(Handle_IGESData_IGESModel self, Standard_CString const name, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Records a new template model with a name. If the name was
        already recorded, the corresponding template is replaced by
        the new one. Then, WARNING : test HasTemplate to avoid
        surprises

        :type name: OCC.wrapper.Standard.Standard_CString
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_SetTemplate(self, *args)


    def ListTemplates(self, *args):
        """
        ListTemplates(Handle_IGESData_IGESModel self) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the complete list of names attached to template models

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESData.Handle_IGESData_IGESModel_ListTemplates(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_IGESModel self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_IGESModel_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_IGESModel self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_IGESModel self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_IGESModel self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_IGESModel self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESModel_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_IGESModel self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_IGESModel_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_IGESModel self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_IGESModel self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_IGESModel_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_IGESModel self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESModel_DecrementRefCounter(self, *args)

Handle_IGESData_IGESModel_swigregister = _IGESData.Handle_IGESData_IGESModel_swigregister
Handle_IGESData_IGESModel_swigregister(Handle_IGESData_IGESModel)

def Handle_IGESData_IGESModel_DownCast(thing):
    return _IGESData.Handle_IGESData_IGESModel_DownCast(thing)
Handle_IGESData_IGESModel_DownCast = _IGESData.Handle_IGESData_IGESModel_DownCast

class Handle_IGESData_HArray1OfIGESEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_HArray1OfIGESEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_HArray1OfIGESEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_HArray1OfIGESEntity self, IGESData_HArray1OfIGESEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_HArray1OfIGESEntity self, Handle_IGESData_HArray1OfIGESEntity theHandle) -> Handle_IGESData_HArray1OfIGESEntity
        assign(Handle_IGESData_HArray1OfIGESEntity self, IGESData_HArray1OfIGESEntity thePtr) -> Handle_IGESData_HArray1OfIGESEntity
        assign(Handle_IGESData_HArray1OfIGESEntity self, Handle_IGESData_HArray1OfIGESEntity theHandle) -> Handle_IGESData_HArray1OfIGESEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_HArray1OfIGESEntity self) -> IGESData_HArray1OfIGESEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_HArray1OfIGESEntity self) -> IGESData_HArray1OfIGESEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_HArray1OfIGESEntity self) -> IGESData_HArray1OfIGESEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_HArray1OfIGESEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_HArray1OfIGESEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_HArray1OfIGESEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_HArray1OfIGESEntity

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESData.IGESData_Array1OfIGESEntity

        """
        res = _IGESData.Handle_IGESData_HArray1OfIGESEntity_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESData_HArray1OfIGESEntity self) -> NCollection_Array1_Handle_IGESData_IGESEntity

        :rtype: OCC.wrapper.IGESData.IGESData_Array1OfIGESEntity

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_HArray1OfIGESEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_HArray1OfIGESEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_HArray1OfIGESEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_HArray1OfIGESEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_HArray1OfIGESEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_HArray1OfIGESEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_HArray1OfIGESEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_HArray1OfIGESEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_HArray1OfIGESEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_HArray1OfIGESEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_HArray1OfIGESEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_HArray1OfIGESEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_HArray1OfIGESEntity_DecrementRefCounter(self, *args)

Handle_IGESData_HArray1OfIGESEntity_swigregister = _IGESData.Handle_IGESData_HArray1OfIGESEntity_swigregister
Handle_IGESData_HArray1OfIGESEntity_swigregister(Handle_IGESData_HArray1OfIGESEntity)

def Handle_IGESData_HArray1OfIGESEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_HArray1OfIGESEntity_DownCast(thing)
Handle_IGESData_HArray1OfIGESEntity_DownCast = _IGESData.Handle_IGESData_HArray1OfIGESEntity_DownCast

class IGESData_ParamCursor(object):
    """
    Auxiliary class for ParamReader.
    It stores commands for a ParamReader to manage the current
    parameter number. Used by methods Read... from ParamReader.
    It allows to define the following commands :
    - read a parameter specified by a precise Number (basic case)
    - read a parameter then set Current Number to follow its number
    - read the current parameter (with Current Number) then
    advance Current Number by one
    - idem with several : read "nb" parameters from one specified,
    included, with or without setting Current Number to follow
    last parameter read
    - read several parameter from the current one, then advance
    Current Number to follow the last one read
    - Read several parameters (as above) but in interlaced lists,
    i.e. from complex items (each one including successively for
    instance, an Integer, a Real, an Entity ...)

    If commands to advance Current Number are not set, it must be
    set by the user (with method SetCurrent from ParamReader)
    ParamReader offers methods which create most useful cases
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_ParamCursor self, Standard_Integer const num) -> IGESData_ParamCursor
        __init__(IGESData_ParamCursor self, Standard_Integer const num, Standard_Integer const nb, Standard_Integer const size=1) -> IGESData_ParamCursor

        Creates a Cursor to read a list of parameters (count "nb")
        starting from a precise one (number "num") included, then
        set Current Number of ParamNumber to the first following one
        ("num + nb")
        If size is given, it means that each parameter is made of more
        than one term. One term is the normal (default) case : for
        instance, a Parameter comprises one Integer, or one Entity ...
        Size gives the complete size of each Item if it is complex.
        To be used ONLY IF it is constant

        :type num: int
        :type nb: int
        :type size: int

        """
        this = _IGESData.new_IGESData_ParamCursor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetTerm(self, *args):
        """
        SetTerm(IGESData_ParamCursor self, Standard_Integer const size, Standard_Boolean const autoadv)

        Defines the size of a term to read in the item : this commands
        ParamReader to read "size" parameters for each item, then
        skip the remainder of the item to the same term of next Item
        (that is, skip "item size" - "term size")

        In addition, Offset from beginning of Item is managed :
        After being created, and for the frist call to SetTerm, the
        part of Item to be read begins exactly as the Item begins
        But after a SetTerm, the next read will add an offset which is
        the size of former term.

        autoadv commands Advance management. If it is True (default),
        the last SetTerm (Item size has been covered) calls SetAdvance
        If it is False, SetAdvance must be called directly if necessary

        Error if a SetTerm overpasses the size of the Item

        :type size: int
        :type autoadv: bool

        """
        return _IGESData.IGESData_ParamCursor_SetTerm(self, *args)


    def SetOne(self, *args):
        """
        SetOne(IGESData_ParamCursor self, Standard_Boolean const autoadv)

        Defines a term of one Parameter (very current case)

        :type autoadv: bool

        """
        return _IGESData.IGESData_ParamCursor_SetOne(self, *args)


    def SetXY(self, *args):
        """
        SetXY(IGESData_ParamCursor self, Standard_Boolean const autoadv)

        Defines a term of two Parameters for a XY (current case)

        :type autoadv: bool

        """
        return _IGESData.IGESData_ParamCursor_SetXY(self, *args)


    def SetXYZ(self, *args):
        """
        SetXYZ(IGESData_ParamCursor self, Standard_Boolean const autoadv)

        Defines a term of three Parameters for XYZ (current case)

        :type autoadv: bool

        """
        return _IGESData.IGESData_ParamCursor_SetXYZ(self, *args)


    def SetAdvance(self, *args):
        """
        SetAdvance(IGESData_ParamCursor self, Standard_Boolean const advance)

        Changes command to advance current cursor after reading
        parameters. If "advance" True, sets advance, if "False",
        resets it. ParamCursor is created by default with True.

        :type advance: bool

        """
        return _IGESData.IGESData_ParamCursor_SetAdvance(self, *args)


    def Start(self, *args):
        """
        Start(IGESData_ParamCursor self) -> Standard_Integer

        Returns (included) starting number for reading parameters

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamCursor_Start(self, *args)


    def Limit(self, *args):
        """
        Limit(IGESData_ParamCursor self) -> Standard_Integer

        Returns (excluded) upper limit number for reading parameters

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamCursor_Limit(self, *args)


    def Count(self, *args):
        """
        Count(IGESData_ParamCursor self) -> Standard_Integer

        Returns required count of items to be read

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamCursor_Count(self, *args)


    def ItemSize(self, *args):
        """
        ItemSize(IGESData_ParamCursor self) -> Standard_Integer

        Returns length of item (count of parameters per item)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamCursor_ItemSize(self, *args)


    def TermSize(self, *args):
        """
        TermSize(IGESData_ParamCursor self) -> Standard_Integer

        Returns length of current term (count of parameters) in item

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamCursor_TermSize(self, *args)


    def Offset(self, *args):
        """
        Offset(IGESData_ParamCursor self) -> Standard_Integer

        Returns offset from which current term must be read in item

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamCursor_Offset(self, *args)


    def Advance(self, *args):
        """
        Advance(IGESData_ParamCursor self) -> Standard_Boolean

        Returns True if Advance command has been set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamCursor_Advance(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_ParamCursor
IGESData_ParamCursor_swigregister = _IGESData.IGESData_ParamCursor_swigregister
IGESData_ParamCursor_swigregister(IGESData_ParamCursor)

class IGESData_ReadWriteModule(Interface.Interface_ReaderModule):
    """
    Defines basic File Access Module, under the control of
    IGESReaderTool for Reading and IGESWriter for Writing :
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity.
    The common parts (Directory Entry, Lists of Associativities
    and Properties) are processed by IGESReaderTool & IGESWriter

    Each sub-class of ReadWriteModule is used in conjunction with
    a sub-class of Protocol from IGESData and processes several
    types of IGESEntity (typically, them of a package) :
    The Protocol gives a unique positive integer Case Number for
    each type of IGESEntity it recognizes, the corresponding
    ReadWriteModule processes an Entity by using the Case Number
    to known what is to do
    On Reading, the general service NewVoid is used to create an
    IGES Entity the first time

    Warning : Works with an IGESReaderData which stores "DE parts" of Items
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESData_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESData_ReadWriteModule(self) 
            return h


    def CaseNum(self, *args):
        """
        CaseNum(IGESData_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ReadWriteModule_CaseNum(self, *args)


    def CaseIGES(self, *args):
        """
        CaseIGES(IGESData_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers corresponding to the Entity Types taken
        into account by a sub-class of ReadWriteModule (hence, each
        sub-class of ReadWriteModule has to redefine this method)
        Called by CaseNum. Its result will then be used to call
        Read, etc ...

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ReadWriteModule_CaseIGES(self, *args)


    def Read(self, *args):
        """
        Read(IGESData_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.IGESData_ReadWriteModule_Read(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESData_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity; <PR> gives
        access to them, <IR> detains parameter types and values
        For each class, there must be a specific action provided
        Note that Properties and Associativities Lists are Read by
        specific methods (see below), they are called under control
        of reading process (only one call) according Stage recorded
        in ParamReader

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESData.IGESData_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESData_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter; defined for each class
        (to be redefined for other IGES ReadWriteModules)
        Warning : Properties and Associativities are directly managed by
        WriteIGES, must not be sent by this method

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESData.IGESData_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESData.IGESData_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESData.IGESData_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.IGESData_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESData.delete_IGESData_ReadWriteModule
IGESData_ReadWriteModule_swigregister = _IGESData.IGESData_ReadWriteModule_swigregister
IGESData_ReadWriteModule_swigregister(IGESData_ReadWriteModule)

def IGESData_ReadWriteModule_get_type_name(*args):
    """
    IGESData_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESData.IGESData_ReadWriteModule_get_type_name(*args)

def IGESData_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESData_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESData.IGESData_ReadWriteModule_get_type_descriptor(*args)

class Handle_IGESData_NodeOfWriterLib(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_NodeOfWriterLib self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_NodeOfWriterLib self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_NodeOfWriterLib self, IGESData_NodeOfWriterLib thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_NodeOfWriterLib self, Handle_IGESData_NodeOfWriterLib theHandle) -> Handle_IGESData_NodeOfWriterLib
        assign(Handle_IGESData_NodeOfWriterLib self, IGESData_NodeOfWriterLib thePtr) -> Handle_IGESData_NodeOfWriterLib
        assign(Handle_IGESData_NodeOfWriterLib self, Handle_IGESData_NodeOfWriterLib theHandle) -> Handle_IGESData_NodeOfWriterLib

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_NodeOfWriterLib self) -> IGESData_NodeOfWriterLib

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_NodeOfWriterLib self) -> IGESData_NodeOfWriterLib

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_NodeOfWriterLib self) -> IGESData_NodeOfWriterLib

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_NodeOfWriterLib___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_NodeOfWriterLib___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_NodeOfWriterLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_NodeOfWriterLib_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_NodeOfWriterLib

    def AddNode(self, *args):
        """
        AddNode(Handle_IGESData_NodeOfWriterLib self, Handle_IGESData_GlobalNodeOfWriterLib anode)

        Adds a couple (Module,Protocol), that is, stores it into
        itself if not yet done, else creates a Next Node to do it

        :type anode: OCC.wrapper.IGESData.Handle_IGESData_GlobalNodeOfWriterLib

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_AddNode(self, *args)


    def Module(self, *args):
        """
        Returns the Module designated by a precise Node

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ReadWriteModule

        """
        res = _IGESData.Handle_IGESData_NodeOfWriterLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the Protocol designated by a precise Node

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.Handle_IGESData_NodeOfWriterLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Next(self, *args):
        """
        Returns the Next Node. If none was defined, returned value
        is a Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_NodeOfWriterLib

        """
        res = _IGESData.Handle_IGESData_NodeOfWriterLib_Next(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_NodeOfWriterLib self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_NodeOfWriterLib_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_NodeOfWriterLib_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_NodeOfWriterLib self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_NodeOfWriterLib self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_NodeOfWriterLib self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_NodeOfWriterLib self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_NodeOfWriterLib self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_NodeOfWriterLib self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_NodeOfWriterLib self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_NodeOfWriterLib self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_NodeOfWriterLib self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NodeOfWriterLib_DecrementRefCounter(self, *args)

Handle_IGESData_NodeOfWriterLib_swigregister = _IGESData.Handle_IGESData_NodeOfWriterLib_swigregister
Handle_IGESData_NodeOfWriterLib_swigregister(Handle_IGESData_NodeOfWriterLib)

def Handle_IGESData_NodeOfWriterLib_DownCast(thing):
    return _IGESData.Handle_IGESData_NodeOfWriterLib_DownCast(thing)
Handle_IGESData_NodeOfWriterLib_DownCast = _IGESData.Handle_IGESData_NodeOfWriterLib_DownCast

class IGESData_BasicEditor(object):
    """
    This class provides various functions of basic edition,
    such as :
    - setting header unit (WARNING : DOES NOT convert entities)
    - computation of the status (Subordinate, UseFlag) of entities
    of IGES Entities on a whole model
    - auto correction of IGES Entities, defined both by DirChecker
    and by specific service AutoCorrect
    (this auto correction performs non-ambigious, rather logic,
    editions)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_BasicEditor self) -> IGESData_BasicEditor
        __init__(IGESData_BasicEditor self, Handle_IGESData_Protocol protocol) -> IGESData_BasicEditor
        __init__(IGESData_BasicEditor self, Handle_IGESData_IGESModel model, Handle_IGESData_Protocol protocol) -> IGESData_BasicEditor

        Creates a Basic Editor for IGES Data, ready to run

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type protocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        this = _IGESData.new_IGESData_BasicEditor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(IGESData_BasicEditor self, Handle_IGESData_Protocol protocol)
        Init(IGESData_BasicEditor self, Handle_IGESData_IGESModel model, Handle_IGESData_Protocol protocol)

        Initialize a Basic Editor for IGES Data, ready to run

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type protocol: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESData.IGESData_BasicEditor_Init(self, *args)


    def Model(self, *args):
        """
        Model(IGESData_BasicEditor self) -> Handle_IGESData_IGESModel

        Returns the designated model

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _IGESData.IGESData_BasicEditor_Model(self, *args)


    def SetUnitFlag(self, *args):
        """
        SetUnitFlag(IGESData_BasicEditor self, Standard_Integer const flag) -> Standard_Boolean

        Sets a new unit from its flag (param 14 of Global Section)
        Returns True if done, False if <flag> is incorrect

        :type flag: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_BasicEditor_SetUnitFlag(self, *args)


    def SetUnitValue(self, *args):
        """
        SetUnitValue(IGESData_BasicEditor self, Standard_Real const val) -> Standard_Boolean

        Sets a new unit from its value in meters (rounded to the
        closest one, max gap 1%)
        Returns True if done, False if <val> is too far from a
        suitable value

        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_BasicEditor_SetUnitValue(self, *args)


    def SetUnitName(self, *args):
        """
        SetUnitName(IGESData_BasicEditor self, Standard_CString const name) -> Standard_Boolean

        Sets a new unit from its name (param 15 of Global Section)
        Returns True if done, False if <name> is incorrect
        Remark : if <flag> has been set to 3 (user defined), <name>
        is then free

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_BasicEditor_SetUnitName(self, *args)


    def ApplyUnit(self, *args):
        """
        ApplyUnit(IGESData_BasicEditor self, Standard_Boolean const enforce)

        Applies unit value to convert header data : Resolution,
        MaxCoord, MaxLineWeight
        Applies unit only once after SetUnit... has been called,
        if <enforce> is given as True.
        It can be called just before writing the model to a file,
        i.e. when definitive values are finally known

        :type enforce: bool

        """
        return _IGESData.IGESData_BasicEditor_ApplyUnit(self, *args)


    def ComputeStatus(self, *args):
        """
        ComputeStatus(IGESData_BasicEditor self)

        Performs the re-computation of status on the whole model
        (Subordinate Status and Use Flag of each IGES Entity), which
        can have required values according the way they are referenced
        (see definitions of Logical use, Physical use, etc...)


        """
        return _IGESData.IGESData_BasicEditor_ComputeStatus(self, *args)


    def AutoCorrect(self, *args):
        """
        AutoCorrect(IGESData_BasicEditor self, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs auto-correction on an IGESEntity
        Returns True if something has changed, False if nothing done.

        Works with the specific IGES Services : DirChecker which
        allows to correct data in "Directory Part" of Entities (such
        as required values for status, or references to be null), and
        the specific IGES service OwnCorrect, which is specialised for
        each type of entity.

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_BasicEditor_AutoCorrect(self, *args)


    def AutoCorrectModel(self, *args):
        """
        AutoCorrectModel(IGESData_BasicEditor self) -> Standard_Integer

        Performs auto-correction on the whole Model
        Returns the count of modified entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_BasicEditor_AutoCorrectModel(self, *args)


    def UnitNameFlag(*args):
        """
        UnitNameFlag(Standard_CString const name) -> Standard_Integer

        From the name of unit, computes flag number, 0 if incorrect
        (in this case, user defined entity remains possible)

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_BasicEditor_UnitNameFlag(*args)

    UnitNameFlag = staticmethod(UnitNameFlag)

    def UnitFlagValue(*args):
        """
        UnitFlagValue(Standard_Integer const flag) -> Standard_Real

        From the flag of unit, determines value in MM, 0 if incorrect

        :type flag: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.IGESData_BasicEditor_UnitFlagValue(*args)

    UnitFlagValue = staticmethod(UnitFlagValue)

    def UnitFlagName(*args):
        """
        UnitFlagName(Standard_Integer const flag) -> Standard_CString

        From the flag of unit, determines its name, "" if incorrect

        :type flag: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_BasicEditor_UnitFlagName(*args)

    UnitFlagName = staticmethod(UnitFlagName)

    def IGESVersionName(*args):
        """
        IGESVersionName(Standard_Integer const flag) -> Standard_CString

        From the flag of IGES version, returns name, "" if incorrect

        :type flag: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_BasicEditor_IGESVersionName(*args)

    IGESVersionName = staticmethod(IGESVersionName)

    def IGESVersionMax(*args):
        """
        IGESVersionMax() -> Standard_Integer

        Returns the maximum allowed value for IGESVersion Flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_BasicEditor_IGESVersionMax(*args)

    IGESVersionMax = staticmethod(IGESVersionMax)

    def DraftingName(*args):
        """
        DraftingName(Standard_Integer const flag) -> Standard_CString

        From the flag of drafting standard, returns name, "" if incorrect

        :type flag: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_BasicEditor_DraftingName(*args)

    DraftingName = staticmethod(DraftingName)

    def DraftingMax(*args):
        """
        DraftingMax() -> Standard_Integer

        Returns the maximum allowed value for Drafting Flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_BasicEditor_DraftingMax(*args)

    DraftingMax = staticmethod(DraftingMax)
    __swig_destroy__ = _IGESData.delete_IGESData_BasicEditor
IGESData_BasicEditor_swigregister = _IGESData.IGESData_BasicEditor_swigregister
IGESData_BasicEditor_swigregister(IGESData_BasicEditor)

def IGESData_BasicEditor_UnitNameFlag(*args):
    """
    IGESData_BasicEditor_UnitNameFlag(Standard_CString const name) -> Standard_Integer

    From the name of unit, computes flag number, 0 if incorrect
    (in this case, user defined entity remains possible)

    :type name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESData.IGESData_BasicEditor_UnitNameFlag(*args)

def IGESData_BasicEditor_UnitFlagValue(*args):
    """
    IGESData_BasicEditor_UnitFlagValue(Standard_Integer const flag) -> Standard_Real

    From the flag of unit, determines value in MM, 0 if incorrect

    :type flag: int
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _IGESData.IGESData_BasicEditor_UnitFlagValue(*args)

def IGESData_BasicEditor_UnitFlagName(*args):
    """
    IGESData_BasicEditor_UnitFlagName(Standard_Integer const flag) -> Standard_CString

    From the flag of unit, determines its name, "" if incorrect

    :type flag: int
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _IGESData.IGESData_BasicEditor_UnitFlagName(*args)

def IGESData_BasicEditor_IGESVersionName(*args):
    """
    IGESData_BasicEditor_IGESVersionName(Standard_Integer const flag) -> Standard_CString

    From the flag of IGES version, returns name, "" if incorrect

    :type flag: int
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _IGESData.IGESData_BasicEditor_IGESVersionName(*args)

def IGESData_BasicEditor_IGESVersionMax(*args):
    """
    IGESData_BasicEditor_IGESVersionMax() -> Standard_Integer

    Returns the maximum allowed value for IGESVersion Flag

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESData.IGESData_BasicEditor_IGESVersionMax(*args)

def IGESData_BasicEditor_DraftingName(*args):
    """
    IGESData_BasicEditor_DraftingName(Standard_Integer const flag) -> Standard_CString

    From the flag of drafting standard, returns name, "" if incorrect

    :type flag: int
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _IGESData.IGESData_BasicEditor_DraftingName(*args)

def IGESData_BasicEditor_DraftingMax(*args):
    """
    IGESData_BasicEditor_DraftingMax() -> Standard_Integer

    Returns the maximum allowed value for Drafting Flag

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESData.IGESData_BasicEditor_DraftingMax(*args)

class Handle_IGESData_IGESEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_IGESEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_IGESEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_IGESEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_IGESEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_IGESEntity self, IGESData_IGESEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_IGESEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_IGESEntity self, Handle_IGESData_IGESEntity theHandle) -> Handle_IGESData_IGESEntity
        assign(Handle_IGESData_IGESEntity self, IGESData_IGESEntity thePtr) -> Handle_IGESData_IGESEntity
        assign(Handle_IGESData_IGESEntity self, Handle_IGESData_IGESEntity theHandle) -> Handle_IGESData_IGESEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_IGESEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_IGESEntity self) -> IGESData_IGESEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_IGESEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_IGESEntity self) -> IGESData_IGESEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_IGESEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_IGESEntity self) -> IGESData_IGESEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_IGESEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_IGESEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_IGESEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_IGESEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_IGESEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_IGESEntity

    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_IGESEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_IGESEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_IGESEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_IGESEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_IGESEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_IGESEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_IGESEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_IGESEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_IGESEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_IGESEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_IGESEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_IGESEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_IGESEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_IGESEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_IGESEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_IGESEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_IGESEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_IGESEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_IGESEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_IGESEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_IGESEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_IGESEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_IGESEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_IGESEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_IGESEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_IGESEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_IGESEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_IGESEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_IGESEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_IGESEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_IGESEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_IGESEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_IGESEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_IGESEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_IGESEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_IGESEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_IGESEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_IGESEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_IGESEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_IGESEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_IGESEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_IGESEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_IGESEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_IGESEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_IGESEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_IGESEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_IGESEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_IGESEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_IGESEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_IGESEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_IGESEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_IGESEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_IGESEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_IGESEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_IGESEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_IGESEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_IGESEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_IGESEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_IGESEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_IGESEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_IGESEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_IGESEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_IGESEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_IGESEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_IGESEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_IGESEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_IGESEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_IGESEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_IGESEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_IGESEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_IGESEntity_SetLineWeight(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_IGESEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_IGESEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_IGESEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_IGESEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_IGESEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_IGESEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_IGESEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_IGESEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_IGESEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_IGESEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_IGESEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_IGESEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_IGESEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_IGESEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_IGESEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_IGESEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_IGESEntity_DecrementRefCounter(self, *args)

Handle_IGESData_IGESEntity_swigregister = _IGESData.Handle_IGESData_IGESEntity_swigregister
Handle_IGESData_IGESEntity_swigregister(Handle_IGESData_IGESEntity)

def Handle_IGESData_IGESEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_IGESEntity_DownCast(thing)
Handle_IGESData_IGESEntity_DownCast = _IGESData.Handle_IGESData_IGESEntity_DownCast

class Handle_IGESData_DefaultSpecific(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_DefaultSpecific self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_DefaultSpecific_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_DefaultSpecific self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_DefaultSpecific self, IGESData_DefaultSpecific thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_DefaultSpecific self, Handle_IGESData_DefaultSpecific theHandle) -> Handle_IGESData_DefaultSpecific
        assign(Handle_IGESData_DefaultSpecific self, IGESData_DefaultSpecific thePtr) -> Handle_IGESData_DefaultSpecific
        assign(Handle_IGESData_DefaultSpecific self, Handle_IGESData_DefaultSpecific theHandle) -> Handle_IGESData_DefaultSpecific

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_DefaultSpecific self) -> IGESData_DefaultSpecific

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_DefaultSpecific self) -> IGESData_DefaultSpecific

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_DefaultSpecific___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_DefaultSpecific self) -> IGESData_DefaultSpecific

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_DefaultSpecific___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_DefaultSpecific___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_DefaultSpecific___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_DefaultSpecific(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_DefaultSpecific_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_DefaultSpecific

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESData_DefaultSpecific self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump for UndefinedEntity : it concerns only
        own parameters, the general data (Directory Part, Lists) are
        taken into account by the IGESDumper

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_OwnDump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_DefaultSpecific self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_DefaultSpecific_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_DefaultSpecific_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESData_DefaultSpecific self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Specific Automatic Correction on own Parameters of an Entity.
        It works by setting in accordance redundant data, if there are
        when there is no ambiguity (else, it does nothing).
        Remark that classic Corrections on Directory Entry (to set
        void data) are taken into account alsewhere.

        For instance, many "Associativity Entities" have a Number of
        Properties which must have a fixed value.
        Or, a ConicalArc has its Form Number which records the kind of
        Conic, also determined from its coefficients
        But, a CircularArc of which Distances (Center-Start) and
        (Center-End) are not equal cannot be corrected ...

        Returns True if something has been corrected in <ent>
        By default, does nothing. If at least one of the Types
        processed by a sub-class of SpecificModule has a Correct
        procedure attached, this method can be redefined

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_OwnCorrect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_DefaultSpecific self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_DefaultSpecific_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_DefaultSpecific self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_DefaultSpecific self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_DefaultSpecific self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_DefaultSpecific self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_DefaultSpecific self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_DefaultSpecific self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_DefaultSpecific self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_DefaultSpecific_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_DefaultSpecific self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_DefaultSpecific_DecrementRefCounter(self, *args)

Handle_IGESData_DefaultSpecific_swigregister = _IGESData.Handle_IGESData_DefaultSpecific_swigregister
Handle_IGESData_DefaultSpecific_swigregister(Handle_IGESData_DefaultSpecific)

def Handle_IGESData_DefaultSpecific_DownCast(thing):
    return _IGESData.Handle_IGESData_DefaultSpecific_DownCast(thing)
Handle_IGESData_DefaultSpecific_DownCast = _IGESData.Handle_IGESData_DefaultSpecific_DownCast

class Handle_IGESData_NodeOfSpecificLib(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_NodeOfSpecificLib self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_NodeOfSpecificLib self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_NodeOfSpecificLib self, IGESData_NodeOfSpecificLib thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_NodeOfSpecificLib self, Handle_IGESData_NodeOfSpecificLib theHandle) -> Handle_IGESData_NodeOfSpecificLib
        assign(Handle_IGESData_NodeOfSpecificLib self, IGESData_NodeOfSpecificLib thePtr) -> Handle_IGESData_NodeOfSpecificLib
        assign(Handle_IGESData_NodeOfSpecificLib self, Handle_IGESData_NodeOfSpecificLib theHandle) -> Handle_IGESData_NodeOfSpecificLib

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_NodeOfSpecificLib self) -> IGESData_NodeOfSpecificLib

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_NodeOfSpecificLib self) -> IGESData_NodeOfSpecificLib

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_NodeOfSpecificLib self) -> IGESData_NodeOfSpecificLib

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_NodeOfSpecificLib___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_NodeOfSpecificLib___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_NodeOfSpecificLib(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_NodeOfSpecificLib_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_NodeOfSpecificLib

    def AddNode(self, *args):
        """
        AddNode(Handle_IGESData_NodeOfSpecificLib self, Handle_IGESData_GlobalNodeOfSpecificLib anode)

        Adds a couple (Module,Protocol), that is, stores it into
        itself if not yet done, else creates a Next Node to do it

        :type anode: OCC.wrapper.IGESData.Handle_IGESData_GlobalNodeOfSpecificLib

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_AddNode(self, *args)


    def Module(self, *args):
        """
        Returns the Module designated by a precise Node

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_SpecificModule

        """
        res = _IGESData.Handle_IGESData_NodeOfSpecificLib_Module(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Protocol(self, *args):
        """
        Returns the Protocol designated by a precise Node

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        res = _IGESData.Handle_IGESData_NodeOfSpecificLib_Protocol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Next(self, *args):
        """
        Returns the Next Node. If none was defined, returned value
        is a Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_NodeOfSpecificLib

        """
        res = _IGESData.Handle_IGESData_NodeOfSpecificLib_Next(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_NodeOfSpecificLib self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_NodeOfSpecificLib_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_NodeOfSpecificLib_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESData_NodeOfSpecificLib self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_NodeOfSpecificLib self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_NodeOfSpecificLib self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_NodeOfSpecificLib self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_NodeOfSpecificLib self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_NodeOfSpecificLib self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_NodeOfSpecificLib self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_NodeOfSpecificLib self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_NodeOfSpecificLib self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_NodeOfSpecificLib_DecrementRefCounter(self, *args)

Handle_IGESData_NodeOfSpecificLib_swigregister = _IGESData.Handle_IGESData_NodeOfSpecificLib_swigregister
Handle_IGESData_NodeOfSpecificLib_swigregister(Handle_IGESData_NodeOfSpecificLib)

def Handle_IGESData_NodeOfSpecificLib_DownCast(thing):
    return _IGESData.Handle_IGESData_NodeOfSpecificLib_DownCast(thing)
Handle_IGESData_NodeOfSpecificLib_DownCast = _IGESData.Handle_IGESData_NodeOfSpecificLib_DownCast

class Handle_IGESData_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_ReadWriteModule self, IGESData_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_ReadWriteModule self, Handle_IGESData_ReadWriteModule theHandle) -> Handle_IGESData_ReadWriteModule
        assign(Handle_IGESData_ReadWriteModule self, IGESData_ReadWriteModule thePtr) -> Handle_IGESData_ReadWriteModule
        assign(Handle_IGESData_ReadWriteModule self, Handle_IGESData_ReadWriteModule theHandle) -> Handle_IGESData_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_ReadWriteModule self) -> IGESData_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_ReadWriteModule self) -> IGESData_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_ReadWriteModule self) -> IGESData_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_ReadWriteModule

    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESData_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_CaseNum(self, *args)


    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESData_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers corresponding to the Entity Types taken
        into account by a sub-class of ReadWriteModule (hence, each
        sub-class of ReadWriteModule has to redefine this method)
        Called by CaseNum. Its result will then be used to call
        Read, etc ...

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_CaseIGES(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESData_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_Read(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESData_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity; <PR> gives
        access to them, <IR> detains parameter types and values
        For each class, there must be a specific action provided
        Note that Properties and Associativities Lists are Read by
        specific methods (see below), they are called under control
        of reading process (only one call) according Stage recorded
        in ParamReader

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESData_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter; defined for each class
        (to be redefined for other IGES ReadWriteModules)
        Warning : Properties and Associativities are directly managed by
        WriteIGES, must not be sent by this method

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewRead(self, *args):
        """
        NewRead(Handle_IGESData_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESData_ReadWriteModule_swigregister = _IGESData.Handle_IGESData_ReadWriteModule_swigregister
Handle_IGESData_ReadWriteModule_swigregister(Handle_IGESData_ReadWriteModule)

def Handle_IGESData_ReadWriteModule_DownCast(thing):
    return _IGESData.Handle_IGESData_ReadWriteModule_DownCast(thing)
Handle_IGESData_ReadWriteModule_DownCast = _IGESData.Handle_IGESData_ReadWriteModule_DownCast

class Handle_IGESData_LabelDisplayEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESData_LabelDisplayEntity self)

        Nullify the handle


        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESData_LabelDisplayEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESData_LabelDisplayEntity self, IGESData_LabelDisplayEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_LabelDisplayEntity theHandle) -> Handle_IGESData_LabelDisplayEntity
        assign(Handle_IGESData_LabelDisplayEntity self, IGESData_LabelDisplayEntity thePtr) -> Handle_IGESData_LabelDisplayEntity
        assign(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_LabelDisplayEntity theHandle) -> Handle_IGESData_LabelDisplayEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESData_LabelDisplayEntity self) -> IGESData_LabelDisplayEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESData_LabelDisplayEntity self) -> IGESData_LabelDisplayEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESData_LabelDisplayEntity self) -> IGESData_LabelDisplayEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESData.Handle_IGESData_LabelDisplayEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESData.Handle_IGESData_LabelDisplayEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESData.new_Handle_IGESData_LabelDisplayEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESData.Handle_IGESData_LabelDisplayEntity_DownCast)
    __swig_destroy__ = _IGESData.delete_Handle_IGESData_LabelDisplayEntity

    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESData_LabelDisplayEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_LabelDisplayEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESData.Handle_IGESData_LabelDisplayEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESData_LabelDisplayEntity self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESData_LabelDisplayEntity self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESData_LabelDisplayEntity self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESData_LabelDisplayEntity self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESData_LabelDisplayEntity self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESData_LabelDisplayEntity self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESData_LabelDisplayEntity self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESData_LabelDisplayEntity self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESData_LabelDisplayEntity self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESData_LabelDisplayEntity self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESData_LabelDisplayEntity self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESData_LabelDisplayEntity self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESData_LabelDisplayEntity self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESData_LabelDisplayEntity self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESData_LabelDisplayEntity self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESData_LabelDisplayEntity self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESData_LabelDisplayEntity self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESData_LabelDisplayEntity self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESData_LabelDisplayEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESData_LabelDisplayEntity self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESData_LabelDisplayEntity self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESData_LabelDisplayEntity self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESData_LabelDisplayEntity self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESData_LabelDisplayEntity self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESData_LabelDisplayEntity self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESData_LabelDisplayEntity self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESData_LabelDisplayEntity self)

        Memory deallocator for transient classes


        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESData_LabelDisplayEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESData_LabelDisplayEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESData_LabelDisplayEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESData_LabelDisplayEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESData_LabelDisplayEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESData_LabelDisplayEntity self)

        Increments the reference counter of this object


        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESData_LabelDisplayEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.Handle_IGESData_LabelDisplayEntity_DecrementRefCounter(self, *args)

Handle_IGESData_LabelDisplayEntity_swigregister = _IGESData.Handle_IGESData_LabelDisplayEntity_swigregister
Handle_IGESData_LabelDisplayEntity_swigregister(Handle_IGESData_LabelDisplayEntity)

def Handle_IGESData_LabelDisplayEntity_DownCast(thing):
    return _IGESData.Handle_IGESData_LabelDisplayEntity_DownCast(thing)
Handle_IGESData_LabelDisplayEntity_DownCast = _IGESData.Handle_IGESData_LabelDisplayEntity_DownCast

class NCollection_Array1_Handle_IGESData_IGESEntity(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESData_IGESEntity self) -> NCollection_Array1< opencascade::handle< IGESData_IGESEntity > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESData_IGESEntity self) -> NCollection_Array1< opencascade::handle< IGESData_IGESEntity > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESData_IGESEntity self) -> NCollection_Array1< opencascade::handle< IGESData_IGESEntity > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESData_IGESEntity self) -> NCollection_Array1< opencascade::handle< IGESData_IGESEntity > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESData.new_NCollection_Array1_Handle_IGESData_IGESEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESData_IGESEntity self, Handle_IGESData_IGESEntity theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESData_IGESEntity self, NCollection_Array1_Handle_IGESData_IGESEntity theOther) -> NCollection_Array1_Handle_IGESData_IGESEntity

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESData_IGESEntity self, NCollection_Array1_Handle_IGESData_IGESEntity theOther) -> NCollection_Array1_Handle_IGESData_IGESEntity

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESData_IGESEntity self, NCollection_Array1_Handle_IGESData_IGESEntity theOther) -> NCollection_Array1_Handle_IGESData_IGESEntity
        assign(NCollection_Array1_Handle_IGESData_IGESEntity self, NCollection_Array1_Handle_IGESData_IGESEntity theOther) -> NCollection_Array1_Handle_IGESData_IGESEntity

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Handle_IGESData_IGESEntity

        @return first element

        :rtype: TheItemType &

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESData_IGESEntity self) -> Handle_IGESData_IGESEntity

        @return last element

        :rtype: TheItemType &

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESData_IGESEntity self, Standard_Integer const theIndex) -> Handle_IGESData_IGESEntity

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESData_IGESEntity self, Standard_Integer const theIndex, Handle_IGESData_IGESEntity theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESData_IGESEntity self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_Resize(self, *args)

    __swig_destroy__ = _IGESData.delete_NCollection_Array1_Handle_IGESData_IGESEntity
NCollection_Array1_Handle_IGESData_IGESEntity_swigregister = _IGESData.NCollection_Array1_Handle_IGESData_IGESEntity_swigregister
NCollection_Array1_Handle_IGESData_IGESEntity_swigregister(NCollection_Array1_Handle_IGESData_IGESEntity)


try:
	IGESData_Array1OfIGESEntity = NCollection_Array1_Handle_IGESData_IGESEntity
except NameError:
	pass # does not exist, probably ignored

class IGESData_ParamReader(object):
    """
    access to a list of parameters, with management of read stage
    (owned parameters, properties, associativities) and current
    parameter number, read errors (which feed a Check), plus
    convenient facilities to read parameters, in particular :
    - first parameter is ignored (it repeats entity type), hence
    number 1 gives 2nd parameter, etc...
    - lists are not explicit, list-reading methods are provided
    which manage a current param. number
    - interpretation is made as possible (texts, reals, entities ...)
    (in particular, Reading a Real accepts an Integer)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESData_ParamReader self, Handle_Interface_ParamList list, Handle_Interface_Check ach, Standard_Integer const base=1, Standard_Integer const nbpar=0, Standard_Integer const num=0) -> IGESData_ParamReader

        Prepares a ParamReader, stage "Own", current param = 1
        It considers a part of the list, from <base> (excluded) for
        <nbpar> parameters; <nbpar> = 0 commands to take list length.
        Default is (1 to skip type)

        :type list: OCC.wrapper.Interface.Handle_Interface_ParamList
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type base: int
        :type nbpar: int
        :type num: int

        """
        this = _IGESData.new_IGESData_ParamReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EntityNumber(self, *args):
        """
        EntityNumber(IGESData_ParamReader self) -> Standard_Integer

        Returns the entity number in the file

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamReader_EntityNumber(self, *args)


    def Clear(self, *args):
        """
        Clear(IGESData_ParamReader self)

        resets state (stage, current param number, check with no fail)


        """
        return _IGESData.IGESData_ParamReader_Clear(self, *args)


    def CurrentNumber(self, *args):
        """
        CurrentNumber(IGESData_ParamReader self) -> Standard_Integer

        returns the current parameter number
        This notion is involved by the organisation of an IGES list of
        parameter : it can be ended by two lists (Associativities and
        Properties), which can be empty, or even absent. Hence, it is
        necessary to know, at the end of specific reading, how many
        parameters have been read : the optionnal lists follow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamReader_CurrentNumber(self, *args)


    def SetCurrentNumber(self, *args):
        """
        SetCurrentNumber(IGESData_ParamReader self, Standard_Integer const num)

        sets current parameter number to a new value
        must be done at end of each step : set on first parameter
        following last read one; is done by some Read... methods
        (must be done directly if these method are not used)
        num greater than NbParams means that following lists are empty
        If current num is not managed, it remains at 1, which probably
        will cause error when successive steps of reading are made

        :type num: int

        """
        return _IGESData.IGESData_ParamReader_SetCurrentNumber(self, *args)


    def Stage(self, *args):
        """
        Stage(IGESData_ParamReader self) -> IGESData_ReadStage

        gives current stage (Own-Props-Assocs-End, begins at Own)

        :rtype: OCC.wrapper.IGESData.IGESData_ReadStage

        """
        return _IGESData.IGESData_ParamReader_Stage(self, *args)


    def NextStage(self, *args):
        """
        NextStage(IGESData_ParamReader self)

        passes to next stage (must be linked with setting Current)


        """
        return _IGESData.IGESData_ParamReader_NextStage(self, *args)


    def EndAll(self, *args):
        """
        EndAll(IGESData_ParamReader self)

        passes directly to the end of reading process


        """
        return _IGESData.IGESData_ParamReader_EndAll(self, *args)


    def NbParams(self, *args):
        """
        NbParams(IGESData_ParamReader self) -> Standard_Integer

        returns number of parameters (minus the first one)
        following method skip the first parameter (1 gives the 2nd)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamReader_NbParams(self, *args)


    def ParamType(self, *args):
        """
        ParamType(IGESData_ParamReader self, Standard_Integer const num) -> Interface_ParamType

        returns type of parameter; note that "Ident" or "Sub" cannot
        be encountered, they correspond to "Integer", see also below

        :type num: int
        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _IGESData.IGESData_ParamReader_ParamType(self, *args)


    def ParamValue(self, *args):
        """
        ParamValue(IGESData_ParamReader self, Standard_Integer const num) -> Standard_CString

        returns litteral value of a parameter, as it was in file

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_ParamReader_ParamValue(self, *args)


    def IsParamDefined(self, *args):
        """
        IsParamDefined(IGESData_ParamReader self, Standard_Integer const num) -> Standard_Boolean

        says if a parameter is defined (not void)
        See also DefinedElseSkip

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_IsParamDefined(self, *args)


    def IsParamEntity(self, *args):
        """
        IsParamEntity(IGESData_ParamReader self, Standard_Integer const num) -> Standard_Boolean

        says if a parameter can be regarded as an entity reference
        (see Prepare from IGESReaderData for more explanation)
        Note that such a parameter can seen as be a plain Integer too

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_IsParamEntity(self, *args)


    def ParamNumber(self, *args):
        """
        ParamNumber(IGESData_ParamReader self, Standard_Integer const num) -> Standard_Integer

        returns entity number corresponding to a parameter if there is
        otherwise zero (according criterium IsParamEntity)

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESData.IGESData_ParamReader_ParamNumber(self, *args)


    def ParamEntity(self, *args):
        """
        ParamEntity(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        directly returns entity referenced by a parameter

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESData.IGESData_ParamReader_ParamEntity(self, *args)


    def Current(self, *args):
        """
        Current(IGESData_ParamReader self) -> IGESData_ParamCursor

        Creates a ParamCursor from the Current Number, to read one
        parameter, and to advance Current Number after reading

        :rtype: OCC.wrapper.IGESData.IGESData_ParamCursor

        """
        return _IGESData.IGESData_ParamReader_Current(self, *args)


    def CurrentList(self, *args):
        """
        CurrentList(IGESData_ParamReader self, Standard_Integer const nb, Standard_Integer const size=1) -> IGESData_ParamCursor

        Creates a ParamCursor from the Current Number, to read a list
        of "nb" items, and to advance Current Number after reading
        By default, each item is made of one parameter
        If size is given, it precises the number of params per item

        :type nb: int
        :type size: int
        :rtype: OCC.wrapper.IGESData.IGESData_ParamCursor

        """
        return _IGESData.IGESData_ParamReader_CurrentList(self, *args)


    def DefinedElseSkip(self, *args):
        """
        DefinedElseSkip(IGESData_ParamReader self) -> Standard_Boolean

        Allows to simply process a parameter which can be defaulted.
        Waits on the Current Number a defined parameter or skips it :
        If the parameter <num> is defined, changes nothing and returns True
        Hence, the next reading with current cursor will concern <num>
        If it is void, advances Current Position by one, and returns False
        The next reading will concern <num+1> (except if <num> = NbParams)

        This allows to process Default values as follows (C++) :
        if (PR.DefinedElseSkip()) {
        .. PR.Read... (current parameter);
        } else {
        <current parameter> = default value
        .. nothing else to do with ParamReader
        }
        For Message

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_DefinedElseSkip(self, *args)


    def ReadInteger(self, *args):
        """
        ReadInteger(IGESData_ParamReader self, IGESData_ParamCursor PC) -> Standard_Boolean
        ReadInteger(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess) -> Standard_Boolean

        Reads an Integer value designated by PC
        The method Current designates the current parameter and
        advances the Current Number by one after reading
        Note that if a count (not 1) is given, it is ignored
        If it is not an Integer, fills Check with a Fail (using mess)
        and returns False

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadInteger(self, *args)


    def ReadBoolean(self, *args):
        """
        ReadBoolean(IGESData_ParamReader self, IGESData_ParamCursor PC, Message_Msg amsg, Standard_Boolean const exact) -> Standard_Boolean
        ReadBoolean(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess, Standard_Boolean const exact) -> Standard_Boolean

        Reads a Boolean value from parameter "num"
        A Boolean is given as an Integer value 0 (False) or 1 (True)
        Anyway, an Integer is demanded (else, Check is filled)
        If exact is given True, those precise values are demanded
        Else, Correction is done, as False for 0 or <0, True for >0
        (with a Warning error message, and return is True)
        In case of error (not an Integer, or not 0/1 and exact True),
        Check is filled with a Fail (using mess) and return is False

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: bool
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadBoolean(self, *args)


    def ReadReal(self, *args):
        """
        ReadReal(IGESData_ParamReader self, IGESData_ParamCursor PC) -> Standard_Boolean
        ReadReal(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess) -> Standard_Boolean

        Reads a Real value from parameter "num"
        An Integer is accepted (Check is filled with a Warning
        message) and causes return to be True (as normal case)
        In other cases, Check is filled with a Fail and return is False

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadReal(self, *args)


    def ReadXY(self, *args):
        """
        ReadXY(IGESData_ParamReader self, IGESData_ParamCursor PC, Message_Msg amsg, gp_XY val) -> Standard_Boolean
        ReadXY(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess, gp_XY val) -> Standard_Boolean

        Reads a couple of Real values (X,Y) from parameter "num"
        Integers are accepted (Check is filled with a Warning
        message) and cause return to be True (as normal case)
        In other cases, Check is filled with a Fail and return is False

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.gp.gp_XY
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadXY(self, *args)


    def ReadXYZ(self, *args):
        """
        ReadXYZ(IGESData_ParamReader self, IGESData_ParamCursor PC, Message_Msg amsg, gp_XYZ val) -> Standard_Boolean
        ReadXYZ(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess, gp_XYZ val) -> Standard_Boolean

        Reads a triplet of Real values (X,Y,Z) from parameter "num"
        Integers are accepted (Check is filled with a Warning
        message) and cause return to be True (as normal case)
        In other cases, Check is filled with a Fail and return is False
        For Message

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadXYZ(self, *args)


    def ReadText(self, *args):
        """
        ReadText(IGESData_ParamReader self, IGESData_ParamCursor PC, Message_Msg amsg, Handle_TCollection_HAsciiString val) -> Standard_Boolean
        ReadText(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess, Handle_TCollection_HAsciiString val) -> Standard_Boolean

        Reads a Text value from parameter "num", as a String from
        Collection, that is, Hollerith text without leading "nnnH"
        If it is not a String, fills Check with a Fail (using mess)
        and returns False

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadText(self, *args)


    def ReadEntity(self, *args):
        """
        ReadEntity(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, IGESData_ParamCursor PC, Handle_IGESData_IGESEntity val, Standard_Boolean const canbenul) -> Standard_Boolean
        ReadEntity(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, IGESData_ParamCursor PC, Standard_CString const mess, Handle_IGESData_IGESEntity val, Standard_Boolean const canbenul) -> Standard_Boolean
        ReadEntity(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, IGESData_ParamCursor PC, Handle_Standard_Type type, Handle_IGESData_IGESEntity val, Standard_Boolean const canbenul) -> Standard_Boolean
        ReadEntity(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, IGESData_ParamCursor PC, Standard_CString const mess, Handle_Standard_Type type, Handle_IGESData_IGESEntity val, Standard_Boolean const canbenul) -> Standard_Boolean

        Works as ReadEntity without Type, but in addition checks the
        Type of the Entity, which must be "kind of" a given <type>
        Then, gives the same fail cases as ReadEntity without Type,
        plus the case "Incorrect Type"
        (in such a case, returns False and givel <val> = Null)

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type type: OCC.wrapper.Standard.Handle_Standard_Type
        :type val: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type canbenul: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadEntity(self, *args)


    def ReadInts(self, *args):
        """
        ReadInts(IGESData_ParamReader self, IGESData_ParamCursor PC, Message_Msg amsg, Handle_TColStd_HArray1OfInteger val, Standard_Integer const index=1) -> Standard_Boolean
        ReadInts(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess, Handle_TColStd_HArray1OfInteger val, Standard_Integer const index=1) -> Standard_Boolean

        Reads a list of Integer values, defined by PC (with a count of
        parameters). PC can start from Current Number and command it
        to advance after reading (use method CurrentList to do this)
        The list is given as a HArray1, numered from "index"
        If all params are not Integer, Check is filled (using mess)
        and return value is False

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadInts(self, *args)


    def ReadReals(self, *args):
        """
        ReadReals(IGESData_ParamReader self, IGESData_ParamCursor PC, Message_Msg amsg, Handle_TColStd_HArray1OfReal val, Standard_Integer const index=1) -> Standard_Boolean
        ReadReals(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess, Handle_TColStd_HArray1OfReal val, Standard_Integer const index=1) -> Standard_Boolean

        Reads a list of Real values defined by PC
        Same conditions as for ReadInts, for PC and index
        An Integer parameter is accepted, if at least one parameter is
        Integer, Check is filled with a "Warning" message
        If all params are neither Real nor Integer, Check is filled
        (using mess) and return value is False

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadReals(self, *args)


    def ReadTexts(self, *args):
        """
        ReadTexts(IGESData_ParamReader self, IGESData_ParamCursor PC, Message_Msg amsg, Handle_Interface_HArray1OfHAsciiString val, Standard_Integer const index=1) -> Standard_Boolean
        ReadTexts(IGESData_ParamReader self, IGESData_ParamCursor PC, Standard_CString const mess, Handle_Interface_HArray1OfHAsciiString val, Standard_Integer const index=1) -> Standard_Boolean

        Reads a list of Hollerith Texts, defined by PC
        Texts are read as Hollerith texts without leading "nnnH"
        Same conditions as for ReadInts, for PC and index
        If all params are not Text, Check is filled (using mess)
        and return value is False

        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadTexts(self, *args)


    def ReadEnts(self, *args):
        """
        ReadEnts(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, IGESData_ParamCursor PC, Message_Msg amsg, Handle_IGESData_HArray1OfIGESEntity val, Standard_Integer const index=1) -> Standard_Boolean
        ReadEnts(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, IGESData_ParamCursor PC, Standard_CString const mess, Handle_IGESData_HArray1OfIGESEntity val, Standard_Integer const index=1) -> Standard_Boolean

        Reads a list of Entities defined by PC
        Same conditions as for ReadInts, for PC and index
        The list is given as a HArray1, numered from "index"
        If all params cannot be read as Entities, Check is filled
        (using mess) and return value is False
        Remark : Null references are accepted, they are ignored
        (negative pointers too : they provoke a Warning message)
        If the caller wants to check them, a loop on ReadEntity should
        be used

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadEnts(self, *args)


    def ReadEntList(self, *args):
        """
        ReadEntList(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, IGESData_ParamCursor PC, Message_Msg amsg, Interface_EntityList val, Standard_Boolean const ord) -> Standard_Boolean
        ReadEntList(IGESData_ParamReader self, Handle_IGESData_IGESReaderData IR, IGESData_ParamCursor PC, Standard_CString const mess, Interface_EntityList val, Standard_Boolean const ord) -> Standard_Boolean

        Reads a list of Entities defined by PC
        Same conditions as for ReadEnts, for PC
        The list is given as an EntityList
        (index has no meaning; the EntityList starts from clear)
        If "ord" is given True (default), entities will be added to
        the list in their original order
        Remark : Negative or Null Pointers are ignored
        Else ("ord" False), order is not garanteed (faster mode)
        If all params cannot be read as Entities, same as above
        Warning  Give "ord" to False ONLY if order is not significant

        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PC: OCC.wrapper.IGESData.IGESData_ParamCursor
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Interface.Interface_EntityList
        :type ord: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadEntList(self, *args)


    def ReadingReal(self, *args):
        """
        ReadingReal(IGESData_ParamReader self, Standard_Integer const num) -> Standard_Boolean
        ReadingReal(IGESData_ParamReader self, Standard_Integer const num, Standard_CString const mess) -> Standard_Boolean

        Routine which reads a Real parameter, given its number
        Same conditions as ReadReal for mess, val, and return value

        :type num: int
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadingReal(self, *args)


    def ReadingEntityNumber(self, *args):
        """
        ReadingEntityNumber(IGESData_ParamReader self, Standard_Integer const num) -> Standard_Boolean
        ReadingEntityNumber(IGESData_ParamReader self, Standard_Integer const num, Standard_CString const mess) -> Standard_Boolean

        Routine which reads an Entity Number (which allows to read the
        Entity in the IGESReaderData by BoundEntity), given its number
        in the list of Parameters
        Same conditions as ReadEntity for mess, val, and return value
        In particular, returns True and val to zero means Null Entity,
        and val not zero means Entity read by BoundEntity

        :type num: int
        :type mess: OCC.wrapper.Standard.Standard_CString
        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_ReadingEntityNumber(self, *args)


    def SendFail(self, *args):
        """
        SendFail(IGESData_ParamReader self, Message_Msg amsg)

        :type amsg: OCC.wrapper.Message.Message_Msg

        """
        return _IGESData.IGESData_ParamReader_SendFail(self, *args)


    def SendWarning(self, *args):
        """
        SendWarning(IGESData_ParamReader self, Message_Msg amsg)

        :type amsg: OCC.wrapper.Message.Message_Msg

        """
        return _IGESData.IGESData_ParamReader_SendWarning(self, *args)


    def AddFail(self, *args):
        """
        AddFail(IGESData_ParamReader self, Standard_CString const afail, Standard_CString const bfail)
        AddFail(IGESData_ParamReader self, Handle_TCollection_HAsciiString af, Handle_TCollection_HAsciiString bf)

        feeds the Check with a new fail (as a String or as a CString)

        :type af: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type bf: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_ParamReader_AddFail(self, *args)


    def AddWarning(self, *args):
        """
        AddWarning(IGESData_ParamReader self, Standard_CString const awarn, Standard_CString const bwarn)
        AddWarning(IGESData_ParamReader self, Handle_TCollection_HAsciiString aw, Handle_TCollection_HAsciiString bw)

        feeds the Check with a new Warning message

        :type aw: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type bw: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESData.IGESData_ParamReader_AddWarning(self, *args)


    def Mend(self, *args):
        """
        Mend(IGESData_ParamReader self, Standard_CString const pref)

        :type pref: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESData.IGESData_ParamReader_Mend(self, *args)


    def HasFailed(self, *args):
        """
        HasFailed(IGESData_ParamReader self) -> Standard_Boolean

        says if fails have been recorded into the Check

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_HasFailed(self, *args)


    def Check(self, *args):
        """
        returns the Check
        Note that any error signaled above is also recorded into it

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        res = _IGESData.IGESData_ParamReader_Check(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CCheck(self, *args):
        """
        CCheck(IGESData_ParamReader self) -> Handle_Interface_Check

        returns the check in a way which allows to work on it directly
        (i.e. messages added to the Check are added to ParamReader too)

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESData.IGESData_ParamReader_CCheck(self, *args)


    def IsCheckEmpty(self, *args):
        """
        IsCheckEmpty(IGESData_ParamReader self) -> Standard_Boolean

        Returns True if the Check is Empty
        Else, it has to be recorded with the Read Entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESData.IGESData_ParamReader_IsCheckEmpty(self, *args)

    __swig_destroy__ = _IGESData.delete_IGESData_ParamReader
IGESData_ParamReader_swigregister = _IGESData.IGESData_ParamReader_swigregister
IGESData_ParamReader_swigregister(IGESData_ParamReader)



