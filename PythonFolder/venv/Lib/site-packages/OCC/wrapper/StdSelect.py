# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StdSelect')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StdSelect')
    _StdSelect = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StdSelect', [dirname(__file__)])
        except ImportError:
            import _StdSelect
            return _StdSelect
        try:
            _mod = imp.load_module('_StdSelect', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StdSelect = swig_import_helper()
    del swig_import_helper
else:
    import _StdSelect
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StdSelect.delete_SwigPyIterator

    def value(self):
        return _StdSelect.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StdSelect.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StdSelect.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StdSelect.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StdSelect.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StdSelect.SwigPyIterator_copy(self)

    def next(self):
        return _StdSelect.SwigPyIterator_next(self)

    def __next__(self):
        return _StdSelect.SwigPyIterator___next__(self)

    def previous(self):
        return _StdSelect.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StdSelect.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StdSelect.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StdSelect.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StdSelect.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StdSelect.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StdSelect.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StdSelect.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StdSelect.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdSelect.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StdSelect.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StdSelect.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdSelect.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdSelect.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StdSelect.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StdSelect.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StdSelect.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdSelect.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StdSelect.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StdSelect.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdSelect.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdSelect.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StdSelect.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StdSelect.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StdSelect.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StdSelect.ptr_to_number(item)
ptr_to_number = _StdSelect.ptr_to_number

def HashCode(*args):
    return _StdSelect.HashCode(*args)
HashCode = _StdSelect.HashCode

def ptr_equal(a, b):
    return _StdSelect.ptr_equal(a, b)
ptr_equal = _StdSelect.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
StdSelect_DM_Wireframe = _StdSelect.StdSelect_DM_Wireframe
StdSelect_DM_Shading = _StdSelect.StdSelect_DM_Shading
StdSelect_DM_HLR = _StdSelect.StdSelect_DM_HLR
StdSelect_AnyEdge = _StdSelect.StdSelect_AnyEdge
StdSelect_Line = _StdSelect.StdSelect_Line
StdSelect_Circle = _StdSelect.StdSelect_Circle
StdSelect_AnyFace = _StdSelect.StdSelect_AnyFace
StdSelect_Plane = _StdSelect.StdSelect_Plane
StdSelect_Cylinder = _StdSelect.StdSelect_Cylinder
StdSelect_Sphere = _StdSelect.StdSelect_Sphere
StdSelect_Torus = _StdSelect.StdSelect_Torus
StdSelect_Revol = _StdSelect.StdSelect_Revol
StdSelect_Cone = _StdSelect.StdSelect_Cone
StdSelect_SM_WINDOW = _StdSelect.StdSelect_SM_WINDOW
StdSelect_SM_VIEW = _StdSelect.StdSelect_SM_VIEW
StdSelect_TOR_SIMPLE = _StdSelect.StdSelect_TOR_SIMPLE
StdSelect_TOR_MULTIPLE = _StdSelect.StdSelect_TOR_MULTIPLE
StdSelect_TypeOfSelectionImage_NormalizedDepth = _StdSelect.StdSelect_TypeOfSelectionImage_NormalizedDepth
StdSelect_TypeOfSelectionImage_NormalizedDepthInverted = _StdSelect.StdSelect_TypeOfSelectionImage_NormalizedDepthInverted
StdSelect_TypeOfSelectionImage_UnnormalizedDepth = _StdSelect.StdSelect_TypeOfSelectionImage_UnnormalizedDepth
StdSelect_TypeOfSelectionImage_ColoredDetectedObject = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredDetectedObject
StdSelect_TypeOfSelectionImage_ColoredEntity = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredEntity
StdSelect_TypeOfSelectionImage_ColoredOwner = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredOwner
StdSelect_TypeOfSelectionImage_ColoredSelectionMode = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredSelectionMode
class StdSelect_FaceFilter(SelectMgr.SelectMgr_Filter):
    """
    A framework to define a filter to select a specific type of face.
    The types available include:
    -   any face
    -   a planar face
    -   a cylindrical face
    -   a spherical face
    -   a toroidal face
    -   a revol face.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdSelect_FaceFilter
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdSelect_FaceFilter(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdSelect_FaceFilter self, StdSelect_TypeOfFace const aTypeOfFace) -> StdSelect_FaceFilter

        Constructs a face filter object defined by the type of face aTypeOfFace.

        :type aTypeOfFace: OCC.wrapper.StdSelect.StdSelect_TypeOfFace

        """
        this = _StdSelect.new_StdSelect_FaceFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetType(self, *args):
        """
        SetType(StdSelect_FaceFilter self, StdSelect_TypeOfFace const aNewType)

        Sets the type of face aNewType. aNewType is to be highlighted in selection.

        :type aNewType: OCC.wrapper.StdSelect.StdSelect_TypeOfFace

        """
        return _StdSelect.StdSelect_FaceFilter_SetType(self, *args)


    def Type(self, *args):
        """
        Type(StdSelect_FaceFilter self) -> StdSelect_TypeOfFace

        Returns the type of face to be highlighted in selection.

        :rtype: OCC.wrapper.StdSelect.StdSelect_TypeOfFace

        """
        return _StdSelect.StdSelect_FaceFilter_Type(self, *args)


    def IsOk(self, *args):
        """
        IsOk(StdSelect_FaceFilter self, Handle_SelectMgr_EntityOwner anobj) -> Standard_Boolean

        :type anobj: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_FaceFilter_IsOk(self, *args)


    def ActsOn(self, *args):
        """
        ActsOn(StdSelect_FaceFilter self, TopAbs_ShapeEnum const aStandardMode) -> Standard_Boolean

        :type aStandardMode: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_FaceFilter_ActsOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdSelect.StdSelect_FaceFilter_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdSelect.StdSelect_FaceFilter_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.StdSelect_FaceFilter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdSelect.delete_StdSelect_FaceFilter
StdSelect_FaceFilter_swigregister = _StdSelect.StdSelect_FaceFilter_swigregister
StdSelect_FaceFilter_swigregister(StdSelect_FaceFilter)

def StdSelect_FaceFilter_get_type_name(*args):
    """
    StdSelect_FaceFilter_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdSelect.StdSelect_FaceFilter_get_type_name(*args)

def StdSelect_FaceFilter_get_type_descriptor(*args):
    """
    StdSelect_FaceFilter_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdSelect.StdSelect_FaceFilter_get_type_descriptor(*args)

class StdSelect_BRepOwner(SelectMgr.SelectMgr_EntityOwner):
    """
    Defines Specific Owners for Sensitive Primitives
    (Sensitive Segments,Circles...).
    Used in Dynamic Selection Mechanism.
    A BRepOwner has an Owner (the shape it represents)
    and Users (One or More Transient entities).
    The highlight-unhighlight methods are empty and
    must be redefined by each User.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdSelect_BRepOwner
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdSelect_BRepOwner(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdSelect.StdSelect_BRepOwner_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdSelect.StdSelect_BRepOwner_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.StdSelect_BRepOwner_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(StdSelect_BRepOwner self, Standard_Integer const aPriority) -> StdSelect_BRepOwner
        __init__(StdSelect_BRepOwner self, TopoDS_Shape aShape, Standard_Integer const aPriority=0, Standard_Boolean const ComesFromDecomposition) -> StdSelect_BRepOwner
        __init__(StdSelect_BRepOwner self, TopoDS_Shape aShape, Handle_SelectMgr_SelectableObject theOrigin, Standard_Integer const aPriority=0, Standard_Boolean const FromDecomposition) -> StdSelect_BRepOwner

        Constructs an owner specification framework defined
        by the shape aShape, the selectable object theOrigin
        and the priority aPriority.
        aShape, theOrigin and aPriority are stored in this
        framework. If more than one owner are detected
        during dynamic selection, the one with the highest
        priority is the one stored.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theOrigin: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :type aPriority: int
        :type FromDecomposition: bool

        """
        this = _StdSelect.new_StdSelect_BRepOwner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasShape(self, *args):
        """
        HasShape(StdSelect_BRepOwner self) -> Standard_Boolean

        returns False if no shape was set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_BRepOwner_HasShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _StdSelect.StdSelect_BRepOwner_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasHilightMode(self, *args):
        """
        HasHilightMode(StdSelect_BRepOwner self) -> Standard_Boolean

        Returns true if this framework has a highlight mode defined for it.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_BRepOwner_HasHilightMode(self, *args)


    def SetHilightMode(self, *args):
        """
        SetHilightMode(StdSelect_BRepOwner self, Standard_Integer const theMode)

        Sets the highlight mode for this framework.
        This defines the type of display used to highlight the
        owner of the shape when it is detected by the selector.
        The default type of display is wireframe, defined by the index 0.

        :type theMode: int

        """
        return _StdSelect.StdSelect_BRepOwner_SetHilightMode(self, *args)


    def ResetHilightMode(self, *args):
        """
        ResetHilightMode(StdSelect_BRepOwner self)

        Resets the higlight mode for this framework.
        This defines the type of display used to highlight the
        owner of the shape when it is detected by the selector.
        The default type of display is wireframe, defined by the index 0.


        """
        return _StdSelect.StdSelect_BRepOwner_ResetHilightMode(self, *args)


    def HilightMode(self, *args):
        """
        HilightMode(StdSelect_BRepOwner self) -> Standard_Integer

        Returns the highlight mode for this framework.
        This defines the type of display used to highlight the
        owner of the shape when it is detected by the selector.
        The default type of display is wireframe, defined by the index 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.StdSelect_BRepOwner_HilightMode(self, *args)


    def IsHilighted(self, *args):
        """
        IsHilighted(StdSelect_BRepOwner self, Handle_PrsMgr_PresentationManager aPM, Standard_Integer const aMode=0) -> Standard_Boolean

        Returns true if an object with the selection mode
        aMode is highlighted in the presentation manager aPM.

        :type aPM: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentationManager
        :type aMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_BRepOwner_IsHilighted(self, *args)


    def HilightWithColor(self, *args):
        """
        HilightWithColor(StdSelect_BRepOwner self, Handle_PrsMgr_PresentationManager thePM, Handle_Prs3d_Drawer theStyle, Standard_Integer const theMode=0)

        :type thePM: OCC.wrapper.StdSelect.Handle_PrsMgr_PresentationManager3d
        :type theStyle: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type theMode: int

        """
        return _StdSelect.StdSelect_BRepOwner_HilightWithColor(self, *args)


    def Unhilight(self, *args):
        """
        Unhilight(StdSelect_BRepOwner self, Handle_PrsMgr_PresentationManager aPM, Standard_Integer const aMode=0)

        Removes highlighting from the type of shape
        identified the selection mode aMode in the presentation manager aPM.

        :type aPM: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentationManager
        :type aMode: int

        """
        return _StdSelect.StdSelect_BRepOwner_Unhilight(self, *args)


    def Clear(self, *args):
        """
        Clear(StdSelect_BRepOwner self, Handle_PrsMgr_PresentationManager aPM, Standard_Integer const aMode=0)

        Clears the presentation manager object aPM of all
        shapes with the selection mode aMode.

        :type aPM: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentationManager
        :type aMode: int

        """
        return _StdSelect.StdSelect_BRepOwner_Clear(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(StdSelect_BRepOwner self, TopLoc_Location aLoc)

        :type aLoc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _StdSelect.StdSelect_BRepOwner_SetLocation(self, *args)


    def ResetLocation(self, *args):
        """ResetLocation(StdSelect_BRepOwner self)"""
        return _StdSelect.StdSelect_BRepOwner_ResetLocation(self, *args)


    def UpdateHighlightTrsf(self, *args):
        """
        UpdateHighlightTrsf(StdSelect_BRepOwner self, Handle_V3d_Viewer theViewer, Handle_PrsMgr_PresentationManager theManager, Standard_Integer const theDispMode)

        Implements immediate application of location transformation of parent object to dynamic highlight structure

        :type theViewer: OCC.wrapper.V3d.Handle_V3d_Viewer
        :type theManager: OCC.wrapper.StdSelect.Handle_PrsMgr_PresentationManager3d
        :type theDispMode: int

        """
        return _StdSelect.StdSelect_BRepOwner_UpdateHighlightTrsf(self, *args)


    def Set(self, arg2):
        return _StdSelect.StdSelect_BRepOwner_Set(self, arg2)
    __swig_destroy__ = _StdSelect.delete_StdSelect_BRepOwner
StdSelect_BRepOwner_swigregister = _StdSelect.StdSelect_BRepOwner_swigregister
StdSelect_BRepOwner_swigregister(StdSelect_BRepOwner)

def StdSelect_BRepOwner_get_type_name(*args):
    """
    StdSelect_BRepOwner_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdSelect.StdSelect_BRepOwner_get_type_name(*args)

def StdSelect_BRepOwner_get_type_descriptor(*args):
    """
    StdSelect_BRepOwner_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdSelect.StdSelect_BRepOwner_get_type_descriptor(*args)

class StdSelect_ViewerSelector3d(SelectMgr.SelectMgr_ViewerSelector):
    """Selector Usable by Viewers from V3d"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdSelect_ViewerSelector3d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdSelect_ViewerSelector3d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdSelect_ViewerSelector3d self) -> StdSelect_ViewerSelector3d

        Constructs an empty 3D selector object.


        """
        this = _StdSelect.new_StdSelect_ViewerSelector3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetPixelTolerance(self, *args):
        """
        SetPixelTolerance(StdSelect_ViewerSelector3d self, Standard_Integer const theTolerance)

        Sets the pixel tolerance <theTolerance>.

        :type theTolerance: int

        """
        return _StdSelect.StdSelect_ViewerSelector3d_SetPixelTolerance(self, *args)


    def PixelTolerance(self, *args):
        """
        PixelTolerance(StdSelect_ViewerSelector3d self) -> Standard_Integer

        Returns the pixel tolerance.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.StdSelect_ViewerSelector3d_PixelTolerance(self, *args)


    def Pick(self, *args):
        """
        Pick(StdSelect_ViewerSelector3d self, Standard_Integer const theXPix, Standard_Integer const theYPix, Handle_V3d_View theView)
        Pick(StdSelect_ViewerSelector3d self, Standard_Integer const theXPMin, Standard_Integer const theYPMin, Standard_Integer const theXPMax, Standard_Integer const theYPMax, Handle_V3d_View theView)
        Pick(StdSelect_ViewerSelector3d self, NCollection_Array1_gp_Pnt2d thePolyline, Handle_V3d_View theView)

        pick action - input pixel values for polyline selection for selection.

        :type thePolyline: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d
        :type theView: OCC.wrapper.V3d.Handle_V3d_View

        """
        return _StdSelect.StdSelect_ViewerSelector3d_Pick(self, *args)


    def ToPixMap(self, *args):
        """
        ToPixMap(StdSelect_ViewerSelector3d self, Image_PixMap theImage, Handle_V3d_View theView, StdSelect_TypeOfSelectionImage const theType, Standard_Integer const thePickedIndex=1) -> Standard_Boolean

        Dump of detection results into image.
        This method performs axis picking for each pixel in the image
        and generates a color depending on picking results and selection image type.
        @param theImage       result image, should be initialized
        @param theView        3D view defining camera position
        @param theType        type of image to define
        @param thePickedIndex index of picked entity (1 means topmost)

        :type theImage: OCC.wrapper.Image.Image_PixMap
        :type theView: OCC.wrapper.V3d.Handle_V3d_View
        :type theType: OCC.wrapper.StdSelect.StdSelect_TypeOfSelectionImage
        :type thePickedIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_ViewerSelector3d_ToPixMap(self, *args)


    def ClearSensitive(self, *args):
        """
        ClearSensitive(StdSelect_ViewerSelector3d self, Handle_V3d_View theView)

        :type theView: OCC.wrapper.V3d.Handle_V3d_View

        """
        return _StdSelect.StdSelect_ViewerSelector3d_ClearSensitive(self, *args)


    def DisplaySensitive(self, *args):
        """
        DisplaySensitive(StdSelect_ViewerSelector3d self, Handle_V3d_View theView)
        DisplaySensitive(StdSelect_ViewerSelector3d self, Handle_SelectMgr_Selection theSel, gp_Trsf theTrsf, Handle_V3d_View theView, Standard_Boolean const theToClearOthers)

        :type theSel: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :type theView: OCC.wrapper.V3d.Handle_V3d_View
        :type theToClearOthers: bool

        """
        return _StdSelect.StdSelect_ViewerSelector3d_DisplaySensitive(self, *args)


    def HasDepthClipping(self, *args):
        """
        HasDepthClipping(StdSelect_ViewerSelector3d self, Handle_SelectMgr_EntityOwner theOwner) -> Standard_Boolean

        :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_ViewerSelector3d_HasDepthClipping(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdSelect.StdSelect_ViewerSelector3d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdSelect.StdSelect_ViewerSelector3d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.StdSelect_ViewerSelector3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdSelect.delete_StdSelect_ViewerSelector3d
StdSelect_ViewerSelector3d_swigregister = _StdSelect.StdSelect_ViewerSelector3d_swigregister
StdSelect_ViewerSelector3d_swigregister(StdSelect_ViewerSelector3d)

def StdSelect_ViewerSelector3d_get_type_name(*args):
    """
    StdSelect_ViewerSelector3d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdSelect.StdSelect_ViewerSelector3d_get_type_name(*args)

def StdSelect_ViewerSelector3d_get_type_descriptor(*args):
    """
    StdSelect_ViewerSelector3d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdSelect.StdSelect_ViewerSelector3d_get_type_descriptor(*args)

class Handle_StdSelect_ViewerSelector3d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdSelect_ViewerSelector3d self)

        Nullify the handle


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdSelect_ViewerSelector3d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdSelect_ViewerSelector3d self, StdSelect_ViewerSelector3d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdSelect_ViewerSelector3d self, Handle_StdSelect_ViewerSelector3d theHandle) -> Handle_StdSelect_ViewerSelector3d
        assign(Handle_StdSelect_ViewerSelector3d self, StdSelect_ViewerSelector3d thePtr) -> Handle_StdSelect_ViewerSelector3d
        assign(Handle_StdSelect_ViewerSelector3d self, Handle_StdSelect_ViewerSelector3d theHandle) -> Handle_StdSelect_ViewerSelector3d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdSelect_ViewerSelector3d self) -> StdSelect_ViewerSelector3d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdSelect_ViewerSelector3d self) -> StdSelect_ViewerSelector3d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdSelect_ViewerSelector3d self) -> StdSelect_ViewerSelector3d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d___ref__(self, *args)


    def __hash__(self):
        return _StdSelect.Handle_StdSelect_ViewerSelector3d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdSelect.Handle_StdSelect_ViewerSelector3d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdSelect.new_Handle_StdSelect_ViewerSelector3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdSelect.Handle_StdSelect_ViewerSelector3d_DownCast)
    __swig_destroy__ = _StdSelect.delete_Handle_StdSelect_ViewerSelector3d

    def SetPixelTolerance(self, *args):
        """
        SetPixelTolerance(Handle_StdSelect_ViewerSelector3d self, Standard_Integer const theTolerance)

        Sets the pixel tolerance <theTolerance>.

        :type theTolerance: int

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_SetPixelTolerance(self, *args)


    def PixelTolerance(self, *args):
        """
        PixelTolerance(Handle_StdSelect_ViewerSelector3d self) -> Standard_Integer

        Returns the pixel tolerance.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_PixelTolerance(self, *args)


    def Pick(self, *args):
        """
        Pick(Handle_StdSelect_ViewerSelector3d self, Standard_Integer const theXPix, Standard_Integer const theYPix, Handle_V3d_View theView)
        Pick(Handle_StdSelect_ViewerSelector3d self, Standard_Integer const theXPMin, Standard_Integer const theYPMin, Standard_Integer const theXPMax, Standard_Integer const theYPMax, Handle_V3d_View theView)
        Pick(Handle_StdSelect_ViewerSelector3d self, NCollection_Array1_gp_Pnt2d thePolyline, Handle_V3d_View theView)

        pick action - input pixel values for polyline selection for selection.

        :type thePolyline: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d
        :type theView: OCC.wrapper.V3d.Handle_V3d_View

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Pick(self, *args)


    def ToPixMap(self, *args):
        """
        ToPixMap(Handle_StdSelect_ViewerSelector3d self, Image_PixMap theImage, Handle_V3d_View theView, StdSelect_TypeOfSelectionImage const theType, Standard_Integer const thePickedIndex=1) -> Standard_Boolean

        Dump of detection results into image.
        This method performs axis picking for each pixel in the image
        and generates a color depending on picking results and selection image type.
        @param theImage       result image, should be initialized
        @param theView        3D view defining camera position
        @param theType        type of image to define
        @param thePickedIndex index of picked entity (1 means topmost)

        :type theImage: OCC.wrapper.Image.Image_PixMap
        :type theView: OCC.wrapper.V3d.Handle_V3d_View
        :type theType: OCC.wrapper.StdSelect.StdSelect_TypeOfSelectionImage
        :type thePickedIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_ToPixMap(self, *args)


    def DisplaySensitive(self, *args):
        """
        DisplaySensitive(Handle_StdSelect_ViewerSelector3d self, Handle_V3d_View theView)
        DisplaySensitive(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_Selection theSel, gp_Trsf theTrsf, Handle_V3d_View theView, Standard_Boolean const theToClearOthers)

        :type theSel: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :type theView: OCC.wrapper.V3d.Handle_V3d_View
        :type theToClearOthers: bool

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_DisplaySensitive(self, *args)


    def ClearSensitive(self, *args):
        """
        ClearSensitive(Handle_StdSelect_ViewerSelector3d self, Handle_V3d_View theView)

        :type theView: OCC.wrapper.V3d.Handle_V3d_View

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_ClearSensitive(self, *args)


    def HasDepthClipping(self, *args):
        """
        HasDepthClipping(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_EntityOwner theOwner) -> Standard_Boolean

        :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_HasDepthClipping(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdSelect_ViewerSelector3d self) -> char const *

        :rtype: const char *

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_ViewerSelector3d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_ViewerSelector3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(Handle_StdSelect_ViewerSelector3d self)

        Empties all the tables, removes all selections...


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Clear(self, *args)


    def Sensitivity(self, *args):
        """
        Sensitivity(Handle_StdSelect_ViewerSelector3d self) -> Standard_Real

        returns the Sensitivity of picking

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Sensitivity(self, *args)


    def SortResult(self, *args):
        """
        SortResult(Handle_StdSelect_ViewerSelector3d self)

        Sorts the detected entites by priority and distance.
        to be redefined if other criterion are used...


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_SortResult(self, *args)


    def OnePicked(self, *args):
        """
        OnePicked(Handle_StdSelect_ViewerSelector3d self) -> Handle_SelectMgr_EntityOwner

        Returns the picked element with the highest priority,
        and which is the closest to the last successful mouse position.

        :rtype: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_OnePicked(self, *args)


    def SetPickClosest(self, *args):
        """
        SetPickClosest(Handle_StdSelect_ViewerSelector3d self, Standard_Boolean const theToPreferClosest)

        Set preference of selecting one object for OnePicked() method:
        - If True, objects with less depth (distance fron the view plane) are
        preferred regardless of priority (priority is used then to choose among
        objects with similar depth),
        - If False, objects with higher priority are preferred regardless of the
        depth which is used to choose among objects of the same priority.

        :type theToPreferClosest: bool

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_SetPickClosest(self, *args)


    def NbPicked(self, *args):
        """
        NbPicked(Handle_StdSelect_ViewerSelector3d self) -> Standard_Integer

        Returns the number of detected owners.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_NbPicked(self, *args)


    def ClearPicked(self, *args):
        """
        ClearPicked(Handle_StdSelect_ViewerSelector3d self)

        Clears picking results.


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_ClearPicked(self, *args)


    def Picked(self, *args):
        """
        Picked(Handle_StdSelect_ViewerSelector3d self, Standard_Integer const theRank) -> Handle_SelectMgr_EntityOwner
        Picked(Handle_StdSelect_ViewerSelector3d self) -> Handle_SelectMgr_EntityOwner

        Returns the current selected entity detected by the selector;

        :rtype: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Picked(self, *args)


    def PickedData(self, *args):
        """
        Returns the Entity for the object picked at specified position.
        @param theRank rank of detected object within range 1...NbPicked()

        :type theRank: int
        :rtype: OCC.wrapper.SelectMgr.SelectMgr_SortCriterion

        """
        res = _StdSelect.Handle_StdSelect_ViewerSelector3d_PickedData(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickedEntity(self, *args):
        """
        Returns the Entity for the object picked at specified position.
        @param theRank rank of detected object within range 1...NbPicked()

        :type theRank: int
        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_SensitiveEntity

        """
        res = _StdSelect.Handle_StdSelect_ViewerSelector3d_PickedEntity(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickedPoint(self, *args):
        """
        PickedPoint(Handle_StdSelect_ViewerSelector3d self, Standard_Integer const theRank) -> gp_Pnt

        Returns the 3D point (intersection of picking axis with the object nearest to eye)
        for the object picked at specified position.
        @param theRank rank of detected object within range 1...NbPicked()

        :type theRank: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_PickedPoint(self, *args)


    def Contains(self, *args):
        """
        Contains(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theObject) -> Standard_Boolean

        :type theObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Contains(self, *args)


    def EntitySetBuilder(self, *args):
        """
        EntitySetBuilder(Handle_StdSelect_ViewerSelector3d self) -> Handle_Select3D_BVHBuilder3d

        Returns the default builder used to construct BVH of entity set.

        :rtype: OCC.wrapper.SelectMgr.Handle_Select3D_BVHBuilder3d

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_EntitySetBuilder(self, *args)


    def SetEntitySetBuilder(self, *args):
        """
        SetEntitySetBuilder(Handle_StdSelect_ViewerSelector3d self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the default builder used to construct BVH of entity set.
        The new builder will be also assigned for already defined objects, but computed BVH trees will not be invalidated.

        :type theBuilder: OCC.wrapper.SelectMgr.Handle_Select3D_BVHBuilder3d

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_SetEntitySetBuilder(self, *args)


    def Modes(self, *args):
        """
        Modes(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theSelectableObject, NCollection_List_Standard_Integer theModeList, SelectMgr_StateOfSelection const theWantedState=SelectMgr_SOS_Any) -> Standard_Boolean

        Returns the list of selection modes ModeList found in
        this selector for the selectable object aSelectableObject.
        Returns true if aSelectableObject is referenced inside
        this selector; returns false if the object is not present
        in this selector.

        :type theSelectableObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :type theModeList: OCC.wrapper.TColStd.TColStd_ListOfInteger
        :type theWantedState: OCC.wrapper.SelectMgr.SelectMgr_StateOfSelection
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Modes(self, *args)


    def IsActive(self, *args):
        """
        IsActive(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theSelectableObject, Standard_Integer const theMode) -> Standard_Boolean

        Returns true if the selectable object
        aSelectableObject having the selection mode aMode
        is active in this selector.

        :type theSelectableObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_IsActive(self, *args)


    def IsInside(self, *args):
        """
        IsInside(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theSelectableObject, Standard_Integer const theMode) -> Standard_Boolean

        Returns true if the selectable object
        aSelectableObject having the selection mode aMode
        is in this selector.

        :type theSelectableObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_IsInside(self, *args)


    def Status(self, *args):
        """
        Status(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_Selection theSelection) -> SelectMgr_StateOfSelection
        Status(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theSelectableObject) -> TCollection_AsciiString

        :type theSelectableObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Status(self, *args)


    def ActiveOwners(self, *args):
        """
        ActiveOwners(Handle_StdSelect_ViewerSelector3d self, NCollection_List< opencascade::handle< SelectBasics_EntityOwner > > & theOwners)

        Returns the list of active entity owners

        :type theOwners: OCC.wrapper.SelectMgr.NCollection_List_Handle_SelectBasics_EntityOwner

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_ActiveOwners(self, *args)


    def AddSelectableObject(self, *args):
        """
        AddSelectableObject(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theObject)

        Adds new object to the map of selectable objects

        :type theObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_AddSelectableObject(self, *args)


    def AddSelectionToObject(self, *args):
        """
        AddSelectionToObject(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theObject, Handle_SelectMgr_Selection theSelection)

        Adds new selection to the object and builds its BVH tree

        :type theObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :type theSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_AddSelectionToObject(self, *args)


    def MoveSelectableObject(self, *args):
        """
        MoveSelectableObject(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theObject)

        Moves existing object from set of not transform persistence objects
        to set of transform persistence objects (or vice versa).

        :type theObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_MoveSelectableObject(self, *args)


    def RemoveSelectableObject(self, *args):
        """
        RemoveSelectableObject(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theObject)

        Removes selectable object from map of selectable ones

        :type theObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_RemoveSelectableObject(self, *args)


    def RemoveSelectionOfObject(self, *args):
        """
        RemoveSelectionOfObject(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theObject, Handle_SelectMgr_Selection theSelection)

        Removes selection of the object and marks its BVH tree for rebuild

        :type theObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :type theSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_RemoveSelectionOfObject(self, *args)


    def RebuildObjectsTree(self, *args):
        """
        RebuildObjectsTree(Handle_StdSelect_ViewerSelector3d self, Standard_Boolean const theIsForce)

        Marks BVH of selectable objects for rebuild. Parameter theIsForce set as true
        guarantees that 1st level BVH for the viewer selector will be rebuilt during this call

        :type theIsForce: bool

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_RebuildObjectsTree(self, *args)


    def RebuildSensitivesTree(self, *args):
        """
        RebuildSensitivesTree(Handle_StdSelect_ViewerSelector3d self, Handle_SelectMgr_SelectableObject theObject, Standard_Boolean const theIsForce)

        Marks BVH of sensitive entities of particular selectable object for rebuild. Parameter
        theIsForce set as true guarantees that 2nd level BVH for the object given will be
        rebuilt during this call

        :type theObject: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :type theIsForce: bool

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_RebuildSensitivesTree(self, *args)


    def GetManager(self, *args):
        """
        GetManager(Handle_StdSelect_ViewerSelector3d self) -> SelectMgr_SelectingVolumeManager

        Returns instance of selecting volume manager of the viewer selector

        :rtype: OCC.wrapper.SelectMgr.SelectMgr_SelectingVolumeManager

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_GetManager(self, *args)


    def ResetSelectionActivationStatus(self, *args):
        """
        ResetSelectionActivationStatus(Handle_StdSelect_ViewerSelector3d self)

        Marks all added sensitive entities of all objects as non-selectable


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_ResetSelectionActivationStatus(self, *args)


    def AllowOverlapDetection(self, *args):
        """
        AllowOverlapDetection(Handle_StdSelect_ViewerSelector3d self, Standard_Boolean const theIsToAllow)

        Is used for rectangular selection only
        If theIsToAllow is false, only fully included sensitives will be detected, otherwise the algorithm will
        mark both included and overlapped entities as matched

        :type theIsToAllow: bool

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_AllowOverlapDetection(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StdSelect_ViewerSelector3d self)

        Begins an iteration scanning for the owners detected at a position in the view.


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Init(self, *args)


    def More(self, *args):
        """
        More(Handle_StdSelect_ViewerSelector3d self) -> Standard_Boolean

        Continues the interation scanning for the owners detected at a position in the view,
        or continues the iteration scanning for the owner closest to the position in the view.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_More(self, *args)


    def Next(self, *args):
        """
        Next(Handle_StdSelect_ViewerSelector3d self)

        Returns the next owner found in the iteration. This is
        a scan for the owners detected at a position in the view.


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Next(self, *args)


    def InitDetected(self, *args):
        """
        InitDetected(Handle_StdSelect_ViewerSelector3d self)

        Initializes internal iterator for stored detected sensitive entities


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_InitDetected(self, *args)


    def NextDetected(self, *args):
        """
        NextDetected(Handle_StdSelect_ViewerSelector3d self)

        Makes a step along the map of detected sensitive entities and their owners


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_NextDetected(self, *args)


    def MoreDetected(self, *args):
        """
        MoreDetected(Handle_StdSelect_ViewerSelector3d self) -> Standard_Boolean

        Returns true if iterator of map of detected sensitive entities has reached its end

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_MoreDetected(self, *args)


    def DetectedEntity(self, *args):
        """
        Returns sensitive entity that was detected during the previous run of selection algorithm

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_SensitiveEntity

        """
        res = _StdSelect.Handle_StdSelect_ViewerSelector3d_DetectedEntity(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StdSelect_ViewerSelector3d self)

        Memory deallocator for transient classes


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdSelect_ViewerSelector3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdSelect_ViewerSelector3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdSelect_ViewerSelector3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdSelect_ViewerSelector3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdSelect_ViewerSelector3d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdSelect_ViewerSelector3d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdSelect_ViewerSelector3d self)

        Increments the reference counter of this object


        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdSelect_ViewerSelector3d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_ViewerSelector3d_DecrementRefCounter(self, *args)

Handle_StdSelect_ViewerSelector3d_swigregister = _StdSelect.Handle_StdSelect_ViewerSelector3d_swigregister
Handle_StdSelect_ViewerSelector3d_swigregister(Handle_StdSelect_ViewerSelector3d)

def Handle_StdSelect_ViewerSelector3d_DownCast(thing):
    return _StdSelect.Handle_StdSelect_ViewerSelector3d_DownCast(thing)
Handle_StdSelect_ViewerSelector3d_DownCast = _StdSelect.Handle_StdSelect_ViewerSelector3d_DownCast

class Handle_StdSelect_BRepOwner(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdSelect_BRepOwner self)

        Nullify the handle


        """
        return _StdSelect.Handle_StdSelect_BRepOwner_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdSelect_BRepOwner self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdSelect_BRepOwner self, StdSelect_BRepOwner thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdSelect_BRepOwner self, Handle_StdSelect_BRepOwner theHandle) -> Handle_StdSelect_BRepOwner
        assign(Handle_StdSelect_BRepOwner self, StdSelect_BRepOwner thePtr) -> Handle_StdSelect_BRepOwner
        assign(Handle_StdSelect_BRepOwner self, Handle_StdSelect_BRepOwner theHandle) -> Handle_StdSelect_BRepOwner

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdSelect_BRepOwner self) -> StdSelect_BRepOwner

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdSelect_BRepOwner self) -> StdSelect_BRepOwner

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_BRepOwner___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdSelect_BRepOwner self) -> StdSelect_BRepOwner

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdSelect.Handle_StdSelect_BRepOwner___ref__(self, *args)


    def __hash__(self):
        return _StdSelect.Handle_StdSelect_BRepOwner___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdSelect.Handle_StdSelect_BRepOwner___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdSelect.new_Handle_StdSelect_BRepOwner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdSelect.Handle_StdSelect_BRepOwner_DownCast)
    __swig_destroy__ = _StdSelect.delete_Handle_StdSelect_BRepOwner

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdSelect_BRepOwner self) -> char const *

        :rtype: const char *

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_BRepOwner_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_BRepOwner_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasShape(self, *args):
        """
        HasShape(Handle_StdSelect_BRepOwner self) -> Standard_Boolean

        returns False if no shape was set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_HasShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _StdSelect.Handle_StdSelect_BRepOwner_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasHilightMode(self, *args):
        """
        HasHilightMode(Handle_StdSelect_BRepOwner self) -> Standard_Boolean

        Returns true if this framework has a highlight mode defined for it.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_HasHilightMode(self, *args)


    def SetHilightMode(self, *args):
        """
        SetHilightMode(Handle_StdSelect_BRepOwner self, Standard_Integer const theMode)

        Sets the highlight mode for this framework.
        This defines the type of display used to highlight the
        owner of the shape when it is detected by the selector.
        The default type of display is wireframe, defined by the index 0.

        :type theMode: int

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_SetHilightMode(self, *args)


    def ResetHilightMode(self, *args):
        """
        ResetHilightMode(Handle_StdSelect_BRepOwner self)

        Resets the higlight mode for this framework.
        This defines the type of display used to highlight the
        owner of the shape when it is detected by the selector.
        The default type of display is wireframe, defined by the index 0.


        """
        return _StdSelect.Handle_StdSelect_BRepOwner_ResetHilightMode(self, *args)


    def HilightMode(self, *args):
        """
        HilightMode(Handle_StdSelect_BRepOwner self) -> Standard_Integer

        Returns the highlight mode for this framework.
        This defines the type of display used to highlight the
        owner of the shape when it is detected by the selector.
        The default type of display is wireframe, defined by the index 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_HilightMode(self, *args)


    def IsHilighted(self, *args):
        """
        IsHilighted(Handle_StdSelect_BRepOwner self, Handle_PrsMgr_PresentationManager aPM, Standard_Integer const aMode=0) -> Standard_Boolean

        Returns true if an object with the selection mode
        aMode is highlighted in the presentation manager aPM.

        :type aPM: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentationManager
        :type aMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IsHilighted(self, *args)


    def HilightWithColor(self, *args):
        """
        HilightWithColor(Handle_StdSelect_BRepOwner self, Handle_PrsMgr_PresentationManager thePM, Handle_Prs3d_Drawer theStyle, Standard_Integer const theMode=0)

        :type thePM: OCC.wrapper.StdSelect.Handle_PrsMgr_PresentationManager3d
        :type theStyle: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type theMode: int

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_HilightWithColor(self, *args)


    def Unhilight(self, *args):
        """
        Unhilight(Handle_StdSelect_BRepOwner self, Handle_PrsMgr_PresentationManager aPM, Standard_Integer const aMode=0)

        Removes highlighting from the type of shape
        identified the selection mode aMode in the presentation manager aPM.

        :type aPM: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentationManager
        :type aMode: int

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_Unhilight(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_StdSelect_BRepOwner self, Handle_PrsMgr_PresentationManager aPM, Standard_Integer const aMode=0)

        Clears the presentation manager object aPM of all
        shapes with the selection mode aMode.

        :type aPM: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentationManager
        :type aMode: int

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_Clear(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(Handle_StdSelect_BRepOwner self, TopLoc_Location aLoc)

        :type aLoc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_SetLocation(self, *args)


    def ResetLocation(self, *args):
        """ResetLocation(Handle_StdSelect_BRepOwner self)"""
        return _StdSelect.Handle_StdSelect_BRepOwner_ResetLocation(self, *args)


    def UpdateHighlightTrsf(self, *args):
        """
        UpdateHighlightTrsf(Handle_StdSelect_BRepOwner self, Handle_V3d_Viewer theViewer, Handle_PrsMgr_PresentationManager theManager, Standard_Integer const theDispMode)

        Implements immediate application of location transformation of parent object to dynamic highlight structure

        :type theViewer: OCC.wrapper.V3d.Handle_V3d_Viewer
        :type theManager: OCC.wrapper.StdSelect.Handle_PrsMgr_PresentationManager3d
        :type theDispMode: int

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_UpdateHighlightTrsf(self, *args)


    def Set(self, arg2):
        return _StdSelect.Handle_StdSelect_BRepOwner_Set(self, arg2)

    def HasSelectable(self, *args):
        """
        HasSelectable(Handle_StdSelect_BRepOwner self) -> Standard_Boolean

        Returns true if there is a selectable object to serve as an owner.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_HasSelectable(self, *args)


    def Selectable(self, *args):
        """
        Selectable(Handle_StdSelect_BRepOwner self) -> Handle_SelectMgr_SelectableObject

        Returns a selectable object detected in the working context.

        :rtype: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_Selectable(self, *args)


    def SetSelectable(self, *args):
        """
        SetSelectable(Handle_StdSelect_BRepOwner self, Handle_SelectMgr_SelectableObject theSelObj)

        Sets the selectable object.

        :type theSelObj: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_SetSelectable(self, *args)


    def HasLocation(self, *args):
        """
        HasLocation(Handle_StdSelect_BRepOwner self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_HasLocation(self, *args)


    def Location(self, *args):
        """
        Location(Handle_StdSelect_BRepOwner self) -> TopLoc_Location

        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_Location(self, *args)


    def SetSelected(self, *args):
        """
        SetSelected(Handle_StdSelect_BRepOwner self, Standard_Boolean const theIsSelected)

        Set the state of the owner.
        @param theIsSelected [in] shows if owner is selected.

        :type theIsSelected: bool

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_SetSelected(self, *args)


    def IsSelected(self, *args):
        """
        IsSelected(Handle_StdSelect_BRepOwner self) -> Standard_Boolean

        @return Standard_True if the owner is selected.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IsSelected(self, *args)


    def State(self, *args):
        """
        State(Handle_StdSelect_BRepOwner self, Standard_Integer const theStatus)
        State(Handle_StdSelect_BRepOwner self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_State(self, *args)


    def IsAutoHilight(self, *args):
        """
        IsAutoHilight(Handle_StdSelect_BRepOwner self) -> Standard_Boolean

        if owner is not auto hilighted, for group contains many such owners
        will be called one method HilightSelected of SelectableObject

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IsAutoHilight(self, *args)


    def IsForcedHilight(self, *args):
        """
        IsForcedHilight(Handle_StdSelect_BRepOwner self) -> Standard_Boolean

        if this method returns TRUE the owner will allways call method
        Hilight for SelectableObject when the owner is detected. By default
        it always return FALSE.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IsForcedHilight(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_StdSelect_BRepOwner self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID and update all presentations.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_SetZLayer(self, *args)


    def IsSameSelectable(self, *args):
        """
        IsSameSelectable(Handle_StdSelect_BRepOwner self, Handle_SelectMgr_SelectableObject theOther) -> Standard_Boolean

        Returns true if pointer to selectable object of this owner is equal to the given one

        :type theOther: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IsSameSelectable(self, *args)


    def ComesFromDecomposition(self, *args):
        """
        ComesFromDecomposition(Handle_StdSelect_BRepOwner self) -> Standard_Boolean

        Returns TRUE if this owner points to a part of object and FALSE for entire object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_ComesFromDecomposition(self, *args)


    def SetComesFromDecomposition(self, *args):
        """
        SetComesFromDecomposition(Handle_StdSelect_BRepOwner self, Standard_Boolean const theIsFromDecomposition)

        Sets flag indicating this owner points to a part of object (TRUE) or to entire object (FALSE).

        :type theIsFromDecomposition: bool

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_SetComesFromDecomposition(self, *args)


    def SetPriority(self, *args):
        """
        SetPriority(Handle_StdSelect_BRepOwner self, Standard_Integer const thePriority)

        sets the selectable priority of the owner

        :type thePriority: int

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_SetPriority(self, *args)


    def Priority(self, *args):
        """
        Priority(Handle_StdSelect_BRepOwner self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_Priority(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StdSelect_BRepOwner self)

        Memory deallocator for transient classes


        """
        return _StdSelect.Handle_StdSelect_BRepOwner_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdSelect_BRepOwner self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdSelect_BRepOwner self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdSelect_BRepOwner self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdSelect_BRepOwner self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdSelect_BRepOwner self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdSelect_BRepOwner self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdSelect_BRepOwner self)

        Increments the reference counter of this object


        """
        return _StdSelect.Handle_StdSelect_BRepOwner_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdSelect_BRepOwner self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_BRepOwner_DecrementRefCounter(self, *args)

Handle_StdSelect_BRepOwner_swigregister = _StdSelect.Handle_StdSelect_BRepOwner_swigregister
Handle_StdSelect_BRepOwner_swigregister(Handle_StdSelect_BRepOwner)

def Handle_StdSelect_BRepOwner_DownCast(thing):
    return _StdSelect.Handle_StdSelect_BRepOwner_DownCast(thing)
Handle_StdSelect_BRepOwner_DownCast = _StdSelect.Handle_StdSelect_BRepOwner_DownCast

class StdSelect_(object):
    """
    The StdSelect package provides the following services
    -   the definition of selection modes for topological shapes
    -   the definition of several concrete filtertandard
    Selection2d.ap classes
    -   2D and 3D viewer selectors.
    Note that each new Interactive Object must have all
    its selection modes defined.
    Standard Classes is useful to build
    3D Selectable Objects, and to process
    3D Selections:

    - Implementation of View Selector for dynamic selection
    in Views from V3d.

    - Implementation of Tool class to decompose 3D BRep Objects
    into sensitive Primitives for every desired mode of selection
    (selection of vertex,edges,wires,faces,...)

    -  Implementation of dedicated Sensitives Entities:
    Text for 2D Views (linked to Specific 2D projectors.)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetDrawerForBRepOwner(*args):
        """
        SetDrawerForBRepOwner(Handle_SelectMgr_Selection aSelection, Handle_Prs3d_Drawer aDrawer)

        puts The same drawer in every BRepOwner Of SensitivePrimitive
        Used Only for hilight Of BRepOwner...

        :type aSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _StdSelect.StdSelect__SetDrawerForBRepOwner(*args)

    SetDrawerForBRepOwner = staticmethod(SetDrawerForBRepOwner)

    def __init__(self):
        """
        The StdSelect package provides the following services
        -   the definition of selection modes for topological shapes
        -   the definition of several concrete filtertandard
        Selection2d.ap classes
        -   2D and 3D viewer selectors.
        Note that each new Interactive Object must have all
        its selection modes defined.
        Standard Classes is useful to build
        3D Selectable Objects, and to process
        3D Selections:

        - Implementation of View Selector for dynamic selection
        in Views from V3d.

        - Implementation of Tool class to decompose 3D BRep Objects
        into sensitive Primitives for every desired mode of selection
        (selection of vertex,edges,wires,faces,...)

        -  Implementation of dedicated Sensitives Entities:
        Text for 2D Views (linked to Specific 2D projectors.)
        """
        this = _StdSelect.new_StdSelect_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdSelect.delete_StdSelect_
StdSelect__swigregister = _StdSelect.StdSelect__swigregister
StdSelect__swigregister(StdSelect_)

def StdSelect__SetDrawerForBRepOwner(*args):
    """
    StdSelect__SetDrawerForBRepOwner(Handle_SelectMgr_Selection aSelection, Handle_Prs3d_Drawer aDrawer)

    puts The same drawer in every BRepOwner Of SensitivePrimitive
    Used Only for hilight Of BRepOwner...

    :type aSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

    """
    return _StdSelect.StdSelect__SetDrawerForBRepOwner(*args)

class StdSelect_BRepSelectionTool(object):
    """
    Tool to create specific selections (sets of primitives)
    for Shapes from Topology.
    These Selections may be used  in dynamic selection
    Mechanism
    Given a Shape and a mode of selection
    (selection of vertices,
    edges,faces ...) , This Tool Computes corresponding sensitive primitives,
    puts them in an entity called Selection (see package SelectMgr) and returns it.

    A Priority for the decomposed pickable objects can be given ;
    by default There is A Preset Hierachy:
    Vertex             priority : 5
    Edge               priority : 4
    Wire               priority : 3
    Face               priority : 2
    Shell,solid,shape  priority : 1
    the default priority in the following methods has no sense - it's only taken in account
    when the user gives a value between 0 and 10.
    IMPORTANT : This decomposition creates BRepEntityOwner instances (from StdSelect).
    which are stored in the Sensitive Entities coming from The Decomposition.

    the result of picking in a ViewerSelector return EntityOwner from SelectMgr;
    to know what kind of object was picked :

    ENTITY_OWNER -> Selectable() gives the selectableobject which
    was decomposed into pickable elements.
    Handle(StdSelect_BRepOwner)::DownCast(ENTITY_OWNER) -> Shape()
    gives the real picked shape (edge,vertex,shape...)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Load(*args):
        """
        Load(Handle_SelectMgr_Selection aSelection, TopoDS_Shape aShape, TopAbs_ShapeEnum const aType, Standard_Real const theDeflection, Standard_Real const theDeviationAngle, Standard_Boolean const AutoTriangulation, Standard_Integer const aPriority=-1, Standard_Integer const NbPOnEdge=9, Standard_Real const MaximalParameter=500)
        Load(Handle_SelectMgr_Selection aSelection, Handle_SelectMgr_SelectableObject Origin, TopoDS_Shape aShape, TopAbs_ShapeEnum const aType, Standard_Real const theDeflection, Standard_Real const theDeviationAngle, Standard_Boolean const AutoTriangulation, Standard_Integer const aPriority=-1, Standard_Integer const NbPOnEdge=9, Standard_Real const MaximalParameter=500)

        Same  functionnalities  ; the  only
        difference is that  the selectable object from which the
        selection comes is stored in each Sensitive EntityOwner;
        decomposition of <aShape> into sensitive entities following
        a mode of decomposition <aType>. These entities are stored in <aSelection>
        The Major difference is that the known users are first inserted in the
        BRepOwners. the original shape is the last user...
        (see EntityOwner from SelectBasics and BrepOwner)...

        :type aSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
        :type Origin: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type theDeflection: float
        :type theDeviationAngle: float
        :type AutoTriangulation: bool
        :type aPriority: int
        :type NbPOnEdge: int
        :type MaximalParameter: float

        """
        return _StdSelect.StdSelect_BRepSelectionTool_Load(*args)

    Load = staticmethod(Load)

    def GetStandardPriority(*args):
        """
        GetStandardPriority(TopoDS_Shape theShape, TopAbs_ShapeEnum const theType) -> Standard_Integer

        Returns the standard priority of the shape aShap having the type aType.
        This priority is passed to a StdSelect_BRepOwner object.
        You can use the function Load to modify the
        selection priority of an owner to make one entity
        more selectable than another one.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.StdSelect_BRepSelectionTool_GetStandardPriority(*args)

    GetStandardPriority = staticmethod(GetStandardPriority)

    def ComputeSensitive(*args):
        """
        ComputeSensitive(TopoDS_Shape theShape, Handle_SelectMgr_EntityOwner theOwner, Handle_SelectMgr_Selection theSelection, Standard_Real const theDeflection, Standard_Real const theDeflAngle, Standard_Integer const theNbPOnEdge, Standard_Real const theMaxiParam, Standard_Boolean const theAutoTriang)

        Computes the sensitive primitives, stores them in the SelectMgr_Selection object, and returns this object.
        @param theShape        shape to compute sensitive entities
        @param theOwner        selectable owner object
        @param theSelection    selection to append new sensitive entities
        @param theDeflection   linear deflection
        @param theDeflAngle    angular deflection
        @param theNbPOnEdge    sensitivity parameters for edges and wires
        @param theMaxiParam    sensitivity parameters for infinite objects (the default value is 500)
        @param theAutoTriang   flag to compute triangulation for the faces which have none

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :type theSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
        :type theDeflection: float
        :type theDeflAngle: float
        :type theNbPOnEdge: int
        :type theMaxiParam: float
        :type theAutoTriang: bool

        """
        return _StdSelect.StdSelect_BRepSelectionTool_ComputeSensitive(*args)

    ComputeSensitive = staticmethod(ComputeSensitive)

    def GetSensitiveForFace(*args):
        """
        GetSensitiveForFace(TopoDS_Face theFace, Handle_SelectMgr_EntityOwner theOwner, NCollection_Sequence_Handle_Select3D_SensitiveEntity theOutList, Standard_Boolean const theAutoTriang, Standard_Integer const theNbPOnEdge=9, Standard_Real const theMaxiParam=500, Standard_Boolean const theInteriorFlag) -> Standard_Boolean

        Creates the 3D sensitive entities for Face selection.
        @param theFace         face to compute sensitive entities
        @param theOwner        selectable owner object
        @param theOutList      output result list to append created entities
        @param theAutoTriang   obsolete flag (has no effect)
        @param theNbPOnEdge    sensitivity parameters
        @param theMaxiParam    sensitivity parameters
        @param theInteriorFlag flag indicating that face interior (TRUE) or face boundary (FALSE) should be selectable

        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :type theOutList: OCC.wrapper.Select3D.Select3D_EntitySequence
        :type theAutoTriang: bool
        :type theNbPOnEdge: int
        :type theMaxiParam: float
        :type theInteriorFlag: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_BRepSelectionTool_GetSensitiveForFace(*args)

    GetSensitiveForFace = staticmethod(GetSensitiveForFace)

    def GetEdgeSensitive(*args):
        """
        GetEdgeSensitive(TopoDS_Shape theShape, Handle_SelectMgr_EntityOwner theOwner, Handle_SelectMgr_Selection theSelection, Standard_Real const theDeflection, Standard_Real const theDeviationAngle, Standard_Integer const theNbPOnEdge, Standard_Real const theMaxiParam, Handle_Select3D_SensitiveEntity theSensitive)

        Create a sensitive edge or sensitive wire.
        @param theShape          either TopoDS_Edge or TopoDS_Wire to compute sensitive entities
        @param theOwner          selectable owner object
        @param theSelection      selection to append new sensitive entities
        @param theDeflection     linear deflection
        @param theDeviationAngle angular deflection
        @param theNbPOnEdge      sensitivity parameters
        @param theMaxiParam      sensitivity parameters

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :type theSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
        :type theDeflection: float
        :type theDeviationAngle: float
        :type theNbPOnEdge: int
        :type theMaxiParam: float
        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _StdSelect.StdSelect_BRepSelectionTool_GetEdgeSensitive(*args)

    GetEdgeSensitive = staticmethod(GetEdgeSensitive)

    def PreBuildBVH(*args):
        """
        PreBuildBVH(Handle_SelectMgr_Selection theSelection)

        Traverses the selection given and pre-builds BVH trees for heavyweight
        sensitive entities containing more than BVH_PRIMITIVE_LIMIT (defined in .cxx file) sub-elements.

        :type theSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection

        """
        return _StdSelect.StdSelect_BRepSelectionTool_PreBuildBVH(*args)

    PreBuildBVH = staticmethod(PreBuildBVH)

    def __init__(self):
        """
        Tool to create specific selections (sets of primitives)
        for Shapes from Topology.
        These Selections may be used  in dynamic selection
        Mechanism
        Given a Shape and a mode of selection
        (selection of vertices,
        edges,faces ...) , This Tool Computes corresponding sensitive primitives,
        puts them in an entity called Selection (see package SelectMgr) and returns it.

        A Priority for the decomposed pickable objects can be given ;
        by default There is A Preset Hierachy:
        Vertex             priority : 5
        Edge               priority : 4
        Wire               priority : 3
        Face               priority : 2
        Shell,solid,shape  priority : 1
        the default priority in the following methods has no sense - it's only taken in account
        when the user gives a value between 0 and 10.
        IMPORTANT : This decomposition creates BRepEntityOwner instances (from StdSelect).
        which are stored in the Sensitive Entities coming from The Decomposition.

        the result of picking in a ViewerSelector return EntityOwner from SelectMgr;
        to know what kind of object was picked :

        ENTITY_OWNER -> Selectable() gives the selectableobject which
        was decomposed into pickable elements.
        Handle(StdSelect_BRepOwner)::DownCast(ENTITY_OWNER) -> Shape()
        gives the real picked shape (edge,vertex,shape...)
        """
        this = _StdSelect.new_StdSelect_BRepSelectionTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdSelect.delete_StdSelect_BRepSelectionTool
StdSelect_BRepSelectionTool_swigregister = _StdSelect.StdSelect_BRepSelectionTool_swigregister
StdSelect_BRepSelectionTool_swigregister(StdSelect_BRepSelectionTool)

def StdSelect_BRepSelectionTool_Load(*args):
    """
    Load(Handle_SelectMgr_Selection aSelection, TopoDS_Shape aShape, TopAbs_ShapeEnum const aType, Standard_Real const theDeflection, Standard_Real const theDeviationAngle, Standard_Boolean const AutoTriangulation, Standard_Integer const aPriority=-1, Standard_Integer const NbPOnEdge=9, Standard_Real const MaximalParameter=500)
    StdSelect_BRepSelectionTool_Load(Handle_SelectMgr_Selection aSelection, Handle_SelectMgr_SelectableObject Origin, TopoDS_Shape aShape, TopAbs_ShapeEnum const aType, Standard_Real const theDeflection, Standard_Real const theDeviationAngle, Standard_Boolean const AutoTriangulation, Standard_Integer const aPriority=-1, Standard_Integer const NbPOnEdge=9, Standard_Real const MaximalParameter=500)

    Same  functionnalities  ; the  only
    difference is that  the selectable object from which the
    selection comes is stored in each Sensitive EntityOwner;
    decomposition of <aShape> into sensitive entities following
    a mode of decomposition <aType>. These entities are stored in <aSelection>
    The Major difference is that the known users are first inserted in the
    BRepOwners. the original shape is the last user...
    (see EntityOwner from SelectBasics and BrepOwner)...

    :type aSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
    :type Origin: OCC.wrapper.SelectMgr.Handle_SelectMgr_SelectableObject
    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type theDeflection: float
    :type theDeviationAngle: float
    :type AutoTriangulation: bool
    :type aPriority: int
    :type NbPOnEdge: int
    :type MaximalParameter: float

    """
    return _StdSelect.StdSelect_BRepSelectionTool_Load(*args)

def StdSelect_BRepSelectionTool_GetStandardPriority(*args):
    """
    StdSelect_BRepSelectionTool_GetStandardPriority(TopoDS_Shape theShape, TopAbs_ShapeEnum const theType) -> Standard_Integer

    Returns the standard priority of the shape aShap having the type aType.
    This priority is passed to a StdSelect_BRepOwner object.
    You can use the function Load to modify the
    selection priority of an owner to make one entity
    more selectable than another one.

    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _StdSelect.StdSelect_BRepSelectionTool_GetStandardPriority(*args)

def StdSelect_BRepSelectionTool_ComputeSensitive(*args):
    """
    StdSelect_BRepSelectionTool_ComputeSensitive(TopoDS_Shape theShape, Handle_SelectMgr_EntityOwner theOwner, Handle_SelectMgr_Selection theSelection, Standard_Real const theDeflection, Standard_Real const theDeflAngle, Standard_Integer const theNbPOnEdge, Standard_Real const theMaxiParam, Standard_Boolean const theAutoTriang)

    Computes the sensitive primitives, stores them in the SelectMgr_Selection object, and returns this object.
    @param theShape        shape to compute sensitive entities
    @param theOwner        selectable owner object
    @param theSelection    selection to append new sensitive entities
    @param theDeflection   linear deflection
    @param theDeflAngle    angular deflection
    @param theNbPOnEdge    sensitivity parameters for edges and wires
    @param theMaxiParam    sensitivity parameters for infinite objects (the default value is 500)
    @param theAutoTriang   flag to compute triangulation for the faces which have none

    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
    :type theSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
    :type theDeflection: float
    :type theDeflAngle: float
    :type theNbPOnEdge: int
    :type theMaxiParam: float
    :type theAutoTriang: bool

    """
    return _StdSelect.StdSelect_BRepSelectionTool_ComputeSensitive(*args)

def StdSelect_BRepSelectionTool_GetSensitiveForFace(*args):
    """
    StdSelect_BRepSelectionTool_GetSensitiveForFace(TopoDS_Face theFace, Handle_SelectMgr_EntityOwner theOwner, NCollection_Sequence_Handle_Select3D_SensitiveEntity theOutList, Standard_Boolean const theAutoTriang, Standard_Integer const theNbPOnEdge=9, Standard_Real const theMaxiParam=500, Standard_Boolean const theInteriorFlag) -> Standard_Boolean

    Creates the 3D sensitive entities for Face selection.
    @param theFace         face to compute sensitive entities
    @param theOwner        selectable owner object
    @param theOutList      output result list to append created entities
    @param theAutoTriang   obsolete flag (has no effect)
    @param theNbPOnEdge    sensitivity parameters
    @param theMaxiParam    sensitivity parameters
    @param theInteriorFlag flag indicating that face interior (TRUE) or face boundary (FALSE) should be selectable

    :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
    :type theOutList: OCC.wrapper.Select3D.Select3D_EntitySequence
    :type theAutoTriang: bool
    :type theNbPOnEdge: int
    :type theMaxiParam: float
    :type theInteriorFlag: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _StdSelect.StdSelect_BRepSelectionTool_GetSensitiveForFace(*args)

def StdSelect_BRepSelectionTool_GetEdgeSensitive(*args):
    """
    StdSelect_BRepSelectionTool_GetEdgeSensitive(TopoDS_Shape theShape, Handle_SelectMgr_EntityOwner theOwner, Handle_SelectMgr_Selection theSelection, Standard_Real const theDeflection, Standard_Real const theDeviationAngle, Standard_Integer const theNbPOnEdge, Standard_Real const theMaxiParam, Handle_Select3D_SensitiveEntity theSensitive)

    Create a sensitive edge or sensitive wire.
    @param theShape          either TopoDS_Edge or TopoDS_Wire to compute sensitive entities
    @param theOwner          selectable owner object
    @param theSelection      selection to append new sensitive entities
    @param theDeflection     linear deflection
    @param theDeviationAngle angular deflection
    @param theNbPOnEdge      sensitivity parameters
    @param theMaxiParam      sensitivity parameters

    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
    :type theSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
    :type theDeflection: float
    :type theDeviationAngle: float
    :type theNbPOnEdge: int
    :type theMaxiParam: float
    :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

    """
    return _StdSelect.StdSelect_BRepSelectionTool_GetEdgeSensitive(*args)

def StdSelect_BRepSelectionTool_PreBuildBVH(*args):
    """
    StdSelect_BRepSelectionTool_PreBuildBVH(Handle_SelectMgr_Selection theSelection)

    Traverses the selection given and pre-builds BVH trees for heavyweight
    sensitive entities containing more than BVH_PRIMITIVE_LIMIT (defined in .cxx file) sub-elements.

    :type theSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection

    """
    return _StdSelect.StdSelect_BRepSelectionTool_PreBuildBVH(*args)

class StdSelect_Shape(PrsMgr.PrsMgr_PresentableObject):
    """Presentable shape only for purpose of display for BRepOwner..."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdSelect_Shape
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdSelect_Shape(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdSelect.StdSelect_Shape_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdSelect.StdSelect_Shape_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.StdSelect_Shape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(StdSelect_Shape self, TopoDS_Shape theShape, Handle_Prs3d_Drawer theDrawer) -> StdSelect_Shape

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        this = _StdSelect.new_StdSelect_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Compute(self, *args):
        """
        Compute(StdSelect_Shape self, Handle_PrsMgr_PresentationManager aPresentationManager, Handle_Prs3d_Presentation aPresentation, Standard_Integer const aMode=0)
        Compute(StdSelect_Shape self, Handle_Prs3d_Projector aProjector, Handle_Geom_Transformation aTrsf, Handle_Prs3d_Presentation aPresentation)

        computes the presentation according to a point of view
        given by <aProjector>.
        To be Used when the associated degenerated Presentations
        have been transformed by <aTrsf> which is not a Pure
        Translation. The HLR Prs can't be deducted automatically
        WARNING :<aTrsf> must be applied
        to the object to display before computation  !!!

        :type aProjector: OCC.wrapper.Prs3d.Handle_Prs3d_Projector
        :type aTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _StdSelect.StdSelect_Shape_Compute(self, *args)

    __swig_destroy__ = _StdSelect.delete_StdSelect_Shape
StdSelect_Shape_swigregister = _StdSelect.StdSelect_Shape_swigregister
StdSelect_Shape_swigregister(StdSelect_Shape)

def StdSelect_Shape_get_type_name(*args):
    """
    StdSelect_Shape_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdSelect.StdSelect_Shape_get_type_name(*args)

def StdSelect_Shape_get_type_descriptor(*args):
    """
    StdSelect_Shape_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdSelect.StdSelect_Shape_get_type_descriptor(*args)

class StdSelect_ShapeTypeFilter(SelectMgr.SelectMgr_Filter):
    """
    A filter framework which allows you to define a filter
    for a specific shape type. The types available include:
    -   compound
    -   compsolid
    -   solid
    -   shell
    -   face
    -   wire
    -   edge
    -   vertex.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdSelect_ShapeTypeFilter
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdSelect_ShapeTypeFilter(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdSelect_ShapeTypeFilter self, TopAbs_ShapeEnum const aType) -> StdSelect_ShapeTypeFilter

        Constructs a filter object defined by the shape type aType.

        :type aType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        this = _StdSelect.new_StdSelect_ShapeTypeFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsOk(self, *args):
        """
        IsOk(StdSelect_ShapeTypeFilter self, Handle_SelectMgr_EntityOwner anobj) -> Standard_Boolean

        :type anobj: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_ShapeTypeFilter_IsOk(self, *args)


    def Type(self, *args):
        """
        Type(StdSelect_ShapeTypeFilter self) -> TopAbs_ShapeEnum

        Returns the type of shape selected by the filter.

        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _StdSelect.StdSelect_ShapeTypeFilter_Type(self, *args)


    def ActsOn(self, *args):
        """
        ActsOn(StdSelect_ShapeTypeFilter self, TopAbs_ShapeEnum const aStandardMode) -> Standard_Boolean

        :type aStandardMode: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_ShapeTypeFilter_ActsOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdSelect.StdSelect_ShapeTypeFilter_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdSelect.StdSelect_ShapeTypeFilter_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.StdSelect_ShapeTypeFilter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdSelect.delete_StdSelect_ShapeTypeFilter
StdSelect_ShapeTypeFilter_swigregister = _StdSelect.StdSelect_ShapeTypeFilter_swigregister
StdSelect_ShapeTypeFilter_swigregister(StdSelect_ShapeTypeFilter)

def StdSelect_ShapeTypeFilter_get_type_name(*args):
    """
    StdSelect_ShapeTypeFilter_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdSelect.StdSelect_ShapeTypeFilter_get_type_name(*args)

def StdSelect_ShapeTypeFilter_get_type_descriptor(*args):
    """
    StdSelect_ShapeTypeFilter_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdSelect.StdSelect_ShapeTypeFilter_get_type_descriptor(*args)

class StdSelect_EdgeFilter(SelectMgr.SelectMgr_Filter):
    """
    A framework to define a filter to select a specific type of edge.
    The types available include:
    -   any edge
    -   a linear edge
    -   a circular edge.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdSelect_EdgeFilter
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdSelect_EdgeFilter(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdSelect_EdgeFilter self, StdSelect_TypeOfEdge const Edge) -> StdSelect_EdgeFilter

        Constructs an edge filter object defined by the type of edge Edge.

        :type Edge: OCC.wrapper.StdSelect.StdSelect_TypeOfEdge

        """
        this = _StdSelect.new_StdSelect_EdgeFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetType(self, *args):
        """
        SetType(StdSelect_EdgeFilter self, StdSelect_TypeOfEdge const aNewType)

        Sets the type of edge aNewType. aNewType is to be highlighted in selection.

        :type aNewType: OCC.wrapper.StdSelect.StdSelect_TypeOfEdge

        """
        return _StdSelect.StdSelect_EdgeFilter_SetType(self, *args)


    def Type(self, *args):
        """
        Type(StdSelect_EdgeFilter self) -> StdSelect_TypeOfEdge

        Returns the type of edge to be highlighted in selection.

        :rtype: OCC.wrapper.StdSelect.StdSelect_TypeOfEdge

        """
        return _StdSelect.StdSelect_EdgeFilter_Type(self, *args)


    def IsOk(self, *args):
        """
        IsOk(StdSelect_EdgeFilter self, Handle_SelectMgr_EntityOwner anobj) -> Standard_Boolean

        :type anobj: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_EdgeFilter_IsOk(self, *args)


    def ActsOn(self, *args):
        """
        ActsOn(StdSelect_EdgeFilter self, TopAbs_ShapeEnum const aStandardMode) -> Standard_Boolean

        :type aStandardMode: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.StdSelect_EdgeFilter_ActsOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdSelect.StdSelect_EdgeFilter_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdSelect.StdSelect_EdgeFilter_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.StdSelect_EdgeFilter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdSelect.delete_StdSelect_EdgeFilter
StdSelect_EdgeFilter_swigregister = _StdSelect.StdSelect_EdgeFilter_swigregister
StdSelect_EdgeFilter_swigregister(StdSelect_EdgeFilter)

def StdSelect_EdgeFilter_get_type_name(*args):
    """
    StdSelect_EdgeFilter_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdSelect.StdSelect_EdgeFilter_get_type_name(*args)

def StdSelect_EdgeFilter_get_type_descriptor(*args):
    """
    StdSelect_EdgeFilter_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdSelect.StdSelect_EdgeFilter_get_type_descriptor(*args)

class Handle_StdSelect_EdgeFilter(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdSelect_EdgeFilter self)

        Nullify the handle


        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdSelect_EdgeFilter self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdSelect_EdgeFilter self, StdSelect_EdgeFilter thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdSelect_EdgeFilter self, Handle_StdSelect_EdgeFilter theHandle) -> Handle_StdSelect_EdgeFilter
        assign(Handle_StdSelect_EdgeFilter self, StdSelect_EdgeFilter thePtr) -> Handle_StdSelect_EdgeFilter
        assign(Handle_StdSelect_EdgeFilter self, Handle_StdSelect_EdgeFilter theHandle) -> Handle_StdSelect_EdgeFilter

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdSelect_EdgeFilter self) -> StdSelect_EdgeFilter

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdSelect_EdgeFilter self) -> StdSelect_EdgeFilter

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdSelect_EdgeFilter self) -> StdSelect_EdgeFilter

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter___ref__(self, *args)


    def __hash__(self):
        return _StdSelect.Handle_StdSelect_EdgeFilter___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdSelect.Handle_StdSelect_EdgeFilter___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdSelect.new_Handle_StdSelect_EdgeFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdSelect.Handle_StdSelect_EdgeFilter_DownCast)
    __swig_destroy__ = _StdSelect.delete_Handle_StdSelect_EdgeFilter

    def SetType(self, *args):
        """
        SetType(Handle_StdSelect_EdgeFilter self, StdSelect_TypeOfEdge const aNewType)

        Sets the type of edge aNewType. aNewType is to be highlighted in selection.

        :type aNewType: OCC.wrapper.StdSelect.StdSelect_TypeOfEdge

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_SetType(self, *args)


    def Type(self, *args):
        """
        Type(Handle_StdSelect_EdgeFilter self) -> StdSelect_TypeOfEdge

        Returns the type of edge to be highlighted in selection.

        :rtype: OCC.wrapper.StdSelect.StdSelect_TypeOfEdge

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_Type(self, *args)


    def IsOk(self, *args):
        """
        IsOk(Handle_StdSelect_EdgeFilter self, Handle_SelectMgr_EntityOwner anobj) -> Standard_Boolean

        :type anobj: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_IsOk(self, *args)


    def ActsOn(self, *args):
        """
        ActsOn(Handle_StdSelect_EdgeFilter self, TopAbs_ShapeEnum const aStandardMode) -> Standard_Boolean

        :type aStandardMode: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_ActsOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdSelect_EdgeFilter self) -> char const *

        :rtype: const char *

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_EdgeFilter_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_EdgeFilter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StdSelect_EdgeFilter self)

        Memory deallocator for transient classes


        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdSelect_EdgeFilter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdSelect_EdgeFilter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdSelect_EdgeFilter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdSelect_EdgeFilter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdSelect_EdgeFilter self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdSelect_EdgeFilter self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdSelect_EdgeFilter self)

        Increments the reference counter of this object


        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdSelect_EdgeFilter self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_EdgeFilter_DecrementRefCounter(self, *args)

Handle_StdSelect_EdgeFilter_swigregister = _StdSelect.Handle_StdSelect_EdgeFilter_swigregister
Handle_StdSelect_EdgeFilter_swigregister(Handle_StdSelect_EdgeFilter)

def Handle_StdSelect_EdgeFilter_DownCast(thing):
    return _StdSelect.Handle_StdSelect_EdgeFilter_DownCast(thing)
Handle_StdSelect_EdgeFilter_DownCast = _StdSelect.Handle_StdSelect_EdgeFilter_DownCast

class Handle_StdSelect_Shape(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdSelect_Shape self)

        Nullify the handle


        """
        return _StdSelect.Handle_StdSelect_Shape_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdSelect_Shape self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdSelect.Handle_StdSelect_Shape_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdSelect_Shape self, StdSelect_Shape thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdSelect.Handle_StdSelect_Shape_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdSelect_Shape self, Handle_StdSelect_Shape theHandle) -> Handle_StdSelect_Shape
        assign(Handle_StdSelect_Shape self, StdSelect_Shape thePtr) -> Handle_StdSelect_Shape
        assign(Handle_StdSelect_Shape self, Handle_StdSelect_Shape theHandle) -> Handle_StdSelect_Shape

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdSelect.Handle_StdSelect_Shape_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdSelect_Shape self) -> StdSelect_Shape

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_Shape_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdSelect_Shape self) -> StdSelect_Shape

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_Shape___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdSelect_Shape self) -> StdSelect_Shape

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdSelect.Handle_StdSelect_Shape___ref__(self, *args)


    def __hash__(self):
        return _StdSelect.Handle_StdSelect_Shape___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdSelect.Handle_StdSelect_Shape___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdSelect.new_Handle_StdSelect_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdSelect.Handle_StdSelect_Shape_DownCast)
    __swig_destroy__ = _StdSelect.delete_Handle_StdSelect_Shape

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdSelect_Shape self) -> char const *

        :rtype: const char *

        """
        return _StdSelect.Handle_StdSelect_Shape_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_Shape_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_Shape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Compute(self, *args):
        """
        Compute(Handle_StdSelect_Shape self, Handle_PrsMgr_PresentationManager aPresentationManager, Handle_Prs3d_Presentation aPresentation, Standard_Integer const aMode=0)
        Compute(Handle_StdSelect_Shape self, Handle_Prs3d_Projector aProjector, Handle_Geom_Transformation aTrsf, Handle_Prs3d_Presentation aPresentation)

        computes the presentation according to a point of view
        given by <aProjector>.
        To be Used when the associated degenerated Presentations
        have been transformed by <aTrsf> which is not a Pure
        Translation. The HLR Prs can't be deducted automatically
        WARNING :<aTrsf> must be applied
        to the object to display before computation  !!!

        :type aProjector: OCC.wrapper.Prs3d.Handle_Prs3d_Projector
        :type aTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _StdSelect.Handle_StdSelect_Shape_Compute(self, *args)


    def Presentations(self, *args):
        """
        Presentations(Handle_StdSelect_Shape self) -> NCollection_Sequence_PrsMgr_ModedPresentation

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_Presentations

        """
        return _StdSelect.Handle_StdSelect_Shape_Presentations(self, *args)


    def TypeOfPresentation3d(self, *args):
        """
        TypeOfPresentation3d(Handle_StdSelect_Shape self) -> PrsMgr_TypeOfPresentation3d

        Returns information on whether the object accepts display in HLR mode or not.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        return _StdSelect.Handle_StdSelect_Shape_TypeOfPresentation3d(self, *args)


    def TransformPersistence(self, *args):
        """
        Returns Transformation Persistence defining a special Local Coordinate system where this presentable object is located or NULL handle if not defined.
        Position of the object having Transformation Persistence is mutable and depends on camera position.
        The same applies to a bounding box of the object.
        @sa Graphic3d_TransformPers class description

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _StdSelect.Handle_StdSelect_Shape_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Handle_StdSelect_Shape self, Handle_Graphic3d_TransformPers theTrsfPers)
        SetTransformPersistence(Handle_StdSelect_Shape self, Graphic3d_TransModeFlags const theMode, gp_Pnt thePoint)

        Sets up Transform Persistence Mode for this object.
        This function used to lock in object position, rotation and / or zooming relative to camera position.
        Object will be drawn in the origin setted by thePoint parameter (except Graphic3d_TMF_TriedronPers flag
        - see description later). theMode should be:
        -   Graphic3d_TMF_None - no persistence attributes (reset);
        -   Graphic3d_TMF_ZoomPers - object doesn't resize;
        -   Graphic3d_TMF_RotatePers - object doesn't rotate;
        -   Graphic3d_TMF_ZoomRotatePers - object doesn't resize and rotate;
        -   Graphic3d_TMF_RotatePers - object doesn't rotate;
        -   Graphic3d_TMF_TriedronPers - object behaves like trihedron.
        If Graphic3d_TMF_TriedronPers or Graphic3d_TMF_2d persistence mode selected thePoint coordinates X and Y means:
        -   X = 0.0, Y = 0.0 - center of view window;
        -   X > 0.0, Y > 0.0 - right upper corner of view window;
        -   X > 0.0, Y < 0.0 - right lower corner of view window;
        -   X < 0.0, Y > 0.0 - left  upper corner of view window;
        -   X < 0.0, Y < 0.0 - left  lower corner of view window.
        And Z coordinate defines the gap from border of view window (except center position).

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        return _StdSelect.Handle_StdSelect_Shape_SetTransformPersistence(self, *args)


    def GetTransformPersistenceMode(self, *args):
        """
        GetTransformPersistenceMode(Handle_StdSelect_Shape self) -> Graphic3d_TransModeFlags

        Gets  Transform  Persistence Mode  for  this  object

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags

        """
        return _StdSelect.Handle_StdSelect_Shape_GetTransformPersistenceMode(self, *args)


    def GetTransformPersistencePoint(self, *args):
        """
        GetTransformPersistencePoint(Handle_StdSelect_Shape self) -> gp_Pnt

        Gets  point  of  transform  persistence for  this  object

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _StdSelect.Handle_StdSelect_Shape_GetTransformPersistencePoint(self, *args)


    def SetTypeOfPresentation(self, *args):
        """
        SetTypeOfPresentation(Handle_StdSelect_Shape self, PrsMgr_TypeOfPresentation3d const aType)

        :type aType: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        return _StdSelect.Handle_StdSelect_Shape_SetTypeOfPresentation(self, *args)


    def SetToUpdate(self, *args):
        """
        SetToUpdate(Handle_StdSelect_Shape self, Standard_Integer const aMode)
        SetToUpdate(Handle_StdSelect_Shape self)

        flags all the Presentations to be Updated.


        """
        return _StdSelect.Handle_StdSelect_Shape_SetToUpdate(self, *args)


    def ToBeUpdated(self, *args):
        """
        ToBeUpdated(Handle_StdSelect_Shape self, NCollection_List_Standard_Integer ListOfMode)

        gives the list of modes which are flagged "to be updated".

        :type ListOfMode: OCC.wrapper.TColStd.TColStd_ListOfInteger

        """
        return _StdSelect.Handle_StdSelect_Shape_ToBeUpdated(self, *args)


    def LocalTransformationGeom(self, *args):
        """
        Return the local transformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _StdSelect.Handle_StdSelect_Shape_LocalTransformationGeom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLocalTransformation(self, *args):
        """
        SetLocalTransformation(Handle_StdSelect_Shape self, gp_Trsf theTrsf)
        SetLocalTransformation(Handle_StdSelect_Shape self, Handle_Geom_Transformation theTrsf)

        Sets local transformation to theTransformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _StdSelect.Handle_StdSelect_Shape_SetLocalTransformation(self, *args)


    def HasTransformation(self, *args):
        """
        HasTransformation(Handle_StdSelect_Shape self) -> Standard_Boolean

        Returns true if object has a transformation that is different from the identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_Shape_HasTransformation(self, *args)


    def TransformationGeom(self, *args):
        """
        Return the transformation taking into account transformation of parent object(s).
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _StdSelect.Handle_StdSelect_Shape_TransformationGeom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LocalTransformation(self, *args):
        """
        Return the local transformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _StdSelect.Handle_StdSelect_Shape_LocalTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transformation(self, *args):
        """
        Return the transformation taking into account transformation of parent object(s).
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _StdSelect.Handle_StdSelect_Shape_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InversedTransformation(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        res = _StdSelect.Handle_StdSelect_Shape_InversedTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ResetTransformation(self, *args):
        """
        ResetTransformation(Handle_StdSelect_Shape self)

        resets local transformation to identity.


        """
        return _StdSelect.Handle_StdSelect_Shape_ResetTransformation(self, *args)


    def UpdateTransformation(self, *args):
        """
        UpdateTransformation(Handle_StdSelect_Shape self)
        UpdateTransformation(Handle_StdSelect_Shape self, Handle_Prs3d_Presentation P)

        :type P: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _StdSelect.Handle_StdSelect_Shape_UpdateTransformation(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_StdSelect_Shape self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID and update all presentations of the presentable object.
        The layers mechanism allows drawing objects in higher layers in overlay of objects in lower layers.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _StdSelect.Handle_StdSelect_Shape_SetZLayer(self, *args)


    def ZLayer(self, *args):
        """
        ZLayer(Handle_StdSelect_Shape self) -> Graphic3d_ZLayerId

        Get ID of Z layer.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _StdSelect.Handle_StdSelect_Shape_ZLayer(self, *args)


    def AddClipPlane(self, *args):
        """
        AddClipPlane(Handle_StdSelect_Shape self, Handle_Graphic3d_ClipPlane thePlane)

        Adds clip plane for graphical clipping for all display mode
        presentations. The composition of clip planes truncates the rendering
        space to convex volume. Please be aware that number of supported
        clip plane is limited. The planes which exceed the limit are ignored.
        Besides of this, some planes can be already set in view where the object
        is shown: the number of these planes should be substracted from limit
        to predict the maximum possible number of object clipping planes.
        @param thePlane [in] the clip plane to be appended to map of clip planes.

        :type thePlane: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _StdSelect.Handle_StdSelect_Shape_AddClipPlane(self, *args)


    def RemoveClipPlane(self, *args):
        """
        RemoveClipPlane(Handle_StdSelect_Shape self, Handle_Graphic3d_ClipPlane thePlane)

        Removes previously added clip plane.
        @param thePlane [in] the clip plane to be removed from map of clip planes.

        :type thePlane: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _StdSelect.Handle_StdSelect_Shape_RemoveClipPlane(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_StdSelect_Shape self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)
        SetClipPlanes(Handle_StdSelect_Shape self, Graphic3d_SequenceOfHClipPlane thePlanes)

        :type thePlanes: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfHClipPlane

        """
        return _StdSelect.Handle_StdSelect_Shape_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes.
        @return set of previously added clip planes for all display mode presentations.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _StdSelect.Handle_StdSelect_Shape_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(Handle_StdSelect_Shape self, Standard_Boolean const theIsMutable)

        Sets if the object has mutable nature (content or location will be changed regularly).
        This method should be called before object displaying to take effect.

        :type theIsMutable: bool

        """
        return _StdSelect.Handle_StdSelect_Shape_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(Handle_StdSelect_Shape self) -> Standard_Boolean

        Returns true if object has mutable nature (content or location are be changed regularly).
        Mutable object will be managed in different way than static onces (another optimizations).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_Shape_IsMutable(self, *args)


    def AddChild(self, *args):
        """
        AddChild(Handle_StdSelect_Shape self, Handle_PrsMgr_PresentableObject theObject)

        Makes theObject child of current object in scene hierarchy.

        :type theObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _StdSelect.Handle_StdSelect_Shape_AddChild(self, *args)


    def RemoveChild(self, *args):
        """
        RemoveChild(Handle_StdSelect_Shape self, Handle_PrsMgr_PresentableObject theObject)

        Removes theObject from children of current object in scene hierarchy.

        :type theObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _StdSelect.Handle_StdSelect_Shape_RemoveChild(self, *args)


    def Children(self, *args):
        """
        Returns children of the current object.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_ListOfPresentableObjects

        """
        res = _StdSelect.Handle_StdSelect_Shape_Children(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnPresentations(self, *args):
        """
        HasOwnPresentations(Handle_StdSelect_Shape self) -> Standard_Boolean

        Returns true if object should have own presentations.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_Shape_HasOwnPresentations(self, *args)


    def Parent(self, *args):
        """
        Parent(Handle_StdSelect_Shape self) -> PrsMgr_PresentableObject

        Returns parent of current object in scene hierarchy.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_PresentableObjectPointer

        """
        return _StdSelect.Handle_StdSelect_Shape_Parent(self, *args)


    def SetAttributes(self, *args):
        """
        SetAttributes(Handle_StdSelect_Shape self, Handle_Prs3d_Drawer theDrawer)

        Initializes the drawing tool theDrawer.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _StdSelect.Handle_StdSelect_Shape_SetAttributes(self, *args)


    def Attributes(self, *args):
        """
        Returns the attributes settings.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _StdSelect.Handle_StdSelect_Shape_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def UnsetAttributes(self, *args):
        """
        UnsetAttributes(Handle_StdSelect_Shape self)

        Clears settings provided by the drawing tool theDrawer.


        """
        return _StdSelect.Handle_StdSelect_Shape_UnsetAttributes(self, *args)


    def HilightAttributes(self, *args):
        """
        Returns the hilight attributes settings.
        When not NULL, overrides both Prs3d_TypeOfHighlight_LocalSelected and Prs3d_TypeOfHighlight_Selected defined within AIS_InteractiveContext.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _StdSelect.Handle_StdSelect_Shape_HilightAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHilightAttributes(self, *args):
        """
        SetHilightAttributes(Handle_StdSelect_Shape self, Handle_Prs3d_Drawer theDrawer)

        Initializes the hilight drawing tool theDrawer.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _StdSelect.Handle_StdSelect_Shape_SetHilightAttributes(self, *args)


    def DynamicHilightAttributes(self, *args):
        """
        Returns the hilight attributes settings.
        When not NULL, overrides both Prs3d_TypeOfHighlight_LocalDynamic and Prs3d_TypeOfHighlight_Dynamic defined within AIS_InteractiveContext.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _StdSelect.Handle_StdSelect_Shape_DynamicHilightAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDynamicHilightAttributes(self, *args):
        """
        SetDynamicHilightAttributes(Handle_StdSelect_Shape self, Handle_Prs3d_Drawer theDrawer)

        Initializes the dynamic hilight drawing tool.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _StdSelect.Handle_StdSelect_Shape_SetDynamicHilightAttributes(self, *args)


    def UnsetHilightAttributes(self, *args):
        """
        UnsetHilightAttributes(Handle_StdSelect_Shape self)

        Clears settings provided by the hilight drawing tool theDrawer.


        """
        return _StdSelect.Handle_StdSelect_Shape_UnsetHilightAttributes(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StdSelect_Shape self)

        Memory deallocator for transient classes


        """
        return _StdSelect.Handle_StdSelect_Shape_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdSelect_Shape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdSelect_Shape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_Shape_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdSelect_Shape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdSelect_Shape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_Shape_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdSelect_Shape self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdSelect.Handle_StdSelect_Shape_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdSelect_Shape self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_Shape_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdSelect_Shape self)

        Increments the reference counter of this object


        """
        return _StdSelect.Handle_StdSelect_Shape_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdSelect_Shape self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_Shape_DecrementRefCounter(self, *args)

Handle_StdSelect_Shape_swigregister = _StdSelect.Handle_StdSelect_Shape_swigregister
Handle_StdSelect_Shape_swigregister(Handle_StdSelect_Shape)

def Handle_StdSelect_Shape_DownCast(thing):
    return _StdSelect.Handle_StdSelect_Shape_DownCast(thing)
Handle_StdSelect_Shape_DownCast = _StdSelect.Handle_StdSelect_Shape_DownCast

class Handle_StdSelect_ShapeTypeFilter(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdSelect_ShapeTypeFilter self)

        Nullify the handle


        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdSelect_ShapeTypeFilter self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdSelect_ShapeTypeFilter self, StdSelect_ShapeTypeFilter thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdSelect_ShapeTypeFilter self, Handle_StdSelect_ShapeTypeFilter theHandle) -> Handle_StdSelect_ShapeTypeFilter
        assign(Handle_StdSelect_ShapeTypeFilter self, StdSelect_ShapeTypeFilter thePtr) -> Handle_StdSelect_ShapeTypeFilter
        assign(Handle_StdSelect_ShapeTypeFilter self, Handle_StdSelect_ShapeTypeFilter theHandle) -> Handle_StdSelect_ShapeTypeFilter

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdSelect_ShapeTypeFilter self) -> StdSelect_ShapeTypeFilter

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdSelect_ShapeTypeFilter self) -> StdSelect_ShapeTypeFilter

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdSelect_ShapeTypeFilter self) -> StdSelect_ShapeTypeFilter

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter___ref__(self, *args)


    def __hash__(self):
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdSelect.Handle_StdSelect_ShapeTypeFilter___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdSelect.new_Handle_StdSelect_ShapeTypeFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdSelect.Handle_StdSelect_ShapeTypeFilter_DownCast)
    __swig_destroy__ = _StdSelect.delete_Handle_StdSelect_ShapeTypeFilter

    def IsOk(self, *args):
        """
        IsOk(Handle_StdSelect_ShapeTypeFilter self, Handle_SelectMgr_EntityOwner anobj) -> Standard_Boolean

        :type anobj: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_IsOk(self, *args)


    def Type(self, *args):
        """
        Type(Handle_StdSelect_ShapeTypeFilter self) -> TopAbs_ShapeEnum

        Returns the type of shape selected by the filter.

        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_Type(self, *args)


    def ActsOn(self, *args):
        """
        ActsOn(Handle_StdSelect_ShapeTypeFilter self, TopAbs_ShapeEnum const aStandardMode) -> Standard_Boolean

        :type aStandardMode: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_ActsOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdSelect_ShapeTypeFilter self) -> char const *

        :rtype: const char *

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_ShapeTypeFilter_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_ShapeTypeFilter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StdSelect_ShapeTypeFilter self)

        Memory deallocator for transient classes


        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdSelect_ShapeTypeFilter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdSelect_ShapeTypeFilter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdSelect_ShapeTypeFilter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdSelect_ShapeTypeFilter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdSelect_ShapeTypeFilter self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdSelect_ShapeTypeFilter self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdSelect_ShapeTypeFilter self)

        Increments the reference counter of this object


        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdSelect_ShapeTypeFilter self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_ShapeTypeFilter_DecrementRefCounter(self, *args)

Handle_StdSelect_ShapeTypeFilter_swigregister = _StdSelect.Handle_StdSelect_ShapeTypeFilter_swigregister
Handle_StdSelect_ShapeTypeFilter_swigregister(Handle_StdSelect_ShapeTypeFilter)

def Handle_StdSelect_ShapeTypeFilter_DownCast(thing):
    return _StdSelect.Handle_StdSelect_ShapeTypeFilter_DownCast(thing)
Handle_StdSelect_ShapeTypeFilter_DownCast = _StdSelect.Handle_StdSelect_ShapeTypeFilter_DownCast

class StdSelect_Prs(Prs3d.Prs3d_Presentation):
    """
    allows entities owners to be hilighted
    independantly from PresentableObjects
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdSelect_Prs
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdSelect_Prs(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdSelect_Prs self, Handle_Graphic3d_StructureManager aStructureManager) -> StdSelect_Prs

        :type aStructureManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager

        """
        this = _StdSelect.new_StdSelect_Prs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Manager(self, *args):
        """
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager

        """
        res = _StdSelect.StdSelect_Prs_Manager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdSelect.StdSelect_Prs_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdSelect.StdSelect_Prs_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.StdSelect_Prs_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdSelect.delete_StdSelect_Prs
StdSelect_Prs_swigregister = _StdSelect.StdSelect_Prs_swigregister
StdSelect_Prs_swigregister(StdSelect_Prs)

def StdSelect_Prs_get_type_name(*args):
    """
    StdSelect_Prs_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdSelect.StdSelect_Prs_get_type_name(*args)

def StdSelect_Prs_get_type_descriptor(*args):
    """
    StdSelect_Prs_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdSelect.StdSelect_Prs_get_type_descriptor(*args)

class Handle_StdSelect_FaceFilter(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdSelect_FaceFilter self)

        Nullify the handle


        """
        return _StdSelect.Handle_StdSelect_FaceFilter_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdSelect_FaceFilter self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdSelect_FaceFilter self, StdSelect_FaceFilter thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdSelect_FaceFilter self, Handle_StdSelect_FaceFilter theHandle) -> Handle_StdSelect_FaceFilter
        assign(Handle_StdSelect_FaceFilter self, StdSelect_FaceFilter thePtr) -> Handle_StdSelect_FaceFilter
        assign(Handle_StdSelect_FaceFilter self, Handle_StdSelect_FaceFilter theHandle) -> Handle_StdSelect_FaceFilter

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdSelect_FaceFilter self) -> StdSelect_FaceFilter

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdSelect_FaceFilter self) -> StdSelect_FaceFilter

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdSelect.Handle_StdSelect_FaceFilter___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdSelect_FaceFilter self) -> StdSelect_FaceFilter

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdSelect.Handle_StdSelect_FaceFilter___ref__(self, *args)


    def __hash__(self):
        return _StdSelect.Handle_StdSelect_FaceFilter___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdSelect.Handle_StdSelect_FaceFilter___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdSelect.new_Handle_StdSelect_FaceFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdSelect.Handle_StdSelect_FaceFilter_DownCast)
    __swig_destroy__ = _StdSelect.delete_Handle_StdSelect_FaceFilter

    def SetType(self, *args):
        """
        SetType(Handle_StdSelect_FaceFilter self, StdSelect_TypeOfFace const aNewType)

        Sets the type of face aNewType. aNewType is to be highlighted in selection.

        :type aNewType: OCC.wrapper.StdSelect.StdSelect_TypeOfFace

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_SetType(self, *args)


    def Type(self, *args):
        """
        Type(Handle_StdSelect_FaceFilter self) -> StdSelect_TypeOfFace

        Returns the type of face to be highlighted in selection.

        :rtype: OCC.wrapper.StdSelect.StdSelect_TypeOfFace

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_Type(self, *args)


    def IsOk(self, *args):
        """
        IsOk(Handle_StdSelect_FaceFilter self, Handle_SelectMgr_EntityOwner anobj) -> Standard_Boolean

        :type anobj: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_IsOk(self, *args)


    def ActsOn(self, *args):
        """
        ActsOn(Handle_StdSelect_FaceFilter self, TopAbs_ShapeEnum const aStandardMode) -> Standard_Boolean

        :type aStandardMode: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_ActsOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdSelect_FaceFilter self) -> char const *

        :rtype: const char *

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_FaceFilter_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdSelect.Handle_StdSelect_FaceFilter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StdSelect_FaceFilter self)

        Memory deallocator for transient classes


        """
        return _StdSelect.Handle_StdSelect_FaceFilter_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdSelect_FaceFilter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdSelect_FaceFilter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdSelect_FaceFilter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdSelect_FaceFilter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdSelect_FaceFilter self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdSelect_FaceFilter self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdSelect_FaceFilter self)

        Increments the reference counter of this object


        """
        return _StdSelect.Handle_StdSelect_FaceFilter_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdSelect_FaceFilter self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.Handle_StdSelect_FaceFilter_DecrementRefCounter(self, *args)

Handle_StdSelect_FaceFilter_swigregister = _StdSelect.Handle_StdSelect_FaceFilter_swigregister
Handle_StdSelect_FaceFilter_swigregister(Handle_StdSelect_FaceFilter)

def Handle_StdSelect_FaceFilter_DownCast(thing):
    return _StdSelect.Handle_StdSelect_FaceFilter_DownCast(thing)
Handle_StdSelect_FaceFilter_DownCast = _StdSelect.Handle_StdSelect_FaceFilter_DownCast

class NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     An indexed map is used  to store keys and to  bind
    an index to them.  Each  new key stored in the map
    gets an index.  Index are  incremented as keys are
    stored in the map. A key can be found by the index
    and an index by the key.  No  key but the last can
    be  removed so the  indices   are in the range 1..
    Extent.  An Item is stored with each key.

    This   class is   similar  to  IndexedMap     from
    NCollection  with the Item as  a new feature. Note
    the important difference on  the operator  ().  In
    the IndexedMap this operator returns  the Key.  In
    the IndexedDataMap this operator returns the Item.

    See  the  class   Map   from NCollection   for   a
    discussion about the number of buckets.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self) -> NCollection_IndexedDataMap< opencascade::handle< SelectBasics_EntityOwner >,handle< StdSelect_Prs >,TColStd_MapTransientHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self) -> NCollection_IndexedDataMap< opencascade::handle< SelectBasics_EntityOwner >,handle< StdSelect_Prs >,TColStd_MapTransientHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self) -> NCollection_IndexedDataMap< opencascade::handle< SelectBasics_EntityOwner >,handle< StdSelect_Prs >,TColStd_MapTransientHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self) -> NCollection_IndexedDataMap< opencascade::handle< SelectBasics_EntityOwner >,handle< StdSelect_Prs >,TColStd_MapTransientHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     An indexed map is used  to store keys and to  bind
        an index to them.  Each  new key stored in the map
        gets an index.  Index are  incremented as keys are
        stored in the map. A key can be found by the index
        and an index by the key.  No  key but the last can
        be  removed so the  indices   are in the range 1..
        Extent.  An Item is stored with each key.

        This   class is   similar  to  IndexedMap     from
        NCollection  with the Item as  a new feature. Note
        the important difference on  the operator  ().  In
        the IndexedMap this operator returns  the Key.  In
        the IndexedDataMap this operator returns the Item.

        See  the  class   Map   from NCollection   for   a
        discussion about the number of buckets.
        """
        this = _StdSelect.new_NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher theOther) -> NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap
        :rtype: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher theOther) -> NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap
        :rtype: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_ReSize(self, *args)


    def Add(self, *args):
        """
        Add(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Handle_SelectBasics_EntityOwner theKey1, handle< StdSelect_Prs > const & theItem) -> Standard_Integer

        Returns the Index of already bound Key or appends new Key with specified Item value.
        @param theKey1 Key to search (and to bind, if it was not bound already)
        @param theItem Item value to set for newly bound Key; ignored if Key was already bound
        @return index of Key

        :type theKey1: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Add(self, *args)


    def Contains(self, *args):
        """
        Contains(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Handle_SelectBasics_EntityOwner theKey1) -> Standard_Boolean

        Contains

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Contains(self, *args)


    def Substitute(self, *args):
        """
        Substitute(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Standard_Integer const theIndex, Handle_SelectBasics_EntityOwner theKey1, handle< StdSelect_Prs > const & theItem)

        Substitute

        :type theIndex: int
        :type theKey1: const TheKeyType &
        :type theItem: const TheItemType &

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Substitute(self, *args)


    def Swap(self, *args):
        """
        Swap(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Standard_Integer const theIndex1, Standard_Integer const theIndex2)

        Swaps two elements with the given indices.

        :type theIndex1: int
        :type theIndex2: int

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Swap(self, *args)


    def RemoveLast(self, *args):
        """
        RemoveLast(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self)

        RemoveLast


        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_RemoveLast(self, *args)


    def RemoveFromIndex(self, *args):
        """
        RemoveFromIndex(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Standard_Integer const theIndex)

        Remove the key of the given index.
        Caution! The index of the last key can be changed.

        :type theIndex: int

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_RemoveFromIndex(self, *args)


    def RemoveKey(self, *args):
        """
        RemoveKey(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Handle_SelectBasics_EntityOwner theKey1)

        Remove the given key.
        Caution! The index of the last key can be changed.

        :type theKey1: const TheKeyType &

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_RemoveKey(self, *args)


    def FindKey(self, *args):
        """
        FindKey

        :type theIndex: int
        :rtype: const TheKeyType &

        """
        res = _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_FindKey(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FindFromIndex(self, *args):
        """
        FindFromIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_FindFromIndex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFromIndex(self, *args):
        """
        ChangeFromIndex(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Standard_Integer const theIndex) -> handle< StdSelect_Prs > &

        ChangeFromIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_ChangeFromIndex(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FindIndex(self, *args):
        """
        FindIndex(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Handle_SelectBasics_EntityOwner theKey1) -> Standard_Integer

        FindIndex

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_FindIndex(self, *args)


    def ChangeFromKey(self, *args):
        """
        ChangeFromKey(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Handle_SelectBasics_EntityOwner theKey1) -> handle< StdSelect_Prs > &

        ChangeFromKey

        :type theKey1: const TheKeyType &
        :rtype: TheItemType &

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_ChangeFromKey(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Handle_SelectBasics_EntityOwner theKey1) -> handle< StdSelect_Prs > const *

        Seek returns pointer to Item by Key. Returns
        NULL if Key was not found.

        :type theKey1: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Seek(self, *args)


    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Handle_SelectBasics_EntityOwner theKey1) -> handle< StdSelect_Prs > *

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL if Key was not found.

        :type theKey1: const TheKeyType &
        :rtype: TheItemType *

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_ChangeSeek(self, *args)


    def FindFromKey(self, *args):
        """
        FindFromKey

        :type theKey1: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_FindFromKey(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_Size(self, *args)


    def __iter__(self):
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher___iter__(self)
    __swig_destroy__ = _StdSelect.delete_NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher
NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_swigregister = _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_swigregister
NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_swigregister(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher)

class NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _StdSelect.new_NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdSelect.delete_NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_IteratorHelper

    def __next__(self):
        return _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_IteratorHelper___next__(self)
NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_IteratorHelper_swigregister = _StdSelect.NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_IteratorHelper_swigregister
NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_IteratorHelper_swigregister(NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher_IteratorHelper)


try:
	StdSelect_IndexedDataMapOfOwnerPrs = NCollection_IndexedDataMap_Handle_SelectBasics_EntityOwner_Handle_StdSelect_Prs_TColStd_MapTransientHasher
except NameError:
	pass # does not exist, probably ignored


try:
	TColStd_MapTransientHasher = TColStd.NCollection_DefaultHasher_Handle_Standard_Transient
except AttributeError:
	pass # does not exist, probably ignored



