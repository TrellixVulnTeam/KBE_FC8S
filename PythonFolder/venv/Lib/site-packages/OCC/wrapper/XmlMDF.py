# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMDF')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMDF')
    _XmlMDF = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMDF', [dirname(__file__)])
        except ImportError:
            import _XmlMDF
            return _XmlMDF
        try:
            _mod = imp.load_module('_XmlMDF', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMDF = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMDF
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDF.delete_SwigPyIterator

    def value(self):
        return _XmlMDF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMDF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMDF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMDF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMDF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMDF.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMDF.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMDF.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMDF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMDF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMDF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMDF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMDF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMDF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMDF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMDF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMDF.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMDF.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlMDF.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMDF.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMDF.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDF.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlMDF.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlMDF.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlMDF.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMDF.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlMDF.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMDF.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMDF.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDF.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlMDF.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlMDF.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlMDF.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlMDF.ptr_to_number(item)
ptr_to_number = _XmlMDF.ptr_to_number

def HashCode(*args):
    return _XmlMDF.HashCode(*args)
HashCode = _XmlMDF.HashCode

def ptr_equal(a, b):
    return _XmlMDF.ptr_equal(a, b)
ptr_equal = _XmlMDF.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class XmlMDF_ADriver(Standard.Standard_Transient):
    """Attribute Storage/Retrieval Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDF_ADriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDF_ADriver(self) 
            return h


    def VersionNumber(self, *args):
        """
        VersionNumber(XmlMDF_ADriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.XmlMDF_ADriver_VersionNumber(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDF_ADriver self) -> Handle_TDF_Attribute

        Creates a new attribute from TDF.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDF.XmlMDF_ADriver_NewEmpty(self, *args)


    def SourceType(self, *args):
        """
        SourceType(XmlMDF_ADriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDF.XmlMDF_ADriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDF.XmlMDF_ADriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Paste(self, *args):
        """
        Paste(XmlMDF_ADriver self, XmlObjMgt_Persistent aSource, Handle_TDF_Attribute aTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher aRelocTable) -> Standard_Boolean
        Paste(XmlMDF_ADriver self, Handle_TDF_Attribute aSource, XmlObjMgt_Persistent aTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher aRelocTable)

        Translate the contents of <aSource> and put it
        into <aTarget>, using the relocation table
        <aRelocTable> to keep the sharings.

        :type aSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type aTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type aRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDF.XmlMDF_ADriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDF.XmlMDF_ADriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDF.XmlMDF_ADriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.XmlMDF_ADriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ADriver
XmlMDF_ADriver_swigregister = _XmlMDF.XmlMDF_ADriver_swigregister
XmlMDF_ADriver_swigregister(XmlMDF_ADriver)

def XmlMDF_ADriver_get_type_name(*args):
    """
    XmlMDF_ADriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDF.XmlMDF_ADriver_get_type_name(*args)

def XmlMDF_ADriver_get_type_descriptor(*args):
    """
    XmlMDF_ADriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDF.XmlMDF_ADriver_get_type_descriptor(*args)

class XmlMDF_TagSourceDriver(XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDF_TagSourceDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDF_TagSourceDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDF_TagSourceDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDF_TagSourceDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDF.new_XmlMDF_TagSourceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDF_TagSourceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDF.XmlMDF_TagSourceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDF_TagSourceDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDF_TagSourceDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDF.XmlMDF_TagSourceDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDF.XmlMDF_TagSourceDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDF.XmlMDF_TagSourceDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.XmlMDF_TagSourceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDF.delete_XmlMDF_TagSourceDriver
XmlMDF_TagSourceDriver_swigregister = _XmlMDF.XmlMDF_TagSourceDriver_swigregister
XmlMDF_TagSourceDriver_swigregister(XmlMDF_TagSourceDriver)

def XmlMDF_TagSourceDriver_get_type_name(*args):
    """
    XmlMDF_TagSourceDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDF.XmlMDF_TagSourceDriver_get_type_name(*args)

def XmlMDF_TagSourceDriver_get_type_descriptor(*args):
    """
    XmlMDF_TagSourceDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDF.XmlMDF_TagSourceDriver_get_type_descriptor(*args)

class XmlMDF_ReferenceDriver(XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDF_ReferenceDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDF_ReferenceDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDF_ReferenceDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDF_ReferenceDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDF.new_XmlMDF_ReferenceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDF_ReferenceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDF.XmlMDF_ReferenceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDF_ReferenceDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDF_ReferenceDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDF.XmlMDF_ReferenceDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDF.XmlMDF_ReferenceDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDF.XmlMDF_ReferenceDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.XmlMDF_ReferenceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ReferenceDriver
XmlMDF_ReferenceDriver_swigregister = _XmlMDF.XmlMDF_ReferenceDriver_swigregister
XmlMDF_ReferenceDriver_swigregister(XmlMDF_ReferenceDriver)

def XmlMDF_ReferenceDriver_get_type_name(*args):
    """
    XmlMDF_ReferenceDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDF.XmlMDF_ReferenceDriver_get_type_name(*args)

def XmlMDF_ReferenceDriver_get_type_descriptor(*args):
    """
    XmlMDF_ReferenceDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDF.XmlMDF_ReferenceDriver_get_type_descriptor(*args)

class NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,opencascade::handle< XmlMDF_ADriver >,TCollection_AsciiString >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,opencascade::handle< XmlMDF_ADriver >,TCollection_AsciiString >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,opencascade::handle< XmlMDF_ADriver >,TCollection_AsciiString >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,opencascade::handle< XmlMDF_ADriver >,TCollection_AsciiString >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _XmlMDF.new_NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString theOther) -> NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString theOther) -> NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, TCollection_AsciiString theKey, Handle_XmlMDF_ADriver theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, TCollection_AsciiString theKey, Handle_XmlMDF_ADriver theItem) -> Handle_XmlMDF_ADriver

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Handle_XmlMDF_ADriver

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Handle_XmlMDF_ADriver

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Handle_XmlMDF_ADriver

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_Size(self, *args)


    def __iter__(self):
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString___iter__(self)
    __swig_destroy__ = _XmlMDF.delete_NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString
NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_swigregister = _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_swigregister
NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_swigregister(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString)

class NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XmlMDF.new_NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDF.delete_NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IteratorHelper

    def __next__(self):
        return _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IteratorHelper___next__(self)
NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IteratorHelper_swigregister = _XmlMDF.NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IteratorHelper_swigregister
NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IteratorHelper_swigregister(NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString_IteratorHelper)


try:
	XmlMDF_MapOfDriver = NCollection_DataMap_TCollection_AsciiString_Handle_XmlMDF_ADriver_TCollection_AsciiString
except NameError:
	pass # does not exist, probably ignored

class Handle_XmlMDF_ReferenceDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDF_ReferenceDriver self)

        Nullify the handle


        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDF_ReferenceDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDF_ReferenceDriver self, XmlMDF_ReferenceDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDF_ReferenceDriver self, Handle_XmlMDF_ReferenceDriver theHandle) -> Handle_XmlMDF_ReferenceDriver
        assign(Handle_XmlMDF_ReferenceDriver self, XmlMDF_ReferenceDriver thePtr) -> Handle_XmlMDF_ReferenceDriver
        assign(Handle_XmlMDF_ReferenceDriver self, Handle_XmlMDF_ReferenceDriver theHandle) -> Handle_XmlMDF_ReferenceDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDF_ReferenceDriver self) -> XmlMDF_ReferenceDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDF_ReferenceDriver self) -> XmlMDF_ReferenceDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDF_ReferenceDriver self) -> XmlMDF_ReferenceDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDF.Handle_XmlMDF_ReferenceDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDF.new_Handle_XmlMDF_ReferenceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDF.Handle_XmlMDF_ReferenceDriver_DownCast)
    __swig_destroy__ = _XmlMDF.delete_Handle_XmlMDF_ReferenceDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDF_ReferenceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDF_ReferenceDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDF_ReferenceDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDF_ReferenceDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.Handle_XmlMDF_ReferenceDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.Handle_XmlMDF_ReferenceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDF_ReferenceDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDF_ReferenceDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDF.Handle_XmlMDF_ReferenceDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDF_ReferenceDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDF_ReferenceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDF_ReferenceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDF_ReferenceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDF_ReferenceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDF_ReferenceDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDF_ReferenceDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDF_ReferenceDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDF_ReferenceDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_ReferenceDriver_DecrementRefCounter(self, *args)

Handle_XmlMDF_ReferenceDriver_swigregister = _XmlMDF.Handle_XmlMDF_ReferenceDriver_swigregister
Handle_XmlMDF_ReferenceDriver_swigregister(Handle_XmlMDF_ReferenceDriver)

def Handle_XmlMDF_ReferenceDriver_DownCast(thing):
    return _XmlMDF.Handle_XmlMDF_ReferenceDriver_DownCast(thing)
Handle_XmlMDF_ReferenceDriver_DownCast = _XmlMDF.Handle_XmlMDF_ReferenceDriver_DownCast

class XmlMDF_(object):
    """
    This package provides classes and methods to
    translate a transient DF into a persistent one and
    vice versa.

    Driver

    A driver is a tool used to translate a transient
    attribute into a persistent one and vice versa.

    Driver Table

    A driver table is an object building links between
    object types and object drivers. In the
    translation process, a driver table is asked to
    give a translation driver for each current object
    to be translated.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FromTo(*args):
        """
        FromTo(Handle_TDF_Data aSource, LDOM_Element aTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher aReloc, Handle_XmlMDF_ADriverTable aDrivers)
        FromTo(LDOM_Element aSource, Handle_TDF_Data aTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher aReloc, Handle_XmlMDF_ADriverTable aDrivers) -> Standard_Boolean

        Translates a persistent <aSource> into a transient
        <aTarget>.
        Returns True if completed successfully (False on error)

        :type aSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type aTarget: OCC.wrapper.TDF.Handle_TDF_Data
        :type aReloc: OCC.wrapper.XmlObjMgt.XmlObjMgt_RRelocationTable
        :type aDrivers: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.XmlMDF__FromTo(*args)

    FromTo = staticmethod(FromTo)

    def AddDrivers(*args):
        """
        AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger theMessageDriver)

        Adds the attribute storage drivers to <aDriverSeq>.

        :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _XmlMDF.XmlMDF__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def __init__(self):
        """
        This package provides classes and methods to
        translate a transient DF into a persistent one and
        vice versa.

        Driver

        A driver is a tool used to translate a transient
        attribute into a persistent one and vice versa.

        Driver Table

        A driver table is an object building links between
        object types and object drivers. In the
        translation process, a driver table is asked to
        give a translation driver for each current object
        to be translated.
        """
        this = _XmlMDF.new_XmlMDF_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDF.delete_XmlMDF_
XmlMDF__swigregister = _XmlMDF.XmlMDF__swigregister
XmlMDF__swigregister(XmlMDF_)

def XmlMDF__FromTo(*args):
    """
    FromTo(Handle_TDF_Data aSource, LDOM_Element aTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher aReloc, Handle_XmlMDF_ADriverTable aDrivers)
    XmlMDF__FromTo(LDOM_Element aSource, Handle_TDF_Data aTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher aReloc, Handle_XmlMDF_ADriverTable aDrivers) -> Standard_Boolean

    Translates a persistent <aSource> into a transient
    <aTarget>.
    Returns True if completed successfully (False on error)

    :type aSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
    :type aTarget: OCC.wrapper.TDF.Handle_TDF_Data
    :type aReloc: OCC.wrapper.XmlObjMgt.XmlObjMgt_RRelocationTable
    :type aDrivers: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XmlMDF.XmlMDF__FromTo(*args)

def XmlMDF__AddDrivers(*args):
    """
    XmlMDF__AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger theMessageDriver)

    Adds the attribute storage drivers to <aDriverSeq>.

    :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
    :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _XmlMDF.XmlMDF__AddDrivers(*args)

class Handle_XmlMDF_ADriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDF_ADriver self)

        Nullify the handle


        """
        return _XmlMDF.Handle_XmlMDF_ADriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDF_ADriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDF_ADriver self, XmlMDF_ADriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDF_ADriver self, Handle_XmlMDF_ADriver theHandle) -> Handle_XmlMDF_ADriver
        assign(Handle_XmlMDF_ADriver self, XmlMDF_ADriver thePtr) -> Handle_XmlMDF_ADriver
        assign(Handle_XmlMDF_ADriver self, Handle_XmlMDF_ADriver theHandle) -> Handle_XmlMDF_ADriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDF_ADriver self) -> XmlMDF_ADriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDF_ADriver self) -> XmlMDF_ADriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDF.Handle_XmlMDF_ADriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDF_ADriver self) -> XmlMDF_ADriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDF.Handle_XmlMDF_ADriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDF.Handle_XmlMDF_ADriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDF.Handle_XmlMDF_ADriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDF.new_Handle_XmlMDF_ADriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDF.Handle_XmlMDF_ADriver_DownCast)
    __swig_destroy__ = _XmlMDF.delete_Handle_XmlMDF_ADriver

    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDF_ADriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_VersionNumber(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDF_ADriver self) -> Handle_TDF_Attribute

        Creates a new attribute from TDF.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_NewEmpty(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDF_ADriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDF.Handle_XmlMDF_ADriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Paste(self, *args):
        """
        Paste(Handle_XmlMDF_ADriver self, XmlObjMgt_Persistent aSource, Handle_TDF_Attribute aTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher aRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDF_ADriver self, Handle_TDF_Attribute aSource, XmlObjMgt_Persistent aTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher aRelocTable)

        Translate the contents of <aSource> and put it
        into <aTarget>, using the relocation table
        <aRelocTable> to keep the sharings.

        :type aSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type aTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type aRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDF_ADriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.Handle_XmlMDF_ADriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.Handle_XmlMDF_ADriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDF_ADriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDF.Handle_XmlMDF_ADriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDF_ADriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDF_ADriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDF_ADriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDF_ADriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDF_ADriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDF_ADriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDF_ADriver self)

        Increments the reference counter of this object


        """
        return _XmlMDF.Handle_XmlMDF_ADriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDF_ADriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_ADriver_DecrementRefCounter(self, *args)

Handle_XmlMDF_ADriver_swigregister = _XmlMDF.Handle_XmlMDF_ADriver_swigregister
Handle_XmlMDF_ADriver_swigregister(Handle_XmlMDF_ADriver)

def Handle_XmlMDF_ADriver_DownCast(thing):
    return _XmlMDF.Handle_XmlMDF_ADriver_DownCast(thing)
Handle_XmlMDF_ADriver_DownCast = _XmlMDF.Handle_XmlMDF_ADriver_DownCast

class NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self) -> NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< XmlMDF_ADriver >,TColStd_MapTransientHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self) -> NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< XmlMDF_ADriver >,TColStd_MapTransientHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self) -> NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< XmlMDF_ADriver >,TColStd_MapTransientHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self) -> NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< XmlMDF_ADriver >,TColStd_MapTransientHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _XmlMDF.new_NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher theOther) -> NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher theOther) -> NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Handle_Standard_Type theKey, Handle_XmlMDF_ADriver theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Handle_Standard_Type theKey, Handle_XmlMDF_ADriver theItem) -> Handle_XmlMDF_ADriver

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Handle_Standard_Type theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Handle_Standard_Type theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Handle_Standard_Type theKey) -> Handle_XmlMDF_ADriver

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Handle_Standard_Type theKey) -> Handle_XmlMDF_ADriver

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Handle_Standard_Type theKey) -> Handle_XmlMDF_ADriver

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_Size(self, *args)


    def __iter__(self):
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher___iter__(self)
    __swig_destroy__ = _XmlMDF.delete_NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher
NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_swigregister = _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_swigregister
NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_swigregister(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher)

class NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XmlMDF.new_NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDF.delete_NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IteratorHelper

    def __next__(self):
        return _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IteratorHelper___next__(self)
NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IteratorHelper_swigregister = _XmlMDF.NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IteratorHelper_swigregister
NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IteratorHelper_swigregister(NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher_IteratorHelper)


try:
	XmlMDF_TypeADriverMap = NCollection_DataMap_Handle_Standard_Type_Handle_XmlMDF_ADriver_TColStd_MapTransientHasher
except NameError:
	pass # does not exist, probably ignored

class Handle_XmlMDF_TagSourceDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDF_TagSourceDriver self)

        Nullify the handle


        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDF_TagSourceDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDF_TagSourceDriver self, XmlMDF_TagSourceDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDF_TagSourceDriver self, Handle_XmlMDF_TagSourceDriver theHandle) -> Handle_XmlMDF_TagSourceDriver
        assign(Handle_XmlMDF_TagSourceDriver self, XmlMDF_TagSourceDriver thePtr) -> Handle_XmlMDF_TagSourceDriver
        assign(Handle_XmlMDF_TagSourceDriver self, Handle_XmlMDF_TagSourceDriver theHandle) -> Handle_XmlMDF_TagSourceDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDF_TagSourceDriver self) -> XmlMDF_TagSourceDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDF_TagSourceDriver self) -> XmlMDF_TagSourceDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDF_TagSourceDriver self) -> XmlMDF_TagSourceDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDF.Handle_XmlMDF_TagSourceDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDF.new_Handle_XmlMDF_TagSourceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDF.Handle_XmlMDF_TagSourceDriver_DownCast)
    __swig_destroy__ = _XmlMDF.delete_Handle_XmlMDF_TagSourceDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDF_TagSourceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDF_TagSourceDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDF_TagSourceDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDF_TagSourceDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.Handle_XmlMDF_TagSourceDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.Handle_XmlMDF_TagSourceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDF_TagSourceDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDF_TagSourceDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDF.Handle_XmlMDF_TagSourceDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDF_TagSourceDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDF_TagSourceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDF_TagSourceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDF_TagSourceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDF_TagSourceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDF_TagSourceDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDF_TagSourceDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDF_TagSourceDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDF_TagSourceDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_TagSourceDriver_DecrementRefCounter(self, *args)

Handle_XmlMDF_TagSourceDriver_swigregister = _XmlMDF.Handle_XmlMDF_TagSourceDriver_swigregister
Handle_XmlMDF_TagSourceDriver_swigregister(Handle_XmlMDF_TagSourceDriver)

def Handle_XmlMDF_TagSourceDriver_DownCast(thing):
    return _XmlMDF.Handle_XmlMDF_TagSourceDriver_DownCast(thing)
Handle_XmlMDF_TagSourceDriver_DownCast = _XmlMDF.Handle_XmlMDF_TagSourceDriver_DownCast

class XmlMDF_ADriverTable(Standard.Standard_Transient):
    """
    A driver table is an object building links between
    object types and object drivers. In the
    translation process, a driver table is asked to
    give a translation driver for each current object
    to be translated.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDF_ADriverTable
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDF_ADriverTable(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDF_ADriverTable self) -> XmlMDF_ADriverTable

        Creates a mutable ADriverTable from XmlMDF.


        """
        this = _XmlMDF.new_XmlMDF_ADriverTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AddDriver(self, *args):
        """
        AddDriver(XmlMDF_ADriverTable self, Handle_XmlMDF_ADriver anHDriver)

        Sets a translation driver: <aDriver>.

        :type anHDriver: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriver

        """
        return _XmlMDF.XmlMDF_ADriverTable_AddDriver(self, *args)


    def GetDrivers(self, *args):
        """
        Gets a map of drivers.

        :rtype: OCC.wrapper.XmlMDF.XmlMDF_TypeADriverMap

        """
        res = _XmlMDF.XmlMDF_ADriverTable_GetDrivers(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetDriver(self, *args):
        """
        GetDriver(XmlMDF_ADriverTable self, Handle_Standard_Type aType, Handle_XmlMDF_ADriver anHDriver) -> Standard_Boolean

        Gets a driver <aDriver> according to <aType>

        Returns True if a driver is found; false otherwise.

        :type aType: OCC.wrapper.Standard.Handle_Standard_Type
        :type anHDriver: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriver
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.XmlMDF_ADriverTable_GetDriver(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDF.XmlMDF_ADriverTable_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDF.XmlMDF_ADriverTable_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.XmlMDF_ADriverTable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ADriverTable
XmlMDF_ADriverTable_swigregister = _XmlMDF.XmlMDF_ADriverTable_swigregister
XmlMDF_ADriverTable_swigregister(XmlMDF_ADriverTable)

def XmlMDF_ADriverTable_get_type_name(*args):
    """
    XmlMDF_ADriverTable_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDF.XmlMDF_ADriverTable_get_type_name(*args)

def XmlMDF_ADriverTable_get_type_descriptor(*args):
    """
    XmlMDF_ADriverTable_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDF.XmlMDF_ADriverTable_get_type_descriptor(*args)


try:
	TColStd_MapTransientHasher = TColStd.NCollection_DefaultHasher_Handle_Standard_Transient
except AttributeError:
	pass # does not exist, probably ignored

class Handle_XmlMDF_ADriverTable(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDF_ADriverTable self)

        Nullify the handle


        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDF_ADriverTable self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDF_ADriverTable self, XmlMDF_ADriverTable thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDF_ADriverTable self, Handle_XmlMDF_ADriverTable theHandle) -> Handle_XmlMDF_ADriverTable
        assign(Handle_XmlMDF_ADriverTable self, XmlMDF_ADriverTable thePtr) -> Handle_XmlMDF_ADriverTable
        assign(Handle_XmlMDF_ADriverTable self, Handle_XmlMDF_ADriverTable theHandle) -> Handle_XmlMDF_ADriverTable

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDF_ADriverTable self) -> XmlMDF_ADriverTable

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDF_ADriverTable self) -> XmlMDF_ADriverTable

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDF_ADriverTable self) -> XmlMDF_ADriverTable

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable___ref__(self, *args)


    def __hash__(self):
        return _XmlMDF.Handle_XmlMDF_ADriverTable___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDF.Handle_XmlMDF_ADriverTable___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDF.new_Handle_XmlMDF_ADriverTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDF.Handle_XmlMDF_ADriverTable_DownCast)
    __swig_destroy__ = _XmlMDF.delete_Handle_XmlMDF_ADriverTable

    def AddDriver(self, *args):
        """
        AddDriver(Handle_XmlMDF_ADriverTable self, Handle_XmlMDF_ADriver anHDriver)

        Sets a translation driver: <aDriver>.

        :type anHDriver: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriver

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_AddDriver(self, *args)


    def GetDrivers(self, *args):
        """
        Gets a map of drivers.

        :rtype: OCC.wrapper.XmlMDF.XmlMDF_TypeADriverMap

        """
        res = _XmlMDF.Handle_XmlMDF_ADriverTable_GetDrivers(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetDriver(self, *args):
        """
        GetDriver(Handle_XmlMDF_ADriverTable self, Handle_Standard_Type aType, Handle_XmlMDF_ADriver anHDriver) -> Standard_Boolean

        Gets a driver <aDriver> according to <aType>

        Returns True if a driver is found; false otherwise.

        :type aType: OCC.wrapper.Standard.Handle_Standard_Type
        :type anHDriver: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriver
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_GetDriver(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDF_ADriverTable self) -> char const *

        :rtype: const char *

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.Handle_XmlMDF_ADriverTable_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDF.Handle_XmlMDF_ADriverTable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDF_ADriverTable self)

        Memory deallocator for transient classes


        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDF_ADriverTable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDF_ADriverTable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDF_ADriverTable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDF_ADriverTable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDF_ADriverTable self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDF_ADriverTable self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDF_ADriverTable self)

        Increments the reference counter of this object


        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDF_ADriverTable self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDF.Handle_XmlMDF_ADriverTable_DecrementRefCounter(self, *args)

Handle_XmlMDF_ADriverTable_swigregister = _XmlMDF.Handle_XmlMDF_ADriverTable_swigregister
Handle_XmlMDF_ADriverTable_swigregister(Handle_XmlMDF_ADriverTable)

def Handle_XmlMDF_ADriverTable_DownCast(thing):
    return _XmlMDF.Handle_XmlMDF_ADriverTable_DownCast(thing)
Handle_XmlMDF_ADriverTable_DownCast = _XmlMDF.Handle_XmlMDF_ADriverTable_DownCast



