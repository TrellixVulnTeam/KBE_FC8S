# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DrawDim')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DrawDim')
    _DrawDim = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DrawDim', [dirname(__file__)])
        except ImportError:
            import _DrawDim
            return _DrawDim
        try:
            _mod = imp.load_module('_DrawDim', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DrawDim = swig_import_helper()
    del swig_import_helper
else:
    import _DrawDim
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DrawDim.delete_SwigPyIterator

    def value(self):
        return _DrawDim.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DrawDim.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DrawDim.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DrawDim.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DrawDim.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DrawDim.SwigPyIterator_copy(self)

    def next(self):
        return _DrawDim.SwigPyIterator_next(self)

    def __next__(self):
        return _DrawDim.SwigPyIterator___next__(self)

    def previous(self):
        return _DrawDim.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DrawDim.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DrawDim.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DrawDim.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DrawDim.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DrawDim.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DrawDim.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DrawDim.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DrawDim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DrawDim.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_DrawDim.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _DrawDim.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DrawDim.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DrawDim.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _DrawDim.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _DrawDim.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _DrawDim.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DrawDim.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_DrawDim.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _DrawDim.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DrawDim.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DrawDim.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _DrawDim.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _DrawDim.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _DrawDim.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _DrawDim.ptr_to_number(item)
ptr_to_number = _DrawDim.ptr_to_number

def HashCode(*args):
    return _DrawDim.HashCode(*args)
HashCode = _DrawDim.HashCode

def ptr_equal(a, b):
    return _DrawDim.ptr_equal(a, b)
ptr_equal = _DrawDim.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
class DrawDim_Dimension(Draw.Draw_Drawable3D):
    """Dimension between planes and cylinder"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_Dimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_Dimension(self) 
            return h


    def SetValue(self, *args):
        """
        SetValue(DrawDim_Dimension self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.DrawDim_Dimension_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(DrawDim_Dimension self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.DrawDim_Dimension_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(DrawDim_Dimension self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.DrawDim_Dimension_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(DrawDim_Dimension self, Draw_Color C)
        TextColor(DrawDim_Dimension self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.DrawDim_Dimension_TextColor(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_Dimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_Dimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_Dimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_Dimension
DrawDim_Dimension_swigregister = _DrawDim.DrawDim_Dimension_swigregister
DrawDim_Dimension_swigregister(DrawDim_Dimension)

def DrawDim_Dimension_get_type_name(*args):
    """
    DrawDim_Dimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_Dimension_get_type_name(*args)

def DrawDim_Dimension_get_type_descriptor(*args):
    """
    DrawDim_Dimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_Dimension_get_type_descriptor(*args)

class DrawDim_PlanarDimension(DrawDim_Dimension):
    """Dimensions between point, line and circle ON a plane"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_PlanarDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_PlanarDimension(self) 
            return h


    def SetPlane(self, *args):
        """
        SetPlane(DrawDim_PlanarDimension self, TopoDS_Face plane)

        :type plane: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.DrawDim_PlanarDimension_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        GetPlane(DrawDim_PlanarDimension self) -> TopoDS_Face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.DrawDim_PlanarDimension_GetPlane(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_PlanarDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_PlanarDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_PlanarDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_PlanarDimension
DrawDim_PlanarDimension_swigregister = _DrawDim.DrawDim_PlanarDimension_swigregister
DrawDim_PlanarDimension_swigregister(DrawDim_PlanarDimension)

def DrawDim_PlanarDimension_get_type_name(*args):
    """
    DrawDim_PlanarDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_PlanarDimension_get_type_name(*args)

def DrawDim_PlanarDimension_get_type_descriptor(*args):
    """
    DrawDim_PlanarDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_PlanarDimension_get_type_descriptor(*args)

class DrawDim_Distance(DrawDim_Dimension):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_Distance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_Distance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawDim_Distance self, TopoDS_Face plane1, TopoDS_Face plane2) -> DrawDim_Distance
        __init__(DrawDim_Distance self, TopoDS_Face plane1) -> DrawDim_Distance

        :type plane1: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _DrawDim.new_DrawDim_Distance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Plane1(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.DrawDim_Distance_Plane1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Plane2(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.DrawDim_Distance_Plane2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(DrawDim_Distance self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.DrawDim_Distance_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_Distance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_Distance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_Distance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_Distance
DrawDim_Distance_swigregister = _DrawDim.DrawDim_Distance_swigregister
DrawDim_Distance_swigregister(DrawDim_Distance)

def DrawDim_Distance_get_type_name(*args):
    """
    DrawDim_Distance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_Distance_get_type_name(*args)

def DrawDim_Distance_get_type_descriptor(*args):
    """
    DrawDim_Distance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_Distance_get_type_descriptor(*args)

class DrawDim_PlanarRadius(DrawDim_PlanarDimension):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_PlanarRadius
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_PlanarRadius(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawDim_PlanarRadius self, TopoDS_Face plane, TopoDS_Shape circle) -> DrawDim_PlanarRadius
        __init__(DrawDim_PlanarRadius self, TopoDS_Shape circle) -> DrawDim_PlanarRadius

        :type circle: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _DrawDim.new_DrawDim_PlanarRadius(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawDim_PlanarRadius self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.DrawDim_PlanarRadius_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_PlanarRadius_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_PlanarRadius_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_PlanarRadius_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_PlanarRadius
DrawDim_PlanarRadius_swigregister = _DrawDim.DrawDim_PlanarRadius_swigregister
DrawDim_PlanarRadius_swigregister(DrawDim_PlanarRadius)

def DrawDim_PlanarRadius_get_type_name(*args):
    """
    DrawDim_PlanarRadius_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_PlanarRadius_get_type_name(*args)

def DrawDim_PlanarRadius_get_type_descriptor(*args):
    """
    DrawDim_PlanarRadius_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_PlanarRadius_get_type_descriptor(*args)

class DrawDim_Angle(DrawDim_Dimension):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_Angle
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_Angle(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawDim_Angle self, TopoDS_Face plane1, TopoDS_Face plane2) -> DrawDim_Angle

        :type plane1: OCC.wrapper.TopoDS.TopoDS_Face
        :type plane2: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _DrawDim.new_DrawDim_Angle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Plane1(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.DrawDim_Angle_Plane1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Plane2(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.DrawDim_Angle_Plane2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(DrawDim_Angle self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.DrawDim_Angle_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_Angle_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_Angle_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_Angle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_Angle
DrawDim_Angle_swigregister = _DrawDim.DrawDim_Angle_swigregister
DrawDim_Angle_swigregister(DrawDim_Angle)

def DrawDim_Angle_get_type_name(*args):
    """
    DrawDim_Angle_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_Angle_get_type_name(*args)

def DrawDim_Angle_get_type_descriptor(*args):
    """
    DrawDim_Angle_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_Angle_get_type_descriptor(*args)

class DrawDim_PlanarDistance(DrawDim_PlanarDimension):
    """
    PlanarDistance point/point
    PlanarDistance point/line
    PlanarDistance line/line
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_PlanarDistance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_PlanarDistance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawDim_PlanarDistance self, TopoDS_Face plane, TopoDS_Shape point1, TopoDS_Shape point2) -> DrawDim_PlanarDistance
        __init__(DrawDim_PlanarDistance self, TopoDS_Shape geom1, TopoDS_Shape geom2) -> DrawDim_PlanarDistance

        :type geom1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type geom2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _DrawDim.new_DrawDim_PlanarDistance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawDim_PlanarDistance self, Draw_Display dis)

        private

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.DrawDim_PlanarDistance_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_PlanarDistance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_PlanarDistance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_PlanarDistance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_PlanarDistance
DrawDim_PlanarDistance_swigregister = _DrawDim.DrawDim_PlanarDistance_swigregister
DrawDim_PlanarDistance_swigregister(DrawDim_PlanarDistance)

def DrawDim_PlanarDistance_get_type_name(*args):
    """
    DrawDim_PlanarDistance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_PlanarDistance_get_type_name(*args)

def DrawDim_PlanarDistance_get_type_descriptor(*args):
    """
    DrawDim_PlanarDistance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_PlanarDistance_get_type_descriptor(*args)

class Handle_DrawDim_PlanarDistance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_PlanarDistance self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_PlanarDistance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_PlanarDistance self, DrawDim_PlanarDistance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_PlanarDistance self, Handle_DrawDim_PlanarDistance theHandle) -> Handle_DrawDim_PlanarDistance
        assign(Handle_DrawDim_PlanarDistance self, DrawDim_PlanarDistance thePtr) -> Handle_DrawDim_PlanarDistance
        assign(Handle_DrawDim_PlanarDistance self, Handle_DrawDim_PlanarDistance theHandle) -> Handle_DrawDim_PlanarDistance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_PlanarDistance self) -> DrawDim_PlanarDistance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_PlanarDistance self) -> DrawDim_PlanarDistance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_PlanarDistance self) -> DrawDim_PlanarDistance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_PlanarDistance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_PlanarDistance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_PlanarDistance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_PlanarDistance_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_PlanarDistance

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_PlanarDistance self, Draw_Display dis)

        private

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_PlanarDistance self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarDistance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarDistance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPlane(self, *args):
        """
        SetPlane(Handle_DrawDim_PlanarDistance self, TopoDS_Face plane)

        :type plane: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        GetPlane(Handle_DrawDim_PlanarDistance self) -> TopoDS_Face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_GetPlane(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_PlanarDistance self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_PlanarDistance self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_PlanarDistance self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_PlanarDistance self, Draw_Color C)
        TextColor(Handle_DrawDim_PlanarDistance self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_TextColor(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_PlanarDistance self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_PlanarDistance self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_PlanarDistance self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_PlanarDistance self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_PlanarDistance self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_PlanarDistance self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_PlanarDistance self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_PlanarDistance self) -> Standard_Boolean
        Visible(Handle_DrawDim_PlanarDistance self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_PlanarDistance self) -> Standard_Boolean
        Protected(Handle_DrawDim_PlanarDistance self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_PlanarDistance self) -> Standard_CString
        Name(Handle_DrawDim_PlanarDistance self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_PlanarDistance self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_PlanarDistance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_PlanarDistance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_PlanarDistance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_PlanarDistance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_PlanarDistance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_PlanarDistance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_PlanarDistance self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_PlanarDistance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarDistance_DecrementRefCounter(self, *args)

Handle_DrawDim_PlanarDistance_swigregister = _DrawDim.Handle_DrawDim_PlanarDistance_swigregister
Handle_DrawDim_PlanarDistance_swigregister(Handle_DrawDim_PlanarDistance)

def Handle_DrawDim_PlanarDistance_DownCast(thing):
    return _DrawDim.Handle_DrawDim_PlanarDistance_DownCast(thing)
Handle_DrawDim_PlanarDistance_DownCast = _DrawDim.Handle_DrawDim_PlanarDistance_DownCast

class Handle_DrawDim_PlanarDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_PlanarDimension self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_PlanarDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_PlanarDimension self, DrawDim_PlanarDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_PlanarDimension self, Handle_DrawDim_PlanarDimension theHandle) -> Handle_DrawDim_PlanarDimension
        assign(Handle_DrawDim_PlanarDimension self, DrawDim_PlanarDimension thePtr) -> Handle_DrawDim_PlanarDimension
        assign(Handle_DrawDim_PlanarDimension self, Handle_DrawDim_PlanarDimension theHandle) -> Handle_DrawDim_PlanarDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_PlanarDimension self) -> DrawDim_PlanarDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_PlanarDimension self) -> DrawDim_PlanarDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_PlanarDimension self) -> DrawDim_PlanarDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_PlanarDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_PlanarDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_PlanarDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_PlanarDimension_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_PlanarDimension

    def SetPlane(self, *args):
        """
        SetPlane(Handle_DrawDim_PlanarDimension self, TopoDS_Face plane)

        :type plane: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        GetPlane(Handle_DrawDim_PlanarDimension self) -> TopoDS_Face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_GetPlane(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_PlanarDimension self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_PlanarDimension self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_PlanarDimension self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_PlanarDimension self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_PlanarDimension self, Draw_Color C)
        TextColor(Handle_DrawDim_PlanarDimension self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_TextColor(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_PlanarDimension self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_PlanarDimension self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_PlanarDimension self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_PlanarDimension self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_PlanarDimension self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_PlanarDimension self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_PlanarDimension self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_PlanarDimension self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_PlanarDimension self) -> Standard_Boolean
        Visible(Handle_DrawDim_PlanarDimension self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_PlanarDimension self) -> Standard_Boolean
        Protected(Handle_DrawDim_PlanarDimension self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_PlanarDimension self) -> Standard_CString
        Name(Handle_DrawDim_PlanarDimension self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_PlanarDimension self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_PlanarDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_PlanarDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_PlanarDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_PlanarDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_PlanarDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_PlanarDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_PlanarDimension self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_PlanarDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarDimension_DecrementRefCounter(self, *args)

Handle_DrawDim_PlanarDimension_swigregister = _DrawDim.Handle_DrawDim_PlanarDimension_swigregister
Handle_DrawDim_PlanarDimension_swigregister(Handle_DrawDim_PlanarDimension)

def Handle_DrawDim_PlanarDimension_DownCast(thing):
    return _DrawDim.Handle_DrawDim_PlanarDimension_DownCast(thing)
Handle_DrawDim_PlanarDimension_DownCast = _DrawDim.Handle_DrawDim_PlanarDimension_DownCast

class DrawDim_Radius(DrawDim_Dimension):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_Radius
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_Radius(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawDim_Radius self, TopoDS_Face cylinder) -> DrawDim_Radius

        :type cylinder: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _DrawDim.new_DrawDim_Radius(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Cylinder(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.DrawDim_Radius_Cylinder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(DrawDim_Radius self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.DrawDim_Radius_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_Radius_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_Radius_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_Radius_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_Radius
DrawDim_Radius_swigregister = _DrawDim.DrawDim_Radius_swigregister
DrawDim_Radius_swigregister(DrawDim_Radius)

def DrawDim_Radius_get_type_name(*args):
    """
    DrawDim_Radius_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_Radius_get_type_name(*args)

def DrawDim_Radius_get_type_descriptor(*args):
    """
    DrawDim_Radius_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_Radius_get_type_descriptor(*args)

class Handle_DrawDim_PlanarRadius(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_PlanarRadius self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_PlanarRadius self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_PlanarRadius self, DrawDim_PlanarRadius thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_PlanarRadius self, Handle_DrawDim_PlanarRadius theHandle) -> Handle_DrawDim_PlanarRadius
        assign(Handle_DrawDim_PlanarRadius self, DrawDim_PlanarRadius thePtr) -> Handle_DrawDim_PlanarRadius
        assign(Handle_DrawDim_PlanarRadius self, Handle_DrawDim_PlanarRadius theHandle) -> Handle_DrawDim_PlanarRadius

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_PlanarRadius self) -> DrawDim_PlanarRadius

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_PlanarRadius self) -> DrawDim_PlanarRadius

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_PlanarRadius self) -> DrawDim_PlanarRadius

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_PlanarRadius___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_PlanarRadius___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_PlanarRadius(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_PlanarRadius_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_PlanarRadius

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_PlanarRadius self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_PlanarRadius self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarRadius_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarRadius_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPlane(self, *args):
        """
        SetPlane(Handle_DrawDim_PlanarRadius self, TopoDS_Face plane)

        :type plane: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        GetPlane(Handle_DrawDim_PlanarRadius self) -> TopoDS_Face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_GetPlane(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_PlanarRadius self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_PlanarRadius self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_PlanarRadius self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_PlanarRadius self, Draw_Color C)
        TextColor(Handle_DrawDim_PlanarRadius self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_TextColor(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_PlanarRadius self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_PlanarRadius self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_PlanarRadius self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_PlanarRadius self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_PlanarRadius self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_PlanarRadius self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_PlanarRadius self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_PlanarRadius self) -> Standard_Boolean
        Visible(Handle_DrawDim_PlanarRadius self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_PlanarRadius self) -> Standard_Boolean
        Protected(Handle_DrawDim_PlanarRadius self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_PlanarRadius self) -> Standard_CString
        Name(Handle_DrawDim_PlanarRadius self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_PlanarRadius self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_PlanarRadius self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_PlanarRadius self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_PlanarRadius self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_PlanarRadius self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_PlanarRadius self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_PlanarRadius self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_PlanarRadius self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_PlanarRadius self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarRadius_DecrementRefCounter(self, *args)

Handle_DrawDim_PlanarRadius_swigregister = _DrawDim.Handle_DrawDim_PlanarRadius_swigregister
Handle_DrawDim_PlanarRadius_swigregister(Handle_DrawDim_PlanarRadius)

def Handle_DrawDim_PlanarRadius_DownCast(thing):
    return _DrawDim.Handle_DrawDim_PlanarRadius_DownCast(thing)
Handle_DrawDim_PlanarRadius_DownCast = _DrawDim.Handle_DrawDim_PlanarRadius_DownCast

class DrawDim_(object):
    """
    This package provides Drawable Dimensions.

    The classes PlanarDimension and subclasses provide
    services  to  build  drawable dimensions between
    point line and circle in a given 3d plane.

    The   classes  Dimension and   subclasses provide
    services  to build  drawable  dimensions between
    plane and cylindrical surfaces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DrawShapeName(*args):
        """
        DrawShapeName(TopoDS_Shape ashape, Standard_CString const aname)

        Commands
        ========

        :type ashape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aname: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.DrawDim__DrawShapeName(*args)

    DrawShapeName = staticmethod(DrawShapeName)

    def AllCommands(*args):
        """
        AllCommands(Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.DrawDim__AllCommands(*args)

    AllCommands = staticmethod(AllCommands)

    def PlanarDimensionCommands(*args):
        """
        PlanarDimensionCommands(Draw_Interpretor I)

        tools
        =====

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.DrawDim__PlanarDimensionCommands(*args)

    PlanarDimensionCommands = staticmethod(PlanarDimensionCommands)

    def Nearest(*args):
        """
        Nearest(TopoDS_Shape aShape, gp_Pnt apoint) -> gp_Pnt

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type apoint: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _DrawDim.DrawDim__Nearest(*args)

    Nearest = staticmethod(Nearest)

    def Lin(*args):
        """
        Lin(TopoDS_Edge e, gp_Lin l) -> Standard_Boolean

        false if <e> is not a linear edge

        :type e: OCC.wrapper.TopoDS.TopoDS_Edge
        :type l: OCC.wrapper.gp.gp_Lin
        :type infinite: bool
        :type first: float
        :type last: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.DrawDim__Lin(*args)

    Lin = staticmethod(Lin)

    def Circ(*args):
        """
        Circ(TopoDS_Edge e, gp_Circ l) -> Standard_Boolean

        false if <e> is not a circular edge

        :type e: OCC.wrapper.TopoDS.TopoDS_Edge
        :type l: OCC.wrapper.gp.gp_Circ
        :type first: float
        :type last: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.DrawDim__Circ(*args)

    Circ = staticmethod(Circ)

    def Pln(*args):
        """
        Pln(TopoDS_Face f, gp_Pln p) -> Standard_Boolean

        false if <f> is not a planar face

        :type f: OCC.wrapper.TopoDS.TopoDS_Face
        :type p: OCC.wrapper.gp.gp_Pln
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.DrawDim__Pln(*args)

    Pln = staticmethod(Pln)

    def __init__(self):
        """
        This package provides Drawable Dimensions.

        The classes PlanarDimension and subclasses provide
        services  to  build  drawable dimensions between
        point line and circle in a given 3d plane.

        The   classes  Dimension and   subclasses provide
        services  to build  drawable  dimensions between
        plane and cylindrical surfaces.
        """
        this = _DrawDim.new_DrawDim_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DrawDim.delete_DrawDim_
DrawDim__swigregister = _DrawDim.DrawDim__swigregister
DrawDim__swigregister(DrawDim_)

def DrawDim__DrawShapeName(*args):
    """
    DrawDim__DrawShapeName(TopoDS_Shape ashape, Standard_CString const aname)

    Commands
    ========

    :type ashape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aname: OCC.wrapper.Standard.Standard_CString

    """
    return _DrawDim.DrawDim__DrawShapeName(*args)

def DrawDim__AllCommands(*args):
    """
    DrawDim__AllCommands(Draw_Interpretor I)

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DrawDim.DrawDim__AllCommands(*args)

def DrawDim__PlanarDimensionCommands(*args):
    """
    DrawDim__PlanarDimensionCommands(Draw_Interpretor I)

    tools
    =====

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DrawDim.DrawDim__PlanarDimensionCommands(*args)

def DrawDim__Nearest(*args):
    """
    DrawDim__Nearest(TopoDS_Shape aShape, gp_Pnt apoint) -> gp_Pnt

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type apoint: OCC.wrapper.gp.gp_Pnt
    :rtype: OCC.wrapper.gp.gp_Pnt

    """
    return _DrawDim.DrawDim__Nearest(*args)

def DrawDim__Lin(*args):
    """
    DrawDim__Lin(TopoDS_Edge e, gp_Lin l) -> Standard_Boolean

    false if <e> is not a linear edge

    :type e: OCC.wrapper.TopoDS.TopoDS_Edge
    :type l: OCC.wrapper.gp.gp_Lin
    :type infinite: bool
    :type first: float
    :type last: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DrawDim.DrawDim__Lin(*args)

def DrawDim__Circ(*args):
    """
    DrawDim__Circ(TopoDS_Edge e, gp_Circ l) -> Standard_Boolean

    false if <e> is not a circular edge

    :type e: OCC.wrapper.TopoDS.TopoDS_Edge
    :type l: OCC.wrapper.gp.gp_Circ
    :type first: float
    :type last: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DrawDim.DrawDim__Circ(*args)

def DrawDim__Pln(*args):
    """
    DrawDim__Pln(TopoDS_Face f, gp_Pln p) -> Standard_Boolean

    false if <f> is not a planar face

    :type f: OCC.wrapper.TopoDS.TopoDS_Face
    :type p: OCC.wrapper.gp.gp_Pln
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DrawDim.DrawDim__Pln(*args)

class Handle_DrawDim_Radius(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_Radius self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_Radius_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_Radius self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_Radius_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_Radius self, DrawDim_Radius thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_Radius_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_Radius self, Handle_DrawDim_Radius theHandle) -> Handle_DrawDim_Radius
        assign(Handle_DrawDim_Radius self, DrawDim_Radius thePtr) -> Handle_DrawDim_Radius
        assign(Handle_DrawDim_Radius self, Handle_DrawDim_Radius theHandle) -> Handle_DrawDim_Radius

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_Radius_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_Radius self) -> DrawDim_Radius

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_Radius_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_Radius self) -> DrawDim_Radius

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_Radius___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_Radius self) -> DrawDim_Radius

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_Radius___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_Radius___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_Radius___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_Radius(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_Radius_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_Radius

    def Cylinder(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.Handle_DrawDim_Radius_Cylinder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_Radius self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_Radius_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_Radius self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_Radius_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_Radius_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_Radius_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_Radius self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_Radius_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_Radius self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_Radius_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_Radius self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Radius_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_Radius self, Draw_Color C)
        TextColor(Handle_DrawDim_Radius self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_Radius_TextColor(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_Radius self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Radius_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_Radius self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_Radius_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_Radius self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_Radius_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_Radius self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_Radius_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_Radius self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Radius_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_Radius self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_Radius_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_Radius self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_Radius_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_Radius self) -> Standard_Boolean
        Visible(Handle_DrawDim_Radius self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_Radius_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_Radius self) -> Standard_Boolean
        Protected(Handle_DrawDim_Radius self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_Radius_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_Radius self) -> Standard_CString
        Name(Handle_DrawDim_Radius self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_Radius_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_Radius self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_Radius_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_Radius self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_Radius self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Radius_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_Radius self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_Radius self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Radius_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_Radius self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_Radius_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_Radius self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_Radius_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_Radius self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_Radius_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_Radius self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_Radius_DecrementRefCounter(self, *args)

Handle_DrawDim_Radius_swigregister = _DrawDim.Handle_DrawDim_Radius_swigregister
Handle_DrawDim_Radius_swigregister(Handle_DrawDim_Radius)

def Handle_DrawDim_Radius_DownCast(thing):
    return _DrawDim.Handle_DrawDim_Radius_DownCast(thing)
Handle_DrawDim_Radius_DownCast = _DrawDim.Handle_DrawDim_Radius_DownCast

class Handle_DrawDim_Distance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_Distance self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_Distance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_Distance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_Distance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_Distance self, DrawDim_Distance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_Distance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_Distance self, Handle_DrawDim_Distance theHandle) -> Handle_DrawDim_Distance
        assign(Handle_DrawDim_Distance self, DrawDim_Distance thePtr) -> Handle_DrawDim_Distance
        assign(Handle_DrawDim_Distance self, Handle_DrawDim_Distance theHandle) -> Handle_DrawDim_Distance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_Distance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_Distance self) -> DrawDim_Distance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_Distance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_Distance self) -> DrawDim_Distance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_Distance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_Distance self) -> DrawDim_Distance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_Distance___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_Distance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_Distance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_Distance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_Distance_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_Distance

    def Plane1(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.Handle_DrawDim_Distance_Plane1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Plane2(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.Handle_DrawDim_Distance_Plane2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_Distance self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_Distance_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_Distance self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_Distance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_Distance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_Distance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_Distance self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_Distance_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_Distance self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_Distance_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_Distance self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Distance_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_Distance self, Draw_Color C)
        TextColor(Handle_DrawDim_Distance self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_Distance_TextColor(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_Distance self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Distance_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_Distance self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_Distance_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_Distance self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_Distance_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_Distance self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_Distance_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_Distance self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Distance_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_Distance self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_Distance_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_Distance self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_Distance_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_Distance self) -> Standard_Boolean
        Visible(Handle_DrawDim_Distance self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_Distance_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_Distance self) -> Standard_Boolean
        Protected(Handle_DrawDim_Distance self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_Distance_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_Distance self) -> Standard_CString
        Name(Handle_DrawDim_Distance self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_Distance_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_Distance self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_Distance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_Distance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_Distance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Distance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_Distance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_Distance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Distance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_Distance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_Distance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_Distance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_Distance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_Distance self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_Distance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_Distance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_Distance_DecrementRefCounter(self, *args)

Handle_DrawDim_Distance_swigregister = _DrawDim.Handle_DrawDim_Distance_swigregister
Handle_DrawDim_Distance_swigregister(Handle_DrawDim_Distance)

def Handle_DrawDim_Distance_DownCast(thing):
    return _DrawDim.Handle_DrawDim_Distance_DownCast(thing)
Handle_DrawDim_Distance_DownCast = _DrawDim.Handle_DrawDim_Distance_DownCast

class Handle_DrawDim_Angle(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_Angle self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_Angle_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_Angle self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_Angle_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_Angle self, DrawDim_Angle thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_Angle_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_Angle self, Handle_DrawDim_Angle theHandle) -> Handle_DrawDim_Angle
        assign(Handle_DrawDim_Angle self, DrawDim_Angle thePtr) -> Handle_DrawDim_Angle
        assign(Handle_DrawDim_Angle self, Handle_DrawDim_Angle theHandle) -> Handle_DrawDim_Angle

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_Angle_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_Angle self) -> DrawDim_Angle

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_Angle_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_Angle self) -> DrawDim_Angle

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_Angle___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_Angle self) -> DrawDim_Angle

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_Angle___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_Angle___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_Angle___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_Angle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_Angle_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_Angle

    def Plane1(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.Handle_DrawDim_Angle_Plane1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Plane2(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DrawDim.Handle_DrawDim_Angle_Plane2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_Angle self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_Angle_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_Angle self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_Angle_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_Angle_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_Angle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_Angle self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_Angle_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_Angle self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_Angle_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_Angle self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Angle_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_Angle self, Draw_Color C)
        TextColor(Handle_DrawDim_Angle self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_Angle_TextColor(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_Angle self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Angle_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_Angle self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_Angle_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_Angle self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_Angle_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_Angle self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_Angle_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_Angle self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Angle_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_Angle self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_Angle_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_Angle self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_Angle_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_Angle self) -> Standard_Boolean
        Visible(Handle_DrawDim_Angle self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_Angle_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_Angle self) -> Standard_Boolean
        Protected(Handle_DrawDim_Angle self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_Angle_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_Angle self) -> Standard_CString
        Name(Handle_DrawDim_Angle self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_Angle_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_Angle self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_Angle_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_Angle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_Angle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Angle_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_Angle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_Angle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Angle_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_Angle self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_Angle_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_Angle self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_Angle_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_Angle self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_Angle_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_Angle self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_Angle_DecrementRefCounter(self, *args)

Handle_DrawDim_Angle_swigregister = _DrawDim.Handle_DrawDim_Angle_swigregister
Handle_DrawDim_Angle_swigregister(Handle_DrawDim_Angle)

def Handle_DrawDim_Angle_DownCast(thing):
    return _DrawDim.Handle_DrawDim_Angle_DownCast(thing)
Handle_DrawDim_Angle_DownCast = _DrawDim.Handle_DrawDim_Angle_DownCast

class DrawDim_PlanarDiameter(DrawDim_PlanarDimension):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_PlanarDiameter
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_PlanarDiameter(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawDim_PlanarDiameter self, TopoDS_Face plane, TopoDS_Shape circle) -> DrawDim_PlanarDiameter
        __init__(DrawDim_PlanarDiameter self, TopoDS_Shape circle) -> DrawDim_PlanarDiameter

        :type circle: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _DrawDim.new_DrawDim_PlanarDiameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawDim_PlanarDiameter self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.DrawDim_PlanarDiameter_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_PlanarDiameter_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_PlanarDiameter_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_PlanarDiameter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_PlanarDiameter
DrawDim_PlanarDiameter_swigregister = _DrawDim.DrawDim_PlanarDiameter_swigregister
DrawDim_PlanarDiameter_swigregister(DrawDim_PlanarDiameter)

def DrawDim_PlanarDiameter_get_type_name(*args):
    """
    DrawDim_PlanarDiameter_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_PlanarDiameter_get_type_name(*args)

def DrawDim_PlanarDiameter_get_type_descriptor(*args):
    """
    DrawDim_PlanarDiameter_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_PlanarDiameter_get_type_descriptor(*args)

class DrawDim_PlanarAngle(DrawDim_PlanarDimension):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawDim_PlanarAngle
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawDim_PlanarAngle(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawDim_PlanarAngle self, TopoDS_Face plane, TopoDS_Shape line1, TopoDS_Shape line2) -> DrawDim_PlanarAngle
        __init__(DrawDim_PlanarAngle self, TopoDS_Shape line1, TopoDS_Shape line2) -> DrawDim_PlanarAngle

        :type line1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type line2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _DrawDim.new_DrawDim_PlanarAngle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sector(self, *args):
        """
        Sector(DrawDim_PlanarAngle self, Standard_Boolean const inverted, Standard_Boolean const reversed)

        :type inverted: bool
        :type reversed: bool

        """
        return _DrawDim.DrawDim_PlanarAngle_Sector(self, *args)


    def Position(self, *args):
        """
        Position(DrawDim_PlanarAngle self, Standard_Real const value)

        :type value: float

        """
        return _DrawDim.DrawDim_PlanarAngle_Position(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DrawDim_PlanarAngle self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.DrawDim_PlanarAngle_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawDim.DrawDim_PlanarAngle_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawDim.DrawDim_PlanarAngle_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.DrawDim_PlanarAngle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawDim.delete_DrawDim_PlanarAngle
DrawDim_PlanarAngle_swigregister = _DrawDim.DrawDim_PlanarAngle_swigregister
DrawDim_PlanarAngle_swigregister(DrawDim_PlanarAngle)

def DrawDim_PlanarAngle_get_type_name(*args):
    """
    DrawDim_PlanarAngle_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawDim.DrawDim_PlanarAngle_get_type_name(*args)

def DrawDim_PlanarAngle_get_type_descriptor(*args):
    """
    DrawDim_PlanarAngle_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawDim.DrawDim_PlanarAngle_get_type_descriptor(*args)

class Handle_DrawDim_Dimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_Dimension self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_Dimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_Dimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_Dimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_Dimension self, DrawDim_Dimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_Dimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_Dimension self, Handle_DrawDim_Dimension theHandle) -> Handle_DrawDim_Dimension
        assign(Handle_DrawDim_Dimension self, DrawDim_Dimension thePtr) -> Handle_DrawDim_Dimension
        assign(Handle_DrawDim_Dimension self, Handle_DrawDim_Dimension theHandle) -> Handle_DrawDim_Dimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_Dimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_Dimension self) -> DrawDim_Dimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_Dimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_Dimension self) -> DrawDim_Dimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_Dimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_Dimension self) -> DrawDim_Dimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_Dimension___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_Dimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_Dimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_Dimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_Dimension_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_Dimension

    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_Dimension self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_Dimension_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_Dimension self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_Dimension_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_Dimension self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Dimension_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_Dimension self, Draw_Color C)
        TextColor(Handle_DrawDim_Dimension self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_Dimension_TextColor(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_Dimension self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_Dimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_Dimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_Dimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_Dimension self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_Dimension_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_Dimension self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Dimension_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_Dimension self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_Dimension_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_Dimension self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_Dimension_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_Dimension self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_Dimension_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_Dimension self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Dimension_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_Dimension self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_Dimension_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_Dimension self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_Dimension_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_Dimension self) -> Standard_Boolean
        Visible(Handle_DrawDim_Dimension self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_Dimension_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_Dimension self) -> Standard_Boolean
        Protected(Handle_DrawDim_Dimension self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_Dimension_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_Dimension self) -> Standard_CString
        Name(Handle_DrawDim_Dimension self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_Dimension_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_Dimension self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_Dimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_Dimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_Dimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Dimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_Dimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_Dimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_Dimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_Dimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_Dimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_Dimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_Dimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_Dimension self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_Dimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_Dimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_Dimension_DecrementRefCounter(self, *args)

Handle_DrawDim_Dimension_swigregister = _DrawDim.Handle_DrawDim_Dimension_swigregister
Handle_DrawDim_Dimension_swigregister(Handle_DrawDim_Dimension)

def Handle_DrawDim_Dimension_DownCast(thing):
    return _DrawDim.Handle_DrawDim_Dimension_DownCast(thing)
Handle_DrawDim_Dimension_DownCast = _DrawDim.Handle_DrawDim_Dimension_DownCast

class Handle_DrawDim_PlanarDiameter(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_PlanarDiameter self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_PlanarDiameter self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_PlanarDiameter self, DrawDim_PlanarDiameter thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_PlanarDiameter self, Handle_DrawDim_PlanarDiameter theHandle) -> Handle_DrawDim_PlanarDiameter
        assign(Handle_DrawDim_PlanarDiameter self, DrawDim_PlanarDiameter thePtr) -> Handle_DrawDim_PlanarDiameter
        assign(Handle_DrawDim_PlanarDiameter self, Handle_DrawDim_PlanarDiameter theHandle) -> Handle_DrawDim_PlanarDiameter

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_PlanarDiameter self) -> DrawDim_PlanarDiameter

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_PlanarDiameter self) -> DrawDim_PlanarDiameter

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_PlanarDiameter self) -> DrawDim_PlanarDiameter

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_PlanarDiameter___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_PlanarDiameter___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_PlanarDiameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_PlanarDiameter_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_PlanarDiameter

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_PlanarDiameter self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_PlanarDiameter self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarDiameter_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarDiameter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPlane(self, *args):
        """
        SetPlane(Handle_DrawDim_PlanarDiameter self, TopoDS_Face plane)

        :type plane: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        GetPlane(Handle_DrawDim_PlanarDiameter self) -> TopoDS_Face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_GetPlane(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_PlanarDiameter self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_PlanarDiameter self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_PlanarDiameter self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_PlanarDiameter self, Draw_Color C)
        TextColor(Handle_DrawDim_PlanarDiameter self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_TextColor(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_PlanarDiameter self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_PlanarDiameter self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_PlanarDiameter self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_PlanarDiameter self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_PlanarDiameter self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_PlanarDiameter self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_PlanarDiameter self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_PlanarDiameter self) -> Standard_Boolean
        Visible(Handle_DrawDim_PlanarDiameter self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_PlanarDiameter self) -> Standard_Boolean
        Protected(Handle_DrawDim_PlanarDiameter self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_PlanarDiameter self) -> Standard_CString
        Name(Handle_DrawDim_PlanarDiameter self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_PlanarDiameter self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_PlanarDiameter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_PlanarDiameter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_PlanarDiameter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_PlanarDiameter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_PlanarDiameter self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_PlanarDiameter self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_PlanarDiameter self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_PlanarDiameter self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarDiameter_DecrementRefCounter(self, *args)

Handle_DrawDim_PlanarDiameter_swigregister = _DrawDim.Handle_DrawDim_PlanarDiameter_swigregister
Handle_DrawDim_PlanarDiameter_swigregister(Handle_DrawDim_PlanarDiameter)

def Handle_DrawDim_PlanarDiameter_DownCast(thing):
    return _DrawDim.Handle_DrawDim_PlanarDiameter_DownCast(thing)
Handle_DrawDim_PlanarDiameter_DownCast = _DrawDim.Handle_DrawDim_PlanarDiameter_DownCast

class Handle_DrawDim_PlanarAngle(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawDim_PlanarAngle self)

        Nullify the handle


        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawDim_PlanarAngle self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawDim_PlanarAngle self, DrawDim_PlanarAngle thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawDim_PlanarAngle self, Handle_DrawDim_PlanarAngle theHandle) -> Handle_DrawDim_PlanarAngle
        assign(Handle_DrawDim_PlanarAngle self, DrawDim_PlanarAngle thePtr) -> Handle_DrawDim_PlanarAngle
        assign(Handle_DrawDim_PlanarAngle self, Handle_DrawDim_PlanarAngle theHandle) -> Handle_DrawDim_PlanarAngle

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawDim_PlanarAngle self) -> DrawDim_PlanarAngle

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawDim_PlanarAngle self) -> DrawDim_PlanarAngle

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawDim_PlanarAngle self) -> DrawDim_PlanarAngle

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle___ref__(self, *args)


    def __hash__(self):
        return _DrawDim.Handle_DrawDim_PlanarAngle___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawDim.Handle_DrawDim_PlanarAngle___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawDim.new_Handle_DrawDim_PlanarAngle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawDim.Handle_DrawDim_PlanarAngle_DownCast)
    __swig_destroy__ = _DrawDim.delete_Handle_DrawDim_PlanarAngle

    def Sector(self, *args):
        """
        Sector(Handle_DrawDim_PlanarAngle self, Standard_Boolean const inverted, Standard_Boolean const reversed)

        :type inverted: bool
        :type reversed: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Sector(self, *args)


    def Position(self, *args):
        """
        Position(Handle_DrawDim_PlanarAngle self, Standard_Real const value)

        :type value: float

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Position(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawDim_PlanarAngle self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawDim_PlanarAngle self) -> char const *

        :rtype: const char *

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarAngle_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawDim.Handle_DrawDim_PlanarAngle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPlane(self, *args):
        """
        SetPlane(Handle_DrawDim_PlanarAngle self, TopoDS_Face plane)

        :type plane: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        GetPlane(Handle_DrawDim_PlanarAngle self) -> TopoDS_Face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_GetPlane(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_DrawDim_PlanarAngle self, Standard_Real const avalue)

        :type avalue: float

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_DrawDim_PlanarAngle self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_GetValue(self, *args)


    def IsValued(self, *args):
        """
        IsValued(Handle_DrawDim_PlanarAngle self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_IsValued(self, *args)


    def TextColor(self, *args):
        """
        TextColor(Handle_DrawDim_PlanarAngle self, Draw_Color C)
        TextColor(Handle_DrawDim_PlanarAngle self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_TextColor(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawDim_PlanarAngle self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawDim_PlanarAngle self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawDim_PlanarAngle self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawDim_PlanarAngle self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawDim_PlanarAngle self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawDim_PlanarAngle self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawDim_PlanarAngle self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawDim_PlanarAngle self) -> Standard_Boolean
        Visible(Handle_DrawDim_PlanarAngle self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawDim_PlanarAngle self) -> Standard_Boolean
        Protected(Handle_DrawDim_PlanarAngle self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawDim_PlanarAngle self) -> Standard_CString
        Name(Handle_DrawDim_PlanarAngle self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawDim_PlanarAngle self)

        Memory deallocator for transient classes


        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawDim_PlanarAngle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawDim_PlanarAngle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawDim_PlanarAngle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawDim_PlanarAngle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawDim_PlanarAngle self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawDim_PlanarAngle self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawDim_PlanarAngle self)

        Increments the reference counter of this object


        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawDim_PlanarAngle self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawDim.Handle_DrawDim_PlanarAngle_DecrementRefCounter(self, *args)

Handle_DrawDim_PlanarAngle_swigregister = _DrawDim.Handle_DrawDim_PlanarAngle_swigregister
Handle_DrawDim_PlanarAngle_swigregister(Handle_DrawDim_PlanarAngle)

def Handle_DrawDim_PlanarAngle_DownCast(thing):
    return _DrawDim.Handle_DrawDim_PlanarAngle_DownCast(thing)
Handle_DrawDim_PlanarAngle_DownCast = _DrawDim.Handle_DrawDim_PlanarAngle_DownCast



