# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepElement')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepElement')
    _RWStepElement = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepElement', [dirname(__file__)])
        except ImportError:
            import _RWStepElement
            return _RWStepElement
        try:
            _mod = imp.load_module('_RWStepElement', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepElement = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepElement
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepElement.delete_SwigPyIterator

    def value(self):
        return _RWStepElement.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepElement.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepElement.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepElement.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepElement.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepElement.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepElement.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepElement.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepElement.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepElement.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepElement.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepElement.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepElement.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepElement.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepElement.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepElement.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepElement.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepElement.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepElement.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepElement.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepElement.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepElement.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepElement.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepElement.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepElement.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepElement.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepElement.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepElement.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepElement.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepElement.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepElement.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepElement.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepElement.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepElement.ptr_to_number(item)
ptr_to_number = _RWStepElement.ptr_to_number

def HashCode(*args):
    return _RWStepElement.HashCode(*args)
HashCode = _RWStepElement.HashCode

def ptr_equal(a, b):
    return _RWStepElement.ptr_equal(a, b)
ptr_equal = _RWStepElement.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepElement
else:
    import StepElement
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
class RWStepElement_RWSurface3dElementDescriptor(object):
    """Read & Write tool for Surface3dElementDescriptor"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWSurface3dElementDescriptor self) -> RWStepElement_RWSurface3dElementDescriptor

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWSurface3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWSurface3dElementDescriptor self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_Surface3dElementDescriptor ent)

        Reads Surface3dElementDescriptor

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Surface3dElementDescriptor

        """
        return _RWStepElement.RWStepElement_RWSurface3dElementDescriptor_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWSurface3dElementDescriptor self, StepData_StepWriter SW, Handle_StepElement_Surface3dElementDescriptor ent)

        Writes Surface3dElementDescriptor

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Surface3dElementDescriptor

        """
        return _RWStepElement.RWStepElement_RWSurface3dElementDescriptor_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWSurface3dElementDescriptor self, Handle_StepElement_Surface3dElementDescriptor ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Surface3dElementDescriptor
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWSurface3dElementDescriptor_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWSurface3dElementDescriptor
RWStepElement_RWSurface3dElementDescriptor_swigregister = _RWStepElement.RWStepElement_RWSurface3dElementDescriptor_swigregister
RWStepElement_RWSurface3dElementDescriptor_swigregister(RWStepElement_RWSurface3dElementDescriptor)

class RWStepElement_RWUniformSurfaceSection(object):
    """Read & Write tool for UniformSurfaceSection"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWUniformSurfaceSection self) -> RWStepElement_RWUniformSurfaceSection

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWUniformSurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWUniformSurfaceSection self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_UniformSurfaceSection ent)

        Reads UniformSurfaceSection

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_UniformSurfaceSection

        """
        return _RWStepElement.RWStepElement_RWUniformSurfaceSection_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWUniformSurfaceSection self, StepData_StepWriter SW, Handle_StepElement_UniformSurfaceSection ent)

        Writes UniformSurfaceSection

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_UniformSurfaceSection

        """
        return _RWStepElement.RWStepElement_RWUniformSurfaceSection_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWUniformSurfaceSection self, Handle_StepElement_UniformSurfaceSection ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_UniformSurfaceSection
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWUniformSurfaceSection_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWUniformSurfaceSection
RWStepElement_RWUniformSurfaceSection_swigregister = _RWStepElement.RWStepElement_RWUniformSurfaceSection_swigregister
RWStepElement_RWUniformSurfaceSection_swigregister(RWStepElement_RWUniformSurfaceSection)

class RWStepElement_RWCurveElementSectionDefinition(object):
    """Read & Write tool for CurveElementSectionDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWCurveElementSectionDefinition self) -> RWStepElement_RWCurveElementSectionDefinition

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWCurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWCurveElementSectionDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_CurveElementSectionDefinition ent)

        Reads CurveElementSectionDefinition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementSectionDefinition

        """
        return _RWStepElement.RWStepElement_RWCurveElementSectionDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWCurveElementSectionDefinition self, StepData_StepWriter SW, Handle_StepElement_CurveElementSectionDefinition ent)

        Writes CurveElementSectionDefinition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementSectionDefinition

        """
        return _RWStepElement.RWStepElement_RWCurveElementSectionDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWCurveElementSectionDefinition self, Handle_StepElement_CurveElementSectionDefinition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementSectionDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWCurveElementSectionDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWCurveElementSectionDefinition
RWStepElement_RWCurveElementSectionDefinition_swigregister = _RWStepElement.RWStepElement_RWCurveElementSectionDefinition_swigregister
RWStepElement_RWCurveElementSectionDefinition_swigregister(RWStepElement_RWCurveElementSectionDefinition)

class RWStepElement_RWSurfaceSectionFieldVarying(object):
    """Read & Write tool for SurfaceSectionFieldVarying"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWSurfaceSectionFieldVarying self) -> RWStepElement_RWSurfaceSectionFieldVarying

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWSurfaceSectionFieldVarying(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWSurfaceSectionFieldVarying self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_SurfaceSectionFieldVarying ent)

        Reads SurfaceSectionFieldVarying

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionFieldVarying

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionFieldVarying_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWSurfaceSectionFieldVarying self, StepData_StepWriter SW, Handle_StepElement_SurfaceSectionFieldVarying ent)

        Writes SurfaceSectionFieldVarying

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionFieldVarying

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionFieldVarying_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWSurfaceSectionFieldVarying self, Handle_StepElement_SurfaceSectionFieldVarying ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionFieldVarying
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionFieldVarying_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWSurfaceSectionFieldVarying
RWStepElement_RWSurfaceSectionFieldVarying_swigregister = _RWStepElement.RWStepElement_RWSurfaceSectionFieldVarying_swigregister
RWStepElement_RWSurfaceSectionFieldVarying_swigregister(RWStepElement_RWSurfaceSectionFieldVarying)

class RWStepElement_RWSurfaceSection(object):
    """Read & Write tool for SurfaceSection"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWSurfaceSection self) -> RWStepElement_RWSurfaceSection

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWSurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWSurfaceSection self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_SurfaceSection ent)

        Reads SurfaceSection

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection

        """
        return _RWStepElement.RWStepElement_RWSurfaceSection_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWSurfaceSection self, StepData_StepWriter SW, Handle_StepElement_SurfaceSection ent)

        Writes SurfaceSection

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection

        """
        return _RWStepElement.RWStepElement_RWSurfaceSection_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWSurfaceSection self, Handle_StepElement_SurfaceSection ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWSurfaceSection_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWSurfaceSection
RWStepElement_RWSurfaceSection_swigregister = _RWStepElement.RWStepElement_RWSurfaceSection_swigregister
RWStepElement_RWSurfaceSection_swigregister(RWStepElement_RWSurfaceSection)

class RWStepElement_RWVolume3dElementDescriptor(object):
    """Read & Write tool for Volume3dElementDescriptor"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWVolume3dElementDescriptor self) -> RWStepElement_RWVolume3dElementDescriptor

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWVolume3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWVolume3dElementDescriptor self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_Volume3dElementDescriptor ent)

        Reads Volume3dElementDescriptor

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Volume3dElementDescriptor

        """
        return _RWStepElement.RWStepElement_RWVolume3dElementDescriptor_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWVolume3dElementDescriptor self, StepData_StepWriter SW, Handle_StepElement_Volume3dElementDescriptor ent)

        Writes Volume3dElementDescriptor

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Volume3dElementDescriptor

        """
        return _RWStepElement.RWStepElement_RWVolume3dElementDescriptor_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWVolume3dElementDescriptor self, Handle_StepElement_Volume3dElementDescriptor ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Volume3dElementDescriptor
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWVolume3dElementDescriptor_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWVolume3dElementDescriptor
RWStepElement_RWVolume3dElementDescriptor_swigregister = _RWStepElement.RWStepElement_RWVolume3dElementDescriptor_swigregister
RWStepElement_RWVolume3dElementDescriptor_swigregister(RWStepElement_RWVolume3dElementDescriptor)

class RWStepElement_RWElementMaterial(object):
    """Read & Write tool for ElementMaterial"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWElementMaterial self) -> RWStepElement_RWElementMaterial

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWElementMaterial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWElementMaterial self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_ElementMaterial ent)

        Reads ElementMaterial

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_ElementMaterial

        """
        return _RWStepElement.RWStepElement_RWElementMaterial_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWElementMaterial self, StepData_StepWriter SW, Handle_StepElement_ElementMaterial ent)

        Writes ElementMaterial

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_ElementMaterial

        """
        return _RWStepElement.RWStepElement_RWElementMaterial_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWElementMaterial self, Handle_StepElement_ElementMaterial ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_ElementMaterial
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWElementMaterial_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWElementMaterial
RWStepElement_RWElementMaterial_swigregister = _RWStepElement.RWStepElement_RWElementMaterial_swigregister
RWStepElement_RWElementMaterial_swigregister(RWStepElement_RWElementMaterial)

class RWStepElement_RWSurfaceSectionFieldConstant(object):
    """Read & Write tool for SurfaceSectionFieldConstant"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWSurfaceSectionFieldConstant self) -> RWStepElement_RWSurfaceSectionFieldConstant

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWSurfaceSectionFieldConstant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWSurfaceSectionFieldConstant self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_SurfaceSectionFieldConstant ent)

        Reads SurfaceSectionFieldConstant

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionFieldConstant

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionFieldConstant_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWSurfaceSectionFieldConstant self, StepData_StepWriter SW, Handle_StepElement_SurfaceSectionFieldConstant ent)

        Writes SurfaceSectionFieldConstant

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionFieldConstant

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionFieldConstant_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWSurfaceSectionFieldConstant self, Handle_StepElement_SurfaceSectionFieldConstant ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionFieldConstant
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionFieldConstant_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWSurfaceSectionFieldConstant
RWStepElement_RWSurfaceSectionFieldConstant_swigregister = _RWStepElement.RWStepElement_RWSurfaceSectionFieldConstant_swigregister
RWStepElement_RWSurfaceSectionFieldConstant_swigregister(RWStepElement_RWSurfaceSectionFieldConstant)

class RWStepElement_RWSurfaceSectionField(object):
    """Read & Write tool for SurfaceSectionField"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWSurfaceSectionField self) -> RWStepElement_RWSurfaceSectionField

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWSurfaceSectionField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWSurfaceSectionField self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_SurfaceSectionField ent)

        Reads SurfaceSectionField

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionField_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWSurfaceSectionField self, StepData_StepWriter SW, Handle_StepElement_SurfaceSectionField ent)

        Writes SurfaceSectionField

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionField_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWSurfaceSectionField self, Handle_StepElement_SurfaceSectionField ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWSurfaceSectionField_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWSurfaceSectionField
RWStepElement_RWSurfaceSectionField_swigregister = _RWStepElement.RWStepElement_RWSurfaceSectionField_swigregister
RWStepElement_RWSurfaceSectionField_swigregister(RWStepElement_RWSurfaceSectionField)

class RWStepElement_RWElementDescriptor(object):
    """Read & Write tool for ElementDescriptor"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWElementDescriptor self) -> RWStepElement_RWElementDescriptor

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWElementDescriptor self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_ElementDescriptor ent)

        Reads ElementDescriptor

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_ElementDescriptor

        """
        return _RWStepElement.RWStepElement_RWElementDescriptor_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWElementDescriptor self, StepData_StepWriter SW, Handle_StepElement_ElementDescriptor ent)

        Writes ElementDescriptor

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_ElementDescriptor

        """
        return _RWStepElement.RWStepElement_RWElementDescriptor_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWElementDescriptor self, Handle_StepElement_ElementDescriptor ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_ElementDescriptor
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWElementDescriptor_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWElementDescriptor
RWStepElement_RWElementDescriptor_swigregister = _RWStepElement.RWStepElement_RWElementDescriptor_swigregister
RWStepElement_RWElementDescriptor_swigregister(RWStepElement_RWElementDescriptor)

class RWStepElement_RWCurveElementSectionDerivedDefinitions(object):
    """Read & Write tool for CurveElementSectionDerivedDefinitions"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWCurveElementSectionDerivedDefinitions self) -> RWStepElement_RWCurveElementSectionDerivedDefinitions

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWCurveElementSectionDerivedDefinitions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWCurveElementSectionDerivedDefinitions self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_CurveElementSectionDerivedDefinitions ent)

        Reads CurveElementSectionDerivedDefinitions

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions

        """
        return _RWStepElement.RWStepElement_RWCurveElementSectionDerivedDefinitions_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWCurveElementSectionDerivedDefinitions self, StepData_StepWriter SW, Handle_StepElement_CurveElementSectionDerivedDefinitions ent)

        Writes CurveElementSectionDerivedDefinitions

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions

        """
        return _RWStepElement.RWStepElement_RWCurveElementSectionDerivedDefinitions_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWCurveElementSectionDerivedDefinitions self, Handle_StepElement_CurveElementSectionDerivedDefinitions ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWCurveElementSectionDerivedDefinitions_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWCurveElementSectionDerivedDefinitions
RWStepElement_RWCurveElementSectionDerivedDefinitions_swigregister = _RWStepElement.RWStepElement_RWCurveElementSectionDerivedDefinitions_swigregister
RWStepElement_RWCurveElementSectionDerivedDefinitions_swigregister(RWStepElement_RWCurveElementSectionDerivedDefinitions)

class RWStepElement_RWAnalysisItemWithinRepresentation(object):
    """Read & Write tool for AnalysisItemWithinRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWAnalysisItemWithinRepresentation self) -> RWStepElement_RWAnalysisItemWithinRepresentation

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWAnalysisItemWithinRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWAnalysisItemWithinRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_AnalysisItemWithinRepresentation ent)

        Reads AnalysisItemWithinRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_AnalysisItemWithinRepresentation

        """
        return _RWStepElement.RWStepElement_RWAnalysisItemWithinRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWAnalysisItemWithinRepresentation self, StepData_StepWriter SW, Handle_StepElement_AnalysisItemWithinRepresentation ent)

        Writes AnalysisItemWithinRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_AnalysisItemWithinRepresentation

        """
        return _RWStepElement.RWStepElement_RWAnalysisItemWithinRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWAnalysisItemWithinRepresentation self, Handle_StepElement_AnalysisItemWithinRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_AnalysisItemWithinRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWAnalysisItemWithinRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWAnalysisItemWithinRepresentation
RWStepElement_RWAnalysisItemWithinRepresentation_swigregister = _RWStepElement.RWStepElement_RWAnalysisItemWithinRepresentation_swigregister
RWStepElement_RWAnalysisItemWithinRepresentation_swigregister(RWStepElement_RWAnalysisItemWithinRepresentation)

class RWStepElement_RWSurfaceElementProperty(object):
    """Read & Write tool for SurfaceElementProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWSurfaceElementProperty self) -> RWStepElement_RWSurfaceElementProperty

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWSurfaceElementProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWSurfaceElementProperty self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_SurfaceElementProperty ent)

        Reads SurfaceElementProperty

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceElementProperty

        """
        return _RWStepElement.RWStepElement_RWSurfaceElementProperty_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWSurfaceElementProperty self, StepData_StepWriter SW, Handle_StepElement_SurfaceElementProperty ent)

        Writes SurfaceElementProperty

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceElementProperty

        """
        return _RWStepElement.RWStepElement_RWSurfaceElementProperty_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWSurfaceElementProperty self, Handle_StepElement_SurfaceElementProperty ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_SurfaceElementProperty
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWSurfaceElementProperty_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWSurfaceElementProperty
RWStepElement_RWSurfaceElementProperty_swigregister = _RWStepElement.RWStepElement_RWSurfaceElementProperty_swigregister
RWStepElement_RWSurfaceElementProperty_swigregister(RWStepElement_RWSurfaceElementProperty)

class RWStepElement_RWCurve3dElementDescriptor(object):
    """Read & Write tool for Curve3dElementDescriptor"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWCurve3dElementDescriptor self) -> RWStepElement_RWCurve3dElementDescriptor

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWCurve3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWCurve3dElementDescriptor self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_Curve3dElementDescriptor ent)

        Reads Curve3dElementDescriptor

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Curve3dElementDescriptor

        """
        return _RWStepElement.RWStepElement_RWCurve3dElementDescriptor_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWCurve3dElementDescriptor self, StepData_StepWriter SW, Handle_StepElement_Curve3dElementDescriptor ent)

        Writes Curve3dElementDescriptor

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Curve3dElementDescriptor

        """
        return _RWStepElement.RWStepElement_RWCurve3dElementDescriptor_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWCurve3dElementDescriptor self, Handle_StepElement_Curve3dElementDescriptor ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_Curve3dElementDescriptor
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWCurve3dElementDescriptor_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWCurve3dElementDescriptor
RWStepElement_RWCurve3dElementDescriptor_swigregister = _RWStepElement.RWStepElement_RWCurve3dElementDescriptor_swigregister
RWStepElement_RWCurve3dElementDescriptor_swigregister(RWStepElement_RWCurve3dElementDescriptor)

class RWStepElement_RWCurveElementEndReleasePacket(object):
    """Read & Write tool for CurveElementEndReleasePacket"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepElement_RWCurveElementEndReleasePacket self) -> RWStepElement_RWCurveElementEndReleasePacket

        Empty constructor


        """
        this = _RWStepElement.new_RWStepElement_RWCurveElementEndReleasePacket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepElement_RWCurveElementEndReleasePacket self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepElement_CurveElementEndReleasePacket ent)

        Reads CurveElementEndReleasePacket

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementEndReleasePacket

        """
        return _RWStepElement.RWStepElement_RWCurveElementEndReleasePacket_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepElement_RWCurveElementEndReleasePacket self, StepData_StepWriter SW, Handle_StepElement_CurveElementEndReleasePacket ent)

        Writes CurveElementEndReleasePacket

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementEndReleasePacket

        """
        return _RWStepElement.RWStepElement_RWCurveElementEndReleasePacket_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepElement_RWCurveElementEndReleasePacket self, Handle_StepElement_CurveElementEndReleasePacket ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepElement.Handle_StepElement_CurveElementEndReleasePacket
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepElement.RWStepElement_RWCurveElementEndReleasePacket_Share(self, *args)

    __swig_destroy__ = _RWStepElement.delete_RWStepElement_RWCurveElementEndReleasePacket
RWStepElement_RWCurveElementEndReleasePacket_swigregister = _RWStepElement.RWStepElement_RWCurveElementEndReleasePacket_swigregister
RWStepElement_RWCurveElementEndReleasePacket_swigregister(RWStepElement_RWCurveElementEndReleasePacket)



