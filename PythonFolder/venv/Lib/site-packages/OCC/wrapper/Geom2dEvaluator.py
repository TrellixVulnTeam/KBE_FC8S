# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dEvaluator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dEvaluator')
    _Geom2dEvaluator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dEvaluator', [dirname(__file__)])
        except ImportError:
            import _Geom2dEvaluator
            return _Geom2dEvaluator
        try:
            _mod = imp.load_module('_Geom2dEvaluator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dEvaluator = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dEvaluator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dEvaluator.delete_SwigPyIterator

    def value(self):
        return _Geom2dEvaluator.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Geom2dEvaluator.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Geom2dEvaluator.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Geom2dEvaluator.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Geom2dEvaluator.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Geom2dEvaluator.SwigPyIterator_copy(self)

    def next(self):
        return _Geom2dEvaluator.SwigPyIterator_next(self)

    def __next__(self):
        return _Geom2dEvaluator.SwigPyIterator___next__(self)

    def previous(self):
        return _Geom2dEvaluator.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Geom2dEvaluator.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Geom2dEvaluator.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Geom2dEvaluator.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Geom2dEvaluator.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Geom2dEvaluator.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Geom2dEvaluator.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Geom2dEvaluator.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Geom2dEvaluator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Geom2dEvaluator.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Geom2dEvaluator.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Geom2dEvaluator.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Geom2dEvaluator.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dEvaluator.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Geom2dEvaluator.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Geom2dEvaluator.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Geom2dEvaluator.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Geom2dEvaluator.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Geom2dEvaluator.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Geom2dEvaluator.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Geom2dEvaluator.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dEvaluator.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Geom2dEvaluator.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Geom2dEvaluator.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Geom2dEvaluator.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Geom2dEvaluator.ptr_to_number(item)
ptr_to_number = _Geom2dEvaluator.ptr_to_number

def HashCode(*args):
    return _Geom2dEvaluator.HashCode(*args)
HashCode = _Geom2dEvaluator.HashCode

def ptr_equal(a, b):
    return _Geom2dEvaluator.ptr_equal(a, b)
ptr_equal = _Geom2dEvaluator.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
class Geom2dEvaluator_Curve(Standard.Standard_Transient):
    """
    Interface for calculation of values and derivatives for different kinds of curves in 2D.
    Works both with adaptors and curves.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Geom2dEvaluator_Curve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Geom2dEvaluator_Curve(self) 
            return h


    def D0(self, *args):
        """
        D0(Geom2dEvaluator_Curve self, Standard_Real const theU, gp_Pnt2d theValue)

        Value of 2D curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Geom2dEvaluator_Curve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1)

        Value and first derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Geom2dEvaluator_Curve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1, gp_Vec2d theD2)

        Value, first and second derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d
        :type theD2: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Geom2dEvaluator_Curve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1, gp_Vec2d theD2, gp_Vec2d theD3)

        Value, first, second and third derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d
        :type theD2: OCC.wrapper.gp.gp_Vec2d
        :type theD3: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Geom2dEvaluator_Curve self, Standard_Real const theU, Standard_Integer const theDerU) -> gp_Vec2d

        Calculates N-th derivatives of curve, where N = theDerU. Raises if N < 1

        :type theU: float
        :type theDerU: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_DN(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dEvaluator.Geom2dEvaluator_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Geom2dEvaluator.delete_Geom2dEvaluator_Curve
Geom2dEvaluator_Curve_swigregister = _Geom2dEvaluator.Geom2dEvaluator_Curve_swigregister
Geom2dEvaluator_Curve_swigregister(Geom2dEvaluator_Curve)

def Geom2dEvaluator_Curve_get_type_name(*args):
    """
    Geom2dEvaluator_Curve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Geom2dEvaluator.Geom2dEvaluator_Curve_get_type_name(*args)

def Geom2dEvaluator_Curve_get_type_descriptor(*args):
    """
    Geom2dEvaluator_Curve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Geom2dEvaluator.Geom2dEvaluator_Curve_get_type_descriptor(*args)

class Geom2dEvaluator_OffsetCurve(Geom2dEvaluator_Curve):
    """Allows to calculate values and derivatives for offset curves in 2D"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Geom2dEvaluator_OffsetCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Geom2dEvaluator_OffsetCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Geom2dEvaluator_OffsetCurve self, Handle_Geom2d_Curve theBase, Standard_Real const theOffset) -> Geom2dEvaluator_OffsetCurve
        __init__(Geom2dEvaluator_OffsetCurve self, Handle_Geom2dAdaptor_HCurve theBase, Standard_Real const theOffset) -> Geom2dEvaluator_OffsetCurve

        Initialize evaluator by curve adaptor

        :type theBase: OCC.wrapper.Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve
        :type theOffset: float

        """
        this = _Geom2dEvaluator.new_Geom2dEvaluator_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetOffsetValue(self, *args):
        """
        SetOffsetValue(Geom2dEvaluator_OffsetCurve self, Standard_Real theOffset)

        Change the offset value

        :type theOffset: float

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_SetOffsetValue(self, *args)


    def D0(self, *args):
        """
        D0(Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt2d theValue)

        Value of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1)

        Value and first derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1, gp_Vec2d theD2)

        Value, first and second derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d
        :type theD2: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1, gp_Vec2d theD2, gp_Vec2d theD3)

        Value, first, second and third derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d
        :type theD2: OCC.wrapper.gp.gp_Vec2d
        :type theD3: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, Standard_Integer const theDeriv) -> gp_Vec2d

        Calculates N-th derivatives of curve, where N = theDeriv. Raises if N < 1

        :type theU: float
        :type theDeriv: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_DN(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Geom2dEvaluator.delete_Geom2dEvaluator_OffsetCurve
Geom2dEvaluator_OffsetCurve_swigregister = _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_swigregister
Geom2dEvaluator_OffsetCurve_swigregister(Geom2dEvaluator_OffsetCurve)

def Geom2dEvaluator_OffsetCurve_get_type_name(*args):
    """
    Geom2dEvaluator_OffsetCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_get_type_name(*args)

def Geom2dEvaluator_OffsetCurve_get_type_descriptor(*args):
    """
    Geom2dEvaluator_OffsetCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_get_type_descriptor(*args)

class Handle_Geom2dEvaluator_Curve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Geom2dEvaluator_Curve self)

        Nullify the handle


        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Geom2dEvaluator_Curve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Geom2dEvaluator_Curve self, Geom2dEvaluator_Curve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Geom2dEvaluator_Curve self, Handle_Geom2dEvaluator_Curve theHandle) -> Handle_Geom2dEvaluator_Curve
        assign(Handle_Geom2dEvaluator_Curve self, Geom2dEvaluator_Curve thePtr) -> Handle_Geom2dEvaluator_Curve
        assign(Handle_Geom2dEvaluator_Curve self, Handle_Geom2dEvaluator_Curve theHandle) -> Handle_Geom2dEvaluator_Curve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Geom2dEvaluator_Curve self) -> Geom2dEvaluator_Curve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Geom2dEvaluator_Curve self) -> Geom2dEvaluator_Curve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Geom2dEvaluator_Curve self) -> Geom2dEvaluator_Curve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve___ref__(self, *args)


    def __hash__(self):
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Geom2dEvaluator.new_Handle_Geom2dEvaluator_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DownCast)
    __swig_destroy__ = _Geom2dEvaluator.delete_Handle_Geom2dEvaluator_Curve

    def D0(self, *args):
        """
        D0(Handle_Geom2dEvaluator_Curve self, Standard_Real const theU, gp_Pnt2d theValue)

        Value of 2D curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_Geom2dEvaluator_Curve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1)

        Value and first derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_Geom2dEvaluator_Curve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1, gp_Vec2d theD2)

        Value, first and second derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d
        :type theD2: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_Geom2dEvaluator_Curve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1, gp_Vec2d theD2, gp_Vec2d theD3)

        Value, first, second and third derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d
        :type theD2: OCC.wrapper.gp.gp_Vec2d
        :type theD3: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_Geom2dEvaluator_Curve self, Standard_Real const theU, Standard_Integer const theDerU) -> gp_Vec2d

        Calculates N-th derivatives of curve, where N = theDerU. Raises if N < 1

        :type theU: float
        :type theDerU: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DN(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Geom2dEvaluator_Curve self) -> char const *

        :rtype: const char *

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Geom2dEvaluator_Curve self)

        Memory deallocator for transient classes


        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Geom2dEvaluator_Curve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Geom2dEvaluator_Curve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Geom2dEvaluator_Curve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Geom2dEvaluator_Curve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Geom2dEvaluator_Curve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Geom2dEvaluator_Curve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Geom2dEvaluator_Curve self)

        Increments the reference counter of this object


        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Geom2dEvaluator_Curve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DecrementRefCounter(self, *args)

Handle_Geom2dEvaluator_Curve_swigregister = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_swigregister
Handle_Geom2dEvaluator_Curve_swigregister(Handle_Geom2dEvaluator_Curve)

def Handle_Geom2dEvaluator_Curve_DownCast(thing):
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DownCast(thing)
Handle_Geom2dEvaluator_Curve_DownCast = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DownCast

class Handle_Geom2dEvaluator_OffsetCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Geom2dEvaluator_OffsetCurve self)

        Nullify the handle


        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Geom2dEvaluator_OffsetCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Geom2dEvaluator_OffsetCurve self, Geom2dEvaluator_OffsetCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Geom2dEvaluator_OffsetCurve self, Handle_Geom2dEvaluator_OffsetCurve theHandle) -> Handle_Geom2dEvaluator_OffsetCurve
        assign(Handle_Geom2dEvaluator_OffsetCurve self, Geom2dEvaluator_OffsetCurve thePtr) -> Handle_Geom2dEvaluator_OffsetCurve
        assign(Handle_Geom2dEvaluator_OffsetCurve self, Handle_Geom2dEvaluator_OffsetCurve theHandle) -> Handle_Geom2dEvaluator_OffsetCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Geom2dEvaluator_OffsetCurve self) -> Geom2dEvaluator_OffsetCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Geom2dEvaluator_OffsetCurve self) -> Geom2dEvaluator_OffsetCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Geom2dEvaluator_OffsetCurve self) -> Geom2dEvaluator_OffsetCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve___ref__(self, *args)


    def __hash__(self):
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Geom2dEvaluator.new_Handle_Geom2dEvaluator_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DownCast)
    __swig_destroy__ = _Geom2dEvaluator.delete_Handle_Geom2dEvaluator_OffsetCurve

    def SetOffsetValue(self, *args):
        """
        SetOffsetValue(Handle_Geom2dEvaluator_OffsetCurve self, Standard_Real theOffset)

        Change the offset value

        :type theOffset: float

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_SetOffsetValue(self, *args)


    def D0(self, *args):
        """
        D0(Handle_Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt2d theValue)

        Value of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1)

        Value and first derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1, gp_Vec2d theD2)

        Value, first and second derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d
        :type theD2: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt2d theValue, gp_Vec2d theD1, gp_Vec2d theD2, gp_Vec2d theD3)

        Value, first, second and third derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt2d
        :type theD1: OCC.wrapper.gp.gp_Vec2d
        :type theD2: OCC.wrapper.gp.gp_Vec2d
        :type theD3: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_Geom2dEvaluator_OffsetCurve self, Standard_Real const theU, Standard_Integer const theDeriv) -> gp_Vec2d

        Calculates N-th derivatives of curve, where N = theDeriv. Raises if N < 1

        :type theU: float
        :type theDeriv: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DN(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Geom2dEvaluator_OffsetCurve self) -> char const *

        :rtype: const char *

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Geom2dEvaluator_OffsetCurve self)

        Memory deallocator for transient classes


        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Geom2dEvaluator_OffsetCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Geom2dEvaluator_OffsetCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Geom2dEvaluator_OffsetCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Geom2dEvaluator_OffsetCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Geom2dEvaluator_OffsetCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Geom2dEvaluator_OffsetCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Geom2dEvaluator_OffsetCurve self)

        Increments the reference counter of this object


        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Geom2dEvaluator_OffsetCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DecrementRefCounter(self, *args)

Handle_Geom2dEvaluator_OffsetCurve_swigregister = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_swigregister
Handle_Geom2dEvaluator_OffsetCurve_swigregister(Handle_Geom2dEvaluator_OffsetCurve)

def Handle_Geom2dEvaluator_OffsetCurve_DownCast(thing):
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DownCast(thing)
Handle_Geom2dEvaluator_OffsetCurve_DownCast = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DownCast



