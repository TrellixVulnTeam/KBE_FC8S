# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepGeom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepGeom')
    _StepGeom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepGeom', [dirname(__file__)])
        except ImportError:
            import _StepGeom
            return _StepGeom
        try:
            _mod = imp.load_module('_StepGeom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepGeom = swig_import_helper()
    del swig_import_helper
else:
    import _StepGeom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepGeom.delete_SwigPyIterator

    def value(self):
        return _StepGeom.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepGeom.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepGeom.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepGeom.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepGeom.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepGeom.SwigPyIterator_copy(self)

    def next(self):
        return _StepGeom.SwigPyIterator_next(self)

    def __next__(self):
        return _StepGeom.SwigPyIterator___next__(self)

    def previous(self):
        return _StepGeom.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepGeom.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepGeom.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepGeom.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepGeom.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepGeom.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepGeom.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepGeom.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepGeom.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepGeom.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepGeom.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepGeom.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepGeom.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepGeom.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepGeom.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepGeom.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepGeom.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepGeom.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepGeom.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepGeom.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepGeom.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepGeom.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepGeom.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepGeom.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepGeom.ptr_to_number(item)
ptr_to_number = _StepGeom.ptr_to_number

def HashCode(*args):
    return _StepGeom.HashCode(*args)
HashCode = _StepGeom.HashCode

def ptr_equal(a, b):
    return _StepGeom.ptr_equal(a, b)
ptr_equal = _StepGeom.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
StepGeom_tcDiscontinuous = _StepGeom.StepGeom_tcDiscontinuous
StepGeom_tcContinuous = _StepGeom.StepGeom_tcContinuous
StepGeom_tcContSameGradient = _StepGeom.StepGeom_tcContSameGradient
StepGeom_tcContSameGradientSameCurvature = _StepGeom.StepGeom_tcContSameGradientSameCurvature
StepGeom_bscfPolylineForm = _StepGeom.StepGeom_bscfPolylineForm
StepGeom_bscfCircularArc = _StepGeom.StepGeom_bscfCircularArc
StepGeom_bscfEllipticArc = _StepGeom.StepGeom_bscfEllipticArc
StepGeom_bscfParabolicArc = _StepGeom.StepGeom_bscfParabolicArc
StepGeom_bscfHyperbolicArc = _StepGeom.StepGeom_bscfHyperbolicArc
StepGeom_bscfUnspecified = _StepGeom.StepGeom_bscfUnspecified
StepGeom_bssfPlaneSurf = _StepGeom.StepGeom_bssfPlaneSurf
StepGeom_bssfCylindricalSurf = _StepGeom.StepGeom_bssfCylindricalSurf
StepGeom_bssfConicalSurf = _StepGeom.StepGeom_bssfConicalSurf
StepGeom_bssfSphericalSurf = _StepGeom.StepGeom_bssfSphericalSurf
StepGeom_bssfToroidalSurf = _StepGeom.StepGeom_bssfToroidalSurf
StepGeom_bssfSurfOfRevolution = _StepGeom.StepGeom_bssfSurfOfRevolution
StepGeom_bssfRuledSurf = _StepGeom.StepGeom_bssfRuledSurf
StepGeom_bssfGeneralisedCone = _StepGeom.StepGeom_bssfGeneralisedCone
StepGeom_bssfQuadricSurf = _StepGeom.StepGeom_bssfQuadricSurf
StepGeom_bssfSurfOfLinearExtrusion = _StepGeom.StepGeom_bssfSurfOfLinearExtrusion
StepGeom_bssfUnspecified = _StepGeom.StepGeom_bssfUnspecified
StepGeom_ktUniformKnots = _StepGeom.StepGeom_ktUniformKnots
StepGeom_ktUnspecified = _StepGeom.StepGeom_ktUnspecified
StepGeom_ktQuasiUniformKnots = _StepGeom.StepGeom_ktQuasiUniformKnots
StepGeom_ktPiecewiseBezierKnots = _StepGeom.StepGeom_ktPiecewiseBezierKnots
StepGeom_pscrCurve3d = _StepGeom.StepGeom_pscrCurve3d
StepGeom_pscrPcurveS1 = _StepGeom.StepGeom_pscrPcurveS1
StepGeom_pscrPcurveS2 = _StepGeom.StepGeom_pscrPcurveS2
StepGeom_tpCartesian = _StepGeom.StepGeom_tpCartesian
StepGeom_tpParameter = _StepGeom.StepGeom_tpParameter
StepGeom_tpUnspecified = _StepGeom.StepGeom_tpUnspecified
class StepGeom_GeometricRepresentationItem(StepRepr.StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_GeometricRepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_GeometricRepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_GeometricRepresentationItem self) -> StepGeom_GeometricRepresentationItem

        Returns a GeometricRepresentationItem


        """
        this = _StepGeom.new_StepGeom_GeometricRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_GeometricRepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_GeometricRepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_GeometricRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_GeometricRepresentationItem
StepGeom_GeometricRepresentationItem_swigregister = _StepGeom.StepGeom_GeometricRepresentationItem_swigregister
StepGeom_GeometricRepresentationItem_swigregister(StepGeom_GeometricRepresentationItem)

def StepGeom_GeometricRepresentationItem_get_type_name(*args):
    """
    StepGeom_GeometricRepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_GeometricRepresentationItem_get_type_name(*args)

def StepGeom_GeometricRepresentationItem_get_type_descriptor(*args):
    """
    StepGeom_GeometricRepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_GeometricRepresentationItem_get_type_descriptor(*args)

class StepGeom_Surface(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Surface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Surface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Surface self) -> StepGeom_Surface

        Returns a Surface


        """
        this = _StepGeom.new_StepGeom_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Surface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Surface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Surface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Surface
StepGeom_Surface_swigregister = _StepGeom.StepGeom_Surface_swigregister
StepGeom_Surface_swigregister(StepGeom_Surface)

def StepGeom_Surface_get_type_name(*args):
    """
    StepGeom_Surface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Surface_get_type_name(*args)

def StepGeom_Surface_get_type_descriptor(*args):
    """
    StepGeom_Surface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Surface_get_type_descriptor(*args)

class StepGeom_Curve(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Curve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Curve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Curve self) -> StepGeom_Curve

        Returns a Curve


        """
        this = _StepGeom.new_StepGeom_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Curve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Curve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Curve
StepGeom_Curve_swigregister = _StepGeom.StepGeom_Curve_swigregister
StepGeom_Curve_swigregister(StepGeom_Curve)

def StepGeom_Curve_get_type_name(*args):
    """
    StepGeom_Curve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Curve_get_type_name(*args)

def StepGeom_Curve_get_type_descriptor(*args):
    """
    StepGeom_Curve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Curve_get_type_descriptor(*args)

class StepGeom_BoundedSurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BoundedSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BoundedSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BoundedSurface self) -> StepGeom_BoundedSurface

        Returns a BoundedSurface


        """
        this = _StepGeom.new_StepGeom_BoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BoundedSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BoundedSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BoundedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BoundedSurface
StepGeom_BoundedSurface_swigregister = _StepGeom.StepGeom_BoundedSurface_swigregister
StepGeom_BoundedSurface_swigregister(StepGeom_BoundedSurface)

def StepGeom_BoundedSurface_get_type_name(*args):
    """
    StepGeom_BoundedSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BoundedSurface_get_type_name(*args)

def StepGeom_BoundedSurface_get_type_descriptor(*args):
    """
    StepGeom_BoundedSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BoundedSurface_get_type_descriptor(*args)

class StepGeom_BoundedCurve(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BoundedCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BoundedCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BoundedCurve self) -> StepGeom_BoundedCurve

        Returns a BoundedCurve


        """
        this = _StepGeom.new_StepGeom_BoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BoundedCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BoundedCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BoundedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BoundedCurve
StepGeom_BoundedCurve_swigregister = _StepGeom.StepGeom_BoundedCurve_swigregister
StepGeom_BoundedCurve_swigregister(StepGeom_BoundedCurve)

def StepGeom_BoundedCurve_get_type_name(*args):
    """
    StepGeom_BoundedCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BoundedCurve_get_type_name(*args)

def StepGeom_BoundedCurve_get_type_descriptor(*args):
    """
    StepGeom_BoundedCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BoundedCurve_get_type_descriptor(*args)

class StepGeom_CompositeCurve(StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CompositeCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CompositeCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CompositeCurve self) -> StepGeom_CompositeCurve

        Returns a CompositeCurve


        """
        this = _StepGeom.new_StepGeom_CompositeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_CompositeCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_CompositeCurve_Init(self, *args)


    def SetSegments(self, *args):
        """
        SetSegments(StepGeom_CompositeCurve self, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments)

        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.StepGeom_CompositeCurve_SetSegments(self, *args)


    def Segments(self, *args):
        """
        Segments(StepGeom_CompositeCurve self) -> Handle_StepGeom_HArray1OfCompositeCurveSegment

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.StepGeom_CompositeCurve_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        SegmentsValue(StepGeom_CompositeCurve self, Standard_Integer const num) -> Handle_StepGeom_CompositeCurveSegment

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.StepGeom_CompositeCurve_SegmentsValue(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(StepGeom_CompositeCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_CompositeCurve_NbSegments(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(StepGeom_CompositeCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_CompositeCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(StepGeom_CompositeCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_CompositeCurve_SelfIntersect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CompositeCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CompositeCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CompositeCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CompositeCurve
StepGeom_CompositeCurve_swigregister = _StepGeom.StepGeom_CompositeCurve_swigregister
StepGeom_CompositeCurve_swigregister(StepGeom_CompositeCurve)

def StepGeom_CompositeCurve_get_type_name(*args):
    """
    StepGeom_CompositeCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CompositeCurve_get_type_name(*args)

def StepGeom_CompositeCurve_get_type_descriptor(*args):
    """
    StepGeom_CompositeCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CompositeCurve_get_type_descriptor(*args)

class StepGeom_Placement(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Placement
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Placement(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Placement self) -> StepGeom_Placement

        Returns a Placement


        """
        this = _StepGeom.new_StepGeom_Placement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Placement self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_CartesianPoint aLocation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aLocation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Placement_Init(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(StepGeom_Placement self, Handle_StepGeom_CartesianPoint aLocation)

        :type aLocation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Placement_SetLocation(self, *args)


    def Location(self, *args):
        """
        Location(StepGeom_Placement self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Placement_Location(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Placement_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Placement_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Placement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Placement
StepGeom_Placement_swigregister = _StepGeom.StepGeom_Placement_swigregister
StepGeom_Placement_swigregister(StepGeom_Placement)

def StepGeom_Placement_get_type_name(*args):
    """
    StepGeom_Placement_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Placement_get_type_name(*args)

def StepGeom_Placement_get_type_descriptor(*args):
    """
    StepGeom_Placement_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Placement_get_type_descriptor(*args)

class StepGeom_CompositeCurveOnSurface(StepGeom_CompositeCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CompositeCurveOnSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CompositeCurveOnSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CompositeCurveOnSurface self) -> StepGeom_CompositeCurveOnSurface

        Returns a CompositeCurveOnSurface


        """
        this = _StepGeom.new_StepGeom_CompositeCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CompositeCurveOnSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CompositeCurveOnSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CompositeCurveOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CompositeCurveOnSurface
StepGeom_CompositeCurveOnSurface_swigregister = _StepGeom.StepGeom_CompositeCurveOnSurface_swigregister
StepGeom_CompositeCurveOnSurface_swigregister(StepGeom_CompositeCurveOnSurface)

def StepGeom_CompositeCurveOnSurface_get_type_name(*args):
    """
    StepGeom_CompositeCurveOnSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CompositeCurveOnSurface_get_type_name(*args)

def StepGeom_CompositeCurveOnSurface_get_type_descriptor(*args):
    """
    StepGeom_CompositeCurveOnSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CompositeCurveOnSurface_get_type_descriptor(*args)

class StepGeom_BSplineSurface(StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BSplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BSplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BSplineSurface self) -> StepGeom_BSplineSurface

        Returns a BSplineSurface


        """
        this = _StepGeom.new_StepGeom_BSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_BSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_Init(self, *args)


    def SetUDegree(self, *args):
        """
        SetUDegree(StepGeom_BSplineSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.StepGeom_BSplineSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(StepGeom_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(StepGeom_BSplineSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.StepGeom_BSplineSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(StepGeom_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(StepGeom_BSplineSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.StepGeom_BSplineSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(StepGeom_BSplineSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.StepGeom_BSplineSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(StepGeom_BSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_BSplineSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(StepGeom_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(StepGeom_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(StepGeom_BSplineSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.StepGeom_BSplineSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(StepGeom_BSplineSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.StepGeom_BSplineSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(StepGeom_BSplineSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(StepGeom_BSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(StepGeom_BSplineSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(StepGeom_BSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(StepGeom_BSplineSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(StepGeom_BSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_SelfIntersect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BSplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BSplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineSurface
StepGeom_BSplineSurface_swigregister = _StepGeom.StepGeom_BSplineSurface_swigregister
StepGeom_BSplineSurface_swigregister(StepGeom_BSplineSurface)

def StepGeom_BSplineSurface_get_type_name(*args):
    """
    StepGeom_BSplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BSplineSurface_get_type_name(*args)

def StepGeom_BSplineSurface_get_type_descriptor(*args):
    """
    StepGeom_BSplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BSplineSurface_get_type_descriptor(*args)

class StepGeom_Conic(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Conic
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Conic(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Conic self) -> StepGeom_Conic

        Returns a Conic


        """
        this = _StepGeom.new_StepGeom_Conic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Conic self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.StepGeom_Conic_Init(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(StepGeom_Conic self, StepGeom_Axis2Placement aPosition)

        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.StepGeom_Conic_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(StepGeom_Conic self) -> StepGeom_Axis2Placement

        :rtype: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.StepGeom_Conic_Position(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Conic_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Conic_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Conic_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Conic
StepGeom_Conic_swigregister = _StepGeom.StepGeom_Conic_swigregister
StepGeom_Conic_swigregister(StepGeom_Conic)

def StepGeom_Conic_get_type_name(*args):
    """
    StepGeom_Conic_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Conic_get_type_name(*args)

def StepGeom_Conic_get_type_descriptor(*args):
    """
    StepGeom_Conic_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Conic_get_type_descriptor(*args)

class StepGeom_Parabola(StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Parabola
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Parabola(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Parabola self) -> StepGeom_Parabola

        Returns a Parabola


        """
        this = _StepGeom.new_StepGeom_Parabola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Parabola self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition, Standard_Real const aFocalDist)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement
        :type aFocalDist: float

        """
        return _StepGeom.StepGeom_Parabola_Init(self, *args)


    def SetFocalDist(self, *args):
        """
        SetFocalDist(StepGeom_Parabola self, Standard_Real const aFocalDist)

        :type aFocalDist: float

        """
        return _StepGeom.StepGeom_Parabola_SetFocalDist(self, *args)


    def FocalDist(self, *args):
        """
        FocalDist(StepGeom_Parabola self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_Parabola_FocalDist(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Parabola_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Parabola_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Parabola_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Parabola
StepGeom_Parabola_swigregister = _StepGeom.StepGeom_Parabola_swigregister
StepGeom_Parabola_swigregister(StepGeom_Parabola)

def StepGeom_Parabola_get_type_name(*args):
    """
    StepGeom_Parabola_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Parabola_get_type_name(*args)

def StepGeom_Parabola_get_type_descriptor(*args):
    """
    StepGeom_Parabola_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Parabola_get_type_descriptor(*args)

class StepGeom_ElementarySurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_ElementarySurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_ElementarySurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_ElementarySurface self) -> StepGeom_ElementarySurface

        Returns a ElementarySurface


        """
        this = _StepGeom.new_StepGeom_ElementarySurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_ElementarySurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.StepGeom_ElementarySurface_Init(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(StepGeom_ElementarySurface self, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.StepGeom_ElementarySurface_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(StepGeom_ElementarySurface self) -> Handle_StepGeom_Axis2Placement3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.StepGeom_ElementarySurface_Position(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_ElementarySurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_ElementarySurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_ElementarySurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_ElementarySurface
StepGeom_ElementarySurface_swigregister = _StepGeom.StepGeom_ElementarySurface_swigregister
StepGeom_ElementarySurface_swigregister(StepGeom_ElementarySurface)

def StepGeom_ElementarySurface_get_type_name(*args):
    """
    StepGeom_ElementarySurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_ElementarySurface_get_type_name(*args)

def StepGeom_ElementarySurface_get_type_descriptor(*args):
    """
    StepGeom_ElementarySurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_ElementarySurface_get_type_descriptor(*args)

class StepGeom_HArray1OfSurfaceBoundary(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray1OfSurfaceBoundary
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray1OfSurfaceBoundary(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray1OfSurfaceBoundary self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepGeom_HArray1OfSurfaceBoundary
        __init__(StepGeom_HArray1OfSurfaceBoundary self, Standard_Integer const theLower, Standard_Integer const theUpper, StepGeom_SurfaceBoundary theValue) -> StepGeom_HArray1OfSurfaceBoundary
        __init__(StepGeom_HArray1OfSurfaceBoundary self, NCollection_Array1_StepGeom_SurfaceBoundary theOther) -> StepGeom_HArray1OfSurfaceBoundary

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array1OfSurfaceBoundary

        """
        this = _StepGeom.new_StepGeom_HArray1OfSurfaceBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfSurfaceBoundary

        """
        res = _StepGeom.StepGeom_HArray1OfSurfaceBoundary_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepGeom_HArray1OfSurfaceBoundary self) -> NCollection_Array1_StepGeom_SurfaceBoundary

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfSurfaceBoundary

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray1OfSurfaceBoundary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfSurfaceBoundary
StepGeom_HArray1OfSurfaceBoundary_swigregister = _StepGeom.StepGeom_HArray1OfSurfaceBoundary_swigregister
StepGeom_HArray1OfSurfaceBoundary_swigregister(StepGeom_HArray1OfSurfaceBoundary)

def StepGeom_HArray1OfSurfaceBoundary_get_type_name(*args):
    """
    StepGeom_HArray1OfSurfaceBoundary_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_get_type_name(*args)

def StepGeom_HArray1OfSurfaceBoundary_get_type_descriptor(*args):
    """
    StepGeom_HArray1OfSurfaceBoundary_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_get_type_descriptor(*args)

class StepGeom_Plane(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Plane
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Plane(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Plane self) -> StepGeom_Plane

        Returns a Plane


        """
        this = _StepGeom.new_StepGeom_Plane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Plane_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Plane_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Plane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Plane
StepGeom_Plane_swigregister = _StepGeom.StepGeom_Plane_swigregister
StepGeom_Plane_swigregister(StepGeom_Plane)

def StepGeom_Plane_get_type_name(*args):
    """
    StepGeom_Plane_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Plane_get_type_name(*args)

def StepGeom_Plane_get_type_descriptor(*args):
    """
    StepGeom_Plane_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Plane_get_type_descriptor(*args)

class StepGeom_Axis2Placement3d(StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Axis2Placement3d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Axis2Placement3d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Axis2Placement3d self) -> StepGeom_Axis2Placement3d

        Returns a Axis2Placement3d


        """
        this = _StepGeom.new_StepGeom_Axis2Placement3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Axis2Placement3d self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_CartesianPoint aLocation, Standard_Boolean const hasAaxis, Handle_StepGeom_Direction aAxis, Standard_Boolean const hasArefDirection, Handle_StepGeom_Direction aRefDirection)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aLocation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type hasAaxis: bool
        :type aAxis: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type hasArefDirection: bool
        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement3d_Init(self, *args)


    def SetAxis(self, *args):
        """
        SetAxis(StepGeom_Axis2Placement3d self, Handle_StepGeom_Direction aAxis)

        :type aAxis: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement3d_SetAxis(self, *args)


    def UnSetAxis(self, *args):
        """UnSetAxis(StepGeom_Axis2Placement3d self)"""
        return _StepGeom.StepGeom_Axis2Placement3d_UnSetAxis(self, *args)


    def Axis(self, *args):
        """
        Axis(StepGeom_Axis2Placement3d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement3d_Axis(self, *args)


    def HasAxis(self, *args):
        """
        HasAxis(StepGeom_Axis2Placement3d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_Axis2Placement3d_HasAxis(self, *args)


    def SetRefDirection(self, *args):
        """
        SetRefDirection(StepGeom_Axis2Placement3d self, Handle_StepGeom_Direction aRefDirection)

        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement3d_SetRefDirection(self, *args)


    def UnSetRefDirection(self, *args):
        """UnSetRefDirection(StepGeom_Axis2Placement3d self)"""
        return _StepGeom.StepGeom_Axis2Placement3d_UnSetRefDirection(self, *args)


    def RefDirection(self, *args):
        """
        RefDirection(StepGeom_Axis2Placement3d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement3d_RefDirection(self, *args)


    def HasRefDirection(self, *args):
        """
        HasRefDirection(StepGeom_Axis2Placement3d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_Axis2Placement3d_HasRefDirection(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Axis2Placement3d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Axis2Placement3d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Axis2Placement3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Axis2Placement3d
StepGeom_Axis2Placement3d_swigregister = _StepGeom.StepGeom_Axis2Placement3d_swigregister
StepGeom_Axis2Placement3d_swigregister(StepGeom_Axis2Placement3d)

def StepGeom_Axis2Placement3d_get_type_name(*args):
    """
    StepGeom_Axis2Placement3d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Axis2Placement3d_get_type_name(*args)

def StepGeom_Axis2Placement3d_get_type_descriptor(*args):
    """
    StepGeom_Axis2Placement3d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Axis2Placement3d_get_type_descriptor(*args)

class StepGeom_BSplineCurve(StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BSplineCurve self) -> StepGeom_BSplineCurve

        Returns a BSplineCurve


        """
        this = _StepGeom.new_StepGeom_BSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_BSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineCurve_Init(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(StepGeom_BSplineCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.StepGeom_BSplineCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(StepGeom_BSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(StepGeom_BSplineCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.StepGeom_BSplineCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(StepGeom_BSplineCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.StepGeom_BSplineCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(StepGeom_BSplineCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_BSplineCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(StepGeom_BSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(StepGeom_BSplineCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.StepGeom_BSplineCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(StepGeom_BSplineCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.StepGeom_BSplineCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(StepGeom_BSplineCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(StepGeom_BSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(StepGeom_BSplineCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(StepGeom_BSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineCurve_SelfIntersect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineCurve
StepGeom_BSplineCurve_swigregister = _StepGeom.StepGeom_BSplineCurve_swigregister
StepGeom_BSplineCurve_swigregister(StepGeom_BSplineCurve)

def StepGeom_BSplineCurve_get_type_name(*args):
    """
    StepGeom_BSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BSplineCurve_get_type_name(*args)

def StepGeom_BSplineCurve_get_type_descriptor(*args):
    """
    StepGeom_BSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BSplineCurve_get_type_descriptor(*args)

class StepGeom_HArray1OfCompositeCurveSegment(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray1OfCompositeCurveSegment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray1OfCompositeCurveSegment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray1OfCompositeCurveSegment self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepGeom_HArray1OfCompositeCurveSegment
        __init__(StepGeom_HArray1OfCompositeCurveSegment self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepGeom_CompositeCurveSegment theValue) -> StepGeom_HArray1OfCompositeCurveSegment
        __init__(StepGeom_HArray1OfCompositeCurveSegment self, NCollection_Array1_Handle_StepGeom_CompositeCurveSegment theOther) -> StepGeom_HArray1OfCompositeCurveSegment

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array1OfCompositeCurveSegment

        """
        this = _StepGeom.new_StepGeom_HArray1OfCompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCompositeCurveSegment

        """
        res = _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepGeom_HArray1OfCompositeCurveSegment self) -> NCollection_Array1_Handle_StepGeom_CompositeCurveSegment

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCompositeCurveSegment

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfCompositeCurveSegment
StepGeom_HArray1OfCompositeCurveSegment_swigregister = _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_swigregister
StepGeom_HArray1OfCompositeCurveSegment_swigregister(StepGeom_HArray1OfCompositeCurveSegment)

def StepGeom_HArray1OfCompositeCurveSegment_get_type_name(*args):
    """
    StepGeom_HArray1OfCompositeCurveSegment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_get_type_name(*args)

def StepGeom_HArray1OfCompositeCurveSegment_get_type_descriptor(*args):
    """
    StepGeom_HArray1OfCompositeCurveSegment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_get_type_descriptor(*args)

class StepGeom_Point(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Point
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Point(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Point self) -> StepGeom_Point

        Returns a Point


        """
        this = _StepGeom.new_StepGeom_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Point_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Point_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Point_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Point
StepGeom_Point_swigregister = _StepGeom.StepGeom_Point_swigregister
StepGeom_Point_swigregister(StepGeom_Point)

def StepGeom_Point_get_type_name(*args):
    """
    StepGeom_Point_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Point_get_type_name(*args)

def StepGeom_Point_get_type_descriptor(*args):
    """
    StepGeom_Point_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Point_get_type_descriptor(*args)

class StepGeom_SurfaceCurve(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SurfaceCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SurfaceCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SurfaceCurve self) -> StepGeom_SurfaceCurve

        Returns a SurfaceCurve


        """
        this = _StepGeom.new_StepGeom_SurfaceCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_SurfaceCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aCurve3d, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface
        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.StepGeom_SurfaceCurve_Init(self, *args)


    def SetCurve3d(self, *args):
        """
        SetCurve3d(StepGeom_SurfaceCurve self, Handle_StepGeom_Curve aCurve3d)

        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_SurfaceCurve_SetCurve3d(self, *args)


    def Curve3d(self, *args):
        """
        Curve3d(StepGeom_SurfaceCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_SurfaceCurve_Curve3d(self, *args)


    def SetAssociatedGeometry(self, *args):
        """
        SetAssociatedGeometry(StepGeom_SurfaceCurve self, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry)

        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.StepGeom_SurfaceCurve_SetAssociatedGeometry(self, *args)


    def AssociatedGeometry(self, *args):
        """
        AssociatedGeometry(StepGeom_SurfaceCurve self) -> Handle_StepGeom_HArray1OfPcurveOrSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.StepGeom_SurfaceCurve_AssociatedGeometry(self, *args)


    def AssociatedGeometryValue(self, *args):
        """
        AssociatedGeometryValue(StepGeom_SurfaceCurve self, Standard_Integer const num) -> StepGeom_PcurveOrSurface

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_PcurveOrSurface

        """
        return _StepGeom.StepGeom_SurfaceCurve_AssociatedGeometryValue(self, *args)


    def NbAssociatedGeometry(self, *args):
        """
        NbAssociatedGeometry(StepGeom_SurfaceCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_SurfaceCurve_NbAssociatedGeometry(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        SetMasterRepresentation(StepGeom_SurfaceCurve self, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.StepGeom_SurfaceCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        MasterRepresentation(StepGeom_SurfaceCurve self) -> StepGeom_PreferredSurfaceCurveRepresentation

        :rtype: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.StepGeom_SurfaceCurve_MasterRepresentation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SurfaceCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SurfaceCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SurfaceCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceCurve
StepGeom_SurfaceCurve_swigregister = _StepGeom.StepGeom_SurfaceCurve_swigregister
StepGeom_SurfaceCurve_swigregister(StepGeom_SurfaceCurve)

def StepGeom_SurfaceCurve_get_type_name(*args):
    """
    StepGeom_SurfaceCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SurfaceCurve_get_type_name(*args)

def StepGeom_SurfaceCurve_get_type_descriptor(*args):
    """
    StepGeom_SurfaceCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SurfaceCurve_get_type_descriptor(*args)

class StepGeom_HArray2OfSurfacePatch(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray2OfSurfacePatch
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray2OfSurfacePatch(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray2OfSurfacePatch self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> StepGeom_HArray2OfSurfacePatch
        __init__(StepGeom_HArray2OfSurfacePatch self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, Handle_StepGeom_SurfacePatch theValue) -> StepGeom_HArray2OfSurfacePatch
        __init__(StepGeom_HArray2OfSurfacePatch self, NCollection_Array2_Handle_StepGeom_SurfacePatch theOther) -> StepGeom_HArray2OfSurfacePatch

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array2OfSurfacePatch

        """
        this = _StepGeom.new_StepGeom_HArray2OfSurfacePatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array2OfSurfacePatch

        """
        res = _StepGeom.StepGeom_HArray2OfSurfacePatch_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(StepGeom_HArray2OfSurfacePatch self) -> NCollection_Array2_Handle_StepGeom_SurfacePatch

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array2OfSurfacePatch

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray2OfSurfacePatch_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray2OfSurfacePatch
StepGeom_HArray2OfSurfacePatch_swigregister = _StepGeom.StepGeom_HArray2OfSurfacePatch_swigregister
StepGeom_HArray2OfSurfacePatch_swigregister(StepGeom_HArray2OfSurfacePatch)

def StepGeom_HArray2OfSurfacePatch_get_type_name(*args):
    """
    StepGeom_HArray2OfSurfacePatch_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray2OfSurfacePatch_get_type_name(*args)

def StepGeom_HArray2OfSurfacePatch_get_type_descriptor(*args):
    """
    StepGeom_HArray2OfSurfacePatch_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray2OfSurfacePatch_get_type_descriptor(*args)

class StepGeom_RationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_RationalBSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_RationalBSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_RationalBSplineCurve self) -> StepGeom_RationalBSplineCurve

        Returns a RationalBSplineCurve


        """
        this = _StepGeom.new_StepGeom_RationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_RationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_Init(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_RationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_RationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_RationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(StepGeom_RationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_RationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_RationalBSplineCurve
StepGeom_RationalBSplineCurve_swigregister = _StepGeom.StepGeom_RationalBSplineCurve_swigregister
StepGeom_RationalBSplineCurve_swigregister(StepGeom_RationalBSplineCurve)

def StepGeom_RationalBSplineCurve_get_type_name(*args):
    """
    StepGeom_RationalBSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_RationalBSplineCurve_get_type_name(*args)

def StepGeom_RationalBSplineCurve_get_type_descriptor(*args):
    """
    StepGeom_RationalBSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_RationalBSplineCurve_get_type_descriptor(*args)

class StepGeom_SurfaceCurveAndBoundedCurve(StepGeom_SurfaceCurve):
    """
    complex type: bounded_curve + surface_curve
    needed for curve_bounded_surfaces (S4132)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SurfaceCurveAndBoundedCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SurfaceCurveAndBoundedCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SurfaceCurveAndBoundedCurve self) -> StepGeom_SurfaceCurveAndBoundedCurve

        creates empty object


        """
        this = _StepGeom.new_StepGeom_SurfaceCurveAndBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def BoundedCurve(self, *args):
        """
        BoundedCurve(StepGeom_SurfaceCurveAndBoundedCurve self) -> Handle_StepGeom_BoundedCurve

        returns field BoundedCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve

        """
        return _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_BoundedCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceCurveAndBoundedCurve
StepGeom_SurfaceCurveAndBoundedCurve_swigregister = _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_swigregister
StepGeom_SurfaceCurveAndBoundedCurve_swigregister(StepGeom_SurfaceCurveAndBoundedCurve)

def StepGeom_SurfaceCurveAndBoundedCurve_get_type_name(*args):
    """
    StepGeom_SurfaceCurveAndBoundedCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_get_type_name(*args)

def StepGeom_SurfaceCurveAndBoundedCurve_get_type_descriptor(*args):
    """
    StepGeom_SurfaceCurveAndBoundedCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_get_type_descriptor(*args)

class StepGeom_UniformSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_UniformSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_UniformSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_UniformSurface self) -> StepGeom_UniformSurface

        Returns a UniformSurface


        """
        this = _StepGeom.new_StepGeom_UniformSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_UniformSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_UniformSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_UniformSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_UniformSurface
StepGeom_UniformSurface_swigregister = _StepGeom.StepGeom_UniformSurface_swigregister
StepGeom_UniformSurface_swigregister(StepGeom_UniformSurface)

def StepGeom_UniformSurface_get_type_name(*args):
    """
    StepGeom_UniformSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_UniformSurface_get_type_name(*args)

def StepGeom_UniformSurface_get_type_descriptor(*args):
    """
    StepGeom_UniformSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_UniformSurface_get_type_descriptor(*args)

class StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(StepRepr.StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> StepGeom_GeometricRepresentationContextAndParametricRepresentationContext

        empty constructor


        """
        this = _StepGeom.new_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext, Handle_StepRepr_ParametricRepresentationContext aParametricRepresentationContext)
        Init(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Standard_Integer const aCoordinateSpaceDimension)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        SetGeometricRepresentationContext(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext)

        :type aGeometricRepresentationContext: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        GeometricRepresentationContext(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Handle_StepGeom_GeometricRepresentationContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_GeometricRepresentationContext(self, *args)


    def SetParametricRepresentationContext(self, *args):
        """
        SetParametricRepresentationContext(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_StepRepr_ParametricRepresentationContext aParametricRepresentationContext)

        :type aParametricRepresentationContext: OCC.wrapper.StepGeom.Handle_StepRepr_ParametricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetParametricRepresentationContext(self, *args)


    def ParametricRepresentationContext(self, *args):
        """
        ParametricRepresentationContext(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Handle_StepRepr_ParametricRepresentationContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_ParametricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_ParametricRepresentationContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        SetCoordinateSpaceDimension(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Standard_Integer const aCoordinateSpaceDimension)

        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        CoordinateSpaceDimension(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_CoordinateSpaceDimension(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister = _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)

def StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_name(*args):
    """
    StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_name(*args)

def StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_descriptor(*args):
    """
    StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_descriptor(*args)

class StepGeom_PointOnSurface(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_PointOnSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_PointOnSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_PointOnSurface self) -> StepGeom_PointOnSurface

        Returns a PointOnSurface


        """
        this = _StepGeom.new_StepGeom_PointOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_PointOnSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Standard_Real const aPointParameterU, Standard_Real const aPointParameterV)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aPointParameterU: float
        :type aPointParameterV: float

        """
        return _StepGeom.StepGeom_PointOnSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(StepGeom_PointOnSurface self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_PointOnSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(StepGeom_PointOnSurface self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_PointOnSurface_BasisSurface(self, *args)


    def SetPointParameterU(self, *args):
        """
        SetPointParameterU(StepGeom_PointOnSurface self, Standard_Real const aPointParameterU)

        :type aPointParameterU: float

        """
        return _StepGeom.StepGeom_PointOnSurface_SetPointParameterU(self, *args)


    def PointParameterU(self, *args):
        """
        PointParameterU(StepGeom_PointOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_PointOnSurface_PointParameterU(self, *args)


    def SetPointParameterV(self, *args):
        """
        SetPointParameterV(StepGeom_PointOnSurface self, Standard_Real const aPointParameterV)

        :type aPointParameterV: float

        """
        return _StepGeom.StepGeom_PointOnSurface_SetPointParameterV(self, *args)


    def PointParameterV(self, *args):
        """
        PointParameterV(StepGeom_PointOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_PointOnSurface_PointParameterV(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_PointOnSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_PointOnSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_PointOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_PointOnSurface
StepGeom_PointOnSurface_swigregister = _StepGeom.StepGeom_PointOnSurface_swigregister
StepGeom_PointOnSurface_swigregister(StepGeom_PointOnSurface)

def StepGeom_PointOnSurface_get_type_name(*args):
    """
    StepGeom_PointOnSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_PointOnSurface_get_type_name(*args)

def StepGeom_PointOnSurface_get_type_descriptor(*args):
    """
    StepGeom_PointOnSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_PointOnSurface_get_type_descriptor(*args)

class StepGeom_CompositeCurveSegment(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CompositeCurveSegment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CompositeCurveSegment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CompositeCurveSegment self) -> StepGeom_CompositeCurveSegment

        Returns a CompositeCurveSegment


        """
        this = _StepGeom.new_StepGeom_CompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_CompositeCurveSegment self, StepGeom_TransitionCode const aTransition, Standard_Boolean const aSameSense, Handle_StepGeom_Curve aParentCurve)

        :type aTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode
        :type aSameSense: bool
        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_Init(self, *args)


    def SetTransition(self, *args):
        """
        SetTransition(StepGeom_CompositeCurveSegment self, StepGeom_TransitionCode const aTransition)

        :type aTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_SetTransition(self, *args)


    def Transition(self, *args):
        """
        Transition(StepGeom_CompositeCurveSegment self) -> StepGeom_TransitionCode

        :rtype: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_Transition(self, *args)


    def SetSameSense(self, *args):
        """
        SetSameSense(StepGeom_CompositeCurveSegment self, Standard_Boolean const aSameSense)

        :type aSameSense: bool

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_SetSameSense(self, *args)


    def SameSense(self, *args):
        """
        SameSense(StepGeom_CompositeCurveSegment self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_SameSense(self, *args)


    def SetParentCurve(self, *args):
        """
        SetParentCurve(StepGeom_CompositeCurveSegment self, Handle_StepGeom_Curve aParentCurve)

        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_SetParentCurve(self, *args)


    def ParentCurve(self, *args):
        """
        ParentCurve(StepGeom_CompositeCurveSegment self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_ParentCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CompositeCurveSegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CompositeCurveSegment
StepGeom_CompositeCurveSegment_swigregister = _StepGeom.StepGeom_CompositeCurveSegment_swigregister
StepGeom_CompositeCurveSegment_swigregister(StepGeom_CompositeCurveSegment)

def StepGeom_CompositeCurveSegment_get_type_name(*args):
    """
    StepGeom_CompositeCurveSegment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CompositeCurveSegment_get_type_name(*args)

def StepGeom_CompositeCurveSegment_get_type_descriptor(*args):
    """
    StepGeom_CompositeCurveSegment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CompositeCurveSegment_get_type_descriptor(*args)

class StepGeom_RectangularTrimmedSurface(StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_RectangularTrimmedSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_RectangularTrimmedSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_RectangularTrimmedSurface self) -> StepGeom_RectangularTrimmedSurface

        Returns a RectangularTrimmedSurface


        """
        this = _StepGeom.new_StepGeom_RectangularTrimmedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_RectangularTrimmedSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Standard_Real const aU1, Standard_Real const aU2, Standard_Real const aV1, Standard_Real const aV2, Standard_Boolean const aUsense, Standard_Boolean const aVsense)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aU1: float
        :type aU2: float
        :type aV1: float
        :type aV2: float
        :type aUsense: bool
        :type aVsense: bool

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(StepGeom_RectangularTrimmedSurface self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(StepGeom_RectangularTrimmedSurface self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_BasisSurface(self, *args)


    def SetU1(self, *args):
        """
        SetU1(StepGeom_RectangularTrimmedSurface self, Standard_Real const aU1)

        :type aU1: float

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetU1(self, *args)


    def U1(self, *args):
        """
        U1(StepGeom_RectangularTrimmedSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_U1(self, *args)


    def SetU2(self, *args):
        """
        SetU2(StepGeom_RectangularTrimmedSurface self, Standard_Real const aU2)

        :type aU2: float

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetU2(self, *args)


    def U2(self, *args):
        """
        U2(StepGeom_RectangularTrimmedSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_U2(self, *args)


    def SetV1(self, *args):
        """
        SetV1(StepGeom_RectangularTrimmedSurface self, Standard_Real const aV1)

        :type aV1: float

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetV1(self, *args)


    def V1(self, *args):
        """
        V1(StepGeom_RectangularTrimmedSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_V1(self, *args)


    def SetV2(self, *args):
        """
        SetV2(StepGeom_RectangularTrimmedSurface self, Standard_Real const aV2)

        :type aV2: float

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetV2(self, *args)


    def V2(self, *args):
        """
        V2(StepGeom_RectangularTrimmedSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_V2(self, *args)


    def SetUsense(self, *args):
        """
        SetUsense(StepGeom_RectangularTrimmedSurface self, Standard_Boolean const aUsense)

        :type aUsense: bool

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetUsense(self, *args)


    def Usense(self, *args):
        """
        Usense(StepGeom_RectangularTrimmedSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_Usense(self, *args)


    def SetVsense(self, *args):
        """
        SetVsense(StepGeom_RectangularTrimmedSurface self, Standard_Boolean const aVsense)

        :type aVsense: bool

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetVsense(self, *args)


    def Vsense(self, *args):
        """
        Vsense(StepGeom_RectangularTrimmedSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_Vsense(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_RectangularTrimmedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_RectangularTrimmedSurface
StepGeom_RectangularTrimmedSurface_swigregister = _StepGeom.StepGeom_RectangularTrimmedSurface_swigregister
StepGeom_RectangularTrimmedSurface_swigregister(StepGeom_RectangularTrimmedSurface)

def StepGeom_RectangularTrimmedSurface_get_type_name(*args):
    """
    StepGeom_RectangularTrimmedSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_RectangularTrimmedSurface_get_type_name(*args)

def StepGeom_RectangularTrimmedSurface_get_type_descriptor(*args):
    """
    StepGeom_RectangularTrimmedSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_RectangularTrimmedSurface_get_type_descriptor(*args)

class StepGeom_CurveBoundedSurface(StepGeom_BoundedSurface):
    """Representation of STEP entity CurveBoundedSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CurveBoundedSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CurveBoundedSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CurveBoundedSurface self) -> StepGeom_CurveBoundedSurface

        Empty constructor


        """
        this = _StepGeom.new_StepGeom_CurveBoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_CurveBoundedSurface self, Handle_TCollection_HAsciiString aRepresentationItem_Name, Handle_StepGeom_Surface aBasisSurface, Handle_StepGeom_HArray1OfSurfaceBoundary aBoundaries, Standard_Boolean const aImplicitOuter)

        Initialize all fields (own and inherited)

        :type aRepresentationItem_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aBoundaries: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary
        :type aImplicitOuter: bool

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_Init(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(StepGeom_CurveBoundedSurface self) -> Handle_StepGeom_Surface

        Returns field BasisSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_BasisSurface(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(StepGeom_CurveBoundedSurface self, Handle_StepGeom_Surface BasisSurface)

        Set field BasisSurface

        :type BasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_SetBasisSurface(self, *args)


    def Boundaries(self, *args):
        """
        Boundaries(StepGeom_CurveBoundedSurface self) -> Handle_StepGeom_HArray1OfSurfaceBoundary

        Returns field Boundaries

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_Boundaries(self, *args)


    def SetBoundaries(self, *args):
        """
        SetBoundaries(StepGeom_CurveBoundedSurface self, Handle_StepGeom_HArray1OfSurfaceBoundary Boundaries)

        Set field Boundaries

        :type Boundaries: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_SetBoundaries(self, *args)


    def ImplicitOuter(self, *args):
        """
        ImplicitOuter(StepGeom_CurveBoundedSurface self) -> Standard_Boolean

        Returns field ImplicitOuter

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_ImplicitOuter(self, *args)


    def SetImplicitOuter(self, *args):
        """
        SetImplicitOuter(StepGeom_CurveBoundedSurface self, Standard_Boolean const ImplicitOuter)

        Set field ImplicitOuter

        :type ImplicitOuter: bool

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_SetImplicitOuter(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CurveBoundedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CurveBoundedSurface
StepGeom_CurveBoundedSurface_swigregister = _StepGeom.StepGeom_CurveBoundedSurface_swigregister
StepGeom_CurveBoundedSurface_swigregister(StepGeom_CurveBoundedSurface)

def StepGeom_CurveBoundedSurface_get_type_name(*args):
    """
    StepGeom_CurveBoundedSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CurveBoundedSurface_get_type_name(*args)

def StepGeom_CurveBoundedSurface_get_type_descriptor(*args):
    """
    StepGeom_CurveBoundedSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CurveBoundedSurface_get_type_descriptor(*args)

class StepGeom_CartesianPoint(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CartesianPoint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CartesianPoint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CartesianPoint self) -> StepGeom_CartesianPoint

        Returns a CartesianPoint


        """
        this = _StepGeom.new_StepGeom_CartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_CartesianPoint self, Handle_TCollection_HAsciiString aName, Handle_TColStd_HArray1OfReal aCoordinates)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinates: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_CartesianPoint_Init(self, *args)


    def Init2D(self, *args):
        """
        Init2D(StepGeom_CartesianPoint self, Handle_TCollection_HAsciiString aName, Standard_Real const X, Standard_Real const Y)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type X: float
        :type Y: float

        """
        return _StepGeom.StepGeom_CartesianPoint_Init2D(self, *args)


    def Init3D(self, *args):
        """
        Init3D(StepGeom_CartesianPoint self, Handle_TCollection_HAsciiString aName, Standard_Real const X, Standard_Real const Y, Standard_Real const Z)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type X: float
        :type Y: float
        :type Z: float

        """
        return _StepGeom.StepGeom_CartesianPoint_Init3D(self, *args)


    def SetCoordinates(self, *args):
        """
        SetCoordinates(StepGeom_CartesianPoint self, Handle_TColStd_HArray1OfReal aCoordinates)

        :type aCoordinates: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_CartesianPoint_SetCoordinates(self, *args)


    def Coordinates(self, *args):
        """
        Coordinates(StepGeom_CartesianPoint self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_CartesianPoint_Coordinates(self, *args)


    def CoordinatesValue(self, *args):
        """
        CoordinatesValue(StepGeom_CartesianPoint self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_CartesianPoint_CoordinatesValue(self, *args)


    def NbCoordinates(self, *args):
        """
        NbCoordinates(StepGeom_CartesianPoint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_CartesianPoint_NbCoordinates(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CartesianPoint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CartesianPoint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CartesianPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CartesianPoint
StepGeom_CartesianPoint_swigregister = _StepGeom.StepGeom_CartesianPoint_swigregister
StepGeom_CartesianPoint_swigregister(StepGeom_CartesianPoint)

def StepGeom_CartesianPoint_get_type_name(*args):
    """
    StepGeom_CartesianPoint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CartesianPoint_get_type_name(*args)

def StepGeom_CartesianPoint_get_type_descriptor(*args):
    """
    StepGeom_CartesianPoint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CartesianPoint_get_type_descriptor(*args)

class StepGeom_HArray1OfCartesianPoint(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray1OfCartesianPoint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray1OfCartesianPoint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray1OfCartesianPoint self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepGeom_HArray1OfCartesianPoint
        __init__(StepGeom_HArray1OfCartesianPoint self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepGeom_CartesianPoint theValue) -> StepGeom_HArray1OfCartesianPoint
        __init__(StepGeom_HArray1OfCartesianPoint self, NCollection_Array1_Handle_StepGeom_CartesianPoint theOther) -> StepGeom_HArray1OfCartesianPoint

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array1OfCartesianPoint

        """
        this = _StepGeom.new_StepGeom_HArray1OfCartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCartesianPoint

        """
        res = _StepGeom.StepGeom_HArray1OfCartesianPoint_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepGeom_HArray1OfCartesianPoint self) -> NCollection_Array1_Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCartesianPoint

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray1OfCartesianPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfCartesianPoint
StepGeom_HArray1OfCartesianPoint_swigregister = _StepGeom.StepGeom_HArray1OfCartesianPoint_swigregister
StepGeom_HArray1OfCartesianPoint_swigregister(StepGeom_HArray1OfCartesianPoint)

def StepGeom_HArray1OfCartesianPoint_get_type_name(*args):
    """
    StepGeom_HArray1OfCartesianPoint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray1OfCartesianPoint_get_type_name(*args)

def StepGeom_HArray1OfCartesianPoint_get_type_descriptor(*args):
    """
    StepGeom_HArray1OfCartesianPoint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray1OfCartesianPoint_get_type_descriptor(*args)

class StepGeom_HArray1OfPcurveOrSurface(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray1OfPcurveOrSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray1OfPcurveOrSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray1OfPcurveOrSurface self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepGeom_HArray1OfPcurveOrSurface
        __init__(StepGeom_HArray1OfPcurveOrSurface self, Standard_Integer const theLower, Standard_Integer const theUpper, StepGeom_PcurveOrSurface theValue) -> StepGeom_HArray1OfPcurveOrSurface
        __init__(StepGeom_HArray1OfPcurveOrSurface self, NCollection_Array1_StepGeom_PcurveOrSurface theOther) -> StepGeom_HArray1OfPcurveOrSurface

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array1OfPcurveOrSurface

        """
        this = _StepGeom.new_StepGeom_HArray1OfPcurveOrSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfPcurveOrSurface

        """
        res = _StepGeom.StepGeom_HArray1OfPcurveOrSurface_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepGeom_HArray1OfPcurveOrSurface self) -> NCollection_Array1_StepGeom_PcurveOrSurface

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfPcurveOrSurface

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray1OfPcurveOrSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfPcurveOrSurface
StepGeom_HArray1OfPcurveOrSurface_swigregister = _StepGeom.StepGeom_HArray1OfPcurveOrSurface_swigregister
StepGeom_HArray1OfPcurveOrSurface_swigregister(StepGeom_HArray1OfPcurveOrSurface)

def StepGeom_HArray1OfPcurveOrSurface_get_type_name(*args):
    """
    StepGeom_HArray1OfPcurveOrSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_get_type_name(*args)

def StepGeom_HArray1OfPcurveOrSurface_get_type_descriptor(*args):
    """
    StepGeom_HArray1OfPcurveOrSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_get_type_descriptor(*args)

class StepGeom_PointOnCurve(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_PointOnCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_PointOnCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_PointOnCurve self) -> StepGeom_PointOnCurve

        Returns a PointOnCurve


        """
        this = _StepGeom.new_StepGeom_PointOnCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_PointOnCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aBasisCurve, Standard_Real const aPointParameter)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aPointParameter: float

        """
        return _StepGeom.StepGeom_PointOnCurve_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        SetBasisCurve(StepGeom_PointOnCurve self, Handle_StepGeom_Curve aBasisCurve)

        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_PointOnCurve_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(StepGeom_PointOnCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_PointOnCurve_BasisCurve(self, *args)


    def SetPointParameter(self, *args):
        """
        SetPointParameter(StepGeom_PointOnCurve self, Standard_Real const aPointParameter)

        :type aPointParameter: float

        """
        return _StepGeom.StepGeom_PointOnCurve_SetPointParameter(self, *args)


    def PointParameter(self, *args):
        """
        PointParameter(StepGeom_PointOnCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_PointOnCurve_PointParameter(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_PointOnCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_PointOnCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_PointOnCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_PointOnCurve
StepGeom_PointOnCurve_swigregister = _StepGeom.StepGeom_PointOnCurve_swigregister
StepGeom_PointOnCurve_swigregister(StepGeom_PointOnCurve)

def StepGeom_PointOnCurve_get_type_name(*args):
    """
    StepGeom_PointOnCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_PointOnCurve_get_type_name(*args)

def StepGeom_PointOnCurve_get_type_descriptor(*args):
    """
    StepGeom_PointOnCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_PointOnCurve_get_type_descriptor(*args)

class StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(StepRepr.StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext

        Returns a GeometricRepresentationContextAndGlobalUnitAssignedContext


        """
        this = _StepGeom.new_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext, Handle_StepRepr_GlobalUnitAssignedContext aGlobalUnitAssignedContext)
        Init(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Standard_Integer const aCoordinateSpaceDimension, Handle_StepBasic_HArray1OfNamedUnit aUnits)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinateSpaceDimension: int
        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        SetGeometricRepresentationContext(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext)

        :type aGeometricRepresentationContext: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        GeometricRepresentationContext(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Handle_StepGeom_GeometricRepresentationContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GeometricRepresentationContext(self, *args)


    def SetGlobalUnitAssignedContext(self, *args):
        """
        SetGlobalUnitAssignedContext(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepRepr_GlobalUnitAssignedContext aGlobalUnitAssignedContext)

        :type aGlobalUnitAssignedContext: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetGlobalUnitAssignedContext(self, *args)


    def GlobalUnitAssignedContext(self, *args):
        """
        GlobalUnitAssignedContext(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Handle_StepRepr_GlobalUnitAssignedContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GlobalUnitAssignedContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        SetCoordinateSpaceDimension(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Standard_Integer const aCoordinateSpaceDimension)

        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        CoordinateSpaceDimension(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_CoordinateSpaceDimension(self, *args)


    def SetUnits(self, *args):
        """
        SetUnits(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepBasic_HArray1OfNamedUnit aUnits)

        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetUnits(self, *args)


    def Units(self, *args):
        """
        Units(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Handle_StepBasic_HArray1OfNamedUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Units(self, *args)


    def UnitsValue(self, *args):
        """
        UnitsValue(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Standard_Integer const num) -> Handle_StepBasic_NamedUnit

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_NamedUnit

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_UnitsValue(self, *args)


    def NbUnits(self, *args):
        """
        NbUnits(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_NbUnits(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister = _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)

def StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_name(*args):
    """
    StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_name(*args)

def StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_descriptor(*args):
    """
    StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_descriptor(*args)

class StepGeom_DegeneratePcurve(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_DegeneratePcurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_DegeneratePcurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_DegeneratePcurve self) -> StepGeom_DegeneratePcurve

        Returns a DegeneratePcurve


        """
        this = _StepGeom.new_StepGeom_DegeneratePcurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_DegeneratePcurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.StepGeom_DegeneratePcurve_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(StepGeom_DegeneratePcurve self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_DegeneratePcurve_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(StepGeom_DegeneratePcurve self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_DegeneratePcurve_BasisSurface(self, *args)


    def SetReferenceToCurve(self, *args):
        """
        SetReferenceToCurve(StepGeom_DegeneratePcurve self, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve)

        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.StepGeom_DegeneratePcurve_SetReferenceToCurve(self, *args)


    def ReferenceToCurve(self, *args):
        """
        ReferenceToCurve(StepGeom_DegeneratePcurve self) -> Handle_StepRepr_DefinitionalRepresentation

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.StepGeom_DegeneratePcurve_ReferenceToCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_DegeneratePcurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_DegeneratePcurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_DegeneratePcurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_DegeneratePcurve
StepGeom_DegeneratePcurve_swigregister = _StepGeom.StepGeom_DegeneratePcurve_swigregister
StepGeom_DegeneratePcurve_swigregister(StepGeom_DegeneratePcurve)

def StepGeom_DegeneratePcurve_get_type_name(*args):
    """
    StepGeom_DegeneratePcurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_DegeneratePcurve_get_type_name(*args)

def StepGeom_DegeneratePcurve_get_type_descriptor(*args):
    """
    StepGeom_DegeneratePcurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_DegeneratePcurve_get_type_descriptor(*args)

class StepGeom_BoundaryCurve(StepGeom_CompositeCurveOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BoundaryCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BoundaryCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BoundaryCurve self) -> StepGeom_BoundaryCurve

        Returns a BoundaryCurve


        """
        this = _StepGeom.new_StepGeom_BoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BoundaryCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BoundaryCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BoundaryCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BoundaryCurve
StepGeom_BoundaryCurve_swigregister = _StepGeom.StepGeom_BoundaryCurve_swigregister
StepGeom_BoundaryCurve_swigregister(StepGeom_BoundaryCurve)

def StepGeom_BoundaryCurve_get_type_name(*args):
    """
    StepGeom_BoundaryCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BoundaryCurve_get_type_name(*args)

def StepGeom_BoundaryCurve_get_type_descriptor(*args):
    """
    StepGeom_BoundaryCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BoundaryCurve_get_type_descriptor(*args)

class StepGeom_UniformCurveAndRationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_UniformCurveAndRationalBSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_UniformCurveAndRationalBSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_UniformCurveAndRationalBSplineCurve self) -> StepGeom_UniformCurveAndRationalBSplineCurve

        Returns a UniformCurveAndRationalBSplineCurve


        """
        this = _StepGeom.new_StepGeom_UniformCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_StepGeom_UniformCurve aUniformCurve, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)
        Init(StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_Init(self, *args)


    def SetUniformCurve(self, *args):
        """
        SetUniformCurve(StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_StepGeom_UniformCurve aUniformCurve)

        :type aUniformCurve: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurve

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetUniformCurve(self, *args)


    def UniformCurve(self, *args):
        """
        UniformCurve(StepGeom_UniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_UniformCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurve

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_UniformCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        SetRationalBSplineCurve(StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)

        :type aRationalBSplineCurve: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        RationalBSplineCurve(StepGeom_UniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_RationalBSplineCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_UniformCurveAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_UniformCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(StepGeom_UniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_UniformCurveAndRationalBSplineCurve
StepGeom_UniformCurveAndRationalBSplineCurve_swigregister = _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_swigregister
StepGeom_UniformCurveAndRationalBSplineCurve_swigregister(StepGeom_UniformCurveAndRationalBSplineCurve)

def StepGeom_UniformCurveAndRationalBSplineCurve_get_type_name(*args):
    """
    StepGeom_UniformCurveAndRationalBSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_get_type_name(*args)

def StepGeom_UniformCurveAndRationalBSplineCurve_get_type_descriptor(*args):
    """
    StepGeom_UniformCurveAndRationalBSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_get_type_descriptor(*args)

class StepGeom_HArray1OfTrimmingSelect(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray1OfTrimmingSelect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray1OfTrimmingSelect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray1OfTrimmingSelect self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepGeom_HArray1OfTrimmingSelect
        __init__(StepGeom_HArray1OfTrimmingSelect self, Standard_Integer const theLower, Standard_Integer const theUpper, StepGeom_TrimmingSelect theValue) -> StepGeom_HArray1OfTrimmingSelect
        __init__(StepGeom_HArray1OfTrimmingSelect self, NCollection_Array1_StepGeom_TrimmingSelect theOther) -> StepGeom_HArray1OfTrimmingSelect

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array1OfTrimmingSelect

        """
        this = _StepGeom.new_StepGeom_HArray1OfTrimmingSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfTrimmingSelect

        """
        res = _StepGeom.StepGeom_HArray1OfTrimmingSelect_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepGeom_HArray1OfTrimmingSelect self) -> NCollection_Array1_StepGeom_TrimmingSelect

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray1OfTrimmingSelect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfTrimmingSelect
StepGeom_HArray1OfTrimmingSelect_swigregister = _StepGeom.StepGeom_HArray1OfTrimmingSelect_swigregister
StepGeom_HArray1OfTrimmingSelect_swigregister(StepGeom_HArray1OfTrimmingSelect)

def StepGeom_HArray1OfTrimmingSelect_get_type_name(*args):
    """
    StepGeom_HArray1OfTrimmingSelect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray1OfTrimmingSelect_get_type_name(*args)

def StepGeom_HArray1OfTrimmingSelect_get_type_descriptor(*args):
    """
    StepGeom_HArray1OfTrimmingSelect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray1OfTrimmingSelect_get_type_descriptor(*args)

class StepGeom_BSplineCurveWithKnots(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BSplineCurveWithKnots
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BSplineCurveWithKnots(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BSplineCurveWithKnots self) -> StepGeom_BSplineCurveWithKnots

        Returns a BSplineCurveWithKnots


        """
        this = _StepGeom.new_StepGeom_BSplineCurveWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_BSplineCurveWithKnots self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfInteger aKnotMultiplicities, Handle_TColStd_HArray1OfReal aKnots, StepGeom_KnotType const aKnotSpec)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aKnotMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_Init(self, *args)


    def SetKnotMultiplicities(self, *args):
        """
        SetKnotMultiplicities(StepGeom_BSplineCurveWithKnots self, Handle_TColStd_HArray1OfInteger aKnotMultiplicities)

        :type aKnotMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_SetKnotMultiplicities(self, *args)


    def KnotMultiplicities(self, *args):
        """
        KnotMultiplicities(StepGeom_BSplineCurveWithKnots self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_KnotMultiplicities(self, *args)


    def KnotMultiplicitiesValue(self, *args):
        """
        KnotMultiplicitiesValue(StepGeom_BSplineCurveWithKnots self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_KnotMultiplicitiesValue(self, *args)


    def NbKnotMultiplicities(self, *args):
        """
        NbKnotMultiplicities(StepGeom_BSplineCurveWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_NbKnotMultiplicities(self, *args)


    def SetKnots(self, *args):
        """
        SetKnots(StepGeom_BSplineCurveWithKnots self, Handle_TColStd_HArray1OfReal aKnots)

        :type aKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_SetKnots(self, *args)


    def Knots(self, *args):
        """
        Knots(StepGeom_BSplineCurveWithKnots self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_Knots(self, *args)


    def KnotsValue(self, *args):
        """
        KnotsValue(StepGeom_BSplineCurveWithKnots self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_KnotsValue(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(StepGeom_BSplineCurveWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_NbKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        SetKnotSpec(StepGeom_BSplineCurveWithKnots self, StepGeom_KnotType const aKnotSpec)

        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        KnotSpec(StepGeom_BSplineCurveWithKnots self) -> StepGeom_KnotType

        :rtype: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_KnotSpec(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BSplineCurveWithKnots_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineCurveWithKnots
StepGeom_BSplineCurveWithKnots_swigregister = _StepGeom.StepGeom_BSplineCurveWithKnots_swigregister
StepGeom_BSplineCurveWithKnots_swigregister(StepGeom_BSplineCurveWithKnots)

def StepGeom_BSplineCurveWithKnots_get_type_name(*args):
    """
    StepGeom_BSplineCurveWithKnots_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BSplineCurveWithKnots_get_type_name(*args)

def StepGeom_BSplineCurveWithKnots_get_type_descriptor(*args):
    """
    StepGeom_BSplineCurveWithKnots_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BSplineCurveWithKnots_get_type_descriptor(*args)

class StepGeom_CurveReplica(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CurveReplica
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CurveReplica(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CurveReplica self) -> StepGeom_CurveReplica

        Returns a CurveReplica


        """
        this = _StepGeom.new_StepGeom_CurveReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_CurveReplica self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aParentCurve, Handle_StepGeom_CartesianTransformationOperator aTransformation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.StepGeom_CurveReplica_Init(self, *args)


    def SetParentCurve(self, *args):
        """
        SetParentCurve(StepGeom_CurveReplica self, Handle_StepGeom_Curve aParentCurve)

        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_CurveReplica_SetParentCurve(self, *args)


    def ParentCurve(self, *args):
        """
        ParentCurve(StepGeom_CurveReplica self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_CurveReplica_ParentCurve(self, *args)


    def SetTransformation(self, *args):
        """
        SetTransformation(StepGeom_CurveReplica self, Handle_StepGeom_CartesianTransformationOperator aTransformation)

        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.StepGeom_CurveReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        Transformation(StepGeom_CurveReplica self) -> Handle_StepGeom_CartesianTransformationOperator

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.StepGeom_CurveReplica_Transformation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CurveReplica_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CurveReplica_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CurveReplica_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CurveReplica
StepGeom_CurveReplica_swigregister = _StepGeom.StepGeom_CurveReplica_swigregister
StepGeom_CurveReplica_swigregister(StepGeom_CurveReplica)

def StepGeom_CurveReplica_get_type_name(*args):
    """
    StepGeom_CurveReplica_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CurveReplica_get_type_name(*args)

def StepGeom_CurveReplica_get_type_descriptor(*args):
    """
    StepGeom_CurveReplica_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CurveReplica_get_type_descriptor(*args)

class StepGeom_GeometricRepresentationContext(StepRepr.StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_GeometricRepresentationContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_GeometricRepresentationContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_GeometricRepresentationContext self) -> StepGeom_GeometricRepresentationContext

        Returns a GeometricRepresentationContext


        """
        this = _StepGeom.new_StepGeom_GeometricRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_GeometricRepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Standard_Integer const aCoordinateSpaceDimension)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContext_Init(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        SetCoordinateSpaceDimension(StepGeom_GeometricRepresentationContext self, Standard_Integer const aCoordinateSpaceDimension)

        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        CoordinateSpaceDimension(StepGeom_GeometricRepresentationContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_GeometricRepresentationContext_CoordinateSpaceDimension(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_GeometricRepresentationContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_GeometricRepresentationContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_GeometricRepresentationContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_GeometricRepresentationContext
StepGeom_GeometricRepresentationContext_swigregister = _StepGeom.StepGeom_GeometricRepresentationContext_swigregister
StepGeom_GeometricRepresentationContext_swigregister(StepGeom_GeometricRepresentationContext)

def StepGeom_GeometricRepresentationContext_get_type_name(*args):
    """
    StepGeom_GeometricRepresentationContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_GeometricRepresentationContext_get_type_name(*args)

def StepGeom_GeometricRepresentationContext_get_type_descriptor(*args):
    """
    StepGeom_GeometricRepresentationContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_GeometricRepresentationContext_get_type_descriptor(*args)

class StepGeom_PcurveOrSurface(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepGeom_PcurveOrSurface self) -> StepGeom_PcurveOrSurface

        Returns a PcurveOrSurface SelectType


        """
        this = _StepGeom.new_StepGeom_PcurveOrSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepGeom_PcurveOrSurface self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a PcurveOrSurface Kind Entity that is :
        1 -> Pcurve
        2 -> Surface
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_PcurveOrSurface_CaseNum(self, *args)


    def Pcurve(self, *args):
        """
        Pcurve(StepGeom_PcurveOrSurface self) -> Handle_StepGeom_Pcurve

        returns Value as a Pcurve (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Pcurve

        """
        return _StepGeom.StepGeom_PcurveOrSurface_Pcurve(self, *args)


    def Surface(self, *args):
        """
        Surface(StepGeom_PcurveOrSurface self) -> Handle_StepGeom_Surface

        returns Value as a Surface (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_PcurveOrSurface_Surface(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_PcurveOrSurface
StepGeom_PcurveOrSurface_swigregister = _StepGeom.StepGeom_PcurveOrSurface_swigregister
StepGeom_PcurveOrSurface_swigregister(StepGeom_PcurveOrSurface)

class StepGeom_BezierSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BezierSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BezierSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BezierSurface self) -> StepGeom_BezierSurface

        Returns a BezierSurface


        """
        this = _StepGeom.new_StepGeom_BezierSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BezierSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BezierSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BezierSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BezierSurface
StepGeom_BezierSurface_swigregister = _StepGeom.StepGeom_BezierSurface_swigregister
StepGeom_BezierSurface_swigregister(StepGeom_BezierSurface)

def StepGeom_BezierSurface_get_type_name(*args):
    """
    StepGeom_BezierSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BezierSurface_get_type_name(*args)

def StepGeom_BezierSurface_get_type_descriptor(*args):
    """
    StepGeom_BezierSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BezierSurface_get_type_descriptor(*args)

class StepGeom_ToroidalSurface(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_ToroidalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_ToroidalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_ToroidalSurface self) -> StepGeom_ToroidalSurface

        Returns a ToroidalSurface


        """
        this = _StepGeom.new_StepGeom_ToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_ToroidalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aMajorRadius, Standard_Real const aMinorRadius)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aMajorRadius: float
        :type aMinorRadius: float

        """
        return _StepGeom.StepGeom_ToroidalSurface_Init(self, *args)


    def SetMajorRadius(self, *args):
        """
        SetMajorRadius(StepGeom_ToroidalSurface self, Standard_Real const aMajorRadius)

        :type aMajorRadius: float

        """
        return _StepGeom.StepGeom_ToroidalSurface_SetMajorRadius(self, *args)


    def MajorRadius(self, *args):
        """
        MajorRadius(StepGeom_ToroidalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_ToroidalSurface_MajorRadius(self, *args)


    def SetMinorRadius(self, *args):
        """
        SetMinorRadius(StepGeom_ToroidalSurface self, Standard_Real const aMinorRadius)

        :type aMinorRadius: float

        """
        return _StepGeom.StepGeom_ToroidalSurface_SetMinorRadius(self, *args)


    def MinorRadius(self, *args):
        """
        MinorRadius(StepGeom_ToroidalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_ToroidalSurface_MinorRadius(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_ToroidalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_ToroidalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_ToroidalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_ToroidalSurface
StepGeom_ToroidalSurface_swigregister = _StepGeom.StepGeom_ToroidalSurface_swigregister
StepGeom_ToroidalSurface_swigregister(StepGeom_ToroidalSurface)

def StepGeom_ToroidalSurface_get_type_name(*args):
    """
    StepGeom_ToroidalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_ToroidalSurface_get_type_name(*args)

def StepGeom_ToroidalSurface_get_type_descriptor(*args):
    """
    StepGeom_ToroidalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_ToroidalSurface_get_type_descriptor(*args)

class StepGeom_Circle(StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Circle
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Circle(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Circle self) -> StepGeom_Circle

        Returns a Circle


        """
        this = _StepGeom.new_StepGeom_Circle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Circle self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition, Standard_Real const aRadius)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement
        :type aRadius: float

        """
        return _StepGeom.StepGeom_Circle_Init(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(StepGeom_Circle self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _StepGeom.StepGeom_Circle_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(StepGeom_Circle self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_Circle_Radius(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Circle_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Circle_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Circle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Circle
StepGeom_Circle_swigregister = _StepGeom.StepGeom_Circle_swigregister
StepGeom_Circle_swigregister(StepGeom_Circle)

def StepGeom_Circle_get_type_name(*args):
    """
    StepGeom_Circle_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Circle_get_type_name(*args)

def StepGeom_Circle_get_type_descriptor(*args):
    """
    StepGeom_Circle_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Circle_get_type_descriptor(*args)

class StepGeom_Axis2Placement2d(StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Axis2Placement2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Axis2Placement2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Axis2Placement2d self) -> StepGeom_Axis2Placement2d

        Returns a Axis2Placement2d


        """
        this = _StepGeom.new_StepGeom_Axis2Placement2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Axis2Placement2d self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_CartesianPoint aLocation, Standard_Boolean const hasArefDirection, Handle_StepGeom_Direction aRefDirection)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aLocation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type hasArefDirection: bool
        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement2d_Init(self, *args)


    def SetRefDirection(self, *args):
        """
        SetRefDirection(StepGeom_Axis2Placement2d self, Handle_StepGeom_Direction aRefDirection)

        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement2d_SetRefDirection(self, *args)


    def UnSetRefDirection(self, *args):
        """UnSetRefDirection(StepGeom_Axis2Placement2d self)"""
        return _StepGeom.StepGeom_Axis2Placement2d_UnSetRefDirection(self, *args)


    def RefDirection(self, *args):
        """
        RefDirection(StepGeom_Axis2Placement2d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement2d_RefDirection(self, *args)


    def HasRefDirection(self, *args):
        """
        HasRefDirection(StepGeom_Axis2Placement2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_Axis2Placement2d_HasRefDirection(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Axis2Placement2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Axis2Placement2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Axis2Placement2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Axis2Placement2d
StepGeom_Axis2Placement2d_swigregister = _StepGeom.StepGeom_Axis2Placement2d_swigregister
StepGeom_Axis2Placement2d_swigregister(StepGeom_Axis2Placement2d)

def StepGeom_Axis2Placement2d_get_type_name(*args):
    """
    StepGeom_Axis2Placement2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Axis2Placement2d_get_type_name(*args)

def StepGeom_Axis2Placement2d_get_type_descriptor(*args):
    """
    StepGeom_Axis2Placement2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Axis2Placement2d_get_type_descriptor(*args)

class StepGeom_DegenerateToroidalSurface(StepGeom_ToroidalSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_DegenerateToroidalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_DegenerateToroidalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_DegenerateToroidalSurface self) -> StepGeom_DegenerateToroidalSurface

        Returns a DegenerateToroidalSurface


        """
        this = _StepGeom.new_StepGeom_DegenerateToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_DegenerateToroidalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aMajorRadius, Standard_Real const aMinorRadius, Standard_Boolean const aSelectOuter)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aMajorRadius: float
        :type aMinorRadius: float
        :type aSelectOuter: bool

        """
        return _StepGeom.StepGeom_DegenerateToroidalSurface_Init(self, *args)


    def SetSelectOuter(self, *args):
        """
        SetSelectOuter(StepGeom_DegenerateToroidalSurface self, Standard_Boolean const aSelectOuter)

        :type aSelectOuter: bool

        """
        return _StepGeom.StepGeom_DegenerateToroidalSurface_SetSelectOuter(self, *args)


    def SelectOuter(self, *args):
        """
        SelectOuter(StepGeom_DegenerateToroidalSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_DegenerateToroidalSurface_SelectOuter(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_DegenerateToroidalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_DegenerateToroidalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_DegenerateToroidalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_DegenerateToroidalSurface
StepGeom_DegenerateToroidalSurface_swigregister = _StepGeom.StepGeom_DegenerateToroidalSurface_swigregister
StepGeom_DegenerateToroidalSurface_swigregister(StepGeom_DegenerateToroidalSurface)

def StepGeom_DegenerateToroidalSurface_get_type_name(*args):
    """
    StepGeom_DegenerateToroidalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_DegenerateToroidalSurface_get_type_name(*args)

def StepGeom_DegenerateToroidalSurface_get_type_descriptor(*args):
    """
    StepGeom_DegenerateToroidalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_DegenerateToroidalSurface_get_type_descriptor(*args)

class StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

        Returns a BSplineSurfaceWithKnotsAndRationalBSplineSurface


        """
        this = _StepGeom.new_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_StepGeom_BSplineSurfaceWithKnots aBSplineSurfaceWithKnots, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)
        Init(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfInteger aUMultiplicities, Handle_TColStd_HArray1OfInteger aVMultiplicities, Handle_TColStd_HArray1OfReal aUKnots, Handle_TColStd_HArray1OfReal aVKnots, StepGeom_KnotType const aKnotSpec, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aUMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aVMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aUKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aVKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_Init(self, *args)


    def SetBSplineSurfaceWithKnots(self, *args):
        """
        SetBSplineSurfaceWithKnots(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_BSplineSurfaceWithKnots aBSplineSurfaceWithKnots)

        :type aBSplineSurfaceWithKnots: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetBSplineSurfaceWithKnots(self, *args)


    def BSplineSurfaceWithKnots(self, *args):
        """
        BSplineSurfaceWithKnots(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_StepGeom_BSplineSurfaceWithKnots

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_BSplineSurfaceWithKnots(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        SetRationalBSplineSurface(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)

        :type aRationalBSplineSurface: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        RationalBSplineSurface(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_StepGeom_RationalBSplineSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetUMultiplicities(self, *args):
        """
        SetUMultiplicities(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray1OfInteger aUMultiplicities)

        :type aUMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUMultiplicities(self, *args)


    def UMultiplicities(self, *args):
        """
        UMultiplicities(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UMultiplicities(self, *args)


    def UMultiplicitiesValue(self, *args):
        """
        UMultiplicitiesValue(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UMultiplicitiesValue(self, *args)


    def NbUMultiplicities(self, *args):
        """
        NbUMultiplicities(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbUMultiplicities(self, *args)


    def SetVMultiplicities(self, *args):
        """
        SetVMultiplicities(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray1OfInteger aVMultiplicities)

        :type aVMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVMultiplicities(self, *args)


    def VMultiplicities(self, *args):
        """
        VMultiplicities(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VMultiplicities(self, *args)


    def VMultiplicitiesValue(self, *args):
        """
        VMultiplicitiesValue(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VMultiplicitiesValue(self, *args)


    def NbVMultiplicities(self, *args):
        """
        NbVMultiplicities(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbVMultiplicities(self, *args)


    def SetUKnots(self, *args):
        """
        SetUKnots(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray1OfReal aUKnots)

        :type aUKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUKnots(self, *args)


    def UKnots(self, *args):
        """
        UKnots(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UKnots(self, *args)


    def UKnotsValue(self, *args):
        """
        UKnotsValue(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UKnotsValue(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbUKnots(self, *args)


    def SetVKnots(self, *args):
        """
        SetVKnots(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray1OfReal aVKnots)

        :type aVKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVKnots(self, *args)


    def VKnots(self, *args):
        """
        VKnots(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VKnots(self, *args)


    def VKnotsValue(self, *args):
        """
        VKnotsValue(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VKnotsValue(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbVKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        SetKnotSpec(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepGeom_KnotType const aKnotSpec)

        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        KnotSpec(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepGeom_KnotType

        :rtype: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_KnotSpec(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister = _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)

def StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_name(*args):
    """
    StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_name(*args)

def StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_descriptor(*args):
    """
    StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_descriptor(*args)

class StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(StepRepr.StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(self) 
            return h


    def __init__(self, *args):
        """__init__(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx"""
        this = _StepGeom.new_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationCtx, Handle_StepRepr_GlobalUnitAssignedContext aGlobalUnitAssignedCtx, Handle_StepRepr_GlobalUncertaintyAssignedContext aGlobalUncertaintyAssignedCtx)
        Init(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Standard_Integer const aCoordinateSpaceDimension, Handle_StepBasic_HArray1OfNamedUnit aUnits, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit anUncertainty)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinateSpaceDimension: int
        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit
        :type anUncertainty: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        SetGeometricRepresentationContext(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext)

        :type aGeometricRepresentationContext: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        GeometricRepresentationContext(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepGeom_GeometricRepresentationContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GeometricRepresentationContext(self, *args)


    def SetGlobalUnitAssignedContext(self, *args):
        """
        SetGlobalUnitAssignedContext(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepRepr_GlobalUnitAssignedContext aGlobalUnitAssignedContext)

        :type aGlobalUnitAssignedContext: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGlobalUnitAssignedContext(self, *args)


    def GlobalUnitAssignedContext(self, *args):
        """
        GlobalUnitAssignedContext(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepRepr_GlobalUnitAssignedContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GlobalUnitAssignedContext(self, *args)


    def SetGlobalUncertaintyAssignedContext(self, *args):
        """
        SetGlobalUncertaintyAssignedContext(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepRepr_GlobalUncertaintyAssignedContext aGlobalUncertaintyAssignedCtx)

        :type aGlobalUncertaintyAssignedCtx: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUncertaintyAssignedContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGlobalUncertaintyAssignedContext(self, *args)


    def GlobalUncertaintyAssignedContext(self, *args):
        """
        GlobalUncertaintyAssignedContext(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepRepr_GlobalUncertaintyAssignedContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUncertaintyAssignedContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GlobalUncertaintyAssignedContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        SetCoordinateSpaceDimension(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Standard_Integer const aCoordinateSpaceDimension)

        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        CoordinateSpaceDimension(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_CoordinateSpaceDimension(self, *args)


    def SetUnits(self, *args):
        """
        SetUnits(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepBasic_HArray1OfNamedUnit aUnits)

        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetUnits(self, *args)


    def Units(self, *args):
        """
        Units(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepBasic_HArray1OfNamedUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Units(self, *args)


    def UnitsValue(self, *args):
        """
        UnitsValue(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Standard_Integer const num) -> Handle_StepBasic_NamedUnit

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_NamedUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_UnitsValue(self, *args)


    def NbUnits(self, *args):
        """
        NbUnits(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_NbUnits(self, *args)


    def SetUncertainty(self, *args):
        """
        SetUncertainty(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit aUncertainty)

        :type aUncertainty: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetUncertainty(self, *args)


    def Uncertainty(self, *args):
        """
        Uncertainty(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Uncertainty(self, *args)


    def UncertaintyValue(self, *args):
        """
        UncertaintyValue(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Standard_Integer const num) -> Handle_StepBasic_UncertaintyMeasureWithUnit

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_UncertaintyValue(self, *args)


    def NbUncertainty(self, *args):
        """
        NbUncertainty(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_NbUncertainty(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister = _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)

def StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_name(*args):
    """
    StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_name(*args)

def StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_descriptor(*args):
    """
    StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_descriptor(*args)

class StepGeom_SurfaceBoundary(StepData.StepData_SelectType):
    """Representation of STEP SELECT type SurfaceBoundary"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepGeom_SurfaceBoundary self) -> StepGeom_SurfaceBoundary

        Empty constructor


        """
        this = _StepGeom.new_StepGeom_SurfaceBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepGeom_SurfaceBoundary self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of SurfaceBoundary select type
        1 -> BoundaryCurve from StepGeom
        2 -> DegeneratePcurve from StepGeom
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_SurfaceBoundary_CaseNum(self, *args)


    def BoundaryCurve(self, *args):
        """
        BoundaryCurve(StepGeom_SurfaceBoundary self) -> Handle_StepGeom_BoundaryCurve

        Returns Value as BoundaryCurve (or Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BoundaryCurve

        """
        return _StepGeom.StepGeom_SurfaceBoundary_BoundaryCurve(self, *args)


    def DegeneratePcurve(self, *args):
        """
        DegeneratePcurve(StepGeom_SurfaceBoundary self) -> Handle_StepGeom_DegeneratePcurve

        Returns Value as DegeneratePcurve (or Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_DegeneratePcurve

        """
        return _StepGeom.StepGeom_SurfaceBoundary_DegeneratePcurve(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceBoundary
StepGeom_SurfaceBoundary_swigregister = _StepGeom.StepGeom_SurfaceBoundary_swigregister
StepGeom_SurfaceBoundary_swigregister(StepGeom_SurfaceBoundary)

class StepGeom_Line(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Line
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Line(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Line self) -> StepGeom_Line

        Returns a Line


        """
        this = _StepGeom.new_StepGeom_Line(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Line self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_CartesianPoint aPnt, Handle_StepGeom_Vector aDir)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPnt: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type aDir: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_Line_Init(self, *args)


    def SetPnt(self, *args):
        """
        SetPnt(StepGeom_Line self, Handle_StepGeom_CartesianPoint aPnt)

        :type aPnt: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Line_SetPnt(self, *args)


    def Pnt(self, *args):
        """
        Pnt(StepGeom_Line self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Line_Pnt(self, *args)


    def SetDir(self, *args):
        """
        SetDir(StepGeom_Line self, Handle_StepGeom_Vector aDir)

        :type aDir: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_Line_SetDir(self, *args)


    def Dir(self, *args):
        """
        Dir(StepGeom_Line self) -> Handle_StepGeom_Vector

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_Line_Dir(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Line_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Line_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Line_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Line
StepGeom_Line_swigregister = _StepGeom.StepGeom_Line_swigregister
StepGeom_Line_swigregister(StepGeom_Line)

def StepGeom_Line_get_type_name(*args):
    """
    StepGeom_Line_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Line_get_type_name(*args)

def StepGeom_Line_get_type_descriptor(*args):
    """
    StepGeom_Line_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Line_get_type_descriptor(*args)

class StepGeom_Axis1Placement(StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Axis1Placement
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Axis1Placement(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Axis1Placement self) -> StepGeom_Axis1Placement

        Returns a Axis1Placement


        """
        this = _StepGeom.new_StepGeom_Axis1Placement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Axis1Placement self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_CartesianPoint aLocation, Standard_Boolean const hasAaxis, Handle_StepGeom_Direction aAxis)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aLocation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type hasAaxis: bool
        :type aAxis: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis1Placement_Init(self, *args)


    def SetAxis(self, *args):
        """
        SetAxis(StepGeom_Axis1Placement self, Handle_StepGeom_Direction aAxis)

        :type aAxis: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis1Placement_SetAxis(self, *args)


    def UnSetAxis(self, *args):
        """UnSetAxis(StepGeom_Axis1Placement self)"""
        return _StepGeom.StepGeom_Axis1Placement_UnSetAxis(self, *args)


    def Axis(self, *args):
        """
        Axis(StepGeom_Axis1Placement self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis1Placement_Axis(self, *args)


    def HasAxis(self, *args):
        """
        HasAxis(StepGeom_Axis1Placement self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_Axis1Placement_HasAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Axis1Placement_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Axis1Placement_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Axis1Placement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Axis1Placement
StepGeom_Axis1Placement_swigregister = _StepGeom.StepGeom_Axis1Placement_swigregister
StepGeom_Axis1Placement_swigregister(StepGeom_Axis1Placement)

def StepGeom_Axis1Placement_get_type_name(*args):
    """
    StepGeom_Axis1Placement_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Axis1Placement_get_type_name(*args)

def StepGeom_Axis1Placement_get_type_descriptor(*args):
    """
    StepGeom_Axis1Placement_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Axis1Placement_get_type_descriptor(*args)

class StepGeom_BezierCurveAndRationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BezierCurveAndRationalBSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BezierCurveAndRationalBSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BezierCurveAndRationalBSplineCurve self) -> StepGeom_BezierCurveAndRationalBSplineCurve

        Returns a BezierCurveAndRationalBSplineCurve


        """
        this = _StepGeom.new_StepGeom_BezierCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_StepGeom_BezierCurve aBezierCurve, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)
        Init(StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_Init(self, *args)


    def SetBezierCurve(self, *args):
        """
        SetBezierCurve(StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_StepGeom_BezierCurve aBezierCurve)

        :type aBezierCurve: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurve

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetBezierCurve(self, *args)


    def BezierCurve(self, *args):
        """
        BezierCurve(StepGeom_BezierCurveAndRationalBSplineCurve self) -> Handle_StepGeom_BezierCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurve

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_BezierCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        SetRationalBSplineCurve(StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)

        :type aRationalBSplineCurve: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        RationalBSplineCurve(StepGeom_BezierCurveAndRationalBSplineCurve self) -> Handle_StepGeom_RationalBSplineCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_BezierCurveAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_BezierCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(StepGeom_BezierCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BezierCurveAndRationalBSplineCurve
StepGeom_BezierCurveAndRationalBSplineCurve_swigregister = _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_swigregister
StepGeom_BezierCurveAndRationalBSplineCurve_swigregister(StepGeom_BezierCurveAndRationalBSplineCurve)

def StepGeom_BezierCurveAndRationalBSplineCurve_get_type_name(*args):
    """
    StepGeom_BezierCurveAndRationalBSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_get_type_name(*args)

def StepGeom_BezierCurveAndRationalBSplineCurve_get_type_descriptor(*args):
    """
    StepGeom_BezierCurveAndRationalBSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_get_type_descriptor(*args)

class StepGeom_CylindricalSurface(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CylindricalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CylindricalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CylindricalSurface self) -> StepGeom_CylindricalSurface

        Returns a CylindricalSurface


        """
        this = _StepGeom.new_StepGeom_CylindricalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_CylindricalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aRadius)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aRadius: float

        """
        return _StepGeom.StepGeom_CylindricalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(StepGeom_CylindricalSurface self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _StepGeom.StepGeom_CylindricalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(StepGeom_CylindricalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_CylindricalSurface_Radius(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CylindricalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CylindricalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CylindricalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CylindricalSurface
StepGeom_CylindricalSurface_swigregister = _StepGeom.StepGeom_CylindricalSurface_swigregister
StepGeom_CylindricalSurface_swigregister(StepGeom_CylindricalSurface)

def StepGeom_CylindricalSurface_get_type_name(*args):
    """
    StepGeom_CylindricalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CylindricalSurface_get_type_name(*args)

def StepGeom_CylindricalSurface_get_type_descriptor(*args):
    """
    StepGeom_CylindricalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CylindricalSurface_get_type_descriptor(*args)

class StepGeom_UniformCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_UniformCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_UniformCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_UniformCurve self) -> StepGeom_UniformCurve

        Returns a UniformCurve


        """
        this = _StepGeom.new_StepGeom_UniformCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_UniformCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_UniformCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_UniformCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_UniformCurve
StepGeom_UniformCurve_swigregister = _StepGeom.StepGeom_UniformCurve_swigregister
StepGeom_UniformCurve_swigregister(StepGeom_UniformCurve)

def StepGeom_UniformCurve_get_type_name(*args):
    """
    StepGeom_UniformCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_UniformCurve_get_type_name(*args)

def StepGeom_UniformCurve_get_type_descriptor(*args):
    """
    StepGeom_UniformCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_UniformCurve_get_type_descriptor(*args)

class StepGeom_OuterBoundaryCurve(StepGeom_BoundaryCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_OuterBoundaryCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_OuterBoundaryCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_OuterBoundaryCurve self) -> StepGeom_OuterBoundaryCurve

        Returns a OuterBoundaryCurve


        """
        this = _StepGeom.new_StepGeom_OuterBoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_OuterBoundaryCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_OuterBoundaryCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_OuterBoundaryCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_OuterBoundaryCurve
StepGeom_OuterBoundaryCurve_swigregister = _StepGeom.StepGeom_OuterBoundaryCurve_swigregister
StepGeom_OuterBoundaryCurve_swigregister(StepGeom_OuterBoundaryCurve)

def StepGeom_OuterBoundaryCurve_get_type_name(*args):
    """
    StepGeom_OuterBoundaryCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_OuterBoundaryCurve_get_type_name(*args)

def StepGeom_OuterBoundaryCurve_get_type_descriptor(*args):
    """
    StepGeom_OuterBoundaryCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_OuterBoundaryCurve_get_type_descriptor(*args)

class StepGeom_CartesianTransformationOperator(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CartesianTransformationOperator
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CartesianTransformationOperator(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CartesianTransformationOperator self) -> StepGeom_CartesianTransformationOperator

        Returns a CartesianTransformationOperator


        """
        this = _StepGeom.new_StepGeom_CartesianTransformationOperator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_CartesianTransformationOperator self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasAaxis1, Handle_StepGeom_Direction aAxis1, Standard_Boolean const hasAaxis2, Handle_StepGeom_Direction aAxis2, Handle_StepGeom_CartesianPoint aLocalOrigin, Standard_Boolean const hasAscale, Standard_Real const aScale)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasAaxis1: bool
        :type aAxis1: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type hasAaxis2: bool
        :type aAxis2: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type aLocalOrigin: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type hasAscale: bool
        :type aScale: float

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_Init(self, *args)


    def SetAxis1(self, *args):
        """
        SetAxis1(StepGeom_CartesianTransformationOperator self, Handle_StepGeom_Direction aAxis1)

        :type aAxis1: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_SetAxis1(self, *args)


    def UnSetAxis1(self, *args):
        """UnSetAxis1(StepGeom_CartesianTransformationOperator self)"""
        return _StepGeom.StepGeom_CartesianTransformationOperator_UnSetAxis1(self, *args)


    def Axis1(self, *args):
        """
        Axis1(StepGeom_CartesianTransformationOperator self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_Axis1(self, *args)


    def HasAxis1(self, *args):
        """
        HasAxis1(StepGeom_CartesianTransformationOperator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_HasAxis1(self, *args)


    def SetAxis2(self, *args):
        """
        SetAxis2(StepGeom_CartesianTransformationOperator self, Handle_StepGeom_Direction aAxis2)

        :type aAxis2: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_SetAxis2(self, *args)


    def UnSetAxis2(self, *args):
        """UnSetAxis2(StepGeom_CartesianTransformationOperator self)"""
        return _StepGeom.StepGeom_CartesianTransformationOperator_UnSetAxis2(self, *args)


    def Axis2(self, *args):
        """
        Axis2(StepGeom_CartesianTransformationOperator self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_Axis2(self, *args)


    def HasAxis2(self, *args):
        """
        HasAxis2(StepGeom_CartesianTransformationOperator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_HasAxis2(self, *args)


    def SetLocalOrigin(self, *args):
        """
        SetLocalOrigin(StepGeom_CartesianTransformationOperator self, Handle_StepGeom_CartesianPoint aLocalOrigin)

        :type aLocalOrigin: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_SetLocalOrigin(self, *args)


    def LocalOrigin(self, *args):
        """
        LocalOrigin(StepGeom_CartesianTransformationOperator self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_LocalOrigin(self, *args)


    def SetScale(self, *args):
        """
        SetScale(StepGeom_CartesianTransformationOperator self, Standard_Real const aScale)

        :type aScale: float

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_SetScale(self, *args)


    def UnSetScale(self, *args):
        """UnSetScale(StepGeom_CartesianTransformationOperator self)"""
        return _StepGeom.StepGeom_CartesianTransformationOperator_UnSetScale(self, *args)


    def Scale(self, *args):
        """
        Scale(StepGeom_CartesianTransformationOperator self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_Scale(self, *args)


    def HasScale(self, *args):
        """
        HasScale(StepGeom_CartesianTransformationOperator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_HasScale(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CartesianTransformationOperator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CartesianTransformationOperator
StepGeom_CartesianTransformationOperator_swigregister = _StepGeom.StepGeom_CartesianTransformationOperator_swigregister
StepGeom_CartesianTransformationOperator_swigregister(StepGeom_CartesianTransformationOperator)

def StepGeom_CartesianTransformationOperator_get_type_name(*args):
    """
    StepGeom_CartesianTransformationOperator_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CartesianTransformationOperator_get_type_name(*args)

def StepGeom_CartesianTransformationOperator_get_type_descriptor(*args):
    """
    StepGeom_CartesianTransformationOperator_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CartesianTransformationOperator_get_type_descriptor(*args)

class StepGeom_TrimmingSelect(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepGeom_TrimmingSelect self) -> StepGeom_TrimmingSelect

        Returns a TrimmingSelect SelectType


        """
        this = _StepGeom.new_StepGeom_TrimmingSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepGeom_TrimmingSelect self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a TrimmingSelect Kind Entity that is :
        1 -> CartesianPoint
        0 else (i.e. Real)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_TrimmingSelect_CaseNum(self, *args)


    def NewMember(self, *args):
        """
        NewMember(StepGeom_TrimmingSelect self) -> Handle_StepData_SelectMember

        Returns a TrimmingMember (for PARAMETER_VALUE) as preferred

        :rtype: OCC.wrapper.StepData.Handle_StepData_SelectMember

        """
        return _StepGeom.StepGeom_TrimmingSelect_NewMember(self, *args)


    def CaseMem(self, *args):
        """
        CaseMem(StepGeom_TrimmingSelect self, Handle_StepData_SelectMember ent) -> Standard_Integer

        Recognizes a SelectMember as Real, named as PARAMETER_VALUE
        1 -> ParameterValue i.e. Real
        0 else (i.e. Entity)

        :type ent: OCC.wrapper.StepData.Handle_StepData_SelectMember
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_TrimmingSelect_CaseMem(self, *args)


    def CartesianPoint(self, *args):
        """
        CartesianPoint(StepGeom_TrimmingSelect self) -> Handle_StepGeom_CartesianPoint

        returns Value as a CartesianPoint (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_TrimmingSelect_CartesianPoint(self, *args)


    def SetParameterValue(self, *args):
        """
        SetParameterValue(StepGeom_TrimmingSelect self, Standard_Real const aParameterValue)

        sets the ParameterValue as Real

        :type aParameterValue: float

        """
        return _StepGeom.StepGeom_TrimmingSelect_SetParameterValue(self, *args)


    def ParameterValue(self, *args):
        """
        ParameterValue(StepGeom_TrimmingSelect self) -> Standard_Real

        returns Value as a Real (0.0 if not a Real)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_TrimmingSelect_ParameterValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_TrimmingSelect
StepGeom_TrimmingSelect_swigregister = _StepGeom.StepGeom_TrimmingSelect_swigregister
StepGeom_TrimmingSelect_swigregister(StepGeom_TrimmingSelect)

class StepGeom_Pcurve(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Pcurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Pcurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Pcurve self) -> StepGeom_Pcurve

        Returns a Pcurve


        """
        this = _StepGeom.new_StepGeom_Pcurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Pcurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.StepGeom_Pcurve_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(StepGeom_Pcurve self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_Pcurve_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(StepGeom_Pcurve self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_Pcurve_BasisSurface(self, *args)


    def SetReferenceToCurve(self, *args):
        """
        SetReferenceToCurve(StepGeom_Pcurve self, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve)

        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.StepGeom_Pcurve_SetReferenceToCurve(self, *args)


    def ReferenceToCurve(self, *args):
        """
        ReferenceToCurve(StepGeom_Pcurve self) -> Handle_StepRepr_DefinitionalRepresentation

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.StepGeom_Pcurve_ReferenceToCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Pcurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Pcurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Pcurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Pcurve
StepGeom_Pcurve_swigregister = _StepGeom.StepGeom_Pcurve_swigregister
StepGeom_Pcurve_swigregister(StepGeom_Pcurve)

def StepGeom_Pcurve_get_type_name(*args):
    """
    StepGeom_Pcurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Pcurve_get_type_name(*args)

def StepGeom_Pcurve_get_type_descriptor(*args):
    """
    StepGeom_Pcurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Pcurve_get_type_descriptor(*args)

class StepGeom_SphericalSurface(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SphericalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SphericalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SphericalSurface self) -> StepGeom_SphericalSurface

        Returns a SphericalSurface


        """
        this = _StepGeom.new_StepGeom_SphericalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_SphericalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aRadius)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aRadius: float

        """
        return _StepGeom.StepGeom_SphericalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(StepGeom_SphericalSurface self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _StepGeom.StepGeom_SphericalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(StepGeom_SphericalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_SphericalSurface_Radius(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SphericalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SphericalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SphericalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SphericalSurface
StepGeom_SphericalSurface_swigregister = _StepGeom.StepGeom_SphericalSurface_swigregister
StepGeom_SphericalSurface_swigregister(StepGeom_SphericalSurface)

def StepGeom_SphericalSurface_get_type_name(*args):
    """
    StepGeom_SphericalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SphericalSurface_get_type_name(*args)

def StepGeom_SphericalSurface_get_type_descriptor(*args):
    """
    StepGeom_SphericalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SphericalSurface_get_type_descriptor(*args)

class Handle_StepGeom_Parabola(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Parabola self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Parabola_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Parabola self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Parabola_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Parabola self, StepGeom_Parabola thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Parabola_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Parabola self, Handle_StepGeom_Parabola theHandle) -> Handle_StepGeom_Parabola
        assign(Handle_StepGeom_Parabola self, StepGeom_Parabola thePtr) -> Handle_StepGeom_Parabola
        assign(Handle_StepGeom_Parabola self, Handle_StepGeom_Parabola theHandle) -> Handle_StepGeom_Parabola

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Parabola_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Parabola self) -> StepGeom_Parabola

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Parabola_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Parabola self) -> StepGeom_Parabola

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Parabola___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Parabola self) -> StepGeom_Parabola

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Parabola___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Parabola___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Parabola___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Parabola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Parabola_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Parabola

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Parabola self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition, Standard_Real const aFocalDist)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement
        :type aFocalDist: float

        """
        return _StepGeom.Handle_StepGeom_Parabola_Init(self, *args)


    def SetFocalDist(self, *args):
        """
        SetFocalDist(Handle_StepGeom_Parabola self, Standard_Real const aFocalDist)

        :type aFocalDist: float

        """
        return _StepGeom.Handle_StepGeom_Parabola_SetFocalDist(self, *args)


    def FocalDist(self, *args):
        """
        FocalDist(Handle_StepGeom_Parabola self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_Parabola_FocalDist(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Parabola self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Parabola_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Parabola_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Parabola_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_Parabola self, StepGeom_Axis2Placement aPosition)

        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Parabola_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_Parabola self) -> StepGeom_Axis2Placement

        :rtype: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Parabola_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Parabola self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Parabola_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Parabola self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Parabola_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Parabola self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Parabola_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Parabola self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Parabola self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Parabola_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Parabola self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Parabola self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Parabola_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Parabola self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Parabola_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Parabola self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Parabola_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Parabola self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Parabola_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Parabola self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Parabola_DecrementRefCounter(self, *args)

Handle_StepGeom_Parabola_swigregister = _StepGeom.Handle_StepGeom_Parabola_swigregister
Handle_StepGeom_Parabola_swigregister(Handle_StepGeom_Parabola)

def Handle_StepGeom_Parabola_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Parabola_DownCast(thing)
Handle_StepGeom_Parabola_DownCast = _StepGeom.Handle_StepGeom_Parabola_DownCast

class StepGeom_OffsetCurve3d(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_OffsetCurve3d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_OffsetCurve3d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_OffsetCurve3d self) -> StepGeom_OffsetCurve3d

        Returns a OffsetCurve3d


        """
        this = _StepGeom.new_StepGeom_OffsetCurve3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_OffsetCurve3d self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aBasisCurve, Standard_Real const aDistance, StepData_Logical const aSelfIntersect, Handle_StepGeom_Direction aRefDirection)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aDistance: float
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_OffsetCurve3d_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        SetBasisCurve(StepGeom_OffsetCurve3d self, Handle_StepGeom_Curve aBasisCurve)

        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(StepGeom_OffsetCurve3d self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_OffsetCurve3d_BasisCurve(self, *args)


    def SetDistance(self, *args):
        """
        SetDistance(StepGeom_OffsetCurve3d self, Standard_Real const aDistance)

        :type aDistance: float

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SetDistance(self, *args)


    def Distance(self, *args):
        """
        Distance(StepGeom_OffsetCurve3d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_OffsetCurve3d_Distance(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(StepGeom_OffsetCurve3d self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(StepGeom_OffsetCurve3d self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SelfIntersect(self, *args)


    def SetRefDirection(self, *args):
        """
        SetRefDirection(StepGeom_OffsetCurve3d self, Handle_StepGeom_Direction aRefDirection)

        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SetRefDirection(self, *args)


    def RefDirection(self, *args):
        """
        RefDirection(StepGeom_OffsetCurve3d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_OffsetCurve3d_RefDirection(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_OffsetCurve3d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_OffsetCurve3d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_OffsetCurve3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_OffsetCurve3d
StepGeom_OffsetCurve3d_swigregister = _StepGeom.StepGeom_OffsetCurve3d_swigregister
StepGeom_OffsetCurve3d_swigregister(StepGeom_OffsetCurve3d)

def StepGeom_OffsetCurve3d_get_type_name(*args):
    """
    StepGeom_OffsetCurve3d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_OffsetCurve3d_get_type_name(*args)

def StepGeom_OffsetCurve3d_get_type_descriptor(*args):
    """
    StepGeom_OffsetCurve3d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_OffsetCurve3d_get_type_descriptor(*args)

class StepGeom_UniformSurfaceAndRationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> StepGeom_UniformSurfaceAndRationalBSplineSurface

        Returns a UniformSurfaceAndRationalBSplineSurface


        """
        this = _StepGeom.new_StepGeom_UniformSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_StepGeom_UniformSurface aUniformSurface, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)
        Init(StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetUniformSurface(self, *args):
        """
        SetUniformSurface(StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_UniformSurface aUniformSurface)

        :type aUniformSurface: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurface

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetUniformSurface(self, *args)


    def UniformSurface(self, *args):
        """
        UniformSurface(StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_UniformSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurface

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_UniformSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        SetRationalBSplineSurface(StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)

        :type aRationalBSplineSurface: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        RationalBSplineSurface(StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_RationalBSplineSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_UniformSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_UniformSurfaceAndRationalBSplineSurface
StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister
StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister(StepGeom_UniformSurfaceAndRationalBSplineSurface)

def StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_name(*args):
    """
    StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_name(*args)

def StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_descriptor(*args):
    """
    StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_descriptor(*args)

class StepGeom_QuasiUniformSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_QuasiUniformSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_QuasiUniformSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_QuasiUniformSurface self) -> StepGeom_QuasiUniformSurface

        Returns a QuasiUniformSurface


        """
        this = _StepGeom.new_StepGeom_QuasiUniformSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_QuasiUniformSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_QuasiUniformSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_QuasiUniformSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_QuasiUniformSurface
StepGeom_QuasiUniformSurface_swigregister = _StepGeom.StepGeom_QuasiUniformSurface_swigregister
StepGeom_QuasiUniformSurface_swigregister(StepGeom_QuasiUniformSurface)

def StepGeom_QuasiUniformSurface_get_type_name(*args):
    """
    StepGeom_QuasiUniformSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_QuasiUniformSurface_get_type_name(*args)

def StepGeom_QuasiUniformSurface_get_type_descriptor(*args):
    """
    StepGeom_QuasiUniformSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_QuasiUniformSurface_get_type_descriptor(*args)

class Handle_StepGeom_UniformSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_UniformSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_UniformSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_UniformSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_UniformSurface self, StepGeom_UniformSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_UniformSurface self, Handle_StepGeom_UniformSurface theHandle) -> Handle_StepGeom_UniformSurface
        assign(Handle_StepGeom_UniformSurface self, StepGeom_UniformSurface thePtr) -> Handle_StepGeom_UniformSurface
        assign(Handle_StepGeom_UniformSurface self, Handle_StepGeom_UniformSurface theHandle) -> Handle_StepGeom_UniformSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_UniformSurface self) -> StepGeom_UniformSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_UniformSurface self) -> StepGeom_UniformSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_UniformSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_UniformSurface self) -> StepGeom_UniformSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_UniformSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_UniformSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_UniformSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_UniformSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_UniformSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_UniformSurface

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_UniformSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_UniformSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_UniformSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_UniformSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_Init(self, *args)


    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_UniformSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_UniformSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_UniformSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_UniformSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_UniformSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_UniformSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_UniformSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_UniformSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_UniformSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_UniformSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_UniformSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_UniformSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_UniformSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_UniformSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_UniformSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_UniformSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_UniformSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_UniformSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_UniformSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_UniformSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_UniformSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_UniformSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_UniformSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_UniformSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_UniformSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_UniformSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_UniformSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_UniformSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_UniformSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_UniformSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_UniformSurface_swigregister = _StepGeom.Handle_StepGeom_UniformSurface_swigregister
Handle_StepGeom_UniformSurface_swigregister(Handle_StepGeom_UniformSurface)

def Handle_StepGeom_UniformSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_UniformSurface_DownCast(thing)
Handle_StepGeom_UniformSurface_DownCast = _StepGeom.Handle_StepGeom_UniformSurface_DownCast

class Handle_StepGeom_CurveReplica(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_CurveReplica self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_CurveReplica_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_CurveReplica self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_CurveReplica self, StepGeom_CurveReplica thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_CurveReplica self, Handle_StepGeom_CurveReplica theHandle) -> Handle_StepGeom_CurveReplica
        assign(Handle_StepGeom_CurveReplica self, StepGeom_CurveReplica thePtr) -> Handle_StepGeom_CurveReplica
        assign(Handle_StepGeom_CurveReplica self, Handle_StepGeom_CurveReplica theHandle) -> Handle_StepGeom_CurveReplica

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_CurveReplica self) -> StepGeom_CurveReplica

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_CurveReplica self) -> StepGeom_CurveReplica

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CurveReplica___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_CurveReplica self) -> StepGeom_CurveReplica

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_CurveReplica___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_CurveReplica___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_CurveReplica___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_CurveReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CurveReplica_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CurveReplica

    def Init(self, *args):
        """
        Init(Handle_StepGeom_CurveReplica self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aParentCurve, Handle_StepGeom_CartesianTransformationOperator aTransformation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_Init(self, *args)


    def SetParentCurve(self, *args):
        """
        SetParentCurve(Handle_StepGeom_CurveReplica self, Handle_StepGeom_Curve aParentCurve)

        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_SetParentCurve(self, *args)


    def ParentCurve(self, *args):
        """
        ParentCurve(Handle_StepGeom_CurveReplica self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_ParentCurve(self, *args)


    def SetTransformation(self, *args):
        """
        SetTransformation(Handle_StepGeom_CurveReplica self, Handle_StepGeom_CartesianTransformationOperator aTransformation)

        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        Transformation(Handle_StepGeom_CurveReplica self) -> Handle_StepGeom_CartesianTransformationOperator

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_Transformation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_CurveReplica self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CurveReplica_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CurveReplica_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_CurveReplica self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_CurveReplica self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_CurveReplica self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_CurveReplica_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_CurveReplica self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_CurveReplica self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_CurveReplica self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_CurveReplica self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_CurveReplica self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_CurveReplica self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_CurveReplica self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_CurveReplica_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_CurveReplica self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CurveReplica_DecrementRefCounter(self, *args)

Handle_StepGeom_CurveReplica_swigregister = _StepGeom.Handle_StepGeom_CurveReplica_swigregister
Handle_StepGeom_CurveReplica_swigregister(Handle_StepGeom_CurveReplica)

def Handle_StepGeom_CurveReplica_DownCast(thing):
    return _StepGeom.Handle_StepGeom_CurveReplica_DownCast(thing)
Handle_StepGeom_CurveReplica_DownCast = _StepGeom.Handle_StepGeom_CurveReplica_DownCast

class Handle_StepGeom_Axis2Placement2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Axis2Placement2d self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Axis2Placement2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Axis2Placement2d self, StepGeom_Axis2Placement2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Axis2Placement2d self, Handle_StepGeom_Axis2Placement2d theHandle) -> Handle_StepGeom_Axis2Placement2d
        assign(Handle_StepGeom_Axis2Placement2d self, StepGeom_Axis2Placement2d thePtr) -> Handle_StepGeom_Axis2Placement2d
        assign(Handle_StepGeom_Axis2Placement2d self, Handle_StepGeom_Axis2Placement2d theHandle) -> Handle_StepGeom_Axis2Placement2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Axis2Placement2d self) -> StepGeom_Axis2Placement2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Axis2Placement2d self) -> StepGeom_Axis2Placement2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Axis2Placement2d self) -> StepGeom_Axis2Placement2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Axis2Placement2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Axis2Placement2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Axis2Placement2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Axis2Placement2d_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Axis2Placement2d

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Axis2Placement2d self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_CartesianPoint aLocation, Standard_Boolean const hasArefDirection, Handle_StepGeom_Direction aRefDirection)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aLocation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type hasArefDirection: bool
        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_Init(self, *args)


    def SetRefDirection(self, *args):
        """
        SetRefDirection(Handle_StepGeom_Axis2Placement2d self, Handle_StepGeom_Direction aRefDirection)

        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_SetRefDirection(self, *args)


    def UnSetRefDirection(self, *args):
        """UnSetRefDirection(Handle_StepGeom_Axis2Placement2d self)"""
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_UnSetRefDirection(self, *args)


    def RefDirection(self, *args):
        """
        RefDirection(Handle_StepGeom_Axis2Placement2d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_RefDirection(self, *args)


    def HasRefDirection(self, *args):
        """
        HasRefDirection(Handle_StepGeom_Axis2Placement2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_HasRefDirection(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Axis2Placement2d self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Axis2Placement2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Axis2Placement2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLocation(self, *args):
        """
        SetLocation(Handle_StepGeom_Axis2Placement2d self, Handle_StepGeom_CartesianPoint aLocation)

        :type aLocation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_SetLocation(self, *args)


    def Location(self, *args):
        """
        Location(Handle_StepGeom_Axis2Placement2d self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_Location(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Axis2Placement2d self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Axis2Placement2d self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Axis2Placement2d self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Axis2Placement2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Axis2Placement2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Axis2Placement2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Axis2Placement2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Axis2Placement2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Axis2Placement2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Axis2Placement2d self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Axis2Placement2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Axis2Placement2d_DecrementRefCounter(self, *args)

Handle_StepGeom_Axis2Placement2d_swigregister = _StepGeom.Handle_StepGeom_Axis2Placement2d_swigregister
Handle_StepGeom_Axis2Placement2d_swigregister(Handle_StepGeom_Axis2Placement2d)

def Handle_StepGeom_Axis2Placement2d_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Axis2Placement2d_DownCast(thing)
Handle_StepGeom_Axis2Placement2d_DownCast = _StepGeom.Handle_StepGeom_Axis2Placement2d_DownCast

class Handle_StepGeom_HArray1OfCompositeCurveSegment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_HArray1OfCompositeCurveSegment self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_HArray1OfCompositeCurveSegment self, StepGeom_HArray1OfCompositeCurveSegment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_HArray1OfCompositeCurveSegment self, Handle_StepGeom_HArray1OfCompositeCurveSegment theHandle) -> Handle_StepGeom_HArray1OfCompositeCurveSegment
        assign(Handle_StepGeom_HArray1OfCompositeCurveSegment self, StepGeom_HArray1OfCompositeCurveSegment thePtr) -> Handle_StepGeom_HArray1OfCompositeCurveSegment
        assign(Handle_StepGeom_HArray1OfCompositeCurveSegment self, Handle_StepGeom_HArray1OfCompositeCurveSegment theHandle) -> Handle_StepGeom_HArray1OfCompositeCurveSegment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> StepGeom_HArray1OfCompositeCurveSegment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> StepGeom_HArray1OfCompositeCurveSegment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> StepGeom_HArray1OfCompositeCurveSegment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_HArray1OfCompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfCompositeCurveSegment

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCompositeCurveSegment

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> NCollection_Array1_Handle_StepGeom_CompositeCurveSegment

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_HArray1OfCompositeCurveSegment self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_HArray1OfCompositeCurveSegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_HArray1OfCompositeCurveSegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_HArray1OfCompositeCurveSegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_HArray1OfCompositeCurveSegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_HArray1OfCompositeCurveSegment self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_HArray1OfCompositeCurveSegment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_DecrementRefCounter(self, *args)

Handle_StepGeom_HArray1OfCompositeCurveSegment_swigregister = _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_swigregister
Handle_StepGeom_HArray1OfCompositeCurveSegment_swigregister(Handle_StepGeom_HArray1OfCompositeCurveSegment)

def Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast(thing):
    return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast(thing)
Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast = _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast

class StepGeom_OrientedSurface(StepGeom_Surface):
    """Representation of STEP entity OrientedSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_OrientedSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_OrientedSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_OrientedSurface self) -> StepGeom_OrientedSurface

        Empty constructor


        """
        this = _StepGeom.new_StepGeom_OrientedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_OrientedSurface self, Handle_TCollection_HAsciiString aRepresentationItem_Name, Standard_Boolean const aOrientation)

        Initialize all fields (own and inherited)

        :type aRepresentationItem_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOrientation: bool

        """
        return _StepGeom.StepGeom_OrientedSurface_Init(self, *args)


    def Orientation(self, *args):
        """
        Orientation(StepGeom_OrientedSurface self) -> Standard_Boolean

        Returns field Orientation

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_OrientedSurface_Orientation(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(StepGeom_OrientedSurface self, Standard_Boolean const Orientation)

        Set field Orientation

        :type Orientation: bool

        """
        return _StepGeom.StepGeom_OrientedSurface_SetOrientation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_OrientedSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_OrientedSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_OrientedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_OrientedSurface
StepGeom_OrientedSurface_swigregister = _StepGeom.StepGeom_OrientedSurface_swigregister
StepGeom_OrientedSurface_swigregister(StepGeom_OrientedSurface)

def StepGeom_OrientedSurface_get_type_name(*args):
    """
    StepGeom_OrientedSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_OrientedSurface_get_type_name(*args)

def StepGeom_OrientedSurface_get_type_descriptor(*args):
    """
    StepGeom_OrientedSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_OrientedSurface_get_type_descriptor(*args)

class StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface

        Returns a QuasiUniformSurfaceAndRationalBSplineSurface


        """
        this = _StepGeom.new_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_StepGeom_QuasiUniformSurface aQuasiUniformSurface, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)
        Init(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetQuasiUniformSurface(self, *args):
        """
        SetQuasiUniformSurface(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_QuasiUniformSurface aQuasiUniformSurface)

        :type aQuasiUniformSurface: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurface

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetQuasiUniformSurface(self, *args)


    def QuasiUniformSurface(self, *args):
        """
        QuasiUniformSurface(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_QuasiUniformSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurface

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_QuasiUniformSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        SetRationalBSplineSurface(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)

        :type aRationalBSplineSurface: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        RationalBSplineSurface(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_RationalBSplineSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)

def StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_name(*args):
    """
    StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_name(*args)

def StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_descriptor(*args):
    """
    StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_descriptor(*args)

class StepGeom_OffsetSurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_OffsetSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_OffsetSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_OffsetSurface self) -> StepGeom_OffsetSurface

        Returns a OffsetSurface


        """
        this = _StepGeom.new_StepGeom_OffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_OffsetSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Standard_Real const aDistance, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aDistance: float
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_OffsetSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(StepGeom_OffsetSurface self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_OffsetSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(StepGeom_OffsetSurface self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_OffsetSurface_BasisSurface(self, *args)


    def SetDistance(self, *args):
        """
        SetDistance(StepGeom_OffsetSurface self, Standard_Real const aDistance)

        :type aDistance: float

        """
        return _StepGeom.StepGeom_OffsetSurface_SetDistance(self, *args)


    def Distance(self, *args):
        """
        Distance(StepGeom_OffsetSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_OffsetSurface_Distance(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(StepGeom_OffsetSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_OffsetSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(StepGeom_OffsetSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.StepGeom_OffsetSurface_SelfIntersect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_OffsetSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_OffsetSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_OffsetSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_OffsetSurface
StepGeom_OffsetSurface_swigregister = _StepGeom.StepGeom_OffsetSurface_swigregister
StepGeom_OffsetSurface_swigregister(StepGeom_OffsetSurface)

def StepGeom_OffsetSurface_get_type_name(*args):
    """
    StepGeom_OffsetSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_OffsetSurface_get_type_name(*args)

def StepGeom_OffsetSurface_get_type_descriptor(*args):
    """
    StepGeom_OffsetSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_OffsetSurface_get_type_descriptor(*args)

class StepGeom_SweptSurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SweptSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SweptSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SweptSurface self) -> StepGeom_SweptSurface

        Returns a SweptSurface


        """
        this = _StepGeom.new_StepGeom_SweptSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_SweptSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aSweptCurve)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_SweptSurface_Init(self, *args)


    def SetSweptCurve(self, *args):
        """
        SetSweptCurve(StepGeom_SweptSurface self, Handle_StepGeom_Curve aSweptCurve)

        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_SweptSurface_SetSweptCurve(self, *args)


    def SweptCurve(self, *args):
        """
        SweptCurve(StepGeom_SweptSurface self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_SweptSurface_SweptCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SweptSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SweptSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SweptSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SweptSurface
StepGeom_SweptSurface_swigregister = _StepGeom.StepGeom_SweptSurface_swigregister
StepGeom_SweptSurface_swigregister(StepGeom_SweptSurface)

def StepGeom_SweptSurface_get_type_name(*args):
    """
    StepGeom_SweptSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SweptSurface_get_type_name(*args)

def StepGeom_SweptSurface_get_type_descriptor(*args):
    """
    StepGeom_SweptSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SweptSurface_get_type_descriptor(*args)

class Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext theHandle) -> Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext
        assign(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext thePtr) -> Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext
        assign(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext theHandle) -> Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> StepGeom_GeometricRepresentationContextAndParametricRepresentationContext

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> StepGeom_GeometricRepresentationContextAndParametricRepresentationContext

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> StepGeom_GeometricRepresentationContextAndParametricRepresentationContext

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext

    def Init(self, *args):
        """
        Init(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext, Handle_StepRepr_ParametricRepresentationContext aParametricRepresentationContext)
        Init(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Standard_Integer const aCoordinateSpaceDimension)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        SetGeometricRepresentationContext(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext)

        :type aGeometricRepresentationContext: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        GeometricRepresentationContext(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Handle_StepGeom_GeometricRepresentationContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_GeometricRepresentationContext(self, *args)


    def SetParametricRepresentationContext(self, *args):
        """
        SetParametricRepresentationContext(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_StepRepr_ParametricRepresentationContext aParametricRepresentationContext)

        :type aParametricRepresentationContext: OCC.wrapper.StepGeom.Handle_StepRepr_ParametricRepresentationContext

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetParametricRepresentationContext(self, *args)


    def ParametricRepresentationContext(self, *args):
        """
        ParametricRepresentationContext(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Handle_StepRepr_ParametricRepresentationContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_ParametricRepresentationContext

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_ParametricRepresentationContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        SetCoordinateSpaceDimension(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Standard_Integer const aCoordinateSpaceDimension)

        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        CoordinateSpaceDimension(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_CoordinateSpaceDimension(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetContextIdentifier(self, *args):
        """
        SetContextIdentifier(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetContextIdentifier(self, *args)


    def ContextIdentifier(self, *args):
        """
        ContextIdentifier(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_ContextIdentifier(self, *args)


    def SetContextType(self, *args):
        """
        SetContextType(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_TCollection_HAsciiString aContextType)

        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetContextType(self, *args)


    def ContextType(self, *args):
        """
        ContextType(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_ContextType(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DecrementRefCounter(self, *args)

Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister
Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)

def Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast(thing):
    return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast(thing)
Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast

class Handle_StepGeom_SweptSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SweptSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SweptSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SweptSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SweptSurface self, StepGeom_SweptSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SweptSurface self, Handle_StepGeom_SweptSurface theHandle) -> Handle_StepGeom_SweptSurface
        assign(Handle_StepGeom_SweptSurface self, StepGeom_SweptSurface thePtr) -> Handle_StepGeom_SweptSurface
        assign(Handle_StepGeom_SweptSurface self, Handle_StepGeom_SweptSurface theHandle) -> Handle_StepGeom_SweptSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SweptSurface self) -> StepGeom_SweptSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SweptSurface self) -> StepGeom_SweptSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SweptSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SweptSurface self) -> StepGeom_SweptSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SweptSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SweptSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SweptSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SweptSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SweptSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SweptSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_SweptSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aSweptCurve)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_Init(self, *args)


    def SetSweptCurve(self, *args):
        """
        SetSweptCurve(Handle_StepGeom_SweptSurface self, Handle_StepGeom_Curve aSweptCurve)

        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_SetSweptCurve(self, *args)


    def SweptCurve(self, *args):
        """
        SweptCurve(Handle_StepGeom_SweptSurface self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_SweptCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SweptSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SweptSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SweptSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_SweptSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_SweptSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SweptSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SweptSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SweptSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SweptSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SweptSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SweptSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SweptSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SweptSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SweptSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SweptSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SweptSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SweptSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_SweptSurface_swigregister = _StepGeom.Handle_StepGeom_SweptSurface_swigregister
Handle_StepGeom_SweptSurface_swigregister(Handle_StepGeom_SweptSurface)

def Handle_StepGeom_SweptSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SweptSurface_DownCast(thing)
Handle_StepGeom_SweptSurface_DownCast = _StepGeom.Handle_StepGeom_SweptSurface_DownCast

class StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

        Returns a BSplineCurveWithKnotsAndRationalBSplineCurve


        """
        this = _StepGeom.new_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_StepGeom_BSplineCurveWithKnots aBSplineCurveWithKnots, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)
        Init(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfInteger aKnotMultiplicities, Handle_TColStd_HArray1OfReal aKnots, StepGeom_KnotType const aKnotSpec, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aKnotMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Init(self, *args)


    def SetBSplineCurveWithKnots(self, *args):
        """
        SetBSplineCurveWithKnots(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_BSplineCurveWithKnots aBSplineCurveWithKnots)

        :type aBSplineCurveWithKnots: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetBSplineCurveWithKnots(self, *args)


    def BSplineCurveWithKnots(self, *args):
        """
        BSplineCurveWithKnots(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_StepGeom_BSplineCurveWithKnots

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_BSplineCurveWithKnots(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        SetRationalBSplineCurve(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)

        :type aRationalBSplineCurve: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        RationalBSplineCurve(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_StepGeom_RationalBSplineCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetKnotMultiplicities(self, *args):
        """
        SetKnotMultiplicities(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TColStd_HArray1OfInteger aKnotMultiplicities)

        :type aKnotMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnotMultiplicities(self, *args)


    def KnotMultiplicities(self, *args):
        """
        KnotMultiplicities(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotMultiplicities(self, *args)


    def KnotMultiplicitiesValue(self, *args):
        """
        KnotMultiplicitiesValue(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotMultiplicitiesValue(self, *args)


    def NbKnotMultiplicities(self, *args):
        """
        NbKnotMultiplicities(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbKnotMultiplicities(self, *args)


    def SetKnots(self, *args):
        """
        SetKnots(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aKnots)

        :type aKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnots(self, *args)


    def Knots(self, *args):
        """
        Knots(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Knots(self, *args)


    def KnotsValue(self, *args):
        """
        KnotsValue(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotsValue(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        SetKnotSpec(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, StepGeom_KnotType const aKnotSpec)

        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        KnotSpec(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepGeom_KnotType

        :rtype: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotSpec(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister = _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)

def StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_name(*args):
    """
    StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_name(*args)

def StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_descriptor(*args):
    """
    StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_descriptor(*args)

class Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx theHandle) -> Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
        assign(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx thePtr) -> Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
        assign(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx theHandle) -> Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx

    def Init(self, *args):
        """
        Init(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationCtx, Handle_StepRepr_GlobalUnitAssignedContext aGlobalUnitAssignedCtx, Handle_StepRepr_GlobalUncertaintyAssignedContext aGlobalUncertaintyAssignedCtx)
        Init(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Standard_Integer const aCoordinateSpaceDimension, Handle_StepBasic_HArray1OfNamedUnit aUnits, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit anUncertainty)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinateSpaceDimension: int
        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit
        :type anUncertainty: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        SetGeometricRepresentationContext(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext)

        :type aGeometricRepresentationContext: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        GeometricRepresentationContext(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepGeom_GeometricRepresentationContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GeometricRepresentationContext(self, *args)


    def SetGlobalUnitAssignedContext(self, *args):
        """
        SetGlobalUnitAssignedContext(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepRepr_GlobalUnitAssignedContext aGlobalUnitAssignedContext)

        :type aGlobalUnitAssignedContext: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGlobalUnitAssignedContext(self, *args)


    def GlobalUnitAssignedContext(self, *args):
        """
        GlobalUnitAssignedContext(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepRepr_GlobalUnitAssignedContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GlobalUnitAssignedContext(self, *args)


    def SetGlobalUncertaintyAssignedContext(self, *args):
        """
        SetGlobalUncertaintyAssignedContext(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepRepr_GlobalUncertaintyAssignedContext aGlobalUncertaintyAssignedCtx)

        :type aGlobalUncertaintyAssignedCtx: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUncertaintyAssignedContext

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGlobalUncertaintyAssignedContext(self, *args)


    def GlobalUncertaintyAssignedContext(self, *args):
        """
        GlobalUncertaintyAssignedContext(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepRepr_GlobalUncertaintyAssignedContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUncertaintyAssignedContext

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GlobalUncertaintyAssignedContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        SetCoordinateSpaceDimension(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Standard_Integer const aCoordinateSpaceDimension)

        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        CoordinateSpaceDimension(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_CoordinateSpaceDimension(self, *args)


    def SetUnits(self, *args):
        """
        SetUnits(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepBasic_HArray1OfNamedUnit aUnits)

        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetUnits(self, *args)


    def Units(self, *args):
        """
        Units(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepBasic_HArray1OfNamedUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Units(self, *args)


    def UnitsValue(self, *args):
        """
        UnitsValue(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Standard_Integer const num) -> Handle_StepBasic_NamedUnit

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_NamedUnit

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_UnitsValue(self, *args)


    def NbUnits(self, *args):
        """
        NbUnits(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_NbUnits(self, *args)


    def SetUncertainty(self, *args):
        """
        SetUncertainty(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit aUncertainty)

        :type aUncertainty: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetUncertainty(self, *args)


    def Uncertainty(self, *args):
        """
        Uncertainty(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Uncertainty(self, *args)


    def UncertaintyValue(self, *args):
        """
        UncertaintyValue(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Standard_Integer const num) -> Handle_StepBasic_UncertaintyMeasureWithUnit

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_UncertaintyValue(self, *args)


    def NbUncertainty(self, *args):
        """
        NbUncertainty(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_NbUncertainty(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetContextIdentifier(self, *args):
        """
        SetContextIdentifier(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_TCollection_HAsciiString aContextIdentifier)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetContextIdentifier(self, *args)


    def ContextIdentifier(self, *args):
        """
        ContextIdentifier(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_ContextIdentifier(self, *args)


    def SetContextType(self, *args):
        """
        SetContextType(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_TCollection_HAsciiString aContextType)

        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetContextType(self, *args)


    def ContextType(self, *args):
        """
        ContextType(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_ContextType(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DecrementRefCounter(self, *args)

Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister = _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister
Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)

def Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast(thing):
    return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast(thing)
Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast = _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast

class StepGeom_Ellipse(StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Ellipse
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Ellipse(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Ellipse self) -> StepGeom_Ellipse

        Returns a Ellipse


        """
        this = _StepGeom.new_StepGeom_Ellipse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Ellipse self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition, Standard_Real const aSemiAxis1, Standard_Real const aSemiAxis2)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement
        :type aSemiAxis1: float
        :type aSemiAxis2: float

        """
        return _StepGeom.StepGeom_Ellipse_Init(self, *args)


    def SetSemiAxis1(self, *args):
        """
        SetSemiAxis1(StepGeom_Ellipse self, Standard_Real const aSemiAxis1)

        :type aSemiAxis1: float

        """
        return _StepGeom.StepGeom_Ellipse_SetSemiAxis1(self, *args)


    def SemiAxis1(self, *args):
        """
        SemiAxis1(StepGeom_Ellipse self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_Ellipse_SemiAxis1(self, *args)


    def SetSemiAxis2(self, *args):
        """
        SetSemiAxis2(StepGeom_Ellipse self, Standard_Real const aSemiAxis2)

        :type aSemiAxis2: float

        """
        return _StepGeom.StepGeom_Ellipse_SetSemiAxis2(self, *args)


    def SemiAxis2(self, *args):
        """
        SemiAxis2(StepGeom_Ellipse self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_Ellipse_SemiAxis2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Ellipse_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Ellipse_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Ellipse_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Ellipse
StepGeom_Ellipse_swigregister = _StepGeom.StepGeom_Ellipse_swigregister
StepGeom_Ellipse_swigregister(StepGeom_Ellipse)

def StepGeom_Ellipse_get_type_name(*args):
    """
    StepGeom_Ellipse_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Ellipse_get_type_name(*args)

def StepGeom_Ellipse_get_type_descriptor(*args):
    """
    StepGeom_Ellipse_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Ellipse_get_type_descriptor(*args)

class StepGeom_BezierSurfaceAndRationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> StepGeom_BezierSurfaceAndRationalBSplineSurface

        Returns a BezierSurfaceAndRationalBSplineSurface


        """
        this = _StepGeom.new_StepGeom_BezierSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_StepGeom_BezierSurface aBezierSurface, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)
        Init(StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetBezierSurface(self, *args):
        """
        SetBezierSurface(StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_StepGeom_BezierSurface aBezierSurface)

        :type aBezierSurface: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurface

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetBezierSurface(self, *args)


    def BezierSurface(self, *args):
        """
        BezierSurface(StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_BezierSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurface

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_BezierSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        SetRationalBSplineSurface(StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)

        :type aRationalBSplineSurface: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        RationalBSplineSurface(StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_RationalBSplineSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_BezierSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BezierSurfaceAndRationalBSplineSurface
StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister
StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister(StepGeom_BezierSurfaceAndRationalBSplineSurface)

def StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_name(*args):
    """
    StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_name(*args)

def StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_descriptor(*args):
    """
    StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_descriptor(*args)

class StepGeom_BezierCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BezierCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BezierCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BezierCurve self) -> StepGeom_BezierCurve

        Returns a BezierCurve


        """
        this = _StepGeom.new_StepGeom_BezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BezierCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BezierCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BezierCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BezierCurve
StepGeom_BezierCurve_swigregister = _StepGeom.StepGeom_BezierCurve_swigregister
StepGeom_BezierCurve_swigregister(StepGeom_BezierCurve)

def StepGeom_BezierCurve_get_type_name(*args):
    """
    StepGeom_BezierCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BezierCurve_get_type_name(*args)

def StepGeom_BezierCurve_get_type_descriptor(*args):
    """
    StepGeom_BezierCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BezierCurve_get_type_descriptor(*args)

class StepGeom_ReparametrisedCompositeCurveSegment(StepGeom_CompositeCurveSegment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_ReparametrisedCompositeCurveSegment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_ReparametrisedCompositeCurveSegment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_ReparametrisedCompositeCurveSegment self) -> StepGeom_ReparametrisedCompositeCurveSegment

        Returns a ReparametrisedCompositeCurveSegment


        """
        this = _StepGeom.new_StepGeom_ReparametrisedCompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_ReparametrisedCompositeCurveSegment self, StepGeom_TransitionCode const aTransition, Standard_Boolean const aSameSense, Handle_StepGeom_Curve aParentCurve, Standard_Real const aParamLength)

        :type aTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode
        :type aSameSense: bool
        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aParamLength: float

        """
        return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_Init(self, *args)


    def SetParamLength(self, *args):
        """
        SetParamLength(StepGeom_ReparametrisedCompositeCurveSegment self, Standard_Real const aParamLength)

        :type aParamLength: float

        """
        return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_SetParamLength(self, *args)


    def ParamLength(self, *args):
        """
        ParamLength(StepGeom_ReparametrisedCompositeCurveSegment self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_ParamLength(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_ReparametrisedCompositeCurveSegment
StepGeom_ReparametrisedCompositeCurveSegment_swigregister = _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_swigregister
StepGeom_ReparametrisedCompositeCurveSegment_swigregister(StepGeom_ReparametrisedCompositeCurveSegment)

def StepGeom_ReparametrisedCompositeCurveSegment_get_type_name(*args):
    """
    StepGeom_ReparametrisedCompositeCurveSegment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_get_type_name(*args)

def StepGeom_ReparametrisedCompositeCurveSegment_get_type_descriptor(*args):
    """
    StepGeom_ReparametrisedCompositeCurveSegment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_get_type_descriptor(*args)

class StepGeom_SurfaceOfLinearExtrusion(StepGeom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SurfaceOfLinearExtrusion
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SurfaceOfLinearExtrusion(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SurfaceOfLinearExtrusion self) -> StepGeom_SurfaceOfLinearExtrusion

        Returns a SurfaceOfLinearExtrusion


        """
        this = _StepGeom.new_StepGeom_SurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_SurfaceOfLinearExtrusion self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aSweptCurve, Handle_StepGeom_Vector aExtrusionAxis)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aExtrusionAxis: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_Init(self, *args)


    def SetExtrusionAxis(self, *args):
        """
        SetExtrusionAxis(StepGeom_SurfaceOfLinearExtrusion self, Handle_StepGeom_Vector aExtrusionAxis)

        :type aExtrusionAxis: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_SetExtrusionAxis(self, *args)


    def ExtrusionAxis(self, *args):
        """
        ExtrusionAxis(StepGeom_SurfaceOfLinearExtrusion self) -> Handle_StepGeom_Vector

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_ExtrusionAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SurfaceOfLinearExtrusion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceOfLinearExtrusion
StepGeom_SurfaceOfLinearExtrusion_swigregister = _StepGeom.StepGeom_SurfaceOfLinearExtrusion_swigregister
StepGeom_SurfaceOfLinearExtrusion_swigregister(StepGeom_SurfaceOfLinearExtrusion)

def StepGeom_SurfaceOfLinearExtrusion_get_type_name(*args):
    """
    StepGeom_SurfaceOfLinearExtrusion_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_get_type_name(*args)

def StepGeom_SurfaceOfLinearExtrusion_get_type_descriptor(*args):
    """
    StepGeom_SurfaceOfLinearExtrusion_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_get_type_descriptor(*args)

class Handle_StepGeom_BezierSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BezierSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BezierSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BezierSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BezierSurface self, StepGeom_BezierSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BezierSurface self, Handle_StepGeom_BezierSurface theHandle) -> Handle_StepGeom_BezierSurface
        assign(Handle_StepGeom_BezierSurface self, StepGeom_BezierSurface thePtr) -> Handle_StepGeom_BezierSurface
        assign(Handle_StepGeom_BezierSurface self, Handle_StepGeom_BezierSurface theHandle) -> Handle_StepGeom_BezierSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BezierSurface self) -> StepGeom_BezierSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BezierSurface self) -> StepGeom_BezierSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BezierSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BezierSurface self) -> StepGeom_BezierSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BezierSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BezierSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BezierSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BezierSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BezierSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BezierSurface

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BezierSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BezierSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BezierSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_BezierSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_Init(self, *args)


    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_BezierSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_BezierSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_BezierSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_BezierSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BezierSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BezierSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BezierSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_BezierSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_BezierSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_BezierSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_BezierSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_BezierSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_BezierSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_BezierSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_BezierSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BezierSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BezierSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BezierSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BezierSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BezierSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BezierSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BezierSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BezierSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BezierSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BezierSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BezierSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BezierSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BezierSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BezierSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BezierSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_BezierSurface_swigregister = _StepGeom.Handle_StepGeom_BezierSurface_swigregister
Handle_StepGeom_BezierSurface_swigregister(Handle_StepGeom_BezierSurface)

def Handle_StepGeom_BezierSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BezierSurface_DownCast(thing)
Handle_StepGeom_BezierSurface_DownCast = _StepGeom.Handle_StepGeom_BezierSurface_DownCast

class Handle_StepGeom_OrientedSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_OrientedSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_OrientedSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_OrientedSurface self, StepGeom_OrientedSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_OrientedSurface self, Handle_StepGeom_OrientedSurface theHandle) -> Handle_StepGeom_OrientedSurface
        assign(Handle_StepGeom_OrientedSurface self, StepGeom_OrientedSurface thePtr) -> Handle_StepGeom_OrientedSurface
        assign(Handle_StepGeom_OrientedSurface self, Handle_StepGeom_OrientedSurface theHandle) -> Handle_StepGeom_OrientedSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_OrientedSurface self) -> StepGeom_OrientedSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_OrientedSurface self) -> StepGeom_OrientedSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_OrientedSurface self) -> StepGeom_OrientedSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_OrientedSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_OrientedSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_OrientedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_OrientedSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_OrientedSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_OrientedSurface self, Handle_TCollection_HAsciiString aRepresentationItem_Name, Standard_Boolean const aOrientation)

        Initialize all fields (own and inherited)

        :type aRepresentationItem_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOrientation: bool

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_Init(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_StepGeom_OrientedSurface self) -> Standard_Boolean

        Returns field Orientation

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_Orientation(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_StepGeom_OrientedSurface self, Standard_Boolean const Orientation)

        Set field Orientation

        :type Orientation: bool

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_SetOrientation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_OrientedSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_OrientedSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_OrientedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_OrientedSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_OrientedSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_OrientedSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_OrientedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_OrientedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_OrientedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_OrientedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_OrientedSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_OrientedSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_OrientedSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_OrientedSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OrientedSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_OrientedSurface_swigregister = _StepGeom.Handle_StepGeom_OrientedSurface_swigregister
Handle_StepGeom_OrientedSurface_swigregister(Handle_StepGeom_OrientedSurface)

def Handle_StepGeom_OrientedSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_OrientedSurface_DownCast(thing)
Handle_StepGeom_OrientedSurface_DownCast = _StepGeom.Handle_StepGeom_OrientedSurface_DownCast

class Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext theHandle) -> Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext
        assign(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext thePtr) -> Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext
        assign(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext theHandle) -> Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext

    def Init(self, *args):
        """
        Init(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext, Handle_StepRepr_GlobalUnitAssignedContext aGlobalUnitAssignedContext)
        Init(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Standard_Integer const aCoordinateSpaceDimension, Handle_StepBasic_HArray1OfNamedUnit aUnits)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinateSpaceDimension: int
        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        SetGeometricRepresentationContext(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepGeom_GeometricRepresentationContext aGeometricRepresentationContext)

        :type aGeometricRepresentationContext: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        GeometricRepresentationContext(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Handle_StepGeom_GeometricRepresentationContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GeometricRepresentationContext(self, *args)


    def SetGlobalUnitAssignedContext(self, *args):
        """
        SetGlobalUnitAssignedContext(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepRepr_GlobalUnitAssignedContext aGlobalUnitAssignedContext)

        :type aGlobalUnitAssignedContext: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetGlobalUnitAssignedContext(self, *args)


    def GlobalUnitAssignedContext(self, *args):
        """
        GlobalUnitAssignedContext(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Handle_StepRepr_GlobalUnitAssignedContext

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GlobalUnitAssignedContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        SetCoordinateSpaceDimension(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Standard_Integer const aCoordinateSpaceDimension)

        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        CoordinateSpaceDimension(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_CoordinateSpaceDimension(self, *args)


    def SetUnits(self, *args):
        """
        SetUnits(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepBasic_HArray1OfNamedUnit aUnits)

        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetUnits(self, *args)


    def Units(self, *args):
        """
        Units(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Handle_StepBasic_HArray1OfNamedUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Units(self, *args)


    def UnitsValue(self, *args):
        """
        UnitsValue(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Standard_Integer const num) -> Handle_StepBasic_NamedUnit

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_NamedUnit

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_UnitsValue(self, *args)


    def NbUnits(self, *args):
        """
        NbUnits(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_NbUnits(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetContextIdentifier(self, *args):
        """
        SetContextIdentifier(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_TCollection_HAsciiString aContextIdentifier)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetContextIdentifier(self, *args)


    def ContextIdentifier(self, *args):
        """
        ContextIdentifier(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_ContextIdentifier(self, *args)


    def SetContextType(self, *args):
        """
        SetContextType(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_TCollection_HAsciiString aContextType)

        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetContextType(self, *args)


    def ContextType(self, *args):
        """
        ContextType(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_ContextType(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DecrementRefCounter(self, *args)

Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister
Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)

def Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast(thing):
    return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast(thing)
Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast

class StepGeom_Hyperbola(StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Hyperbola
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Hyperbola(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Hyperbola self) -> StepGeom_Hyperbola

        Returns a Hyperbola


        """
        this = _StepGeom.new_StepGeom_Hyperbola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Hyperbola self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition, Standard_Real const aSemiAxis, Standard_Real const aSemiImagAxis)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement
        :type aSemiAxis: float
        :type aSemiImagAxis: float

        """
        return _StepGeom.StepGeom_Hyperbola_Init(self, *args)


    def SetSemiAxis(self, *args):
        """
        SetSemiAxis(StepGeom_Hyperbola self, Standard_Real const aSemiAxis)

        :type aSemiAxis: float

        """
        return _StepGeom.StepGeom_Hyperbola_SetSemiAxis(self, *args)


    def SemiAxis(self, *args):
        """
        SemiAxis(StepGeom_Hyperbola self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_Hyperbola_SemiAxis(self, *args)


    def SetSemiImagAxis(self, *args):
        """
        SetSemiImagAxis(StepGeom_Hyperbola self, Standard_Real const aSemiImagAxis)

        :type aSemiImagAxis: float

        """
        return _StepGeom.StepGeom_Hyperbola_SetSemiImagAxis(self, *args)


    def SemiImagAxis(self, *args):
        """
        SemiImagAxis(StepGeom_Hyperbola self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_Hyperbola_SemiImagAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Hyperbola_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Hyperbola_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Hyperbola_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Hyperbola
StepGeom_Hyperbola_swigregister = _StepGeom.StepGeom_Hyperbola_swigregister
StepGeom_Hyperbola_swigregister(StepGeom_Hyperbola)

def StepGeom_Hyperbola_get_type_name(*args):
    """
    StepGeom_Hyperbola_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Hyperbola_get_type_name(*args)

def StepGeom_Hyperbola_get_type_descriptor(*args):
    """
    StepGeom_Hyperbola_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Hyperbola_get_type_descriptor(*args)

class StepGeom_QuasiUniformCurveAndRationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> StepGeom_QuasiUniformCurveAndRationalBSplineCurve

        Returns a QuasiUniformCurveAndRationalBSplineCurve


        """
        this = _StepGeom.new_StepGeom_QuasiUniformCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_StepGeom_QuasiUniformCurve aQuasiUniformCurve, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)
        Init(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Init(self, *args)


    def SetQuasiUniformCurve(self, *args):
        """
        SetQuasiUniformCurve(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_QuasiUniformCurve aQuasiUniformCurve)

        :type aQuasiUniformCurve: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurve

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetQuasiUniformCurve(self, *args)


    def QuasiUniformCurve(self, *args):
        """
        QuasiUniformCurve(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_QuasiUniformCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurve

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_QuasiUniformCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        SetRationalBSplineCurve(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)

        :type aRationalBSplineCurve: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        RationalBSplineCurve(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_RationalBSplineCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_QuasiUniformCurveAndRationalBSplineCurve
StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister = _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister
StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister(StepGeom_QuasiUniformCurveAndRationalBSplineCurve)

def StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_name(*args):
    """
    StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_name(*args)

def StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_descriptor(*args):
    """
    StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_descriptor(*args)

class Handle_StepGeom_HArray1OfSurfaceBoundary(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_HArray1OfSurfaceBoundary self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_HArray1OfSurfaceBoundary self, StepGeom_HArray1OfSurfaceBoundary thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_HArray1OfSurfaceBoundary self, Handle_StepGeom_HArray1OfSurfaceBoundary theHandle) -> Handle_StepGeom_HArray1OfSurfaceBoundary
        assign(Handle_StepGeom_HArray1OfSurfaceBoundary self, StepGeom_HArray1OfSurfaceBoundary thePtr) -> Handle_StepGeom_HArray1OfSurfaceBoundary
        assign(Handle_StepGeom_HArray1OfSurfaceBoundary self, Handle_StepGeom_HArray1OfSurfaceBoundary theHandle) -> Handle_StepGeom_HArray1OfSurfaceBoundary

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> StepGeom_HArray1OfSurfaceBoundary

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> StepGeom_HArray1OfSurfaceBoundary

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> StepGeom_HArray1OfSurfaceBoundary

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_HArray1OfSurfaceBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfSurfaceBoundary

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfSurfaceBoundary

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> NCollection_Array1_StepGeom_SurfaceBoundary

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfSurfaceBoundary

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_HArray1OfSurfaceBoundary self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_HArray1OfSurfaceBoundary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_HArray1OfSurfaceBoundary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_HArray1OfSurfaceBoundary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_HArray1OfSurfaceBoundary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_HArray1OfSurfaceBoundary self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_HArray1OfSurfaceBoundary self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_DecrementRefCounter(self, *args)

Handle_StepGeom_HArray1OfSurfaceBoundary_swigregister = _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_swigregister
Handle_StepGeom_HArray1OfSurfaceBoundary_swigregister(Handle_StepGeom_HArray1OfSurfaceBoundary)

def Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast(thing):
    return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast(thing)
Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast = _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast

class Handle_StepGeom_CompositeCurveOnSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_CompositeCurveOnSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_CompositeCurveOnSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_CompositeCurveOnSurface self, StepGeom_CompositeCurveOnSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_CompositeCurveOnSurface self, Handle_StepGeom_CompositeCurveOnSurface theHandle) -> Handle_StepGeom_CompositeCurveOnSurface
        assign(Handle_StepGeom_CompositeCurveOnSurface self, StepGeom_CompositeCurveOnSurface thePtr) -> Handle_StepGeom_CompositeCurveOnSurface
        assign(Handle_StepGeom_CompositeCurveOnSurface self, Handle_StepGeom_CompositeCurveOnSurface theHandle) -> Handle_StepGeom_CompositeCurveOnSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_CompositeCurveOnSurface self) -> StepGeom_CompositeCurveOnSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_CompositeCurveOnSurface self) -> StepGeom_CompositeCurveOnSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_CompositeCurveOnSurface self) -> StepGeom_CompositeCurveOnSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_CompositeCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CompositeCurveOnSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CompositeCurveOnSurface

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_CompositeCurveOnSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_CompositeCurveOnSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_Init(self, *args)


    def SetSegments(self, *args):
        """
        SetSegments(Handle_StepGeom_CompositeCurveOnSurface self, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments)

        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_SetSegments(self, *args)


    def Segments(self, *args):
        """
        Segments(Handle_StepGeom_CompositeCurveOnSurface self) -> Handle_StepGeom_HArray1OfCompositeCurveSegment

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        SegmentsValue(Handle_StepGeom_CompositeCurveOnSurface self, Standard_Integer const num) -> Handle_StepGeom_CompositeCurveSegment

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_SegmentsValue(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(Handle_StepGeom_CompositeCurveOnSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_NbSegments(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_CompositeCurveOnSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_CompositeCurveOnSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_CompositeCurveOnSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_CompositeCurveOnSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_CompositeCurveOnSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_CompositeCurveOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_CompositeCurveOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_CompositeCurveOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_CompositeCurveOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_CompositeCurveOnSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_CompositeCurveOnSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_CompositeCurveOnSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_CompositeCurveOnSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_CompositeCurveOnSurface_swigregister = _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_swigregister
Handle_StepGeom_CompositeCurveOnSurface_swigregister(Handle_StepGeom_CompositeCurveOnSurface)

def Handle_StepGeom_CompositeCurveOnSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_DownCast(thing)
Handle_StepGeom_CompositeCurveOnSurface_DownCast = _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_DownCast

class NCollection_Array1_StepGeom_PcurveOrSurface(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepGeom_PcurveOrSurface self) -> NCollection_Array1< StepGeom_PcurveOrSurface >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepGeom_PcurveOrSurface self) -> NCollection_Array1< StepGeom_PcurveOrSurface >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepGeom_PcurveOrSurface self) -> NCollection_Array1< StepGeom_PcurveOrSurface >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepGeom_PcurveOrSurface self) -> NCollection_Array1< StepGeom_PcurveOrSurface >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepGeom.new_NCollection_Array1_StepGeom_PcurveOrSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepGeom_PcurveOrSurface self, StepGeom_PcurveOrSurface theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepGeom_PcurveOrSurface self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepGeom_PcurveOrSurface self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepGeom_PcurveOrSurface self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepGeom_PcurveOrSurface self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepGeom_PcurveOrSurface self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepGeom_PcurveOrSurface self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepGeom_PcurveOrSurface self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepGeom_PcurveOrSurface self, NCollection_Array1_StepGeom_PcurveOrSurface theOther) -> NCollection_Array1_StepGeom_PcurveOrSurface

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepGeom_PcurveOrSurface self, NCollection_Array1_StepGeom_PcurveOrSurface theOther) -> NCollection_Array1_StepGeom_PcurveOrSurface

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepGeom_PcurveOrSurface self, NCollection_Array1_StepGeom_PcurveOrSurface theOther) -> NCollection_Array1_StepGeom_PcurveOrSurface
        assign(NCollection_Array1_StepGeom_PcurveOrSurface self, NCollection_Array1_StepGeom_PcurveOrSurface theOther) -> NCollection_Array1_StepGeom_PcurveOrSurface

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepGeom_PcurveOrSurface self) -> StepGeom_PcurveOrSurface

        @return first element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepGeom_PcurveOrSurface self) -> StepGeom_PcurveOrSurface

        @return last element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepGeom_PcurveOrSurface self, Standard_Integer const theIndex) -> StepGeom_PcurveOrSurface

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepGeom_PcurveOrSurface self, Standard_Integer const theIndex, StepGeom_PcurveOrSurface theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepGeom_PcurveOrSurface self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_Resize(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array1_StepGeom_PcurveOrSurface
NCollection_Array1_StepGeom_PcurveOrSurface_swigregister = _StepGeom.NCollection_Array1_StepGeom_PcurveOrSurface_swigregister
NCollection_Array1_StepGeom_PcurveOrSurface_swigregister(NCollection_Array1_StepGeom_PcurveOrSurface)


try:
	StepGeom_Array1OfPcurveOrSurface = NCollection_Array1_StepGeom_PcurveOrSurface
except NameError:
	pass # does not exist, probably ignored

class Handle_StepGeom_PointOnSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_PointOnSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_PointOnSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_PointOnSurface self, StepGeom_PointOnSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_PointOnSurface self, Handle_StepGeom_PointOnSurface theHandle) -> Handle_StepGeom_PointOnSurface
        assign(Handle_StepGeom_PointOnSurface self, StepGeom_PointOnSurface thePtr) -> Handle_StepGeom_PointOnSurface
        assign(Handle_StepGeom_PointOnSurface self, Handle_StepGeom_PointOnSurface theHandle) -> Handle_StepGeom_PointOnSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_PointOnSurface self) -> StepGeom_PointOnSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_PointOnSurface self) -> StepGeom_PointOnSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_PointOnSurface self) -> StepGeom_PointOnSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_PointOnSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_PointOnSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_PointOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_PointOnSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_PointOnSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_PointOnSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Standard_Real const aPointParameterU, Standard_Real const aPointParameterV)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aPointParameterU: float
        :type aPointParameterV: float

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(Handle_StepGeom_PointOnSurface self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_StepGeom_PointOnSurface self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_BasisSurface(self, *args)


    def SetPointParameterU(self, *args):
        """
        SetPointParameterU(Handle_StepGeom_PointOnSurface self, Standard_Real const aPointParameterU)

        :type aPointParameterU: float

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_SetPointParameterU(self, *args)


    def PointParameterU(self, *args):
        """
        PointParameterU(Handle_StepGeom_PointOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_PointParameterU(self, *args)


    def SetPointParameterV(self, *args):
        """
        SetPointParameterV(Handle_StepGeom_PointOnSurface self, Standard_Real const aPointParameterV)

        :type aPointParameterV: float

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_SetPointParameterV(self, *args)


    def PointParameterV(self, *args):
        """
        PointParameterV(Handle_StepGeom_PointOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_PointParameterV(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_PointOnSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_PointOnSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_PointOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_PointOnSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_PointOnSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_PointOnSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_PointOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_PointOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_PointOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_PointOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_PointOnSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_PointOnSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_PointOnSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_PointOnSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_PointOnSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_PointOnSurface_swigregister = _StepGeom.Handle_StepGeom_PointOnSurface_swigregister
Handle_StepGeom_PointOnSurface_swigregister(Handle_StepGeom_PointOnSurface)

def Handle_StepGeom_PointOnSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_PointOnSurface_DownCast(thing)
Handle_StepGeom_PointOnSurface_DownCast = _StepGeom.Handle_StepGeom_PointOnSurface_DownCast

class Handle_StepGeom_RationalBSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_RationalBSplineCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_RationalBSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_RationalBSplineCurve self, StepGeom_RationalBSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_RationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve theHandle) -> Handle_StepGeom_RationalBSplineCurve
        assign(Handle_StepGeom_RationalBSplineCurve self, StepGeom_RationalBSplineCurve thePtr) -> Handle_StepGeom_RationalBSplineCurve
        assign(Handle_StepGeom_RationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve theHandle) -> Handle_StepGeom_RationalBSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_RationalBSplineCurve self) -> StepGeom_RationalBSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_RationalBSplineCurve self) -> StepGeom_RationalBSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_RationalBSplineCurve self) -> StepGeom_RationalBSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_RationalBSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_RationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_RationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_RationalBSplineCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_RationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_Init(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_RationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_RationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_RationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(Handle_StepGeom_RationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_RationalBSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_RationalBSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_RationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_RationalBSplineCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_RationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_RationalBSplineCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_RationalBSplineCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_RationalBSplineCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_RationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_RationalBSplineCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_RationalBSplineCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_RationalBSplineCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_RationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_RationalBSplineCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_RationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_RationalBSplineCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_RationalBSplineCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_RationalBSplineCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_RationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_RationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_RationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_RationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_RationalBSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_RationalBSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_RationalBSplineCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_RationalBSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_RationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_RationalBSplineCurve_swigregister
Handle_StepGeom_RationalBSplineCurve_swigregister(Handle_StepGeom_RationalBSplineCurve)

def Handle_StepGeom_RationalBSplineCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_RationalBSplineCurve_DownCast(thing)
Handle_StepGeom_RationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_RationalBSplineCurve_DownCast

class Handle_StepGeom_Plane(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Plane self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Plane_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Plane self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Plane_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Plane self, StepGeom_Plane thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Plane_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Plane self, Handle_StepGeom_Plane theHandle) -> Handle_StepGeom_Plane
        assign(Handle_StepGeom_Plane self, StepGeom_Plane thePtr) -> Handle_StepGeom_Plane
        assign(Handle_StepGeom_Plane self, Handle_StepGeom_Plane theHandle) -> Handle_StepGeom_Plane

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Plane_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Plane self) -> StepGeom_Plane

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Plane_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Plane self) -> StepGeom_Plane

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Plane___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Plane self) -> StepGeom_Plane

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Plane___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Plane___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Plane___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Plane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Plane_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Plane

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Plane self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Plane_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Plane_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Plane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_Plane self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_Plane_Init(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_Plane self, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_Plane_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_Plane self) -> Handle_StepGeom_Axis2Placement3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_Plane_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Plane self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Plane_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Plane self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Plane_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Plane self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Plane_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Plane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Plane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Plane_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Plane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Plane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Plane_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Plane self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Plane_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Plane self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Plane_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Plane self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Plane_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Plane self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Plane_DecrementRefCounter(self, *args)

Handle_StepGeom_Plane_swigregister = _StepGeom.Handle_StepGeom_Plane_swigregister
Handle_StepGeom_Plane_swigregister(Handle_StepGeom_Plane)

def Handle_StepGeom_Plane_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Plane_DownCast(thing)
Handle_StepGeom_Plane_DownCast = _StepGeom.Handle_StepGeom_Plane_DownCast

class Handle_StepGeom_SurfaceCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SurfaceCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SurfaceCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SurfaceCurve self, StepGeom_SurfaceCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SurfaceCurve self, Handle_StepGeom_SurfaceCurve theHandle) -> Handle_StepGeom_SurfaceCurve
        assign(Handle_StepGeom_SurfaceCurve self, StepGeom_SurfaceCurve thePtr) -> Handle_StepGeom_SurfaceCurve
        assign(Handle_StepGeom_SurfaceCurve self, Handle_StepGeom_SurfaceCurve theHandle) -> Handle_StepGeom_SurfaceCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SurfaceCurve self) -> StepGeom_SurfaceCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SurfaceCurve self) -> StepGeom_SurfaceCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SurfaceCurve self) -> StepGeom_SurfaceCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SurfaceCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SurfaceCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SurfaceCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_SurfaceCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aCurve3d, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface
        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_Init(self, *args)


    def SetCurve3d(self, *args):
        """
        SetCurve3d(Handle_StepGeom_SurfaceCurve self, Handle_StepGeom_Curve aCurve3d)

        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_SetCurve3d(self, *args)


    def Curve3d(self, *args):
        """
        Curve3d(Handle_StepGeom_SurfaceCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_Curve3d(self, *args)


    def SetAssociatedGeometry(self, *args):
        """
        SetAssociatedGeometry(Handle_StepGeom_SurfaceCurve self, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry)

        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_SetAssociatedGeometry(self, *args)


    def AssociatedGeometry(self, *args):
        """
        AssociatedGeometry(Handle_StepGeom_SurfaceCurve self) -> Handle_StepGeom_HArray1OfPcurveOrSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_AssociatedGeometry(self, *args)


    def AssociatedGeometryValue(self, *args):
        """
        AssociatedGeometryValue(Handle_StepGeom_SurfaceCurve self, Standard_Integer const num) -> StepGeom_PcurveOrSurface

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_PcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_AssociatedGeometryValue(self, *args)


    def NbAssociatedGeometry(self, *args):
        """
        NbAssociatedGeometry(Handle_StepGeom_SurfaceCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_NbAssociatedGeometry(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        SetMasterRepresentation(Handle_StepGeom_SurfaceCurve self, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        MasterRepresentation(Handle_StepGeom_SurfaceCurve self) -> StepGeom_PreferredSurfaceCurveRepresentation

        :rtype: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_MasterRepresentation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SurfaceCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_SurfaceCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_SurfaceCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SurfaceCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SurfaceCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SurfaceCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SurfaceCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SurfaceCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SurfaceCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SurfaceCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SurfaceCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SurfaceCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_SurfaceCurve_swigregister = _StepGeom.Handle_StepGeom_SurfaceCurve_swigregister
Handle_StepGeom_SurfaceCurve_swigregister(Handle_StepGeom_SurfaceCurve)

def Handle_StepGeom_SurfaceCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SurfaceCurve_DownCast(thing)
Handle_StepGeom_SurfaceCurve_DownCast = _StepGeom.Handle_StepGeom_SurfaceCurve_DownCast

class Handle_StepGeom_CompositeCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_CompositeCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_CompositeCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_CompositeCurve self, StepGeom_CompositeCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_CompositeCurve self, Handle_StepGeom_CompositeCurve theHandle) -> Handle_StepGeom_CompositeCurve
        assign(Handle_StepGeom_CompositeCurve self, StepGeom_CompositeCurve thePtr) -> Handle_StepGeom_CompositeCurve
        assign(Handle_StepGeom_CompositeCurve self, Handle_StepGeom_CompositeCurve theHandle) -> Handle_StepGeom_CompositeCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_CompositeCurve self) -> StepGeom_CompositeCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_CompositeCurve self) -> StepGeom_CompositeCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_CompositeCurve self) -> StepGeom_CompositeCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_CompositeCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_CompositeCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_CompositeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CompositeCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CompositeCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_CompositeCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_Init(self, *args)


    def SetSegments(self, *args):
        """
        SetSegments(Handle_StepGeom_CompositeCurve self, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments)

        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_SetSegments(self, *args)


    def Segments(self, *args):
        """
        Segments(Handle_StepGeom_CompositeCurve self) -> Handle_StepGeom_HArray1OfCompositeCurveSegment

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        SegmentsValue(Handle_StepGeom_CompositeCurve self, Standard_Integer const num) -> Handle_StepGeom_CompositeCurveSegment

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_SegmentsValue(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(Handle_StepGeom_CompositeCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_NbSegments(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_CompositeCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_CompositeCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_SelfIntersect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_CompositeCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CompositeCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CompositeCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_CompositeCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_CompositeCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_CompositeCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_CompositeCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_CompositeCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_CompositeCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_CompositeCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_CompositeCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_CompositeCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_CompositeCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_CompositeCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CompositeCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_CompositeCurve_swigregister = _StepGeom.Handle_StepGeom_CompositeCurve_swigregister
Handle_StepGeom_CompositeCurve_swigregister(Handle_StepGeom_CompositeCurve)

def Handle_StepGeom_CompositeCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_CompositeCurve_DownCast(thing)
Handle_StepGeom_CompositeCurve_DownCast = _StepGeom.Handle_StepGeom_CompositeCurve_DownCast

class Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, StepGeom_BezierSurfaceAndRationalBSplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface theHandle) -> Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface
        assign(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, StepGeom_BezierSurfaceAndRationalBSplineSurface thePtr) -> Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface
        assign(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface theHandle) -> Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> StepGeom_BezierSurfaceAndRationalBSplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> StepGeom_BezierSurfaceAndRationalBSplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> StepGeom_BezierSurfaceAndRationalBSplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_StepGeom_BezierSurface aBezierSurface, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)
        Init(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetBezierSurface(self, *args):
        """
        SetBezierSurface(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_StepGeom_BezierSurface aBezierSurface)

        :type aBezierSurface: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurface

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetBezierSurface(self, *args)


    def BezierSurface(self, *args):
        """
        BezierSurface(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_BezierSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurface

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_BezierSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        SetRationalBSplineSurface(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)

        :type aRationalBSplineSurface: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        RationalBSplineSurface(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_RationalBSplineSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister
Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface)

def Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast(thing)
Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast

class StepGeom_TrimmedCurve(StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_TrimmedCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_TrimmedCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_TrimmedCurve self) -> StepGeom_TrimmedCurve

        Returns a TrimmedCurve


        """
        this = _StepGeom.new_StepGeom_TrimmedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_TrimmedCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aBasisCurve, Handle_StepGeom_HArray1OfTrimmingSelect aTrim1, Handle_StepGeom_HArray1OfTrimmingSelect aTrim2, Standard_Boolean const aSenseAgreement, StepGeom_TrimmingPreference const aMasterRepresentation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aTrim1: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect
        :type aTrim2: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect
        :type aSenseAgreement: bool
        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_TrimmingPreference

        """
        return _StepGeom.StepGeom_TrimmedCurve_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        SetBasisCurve(StepGeom_TrimmedCurve self, Handle_StepGeom_Curve aBasisCurve)

        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(StepGeom_TrimmedCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_TrimmedCurve_BasisCurve(self, *args)


    def SetTrim1(self, *args):
        """
        SetTrim1(StepGeom_TrimmedCurve self, Handle_StepGeom_HArray1OfTrimmingSelect aTrim1)

        :type aTrim1: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetTrim1(self, *args)


    def Trim1(self, *args):
        """
        Trim1(StepGeom_TrimmedCurve self) -> Handle_StepGeom_HArray1OfTrimmingSelect

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_Trim1(self, *args)


    def Trim1Value(self, *args):
        """
        Trim1Value(StepGeom_TrimmedCurve self, Standard_Integer const num) -> StepGeom_TrimmingSelect

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_TrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_Trim1Value(self, *args)


    def NbTrim1(self, *args):
        """
        NbTrim1(StepGeom_TrimmedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_TrimmedCurve_NbTrim1(self, *args)


    def SetTrim2(self, *args):
        """
        SetTrim2(StepGeom_TrimmedCurve self, Handle_StepGeom_HArray1OfTrimmingSelect aTrim2)

        :type aTrim2: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetTrim2(self, *args)


    def Trim2(self, *args):
        """
        Trim2(StepGeom_TrimmedCurve self) -> Handle_StepGeom_HArray1OfTrimmingSelect

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_Trim2(self, *args)


    def Trim2Value(self, *args):
        """
        Trim2Value(StepGeom_TrimmedCurve self, Standard_Integer const num) -> StepGeom_TrimmingSelect

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_TrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_Trim2Value(self, *args)


    def NbTrim2(self, *args):
        """
        NbTrim2(StepGeom_TrimmedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_TrimmedCurve_NbTrim2(self, *args)


    def SetSenseAgreement(self, *args):
        """
        SetSenseAgreement(StepGeom_TrimmedCurve self, Standard_Boolean const aSenseAgreement)

        :type aSenseAgreement: bool

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetSenseAgreement(self, *args)


    def SenseAgreement(self, *args):
        """
        SenseAgreement(StepGeom_TrimmedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_TrimmedCurve_SenseAgreement(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        SetMasterRepresentation(StepGeom_TrimmedCurve self, StepGeom_TrimmingPreference const aMasterRepresentation)

        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_TrimmingPreference

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        MasterRepresentation(StepGeom_TrimmedCurve self) -> StepGeom_TrimmingPreference

        :rtype: OCC.wrapper.StepGeom.StepGeom_TrimmingPreference

        """
        return _StepGeom.StepGeom_TrimmedCurve_MasterRepresentation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_TrimmedCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_TrimmedCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_TrimmedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_TrimmedCurve
StepGeom_TrimmedCurve_swigregister = _StepGeom.StepGeom_TrimmedCurve_swigregister
StepGeom_TrimmedCurve_swigregister(StepGeom_TrimmedCurve)

def StepGeom_TrimmedCurve_get_type_name(*args):
    """
    StepGeom_TrimmedCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_TrimmedCurve_get_type_name(*args)

def StepGeom_TrimmedCurve_get_type_descriptor(*args):
    """
    StepGeom_TrimmedCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_TrimmedCurve_get_type_descriptor(*args)

class Handle_StepGeom_HArray2OfSurfacePatch(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_HArray2OfSurfacePatch self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_HArray2OfSurfacePatch self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_HArray2OfSurfacePatch self, StepGeom_HArray2OfSurfacePatch thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_HArray2OfSurfacePatch self, Handle_StepGeom_HArray2OfSurfacePatch theHandle) -> Handle_StepGeom_HArray2OfSurfacePatch
        assign(Handle_StepGeom_HArray2OfSurfacePatch self, StepGeom_HArray2OfSurfacePatch thePtr) -> Handle_StepGeom_HArray2OfSurfacePatch
        assign(Handle_StepGeom_HArray2OfSurfacePatch self, Handle_StepGeom_HArray2OfSurfacePatch theHandle) -> Handle_StepGeom_HArray2OfSurfacePatch

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_HArray2OfSurfacePatch self) -> StepGeom_HArray2OfSurfacePatch

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_HArray2OfSurfacePatch self) -> StepGeom_HArray2OfSurfacePatch

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_HArray2OfSurfacePatch self) -> StepGeom_HArray2OfSurfacePatch

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_HArray2OfSurfacePatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray2OfSurfacePatch

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array2OfSurfacePatch

        """
        res = _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_StepGeom_HArray2OfSurfacePatch self) -> NCollection_Array2_Handle_StepGeom_SurfacePatch

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array2OfSurfacePatch

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_HArray2OfSurfacePatch self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_HArray2OfSurfacePatch self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_HArray2OfSurfacePatch self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_HArray2OfSurfacePatch self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_HArray2OfSurfacePatch self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_HArray2OfSurfacePatch self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_HArray2OfSurfacePatch self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_HArray2OfSurfacePatch self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_HArray2OfSurfacePatch self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_HArray2OfSurfacePatch self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_DecrementRefCounter(self, *args)

Handle_StepGeom_HArray2OfSurfacePatch_swigregister = _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_swigregister
Handle_StepGeom_HArray2OfSurfacePatch_swigregister(Handle_StepGeom_HArray2OfSurfacePatch)

def Handle_StepGeom_HArray2OfSurfacePatch_DownCast(thing):
    return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_DownCast(thing)
Handle_StepGeom_HArray2OfSurfacePatch_DownCast = _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_DownCast

class StepGeom_QuasiUniformCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_QuasiUniformCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_QuasiUniformCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_QuasiUniformCurve self) -> StepGeom_QuasiUniformCurve

        Returns a QuasiUniformCurve


        """
        this = _StepGeom.new_StepGeom_QuasiUniformCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_QuasiUniformCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_QuasiUniformCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_QuasiUniformCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_QuasiUniformCurve
StepGeom_QuasiUniformCurve_swigregister = _StepGeom.StepGeom_QuasiUniformCurve_swigregister
StepGeom_QuasiUniformCurve_swigregister(StepGeom_QuasiUniformCurve)

def StepGeom_QuasiUniformCurve_get_type_name(*args):
    """
    StepGeom_QuasiUniformCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_QuasiUniformCurve_get_type_name(*args)

def StepGeom_QuasiUniformCurve_get_type_descriptor(*args):
    """
    StepGeom_QuasiUniformCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_QuasiUniformCurve_get_type_descriptor(*args)

class Handle_StepGeom_SurfaceCurveAndBoundedCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SurfaceCurveAndBoundedCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, StepGeom_SurfaceCurveAndBoundedCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Handle_StepGeom_SurfaceCurveAndBoundedCurve theHandle) -> Handle_StepGeom_SurfaceCurveAndBoundedCurve
        assign(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, StepGeom_SurfaceCurveAndBoundedCurve thePtr) -> Handle_StepGeom_SurfaceCurveAndBoundedCurve
        assign(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Handle_StepGeom_SurfaceCurveAndBoundedCurve theHandle) -> Handle_StepGeom_SurfaceCurveAndBoundedCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> StepGeom_SurfaceCurveAndBoundedCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> StepGeom_SurfaceCurveAndBoundedCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> StepGeom_SurfaceCurveAndBoundedCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SurfaceCurveAndBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceCurveAndBoundedCurve

    def BoundedCurve(self, *args):
        """
        BoundedCurve(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> Handle_StepGeom_BoundedCurve

        returns field BoundedCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_BoundedCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aCurve3d, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface
        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_Init(self, *args)


    def SetCurve3d(self, *args):
        """
        SetCurve3d(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Handle_StepGeom_Curve aCurve3d)

        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_SetCurve3d(self, *args)


    def Curve3d(self, *args):
        """
        Curve3d(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_Curve3d(self, *args)


    def SetAssociatedGeometry(self, *args):
        """
        SetAssociatedGeometry(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry)

        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_SetAssociatedGeometry(self, *args)


    def AssociatedGeometry(self, *args):
        """
        AssociatedGeometry(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> Handle_StepGeom_HArray1OfPcurveOrSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_AssociatedGeometry(self, *args)


    def AssociatedGeometryValue(self, *args):
        """
        AssociatedGeometryValue(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Standard_Integer const num) -> StepGeom_PcurveOrSurface

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_PcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_AssociatedGeometryValue(self, *args)


    def NbAssociatedGeometry(self, *args):
        """
        NbAssociatedGeometry(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_NbAssociatedGeometry(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        SetMasterRepresentation(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        MasterRepresentation(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> StepGeom_PreferredSurfaceCurveRepresentation

        :rtype: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_MasterRepresentation(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SurfaceCurveAndBoundedCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SurfaceCurveAndBoundedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SurfaceCurveAndBoundedCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SurfaceCurveAndBoundedCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_SurfaceCurveAndBoundedCurve_swigregister = _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_swigregister
Handle_StepGeom_SurfaceCurveAndBoundedCurve_swigregister(Handle_StepGeom_SurfaceCurveAndBoundedCurve)

def Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast(thing)
Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast = _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast

class Handle_StepGeom_BSplineCurveWithKnots(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BSplineCurveWithKnots self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BSplineCurveWithKnots self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BSplineCurveWithKnots self, StepGeom_BSplineCurveWithKnots thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BSplineCurveWithKnots self, Handle_StepGeom_BSplineCurveWithKnots theHandle) -> Handle_StepGeom_BSplineCurveWithKnots
        assign(Handle_StepGeom_BSplineCurveWithKnots self, StepGeom_BSplineCurveWithKnots thePtr) -> Handle_StepGeom_BSplineCurveWithKnots
        assign(Handle_StepGeom_BSplineCurveWithKnots self, Handle_StepGeom_BSplineCurveWithKnots theHandle) -> Handle_StepGeom_BSplineCurveWithKnots

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BSplineCurveWithKnots self) -> StepGeom_BSplineCurveWithKnots

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BSplineCurveWithKnots self) -> StepGeom_BSplineCurveWithKnots

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BSplineCurveWithKnots self) -> StepGeom_BSplineCurveWithKnots

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BSplineCurveWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnots_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineCurveWithKnots

    def Init(self, *args):
        """
        Init(Handle_StepGeom_BSplineCurveWithKnots self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfInteger aKnotMultiplicities, Handle_TColStd_HArray1OfReal aKnots, StepGeom_KnotType const aKnotSpec)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aKnotMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_Init(self, *args)


    def SetKnotMultiplicities(self, *args):
        """
        SetKnotMultiplicities(Handle_StepGeom_BSplineCurveWithKnots self, Handle_TColStd_HArray1OfInteger aKnotMultiplicities)

        :type aKnotMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetKnotMultiplicities(self, *args)


    def KnotMultiplicities(self, *args):
        """
        KnotMultiplicities(Handle_StepGeom_BSplineCurveWithKnots self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_KnotMultiplicities(self, *args)


    def KnotMultiplicitiesValue(self, *args):
        """
        KnotMultiplicitiesValue(Handle_StepGeom_BSplineCurveWithKnots self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_KnotMultiplicitiesValue(self, *args)


    def NbKnotMultiplicities(self, *args):
        """
        NbKnotMultiplicities(Handle_StepGeom_BSplineCurveWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_NbKnotMultiplicities(self, *args)


    def SetKnots(self, *args):
        """
        SetKnots(Handle_StepGeom_BSplineCurveWithKnots self, Handle_TColStd_HArray1OfReal aKnots)

        :type aKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetKnots(self, *args)


    def Knots(self, *args):
        """
        Knots(Handle_StepGeom_BSplineCurveWithKnots self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_Knots(self, *args)


    def KnotsValue(self, *args):
        """
        KnotsValue(Handle_StepGeom_BSplineCurveWithKnots self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_KnotsValue(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_StepGeom_BSplineCurveWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_NbKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        SetKnotSpec(Handle_StepGeom_BSplineCurveWithKnots self, StepGeom_KnotType const aKnotSpec)

        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        KnotSpec(Handle_StepGeom_BSplineCurveWithKnots self) -> StepGeom_KnotType

        :rtype: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_KnotSpec(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BSplineCurveWithKnots self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_BSplineCurveWithKnots self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_BSplineCurveWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BSplineCurveWithKnots self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BSplineCurveWithKnots self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BSplineCurveWithKnots self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_BSplineCurveWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_BSplineCurveWithKnots self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_BSplineCurveWithKnots self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_BSplineCurveWithKnots self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_BSplineCurveWithKnots self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BSplineCurveWithKnots self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BSplineCurveWithKnots self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BSplineCurveWithKnots self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BSplineCurveWithKnots self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BSplineCurveWithKnots self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BSplineCurveWithKnots self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BSplineCurveWithKnots self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BSplineCurveWithKnots self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BSplineCurveWithKnots self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BSplineCurveWithKnots self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BSplineCurveWithKnots self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BSplineCurveWithKnots self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BSplineCurveWithKnots self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_DecrementRefCounter(self, *args)

Handle_StepGeom_BSplineCurveWithKnots_swigregister = _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_swigregister
Handle_StepGeom_BSplineCurveWithKnots_swigregister(Handle_StepGeom_BSplineCurveWithKnots)

def Handle_StepGeom_BSplineCurveWithKnots_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_DownCast(thing)
Handle_StepGeom_BSplineCurveWithKnots_DownCast = _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_DownCast

class StepGeom_Polyline(StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Polyline
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Polyline(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Polyline self) -> StepGeom_Polyline

        Returns a Polyline


        """
        this = _StepGeom.new_StepGeom_Polyline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Polyline self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray1OfCartesianPoint aPoints)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPoints: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.StepGeom_Polyline_Init(self, *args)


    def SetPoints(self, *args):
        """
        SetPoints(StepGeom_Polyline self, Handle_StepGeom_HArray1OfCartesianPoint aPoints)

        :type aPoints: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.StepGeom_Polyline_SetPoints(self, *args)


    def Points(self, *args):
        """
        Points(StepGeom_Polyline self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.StepGeom_Polyline_Points(self, *args)


    def PointsValue(self, *args):
        """
        PointsValue(StepGeom_Polyline self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Polyline_PointsValue(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(StepGeom_Polyline self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_Polyline_NbPoints(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Polyline_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Polyline_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Polyline_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Polyline
StepGeom_Polyline_swigregister = _StepGeom.StepGeom_Polyline_swigregister
StepGeom_Polyline_swigregister(StepGeom_Polyline)

def StepGeom_Polyline_get_type_name(*args):
    """
    StepGeom_Polyline_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Polyline_get_type_name(*args)

def StepGeom_Polyline_get_type_descriptor(*args):
    """
    StepGeom_Polyline_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Polyline_get_type_descriptor(*args)

class Handle_StepGeom_BezierCurveAndRationalBSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, StepGeom_BezierCurveAndRationalBSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_StepGeom_BezierCurveAndRationalBSplineCurve theHandle) -> Handle_StepGeom_BezierCurveAndRationalBSplineCurve
        assign(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, StepGeom_BezierCurveAndRationalBSplineCurve thePtr) -> Handle_StepGeom_BezierCurveAndRationalBSplineCurve
        assign(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_StepGeom_BezierCurveAndRationalBSplineCurve theHandle) -> Handle_StepGeom_BezierCurveAndRationalBSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> StepGeom_BezierCurveAndRationalBSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> StepGeom_BezierCurveAndRationalBSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> StepGeom_BezierCurveAndRationalBSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BezierCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BezierCurveAndRationalBSplineCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_StepGeom_BezierCurve aBezierCurve, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)
        Init(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_Init(self, *args)


    def SetBezierCurve(self, *args):
        """
        SetBezierCurve(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_StepGeom_BezierCurve aBezierCurve)

        :type aBezierCurve: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurve

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetBezierCurve(self, *args)


    def BezierCurve(self, *args):
        """
        BezierCurve(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Handle_StepGeom_BezierCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurve

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_BezierCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        SetRationalBSplineCurve(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)

        :type aRationalBSplineCurve: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        RationalBSplineCurve(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Handle_StepGeom_RationalBSplineCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BezierCurveAndRationalBSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_BezierCurveAndRationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_swigregister
Handle_StepGeom_BezierCurveAndRationalBSplineCurve_swigregister(Handle_StepGeom_BezierCurveAndRationalBSplineCurve)

def Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast(thing)
Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast

class StepGeom_EvaluatedDegeneratePcurve(StepGeom_DegeneratePcurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_EvaluatedDegeneratePcurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_EvaluatedDegeneratePcurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_EvaluatedDegeneratePcurve self) -> StepGeom_EvaluatedDegeneratePcurve

        Returns a EvaluatedDegeneratePcurve


        """
        this = _StepGeom.new_StepGeom_EvaluatedDegeneratePcurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_EvaluatedDegeneratePcurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve, Handle_StepGeom_CartesianPoint aEquivalentPoint)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation
        :type aEquivalentPoint: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_Init(self, *args)


    def SetEquivalentPoint(self, *args):
        """
        SetEquivalentPoint(StepGeom_EvaluatedDegeneratePcurve self, Handle_StepGeom_CartesianPoint aEquivalentPoint)

        :type aEquivalentPoint: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_SetEquivalentPoint(self, *args)


    def EquivalentPoint(self, *args):
        """
        EquivalentPoint(StepGeom_EvaluatedDegeneratePcurve self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_EquivalentPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_EvaluatedDegeneratePcurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_EvaluatedDegeneratePcurve
StepGeom_EvaluatedDegeneratePcurve_swigregister = _StepGeom.StepGeom_EvaluatedDegeneratePcurve_swigregister
StepGeom_EvaluatedDegeneratePcurve_swigregister(StepGeom_EvaluatedDegeneratePcurve)

def StepGeom_EvaluatedDegeneratePcurve_get_type_name(*args):
    """
    StepGeom_EvaluatedDegeneratePcurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_get_type_name(*args)

def StepGeom_EvaluatedDegeneratePcurve_get_type_descriptor(*args):
    """
    StepGeom_EvaluatedDegeneratePcurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_get_type_descriptor(*args)

class StepGeom_TrimmingMember(StepData.StepData_SelectReal):
    """
    For immediate members of TrimmingSelect, i.e. :
    ParameterValue (a Real)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_TrimmingMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_TrimmingMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_TrimmingMember self) -> StepGeom_TrimmingMember

        For immediate members of TrimmingSelect, i.e. :
        ParameterValue (a Real)
        """
        this = _StepGeom.new_StepGeom_TrimmingMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasName(self, *args):
        """
        HasName(StepGeom_TrimmingMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_TrimmingMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(StepGeom_TrimmingMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepGeom.StepGeom_TrimmingMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepGeom_TrimmingMember self, Standard_CString const name) -> Standard_Boolean

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_TrimmingMember_SetName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_TrimmingMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_TrimmingMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_TrimmingMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_TrimmingMember
StepGeom_TrimmingMember_swigregister = _StepGeom.StepGeom_TrimmingMember_swigregister
StepGeom_TrimmingMember_swigregister(StepGeom_TrimmingMember)

def StepGeom_TrimmingMember_get_type_name(*args):
    """
    StepGeom_TrimmingMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_TrimmingMember_get_type_name(*args)

def StepGeom_TrimmingMember_get_type_descriptor(*args):
    """
    StepGeom_TrimmingMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_TrimmingMember_get_type_descriptor(*args)

class NCollection_Array1_Handle_StepGeom_Curve(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepGeom_Curve self) -> NCollection_Array1< opencascade::handle< StepGeom_Curve > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepGeom_Curve self) -> NCollection_Array1< opencascade::handle< StepGeom_Curve > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepGeom_Curve self) -> NCollection_Array1< opencascade::handle< StepGeom_Curve > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepGeom_Curve self) -> NCollection_Array1< opencascade::handle< StepGeom_Curve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepGeom.new_NCollection_Array1_Handle_StepGeom_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepGeom_Curve self, Handle_StepGeom_Curve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepGeom_Curve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepGeom_Curve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepGeom_Curve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepGeom_Curve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepGeom_Curve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepGeom_Curve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepGeom_Curve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepGeom_Curve self, NCollection_Array1_Handle_StepGeom_Curve theOther) -> NCollection_Array1_Handle_StepGeom_Curve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepGeom_Curve self, NCollection_Array1_Handle_StepGeom_Curve theOther) -> NCollection_Array1_Handle_StepGeom_Curve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepGeom_Curve self, NCollection_Array1_Handle_StepGeom_Curve theOther) -> NCollection_Array1_Handle_StepGeom_Curve
        assign(NCollection_Array1_Handle_StepGeom_Curve self, NCollection_Array1_Handle_StepGeom_Curve theOther) -> NCollection_Array1_Handle_StepGeom_Curve

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepGeom_Curve self) -> Handle_StepGeom_Curve

        @return first element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepGeom_Curve self) -> Handle_StepGeom_Curve

        @return last element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepGeom_Curve self, Standard_Integer const theIndex) -> Handle_StepGeom_Curve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_Curve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepGeom_Curve self, Standard_Integer const theIndex, Handle_StepGeom_Curve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepGeom_Curve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_Resize(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array1_Handle_StepGeom_Curve
NCollection_Array1_Handle_StepGeom_Curve_swigregister = _StepGeom.NCollection_Array1_Handle_StepGeom_Curve_swigregister
NCollection_Array1_Handle_StepGeom_Curve_swigregister(NCollection_Array1_Handle_StepGeom_Curve)


try:
	StepGeom_Array1OfCurve = NCollection_Array1_Handle_StepGeom_Curve
except NameError:
	pass # does not exist, probably ignored

class StepGeom_HArray1OfBoundaryCurve(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray1OfBoundaryCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray1OfBoundaryCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray1OfBoundaryCurve self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepGeom_HArray1OfBoundaryCurve
        __init__(StepGeom_HArray1OfBoundaryCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepGeom_BoundaryCurve theValue) -> StepGeom_HArray1OfBoundaryCurve
        __init__(StepGeom_HArray1OfBoundaryCurve self, NCollection_Array1_Handle_StepGeom_BoundaryCurve theOther) -> StepGeom_HArray1OfBoundaryCurve

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array1OfBoundaryCurve

        """
        this = _StepGeom.new_StepGeom_HArray1OfBoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfBoundaryCurve

        """
        res = _StepGeom.StepGeom_HArray1OfBoundaryCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepGeom_HArray1OfBoundaryCurve self) -> NCollection_Array1_Handle_StepGeom_BoundaryCurve

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfBoundaryCurve

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray1OfBoundaryCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfBoundaryCurve
StepGeom_HArray1OfBoundaryCurve_swigregister = _StepGeom.StepGeom_HArray1OfBoundaryCurve_swigregister
StepGeom_HArray1OfBoundaryCurve_swigregister(StepGeom_HArray1OfBoundaryCurve)

def StepGeom_HArray1OfBoundaryCurve_get_type_name(*args):
    """
    StepGeom_HArray1OfBoundaryCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray1OfBoundaryCurve_get_type_name(*args)

def StepGeom_HArray1OfBoundaryCurve_get_type_descriptor(*args):
    """
    StepGeom_HArray1OfBoundaryCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray1OfBoundaryCurve_get_type_descriptor(*args)

class Handle_StepGeom_CompositeCurveSegment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_CompositeCurveSegment self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_CompositeCurveSegment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_CompositeCurveSegment self, StepGeom_CompositeCurveSegment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_CompositeCurveSegment self, Handle_StepGeom_CompositeCurveSegment theHandle) -> Handle_StepGeom_CompositeCurveSegment
        assign(Handle_StepGeom_CompositeCurveSegment self, StepGeom_CompositeCurveSegment thePtr) -> Handle_StepGeom_CompositeCurveSegment
        assign(Handle_StepGeom_CompositeCurveSegment self, Handle_StepGeom_CompositeCurveSegment theHandle) -> Handle_StepGeom_CompositeCurveSegment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_CompositeCurveSegment self) -> StepGeom_CompositeCurveSegment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_CompositeCurveSegment self) -> StepGeom_CompositeCurveSegment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_CompositeCurveSegment self) -> StepGeom_CompositeCurveSegment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_CompositeCurveSegment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_CompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CompositeCurveSegment_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CompositeCurveSegment

    def Init(self, *args):
        """
        Init(Handle_StepGeom_CompositeCurveSegment self, StepGeom_TransitionCode const aTransition, Standard_Boolean const aSameSense, Handle_StepGeom_Curve aParentCurve)

        :type aTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode
        :type aSameSense: bool
        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_Init(self, *args)


    def SetTransition(self, *args):
        """
        SetTransition(Handle_StepGeom_CompositeCurveSegment self, StepGeom_TransitionCode const aTransition)

        :type aTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_SetTransition(self, *args)


    def Transition(self, *args):
        """
        Transition(Handle_StepGeom_CompositeCurveSegment self) -> StepGeom_TransitionCode

        :rtype: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_Transition(self, *args)


    def SetSameSense(self, *args):
        """
        SetSameSense(Handle_StepGeom_CompositeCurveSegment self, Standard_Boolean const aSameSense)

        :type aSameSense: bool

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_SetSameSense(self, *args)


    def SameSense(self, *args):
        """
        SameSense(Handle_StepGeom_CompositeCurveSegment self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_SameSense(self, *args)


    def SetParentCurve(self, *args):
        """
        SetParentCurve(Handle_StepGeom_CompositeCurveSegment self, Handle_StepGeom_Curve aParentCurve)

        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_SetParentCurve(self, *args)


    def ParentCurve(self, *args):
        """
        ParentCurve(Handle_StepGeom_CompositeCurveSegment self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_ParentCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_CompositeCurveSegment self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CompositeCurveSegment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CompositeCurveSegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_CompositeCurveSegment self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_CompositeCurveSegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_CompositeCurveSegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_CompositeCurveSegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_CompositeCurveSegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_CompositeCurveSegment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_CompositeCurveSegment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_CompositeCurveSegment self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_CompositeCurveSegment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CompositeCurveSegment_DecrementRefCounter(self, *args)

Handle_StepGeom_CompositeCurveSegment_swigregister = _StepGeom.Handle_StepGeom_CompositeCurveSegment_swigregister
Handle_StepGeom_CompositeCurveSegment_swigregister(Handle_StepGeom_CompositeCurveSegment)

def Handle_StepGeom_CompositeCurveSegment_DownCast(thing):
    return _StepGeom.Handle_StepGeom_CompositeCurveSegment_DownCast(thing)
Handle_StepGeom_CompositeCurveSegment_DownCast = _StepGeom.Handle_StepGeom_CompositeCurveSegment_DownCast

class Handle_StepGeom_UniformCurveAndRationalBSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, StepGeom_UniformCurveAndRationalBSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_StepGeom_UniformCurveAndRationalBSplineCurve theHandle) -> Handle_StepGeom_UniformCurveAndRationalBSplineCurve
        assign(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, StepGeom_UniformCurveAndRationalBSplineCurve thePtr) -> Handle_StepGeom_UniformCurveAndRationalBSplineCurve
        assign(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_StepGeom_UniformCurveAndRationalBSplineCurve theHandle) -> Handle_StepGeom_UniformCurveAndRationalBSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> StepGeom_UniformCurveAndRationalBSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> StepGeom_UniformCurveAndRationalBSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> StepGeom_UniformCurveAndRationalBSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_UniformCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_UniformCurveAndRationalBSplineCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_StepGeom_UniformCurve aUniformCurve, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)
        Init(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_Init(self, *args)


    def SetUniformCurve(self, *args):
        """
        SetUniformCurve(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_StepGeom_UniformCurve aUniformCurve)

        :type aUniformCurve: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurve

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetUniformCurve(self, *args)


    def UniformCurve(self, *args):
        """
        UniformCurve(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_UniformCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurve

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_UniformCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        SetRationalBSplineCurve(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)

        :type aRationalBSplineCurve: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        RationalBSplineCurve(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_RationalBSplineCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_UniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_UniformCurveAndRationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_swigregister
Handle_StepGeom_UniformCurveAndRationalBSplineCurve_swigregister(Handle_StepGeom_UniformCurveAndRationalBSplineCurve)

def Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast(thing)
Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast

class Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, StepGeom_QuasiUniformCurveAndRationalBSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve theHandle) -> Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve
        assign(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, StepGeom_QuasiUniformCurveAndRationalBSplineCurve thePtr) -> Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve
        assign(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve theHandle) -> Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> StepGeom_QuasiUniformCurveAndRationalBSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> StepGeom_QuasiUniformCurveAndRationalBSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> StepGeom_QuasiUniformCurveAndRationalBSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_StepGeom_QuasiUniformCurve aQuasiUniformCurve, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)
        Init(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Init(self, *args)


    def SetQuasiUniformCurve(self, *args):
        """
        SetQuasiUniformCurve(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_QuasiUniformCurve aQuasiUniformCurve)

        :type aQuasiUniformCurve: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurve

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetQuasiUniformCurve(self, *args)


    def QuasiUniformCurve(self, *args):
        """
        QuasiUniformCurve(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_QuasiUniformCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurve

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_QuasiUniformCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        SetRationalBSplineCurve(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)

        :type aRationalBSplineCurve: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        RationalBSplineCurve(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_RationalBSplineCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister
Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve)

def Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast(thing)
Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast

class Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface theHandle) -> Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface
        assign(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface thePtr) -> Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface
        assign(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface theHandle) -> Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_StepGeom_BSplineSurfaceWithKnots aBSplineSurfaceWithKnots, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)
        Init(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfInteger aUMultiplicities, Handle_TColStd_HArray1OfInteger aVMultiplicities, Handle_TColStd_HArray1OfReal aUKnots, Handle_TColStd_HArray1OfReal aVKnots, StepGeom_KnotType const aKnotSpec, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aUMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aVMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aUKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aVKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_Init(self, *args)


    def SetBSplineSurfaceWithKnots(self, *args):
        """
        SetBSplineSurfaceWithKnots(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_BSplineSurfaceWithKnots aBSplineSurfaceWithKnots)

        :type aBSplineSurfaceWithKnots: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetBSplineSurfaceWithKnots(self, *args)


    def BSplineSurfaceWithKnots(self, *args):
        """
        BSplineSurfaceWithKnots(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_StepGeom_BSplineSurfaceWithKnots

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_BSplineSurfaceWithKnots(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        SetRationalBSplineSurface(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)

        :type aRationalBSplineSurface: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        RationalBSplineSurface(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_StepGeom_RationalBSplineSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetUMultiplicities(self, *args):
        """
        SetUMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray1OfInteger aUMultiplicities)

        :type aUMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUMultiplicities(self, *args)


    def UMultiplicities(self, *args):
        """
        UMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UMultiplicities(self, *args)


    def UMultiplicitiesValue(self, *args):
        """
        UMultiplicitiesValue(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UMultiplicitiesValue(self, *args)


    def NbUMultiplicities(self, *args):
        """
        NbUMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbUMultiplicities(self, *args)


    def SetVMultiplicities(self, *args):
        """
        SetVMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray1OfInteger aVMultiplicities)

        :type aVMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVMultiplicities(self, *args)


    def VMultiplicities(self, *args):
        """
        VMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VMultiplicities(self, *args)


    def VMultiplicitiesValue(self, *args):
        """
        VMultiplicitiesValue(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VMultiplicitiesValue(self, *args)


    def NbVMultiplicities(self, *args):
        """
        NbVMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbVMultiplicities(self, *args)


    def SetUKnots(self, *args):
        """
        SetUKnots(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray1OfReal aUKnots)

        :type aUKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUKnots(self, *args)


    def UKnots(self, *args):
        """
        UKnots(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UKnots(self, *args)


    def UKnotsValue(self, *args):
        """
        UKnotsValue(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UKnotsValue(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbUKnots(self, *args)


    def SetVKnots(self, *args):
        """
        SetVKnots(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray1OfReal aVKnots)

        :type aVKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVKnots(self, *args)


    def VKnots(self, *args):
        """
        VKnots(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VKnots(self, *args)


    def VKnotsValue(self, *args):
        """
        VKnotsValue(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VKnotsValue(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbVKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        SetKnotSpec(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepGeom_KnotType const aKnotSpec)

        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        KnotSpec(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepGeom_KnotType

        :rtype: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_KnotSpec(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister
Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)

def Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast(thing)
Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast

class StepGeom_ConicalSurface(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_ConicalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_ConicalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_ConicalSurface self) -> StepGeom_ConicalSurface

        Returns a ConicalSurface


        """
        this = _StepGeom.new_StepGeom_ConicalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_ConicalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aRadius, Standard_Real const aSemiAngle)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aRadius: float
        :type aSemiAngle: float

        """
        return _StepGeom.StepGeom_ConicalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(StepGeom_ConicalSurface self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _StepGeom.StepGeom_ConicalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(StepGeom_ConicalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_ConicalSurface_Radius(self, *args)


    def SetSemiAngle(self, *args):
        """
        SetSemiAngle(StepGeom_ConicalSurface self, Standard_Real const aSemiAngle)

        :type aSemiAngle: float

        """
        return _StepGeom.StepGeom_ConicalSurface_SetSemiAngle(self, *args)


    def SemiAngle(self, *args):
        """
        SemiAngle(StepGeom_ConicalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_ConicalSurface_SemiAngle(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_ConicalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_ConicalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_ConicalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_ConicalSurface
StepGeom_ConicalSurface_swigregister = _StepGeom.StepGeom_ConicalSurface_swigregister
StepGeom_ConicalSurface_swigregister(StepGeom_ConicalSurface)

def StepGeom_ConicalSurface_get_type_name(*args):
    """
    StepGeom_ConicalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_ConicalSurface_get_type_name(*args)

def StepGeom_ConicalSurface_get_type_descriptor(*args):
    """
    StepGeom_ConicalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_ConicalSurface_get_type_descriptor(*args)

class StepGeom_HArray1OfCurve(NCollection_Array1_Handle_StepGeom_Curve, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray1OfCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray1OfCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray1OfCurve self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepGeom_HArray1OfCurve
        __init__(StepGeom_HArray1OfCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepGeom_Curve theValue) -> StepGeom_HArray1OfCurve
        __init__(StepGeom_HArray1OfCurve self, NCollection_Array1_Handle_StepGeom_Curve theOther) -> StepGeom_HArray1OfCurve

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array1OfCurve

        """
        this = _StepGeom.new_StepGeom_HArray1OfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCurve

        """
        res = _StepGeom.StepGeom_HArray1OfCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepGeom_HArray1OfCurve self) -> NCollection_Array1_Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCurve

        """
        return _StepGeom.StepGeom_HArray1OfCurve_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray1OfCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray1OfCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray1OfCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfCurve
StepGeom_HArray1OfCurve_swigregister = _StepGeom.StepGeom_HArray1OfCurve_swigregister
StepGeom_HArray1OfCurve_swigregister(StepGeom_HArray1OfCurve)

def StepGeom_HArray1OfCurve_get_type_name(*args):
    """
    StepGeom_HArray1OfCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray1OfCurve_get_type_name(*args)

def StepGeom_HArray1OfCurve_get_type_descriptor(*args):
    """
    StepGeom_HArray1OfCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray1OfCurve_get_type_descriptor(*args)

class StepGeom_SurfacePatch(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SurfacePatch
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SurfacePatch(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SurfacePatch self) -> StepGeom_SurfacePatch

        Returns a SurfacePatch


        """
        this = _StepGeom.new_StepGeom_SurfacePatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_SurfacePatch self, Handle_StepGeom_BoundedSurface aParentSurface, StepGeom_TransitionCode const aUTransition, StepGeom_TransitionCode const aVTransition, Standard_Boolean const aUSense, Standard_Boolean const aVSense)

        :type aParentSurface: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface
        :type aUTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode
        :type aVTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode
        :type aUSense: bool
        :type aVSense: bool

        """
        return _StepGeom.StepGeom_SurfacePatch_Init(self, *args)


    def SetParentSurface(self, *args):
        """
        SetParentSurface(StepGeom_SurfacePatch self, Handle_StepGeom_BoundedSurface aParentSurface)

        :type aParentSurface: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface

        """
        return _StepGeom.StepGeom_SurfacePatch_SetParentSurface(self, *args)


    def ParentSurface(self, *args):
        """
        ParentSurface(StepGeom_SurfacePatch self) -> Handle_StepGeom_BoundedSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface

        """
        return _StepGeom.StepGeom_SurfacePatch_ParentSurface(self, *args)


    def SetUTransition(self, *args):
        """
        SetUTransition(StepGeom_SurfacePatch self, StepGeom_TransitionCode const aUTransition)

        :type aUTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_SurfacePatch_SetUTransition(self, *args)


    def UTransition(self, *args):
        """
        UTransition(StepGeom_SurfacePatch self) -> StepGeom_TransitionCode

        :rtype: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_SurfacePatch_UTransition(self, *args)


    def SetVTransition(self, *args):
        """
        SetVTransition(StepGeom_SurfacePatch self, StepGeom_TransitionCode const aVTransition)

        :type aVTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_SurfacePatch_SetVTransition(self, *args)


    def VTransition(self, *args):
        """
        VTransition(StepGeom_SurfacePatch self) -> StepGeom_TransitionCode

        :rtype: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_SurfacePatch_VTransition(self, *args)


    def SetUSense(self, *args):
        """
        SetUSense(StepGeom_SurfacePatch self, Standard_Boolean const aUSense)

        :type aUSense: bool

        """
        return _StepGeom.StepGeom_SurfacePatch_SetUSense(self, *args)


    def USense(self, *args):
        """
        USense(StepGeom_SurfacePatch self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_SurfacePatch_USense(self, *args)


    def SetVSense(self, *args):
        """
        SetVSense(StepGeom_SurfacePatch self, Standard_Boolean const aVSense)

        :type aVSense: bool

        """
        return _StepGeom.StepGeom_SurfacePatch_SetVSense(self, *args)


    def VSense(self, *args):
        """
        VSense(StepGeom_SurfacePatch self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_SurfacePatch_VSense(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SurfacePatch_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SurfacePatch_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SurfacePatch_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfacePatch
StepGeom_SurfacePatch_swigregister = _StepGeom.StepGeom_SurfacePatch_swigregister
StepGeom_SurfacePatch_swigregister(StepGeom_SurfacePatch)

def StepGeom_SurfacePatch_get_type_name(*args):
    """
    StepGeom_SurfacePatch_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SurfacePatch_get_type_name(*args)

def StepGeom_SurfacePatch_get_type_descriptor(*args):
    """
    StepGeom_SurfacePatch_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SurfacePatch_get_type_descriptor(*args)

class StepGeom_SurfaceReplica(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SurfaceReplica
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SurfaceReplica(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SurfaceReplica self) -> StepGeom_SurfaceReplica

        Returns a SurfaceReplica


        """
        this = _StepGeom.new_StepGeom_SurfaceReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_SurfaceReplica self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aParentSurface, Handle_StepGeom_CartesianTransformationOperator3d aTransformation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aParentSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _StepGeom.StepGeom_SurfaceReplica_Init(self, *args)


    def SetParentSurface(self, *args):
        """
        SetParentSurface(StepGeom_SurfaceReplica self, Handle_StepGeom_Surface aParentSurface)

        :type aParentSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_SurfaceReplica_SetParentSurface(self, *args)


    def ParentSurface(self, *args):
        """
        ParentSurface(StepGeom_SurfaceReplica self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_SurfaceReplica_ParentSurface(self, *args)


    def SetTransformation(self, *args):
        """
        SetTransformation(StepGeom_SurfaceReplica self, Handle_StepGeom_CartesianTransformationOperator3d aTransformation)

        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _StepGeom.StepGeom_SurfaceReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        Transformation(StepGeom_SurfaceReplica self) -> Handle_StepGeom_CartesianTransformationOperator3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _StepGeom.StepGeom_SurfaceReplica_Transformation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SurfaceReplica_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SurfaceReplica_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SurfaceReplica_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceReplica
StepGeom_SurfaceReplica_swigregister = _StepGeom.StepGeom_SurfaceReplica_swigregister
StepGeom_SurfaceReplica_swigregister(StepGeom_SurfaceReplica)

def StepGeom_SurfaceReplica_get_type_name(*args):
    """
    StepGeom_SurfaceReplica_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SurfaceReplica_get_type_name(*args)

def StepGeom_SurfaceReplica_get_type_descriptor(*args):
    """
    StepGeom_SurfaceReplica_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SurfaceReplica_get_type_descriptor(*args)

class Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, StepGeom_UniformSurfaceAndRationalBSplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface theHandle) -> Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface
        assign(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, StepGeom_UniformSurfaceAndRationalBSplineSurface thePtr) -> Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface
        assign(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface theHandle) -> Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> StepGeom_UniformSurfaceAndRationalBSplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> StepGeom_UniformSurfaceAndRationalBSplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> StepGeom_UniformSurfaceAndRationalBSplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_StepGeom_UniformSurface aUniformSurface, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)
        Init(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetUniformSurface(self, *args):
        """
        SetUniformSurface(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_UniformSurface aUniformSurface)

        :type aUniformSurface: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurface

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetUniformSurface(self, *args)


    def UniformSurface(self, *args):
        """
        UniformSurface(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_UniformSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurface

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_UniformSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        SetRationalBSplineSurface(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)

        :type aRationalBSplineSurface: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        RationalBSplineSurface(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_RationalBSplineSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister
Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface)

def Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast(thing)
Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast

class Handle_StepGeom_RectangularTrimmedSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_RectangularTrimmedSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_RectangularTrimmedSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_RectangularTrimmedSurface self, StepGeom_RectangularTrimmedSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_RectangularTrimmedSurface self, Handle_StepGeom_RectangularTrimmedSurface theHandle) -> Handle_StepGeom_RectangularTrimmedSurface
        assign(Handle_StepGeom_RectangularTrimmedSurface self, StepGeom_RectangularTrimmedSurface thePtr) -> Handle_StepGeom_RectangularTrimmedSurface
        assign(Handle_StepGeom_RectangularTrimmedSurface self, Handle_StepGeom_RectangularTrimmedSurface theHandle) -> Handle_StepGeom_RectangularTrimmedSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_RectangularTrimmedSurface self) -> StepGeom_RectangularTrimmedSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_RectangularTrimmedSurface self) -> StepGeom_RectangularTrimmedSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_RectangularTrimmedSurface self) -> StepGeom_RectangularTrimmedSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_RectangularTrimmedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_RectangularTrimmedSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_RectangularTrimmedSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_RectangularTrimmedSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Standard_Real const aU1, Standard_Real const aU2, Standard_Real const aV1, Standard_Real const aV2, Standard_Boolean const aUsense, Standard_Boolean const aVsense)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aU1: float
        :type aU2: float
        :type aV1: float
        :type aV2: float
        :type aUsense: bool
        :type aVsense: bool

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(Handle_StepGeom_RectangularTrimmedSurface self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_StepGeom_RectangularTrimmedSurface self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_BasisSurface(self, *args)


    def SetU1(self, *args):
        """
        SetU1(Handle_StepGeom_RectangularTrimmedSurface self, Standard_Real const aU1)

        :type aU1: float

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_SetU1(self, *args)


    def U1(self, *args):
        """
        U1(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_U1(self, *args)


    def SetU2(self, *args):
        """
        SetU2(Handle_StepGeom_RectangularTrimmedSurface self, Standard_Real const aU2)

        :type aU2: float

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_SetU2(self, *args)


    def U2(self, *args):
        """
        U2(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_U2(self, *args)


    def SetV1(self, *args):
        """
        SetV1(Handle_StepGeom_RectangularTrimmedSurface self, Standard_Real const aV1)

        :type aV1: float

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_SetV1(self, *args)


    def V1(self, *args):
        """
        V1(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_V1(self, *args)


    def SetV2(self, *args):
        """
        SetV2(Handle_StepGeom_RectangularTrimmedSurface self, Standard_Real const aV2)

        :type aV2: float

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_SetV2(self, *args)


    def V2(self, *args):
        """
        V2(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_V2(self, *args)


    def SetUsense(self, *args):
        """
        SetUsense(Handle_StepGeom_RectangularTrimmedSurface self, Standard_Boolean const aUsense)

        :type aUsense: bool

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_SetUsense(self, *args)


    def Usense(self, *args):
        """
        Usense(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_Usense(self, *args)


    def SetVsense(self, *args):
        """
        SetVsense(Handle_StepGeom_RectangularTrimmedSurface self, Standard_Boolean const aVsense)

        :type aVsense: bool

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_SetVsense(self, *args)


    def Vsense(self, *args):
        """
        Vsense(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_Vsense(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_RectangularTrimmedSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_RectangularTrimmedSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_RectangularTrimmedSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_RectangularTrimmedSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_RectangularTrimmedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_RectangularTrimmedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_RectangularTrimmedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_RectangularTrimmedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_RectangularTrimmedSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_RectangularTrimmedSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_RectangularTrimmedSurface_swigregister = _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_swigregister
Handle_StepGeom_RectangularTrimmedSurface_swigregister(Handle_StepGeom_RectangularTrimmedSurface)

def Handle_StepGeom_RectangularTrimmedSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_DownCast(thing)
Handle_StepGeom_RectangularTrimmedSurface_DownCast = _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_DownCast

class Handle_StepGeom_PointOnCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_PointOnCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_PointOnCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_PointOnCurve self, StepGeom_PointOnCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_PointOnCurve self, Handle_StepGeom_PointOnCurve theHandle) -> Handle_StepGeom_PointOnCurve
        assign(Handle_StepGeom_PointOnCurve self, StepGeom_PointOnCurve thePtr) -> Handle_StepGeom_PointOnCurve
        assign(Handle_StepGeom_PointOnCurve self, Handle_StepGeom_PointOnCurve theHandle) -> Handle_StepGeom_PointOnCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_PointOnCurve self) -> StepGeom_PointOnCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_PointOnCurve self) -> StepGeom_PointOnCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_PointOnCurve self) -> StepGeom_PointOnCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_PointOnCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_PointOnCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_PointOnCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_PointOnCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_PointOnCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_PointOnCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aBasisCurve, Standard_Real const aPointParameter)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aPointParameter: float

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        SetBasisCurve(Handle_StepGeom_PointOnCurve self, Handle_StepGeom_Curve aBasisCurve)

        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_StepGeom_PointOnCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_BasisCurve(self, *args)


    def SetPointParameter(self, *args):
        """
        SetPointParameter(Handle_StepGeom_PointOnCurve self, Standard_Real const aPointParameter)

        :type aPointParameter: float

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_SetPointParameter(self, *args)


    def PointParameter(self, *args):
        """
        PointParameter(Handle_StepGeom_PointOnCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_PointParameter(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_PointOnCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_PointOnCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_PointOnCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_PointOnCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_PointOnCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_PointOnCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_PointOnCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_PointOnCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_PointOnCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_PointOnCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_PointOnCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_PointOnCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_PointOnCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_PointOnCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_PointOnCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_PointOnCurve_swigregister = _StepGeom.Handle_StepGeom_PointOnCurve_swigregister
Handle_StepGeom_PointOnCurve_swigregister(Handle_StepGeom_PointOnCurve)

def Handle_StepGeom_PointOnCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_PointOnCurve_DownCast(thing)
Handle_StepGeom_PointOnCurve_DownCast = _StepGeom.Handle_StepGeom_PointOnCurve_DownCast

class StepGeom_Direction(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Direction
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Direction(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Direction self) -> StepGeom_Direction

        Returns a Direction


        """
        this = _StepGeom.new_StepGeom_Direction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Direction self, Handle_TCollection_HAsciiString aName, Handle_TColStd_HArray1OfReal aDirectionRatios)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDirectionRatios: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_Direction_Init(self, *args)


    def SetDirectionRatios(self, *args):
        """
        SetDirectionRatios(StepGeom_Direction self, Handle_TColStd_HArray1OfReal aDirectionRatios)

        :type aDirectionRatios: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_Direction_SetDirectionRatios(self, *args)


    def DirectionRatios(self, *args):
        """
        DirectionRatios(StepGeom_Direction self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_Direction_DirectionRatios(self, *args)


    def DirectionRatiosValue(self, *args):
        """
        DirectionRatiosValue(StepGeom_Direction self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_Direction_DirectionRatiosValue(self, *args)


    def NbDirectionRatios(self, *args):
        """
        NbDirectionRatios(StepGeom_Direction self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_Direction_NbDirectionRatios(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Direction_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Direction_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Direction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Direction
StepGeom_Direction_swigregister = _StepGeom.StepGeom_Direction_swigregister
StepGeom_Direction_swigregister(StepGeom_Direction)

def StepGeom_Direction_get_type_name(*args):
    """
    StepGeom_Direction_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Direction_get_type_name(*args)

def StepGeom_Direction_get_type_descriptor(*args):
    """
    StepGeom_Direction_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Direction_get_type_descriptor(*args)

class StepGeom_RectangularCompositeSurface(StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_RectangularCompositeSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_RectangularCompositeSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_RectangularCompositeSurface self) -> StepGeom_RectangularCompositeSurface

        Returns a RectangularCompositeSurface


        """
        this = _StepGeom.new_StepGeom_RectangularCompositeSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_RectangularCompositeSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray2OfSurfacePatch aSegments)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfSurfacePatch

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_Init(self, *args)


    def SetSegments(self, *args):
        """
        SetSegments(StepGeom_RectangularCompositeSurface self, Handle_StepGeom_HArray2OfSurfacePatch aSegments)

        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfSurfacePatch

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_SetSegments(self, *args)


    def Segments(self, *args):
        """
        Segments(StepGeom_RectangularCompositeSurface self) -> Handle_StepGeom_HArray2OfSurfacePatch

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfSurfacePatch

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        SegmentsValue(StepGeom_RectangularCompositeSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_SurfacePatch

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_SurfacePatch

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_SegmentsValue(self, *args)


    def NbSegmentsI(self, *args):
        """
        NbSegmentsI(StepGeom_RectangularCompositeSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_NbSegmentsI(self, *args)


    def NbSegmentsJ(self, *args):
        """
        NbSegmentsJ(StepGeom_RectangularCompositeSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_NbSegmentsJ(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_RectangularCompositeSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_RectangularCompositeSurface
StepGeom_RectangularCompositeSurface_swigregister = _StepGeom.StepGeom_RectangularCompositeSurface_swigregister
StepGeom_RectangularCompositeSurface_swigregister(StepGeom_RectangularCompositeSurface)

def StepGeom_RectangularCompositeSurface_get_type_name(*args):
    """
    StepGeom_RectangularCompositeSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_RectangularCompositeSurface_get_type_name(*args)

def StepGeom_RectangularCompositeSurface_get_type_descriptor(*args):
    """
    StepGeom_RectangularCompositeSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_RectangularCompositeSurface_get_type_descriptor(*args)

class Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve theHandle) -> Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve
        assign(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve thePtr) -> Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve
        assign(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve theHandle) -> Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_StepGeom_BSplineCurveWithKnots aBSplineCurveWithKnots, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)
        Init(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfInteger aKnotMultiplicities, Handle_TColStd_HArray1OfReal aKnots, StepGeom_KnotType const aKnotSpec, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aKnotMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Init(self, *args)


    def SetBSplineCurveWithKnots(self, *args):
        """
        SetBSplineCurveWithKnots(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_BSplineCurveWithKnots aBSplineCurveWithKnots)

        :type aBSplineCurveWithKnots: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetBSplineCurveWithKnots(self, *args)


    def BSplineCurveWithKnots(self, *args):
        """
        BSplineCurveWithKnots(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_StepGeom_BSplineCurveWithKnots

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_BSplineCurveWithKnots(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        SetRationalBSplineCurve(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve aRationalBSplineCurve)

        :type aRationalBSplineCurve: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        RationalBSplineCurve(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_StepGeom_RationalBSplineCurve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetKnotMultiplicities(self, *args):
        """
        SetKnotMultiplicities(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TColStd_HArray1OfInteger aKnotMultiplicities)

        :type aKnotMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnotMultiplicities(self, *args)


    def KnotMultiplicities(self, *args):
        """
        KnotMultiplicities(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotMultiplicities(self, *args)


    def KnotMultiplicitiesValue(self, *args):
        """
        KnotMultiplicitiesValue(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotMultiplicitiesValue(self, *args)


    def NbKnotMultiplicities(self, *args):
        """
        NbKnotMultiplicities(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbKnotMultiplicities(self, *args)


    def SetKnots(self, *args):
        """
        SetKnots(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aKnots)

        :type aKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnots(self, *args)


    def Knots(self, *args):
        """
        Knots(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Knots(self, *args)


    def KnotsValue(self, *args):
        """
        KnotsValue(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotsValue(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        SetKnotSpec(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, StepGeom_KnotType const aKnotSpec)

        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        KnotSpec(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepGeom_KnotType

        :rtype: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotSpec(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TColStd_HArray1OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        NbWeightsData(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbWeightsData(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister
Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)

def Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast(thing)
Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast

class Handle_StepGeom_GeometricRepresentationContext(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_GeometricRepresentationContext self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_GeometricRepresentationContext self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_GeometricRepresentationContext self, StepGeom_GeometricRepresentationContext thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_GeometricRepresentationContext self, Handle_StepGeom_GeometricRepresentationContext theHandle) -> Handle_StepGeom_GeometricRepresentationContext
        assign(Handle_StepGeom_GeometricRepresentationContext self, StepGeom_GeometricRepresentationContext thePtr) -> Handle_StepGeom_GeometricRepresentationContext
        assign(Handle_StepGeom_GeometricRepresentationContext self, Handle_StepGeom_GeometricRepresentationContext theHandle) -> Handle_StepGeom_GeometricRepresentationContext

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_GeometricRepresentationContext self) -> StepGeom_GeometricRepresentationContext

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_GeometricRepresentationContext self) -> StepGeom_GeometricRepresentationContext

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_GeometricRepresentationContext self) -> StepGeom_GeometricRepresentationContext

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_GeometricRepresentationContext___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_GeometricRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContext_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeometricRepresentationContext

    def Init(self, *args):
        """
        Init(Handle_StepGeom_GeometricRepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Standard_Integer const aCoordinateSpaceDimension)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_Init(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        SetCoordinateSpaceDimension(Handle_StepGeom_GeometricRepresentationContext self, Standard_Integer const aCoordinateSpaceDimension)

        :type aCoordinateSpaceDimension: int

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        CoordinateSpaceDimension(Handle_StepGeom_GeometricRepresentationContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_CoordinateSpaceDimension(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_GeometricRepresentationContext self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeometricRepresentationContext_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeometricRepresentationContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetContextIdentifier(self, *args):
        """
        SetContextIdentifier(Handle_StepGeom_GeometricRepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_SetContextIdentifier(self, *args)


    def ContextIdentifier(self, *args):
        """
        ContextIdentifier(Handle_StepGeom_GeometricRepresentationContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_ContextIdentifier(self, *args)


    def SetContextType(self, *args):
        """
        SetContextType(Handle_StepGeom_GeometricRepresentationContext self, Handle_TCollection_HAsciiString aContextType)

        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_SetContextType(self, *args)


    def ContextType(self, *args):
        """
        ContextType(Handle_StepGeom_GeometricRepresentationContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_ContextType(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_GeometricRepresentationContext self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_GeometricRepresentationContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_GeometricRepresentationContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_GeometricRepresentationContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_GeometricRepresentationContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_GeometricRepresentationContext self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_GeometricRepresentationContext self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_GeometricRepresentationContext self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_GeometricRepresentationContext self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_DecrementRefCounter(self, *args)

Handle_StepGeom_GeometricRepresentationContext_swigregister = _StepGeom.Handle_StepGeom_GeometricRepresentationContext_swigregister
Handle_StepGeom_GeometricRepresentationContext_swigregister(Handle_StepGeom_GeometricRepresentationContext)

def Handle_StepGeom_GeometricRepresentationContext_DownCast(thing):
    return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_DownCast(thing)
Handle_StepGeom_GeometricRepresentationContext_DownCast = _StepGeom.Handle_StepGeom_GeometricRepresentationContext_DownCast

class StepGeom_BSplineSurfaceWithKnots(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_BSplineSurfaceWithKnots
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_BSplineSurfaceWithKnots(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_BSplineSurfaceWithKnots self) -> StepGeom_BSplineSurfaceWithKnots

        Returns a BSplineSurfaceWithKnots


        """
        this = _StepGeom.new_StepGeom_BSplineSurfaceWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_BSplineSurfaceWithKnots self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfInteger aUMultiplicities, Handle_TColStd_HArray1OfInteger aVMultiplicities, Handle_TColStd_HArray1OfReal aUKnots, Handle_TColStd_HArray1OfReal aVKnots, StepGeom_KnotType const aKnotSpec)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aUMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aVMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aUKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aVKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_Init(self, *args)


    def SetUMultiplicities(self, *args):
        """
        SetUMultiplicities(StepGeom_BSplineSurfaceWithKnots self, Handle_TColStd_HArray1OfInteger aUMultiplicities)

        :type aUMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetUMultiplicities(self, *args)


    def UMultiplicities(self, *args):
        """
        UMultiplicities(StepGeom_BSplineSurfaceWithKnots self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_UMultiplicities(self, *args)


    def UMultiplicitiesValue(self, *args):
        """
        UMultiplicitiesValue(StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_UMultiplicitiesValue(self, *args)


    def NbUMultiplicities(self, *args):
        """
        NbUMultiplicities(StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_NbUMultiplicities(self, *args)


    def SetVMultiplicities(self, *args):
        """
        SetVMultiplicities(StepGeom_BSplineSurfaceWithKnots self, Handle_TColStd_HArray1OfInteger aVMultiplicities)

        :type aVMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetVMultiplicities(self, *args)


    def VMultiplicities(self, *args):
        """
        VMultiplicities(StepGeom_BSplineSurfaceWithKnots self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_VMultiplicities(self, *args)


    def VMultiplicitiesValue(self, *args):
        """
        VMultiplicitiesValue(StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_VMultiplicitiesValue(self, *args)


    def NbVMultiplicities(self, *args):
        """
        NbVMultiplicities(StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_NbVMultiplicities(self, *args)


    def SetUKnots(self, *args):
        """
        SetUKnots(StepGeom_BSplineSurfaceWithKnots self, Handle_TColStd_HArray1OfReal aUKnots)

        :type aUKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetUKnots(self, *args)


    def UKnots(self, *args):
        """
        UKnots(StepGeom_BSplineSurfaceWithKnots self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_UKnots(self, *args)


    def UKnotsValue(self, *args):
        """
        UKnotsValue(StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_UKnotsValue(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_NbUKnots(self, *args)


    def SetVKnots(self, *args):
        """
        SetVKnots(StepGeom_BSplineSurfaceWithKnots self, Handle_TColStd_HArray1OfReal aVKnots)

        :type aVKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetVKnots(self, *args)


    def VKnots(self, *args):
        """
        VKnots(StepGeom_BSplineSurfaceWithKnots self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_VKnots(self, *args)


    def VKnotsValue(self, *args):
        """
        VKnotsValue(StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_VKnotsValue(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_NbVKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        SetKnotSpec(StepGeom_BSplineSurfaceWithKnots self, StepGeom_KnotType const aKnotSpec)

        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        KnotSpec(StepGeom_BSplineSurfaceWithKnots self) -> StepGeom_KnotType

        :rtype: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_KnotSpec(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_BSplineSurfaceWithKnots_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineSurfaceWithKnots
StepGeom_BSplineSurfaceWithKnots_swigregister = _StepGeom.StepGeom_BSplineSurfaceWithKnots_swigregister
StepGeom_BSplineSurfaceWithKnots_swigregister(StepGeom_BSplineSurfaceWithKnots)

def StepGeom_BSplineSurfaceWithKnots_get_type_name(*args):
    """
    StepGeom_BSplineSurfaceWithKnots_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_BSplineSurfaceWithKnots_get_type_name(*args)

def StepGeom_BSplineSurfaceWithKnots_get_type_descriptor(*args):
    """
    StepGeom_BSplineSurfaceWithKnots_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_BSplineSurfaceWithKnots_get_type_descriptor(*args)

class StepGeom_Vector(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_Vector
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_Vector(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_Vector self) -> StepGeom_Vector

        Returns a Vector


        """
        this = _StepGeom.new_StepGeom_Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_Vector self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Direction aOrientation, Standard_Real const aMagnitude)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOrientation: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type aMagnitude: float

        """
        return _StepGeom.StepGeom_Vector_Init(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(StepGeom_Vector self, Handle_StepGeom_Direction aOrientation)

        :type aOrientation: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Vector_SetOrientation(self, *args)


    def Orientation(self, *args):
        """
        Orientation(StepGeom_Vector self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Vector_Orientation(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(StepGeom_Vector self, Standard_Real const aMagnitude)

        :type aMagnitude: float

        """
        return _StepGeom.StepGeom_Vector_SetMagnitude(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(StepGeom_Vector self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_Vector_Magnitude(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_Vector_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_Vector_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_Vector_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_Vector
StepGeom_Vector_swigregister = _StepGeom.StepGeom_Vector_swigregister
StepGeom_Vector_swigregister(StepGeom_Vector)

def StepGeom_Vector_get_type_name(*args):
    """
    StepGeom_Vector_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_Vector_get_type_name(*args)

def StepGeom_Vector_get_type_descriptor(*args):
    """
    StepGeom_Vector_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_Vector_get_type_descriptor(*args)

class StepGeom_CartesianTransformationOperator3d(StepGeom_CartesianTransformationOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CartesianTransformationOperator3d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CartesianTransformationOperator3d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CartesianTransformationOperator3d self) -> StepGeom_CartesianTransformationOperator3d

        Returns a CartesianTransformationOperator3d


        """
        this = _StepGeom.new_StepGeom_CartesianTransformationOperator3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_CartesianTransformationOperator3d self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasAaxis1, Handle_StepGeom_Direction aAxis1, Standard_Boolean const hasAaxis2, Handle_StepGeom_Direction aAxis2, Handle_StepGeom_CartesianPoint aLocalOrigin, Standard_Boolean const hasAscale, Standard_Real const aScale, Standard_Boolean const hasAaxis3, Handle_StepGeom_Direction aAxis3)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasAaxis1: bool
        :type aAxis1: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type hasAaxis2: bool
        :type aAxis2: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type aLocalOrigin: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type hasAscale: bool
        :type aScale: float
        :type hasAaxis3: bool
        :type aAxis3: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_Init(self, *args)


    def SetAxis3(self, *args):
        """
        SetAxis3(StepGeom_CartesianTransformationOperator3d self, Handle_StepGeom_Direction aAxis3)

        :type aAxis3: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_SetAxis3(self, *args)


    def UnSetAxis3(self, *args):
        """UnSetAxis3(StepGeom_CartesianTransformationOperator3d self)"""
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_UnSetAxis3(self, *args)


    def Axis3(self, *args):
        """
        Axis3(StepGeom_CartesianTransformationOperator3d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_Axis3(self, *args)


    def HasAxis3(self, *args):
        """
        HasAxis3(StepGeom_CartesianTransformationOperator3d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_HasAxis3(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CartesianTransformationOperator3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CartesianTransformationOperator3d
StepGeom_CartesianTransformationOperator3d_swigregister = _StepGeom.StepGeom_CartesianTransformationOperator3d_swigregister
StepGeom_CartesianTransformationOperator3d_swigregister(StepGeom_CartesianTransformationOperator3d)

def StepGeom_CartesianTransformationOperator3d_get_type_name(*args):
    """
    StepGeom_CartesianTransformationOperator3d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CartesianTransformationOperator3d_get_type_name(*args)

def StepGeom_CartesianTransformationOperator3d_get_type_descriptor(*args):
    """
    StepGeom_CartesianTransformationOperator3d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CartesianTransformationOperator3d_get_type_descriptor(*args)

class Handle_StepGeom_HArray1OfBoundaryCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_HArray1OfBoundaryCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_HArray1OfBoundaryCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_HArray1OfBoundaryCurve self, StepGeom_HArray1OfBoundaryCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_HArray1OfBoundaryCurve self, Handle_StepGeom_HArray1OfBoundaryCurve theHandle) -> Handle_StepGeom_HArray1OfBoundaryCurve
        assign(Handle_StepGeom_HArray1OfBoundaryCurve self, StepGeom_HArray1OfBoundaryCurve thePtr) -> Handle_StepGeom_HArray1OfBoundaryCurve
        assign(Handle_StepGeom_HArray1OfBoundaryCurve self, Handle_StepGeom_HArray1OfBoundaryCurve theHandle) -> Handle_StepGeom_HArray1OfBoundaryCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_HArray1OfBoundaryCurve self) -> StepGeom_HArray1OfBoundaryCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_HArray1OfBoundaryCurve self) -> StepGeom_HArray1OfBoundaryCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_HArray1OfBoundaryCurve self) -> StepGeom_HArray1OfBoundaryCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_HArray1OfBoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfBoundaryCurve

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfBoundaryCurve

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepGeom_HArray1OfBoundaryCurve self) -> NCollection_Array1_Handle_StepGeom_BoundaryCurve

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfBoundaryCurve

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_HArray1OfBoundaryCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_HArray1OfBoundaryCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_HArray1OfBoundaryCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_HArray1OfBoundaryCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_HArray1OfBoundaryCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_HArray1OfBoundaryCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_HArray1OfBoundaryCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_HArray1OfBoundaryCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_HArray1OfBoundaryCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_HArray1OfBoundaryCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_HArray1OfBoundaryCurve_swigregister = _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_swigregister
Handle_StepGeom_HArray1OfBoundaryCurve_swigregister(Handle_StepGeom_HArray1OfBoundaryCurve)

def Handle_StepGeom_HArray1OfBoundaryCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_DownCast(thing)
Handle_StepGeom_HArray1OfBoundaryCurve_DownCast = _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_DownCast

class Handle_StepGeom_QuasiUniformCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_QuasiUniformCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_QuasiUniformCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_QuasiUniformCurve self, StepGeom_QuasiUniformCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_QuasiUniformCurve self, Handle_StepGeom_QuasiUniformCurve theHandle) -> Handle_StepGeom_QuasiUniformCurve
        assign(Handle_StepGeom_QuasiUniformCurve self, StepGeom_QuasiUniformCurve thePtr) -> Handle_StepGeom_QuasiUniformCurve
        assign(Handle_StepGeom_QuasiUniformCurve self, Handle_StepGeom_QuasiUniformCurve theHandle) -> Handle_StepGeom_QuasiUniformCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_QuasiUniformCurve self) -> StepGeom_QuasiUniformCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_QuasiUniformCurve self) -> StepGeom_QuasiUniformCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_QuasiUniformCurve self) -> StepGeom_QuasiUniformCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_QuasiUniformCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_QuasiUniformCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_QuasiUniformCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_QuasiUniformCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_QuasiUniformCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_QuasiUniformCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_QuasiUniformCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_QuasiUniformCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_Init(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_QuasiUniformCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_QuasiUniformCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_QuasiUniformCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_QuasiUniformCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_QuasiUniformCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_QuasiUniformCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_QuasiUniformCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_QuasiUniformCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_QuasiUniformCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_QuasiUniformCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_QuasiUniformCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_QuasiUniformCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_QuasiUniformCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_QuasiUniformCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_QuasiUniformCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_QuasiUniformCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_QuasiUniformCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_QuasiUniformCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_QuasiUniformCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_QuasiUniformCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_QuasiUniformCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_QuasiUniformCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_QuasiUniformCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_QuasiUniformCurve_swigregister = _StepGeom.Handle_StepGeom_QuasiUniformCurve_swigregister
Handle_StepGeom_QuasiUniformCurve_swigregister(Handle_StepGeom_QuasiUniformCurve)

def Handle_StepGeom_QuasiUniformCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_QuasiUniformCurve_DownCast(thing)
Handle_StepGeom_QuasiUniformCurve_DownCast = _StepGeom.Handle_StepGeom_QuasiUniformCurve_DownCast

class StepGeom_IntersectionCurve(StepGeom_SurfaceCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_IntersectionCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_IntersectionCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_IntersectionCurve self) -> StepGeom_IntersectionCurve

        Returns a IntersectionCurve


        """
        this = _StepGeom.new_StepGeom_IntersectionCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_IntersectionCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_IntersectionCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_IntersectionCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_IntersectionCurve
StepGeom_IntersectionCurve_swigregister = _StepGeom.StepGeom_IntersectionCurve_swigregister
StepGeom_IntersectionCurve_swigregister(StepGeom_IntersectionCurve)

def StepGeom_IntersectionCurve_get_type_name(*args):
    """
    StepGeom_IntersectionCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_IntersectionCurve_get_type_name(*args)

def StepGeom_IntersectionCurve_get_type_descriptor(*args):
    """
    StepGeom_IntersectionCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_IntersectionCurve_get_type_descriptor(*args)

class Handle_StepGeom_Hyperbola(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Hyperbola self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Hyperbola_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Hyperbola self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Hyperbola self, StepGeom_Hyperbola thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Hyperbola self, Handle_StepGeom_Hyperbola theHandle) -> Handle_StepGeom_Hyperbola
        assign(Handle_StepGeom_Hyperbola self, StepGeom_Hyperbola thePtr) -> Handle_StepGeom_Hyperbola
        assign(Handle_StepGeom_Hyperbola self, Handle_StepGeom_Hyperbola theHandle) -> Handle_StepGeom_Hyperbola

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Hyperbola self) -> StepGeom_Hyperbola

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Hyperbola self) -> StepGeom_Hyperbola

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Hyperbola___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Hyperbola self) -> StepGeom_Hyperbola

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Hyperbola___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Hyperbola___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Hyperbola___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Hyperbola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Hyperbola_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Hyperbola

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Hyperbola self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition, Standard_Real const aSemiAxis, Standard_Real const aSemiImagAxis)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement
        :type aSemiAxis: float
        :type aSemiImagAxis: float

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_Init(self, *args)


    def SetSemiAxis(self, *args):
        """
        SetSemiAxis(Handle_StepGeom_Hyperbola self, Standard_Real const aSemiAxis)

        :type aSemiAxis: float

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_SetSemiAxis(self, *args)


    def SemiAxis(self, *args):
        """
        SemiAxis(Handle_StepGeom_Hyperbola self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_SemiAxis(self, *args)


    def SetSemiImagAxis(self, *args):
        """
        SetSemiImagAxis(Handle_StepGeom_Hyperbola self, Standard_Real const aSemiImagAxis)

        :type aSemiImagAxis: float

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_SetSemiImagAxis(self, *args)


    def SemiImagAxis(self, *args):
        """
        SemiImagAxis(Handle_StepGeom_Hyperbola self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_SemiImagAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Hyperbola self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Hyperbola_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Hyperbola_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_Hyperbola self, StepGeom_Axis2Placement aPosition)

        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_Hyperbola self) -> StepGeom_Axis2Placement

        :rtype: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Hyperbola self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Hyperbola self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Hyperbola self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Hyperbola_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Hyperbola self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Hyperbola self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Hyperbola self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Hyperbola self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Hyperbola self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Hyperbola self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Hyperbola self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Hyperbola_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Hyperbola self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Hyperbola_DecrementRefCounter(self, *args)

Handle_StepGeom_Hyperbola_swigregister = _StepGeom.Handle_StepGeom_Hyperbola_swigregister
Handle_StepGeom_Hyperbola_swigregister(Handle_StepGeom_Hyperbola)

def Handle_StepGeom_Hyperbola_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Hyperbola_DownCast(thing)
Handle_StepGeom_Hyperbola_DownCast = _StepGeom.Handle_StepGeom_Hyperbola_DownCast

class Handle_StepGeom_TrimmingMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_TrimmingMember self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_TrimmingMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_TrimmingMember self, StepGeom_TrimmingMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_TrimmingMember self, Handle_StepGeom_TrimmingMember theHandle) -> Handle_StepGeom_TrimmingMember
        assign(Handle_StepGeom_TrimmingMember self, StepGeom_TrimmingMember thePtr) -> Handle_StepGeom_TrimmingMember
        assign(Handle_StepGeom_TrimmingMember self, Handle_StepGeom_TrimmingMember theHandle) -> Handle_StepGeom_TrimmingMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_TrimmingMember self) -> StepGeom_TrimmingMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_TrimmingMember self) -> StepGeom_TrimmingMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_TrimmingMember self) -> StepGeom_TrimmingMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_TrimmingMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_TrimmingMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_TrimmingMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_TrimmingMember_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_TrimmingMember

    def HasName(self, *args):
        """
        HasName(Handle_StepGeom_TrimmingMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_TrimmingMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_TrimmingMember self, Standard_CString const name) -> Standard_Boolean

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_TrimmingMember self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_TrimmingMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_TrimmingMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Kind(self, *args):
        """
        Kind(Handle_StepGeom_TrimmingMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Kind(self, *args)


    def Real(self, *args):
        """
        Real(Handle_StepGeom_TrimmingMember self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Real(self, *args)


    def SetReal(self, *args):
        """
        SetReal(Handle_StepGeom_TrimmingMember self, Standard_Real const val)

        :type val: float

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetReal(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_StepGeom_TrimmingMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one
        By default, compares the strings, can be redefined (optimised)

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Matches(self, *args)


    def SetKind(self, *args):
        """
        SetKind(Handle_StepGeom_TrimmingMember self, Standard_Integer const kind)

        :type kind: int

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetKind(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_StepGeom_TrimmingMember self) -> Interface_ParamType

        Returns the Kind of the SelectMember, under the form of an
        enum ParamType

        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_ParamType(self, *args)


    def Int(self, *args):
        """
        Int(Handle_StepGeom_TrimmingMember self) -> Standard_Integer

        This internal method gives access to a value implemented by an
        Integer (to read it)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Int(self, *args)


    def SetInt(self, *args):
        """
        SetInt(Handle_StepGeom_TrimmingMember self, Standard_Integer const val)

        This internal method gives access to a value implemented by an
        Integer (to set it)

        :type val: int

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetInt(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_StepGeom_TrimmingMember self) -> Standard_Integer

        Gets the value as an Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Integer(self, *args)


    def SetInteger(self, *args):
        """
        SetInteger(Handle_StepGeom_TrimmingMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetInteger(self, *args)


    def Boolean(self, *args):
        """
        Boolean(Handle_StepGeom_TrimmingMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Boolean(self, *args)


    def SetBoolean(self, *args):
        """
        SetBoolean(Handle_StepGeom_TrimmingMember self, Standard_Boolean const val)

        :type val: bool

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetBoolean(self, *args)


    def Logical(self, *args):
        """
        Logical(Handle_StepGeom_TrimmingMember self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Logical(self, *args)


    def SetLogical(self, *args):
        """
        SetLogical(Handle_StepGeom_TrimmingMember self, StepData_Logical const val)

        :type val: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetLogical(self, *args)


    def String(self, *args):
        """
        String(Handle_StepGeom_TrimmingMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_String(self, *args)


    def SetString(self, *args):
        """
        SetString(Handle_StepGeom_TrimmingMember self, Standard_CString const val)

        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetString(self, *args)


    def Enum(self, *args):
        """
        Enum(Handle_StepGeom_TrimmingMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Enum(self, *args)


    def EnumText(self, *args):
        """
        EnumText(Handle_StepGeom_TrimmingMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_EnumText(self, *args)


    def SetEnum(self, *args):
        """
        SetEnum(Handle_StepGeom_TrimmingMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetEnum(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(Handle_StepGeom_TrimmingMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_SetEnumText(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_TrimmingMember self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_TrimmingMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_TrimmingMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_TrimmingMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_TrimmingMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_TrimmingMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_TrimmingMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_TrimmingMember self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_TrimmingMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmingMember_DecrementRefCounter(self, *args)

Handle_StepGeom_TrimmingMember_swigregister = _StepGeom.Handle_StepGeom_TrimmingMember_swigregister
Handle_StepGeom_TrimmingMember_swigregister(Handle_StepGeom_TrimmingMember)

def Handle_StepGeom_TrimmingMember_DownCast(thing):
    return _StepGeom.Handle_StepGeom_TrimmingMember_DownCast(thing)
Handle_StepGeom_TrimmingMember_DownCast = _StepGeom.Handle_StepGeom_TrimmingMember_DownCast

class StepGeom_PointReplica(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_PointReplica
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_PointReplica(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_PointReplica self) -> StepGeom_PointReplica

        Returns a PointReplica


        """
        this = _StepGeom.new_StepGeom_PointReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_PointReplica self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Point aParentPt, Handle_StepGeom_CartesianTransformationOperator aTransformation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aParentPt: OCC.wrapper.StepGeom.Handle_StepGeom_Point
        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.StepGeom_PointReplica_Init(self, *args)


    def SetParentPt(self, *args):
        """
        SetParentPt(StepGeom_PointReplica self, Handle_StepGeom_Point aParentPt)

        :type aParentPt: OCC.wrapper.StepGeom.Handle_StepGeom_Point

        """
        return _StepGeom.StepGeom_PointReplica_SetParentPt(self, *args)


    def ParentPt(self, *args):
        """
        ParentPt(StepGeom_PointReplica self) -> Handle_StepGeom_Point

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Point

        """
        return _StepGeom.StepGeom_PointReplica_ParentPt(self, *args)


    def SetTransformation(self, *args):
        """
        SetTransformation(StepGeom_PointReplica self, Handle_StepGeom_CartesianTransformationOperator aTransformation)

        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.StepGeom_PointReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        Transformation(StepGeom_PointReplica self) -> Handle_StepGeom_CartesianTransformationOperator

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.StepGeom_PointReplica_Transformation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_PointReplica_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_PointReplica_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_PointReplica_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_PointReplica
StepGeom_PointReplica_swigregister = _StepGeom.StepGeom_PointReplica_swigregister
StepGeom_PointReplica_swigregister(StepGeom_PointReplica)

def StepGeom_PointReplica_get_type_name(*args):
    """
    StepGeom_PointReplica_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_PointReplica_get_type_name(*args)

def StepGeom_PointReplica_get_type_descriptor(*args):
    """
    StepGeom_PointReplica_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_PointReplica_get_type_descriptor(*args)

class Handle_StepGeom_HArray1OfPcurveOrSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_HArray1OfPcurveOrSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_HArray1OfPcurveOrSurface self, StepGeom_HArray1OfPcurveOrSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_HArray1OfPcurveOrSurface self, Handle_StepGeom_HArray1OfPcurveOrSurface theHandle) -> Handle_StepGeom_HArray1OfPcurveOrSurface
        assign(Handle_StepGeom_HArray1OfPcurveOrSurface self, StepGeom_HArray1OfPcurveOrSurface thePtr) -> Handle_StepGeom_HArray1OfPcurveOrSurface
        assign(Handle_StepGeom_HArray1OfPcurveOrSurface self, Handle_StepGeom_HArray1OfPcurveOrSurface theHandle) -> Handle_StepGeom_HArray1OfPcurveOrSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> StepGeom_HArray1OfPcurveOrSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> StepGeom_HArray1OfPcurveOrSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> StepGeom_HArray1OfPcurveOrSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_HArray1OfPcurveOrSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfPcurveOrSurface

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfPcurveOrSurface

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> NCollection_Array1_StepGeom_PcurveOrSurface

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_HArray1OfPcurveOrSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_HArray1OfPcurveOrSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_HArray1OfPcurveOrSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_HArray1OfPcurveOrSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_HArray1OfPcurveOrSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_HArray1OfPcurveOrSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_HArray1OfPcurveOrSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_HArray1OfPcurveOrSurface_swigregister = _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_swigregister
Handle_StepGeom_HArray1OfPcurveOrSurface_swigregister(Handle_StepGeom_HArray1OfPcurveOrSurface)

def Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast(thing)
Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast = _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast

class StepGeom_RationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_RationalBSplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_RationalBSplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_RationalBSplineSurface self) -> StepGeom_RationalBSplineSurface

        Returns a RationalBSplineSurface


        """
        this = _StepGeom.new_StepGeom_RationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_RationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_Init(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(StepGeom_RationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(StepGeom_RationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(StepGeom_RationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(StepGeom_RationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(StepGeom_RationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_RationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_RationalBSplineSurface
StepGeom_RationalBSplineSurface_swigregister = _StepGeom.StepGeom_RationalBSplineSurface_swigregister
StepGeom_RationalBSplineSurface_swigregister(StepGeom_RationalBSplineSurface)

def StepGeom_RationalBSplineSurface_get_type_name(*args):
    """
    StepGeom_RationalBSplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_RationalBSplineSurface_get_type_name(*args)

def StepGeom_RationalBSplineSurface_get_type_descriptor(*args):
    """
    StepGeom_RationalBSplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_RationalBSplineSurface_get_type_descriptor(*args)

class NCollection_Array2_Handle_StepGeom_SurfacePatch(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _StepGeom.new_NCollection_Array2_Handle_StepGeom_SurfacePatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Handle_StepGeom_SurfacePatch self, Handle_StepGeom_SurfacePatch theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Handle_StepGeom_SurfacePatch self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Handle_StepGeom_SurfacePatch self, NCollection_Array2_Handle_StepGeom_SurfacePatch theOther) -> NCollection_Array2_Handle_StepGeom_SurfacePatch

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Handle_StepGeom_SurfacePatch self, NCollection_Array2_Handle_StepGeom_SurfacePatch theOther) -> NCollection_Array2_Handle_StepGeom_SurfacePatch

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Handle_StepGeom_SurfacePatch self, Standard_Integer const theRow, Standard_Integer const theCol) -> Handle_StepGeom_SurfacePatch

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Handle_StepGeom_SurfacePatch self, Standard_Integer const theRow, Standard_Integer const theCol, Handle_StepGeom_SurfacePatch theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_SetValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array2_Handle_StepGeom_SurfacePatch
NCollection_Array2_Handle_StepGeom_SurfacePatch_swigregister = _StepGeom.NCollection_Array2_Handle_StepGeom_SurfacePatch_swigregister
NCollection_Array2_Handle_StepGeom_SurfacePatch_swigregister(NCollection_Array2_Handle_StepGeom_SurfacePatch)


try:
	StepGeom_Array2OfSurfacePatch = NCollection_Array2_Handle_StepGeom_SurfacePatch
except NameError:
	pass # does not exist, probably ignored

class Handle_StepGeom_OuterBoundaryCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_OuterBoundaryCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_OuterBoundaryCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_OuterBoundaryCurve self, StepGeom_OuterBoundaryCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_OuterBoundaryCurve self, Handle_StepGeom_OuterBoundaryCurve theHandle) -> Handle_StepGeom_OuterBoundaryCurve
        assign(Handle_StepGeom_OuterBoundaryCurve self, StepGeom_OuterBoundaryCurve thePtr) -> Handle_StepGeom_OuterBoundaryCurve
        assign(Handle_StepGeom_OuterBoundaryCurve self, Handle_StepGeom_OuterBoundaryCurve theHandle) -> Handle_StepGeom_OuterBoundaryCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_OuterBoundaryCurve self) -> StepGeom_OuterBoundaryCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_OuterBoundaryCurve self) -> StepGeom_OuterBoundaryCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_OuterBoundaryCurve self) -> StepGeom_OuterBoundaryCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_OuterBoundaryCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_OuterBoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_OuterBoundaryCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_OuterBoundaryCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_OuterBoundaryCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_OuterBoundaryCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_OuterBoundaryCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_OuterBoundaryCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_Init(self, *args)


    def SetSegments(self, *args):
        """
        SetSegments(Handle_StepGeom_OuterBoundaryCurve self, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments)

        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_SetSegments(self, *args)


    def Segments(self, *args):
        """
        Segments(Handle_StepGeom_OuterBoundaryCurve self) -> Handle_StepGeom_HArray1OfCompositeCurveSegment

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        SegmentsValue(Handle_StepGeom_OuterBoundaryCurve self, Standard_Integer const num) -> Handle_StepGeom_CompositeCurveSegment

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_SegmentsValue(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(Handle_StepGeom_OuterBoundaryCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_NbSegments(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_OuterBoundaryCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_OuterBoundaryCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_OuterBoundaryCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_OuterBoundaryCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_OuterBoundaryCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_OuterBoundaryCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_OuterBoundaryCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_OuterBoundaryCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_OuterBoundaryCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_OuterBoundaryCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_OuterBoundaryCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_OuterBoundaryCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_OuterBoundaryCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_OuterBoundaryCurve_swigregister = _StepGeom.Handle_StepGeom_OuterBoundaryCurve_swigregister
Handle_StepGeom_OuterBoundaryCurve_swigregister(Handle_StepGeom_OuterBoundaryCurve)

def Handle_StepGeom_OuterBoundaryCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_DownCast(thing)
Handle_StepGeom_OuterBoundaryCurve_DownCast = _StepGeom.Handle_StepGeom_OuterBoundaryCurve_DownCast

class NCollection_Array1_StepGeom_SurfaceBoundary(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepGeom_SurfaceBoundary self) -> NCollection_Array1< StepGeom_SurfaceBoundary >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepGeom_SurfaceBoundary self) -> NCollection_Array1< StepGeom_SurfaceBoundary >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepGeom_SurfaceBoundary self) -> NCollection_Array1< StepGeom_SurfaceBoundary >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepGeom_SurfaceBoundary self) -> NCollection_Array1< StepGeom_SurfaceBoundary >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepGeom.new_NCollection_Array1_StepGeom_SurfaceBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepGeom_SurfaceBoundary self, StepGeom_SurfaceBoundary theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepGeom_SurfaceBoundary self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepGeom_SurfaceBoundary self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepGeom_SurfaceBoundary self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepGeom_SurfaceBoundary self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepGeom_SurfaceBoundary self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepGeom_SurfaceBoundary self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepGeom_SurfaceBoundary self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepGeom_SurfaceBoundary self, NCollection_Array1_StepGeom_SurfaceBoundary theOther) -> NCollection_Array1_StepGeom_SurfaceBoundary

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepGeom_SurfaceBoundary self, NCollection_Array1_StepGeom_SurfaceBoundary theOther) -> NCollection_Array1_StepGeom_SurfaceBoundary

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepGeom_SurfaceBoundary self, NCollection_Array1_StepGeom_SurfaceBoundary theOther) -> NCollection_Array1_StepGeom_SurfaceBoundary
        assign(NCollection_Array1_StepGeom_SurfaceBoundary self, NCollection_Array1_StepGeom_SurfaceBoundary theOther) -> NCollection_Array1_StepGeom_SurfaceBoundary

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepGeom_SurfaceBoundary self) -> StepGeom_SurfaceBoundary

        @return first element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepGeom_SurfaceBoundary self) -> StepGeom_SurfaceBoundary

        @return last element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepGeom_SurfaceBoundary self, Standard_Integer const theIndex) -> StepGeom_SurfaceBoundary

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepGeom_SurfaceBoundary self, Standard_Integer const theIndex, StepGeom_SurfaceBoundary theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepGeom_SurfaceBoundary self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_Resize(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array1_StepGeom_SurfaceBoundary
NCollection_Array1_StepGeom_SurfaceBoundary_swigregister = _StepGeom.NCollection_Array1_StepGeom_SurfaceBoundary_swigregister
NCollection_Array1_StepGeom_SurfaceBoundary_swigregister(NCollection_Array1_StepGeom_SurfaceBoundary)


try:
	StepGeom_Array1OfSurfaceBoundary = NCollection_Array1_StepGeom_SurfaceBoundary
except NameError:
	pass # does not exist, probably ignored

class StepGeom_Axis2Placement(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepGeom_Axis2Placement self) -> StepGeom_Axis2Placement

        Returns a Axis2Placement SelectType


        """
        this = _StepGeom.new_StepGeom_Axis2Placement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepGeom_Axis2Placement self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a Axis2Placement Kind Entity that is :
        1 -> Axis2Placement2d
        2 -> Axis2Placement3d
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_Axis2Placement_CaseNum(self, *args)


    def Axis2Placement2d(self, *args):
        """
        Axis2Placement2d(StepGeom_Axis2Placement self) -> Handle_StepGeom_Axis2Placement2d

        returns Value as a Axis2Placement2d (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement2d

        """
        return _StepGeom.StepGeom_Axis2Placement_Axis2Placement2d(self, *args)


    def Axis2Placement3d(self, *args):
        """
        Axis2Placement3d(StepGeom_Axis2Placement self) -> Handle_StepGeom_Axis2Placement3d

        returns Value as a Axis2Placement3d (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.StepGeom_Axis2Placement_Axis2Placement3d(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Axis2Placement
StepGeom_Axis2Placement_swigregister = _StepGeom.StepGeom_Axis2Placement_swigregister
StepGeom_Axis2Placement_swigregister(StepGeom_Axis2Placement)

class NCollection_Array1_Handle_StepGeom_CartesianPoint(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> NCollection_Array1< opencascade::handle< StepGeom_CartesianPoint > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> NCollection_Array1< opencascade::handle< StepGeom_CartesianPoint > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> NCollection_Array1< opencascade::handle< StepGeom_CartesianPoint > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> NCollection_Array1< opencascade::handle< StepGeom_CartesianPoint > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepGeom.new_NCollection_Array1_Handle_StepGeom_CartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepGeom_CartesianPoint self, Handle_StepGeom_CartesianPoint theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepGeom_CartesianPoint self, NCollection_Array1_Handle_StepGeom_CartesianPoint theOther) -> NCollection_Array1_Handle_StepGeom_CartesianPoint

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepGeom_CartesianPoint self, NCollection_Array1_Handle_StepGeom_CartesianPoint theOther) -> NCollection_Array1_Handle_StepGeom_CartesianPoint

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepGeom_CartesianPoint self, NCollection_Array1_Handle_StepGeom_CartesianPoint theOther) -> NCollection_Array1_Handle_StepGeom_CartesianPoint
        assign(NCollection_Array1_Handle_StepGeom_CartesianPoint self, NCollection_Array1_Handle_StepGeom_CartesianPoint theOther) -> NCollection_Array1_Handle_StepGeom_CartesianPoint

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Handle_StepGeom_CartesianPoint

        @return first element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepGeom_CartesianPoint self) -> Handle_StepGeom_CartesianPoint

        @return last element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepGeom_CartesianPoint self, Standard_Integer const theIndex) -> Handle_StepGeom_CartesianPoint

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepGeom_CartesianPoint self, Standard_Integer const theIndex, Handle_StepGeom_CartesianPoint theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepGeom_CartesianPoint self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_Resize(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array1_Handle_StepGeom_CartesianPoint
NCollection_Array1_Handle_StepGeom_CartesianPoint_swigregister = _StepGeom.NCollection_Array1_Handle_StepGeom_CartesianPoint_swigregister
NCollection_Array1_Handle_StepGeom_CartesianPoint_swigregister(NCollection_Array1_Handle_StepGeom_CartesianPoint)


try:
	StepGeom_Array1OfCartesianPoint = NCollection_Array1_Handle_StepGeom_CartesianPoint
except NameError:
	pass # does not exist, probably ignored

class StepGeom_CartesianTransformationOperator2d(StepGeom_CartesianTransformationOperator):
    """Added from StepGeom Rev2 to Rev4"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_CartesianTransformationOperator2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_CartesianTransformationOperator2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_CartesianTransformationOperator2d self) -> StepGeom_CartesianTransformationOperator2d

        Added from StepGeom Rev2 to Rev4
        """
        this = _StepGeom.new_StepGeom_CartesianTransformationOperator2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_CartesianTransformationOperator2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_CartesianTransformationOperator2d
StepGeom_CartesianTransformationOperator2d_swigregister = _StepGeom.StepGeom_CartesianTransformationOperator2d_swigregister
StepGeom_CartesianTransformationOperator2d_swigregister(StepGeom_CartesianTransformationOperator2d)

def StepGeom_CartesianTransformationOperator2d_get_type_name(*args):
    """
    StepGeom_CartesianTransformationOperator2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_CartesianTransformationOperator2d_get_type_name(*args)

def StepGeom_CartesianTransformationOperator2d_get_type_descriptor(*args):
    """
    StepGeom_CartesianTransformationOperator2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_CartesianTransformationOperator2d_get_type_descriptor(*args)

class Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface theHandle) -> Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface
        assign(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface thePtr) -> Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface
        assign(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface theHandle) -> Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_StepGeom_QuasiUniformSurface aQuasiUniformSurface, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)
        Init(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetQuasiUniformSurface(self, *args):
        """
        SetQuasiUniformSurface(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_QuasiUniformSurface aQuasiUniformSurface)

        :type aQuasiUniformSurface: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurface

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetQuasiUniformSurface(self, *args)


    def QuasiUniformSurface(self, *args):
        """
        QuasiUniformSurface(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_QuasiUniformSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurface

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_QuasiUniformSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        SetRationalBSplineSurface(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface aRationalBSplineSurface)

        :type aRationalBSplineSurface: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        RationalBSplineSurface(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_RationalBSplineSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister
Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)

def Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast(thing)
Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast

class Handle_StepGeom_Line(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Line self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Line_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Line self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Line_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Line self, StepGeom_Line thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Line_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Line self, Handle_StepGeom_Line theHandle) -> Handle_StepGeom_Line
        assign(Handle_StepGeom_Line self, StepGeom_Line thePtr) -> Handle_StepGeom_Line
        assign(Handle_StepGeom_Line self, Handle_StepGeom_Line theHandle) -> Handle_StepGeom_Line

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Line_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Line self) -> StepGeom_Line

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Line_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Line self) -> StepGeom_Line

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Line___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Line self) -> StepGeom_Line

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Line___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Line___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Line___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Line(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Line_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Line

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Line self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_CartesianPoint aPnt, Handle_StepGeom_Vector aDir)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPnt: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type aDir: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.Handle_StepGeom_Line_Init(self, *args)


    def SetPnt(self, *args):
        """
        SetPnt(Handle_StepGeom_Line self, Handle_StepGeom_CartesianPoint aPnt)

        :type aPnt: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_Line_SetPnt(self, *args)


    def Pnt(self, *args):
        """
        Pnt(Handle_StepGeom_Line self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_Line_Pnt(self, *args)


    def SetDir(self, *args):
        """
        SetDir(Handle_StepGeom_Line self, Handle_StepGeom_Vector aDir)

        :type aDir: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.Handle_StepGeom_Line_SetDir(self, *args)


    def Dir(self, *args):
        """
        Dir(Handle_StepGeom_Line self) -> Handle_StepGeom_Vector

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.Handle_StepGeom_Line_Dir(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Line self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Line_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Line_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Line_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Line self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Line_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Line self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Line_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Line self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Line_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Line self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Line self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Line_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Line self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Line self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Line_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Line self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Line_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Line self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Line_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Line self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Line_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Line self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Line_DecrementRefCounter(self, *args)

Handle_StepGeom_Line_swigregister = _StepGeom.Handle_StepGeom_Line_swigregister
Handle_StepGeom_Line_swigregister(Handle_StepGeom_Line)

def Handle_StepGeom_Line_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Line_DownCast(thing)
Handle_StepGeom_Line_DownCast = _StepGeom.Handle_StepGeom_Line_DownCast

class StepGeom_SurfaceOfRevolution(StepGeom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SurfaceOfRevolution
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SurfaceOfRevolution(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SurfaceOfRevolution self) -> StepGeom_SurfaceOfRevolution

        Returns a SurfaceOfRevolution


        """
        this = _StepGeom.new_StepGeom_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepGeom_SurfaceOfRevolution self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aSweptCurve, Handle_StepGeom_Axis1Placement aAxisPosition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aAxisPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis1Placement

        """
        return _StepGeom.StepGeom_SurfaceOfRevolution_Init(self, *args)


    def SetAxisPosition(self, *args):
        """
        SetAxisPosition(StepGeom_SurfaceOfRevolution self, Handle_StepGeom_Axis1Placement aAxisPosition)

        :type aAxisPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis1Placement

        """
        return _StepGeom.StepGeom_SurfaceOfRevolution_SetAxisPosition(self, *args)


    def AxisPosition(self, *args):
        """
        AxisPosition(StepGeom_SurfaceOfRevolution self) -> Handle_StepGeom_Axis1Placement

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis1Placement

        """
        return _StepGeom.StepGeom_SurfaceOfRevolution_AxisPosition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SurfaceOfRevolution_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SurfaceOfRevolution_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SurfaceOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceOfRevolution
StepGeom_SurfaceOfRevolution_swigregister = _StepGeom.StepGeom_SurfaceOfRevolution_swigregister
StepGeom_SurfaceOfRevolution_swigregister(StepGeom_SurfaceOfRevolution)

def StepGeom_SurfaceOfRevolution_get_type_name(*args):
    """
    StepGeom_SurfaceOfRevolution_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SurfaceOfRevolution_get_type_name(*args)

def StepGeom_SurfaceOfRevolution_get_type_descriptor(*args):
    """
    StepGeom_SurfaceOfRevolution_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SurfaceOfRevolution_get_type_descriptor(*args)

class Handle_StepGeom_Circle(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Circle self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Circle_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Circle self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Circle_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Circle self, StepGeom_Circle thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Circle_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Circle self, Handle_StepGeom_Circle theHandle) -> Handle_StepGeom_Circle
        assign(Handle_StepGeom_Circle self, StepGeom_Circle thePtr) -> Handle_StepGeom_Circle
        assign(Handle_StepGeom_Circle self, Handle_StepGeom_Circle theHandle) -> Handle_StepGeom_Circle

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Circle_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Circle self) -> StepGeom_Circle

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Circle_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Circle self) -> StepGeom_Circle

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Circle___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Circle self) -> StepGeom_Circle

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Circle___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Circle___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Circle___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Circle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Circle_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Circle

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Circle self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition, Standard_Real const aRadius)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement
        :type aRadius: float

        """
        return _StepGeom.Handle_StepGeom_Circle_Init(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(Handle_StepGeom_Circle self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _StepGeom.Handle_StepGeom_Circle_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_StepGeom_Circle self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_Circle_Radius(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Circle self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Circle_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Circle_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Circle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_Circle self, StepGeom_Axis2Placement aPosition)

        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Circle_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_Circle self) -> StepGeom_Axis2Placement

        :rtype: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Circle_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Circle self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Circle_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Circle self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Circle_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Circle self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Circle_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Circle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Circle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Circle_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Circle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Circle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Circle_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Circle self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Circle_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Circle self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Circle_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Circle self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Circle_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Circle self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Circle_DecrementRefCounter(self, *args)

Handle_StepGeom_Circle_swigregister = _StepGeom.Handle_StepGeom_Circle_swigregister
Handle_StepGeom_Circle_swigregister(Handle_StepGeom_Circle)

def Handle_StepGeom_Circle_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Circle_DownCast(thing)
Handle_StepGeom_Circle_DownCast = _StepGeom.Handle_StepGeom_Circle_DownCast

class Handle_StepGeom_TrimmedCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_TrimmedCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_TrimmedCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_TrimmedCurve self, StepGeom_TrimmedCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_TrimmedCurve self, Handle_StepGeom_TrimmedCurve theHandle) -> Handle_StepGeom_TrimmedCurve
        assign(Handle_StepGeom_TrimmedCurve self, StepGeom_TrimmedCurve thePtr) -> Handle_StepGeom_TrimmedCurve
        assign(Handle_StepGeom_TrimmedCurve self, Handle_StepGeom_TrimmedCurve theHandle) -> Handle_StepGeom_TrimmedCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_TrimmedCurve self) -> StepGeom_TrimmedCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_TrimmedCurve self) -> StepGeom_TrimmedCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_TrimmedCurve self) -> StepGeom_TrimmedCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_TrimmedCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_TrimmedCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_TrimmedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_TrimmedCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_TrimmedCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_TrimmedCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aBasisCurve, Handle_StepGeom_HArray1OfTrimmingSelect aTrim1, Handle_StepGeom_HArray1OfTrimmingSelect aTrim2, Standard_Boolean const aSenseAgreement, StepGeom_TrimmingPreference const aMasterRepresentation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aTrim1: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect
        :type aTrim2: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect
        :type aSenseAgreement: bool
        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_TrimmingPreference

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        SetBasisCurve(Handle_StepGeom_TrimmedCurve self, Handle_StepGeom_Curve aBasisCurve)

        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_StepGeom_TrimmedCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_BasisCurve(self, *args)


    def SetTrim1(self, *args):
        """
        SetTrim1(Handle_StepGeom_TrimmedCurve self, Handle_StepGeom_HArray1OfTrimmingSelect aTrim1)

        :type aTrim1: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_SetTrim1(self, *args)


    def Trim1(self, *args):
        """
        Trim1(Handle_StepGeom_TrimmedCurve self) -> Handle_StepGeom_HArray1OfTrimmingSelect

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_Trim1(self, *args)


    def Trim1Value(self, *args):
        """
        Trim1Value(Handle_StepGeom_TrimmedCurve self, Standard_Integer const num) -> StepGeom_TrimmingSelect

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_TrimmingSelect

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_Trim1Value(self, *args)


    def NbTrim1(self, *args):
        """
        NbTrim1(Handle_StepGeom_TrimmedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_NbTrim1(self, *args)


    def SetTrim2(self, *args):
        """
        SetTrim2(Handle_StepGeom_TrimmedCurve self, Handle_StepGeom_HArray1OfTrimmingSelect aTrim2)

        :type aTrim2: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_SetTrim2(self, *args)


    def Trim2(self, *args):
        """
        Trim2(Handle_StepGeom_TrimmedCurve self) -> Handle_StepGeom_HArray1OfTrimmingSelect

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_Trim2(self, *args)


    def Trim2Value(self, *args):
        """
        Trim2Value(Handle_StepGeom_TrimmedCurve self, Standard_Integer const num) -> StepGeom_TrimmingSelect

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_TrimmingSelect

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_Trim2Value(self, *args)


    def NbTrim2(self, *args):
        """
        NbTrim2(Handle_StepGeom_TrimmedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_NbTrim2(self, *args)


    def SetSenseAgreement(self, *args):
        """
        SetSenseAgreement(Handle_StepGeom_TrimmedCurve self, Standard_Boolean const aSenseAgreement)

        :type aSenseAgreement: bool

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_SetSenseAgreement(self, *args)


    def SenseAgreement(self, *args):
        """
        SenseAgreement(Handle_StepGeom_TrimmedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_SenseAgreement(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        SetMasterRepresentation(Handle_StepGeom_TrimmedCurve self, StepGeom_TrimmingPreference const aMasterRepresentation)

        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_TrimmingPreference

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        MasterRepresentation(Handle_StepGeom_TrimmedCurve self) -> StepGeom_TrimmingPreference

        :rtype: OCC.wrapper.StepGeom.StepGeom_TrimmingPreference

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_MasterRepresentation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_TrimmedCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_TrimmedCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_TrimmedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_TrimmedCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_TrimmedCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_TrimmedCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_TrimmedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_TrimmedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_TrimmedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_TrimmedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_TrimmedCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_TrimmedCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_TrimmedCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_TrimmedCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_TrimmedCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_TrimmedCurve_swigregister = _StepGeom.Handle_StepGeom_TrimmedCurve_swigregister
Handle_StepGeom_TrimmedCurve_swigregister(Handle_StepGeom_TrimmedCurve)

def Handle_StepGeom_TrimmedCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_TrimmedCurve_DownCast(thing)
Handle_StepGeom_TrimmedCurve_DownCast = _StepGeom.Handle_StepGeom_TrimmedCurve_DownCast

class Handle_StepGeom_BSplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BSplineSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BSplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BSplineSurface self, StepGeom_BSplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BSplineSurface self, Handle_StepGeom_BSplineSurface theHandle) -> Handle_StepGeom_BSplineSurface
        assign(Handle_StepGeom_BSplineSurface self, StepGeom_BSplineSurface thePtr) -> Handle_StepGeom_BSplineSurface
        assign(Handle_StepGeom_BSplineSurface self, Handle_StepGeom_BSplineSurface theHandle) -> Handle_StepGeom_BSplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BSplineSurface self) -> StepGeom_BSplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BSplineSurface self) -> StepGeom_BSplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BSplineSurface self) -> StepGeom_BSplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BSplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BSplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_BSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_Init(self, *args)


    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_BSplineSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_BSplineSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BSplineSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BSplineSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_BSplineSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_BSplineSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_BSplineSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_BSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_BSplineSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_BSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BSplineSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SelfIntersect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BSplineSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BSplineSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BSplineSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BSplineSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BSplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BSplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BSplineSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BSplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_BSplineSurface_swigregister = _StepGeom.Handle_StepGeom_BSplineSurface_swigregister
Handle_StepGeom_BSplineSurface_swigregister(Handle_StepGeom_BSplineSurface)

def Handle_StepGeom_BSplineSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BSplineSurface_DownCast(thing)
Handle_StepGeom_BSplineSurface_DownCast = _StepGeom.Handle_StepGeom_BSplineSurface_DownCast

class Handle_StepGeom_HArray1OfTrimmingSelect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_HArray1OfTrimmingSelect self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_HArray1OfTrimmingSelect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_HArray1OfTrimmingSelect self, StepGeom_HArray1OfTrimmingSelect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_HArray1OfTrimmingSelect self, Handle_StepGeom_HArray1OfTrimmingSelect theHandle) -> Handle_StepGeom_HArray1OfTrimmingSelect
        assign(Handle_StepGeom_HArray1OfTrimmingSelect self, StepGeom_HArray1OfTrimmingSelect thePtr) -> Handle_StepGeom_HArray1OfTrimmingSelect
        assign(Handle_StepGeom_HArray1OfTrimmingSelect self, Handle_StepGeom_HArray1OfTrimmingSelect theHandle) -> Handle_StepGeom_HArray1OfTrimmingSelect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_HArray1OfTrimmingSelect self) -> StepGeom_HArray1OfTrimmingSelect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_HArray1OfTrimmingSelect self) -> StepGeom_HArray1OfTrimmingSelect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_HArray1OfTrimmingSelect self) -> StepGeom_HArray1OfTrimmingSelect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_HArray1OfTrimmingSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfTrimmingSelect

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfTrimmingSelect

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepGeom_HArray1OfTrimmingSelect self) -> NCollection_Array1_StepGeom_TrimmingSelect

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfTrimmingSelect

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_HArray1OfTrimmingSelect self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_HArray1OfTrimmingSelect self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_HArray1OfTrimmingSelect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_HArray1OfTrimmingSelect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_HArray1OfTrimmingSelect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_HArray1OfTrimmingSelect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_HArray1OfTrimmingSelect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_HArray1OfTrimmingSelect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_HArray1OfTrimmingSelect self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_HArray1OfTrimmingSelect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_DecrementRefCounter(self, *args)

Handle_StepGeom_HArray1OfTrimmingSelect_swigregister = _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_swigregister
Handle_StepGeom_HArray1OfTrimmingSelect_swigregister(Handle_StepGeom_HArray1OfTrimmingSelect)

def Handle_StepGeom_HArray1OfTrimmingSelect_DownCast(thing):
    return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_DownCast(thing)
Handle_StepGeom_HArray1OfTrimmingSelect_DownCast = _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_DownCast

class Handle_StepGeom_QuasiUniformSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_QuasiUniformSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_QuasiUniformSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_QuasiUniformSurface self, StepGeom_QuasiUniformSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_QuasiUniformSurface self, Handle_StepGeom_QuasiUniformSurface theHandle) -> Handle_StepGeom_QuasiUniformSurface
        assign(Handle_StepGeom_QuasiUniformSurface self, StepGeom_QuasiUniformSurface thePtr) -> Handle_StepGeom_QuasiUniformSurface
        assign(Handle_StepGeom_QuasiUniformSurface self, Handle_StepGeom_QuasiUniformSurface theHandle) -> Handle_StepGeom_QuasiUniformSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_QuasiUniformSurface self) -> StepGeom_QuasiUniformSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_QuasiUniformSurface self) -> StepGeom_QuasiUniformSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_QuasiUniformSurface self) -> StepGeom_QuasiUniformSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_QuasiUniformSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_QuasiUniformSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_QuasiUniformSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_QuasiUniformSurface

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_QuasiUniformSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_QuasiUniformSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_QuasiUniformSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_QuasiUniformSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_Init(self, *args)


    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_QuasiUniformSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_QuasiUniformSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_QuasiUniformSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_QuasiUniformSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_QuasiUniformSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_QuasiUniformSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_QuasiUniformSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_QuasiUniformSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_QuasiUniformSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_QuasiUniformSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_QuasiUniformSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_QuasiUniformSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_QuasiUniformSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_QuasiUniformSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_QuasiUniformSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_QuasiUniformSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_QuasiUniformSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_QuasiUniformSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_QuasiUniformSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_QuasiUniformSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_QuasiUniformSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_QuasiUniformSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_QuasiUniformSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_QuasiUniformSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_QuasiUniformSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_QuasiUniformSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_QuasiUniformSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_QuasiUniformSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_QuasiUniformSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_QuasiUniformSurface_swigregister = _StepGeom.Handle_StepGeom_QuasiUniformSurface_swigregister
Handle_StepGeom_QuasiUniformSurface_swigregister(Handle_StepGeom_QuasiUniformSurface)

def Handle_StepGeom_QuasiUniformSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_QuasiUniformSurface_DownCast(thing)
Handle_StepGeom_QuasiUniformSurface_DownCast = _StepGeom.Handle_StepGeom_QuasiUniformSurface_DownCast

class Handle_StepGeom_Conic(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Conic self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Conic_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Conic self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Conic_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Conic self, StepGeom_Conic thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Conic_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Conic self, Handle_StepGeom_Conic theHandle) -> Handle_StepGeom_Conic
        assign(Handle_StepGeom_Conic self, StepGeom_Conic thePtr) -> Handle_StepGeom_Conic
        assign(Handle_StepGeom_Conic self, Handle_StepGeom_Conic theHandle) -> Handle_StepGeom_Conic

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Conic_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Conic self) -> StepGeom_Conic

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Conic_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Conic self) -> StepGeom_Conic

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Conic___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Conic self) -> StepGeom_Conic

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Conic___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Conic___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Conic___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Conic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Conic_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Conic

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Conic self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Conic_Init(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_Conic self, StepGeom_Axis2Placement aPosition)

        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Conic_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_Conic self) -> StepGeom_Axis2Placement

        :rtype: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Conic_Position(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Conic self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Conic_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Conic_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Conic_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Conic self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Conic_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Conic self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Conic_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Conic self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Conic_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Conic self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Conic self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Conic_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Conic self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Conic self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Conic_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Conic self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Conic_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Conic self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Conic_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Conic self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Conic_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Conic self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Conic_DecrementRefCounter(self, *args)

Handle_StepGeom_Conic_swigregister = _StepGeom.Handle_StepGeom_Conic_swigregister
Handle_StepGeom_Conic_swigregister(Handle_StepGeom_Conic)

def Handle_StepGeom_Conic_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Conic_DownCast(thing)
Handle_StepGeom_Conic_DownCast = _StepGeom.Handle_StepGeom_Conic_DownCast

class Handle_StepGeom_CylindricalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_CylindricalSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_CylindricalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_CylindricalSurface self, StepGeom_CylindricalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_CylindricalSurface self, Handle_StepGeom_CylindricalSurface theHandle) -> Handle_StepGeom_CylindricalSurface
        assign(Handle_StepGeom_CylindricalSurface self, StepGeom_CylindricalSurface thePtr) -> Handle_StepGeom_CylindricalSurface
        assign(Handle_StepGeom_CylindricalSurface self, Handle_StepGeom_CylindricalSurface theHandle) -> Handle_StepGeom_CylindricalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_CylindricalSurface self) -> StepGeom_CylindricalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_CylindricalSurface self) -> StepGeom_CylindricalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_CylindricalSurface self) -> StepGeom_CylindricalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_CylindricalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_CylindricalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_CylindricalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CylindricalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CylindricalSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_CylindricalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aRadius)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aRadius: float

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(Handle_StepGeom_CylindricalSurface self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_StepGeom_CylindricalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_Radius(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_CylindricalSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CylindricalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CylindricalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_CylindricalSurface self, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_CylindricalSurface self) -> Handle_StepGeom_Axis2Placement3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_CylindricalSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_CylindricalSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_CylindricalSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_CylindricalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_CylindricalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_CylindricalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_CylindricalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_CylindricalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_CylindricalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_CylindricalSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_CylindricalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CylindricalSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_CylindricalSurface_swigregister = _StepGeom.Handle_StepGeom_CylindricalSurface_swigregister
Handle_StepGeom_CylindricalSurface_swigregister(Handle_StepGeom_CylindricalSurface)

def Handle_StepGeom_CylindricalSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_CylindricalSurface_DownCast(thing)
Handle_StepGeom_CylindricalSurface_DownCast = _StepGeom.Handle_StepGeom_CylindricalSurface_DownCast

class Handle_StepGeom_RectangularCompositeSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_RectangularCompositeSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_RectangularCompositeSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_RectangularCompositeSurface self, StepGeom_RectangularCompositeSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_RectangularCompositeSurface self, Handle_StepGeom_RectangularCompositeSurface theHandle) -> Handle_StepGeom_RectangularCompositeSurface
        assign(Handle_StepGeom_RectangularCompositeSurface self, StepGeom_RectangularCompositeSurface thePtr) -> Handle_StepGeom_RectangularCompositeSurface
        assign(Handle_StepGeom_RectangularCompositeSurface self, Handle_StepGeom_RectangularCompositeSurface theHandle) -> Handle_StepGeom_RectangularCompositeSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_RectangularCompositeSurface self) -> StepGeom_RectangularCompositeSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_RectangularCompositeSurface self) -> StepGeom_RectangularCompositeSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_RectangularCompositeSurface self) -> StepGeom_RectangularCompositeSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_RectangularCompositeSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_RectangularCompositeSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_RectangularCompositeSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_RectangularCompositeSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_RectangularCompositeSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray2OfSurfacePatch aSegments)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfSurfacePatch

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_Init(self, *args)


    def SetSegments(self, *args):
        """
        SetSegments(Handle_StepGeom_RectangularCompositeSurface self, Handle_StepGeom_HArray2OfSurfacePatch aSegments)

        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfSurfacePatch

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_SetSegments(self, *args)


    def Segments(self, *args):
        """
        Segments(Handle_StepGeom_RectangularCompositeSurface self) -> Handle_StepGeom_HArray2OfSurfacePatch

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfSurfacePatch

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        SegmentsValue(Handle_StepGeom_RectangularCompositeSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_SurfacePatch

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_SurfacePatch

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_SegmentsValue(self, *args)


    def NbSegmentsI(self, *args):
        """
        NbSegmentsI(Handle_StepGeom_RectangularCompositeSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_NbSegmentsI(self, *args)


    def NbSegmentsJ(self, *args):
        """
        NbSegmentsJ(Handle_StepGeom_RectangularCompositeSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_NbSegmentsJ(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_RectangularCompositeSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_RectangularCompositeSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_RectangularCompositeSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_RectangularCompositeSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_RectangularCompositeSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_RectangularCompositeSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_RectangularCompositeSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_RectangularCompositeSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_RectangularCompositeSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_RectangularCompositeSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_RectangularCompositeSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_RectangularCompositeSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_RectangularCompositeSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_RectangularCompositeSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_RectangularCompositeSurface_swigregister = _StepGeom.Handle_StepGeom_RectangularCompositeSurface_swigregister
Handle_StepGeom_RectangularCompositeSurface_swigregister(Handle_StepGeom_RectangularCompositeSurface)

def Handle_StepGeom_RectangularCompositeSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_DownCast(thing)
Handle_StepGeom_RectangularCompositeSurface_DownCast = _StepGeom.Handle_StepGeom_RectangularCompositeSurface_DownCast

class StepGeom_SeamCurve(StepGeom_SurfaceCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_SeamCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_SeamCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_SeamCurve self) -> StepGeom_SeamCurve

        Returns a SeamCurve


        """
        this = _StepGeom.new_StepGeom_SeamCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_SeamCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_SeamCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_SeamCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_SeamCurve
StepGeom_SeamCurve_swigregister = _StepGeom.StepGeom_SeamCurve_swigregister
StepGeom_SeamCurve_swigregister(StepGeom_SeamCurve)

def StepGeom_SeamCurve_get_type_name(*args):
    """
    StepGeom_SeamCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_SeamCurve_get_type_name(*args)

def StepGeom_SeamCurve_get_type_descriptor(*args):
    """
    StepGeom_SeamCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_SeamCurve_get_type_descriptor(*args)

class Handle_StepGeom_RationalBSplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_RationalBSplineSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_RationalBSplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_RationalBSplineSurface self, StepGeom_RationalBSplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_RationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface theHandle) -> Handle_StepGeom_RationalBSplineSurface
        assign(Handle_StepGeom_RationalBSplineSurface self, StepGeom_RationalBSplineSurface thePtr) -> Handle_StepGeom_RationalBSplineSurface
        assign(Handle_StepGeom_RationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface theHandle) -> Handle_StepGeom_RationalBSplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_RationalBSplineSurface self) -> StepGeom_RationalBSplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_RationalBSplineSurface self) -> StepGeom_RationalBSplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_RationalBSplineSurface self) -> StepGeom_RationalBSplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_RationalBSplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_RationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_RationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_RationalBSplineSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_RationalBSplineSurface self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_Init(self, *args)


    def SetWeightsData(self, *args):
        """
        SetWeightsData(Handle_StepGeom_RationalBSplineSurface self, Handle_TColStd_HArray2OfReal aWeightsData)

        :type aWeightsData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        WeightsData(Handle_StepGeom_RationalBSplineSurface self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        WeightsDataValue(Handle_StepGeom_RationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Standard_Real

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        NbWeightsDataI(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        NbWeightsDataJ(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_NbWeightsDataJ(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_RationalBSplineSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_RationalBSplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_RationalBSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_RationalBSplineSurface self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_RationalBSplineSurface self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_RationalBSplineSurface self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_RationalBSplineSurface self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_RationalBSplineSurface self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_RationalBSplineSurface self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_RationalBSplineSurface self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_RationalBSplineSurface self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_RationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_RationalBSplineSurface self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_RationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_RationalBSplineSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_RationalBSplineSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_RationalBSplineSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_RationalBSplineSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_RationalBSplineSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_RationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_RationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_RationalBSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_RationalBSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_RationalBSplineSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_RationalBSplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_RationalBSplineSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_RationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_RationalBSplineSurface_swigregister
Handle_StepGeom_RationalBSplineSurface_swigregister(Handle_StepGeom_RationalBSplineSurface)

def Handle_StepGeom_RationalBSplineSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_RationalBSplineSurface_DownCast(thing)
Handle_StepGeom_RationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_RationalBSplineSurface_DownCast

class Handle_StepGeom_BSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BSplineCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BSplineCurve self, StepGeom_BSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BSplineCurve self, Handle_StepGeom_BSplineCurve theHandle) -> Handle_StepGeom_BSplineCurve
        assign(Handle_StepGeom_BSplineCurve self, StepGeom_BSplineCurve thePtr) -> Handle_StepGeom_BSplineCurve
        assign(Handle_StepGeom_BSplineCurve self, Handle_StepGeom_BSplineCurve theHandle) -> Handle_StepGeom_BSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BSplineCurve self) -> StepGeom_BSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BSplineCurve self) -> StepGeom_BSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BSplineCurve self) -> StepGeom_BSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineCurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_BSplineCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_Init(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_BSplineCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_BSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BSplineCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BSplineCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BSplineCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_BSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_BSplineCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_BSplineCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_BSplineCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_BSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BSplineCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BSplineCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_SelfIntersect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BSplineCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BSplineCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BSplineCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BSplineCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_BSplineCurve_swigregister = _StepGeom.Handle_StepGeom_BSplineCurve_swigregister
Handle_StepGeom_BSplineCurve_swigregister(Handle_StepGeom_BSplineCurve)

def Handle_StepGeom_BSplineCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BSplineCurve_DownCast(thing)
Handle_StepGeom_BSplineCurve_DownCast = _StepGeom.Handle_StepGeom_BSplineCurve_DownCast

class StepGeom_CurveOnSurface(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepGeom_CurveOnSurface self) -> StepGeom_CurveOnSurface

        Returns a CurveOnSurface SelectType


        """
        this = _StepGeom.new_StepGeom_CurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepGeom_CurveOnSurface self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a CurveOnSurface Kind Entity that is :
        1 -> Pcurve
        2 -> SurfaceCurve
        3 -> CompositeCurveOnSurface
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_CurveOnSurface_CaseNum(self, *args)


    def Pcurve(self, *args):
        """
        Pcurve(StepGeom_CurveOnSurface self) -> Handle_StepGeom_Pcurve

        returns Value as a Pcurve (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Pcurve

        """
        return _StepGeom.StepGeom_CurveOnSurface_Pcurve(self, *args)


    def SurfaceCurve(self, *args):
        """
        SurfaceCurve(StepGeom_CurveOnSurface self) -> Handle_StepGeom_SurfaceCurve

        returns Value as a SurfaceCurve (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceCurve

        """
        return _StepGeom.StepGeom_CurveOnSurface_SurfaceCurve(self, *args)


    def CompositeCurveOnSurface(self, *args):
        """
        CompositeCurveOnSurface(StepGeom_CurveOnSurface self) -> Handle_StepGeom_CompositeCurveOnSurface

        returns Value as a CompositeCurveOnSurface (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveOnSurface

        """
        return _StepGeom.StepGeom_CurveOnSurface_CompositeCurveOnSurface(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_CurveOnSurface
StepGeom_CurveOnSurface_swigregister = _StepGeom.StepGeom_CurveOnSurface_swigregister
StepGeom_CurveOnSurface_swigregister(StepGeom_CurveOnSurface)

class Handle_StepGeom_BoundaryCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BoundaryCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BoundaryCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BoundaryCurve self, StepGeom_BoundaryCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BoundaryCurve self, Handle_StepGeom_BoundaryCurve theHandle) -> Handle_StepGeom_BoundaryCurve
        assign(Handle_StepGeom_BoundaryCurve self, StepGeom_BoundaryCurve thePtr) -> Handle_StepGeom_BoundaryCurve
        assign(Handle_StepGeom_BoundaryCurve self, Handle_StepGeom_BoundaryCurve theHandle) -> Handle_StepGeom_BoundaryCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BoundaryCurve self) -> StepGeom_BoundaryCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BoundaryCurve self) -> StepGeom_BoundaryCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BoundaryCurve self) -> StepGeom_BoundaryCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BoundaryCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BoundaryCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BoundaryCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BoundaryCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BoundaryCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BoundaryCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BoundaryCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_BoundaryCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_Init(self, *args)


    def SetSegments(self, *args):
        """
        SetSegments(Handle_StepGeom_BoundaryCurve self, Handle_StepGeom_HArray1OfCompositeCurveSegment aSegments)

        :type aSegments: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_SetSegments(self, *args)


    def Segments(self, *args):
        """
        Segments(Handle_StepGeom_BoundaryCurve self) -> Handle_StepGeom_HArray1OfCompositeCurveSegment

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        SegmentsValue(Handle_StepGeom_BoundaryCurve self, Standard_Integer const num) -> Handle_StepGeom_CompositeCurveSegment

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_SegmentsValue(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(Handle_StepGeom_BoundaryCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_NbSegments(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BoundaryCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BoundaryCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BoundaryCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BoundaryCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BoundaryCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BoundaryCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BoundaryCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BoundaryCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BoundaryCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BoundaryCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BoundaryCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BoundaryCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BoundaryCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BoundaryCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_BoundaryCurve_swigregister = _StepGeom.Handle_StepGeom_BoundaryCurve_swigregister
Handle_StepGeom_BoundaryCurve_swigregister(Handle_StepGeom_BoundaryCurve)

def Handle_StepGeom_BoundaryCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BoundaryCurve_DownCast(thing)
Handle_StepGeom_BoundaryCurve_DownCast = _StepGeom.Handle_StepGeom_BoundaryCurve_DownCast

class Handle_StepGeom_EvaluatedDegeneratePcurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_EvaluatedDegeneratePcurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_EvaluatedDegeneratePcurve self, StepGeom_EvaluatedDegeneratePcurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_StepGeom_EvaluatedDegeneratePcurve theHandle) -> Handle_StepGeom_EvaluatedDegeneratePcurve
        assign(Handle_StepGeom_EvaluatedDegeneratePcurve self, StepGeom_EvaluatedDegeneratePcurve thePtr) -> Handle_StepGeom_EvaluatedDegeneratePcurve
        assign(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_StepGeom_EvaluatedDegeneratePcurve theHandle) -> Handle_StepGeom_EvaluatedDegeneratePcurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> StepGeom_EvaluatedDegeneratePcurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> StepGeom_EvaluatedDegeneratePcurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> StepGeom_EvaluatedDegeneratePcurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_EvaluatedDegeneratePcurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_EvaluatedDegeneratePcurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve, Handle_StepGeom_CartesianPoint aEquivalentPoint)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation
        :type aEquivalentPoint: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_Init(self, *args)


    def SetEquivalentPoint(self, *args):
        """
        SetEquivalentPoint(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_StepGeom_CartesianPoint aEquivalentPoint)

        :type aEquivalentPoint: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_SetEquivalentPoint(self, *args)


    def EquivalentPoint(self, *args):
        """
        EquivalentPoint(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_EquivalentPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_BasisSurface(self, *args)


    def SetReferenceToCurve(self, *args):
        """
        SetReferenceToCurve(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve)

        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_SetReferenceToCurve(self, *args)


    def ReferenceToCurve(self, *args):
        """
        ReferenceToCurve(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> Handle_StepRepr_DefinitionalRepresentation

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_ReferenceToCurve(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_EvaluatedDegeneratePcurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_EvaluatedDegeneratePcurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_EvaluatedDegeneratePcurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_EvaluatedDegeneratePcurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_EvaluatedDegeneratePcurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_EvaluatedDegeneratePcurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_DecrementRefCounter(self, *args)

Handle_StepGeom_EvaluatedDegeneratePcurve_swigregister = _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_swigregister
Handle_StepGeom_EvaluatedDegeneratePcurve_swigregister(Handle_StepGeom_EvaluatedDegeneratePcurve)

def Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast(thing)
Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast = _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast

class Handle_StepGeom_DegenerateToroidalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_DegenerateToroidalSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_DegenerateToroidalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_DegenerateToroidalSurface self, StepGeom_DegenerateToroidalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_DegenerateToroidalSurface self, Handle_StepGeom_DegenerateToroidalSurface theHandle) -> Handle_StepGeom_DegenerateToroidalSurface
        assign(Handle_StepGeom_DegenerateToroidalSurface self, StepGeom_DegenerateToroidalSurface thePtr) -> Handle_StepGeom_DegenerateToroidalSurface
        assign(Handle_StepGeom_DegenerateToroidalSurface self, Handle_StepGeom_DegenerateToroidalSurface theHandle) -> Handle_StepGeom_DegenerateToroidalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_DegenerateToroidalSurface self) -> StepGeom_DegenerateToroidalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_DegenerateToroidalSurface self) -> StepGeom_DegenerateToroidalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_DegenerateToroidalSurface self) -> StepGeom_DegenerateToroidalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_DegenerateToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_DegenerateToroidalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_DegenerateToroidalSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_DegenerateToroidalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aMajorRadius, Standard_Real const aMinorRadius, Standard_Boolean const aSelectOuter)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aMajorRadius: float
        :type aMinorRadius: float
        :type aSelectOuter: bool

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_Init(self, *args)


    def SetSelectOuter(self, *args):
        """
        SetSelectOuter(Handle_StepGeom_DegenerateToroidalSurface self, Standard_Boolean const aSelectOuter)

        :type aSelectOuter: bool

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_SetSelectOuter(self, *args)


    def SelectOuter(self, *args):
        """
        SelectOuter(Handle_StepGeom_DegenerateToroidalSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_SelectOuter(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_DegenerateToroidalSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMajorRadius(self, *args):
        """
        SetMajorRadius(Handle_StepGeom_DegenerateToroidalSurface self, Standard_Real const aMajorRadius)

        :type aMajorRadius: float

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_SetMajorRadius(self, *args)


    def MajorRadius(self, *args):
        """
        MajorRadius(Handle_StepGeom_DegenerateToroidalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_MajorRadius(self, *args)


    def SetMinorRadius(self, *args):
        """
        SetMinorRadius(Handle_StepGeom_DegenerateToroidalSurface self, Standard_Real const aMinorRadius)

        :type aMinorRadius: float

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_SetMinorRadius(self, *args)


    def MinorRadius(self, *args):
        """
        MinorRadius(Handle_StepGeom_DegenerateToroidalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_MinorRadius(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_DegenerateToroidalSurface self, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_DegenerateToroidalSurface self) -> Handle_StepGeom_Axis2Placement3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_DegenerateToroidalSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_DegenerateToroidalSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_DegenerateToroidalSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_DegenerateToroidalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_DegenerateToroidalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_DegenerateToroidalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_DegenerateToroidalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_DegenerateToroidalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_DegenerateToroidalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_DegenerateToroidalSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_DegenerateToroidalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_DegenerateToroidalSurface_swigregister = _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_swigregister
Handle_StepGeom_DegenerateToroidalSurface_swigregister(Handle_StepGeom_DegenerateToroidalSurface)

def Handle_StepGeom_DegenerateToroidalSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_DownCast(thing)
Handle_StepGeom_DegenerateToroidalSurface_DownCast = _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_DownCast

class Handle_StepGeom_CartesianTransformationOperator2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_CartesianTransformationOperator2d self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_CartesianTransformationOperator2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_CartesianTransformationOperator2d self, StepGeom_CartesianTransformationOperator2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_StepGeom_CartesianTransformationOperator2d theHandle) -> Handle_StepGeom_CartesianTransformationOperator2d
        assign(Handle_StepGeom_CartesianTransformationOperator2d self, StepGeom_CartesianTransformationOperator2d thePtr) -> Handle_StepGeom_CartesianTransformationOperator2d
        assign(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_StepGeom_CartesianTransformationOperator2d theHandle) -> Handle_StepGeom_CartesianTransformationOperator2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_CartesianTransformationOperator2d self) -> StepGeom_CartesianTransformationOperator2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_CartesianTransformationOperator2d self) -> StepGeom_CartesianTransformationOperator2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_CartesianTransformationOperator2d self) -> StepGeom_CartesianTransformationOperator2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_CartesianTransformationOperator2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CartesianTransformationOperator2d

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_CartesianTransformationOperator2d self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasAaxis1, Handle_StepGeom_Direction aAxis1, Standard_Boolean const hasAaxis2, Handle_StepGeom_Direction aAxis2, Handle_StepGeom_CartesianPoint aLocalOrigin, Standard_Boolean const hasAscale, Standard_Real const aScale)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasAaxis1: bool
        :type aAxis1: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type hasAaxis2: bool
        :type aAxis2: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type aLocalOrigin: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type hasAscale: bool
        :type aScale: float

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_Init(self, *args)


    def SetAxis1(self, *args):
        """
        SetAxis1(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_StepGeom_Direction aAxis1)

        :type aAxis1: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_SetAxis1(self, *args)


    def UnSetAxis1(self, *args):
        """UnSetAxis1(Handle_StepGeom_CartesianTransformationOperator2d self)"""
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_UnSetAxis1(self, *args)


    def Axis1(self, *args):
        """
        Axis1(Handle_StepGeom_CartesianTransformationOperator2d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_Axis1(self, *args)


    def HasAxis1(self, *args):
        """
        HasAxis1(Handle_StepGeom_CartesianTransformationOperator2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_HasAxis1(self, *args)


    def SetAxis2(self, *args):
        """
        SetAxis2(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_StepGeom_Direction aAxis2)

        :type aAxis2: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_SetAxis2(self, *args)


    def UnSetAxis2(self, *args):
        """UnSetAxis2(Handle_StepGeom_CartesianTransformationOperator2d self)"""
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_UnSetAxis2(self, *args)


    def Axis2(self, *args):
        """
        Axis2(Handle_StepGeom_CartesianTransformationOperator2d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_Axis2(self, *args)


    def HasAxis2(self, *args):
        """
        HasAxis2(Handle_StepGeom_CartesianTransformationOperator2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_HasAxis2(self, *args)


    def SetLocalOrigin(self, *args):
        """
        SetLocalOrigin(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_StepGeom_CartesianPoint aLocalOrigin)

        :type aLocalOrigin: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_SetLocalOrigin(self, *args)


    def LocalOrigin(self, *args):
        """
        LocalOrigin(Handle_StepGeom_CartesianTransformationOperator2d self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_LocalOrigin(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Handle_StepGeom_CartesianTransformationOperator2d self, Standard_Real const aScale)

        :type aScale: float

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_SetScale(self, *args)


    def UnSetScale(self, *args):
        """UnSetScale(Handle_StepGeom_CartesianTransformationOperator2d self)"""
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_UnSetScale(self, *args)


    def Scale(self, *args):
        """
        Scale(Handle_StepGeom_CartesianTransformationOperator2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_Scale(self, *args)


    def HasScale(self, *args):
        """
        HasScale(Handle_StepGeom_CartesianTransformationOperator2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_HasScale(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_CartesianTransformationOperator2d self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_CartesianTransformationOperator2d self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_CartesianTransformationOperator2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_CartesianTransformationOperator2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_CartesianTransformationOperator2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_CartesianTransformationOperator2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_CartesianTransformationOperator2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_CartesianTransformationOperator2d self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_CartesianTransformationOperator2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_DecrementRefCounter(self, *args)

Handle_StepGeom_CartesianTransformationOperator2d_swigregister = _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_swigregister
Handle_StepGeom_CartesianTransformationOperator2d_swigregister(Handle_StepGeom_CartesianTransformationOperator2d)

def Handle_StepGeom_CartesianTransformationOperator2d_DownCast(thing):
    return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_DownCast(thing)
Handle_StepGeom_CartesianTransformationOperator2d_DownCast = _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_DownCast

class NCollection_Array1_StepGeom_TrimmingSelect(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepGeom_TrimmingSelect self) -> NCollection_Array1< StepGeom_TrimmingSelect >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepGeom_TrimmingSelect self) -> NCollection_Array1< StepGeom_TrimmingSelect >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepGeom_TrimmingSelect self) -> NCollection_Array1< StepGeom_TrimmingSelect >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepGeom_TrimmingSelect self) -> NCollection_Array1< StepGeom_TrimmingSelect >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepGeom.new_NCollection_Array1_StepGeom_TrimmingSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepGeom_TrimmingSelect self, StepGeom_TrimmingSelect theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepGeom_TrimmingSelect self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepGeom_TrimmingSelect self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepGeom_TrimmingSelect self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepGeom_TrimmingSelect self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepGeom_TrimmingSelect self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepGeom_TrimmingSelect self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepGeom_TrimmingSelect self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepGeom_TrimmingSelect self, NCollection_Array1_StepGeom_TrimmingSelect theOther) -> NCollection_Array1_StepGeom_TrimmingSelect

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepGeom_TrimmingSelect self, NCollection_Array1_StepGeom_TrimmingSelect theOther) -> NCollection_Array1_StepGeom_TrimmingSelect

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepGeom_TrimmingSelect self, NCollection_Array1_StepGeom_TrimmingSelect theOther) -> NCollection_Array1_StepGeom_TrimmingSelect
        assign(NCollection_Array1_StepGeom_TrimmingSelect self, NCollection_Array1_StepGeom_TrimmingSelect theOther) -> NCollection_Array1_StepGeom_TrimmingSelect

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepGeom_TrimmingSelect self) -> StepGeom_TrimmingSelect

        @return first element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepGeom_TrimmingSelect self) -> StepGeom_TrimmingSelect

        @return last element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepGeom_TrimmingSelect self, Standard_Integer const theIndex) -> StepGeom_TrimmingSelect

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepGeom_TrimmingSelect self, Standard_Integer const theIndex, StepGeom_TrimmingSelect theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepGeom_TrimmingSelect self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_Resize(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array1_StepGeom_TrimmingSelect
NCollection_Array1_StepGeom_TrimmingSelect_swigregister = _StepGeom.NCollection_Array1_StepGeom_TrimmingSelect_swigregister
NCollection_Array1_StepGeom_TrimmingSelect_swigregister(NCollection_Array1_StepGeom_TrimmingSelect)


try:
	StepGeom_Array1OfTrimmingSelect = NCollection_Array1_StepGeom_TrimmingSelect
except NameError:
	pass # does not exist, probably ignored

class Handle_StepGeom_UniformCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_UniformCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_UniformCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_UniformCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_UniformCurve self, StepGeom_UniformCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_UniformCurve self, Handle_StepGeom_UniformCurve theHandle) -> Handle_StepGeom_UniformCurve
        assign(Handle_StepGeom_UniformCurve self, StepGeom_UniformCurve thePtr) -> Handle_StepGeom_UniformCurve
        assign(Handle_StepGeom_UniformCurve self, Handle_StepGeom_UniformCurve theHandle) -> Handle_StepGeom_UniformCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_UniformCurve self) -> StepGeom_UniformCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_UniformCurve self) -> StepGeom_UniformCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_UniformCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_UniformCurve self) -> StepGeom_UniformCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_UniformCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_UniformCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_UniformCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_UniformCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_UniformCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_UniformCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_UniformCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_UniformCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_UniformCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_UniformCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_Init(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_UniformCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_UniformCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_UniformCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_UniformCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_UniformCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_UniformCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_UniformCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_UniformCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_UniformCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_UniformCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_UniformCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_UniformCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_UniformCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_UniformCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_UniformCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_UniformCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_UniformCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_UniformCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_UniformCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_UniformCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_UniformCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_UniformCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_UniformCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_UniformCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_UniformCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_UniformCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_UniformCurve_swigregister = _StepGeom.Handle_StepGeom_UniformCurve_swigregister
Handle_StepGeom_UniformCurve_swigregister(Handle_StepGeom_UniformCurve)

def Handle_StepGeom_UniformCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_UniformCurve_DownCast(thing)
Handle_StepGeom_UniformCurve_DownCast = _StepGeom.Handle_StepGeom_UniformCurve_DownCast

class Handle_StepGeom_SurfaceOfRevolution(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SurfaceOfRevolution self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SurfaceOfRevolution self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SurfaceOfRevolution self, StepGeom_SurfaceOfRevolution thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SurfaceOfRevolution self, Handle_StepGeom_SurfaceOfRevolution theHandle) -> Handle_StepGeom_SurfaceOfRevolution
        assign(Handle_StepGeom_SurfaceOfRevolution self, StepGeom_SurfaceOfRevolution thePtr) -> Handle_StepGeom_SurfaceOfRevolution
        assign(Handle_StepGeom_SurfaceOfRevolution self, Handle_StepGeom_SurfaceOfRevolution theHandle) -> Handle_StepGeom_SurfaceOfRevolution

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SurfaceOfRevolution self) -> StepGeom_SurfaceOfRevolution

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SurfaceOfRevolution self) -> StepGeom_SurfaceOfRevolution

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SurfaceOfRevolution self) -> StepGeom_SurfaceOfRevolution

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SurfaceOfRevolution___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceOfRevolution_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceOfRevolution

    def Init(self, *args):
        """
        Init(Handle_StepGeom_SurfaceOfRevolution self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aSweptCurve, Handle_StepGeom_Axis1Placement aAxisPosition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aAxisPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis1Placement

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_Init(self, *args)


    def SetAxisPosition(self, *args):
        """
        SetAxisPosition(Handle_StepGeom_SurfaceOfRevolution self, Handle_StepGeom_Axis1Placement aAxisPosition)

        :type aAxisPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis1Placement

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_SetAxisPosition(self, *args)


    def AxisPosition(self, *args):
        """
        AxisPosition(Handle_StepGeom_SurfaceOfRevolution self) -> Handle_StepGeom_Axis1Placement

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis1Placement

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_AxisPosition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SurfaceOfRevolution self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceOfRevolution_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetSweptCurve(self, *args):
        """
        SetSweptCurve(Handle_StepGeom_SurfaceOfRevolution self, Handle_StepGeom_Curve aSweptCurve)

        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_SetSweptCurve(self, *args)


    def SweptCurve(self, *args):
        """
        SweptCurve(Handle_StepGeom_SurfaceOfRevolution self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_SweptCurve(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_SurfaceOfRevolution self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_SurfaceOfRevolution self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SurfaceOfRevolution self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SurfaceOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SurfaceOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SurfaceOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SurfaceOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SurfaceOfRevolution self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SurfaceOfRevolution self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SurfaceOfRevolution self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SurfaceOfRevolution self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_DecrementRefCounter(self, *args)

Handle_StepGeom_SurfaceOfRevolution_swigregister = _StepGeom.Handle_StepGeom_SurfaceOfRevolution_swigregister
Handle_StepGeom_SurfaceOfRevolution_swigregister(Handle_StepGeom_SurfaceOfRevolution)

def Handle_StepGeom_SurfaceOfRevolution_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_DownCast(thing)
Handle_StepGeom_SurfaceOfRevolution_DownCast = _StepGeom.Handle_StepGeom_SurfaceOfRevolution_DownCast

class Handle_StepGeom_ElementarySurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_ElementarySurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_ElementarySurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_ElementarySurface self, StepGeom_ElementarySurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_ElementarySurface self, Handle_StepGeom_ElementarySurface theHandle) -> Handle_StepGeom_ElementarySurface
        assign(Handle_StepGeom_ElementarySurface self, StepGeom_ElementarySurface thePtr) -> Handle_StepGeom_ElementarySurface
        assign(Handle_StepGeom_ElementarySurface self, Handle_StepGeom_ElementarySurface theHandle) -> Handle_StepGeom_ElementarySurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_ElementarySurface self) -> StepGeom_ElementarySurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_ElementarySurface self) -> StepGeom_ElementarySurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_ElementarySurface self) -> StepGeom_ElementarySurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_ElementarySurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_ElementarySurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_ElementarySurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_ElementarySurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_ElementarySurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_ElementarySurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_Init(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_ElementarySurface self, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_ElementarySurface self) -> Handle_StepGeom_Axis2Placement3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_Position(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_ElementarySurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_ElementarySurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_ElementarySurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_ElementarySurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_ElementarySurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_ElementarySurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_ElementarySurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_ElementarySurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_ElementarySurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_ElementarySurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_ElementarySurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_ElementarySurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_ElementarySurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_ElementarySurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_ElementarySurface_DecrementRefCounter(self, *args)

Handle_StepGeom_ElementarySurface_swigregister = _StepGeom.Handle_StepGeom_ElementarySurface_swigregister
Handle_StepGeom_ElementarySurface_swigregister(Handle_StepGeom_ElementarySurface)

def Handle_StepGeom_ElementarySurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_ElementarySurface_DownCast(thing)
Handle_StepGeom_ElementarySurface_DownCast = _StepGeom.Handle_StepGeom_ElementarySurface_DownCast

class Handle_StepGeom_BoundedCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BoundedCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BoundedCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BoundedCurve self, StepGeom_BoundedCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BoundedCurve self, Handle_StepGeom_BoundedCurve theHandle) -> Handle_StepGeom_BoundedCurve
        assign(Handle_StepGeom_BoundedCurve self, StepGeom_BoundedCurve thePtr) -> Handle_StepGeom_BoundedCurve
        assign(Handle_StepGeom_BoundedCurve self, Handle_StepGeom_BoundedCurve theHandle) -> Handle_StepGeom_BoundedCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BoundedCurve self) -> StepGeom_BoundedCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BoundedCurve self) -> StepGeom_BoundedCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BoundedCurve self) -> StepGeom_BoundedCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BoundedCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BoundedCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BoundedCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BoundedCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BoundedCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BoundedCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BoundedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_BoundedCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BoundedCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BoundedCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BoundedCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BoundedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BoundedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BoundedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BoundedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BoundedCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BoundedCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BoundedCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BoundedCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BoundedCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_BoundedCurve_swigregister = _StepGeom.Handle_StepGeom_BoundedCurve_swigregister
Handle_StepGeom_BoundedCurve_swigregister(Handle_StepGeom_BoundedCurve)

def Handle_StepGeom_BoundedCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BoundedCurve_DownCast(thing)
Handle_StepGeom_BoundedCurve_DownCast = _StepGeom.Handle_StepGeom_BoundedCurve_DownCast

class Handle_StepGeom_BSplineSurfaceWithKnots(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BSplineSurfaceWithKnots self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BSplineSurfaceWithKnots self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BSplineSurfaceWithKnots self, StepGeom_BSplineSurfaceWithKnots thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_StepGeom_BSplineSurfaceWithKnots theHandle) -> Handle_StepGeom_BSplineSurfaceWithKnots
        assign(Handle_StepGeom_BSplineSurfaceWithKnots self, StepGeom_BSplineSurfaceWithKnots thePtr) -> Handle_StepGeom_BSplineSurfaceWithKnots
        assign(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_StepGeom_BSplineSurfaceWithKnots theHandle) -> Handle_StepGeom_BSplineSurfaceWithKnots

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BSplineSurfaceWithKnots self) -> StepGeom_BSplineSurfaceWithKnots

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BSplineSurfaceWithKnots self) -> StepGeom_BSplineSurfaceWithKnots

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BSplineSurfaceWithKnots self) -> StepGeom_BSplineSurfaceWithKnots

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BSplineSurfaceWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineSurfaceWithKnots

    def Init(self, *args):
        """
        Init(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_TCollection_HAsciiString aName, Standard_Integer const aUDegree, Standard_Integer const aVDegree, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList, StepGeom_BSplineSurfaceForm const aSurfaceForm, StepData_Logical const aUClosed, StepData_Logical const aVClosed, StepData_Logical const aSelfIntersect, Handle_TColStd_HArray1OfInteger aUMultiplicities, Handle_TColStd_HArray1OfInteger aVMultiplicities, Handle_TColStd_HArray1OfReal aUKnots, Handle_TColStd_HArray1OfReal aVKnots, StepGeom_KnotType const aKnotSpec)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUDegree: int
        :type aVDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint
        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm
        :type aUClosed: OCC.wrapper.StepData.StepData_Logical
        :type aVClosed: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aUMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aVMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aUKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aVKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_Init(self, *args)


    def SetUMultiplicities(self, *args):
        """
        SetUMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_TColStd_HArray1OfInteger aUMultiplicities)

        :type aUMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetUMultiplicities(self, *args)


    def UMultiplicities(self, *args):
        """
        UMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_UMultiplicities(self, *args)


    def UMultiplicitiesValue(self, *args):
        """
        UMultiplicitiesValue(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_UMultiplicitiesValue(self, *args)


    def NbUMultiplicities(self, *args):
        """
        NbUMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_NbUMultiplicities(self, *args)


    def SetVMultiplicities(self, *args):
        """
        SetVMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_TColStd_HArray1OfInteger aVMultiplicities)

        :type aVMultiplicities: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetVMultiplicities(self, *args)


    def VMultiplicities(self, *args):
        """
        VMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_VMultiplicities(self, *args)


    def VMultiplicitiesValue(self, *args):
        """
        VMultiplicitiesValue(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num) -> Standard_Integer

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_VMultiplicitiesValue(self, *args)


    def NbVMultiplicities(self, *args):
        """
        NbVMultiplicities(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_NbVMultiplicities(self, *args)


    def SetUKnots(self, *args):
        """
        SetUKnots(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_TColStd_HArray1OfReal aUKnots)

        :type aUKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetUKnots(self, *args)


    def UKnots(self, *args):
        """
        UKnots(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_UKnots(self, *args)


    def UKnotsValue(self, *args):
        """
        UKnotsValue(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_UKnotsValue(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_NbUKnots(self, *args)


    def SetVKnots(self, *args):
        """
        SetVKnots(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_TColStd_HArray1OfReal aVKnots)

        :type aVKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetVKnots(self, *args)


    def VKnots(self, *args):
        """
        VKnots(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_VKnots(self, *args)


    def VKnotsValue(self, *args):
        """
        VKnotsValue(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num) -> Standard_Real

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_VKnotsValue(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_NbVKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        SetKnotSpec(Handle_StepGeom_BSplineSurfaceWithKnots self, StepGeom_KnotType const aKnotSpec)

        :type aKnotSpec: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        KnotSpec(Handle_StepGeom_BSplineSurfaceWithKnots self) -> StepGeom_KnotType

        :rtype: OCC.wrapper.StepGeom.StepGeom_KnotType

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_KnotSpec(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BSplineSurfaceWithKnots self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUDegree(self, *args):
        """
        SetUDegree(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const aUDegree)

        :type aUDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        SetVDegree(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const aVDegree)

        :type aVDegree: int

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_StepGeom_HArray2OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Handle_StepGeom_HArray2OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_Integer const num1, Standard_Integer const num2) -> Handle_StepGeom_CartesianPoint

        :type num1: int
        :type num2: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        NbControlPointsListI(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        NbControlPointsListJ(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        SetSurfaceForm(Handle_StepGeom_BSplineSurfaceWithKnots self, StepGeom_BSplineSurfaceForm const aSurfaceForm)

        :type aSurfaceForm: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        SurfaceForm(Handle_StepGeom_BSplineSurfaceWithKnots self) -> StepGeom_BSplineSurfaceForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        SetUClosed(Handle_StepGeom_BSplineSurfaceWithKnots self, StepData_Logical const aUClosed)

        :type aUClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        UClosed(Handle_StepGeom_BSplineSurfaceWithKnots self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        SetVClosed(Handle_StepGeom_BSplineSurfaceWithKnots self, StepData_Logical const aVClosed)

        :type aVClosed: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        VClosed(Handle_StepGeom_BSplineSurfaceWithKnots self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BSplineSurfaceWithKnots self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BSplineSurfaceWithKnots self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BSplineSurfaceWithKnots self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BSplineSurfaceWithKnots self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BSplineSurfaceWithKnots self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BSplineSurfaceWithKnots self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BSplineSurfaceWithKnots self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_DecrementRefCounter(self, *args)

Handle_StepGeom_BSplineSurfaceWithKnots_swigregister = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_swigregister
Handle_StepGeom_BSplineSurfaceWithKnots_swigregister(Handle_StepGeom_BSplineSurfaceWithKnots)

def Handle_StepGeom_BSplineSurfaceWithKnots_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_DownCast(thing)
Handle_StepGeom_BSplineSurfaceWithKnots_DownCast = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_DownCast

class Handle_StepGeom_SphericalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SphericalSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SphericalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SphericalSurface self, StepGeom_SphericalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SphericalSurface self, Handle_StepGeom_SphericalSurface theHandle) -> Handle_StepGeom_SphericalSurface
        assign(Handle_StepGeom_SphericalSurface self, StepGeom_SphericalSurface thePtr) -> Handle_StepGeom_SphericalSurface
        assign(Handle_StepGeom_SphericalSurface self, Handle_StepGeom_SphericalSurface theHandle) -> Handle_StepGeom_SphericalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SphericalSurface self) -> StepGeom_SphericalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SphericalSurface self) -> StepGeom_SphericalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SphericalSurface self) -> StepGeom_SphericalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SphericalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SphericalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SphericalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SphericalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SphericalSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_SphericalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aRadius)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aRadius: float

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(Handle_StepGeom_SphericalSurface self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_StepGeom_SphericalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_Radius(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SphericalSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SphericalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SphericalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_SphericalSurface self, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_SphericalSurface self) -> Handle_StepGeom_Axis2Placement3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_SphericalSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_SphericalSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SphericalSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SphericalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SphericalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SphericalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SphericalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SphericalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SphericalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SphericalSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SphericalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SphericalSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_SphericalSurface_swigregister = _StepGeom.Handle_StepGeom_SphericalSurface_swigregister
Handle_StepGeom_SphericalSurface_swigregister(Handle_StepGeom_SphericalSurface)

def Handle_StepGeom_SphericalSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SphericalSurface_DownCast(thing)
Handle_StepGeom_SphericalSurface_DownCast = _StepGeom.Handle_StepGeom_SphericalSurface_DownCast

class NCollection_Array2_Handle_StepGeom_CartesianPoint(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _StepGeom.new_NCollection_Array2_Handle_StepGeom_CartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Handle_StepGeom_CartesianPoint self, Handle_StepGeom_CartesianPoint theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Handle_StepGeom_CartesianPoint self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Handle_StepGeom_CartesianPoint self, NCollection_Array2_Handle_StepGeom_CartesianPoint theOther) -> NCollection_Array2_Handle_StepGeom_CartesianPoint

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Handle_StepGeom_CartesianPoint self, NCollection_Array2_Handle_StepGeom_CartesianPoint theOther) -> NCollection_Array2_Handle_StepGeom_CartesianPoint

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Handle_StepGeom_CartesianPoint self, Standard_Integer const theRow, Standard_Integer const theCol) -> Handle_StepGeom_CartesianPoint

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Handle_StepGeom_CartesianPoint self, Standard_Integer const theRow, Standard_Integer const theCol, Handle_StepGeom_CartesianPoint theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_SetValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array2_Handle_StepGeom_CartesianPoint
NCollection_Array2_Handle_StepGeom_CartesianPoint_swigregister = _StepGeom.NCollection_Array2_Handle_StepGeom_CartesianPoint_swigregister
NCollection_Array2_Handle_StepGeom_CartesianPoint_swigregister(NCollection_Array2_Handle_StepGeom_CartesianPoint)


try:
	StepGeom_Array2OfCartesianPoint = NCollection_Array2_Handle_StepGeom_CartesianPoint
except NameError:
	pass # does not exist, probably ignored

class Handle_StepGeom_OffsetSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_OffsetSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_OffsetSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_OffsetSurface self, StepGeom_OffsetSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_OffsetSurface self, Handle_StepGeom_OffsetSurface theHandle) -> Handle_StepGeom_OffsetSurface
        assign(Handle_StepGeom_OffsetSurface self, StepGeom_OffsetSurface thePtr) -> Handle_StepGeom_OffsetSurface
        assign(Handle_StepGeom_OffsetSurface self, Handle_StepGeom_OffsetSurface theHandle) -> Handle_StepGeom_OffsetSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_OffsetSurface self) -> StepGeom_OffsetSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_OffsetSurface self) -> StepGeom_OffsetSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_OffsetSurface self) -> StepGeom_OffsetSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_OffsetSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_OffsetSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_OffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_OffsetSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_OffsetSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_OffsetSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Standard_Real const aDistance, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aDistance: float
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(Handle_StepGeom_OffsetSurface self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_StepGeom_OffsetSurface self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_BasisSurface(self, *args)


    def SetDistance(self, *args):
        """
        SetDistance(Handle_StepGeom_OffsetSurface self, Standard_Real const aDistance)

        :type aDistance: float

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_SetDistance(self, *args)


    def Distance(self, *args):
        """
        Distance(Handle_StepGeom_OffsetSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_Distance(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_OffsetSurface self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_OffsetSurface self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_SelfIntersect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_OffsetSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_OffsetSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_OffsetSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_OffsetSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_OffsetSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_OffsetSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_OffsetSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_OffsetSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_OffsetSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_OffsetSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_OffsetSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_OffsetSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_OffsetSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_OffsetSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OffsetSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_OffsetSurface_swigregister = _StepGeom.Handle_StepGeom_OffsetSurface_swigregister
Handle_StepGeom_OffsetSurface_swigregister(Handle_StepGeom_OffsetSurface)

def Handle_StepGeom_OffsetSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_OffsetSurface_DownCast(thing)
Handle_StepGeom_OffsetSurface_DownCast = _StepGeom.Handle_StepGeom_OffsetSurface_DownCast

class Handle_StepGeom_BezierCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BezierCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BezierCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BezierCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BezierCurve self, StepGeom_BezierCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BezierCurve self, Handle_StepGeom_BezierCurve theHandle) -> Handle_StepGeom_BezierCurve
        assign(Handle_StepGeom_BezierCurve self, StepGeom_BezierCurve thePtr) -> Handle_StepGeom_BezierCurve
        assign(Handle_StepGeom_BezierCurve self, Handle_StepGeom_BezierCurve theHandle) -> Handle_StepGeom_BezierCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BezierCurve self) -> StepGeom_BezierCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BezierCurve self) -> StepGeom_BezierCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BezierCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BezierCurve self) -> StepGeom_BezierCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BezierCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BezierCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BezierCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BezierCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BezierCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BezierCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BezierCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BezierCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_BezierCurve self, Handle_TCollection_HAsciiString aName, Standard_Integer const aDegree, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList, StepGeom_BSplineCurveForm const aCurveForm, StepData_Logical const aClosedCurve, StepData_Logical const aSelfIntersect)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDegree: int
        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint
        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm
        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_Init(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(Handle_StepGeom_BezierCurve self, Standard_Integer const aDegree)

        :type aDegree: int

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_StepGeom_BezierCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        SetControlPointsList(Handle_StepGeom_BezierCurve self, Handle_StepGeom_HArray1OfCartesianPoint aControlPointsList)

        :type aControlPointsList: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        ControlPointsList(Handle_StepGeom_BezierCurve self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        ControlPointsListValue(Handle_StepGeom_BezierCurve self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        NbControlPointsList(Handle_StepGeom_BezierCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        SetCurveForm(Handle_StepGeom_BezierCurve self, StepGeom_BSplineCurveForm const aCurveForm)

        :type aCurveForm: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        CurveForm(Handle_StepGeom_BezierCurve self) -> StepGeom_BSplineCurveForm

        :rtype: OCC.wrapper.StepGeom.StepGeom_BSplineCurveForm

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        SetClosedCurve(Handle_StepGeom_BezierCurve self, StepData_Logical const aClosedCurve)

        :type aClosedCurve: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        ClosedCurve(Handle_StepGeom_BezierCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_BezierCurve self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_BezierCurve self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_SelfIntersect(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BezierCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BezierCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BezierCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BezierCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BezierCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BezierCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BezierCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BezierCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BezierCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BezierCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BezierCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BezierCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BezierCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BezierCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_BezierCurve_swigregister = _StepGeom.Handle_StepGeom_BezierCurve_swigregister
Handle_StepGeom_BezierCurve_swigregister(Handle_StepGeom_BezierCurve)

def Handle_StepGeom_BezierCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BezierCurve_DownCast(thing)
Handle_StepGeom_BezierCurve_DownCast = _StepGeom.Handle_StepGeom_BezierCurve_DownCast

class Handle_StepGeom_HArray1OfCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_HArray1OfCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_HArray1OfCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_HArray1OfCurve self, StepGeom_HArray1OfCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_HArray1OfCurve self, Handle_StepGeom_HArray1OfCurve theHandle) -> Handle_StepGeom_HArray1OfCurve
        assign(Handle_StepGeom_HArray1OfCurve self, StepGeom_HArray1OfCurve thePtr) -> Handle_StepGeom_HArray1OfCurve
        assign(Handle_StepGeom_HArray1OfCurve self, Handle_StepGeom_HArray1OfCurve theHandle) -> Handle_StepGeom_HArray1OfCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_HArray1OfCurve self) -> StepGeom_HArray1OfCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_HArray1OfCurve self) -> StepGeom_HArray1OfCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_HArray1OfCurve self) -> StepGeom_HArray1OfCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_HArray1OfCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_HArray1OfCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_HArray1OfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfCurve

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCurve

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepGeom_HArray1OfCurve self) -> NCollection_Array1_Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array1OfCurve

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_HArray1OfCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepGeom_HArray1OfCurve self) -> NCollection_Array1< opencascade::handle< StepGeom_Curve > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepGeom_HArray1OfCurve self) -> NCollection_Array1< opencascade::handle< StepGeom_Curve > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepGeom_HArray1OfCurve self) -> NCollection_Array1< opencascade::handle< StepGeom_Curve > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepGeom_HArray1OfCurve self) -> NCollection_Array1< opencascade::handle< StepGeom_Curve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepGeom_HArray1OfCurve self, Handle_StepGeom_Curve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepGeom_HArray1OfCurve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepGeom_HArray1OfCurve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepGeom_HArray1OfCurve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepGeom_HArray1OfCurve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepGeom_HArray1OfCurve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepGeom_HArray1OfCurve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepGeom_HArray1OfCurve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepGeom_HArray1OfCurve self, NCollection_Array1_Handle_StepGeom_Curve theOther) -> NCollection_Array1_Handle_StepGeom_Curve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepGeom_HArray1OfCurve self, NCollection_Array1_Handle_StepGeom_Curve theOther) -> NCollection_Array1_Handle_StepGeom_Curve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCurve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepGeom_HArray1OfCurve self) -> Handle_StepGeom_Curve

        @return first element

        :rtype: TheItemType &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCurve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepGeom_HArray1OfCurve self) -> Handle_StepGeom_Curve

        @return last element

        :rtype: TheItemType &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCurve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.Handle_StepGeom_HArray1OfCurve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepGeom_HArray1OfCurve self, Standard_Integer const theIndex) -> Handle_StepGeom_Curve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepGeom_HArray1OfCurve self, Standard_Integer const theIndex, Handle_StepGeom_Curve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepGeom_HArray1OfCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_HArray1OfCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_HArray1OfCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_HArray1OfCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_HArray1OfCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_HArray1OfCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_HArray1OfCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_HArray1OfCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_HArray1OfCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_HArray1OfCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray1OfCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_HArray1OfCurve_swigregister = _StepGeom.Handle_StepGeom_HArray1OfCurve_swigregister
Handle_StepGeom_HArray1OfCurve_swigregister(Handle_StepGeom_HArray1OfCurve)

def Handle_StepGeom_HArray1OfCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_HArray1OfCurve_DownCast(thing)
Handle_StepGeom_HArray1OfCurve_DownCast = _StepGeom.Handle_StepGeom_HArray1OfCurve_DownCast

class Handle_StepGeom_Ellipse(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Ellipse self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Ellipse_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Ellipse self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Ellipse_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Ellipse self, StepGeom_Ellipse thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Ellipse_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Ellipse self, Handle_StepGeom_Ellipse theHandle) -> Handle_StepGeom_Ellipse
        assign(Handle_StepGeom_Ellipse self, StepGeom_Ellipse thePtr) -> Handle_StepGeom_Ellipse
        assign(Handle_StepGeom_Ellipse self, Handle_StepGeom_Ellipse theHandle) -> Handle_StepGeom_Ellipse

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Ellipse_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Ellipse self) -> StepGeom_Ellipse

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Ellipse_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Ellipse self) -> StepGeom_Ellipse

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Ellipse___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Ellipse self) -> StepGeom_Ellipse

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Ellipse___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Ellipse___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Ellipse___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Ellipse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Ellipse_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Ellipse

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Ellipse self, Handle_TCollection_HAsciiString aName, StepGeom_Axis2Placement aPosition, Standard_Real const aSemiAxis1, Standard_Real const aSemiAxis2)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement
        :type aSemiAxis1: float
        :type aSemiAxis2: float

        """
        return _StepGeom.Handle_StepGeom_Ellipse_Init(self, *args)


    def SetSemiAxis1(self, *args):
        """
        SetSemiAxis1(Handle_StepGeom_Ellipse self, Standard_Real const aSemiAxis1)

        :type aSemiAxis1: float

        """
        return _StepGeom.Handle_StepGeom_Ellipse_SetSemiAxis1(self, *args)


    def SemiAxis1(self, *args):
        """
        SemiAxis1(Handle_StepGeom_Ellipse self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_Ellipse_SemiAxis1(self, *args)


    def SetSemiAxis2(self, *args):
        """
        SetSemiAxis2(Handle_StepGeom_Ellipse self, Standard_Real const aSemiAxis2)

        :type aSemiAxis2: float

        """
        return _StepGeom.Handle_StepGeom_Ellipse_SetSemiAxis2(self, *args)


    def SemiAxis2(self, *args):
        """
        SemiAxis2(Handle_StepGeom_Ellipse self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_Ellipse_SemiAxis2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Ellipse self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Ellipse_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Ellipse_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Ellipse_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_Ellipse self, StepGeom_Axis2Placement aPosition)

        :type aPosition: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Ellipse_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_Ellipse self) -> StepGeom_Axis2Placement

        :rtype: OCC.wrapper.StepGeom.StepGeom_Axis2Placement

        """
        return _StepGeom.Handle_StepGeom_Ellipse_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Ellipse self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Ellipse_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Ellipse self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Ellipse_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Ellipse self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Ellipse_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Ellipse self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Ellipse self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Ellipse_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Ellipse self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Ellipse self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Ellipse_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Ellipse self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Ellipse_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Ellipse self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Ellipse_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Ellipse self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Ellipse_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Ellipse self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Ellipse_DecrementRefCounter(self, *args)

Handle_StepGeom_Ellipse_swigregister = _StepGeom.Handle_StepGeom_Ellipse_swigregister
Handle_StepGeom_Ellipse_swigregister(Handle_StepGeom_Ellipse)

def Handle_StepGeom_Ellipse_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Ellipse_DownCast(thing)
Handle_StepGeom_Ellipse_DownCast = _StepGeom.Handle_StepGeom_Ellipse_DownCast

class Handle_StepGeom_ToroidalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_ToroidalSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_ToroidalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_ToroidalSurface self, StepGeom_ToroidalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_ToroidalSurface self, Handle_StepGeom_ToroidalSurface theHandle) -> Handle_StepGeom_ToroidalSurface
        assign(Handle_StepGeom_ToroidalSurface self, StepGeom_ToroidalSurface thePtr) -> Handle_StepGeom_ToroidalSurface
        assign(Handle_StepGeom_ToroidalSurface self, Handle_StepGeom_ToroidalSurface theHandle) -> Handle_StepGeom_ToroidalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_ToroidalSurface self) -> StepGeom_ToroidalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_ToroidalSurface self) -> StepGeom_ToroidalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_ToroidalSurface self) -> StepGeom_ToroidalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_ToroidalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_ToroidalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_ToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_ToroidalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_ToroidalSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_ToroidalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aMajorRadius, Standard_Real const aMinorRadius)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aMajorRadius: float
        :type aMinorRadius: float

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_Init(self, *args)


    def SetMajorRadius(self, *args):
        """
        SetMajorRadius(Handle_StepGeom_ToroidalSurface self, Standard_Real const aMajorRadius)

        :type aMajorRadius: float

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_SetMajorRadius(self, *args)


    def MajorRadius(self, *args):
        """
        MajorRadius(Handle_StepGeom_ToroidalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_MajorRadius(self, *args)


    def SetMinorRadius(self, *args):
        """
        SetMinorRadius(Handle_StepGeom_ToroidalSurface self, Standard_Real const aMinorRadius)

        :type aMinorRadius: float

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_SetMinorRadius(self, *args)


    def MinorRadius(self, *args):
        """
        MinorRadius(Handle_StepGeom_ToroidalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_MinorRadius(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_ToroidalSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_ToroidalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_ToroidalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_ToroidalSurface self, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_ToroidalSurface self) -> Handle_StepGeom_Axis2Placement3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_ToroidalSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_ToroidalSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_ToroidalSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_ToroidalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_ToroidalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_ToroidalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_ToroidalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_ToroidalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_ToroidalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_ToroidalSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_ToroidalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_ToroidalSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_ToroidalSurface_swigregister = _StepGeom.Handle_StepGeom_ToroidalSurface_swigregister
Handle_StepGeom_ToroidalSurface_swigregister(Handle_StepGeom_ToroidalSurface)

def Handle_StepGeom_ToroidalSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_ToroidalSurface_DownCast(thing)
Handle_StepGeom_ToroidalSurface_DownCast = _StepGeom.Handle_StepGeom_ToroidalSurface_DownCast

class Handle_StepGeom_ConicalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_ConicalSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_ConicalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_ConicalSurface self, StepGeom_ConicalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_ConicalSurface self, Handle_StepGeom_ConicalSurface theHandle) -> Handle_StepGeom_ConicalSurface
        assign(Handle_StepGeom_ConicalSurface self, StepGeom_ConicalSurface thePtr) -> Handle_StepGeom_ConicalSurface
        assign(Handle_StepGeom_ConicalSurface self, Handle_StepGeom_ConicalSurface theHandle) -> Handle_StepGeom_ConicalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_ConicalSurface self) -> StepGeom_ConicalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_ConicalSurface self) -> StepGeom_ConicalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_ConicalSurface self) -> StepGeom_ConicalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_ConicalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_ConicalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_ConicalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_ConicalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_ConicalSurface

    def Init(self, *args):
        """
        Init(Handle_StepGeom_ConicalSurface self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Axis2Placement3d aPosition, Standard_Real const aRadius, Standard_Real const aSemiAngle)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d
        :type aRadius: float
        :type aSemiAngle: float

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(Handle_StepGeom_ConicalSurface self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_StepGeom_ConicalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_Radius(self, *args)


    def SetSemiAngle(self, *args):
        """
        SetSemiAngle(Handle_StepGeom_ConicalSurface self, Standard_Real const aSemiAngle)

        :type aSemiAngle: float

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_SetSemiAngle(self, *args)


    def SemiAngle(self, *args):
        """
        SemiAngle(Handle_StepGeom_ConicalSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_SemiAngle(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_ConicalSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_ConicalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_ConicalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_StepGeom_ConicalSurface self, Handle_StepGeom_Axis2Placement3d aPosition)

        :type aPosition: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Handle_StepGeom_ConicalSurface self) -> Handle_StepGeom_Axis2Placement3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_Position(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_ConicalSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_ConicalSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_ConicalSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_ConicalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_ConicalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_ConicalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_ConicalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_ConicalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_ConicalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_ConicalSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_ConicalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_ConicalSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_ConicalSurface_swigregister = _StepGeom.Handle_StepGeom_ConicalSurface_swigregister
Handle_StepGeom_ConicalSurface_swigregister(Handle_StepGeom_ConicalSurface)

def Handle_StepGeom_ConicalSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_ConicalSurface_DownCast(thing)
Handle_StepGeom_ConicalSurface_DownCast = _StepGeom.Handle_StepGeom_ConicalSurface_DownCast

class Handle_StepGeom_BoundedSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_BoundedSurface self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_BoundedSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_BoundedSurface self, StepGeom_BoundedSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_BoundedSurface self, Handle_StepGeom_BoundedSurface theHandle) -> Handle_StepGeom_BoundedSurface
        assign(Handle_StepGeom_BoundedSurface self, StepGeom_BoundedSurface thePtr) -> Handle_StepGeom_BoundedSurface
        assign(Handle_StepGeom_BoundedSurface self, Handle_StepGeom_BoundedSurface theHandle) -> Handle_StepGeom_BoundedSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_BoundedSurface self) -> StepGeom_BoundedSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_BoundedSurface self) -> StepGeom_BoundedSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_BoundedSurface self) -> StepGeom_BoundedSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_BoundedSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_BoundedSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_BoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BoundedSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BoundedSurface

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_BoundedSurface self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BoundedSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_BoundedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_BoundedSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_BoundedSurface self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_BoundedSurface self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_BoundedSurface self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_BoundedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_BoundedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_BoundedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_BoundedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_BoundedSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_BoundedSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_BoundedSurface self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_BoundedSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_BoundedSurface_DecrementRefCounter(self, *args)

Handle_StepGeom_BoundedSurface_swigregister = _StepGeom.Handle_StepGeom_BoundedSurface_swigregister
Handle_StepGeom_BoundedSurface_swigregister(Handle_StepGeom_BoundedSurface)

def Handle_StepGeom_BoundedSurface_DownCast(thing):
    return _StepGeom.Handle_StepGeom_BoundedSurface_DownCast(thing)
Handle_StepGeom_BoundedSurface_DownCast = _StepGeom.Handle_StepGeom_BoundedSurface_DownCast

class NCollection_Array1_Handle_StepGeom_CompositeCurveSegment(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> NCollection_Array1< opencascade::handle< StepGeom_CompositeCurveSegment > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> NCollection_Array1< opencascade::handle< StepGeom_CompositeCurveSegment > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> NCollection_Array1< opencascade::handle< StepGeom_CompositeCurveSegment > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> NCollection_Array1< opencascade::handle< StepGeom_CompositeCurveSegment > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepGeom.new_NCollection_Array1_Handle_StepGeom_CompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self, Handle_StepGeom_CompositeCurveSegment theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self, NCollection_Array1_Handle_StepGeom_CompositeCurveSegment theOther) -> NCollection_Array1_Handle_StepGeom_CompositeCurveSegment

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self, NCollection_Array1_Handle_StepGeom_CompositeCurveSegment theOther) -> NCollection_Array1_Handle_StepGeom_CompositeCurveSegment

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self, NCollection_Array1_Handle_StepGeom_CompositeCurveSegment theOther) -> NCollection_Array1_Handle_StepGeom_CompositeCurveSegment
        assign(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self, NCollection_Array1_Handle_StepGeom_CompositeCurveSegment theOther) -> NCollection_Array1_Handle_StepGeom_CompositeCurveSegment

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Handle_StepGeom_CompositeCurveSegment

        @return first element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self) -> Handle_StepGeom_CompositeCurveSegment

        @return last element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self, Standard_Integer const theIndex) -> Handle_StepGeom_CompositeCurveSegment

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self, Standard_Integer const theIndex, Handle_StepGeom_CompositeCurveSegment theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_Resize(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array1_Handle_StepGeom_CompositeCurveSegment
NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_swigregister = _StepGeom.NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_swigregister
NCollection_Array1_Handle_StepGeom_CompositeCurveSegment_swigregister(NCollection_Array1_Handle_StepGeom_CompositeCurveSegment)


try:
	StepGeom_Array1OfCompositeCurveSegment = NCollection_Array1_Handle_StepGeom_CompositeCurveSegment
except NameError:
	pass # does not exist, probably ignored

class Handle_StepGeom_SurfacePatch(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SurfacePatch self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SurfacePatch self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SurfacePatch self, StepGeom_SurfacePatch thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SurfacePatch self, Handle_StepGeom_SurfacePatch theHandle) -> Handle_StepGeom_SurfacePatch
        assign(Handle_StepGeom_SurfacePatch self, StepGeom_SurfacePatch thePtr) -> Handle_StepGeom_SurfacePatch
        assign(Handle_StepGeom_SurfacePatch self, Handle_StepGeom_SurfacePatch theHandle) -> Handle_StepGeom_SurfacePatch

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SurfacePatch self) -> StepGeom_SurfacePatch

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SurfacePatch self) -> StepGeom_SurfacePatch

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SurfacePatch self) -> StepGeom_SurfacePatch

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SurfacePatch___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SurfacePatch___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SurfacePatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfacePatch_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfacePatch

    def Init(self, *args):
        """
        Init(Handle_StepGeom_SurfacePatch self, Handle_StepGeom_BoundedSurface aParentSurface, StepGeom_TransitionCode const aUTransition, StepGeom_TransitionCode const aVTransition, Standard_Boolean const aUSense, Standard_Boolean const aVSense)

        :type aParentSurface: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface
        :type aUTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode
        :type aVTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode
        :type aUSense: bool
        :type aVSense: bool

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_Init(self, *args)


    def SetParentSurface(self, *args):
        """
        SetParentSurface(Handle_StepGeom_SurfacePatch self, Handle_StepGeom_BoundedSurface aParentSurface)

        :type aParentSurface: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_SetParentSurface(self, *args)


    def ParentSurface(self, *args):
        """
        ParentSurface(Handle_StepGeom_SurfacePatch self) -> Handle_StepGeom_BoundedSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_ParentSurface(self, *args)


    def SetUTransition(self, *args):
        """
        SetUTransition(Handle_StepGeom_SurfacePatch self, StepGeom_TransitionCode const aUTransition)

        :type aUTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_SetUTransition(self, *args)


    def UTransition(self, *args):
        """
        UTransition(Handle_StepGeom_SurfacePatch self) -> StepGeom_TransitionCode

        :rtype: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_UTransition(self, *args)


    def SetVTransition(self, *args):
        """
        SetVTransition(Handle_StepGeom_SurfacePatch self, StepGeom_TransitionCode const aVTransition)

        :type aVTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_SetVTransition(self, *args)


    def VTransition(self, *args):
        """
        VTransition(Handle_StepGeom_SurfacePatch self) -> StepGeom_TransitionCode

        :rtype: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_VTransition(self, *args)


    def SetUSense(self, *args):
        """
        SetUSense(Handle_StepGeom_SurfacePatch self, Standard_Boolean const aUSense)

        :type aUSense: bool

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_SetUSense(self, *args)


    def USense(self, *args):
        """
        USense(Handle_StepGeom_SurfacePatch self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_USense(self, *args)


    def SetVSense(self, *args):
        """
        SetVSense(Handle_StepGeom_SurfacePatch self, Standard_Boolean const aVSense)

        :type aVSense: bool

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_SetVSense(self, *args)


    def VSense(self, *args):
        """
        VSense(Handle_StepGeom_SurfacePatch self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_VSense(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SurfacePatch self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfacePatch_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfacePatch_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SurfacePatch self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SurfacePatch self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SurfacePatch self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SurfacePatch self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SurfacePatch self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SurfacePatch self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SurfacePatch self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SurfacePatch self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfacePatch_DecrementRefCounter(self, *args)

Handle_StepGeom_SurfacePatch_swigregister = _StepGeom.Handle_StepGeom_SurfacePatch_swigregister
Handle_StepGeom_SurfacePatch_swigregister(Handle_StepGeom_SurfacePatch)

def Handle_StepGeom_SurfacePatch_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SurfacePatch_DownCast(thing)
Handle_StepGeom_SurfacePatch_DownCast = _StepGeom.Handle_StepGeom_SurfacePatch_DownCast

class NCollection_Array1_Handle_StepGeom_BoundaryCurve(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> NCollection_Array1< opencascade::handle< StepGeom_BoundaryCurve > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> NCollection_Array1< opencascade::handle< StepGeom_BoundaryCurve > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> NCollection_Array1< opencascade::handle< StepGeom_BoundaryCurve > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> NCollection_Array1< opencascade::handle< StepGeom_BoundaryCurve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepGeom.new_NCollection_Array1_Handle_StepGeom_BoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepGeom_BoundaryCurve self, Handle_StepGeom_BoundaryCurve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepGeom_BoundaryCurve self, NCollection_Array1_Handle_StepGeom_BoundaryCurve theOther) -> NCollection_Array1_Handle_StepGeom_BoundaryCurve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepGeom_BoundaryCurve self, NCollection_Array1_Handle_StepGeom_BoundaryCurve theOther) -> NCollection_Array1_Handle_StepGeom_BoundaryCurve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepGeom_BoundaryCurve self, NCollection_Array1_Handle_StepGeom_BoundaryCurve theOther) -> NCollection_Array1_Handle_StepGeom_BoundaryCurve
        assign(NCollection_Array1_Handle_StepGeom_BoundaryCurve self, NCollection_Array1_Handle_StepGeom_BoundaryCurve theOther) -> NCollection_Array1_Handle_StepGeom_BoundaryCurve

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Handle_StepGeom_BoundaryCurve

        @return first element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepGeom_BoundaryCurve self) -> Handle_StepGeom_BoundaryCurve

        @return last element

        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepGeom_BoundaryCurve self, Standard_Integer const theIndex) -> Handle_StepGeom_BoundaryCurve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepGeom_BoundaryCurve self, Standard_Integer const theIndex, Handle_StepGeom_BoundaryCurve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepGeom_BoundaryCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_Resize(self, *args)

    __swig_destroy__ = _StepGeom.delete_NCollection_Array1_Handle_StepGeom_BoundaryCurve
NCollection_Array1_Handle_StepGeom_BoundaryCurve_swigregister = _StepGeom.NCollection_Array1_Handle_StepGeom_BoundaryCurve_swigregister
NCollection_Array1_Handle_StepGeom_BoundaryCurve_swigregister(NCollection_Array1_Handle_StepGeom_BoundaryCurve)


try:
	StepGeom_Array1OfBoundaryCurve = NCollection_Array1_Handle_StepGeom_BoundaryCurve
except NameError:
	pass # does not exist, probably ignored

class Handle_StepGeom_DegeneratePcurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_DegeneratePcurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_DegeneratePcurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_DegeneratePcurve self, StepGeom_DegeneratePcurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_DegeneratePcurve self, Handle_StepGeom_DegeneratePcurve theHandle) -> Handle_StepGeom_DegeneratePcurve
        assign(Handle_StepGeom_DegeneratePcurve self, StepGeom_DegeneratePcurve thePtr) -> Handle_StepGeom_DegeneratePcurve
        assign(Handle_StepGeom_DegeneratePcurve self, Handle_StepGeom_DegeneratePcurve theHandle) -> Handle_StepGeom_DegeneratePcurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_DegeneratePcurve self) -> StepGeom_DegeneratePcurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_DegeneratePcurve self) -> StepGeom_DegeneratePcurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_DegeneratePcurve self) -> StepGeom_DegeneratePcurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_DegeneratePcurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_DegeneratePcurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_DegeneratePcurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_DegeneratePcurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_DegeneratePcurve

    def Init(self, *args):
        """
        Init(Handle_StepGeom_DegeneratePcurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aBasisSurface, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        SetBasisSurface(Handle_StepGeom_DegeneratePcurve self, Handle_StepGeom_Surface aBasisSurface)

        :type aBasisSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_StepGeom_DegeneratePcurve self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_BasisSurface(self, *args)


    def SetReferenceToCurve(self, *args):
        """
        SetReferenceToCurve(Handle_StepGeom_DegeneratePcurve self, Handle_StepRepr_DefinitionalRepresentation aReferenceToCurve)

        :type aReferenceToCurve: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_SetReferenceToCurve(self, *args)


    def ReferenceToCurve(self, *args):
        """
        ReferenceToCurve(Handle_StepGeom_DegeneratePcurve self) -> Handle_StepRepr_DefinitionalRepresentation

        :rtype: OCC.wrapper.StepGeom.Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_ReferenceToCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_DegeneratePcurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_DegeneratePcurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_DegeneratePcurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_DegeneratePcurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_DegeneratePcurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_DegeneratePcurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_DegeneratePcurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_DegeneratePcurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_DegeneratePcurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_DegeneratePcurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_DegeneratePcurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_DegeneratePcurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_DegeneratePcurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_DegeneratePcurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_DegeneratePcurve_DecrementRefCounter(self, *args)

Handle_StepGeom_DegeneratePcurve_swigregister = _StepGeom.Handle_StepGeom_DegeneratePcurve_swigregister
Handle_StepGeom_DegeneratePcurve_swigregister(Handle_StepGeom_DegeneratePcurve)

def Handle_StepGeom_DegeneratePcurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_DegeneratePcurve_DownCast(thing)
Handle_StepGeom_DegeneratePcurve_DownCast = _StepGeom.Handle_StepGeom_DegeneratePcurve_DownCast

class Handle_StepGeom_CartesianTransformationOperator(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_CartesianTransformationOperator self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_CartesianTransformationOperator self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_CartesianTransformationOperator self, StepGeom_CartesianTransformationOperator thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_CartesianTransformationOperator self, Handle_StepGeom_CartesianTransformationOperator theHandle) -> Handle_StepGeom_CartesianTransformationOperator
        assign(Handle_StepGeom_CartesianTransformationOperator self, StepGeom_CartesianTransformationOperator thePtr) -> Handle_StepGeom_CartesianTransformationOperator
        assign(Handle_StepGeom_CartesianTransformationOperator self, Handle_StepGeom_CartesianTransformationOperator theHandle) -> Handle_StepGeom_CartesianTransformationOperator

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_CartesianTransformationOperator self) -> StepGeom_CartesianTransformationOperator

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_CartesianTransformationOperator self) -> StepGeom_CartesianTransformationOperator

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_CartesianTransformationOperator self) -> StepGeom_CartesianTransformationOperator

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_CartesianTransformationOperator___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_CartesianTransformationOperator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CartesianTransformationOperator

    def Init(self, *args):
        """
        Init(Handle_StepGeom_CartesianTransformationOperator self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasAaxis1, Handle_StepGeom_Direction aAxis1, Standard_Boolean const hasAaxis2, Handle_StepGeom_Direction aAxis2, Handle_StepGeom_CartesianPoint aLocalOrigin, Standard_Boolean const hasAscale, Standard_Real const aScale)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasAaxis1: bool
        :type aAxis1: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type hasAaxis2: bool
        :type aAxis2: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type aLocalOrigin: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint
        :type hasAscale: bool
        :type aScale: float

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_Init(self, *args)


    def SetAxis1(self, *args):
        """
        SetAxis1(Handle_StepGeom_CartesianTransformationOperator self, Handle_StepGeom_Direction aAxis1)

        :type aAxis1: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_SetAxis1(self, *args)


    def UnSetAxis1(self, *args):
        """UnSetAxis1(Handle_StepGeom_CartesianTransformationOperator self)"""
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_UnSetAxis1(self, *args)


    def Axis1(self, *args):
        """
        Axis1(Handle_StepGeom_CartesianTransformationOperator self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_Axis1(self, *args)


    def HasAxis1(self, *args):
        """
        HasAxis1(Handle_StepGeom_CartesianTransformationOperator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_HasAxis1(self, *args)


    def SetAxis2(self, *args):
        """
        SetAxis2(Handle_StepGeom_CartesianTransformationOperator self, Handle_StepGeom_Direction aAxis2)

        :type aAxis2: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_SetAxis2(self, *args)


    def UnSetAxis2(self, *args):
        """UnSetAxis2(Handle_StepGeom_CartesianTransformationOperator self)"""
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_UnSetAxis2(self, *args)


    def Axis2(self, *args):
        """
        Axis2(Handle_StepGeom_CartesianTransformationOperator self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_Axis2(self, *args)


    def HasAxis2(self, *args):
        """
        HasAxis2(Handle_StepGeom_CartesianTransformationOperator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_HasAxis2(self, *args)


    def SetLocalOrigin(self, *args):
        """
        SetLocalOrigin(Handle_StepGeom_CartesianTransformationOperator self, Handle_StepGeom_CartesianPoint aLocalOrigin)

        :type aLocalOrigin: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_SetLocalOrigin(self, *args)


    def LocalOrigin(self, *args):
        """
        LocalOrigin(Handle_StepGeom_CartesianTransformationOperator self) -> Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_LocalOrigin(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Handle_StepGeom_CartesianTransformationOperator self, Standard_Real const aScale)

        :type aScale: float

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_SetScale(self, *args)


    def UnSetScale(self, *args):
        """UnSetScale(Handle_StepGeom_CartesianTransformationOperator self)"""
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_UnSetScale(self, *args)


    def Scale(self, *args):
        """
        Scale(Handle_StepGeom_CartesianTransformationOperator self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_Scale(self, *args)


    def HasScale(self, *args):
        """
        HasScale(Handle_StepGeom_CartesianTransformationOperator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_HasScale(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_CartesianTransformationOperator self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CartesianTransformationOperator_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_CartesianTransformationOperator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_CartesianTransformationOperator self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_CartesianTransformationOperator self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_CartesianTransformationOperator self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_CartesianTransformationOperator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_CartesianTransformationOperator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_CartesianTransformationOperator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_CartesianTransformationOperator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_CartesianTransformationOperator self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_CartesianTransformationOperator self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_CartesianTransformationOperator self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_CartesianTransformationOperator self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_DecrementRefCounter(self, *args)

Handle_StepGeom_CartesianTransformationOperator_swigregister = _StepGeom.Handle_StepGeom_CartesianTransformationOperator_swigregister
Handle_StepGeom_CartesianTransformationOperator_swigregister(Handle_StepGeom_CartesianTransformationOperator)

def Handle_StepGeom_CartesianTransformationOperator_DownCast(thing):
    return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_DownCast(thing)
Handle_StepGeom_CartesianTransformationOperator_DownCast = _StepGeom.Handle_StepGeom_CartesianTransformationOperator_DownCast

class Handle_StepGeom_IntersectionCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_IntersectionCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_IntersectionCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_IntersectionCurve self, StepGeom_IntersectionCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_IntersectionCurve self, Handle_StepGeom_IntersectionCurve theHandle) -> Handle_StepGeom_IntersectionCurve
        assign(Handle_StepGeom_IntersectionCurve self, StepGeom_IntersectionCurve thePtr) -> Handle_StepGeom_IntersectionCurve
        assign(Handle_StepGeom_IntersectionCurve self, Handle_StepGeom_IntersectionCurve theHandle) -> Handle_StepGeom_IntersectionCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_IntersectionCurve self) -> StepGeom_IntersectionCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_IntersectionCurve self) -> StepGeom_IntersectionCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_IntersectionCurve self) -> StepGeom_IntersectionCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_IntersectionCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_IntersectionCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_IntersectionCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_IntersectionCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_IntersectionCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_IntersectionCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_IntersectionCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_IntersectionCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_IntersectionCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aCurve3d, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface
        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_Init(self, *args)


    def SetCurve3d(self, *args):
        """
        SetCurve3d(Handle_StepGeom_IntersectionCurve self, Handle_StepGeom_Curve aCurve3d)

        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_SetCurve3d(self, *args)


    def Curve3d(self, *args):
        """
        Curve3d(Handle_StepGeom_IntersectionCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_Curve3d(self, *args)


    def SetAssociatedGeometry(self, *args):
        """
        SetAssociatedGeometry(Handle_StepGeom_IntersectionCurve self, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry)

        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_SetAssociatedGeometry(self, *args)


    def AssociatedGeometry(self, *args):
        """
        AssociatedGeometry(Handle_StepGeom_IntersectionCurve self) -> Handle_StepGeom_HArray1OfPcurveOrSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_AssociatedGeometry(self, *args)


    def AssociatedGeometryValue(self, *args):
        """
        AssociatedGeometryValue(Handle_StepGeom_IntersectionCurve self, Standard_Integer const num) -> StepGeom_PcurveOrSurface

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_PcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_AssociatedGeometryValue(self, *args)


    def NbAssociatedGeometry(self, *args):
        """
        NbAssociatedGeometry(Handle_StepGeom_IntersectionCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_NbAssociatedGeometry(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        SetMasterRepresentation(Handle_StepGeom_IntersectionCurve self, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        MasterRepresentation(Handle_StepGeom_IntersectionCurve self) -> StepGeom_PreferredSurfaceCurveRepresentation

        :rtype: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_MasterRepresentation(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_IntersectionCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_IntersectionCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_IntersectionCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_IntersectionCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_IntersectionCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_IntersectionCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_IntersectionCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_IntersectionCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_IntersectionCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_IntersectionCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_IntersectionCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_IntersectionCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_IntersectionCurve_swigregister = _StepGeom.Handle_StepGeom_IntersectionCurve_swigregister
Handle_StepGeom_IntersectionCurve_swigregister(Handle_StepGeom_IntersectionCurve)

def Handle_StepGeom_IntersectionCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_IntersectionCurve_DownCast(thing)
Handle_StepGeom_IntersectionCurve_DownCast = _StepGeom.Handle_StepGeom_IntersectionCurve_DownCast

class StepGeom_VectorOrDirection(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepGeom_VectorOrDirection self) -> StepGeom_VectorOrDirection

        Returns a VectorOrDirection SelectType


        """
        this = _StepGeom.new_StepGeom_VectorOrDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepGeom_VectorOrDirection self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a VectorOrDirection Kind Entity that is :
        1 -> Vector
        2 -> Direction
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.StepGeom_VectorOrDirection_CaseNum(self, *args)


    def Vector(self, *args):
        """
        Vector(StepGeom_VectorOrDirection self) -> Handle_StepGeom_Vector

        returns Value as a Vector (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_VectorOrDirection_Vector(self, *args)


    def Direction(self, *args):
        """
        Direction(StepGeom_VectorOrDirection self) -> Handle_StepGeom_Direction

        returns Value as a Direction (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_VectorOrDirection_Direction(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_VectorOrDirection
StepGeom_VectorOrDirection_swigregister = _StepGeom.StepGeom_VectorOrDirection_swigregister
StepGeom_VectorOrDirection_swigregister(StepGeom_VectorOrDirection)

class StepGeom_HArray2OfCartesianPoint(NCollection_Array2_Handle_StepGeom_CartesianPoint, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepGeom_HArray2OfCartesianPoint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepGeom_HArray2OfCartesianPoint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepGeom_HArray2OfCartesianPoint self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> StepGeom_HArray2OfCartesianPoint
        __init__(StepGeom_HArray2OfCartesianPoint self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, Handle_StepGeom_CartesianPoint theValue) -> StepGeom_HArray2OfCartesianPoint
        __init__(StepGeom_HArray2OfCartesianPoint self, NCollection_Array2_Handle_StepGeom_CartesianPoint theOther) -> StepGeom_HArray2OfCartesianPoint

        :type theOther: OCC.wrapper.StepGeom.StepGeom_Array2OfCartesianPoint

        """
        this = _StepGeom.new_StepGeom_HArray2OfCartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array2OfCartesianPoint

        """
        res = _StepGeom.StepGeom_HArray2OfCartesianPoint_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(StepGeom_HArray2OfCartesianPoint self) -> NCollection_Array2_Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array2OfCartesianPoint

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.StepGeom_HArray2OfCartesianPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray2OfCartesianPoint
StepGeom_HArray2OfCartesianPoint_swigregister = _StepGeom.StepGeom_HArray2OfCartesianPoint_swigregister
StepGeom_HArray2OfCartesianPoint_swigregister(StepGeom_HArray2OfCartesianPoint)

def StepGeom_HArray2OfCartesianPoint_get_type_name(*args):
    """
    StepGeom_HArray2OfCartesianPoint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepGeom.StepGeom_HArray2OfCartesianPoint_get_type_name(*args)

def StepGeom_HArray2OfCartesianPoint_get_type_descriptor(*args):
    """
    StepGeom_HArray2OfCartesianPoint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepGeom.StepGeom_HArray2OfCartesianPoint_get_type_descriptor(*args)

class Handle_StepGeom_SurfaceOfLinearExtrusion(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SurfaceOfLinearExtrusion self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SurfaceOfLinearExtrusion self, StepGeom_SurfaceOfLinearExtrusion thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SurfaceOfLinearExtrusion self, Handle_StepGeom_SurfaceOfLinearExtrusion theHandle) -> Handle_StepGeom_SurfaceOfLinearExtrusion
        assign(Handle_StepGeom_SurfaceOfLinearExtrusion self, StepGeom_SurfaceOfLinearExtrusion thePtr) -> Handle_StepGeom_SurfaceOfLinearExtrusion
        assign(Handle_StepGeom_SurfaceOfLinearExtrusion self, Handle_StepGeom_SurfaceOfLinearExtrusion theHandle) -> Handle_StepGeom_SurfaceOfLinearExtrusion

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> StepGeom_SurfaceOfLinearExtrusion

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> StepGeom_SurfaceOfLinearExtrusion

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> StepGeom_SurfaceOfLinearExtrusion

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceOfLinearExtrusion

    def Init(self, *args):
        """
        Init(Handle_StepGeom_SurfaceOfLinearExtrusion self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aSweptCurve, Handle_StepGeom_Vector aExtrusionAxis)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aExtrusionAxis: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_Init(self, *args)


    def SetExtrusionAxis(self, *args):
        """
        SetExtrusionAxis(Handle_StepGeom_SurfaceOfLinearExtrusion self, Handle_StepGeom_Vector aExtrusionAxis)

        :type aExtrusionAxis: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_SetExtrusionAxis(self, *args)


    def ExtrusionAxis(self, *args):
        """
        ExtrusionAxis(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> Handle_StepGeom_Vector

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_ExtrusionAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetSweptCurve(self, *args):
        """
        SetSweptCurve(Handle_StepGeom_SurfaceOfLinearExtrusion self, Handle_StepGeom_Curve aSweptCurve)

        :type aSweptCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_SetSweptCurve(self, *args)


    def SweptCurve(self, *args):
        """
        SweptCurve(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_SweptCurve(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_SurfaceOfLinearExtrusion self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SurfaceOfLinearExtrusion self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SurfaceOfLinearExtrusion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SurfaceOfLinearExtrusion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SurfaceOfLinearExtrusion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SurfaceOfLinearExtrusion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SurfaceOfLinearExtrusion self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SurfaceOfLinearExtrusion self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_DecrementRefCounter(self, *args)

Handle_StepGeom_SurfaceOfLinearExtrusion_swigregister = _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_swigregister
Handle_StepGeom_SurfaceOfLinearExtrusion_swigregister(Handle_StepGeom_SurfaceOfLinearExtrusion)

def Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast(thing)
Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast = _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast

class Handle_StepGeom_Vector(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Vector self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Vector_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Vector self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Vector_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Vector self, StepGeom_Vector thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Vector_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Vector self, Handle_StepGeom_Vector theHandle) -> Handle_StepGeom_Vector
        assign(Handle_StepGeom_Vector self, StepGeom_Vector thePtr) -> Handle_StepGeom_Vector
        assign(Handle_StepGeom_Vector self, Handle_StepGeom_Vector theHandle) -> Handle_StepGeom_Vector

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Vector_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Vector self) -> StepGeom_Vector

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Vector_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Vector self) -> StepGeom_Vector

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Vector___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Vector self) -> StepGeom_Vector

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Vector___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Vector___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Vector___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Vector_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Vector

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Vector self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Direction aOrientation, Standard_Real const aMagnitude)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOrientation: OCC.wrapper.StepGeom.Handle_StepGeom_Direction
        :type aMagnitude: float

        """
        return _StepGeom.Handle_StepGeom_Vector_Init(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_StepGeom_Vector self, Handle_StepGeom_Direction aOrientation)

        :type aOrientation: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_Vector_SetOrientation(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_StepGeom_Vector self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_Vector_Orientation(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepGeom_Vector self, Standard_Real const aMagnitude)

        :type aMagnitude: float

        """
        return _StepGeom.Handle_StepGeom_Vector_SetMagnitude(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepGeom_Vector self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_Vector_Magnitude(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Vector self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Vector_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Vector_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Vector_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Vector self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Vector_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Vector self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Vector_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Vector self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Vector_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Vector self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Vector self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Vector_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Vector self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Vector self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Vector_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Vector self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Vector_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Vector self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Vector_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Vector self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Vector_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Vector self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Vector_DecrementRefCounter(self, *args)

Handle_StepGeom_Vector_swigregister = _StepGeom.Handle_StepGeom_Vector_swigregister
Handle_StepGeom_Vector_swigregister(Handle_StepGeom_Vector)

def Handle_StepGeom_Vector_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Vector_DownCast(thing)
Handle_StepGeom_Vector_DownCast = _StepGeom.Handle_StepGeom_Vector_DownCast

class Handle_StepGeom_OffsetCurve3d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_OffsetCurve3d self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_OffsetCurve3d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_OffsetCurve3d self, StepGeom_OffsetCurve3d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_OffsetCurve3d self, Handle_StepGeom_OffsetCurve3d theHandle) -> Handle_StepGeom_OffsetCurve3d
        assign(Handle_StepGeom_OffsetCurve3d self, StepGeom_OffsetCurve3d thePtr) -> Handle_StepGeom_OffsetCurve3d
        assign(Handle_StepGeom_OffsetCurve3d self, Handle_StepGeom_OffsetCurve3d theHandle) -> Handle_StepGeom_OffsetCurve3d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_OffsetCurve3d self) -> StepGeom_OffsetCurve3d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_OffsetCurve3d self) -> StepGeom_OffsetCurve3d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_OffsetCurve3d self) -> StepGeom_OffsetCurve3d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_OffsetCurve3d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_OffsetCurve3d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_OffsetCurve3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_OffsetCurve3d_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_OffsetCurve3d

    def Init(self, *args):
        """
        Init(Handle_StepGeom_OffsetCurve3d self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aBasisCurve, Standard_Real const aDistance, StepData_Logical const aSelfIntersect, Handle_StepGeom_Direction aRefDirection)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aDistance: float
        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical
        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        SetBasisCurve(Handle_StepGeom_OffsetCurve3d self, Handle_StepGeom_Curve aBasisCurve)

        :type aBasisCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_StepGeom_OffsetCurve3d self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_BasisCurve(self, *args)


    def SetDistance(self, *args):
        """
        SetDistance(Handle_StepGeom_OffsetCurve3d self, Standard_Real const aDistance)

        :type aDistance: float

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_SetDistance(self, *args)


    def Distance(self, *args):
        """
        Distance(Handle_StepGeom_OffsetCurve3d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_Distance(self, *args)


    def SetSelfIntersect(self, *args):
        """
        SetSelfIntersect(Handle_StepGeom_OffsetCurve3d self, StepData_Logical const aSelfIntersect)

        :type aSelfIntersect: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        SelfIntersect(Handle_StepGeom_OffsetCurve3d self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_SelfIntersect(self, *args)


    def SetRefDirection(self, *args):
        """
        SetRefDirection(Handle_StepGeom_OffsetCurve3d self, Handle_StepGeom_Direction aRefDirection)

        :type aRefDirection: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_SetRefDirection(self, *args)


    def RefDirection(self, *args):
        """
        RefDirection(Handle_StepGeom_OffsetCurve3d self) -> Handle_StepGeom_Direction

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Direction

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_RefDirection(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_OffsetCurve3d self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_OffsetCurve3d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_OffsetCurve3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_OffsetCurve3d self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_OffsetCurve3d self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_OffsetCurve3d self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_OffsetCurve3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_OffsetCurve3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_OffsetCurve3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_OffsetCurve3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_OffsetCurve3d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_OffsetCurve3d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_OffsetCurve3d self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_OffsetCurve3d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_OffsetCurve3d_DecrementRefCounter(self, *args)

Handle_StepGeom_OffsetCurve3d_swigregister = _StepGeom.Handle_StepGeom_OffsetCurve3d_swigregister
Handle_StepGeom_OffsetCurve3d_swigregister(Handle_StepGeom_OffsetCurve3d)

def Handle_StepGeom_OffsetCurve3d_DownCast(thing):
    return _StepGeom.Handle_StepGeom_OffsetCurve3d_DownCast(thing)
Handle_StepGeom_OffsetCurve3d_DownCast = _StepGeom.Handle_StepGeom_OffsetCurve3d_DownCast

class Handle_StepGeom_SeamCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SeamCurve self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SeamCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SeamCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SeamCurve self, StepGeom_SeamCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SeamCurve self, Handle_StepGeom_SeamCurve theHandle) -> Handle_StepGeom_SeamCurve
        assign(Handle_StepGeom_SeamCurve self, StepGeom_SeamCurve thePtr) -> Handle_StepGeom_SeamCurve
        assign(Handle_StepGeom_SeamCurve self, Handle_StepGeom_SeamCurve theHandle) -> Handle_StepGeom_SeamCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SeamCurve self) -> StepGeom_SeamCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SeamCurve self) -> StepGeom_SeamCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SeamCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SeamCurve self) -> StepGeom_SeamCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SeamCurve___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SeamCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SeamCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SeamCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SeamCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SeamCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SeamCurve self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SeamCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SeamCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_SeamCurve self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Curve aCurve3d, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface
        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_Init(self, *args)


    def SetCurve3d(self, *args):
        """
        SetCurve3d(Handle_StepGeom_SeamCurve self, Handle_StepGeom_Curve aCurve3d)

        :type aCurve3d: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_SetCurve3d(self, *args)


    def Curve3d(self, *args):
        """
        Curve3d(Handle_StepGeom_SeamCurve self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_Curve3d(self, *args)


    def SetAssociatedGeometry(self, *args):
        """
        SetAssociatedGeometry(Handle_StepGeom_SeamCurve self, Handle_StepGeom_HArray1OfPcurveOrSurface aAssociatedGeometry)

        :type aAssociatedGeometry: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_SetAssociatedGeometry(self, *args)


    def AssociatedGeometry(self, *args):
        """
        AssociatedGeometry(Handle_StepGeom_SeamCurve self) -> Handle_StepGeom_HArray1OfPcurveOrSurface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_AssociatedGeometry(self, *args)


    def AssociatedGeometryValue(self, *args):
        """
        AssociatedGeometryValue(Handle_StepGeom_SeamCurve self, Standard_Integer const num) -> StepGeom_PcurveOrSurface

        :type num: int
        :rtype: OCC.wrapper.StepGeom.StepGeom_PcurveOrSurface

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_AssociatedGeometryValue(self, *args)


    def NbAssociatedGeometry(self, *args):
        """
        NbAssociatedGeometry(Handle_StepGeom_SeamCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_NbAssociatedGeometry(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        SetMasterRepresentation(Handle_StepGeom_SeamCurve self, StepGeom_PreferredSurfaceCurveRepresentation const aMasterRepresentation)

        :type aMasterRepresentation: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        MasterRepresentation(Handle_StepGeom_SeamCurve self) -> StepGeom_PreferredSurfaceCurveRepresentation

        :rtype: OCC.wrapper.StepGeom.StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_MasterRepresentation(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_SeamCurve self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_SeamCurve self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SeamCurve self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SeamCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SeamCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SeamCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SeamCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SeamCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SeamCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SeamCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SeamCurve self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SeamCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SeamCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SeamCurve_DecrementRefCounter(self, *args)

Handle_StepGeom_SeamCurve_swigregister = _StepGeom.Handle_StepGeom_SeamCurve_swigregister
Handle_StepGeom_SeamCurve_swigregister(Handle_StepGeom_SeamCurve)

def Handle_StepGeom_SeamCurve_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SeamCurve_DownCast(thing)
Handle_StepGeom_SeamCurve_DownCast = _StepGeom.Handle_StepGeom_SeamCurve_DownCast

class Handle_StepGeom_PointReplica(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_PointReplica self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_PointReplica_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_PointReplica self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_PointReplica_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_PointReplica self, StepGeom_PointReplica thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_PointReplica_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_PointReplica self, Handle_StepGeom_PointReplica theHandle) -> Handle_StepGeom_PointReplica
        assign(Handle_StepGeom_PointReplica self, StepGeom_PointReplica thePtr) -> Handle_StepGeom_PointReplica
        assign(Handle_StepGeom_PointReplica self, Handle_StepGeom_PointReplica theHandle) -> Handle_StepGeom_PointReplica

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_PointReplica_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_PointReplica self) -> StepGeom_PointReplica

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_PointReplica_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_PointReplica self) -> StepGeom_PointReplica

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_PointReplica___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_PointReplica self) -> StepGeom_PointReplica

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_PointReplica___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_PointReplica___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_PointReplica___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_PointReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_PointReplica_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_PointReplica

    def Init(self, *args):
        """
        Init(Handle_StepGeom_PointReplica self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Point aParentPt, Handle_StepGeom_CartesianTransformationOperator aTransformation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aParentPt: OCC.wrapper.StepGeom.Handle_StepGeom_Point
        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.Handle_StepGeom_PointReplica_Init(self, *args)


    def SetParentPt(self, *args):
        """
        SetParentPt(Handle_StepGeom_PointReplica self, Handle_StepGeom_Point aParentPt)

        :type aParentPt: OCC.wrapper.StepGeom.Handle_StepGeom_Point

        """
        return _StepGeom.Handle_StepGeom_PointReplica_SetParentPt(self, *args)


    def ParentPt(self, *args):
        """
        ParentPt(Handle_StepGeom_PointReplica self) -> Handle_StepGeom_Point

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Point

        """
        return _StepGeom.Handle_StepGeom_PointReplica_ParentPt(self, *args)


    def SetTransformation(self, *args):
        """
        SetTransformation(Handle_StepGeom_PointReplica self, Handle_StepGeom_CartesianTransformationOperator aTransformation)

        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.Handle_StepGeom_PointReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        Transformation(Handle_StepGeom_PointReplica self) -> Handle_StepGeom_CartesianTransformationOperator

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.Handle_StepGeom_PointReplica_Transformation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_PointReplica self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_PointReplica_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_PointReplica_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_PointReplica_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_PointReplica self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_PointReplica_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_PointReplica self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_PointReplica_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_PointReplica self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_PointReplica_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_PointReplica self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_PointReplica self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_PointReplica_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_PointReplica self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_PointReplica self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_PointReplica_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_PointReplica self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_PointReplica_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_PointReplica self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_PointReplica_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_PointReplica self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_PointReplica_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_PointReplica self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_PointReplica_DecrementRefCounter(self, *args)

Handle_StepGeom_PointReplica_swigregister = _StepGeom.Handle_StepGeom_PointReplica_swigregister
Handle_StepGeom_PointReplica_swigregister(Handle_StepGeom_PointReplica)

def Handle_StepGeom_PointReplica_DownCast(thing):
    return _StepGeom.Handle_StepGeom_PointReplica_DownCast(thing)
Handle_StepGeom_PointReplica_DownCast = _StepGeom.Handle_StepGeom_PointReplica_DownCast

class Handle_StepGeom_SurfaceReplica(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_SurfaceReplica self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_SurfaceReplica self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_SurfaceReplica self, StepGeom_SurfaceReplica thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_SurfaceReplica self, Handle_StepGeom_SurfaceReplica theHandle) -> Handle_StepGeom_SurfaceReplica
        assign(Handle_StepGeom_SurfaceReplica self, StepGeom_SurfaceReplica thePtr) -> Handle_StepGeom_SurfaceReplica
        assign(Handle_StepGeom_SurfaceReplica self, Handle_StepGeom_SurfaceReplica theHandle) -> Handle_StepGeom_SurfaceReplica

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_SurfaceReplica self) -> StepGeom_SurfaceReplica

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_SurfaceReplica self) -> StepGeom_SurfaceReplica

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_SurfaceReplica self) -> StepGeom_SurfaceReplica

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_SurfaceReplica___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_SurfaceReplica___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_SurfaceReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceReplica_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceReplica

    def Init(self, *args):
        """
        Init(Handle_StepGeom_SurfaceReplica self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_Surface aParentSurface, Handle_StepGeom_CartesianTransformationOperator3d aTransformation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aParentSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface
        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_Init(self, *args)


    def SetParentSurface(self, *args):
        """
        SetParentSurface(Handle_StepGeom_SurfaceReplica self, Handle_StepGeom_Surface aParentSurface)

        :type aParentSurface: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_SetParentSurface(self, *args)


    def ParentSurface(self, *args):
        """
        ParentSurface(Handle_StepGeom_SurfaceReplica self) -> Handle_StepGeom_Surface

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Surface

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_ParentSurface(self, *args)


    def SetTransformation(self, *args):
        """
        SetTransformation(Handle_StepGeom_SurfaceReplica self, Handle_StepGeom_CartesianTransformationOperator3d aTransformation)

        :type aTransformation: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        Transformation(Handle_StepGeom_SurfaceReplica self) -> Handle_StepGeom_CartesianTransformationOperator3d

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_Transformation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_SurfaceReplica self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceReplica_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_SurfaceReplica_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_SurfaceReplica self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_SurfaceReplica self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_SurfaceReplica self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_SurfaceReplica self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_SurfaceReplica self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_SurfaceReplica self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_SurfaceReplica self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_SurfaceReplica self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_SurfaceReplica self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_SurfaceReplica self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_SurfaceReplica self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_SurfaceReplica_DecrementRefCounter(self, *args)

Handle_StepGeom_SurfaceReplica_swigregister = _StepGeom.Handle_StepGeom_SurfaceReplica_swigregister
Handle_StepGeom_SurfaceReplica_swigregister(Handle_StepGeom_SurfaceReplica)

def Handle_StepGeom_SurfaceReplica_DownCast(thing):
    return _StepGeom.Handle_StepGeom_SurfaceReplica_DownCast(thing)
Handle_StepGeom_SurfaceReplica_DownCast = _StepGeom.Handle_StepGeom_SurfaceReplica_DownCast

class Handle_StepGeom_HArray2OfCartesianPoint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_HArray2OfCartesianPoint self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_HArray2OfCartesianPoint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_HArray2OfCartesianPoint self, StepGeom_HArray2OfCartesianPoint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_HArray2OfCartesianPoint self, Handle_StepGeom_HArray2OfCartesianPoint theHandle) -> Handle_StepGeom_HArray2OfCartesianPoint
        assign(Handle_StepGeom_HArray2OfCartesianPoint self, StepGeom_HArray2OfCartesianPoint thePtr) -> Handle_StepGeom_HArray2OfCartesianPoint
        assign(Handle_StepGeom_HArray2OfCartesianPoint self, Handle_StepGeom_HArray2OfCartesianPoint theHandle) -> Handle_StepGeom_HArray2OfCartesianPoint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_HArray2OfCartesianPoint self) -> StepGeom_HArray2OfCartesianPoint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_HArray2OfCartesianPoint self) -> StepGeom_HArray2OfCartesianPoint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_HArray2OfCartesianPoint self) -> StepGeom_HArray2OfCartesianPoint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_HArray2OfCartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray2OfCartesianPoint

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.StepGeom_Array2OfCartesianPoint

        """
        res = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_StepGeom_HArray2OfCartesianPoint self) -> NCollection_Array2_Handle_StepGeom_CartesianPoint

        :rtype: OCC.wrapper.StepGeom.StepGeom_Array2OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_HArray2OfCartesianPoint self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_HArray2OfCartesianPoint self, Handle_StepGeom_CartesianPoint theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepGeom_HArray2OfCartesianPoint self, NCollection_Array2_Handle_StepGeom_CartesianPoint theOther) -> NCollection_Array2_Handle_StepGeom_CartesianPoint

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepGeom_HArray2OfCartesianPoint self, Standard_Integer const theRow, Standard_Integer const theCol) -> Handle_StepGeom_CartesianPoint

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepGeom_HArray2OfCartesianPoint self, Standard_Integer const theRow, Standard_Integer const theCol, Handle_StepGeom_CartesianPoint theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_SetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_HArray2OfCartesianPoint self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_HArray2OfCartesianPoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_HArray2OfCartesianPoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_HArray2OfCartesianPoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_HArray2OfCartesianPoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_HArray2OfCartesianPoint self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_HArray2OfCartesianPoint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_DecrementRefCounter(self, *args)

Handle_StepGeom_HArray2OfCartesianPoint_swigregister = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_swigregister
Handle_StepGeom_HArray2OfCartesianPoint_swigregister(Handle_StepGeom_HArray2OfCartesianPoint)

def Handle_StepGeom_HArray2OfCartesianPoint_DownCast(thing):
    return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_DownCast(thing)
Handle_StepGeom_HArray2OfCartesianPoint_DownCast = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_DownCast

class Handle_StepGeom_ReparametrisedCompositeCurveSegment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_ReparametrisedCompositeCurveSegment self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, StepGeom_ReparametrisedCompositeCurveSegment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Handle_StepGeom_ReparametrisedCompositeCurveSegment theHandle) -> Handle_StepGeom_ReparametrisedCompositeCurveSegment
        assign(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, StepGeom_ReparametrisedCompositeCurveSegment thePtr) -> Handle_StepGeom_ReparametrisedCompositeCurveSegment
        assign(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Handle_StepGeom_ReparametrisedCompositeCurveSegment theHandle) -> Handle_StepGeom_ReparametrisedCompositeCurveSegment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> StepGeom_ReparametrisedCompositeCurveSegment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> StepGeom_ReparametrisedCompositeCurveSegment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> StepGeom_ReparametrisedCompositeCurveSegment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_ReparametrisedCompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_ReparametrisedCompositeCurveSegment

    def Init(self, *args):
        """
        Init(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, StepGeom_TransitionCode const aTransition, Standard_Boolean const aSameSense, Handle_StepGeom_Curve aParentCurve, Standard_Real const aParamLength)

        :type aTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode
        :type aSameSense: bool
        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve
        :type aParamLength: float

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_Init(self, *args)


    def SetParamLength(self, *args):
        """
        SetParamLength(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Standard_Real const aParamLength)

        :type aParamLength: float

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_SetParamLength(self, *args)


    def ParamLength(self, *args):
        """
        ParamLength(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_ParamLength(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransition(self, *args):
        """
        SetTransition(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, StepGeom_TransitionCode const aTransition)

        :type aTransition: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_SetTransition(self, *args)


    def Transition(self, *args):
        """
        Transition(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> StepGeom_TransitionCode

        :rtype: OCC.wrapper.StepGeom.StepGeom_TransitionCode

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_Transition(self, *args)


    def SetSameSense(self, *args):
        """
        SetSameSense(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Standard_Boolean const aSameSense)

        :type aSameSense: bool

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_SetSameSense(self, *args)


    def SameSense(self, *args):
        """
        SameSense(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_SameSense(self, *args)


    def SetParentCurve(self, *args):
        """
        SetParentCurve(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Handle_StepGeom_Curve aParentCurve)

        :type aParentCurve: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_SetParentCurve(self, *args)


    def ParentCurve(self, *args):
        """
        ParentCurve(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> Handle_StepGeom_Curve

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Curve

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_ParentCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_ReparametrisedCompositeCurveSegment self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_ReparametrisedCompositeCurveSegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_ReparametrisedCompositeCurveSegment self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_ReparametrisedCompositeCurveSegment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_DecrementRefCounter(self, *args)

Handle_StepGeom_ReparametrisedCompositeCurveSegment_swigregister = _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_swigregister
Handle_StepGeom_ReparametrisedCompositeCurveSegment_swigregister(Handle_StepGeom_ReparametrisedCompositeCurveSegment)

def Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast(thing):
    return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast(thing)
Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast = _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast

class Handle_StepGeom_GeometricRepresentationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_GeometricRepresentationItem self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_GeometricRepresentationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_GeometricRepresentationItem self, StepGeom_GeometricRepresentationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_GeometricRepresentationItem self, Handle_StepGeom_GeometricRepresentationItem theHandle) -> Handle_StepGeom_GeometricRepresentationItem
        assign(Handle_StepGeom_GeometricRepresentationItem self, StepGeom_GeometricRepresentationItem thePtr) -> Handle_StepGeom_GeometricRepresentationItem
        assign(Handle_StepGeom_GeometricRepresentationItem self, Handle_StepGeom_GeometricRepresentationItem theHandle) -> Handle_StepGeom_GeometricRepresentationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_GeometricRepresentationItem self) -> StepGeom_GeometricRepresentationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_GeometricRepresentationItem self) -> StepGeom_GeometricRepresentationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_GeometricRepresentationItem self) -> StepGeom_GeometricRepresentationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_GeometricRepresentationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_GeometricRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeometricRepresentationItem_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeometricRepresentationItem

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_GeometricRepresentationItem self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeometricRepresentationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_GeometricRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepGeom_GeometricRepresentationItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_GeometricRepresentationItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_GeometricRepresentationItem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_GeometricRepresentationItem self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_GeometricRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_GeometricRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_GeometricRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_GeometricRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_GeometricRepresentationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_GeometricRepresentationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_GeometricRepresentationItem self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_GeometricRepresentationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_DecrementRefCounter(self, *args)

Handle_StepGeom_GeometricRepresentationItem_swigregister = _StepGeom.Handle_StepGeom_GeometricRepresentationItem_swigregister
Handle_StepGeom_GeometricRepresentationItem_swigregister(Handle_StepGeom_GeometricRepresentationItem)

def Handle_StepGeom_GeometricRepresentationItem_DownCast(thing):
    return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_DownCast(thing)
Handle_StepGeom_GeometricRepresentationItem_DownCast = _StepGeom.Handle_StepGeom_GeometricRepresentationItem_DownCast

class Handle_StepGeom_Polyline(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepGeom_Polyline self)

        Nullify the handle


        """
        return _StepGeom.Handle_StepGeom_Polyline_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepGeom_Polyline self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepGeom.Handle_StepGeom_Polyline_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepGeom_Polyline self, StepGeom_Polyline thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepGeom.Handle_StepGeom_Polyline_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepGeom_Polyline self, Handle_StepGeom_Polyline theHandle) -> Handle_StepGeom_Polyline
        assign(Handle_StepGeom_Polyline self, StepGeom_Polyline thePtr) -> Handle_StepGeom_Polyline
        assign(Handle_StepGeom_Polyline self, Handle_StepGeom_Polyline theHandle) -> Handle_StepGeom_Polyline

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepGeom.Handle_StepGeom_Polyline_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepGeom_Polyline self) -> StepGeom_Polyline

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Polyline_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepGeom_Polyline self) -> StepGeom_Polyline

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepGeom.Handle_StepGeom_Polyline___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepGeom_Polyline self) -> StepGeom_Polyline

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepGeom.Handle_StepGeom_Polyline___ref__(self, *args)


    def __hash__(self):
        return _StepGeom.Handle_StepGeom_Polyline___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepGeom.Handle_StepGeom_Polyline___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepGeom.new_Handle_StepGeom_Polyline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Polyline_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Polyline

    def Init(self, *args):
        """
        Init(Handle_StepGeom_Polyline self, Handle_TCollection_HAsciiString aName, Handle_StepGeom_HArray1OfCartesianPoint aPoints)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPoints: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_Polyline_Init(self, *args)


    def SetPoints(self, *args):
        """
        SetPoints(Handle_StepGeom_Polyline self, Handle_StepGeom_HArray1OfCartesianPoint aPoints)

        :type aPoints: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_Polyline_SetPoints(self, *args)


    def Points(self, *args):
        """
        Points(Handle_StepGeom_Polyline self) -> Handle_StepGeom_HArray1OfCartesianPoint

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.Handle_StepGeom_Polyline_Points(self, *args)


    def PointsValue(self, *args):
        """
        PointsValue(Handle_StepGeom_Polyline self, Standard_Integer const num) -> Handle_StepGeom_CartesianPoint

        :type num: int
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.Handle_StepGeom_Polyline_PointsValue(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(Handle_StepGeom_Polyline self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Polyline_NbPoints(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepGeom_Polyline self) -> char const *

        :rtype: const char *

        """
        return _StepGeom.Handle_StepGeom_Polyline_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Polyline_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepGeom.Handle_StepGeom_Polyline_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepGeom_Polyline self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Polyline_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepGeom_Polyline self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepGeom.Handle_StepGeom_Polyline_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepGeom_Polyline self)

        Memory deallocator for transient classes


        """
        return _StepGeom.Handle_StepGeom_Polyline_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepGeom_Polyline self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepGeom_Polyline self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Polyline_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepGeom_Polyline self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepGeom_Polyline self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepGeom.Handle_StepGeom_Polyline_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepGeom_Polyline self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepGeom.Handle_StepGeom_Polyline_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepGeom_Polyline self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Polyline_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepGeom_Polyline self)

        Increments the reference counter of this object


        """
        return _StepGeom.Handle_StepGeom_Polyline_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepGeom_Polyline self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepGeom.Handle_StepGeom_Polyline_DecrementRefCounter(self, *args)

Handle_StepGeom_Polyline_swigregister = _StepGeom.Handle_StepGeom_Polyline_swigregister
Handle_StepGeom_Polyline_swigregister(Handle_StepGeom_Polyline)

def Handle_StepGeom_Polyline_DownCast(thing):
    return _StepGeom.Handle_StepGeom_Polyline_DownCast(thing)
Handle_StepGeom_Polyline_DownCast = _StepGeom.Handle_StepGeom_Polyline_DownCast



