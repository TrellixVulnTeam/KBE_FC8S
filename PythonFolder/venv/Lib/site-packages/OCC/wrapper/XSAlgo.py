# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XSAlgo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XSAlgo')
    _XSAlgo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XSAlgo', [dirname(__file__)])
        except ImportError:
            import _XSAlgo
            return _XSAlgo
        try:
            _mod = imp.load_module('_XSAlgo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XSAlgo = swig_import_helper()
    del swig_import_helper
else:
    import _XSAlgo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XSAlgo.delete_SwigPyIterator

    def value(self):
        return _XSAlgo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XSAlgo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XSAlgo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XSAlgo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XSAlgo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XSAlgo.SwigPyIterator_copy(self)

    def next(self):
        return _XSAlgo.SwigPyIterator_next(self)

    def __next__(self):
        return _XSAlgo.SwigPyIterator___next__(self)

    def previous(self):
        return _XSAlgo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XSAlgo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XSAlgo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XSAlgo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XSAlgo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XSAlgo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XSAlgo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XSAlgo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XSAlgo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XSAlgo.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XSAlgo.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XSAlgo.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XSAlgo.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSAlgo.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XSAlgo.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XSAlgo.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XSAlgo.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XSAlgo.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XSAlgo.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XSAlgo.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XSAlgo.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSAlgo.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XSAlgo.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XSAlgo.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XSAlgo.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XSAlgo.ptr_to_number(item)
ptr_to_number = _XSAlgo.ptr_to_number

def HashCode(*args):
    return _XSAlgo.HashCode(*args)
HashCode = _XSAlgo.HashCode

def ptr_equal(a, b):
    return _XSAlgo.ptr_equal(a, b)
ptr_equal = _XSAlgo.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
XSAlgo_DEFAULT = _XSAlgo.XSAlgo_DEFAULT
XSAlgo_IGES = _XSAlgo.XSAlgo_IGES
XSAlgo_STEP = _XSAlgo.XSAlgo_STEP
class XSAlgo_ToolContainer(Standard.Standard_Transient):
    """Returns tools used by AlgoContainer"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XSAlgo_ToolContainer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XSAlgo_ToolContainer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XSAlgo_ToolContainer self) -> XSAlgo_ToolContainer

        Empty constructor


        """
        this = _XSAlgo.new_XSAlgo_ToolContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XSAlgo.XSAlgo_ToolContainer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XSAlgo.XSAlgo_ToolContainer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSAlgo.XSAlgo_ToolContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XSAlgo.delete_XSAlgo_ToolContainer
XSAlgo_ToolContainer_swigregister = _XSAlgo.XSAlgo_ToolContainer_swigregister
XSAlgo_ToolContainer_swigregister(XSAlgo_ToolContainer)

def XSAlgo_ToolContainer_get_type_name(*args):
    """
    XSAlgo_ToolContainer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XSAlgo.XSAlgo_ToolContainer_get_type_name(*args)

def XSAlgo_ToolContainer_get_type_descriptor(*args):
    """
    XSAlgo_ToolContainer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XSAlgo.XSAlgo_ToolContainer_get_type_descriptor(*args)

class XSAlgo_AlgoContainer(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XSAlgo_AlgoContainer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XSAlgo_AlgoContainer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XSAlgo_AlgoContainer self) -> XSAlgo_AlgoContainer

        Empty constructor


        """
        this = _XSAlgo.new_XSAlgo_AlgoContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetToolContainer(self, *args):
        """
        SetToolContainer(XSAlgo_AlgoContainer self, Handle_XSAlgo_ToolContainer TC)

        Sets ToolContainer

        :type TC: OCC.wrapper.XSAlgo.Handle_XSAlgo_ToolContainer

        """
        return _XSAlgo.XSAlgo_AlgoContainer_SetToolContainer(self, *args)


    def ToolContainer(self, *args):
        """
        ToolContainer(XSAlgo_AlgoContainer self) -> Handle_XSAlgo_ToolContainer

        Returns ToolContainer

        :rtype: OCC.wrapper.XSAlgo.Handle_XSAlgo_ToolContainer

        """
        return _XSAlgo.XSAlgo_AlgoContainer_ToolContainer(self, *args)


    def PrepareForTransfer(self, *args):
        """
        PrepareForTransfer(XSAlgo_AlgoContainer self)

        Performs actions necessary for preparing environment
        for transfer. Empty in Open version.


        """
        return _XSAlgo.XSAlgo_AlgoContainer_PrepareForTransfer(self, *args)


    def ProcessShape(self, *args):
        """
        ProcessShape(XSAlgo_AlgoContainer self, TopoDS_Shape shape, Standard_Real const Prec, Standard_Real const MaxTol, Standard_CString const rscfile, Standard_CString const seq, Handle_Standard_Transient info, Handle_Message_ProgressIndicator progress=0, Standard_Boolean const NonManifold) -> TopoDS_Shape

        Does shape processing with specified tolerances
        and returns resulting shape and associated information
        in the form of Transient.
        This information should be later transmitted to
        MergeTransferInfo in order to be recorded in the
        translation map

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Prec: float
        :type MaxTol: float
        :type rscfile: OCC.wrapper.Standard.Standard_CString
        :type seq: OCC.wrapper.Standard.Standard_CString
        :type info: OCC.wrapper.Standard.Handle_Standard_Transient
        :type progress: OCC.wrapper.Message.Handle_Message_ProgressIndicator
        :type NonManifold: bool
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XSAlgo.XSAlgo_AlgoContainer_ProcessShape(self, *args)


    def CheckPCurve(self, *args):
        """
        CheckPCurve(XSAlgo_AlgoContainer self, TopoDS_Edge edge, TopoDS_Face face, Standard_Real const preci, Standard_Boolean const isSeam) -> Standard_Boolean

        Checks quality of pcurve of the edge on the given face,
        and corrects it if necessary.

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type preci: float
        :type isSeam: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSAlgo.XSAlgo_AlgoContainer_CheckPCurve(self, *args)


    def MergeTransferInfo(self, *args):
        """
        MergeTransferInfo(XSAlgo_AlgoContainer self, Handle_Transfer_TransientProcess TP, Handle_Standard_Transient info, Standard_Integer const startTPitem=1)
        MergeTransferInfo(XSAlgo_AlgoContainer self, Handle_Transfer_FinderProcess FP, Handle_Standard_Transient info)

        Updates translation map (TP or FP) with information
        resulting from ShapeProcessing
        Parameter startTPitem can be used for optimisation, to
        restrict modifications to entities stored in TP starting
        from item startTPitem

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type info: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XSAlgo.XSAlgo_AlgoContainer_MergeTransferInfo(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XSAlgo.XSAlgo_AlgoContainer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XSAlgo.XSAlgo_AlgoContainer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSAlgo.XSAlgo_AlgoContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XSAlgo.delete_XSAlgo_AlgoContainer
XSAlgo_AlgoContainer_swigregister = _XSAlgo.XSAlgo_AlgoContainer_swigregister
XSAlgo_AlgoContainer_swigregister(XSAlgo_AlgoContainer)

def XSAlgo_AlgoContainer_get_type_name(*args):
    """
    XSAlgo_AlgoContainer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XSAlgo.XSAlgo_AlgoContainer_get_type_name(*args)

def XSAlgo_AlgoContainer_get_type_descriptor(*args):
    """
    XSAlgo_AlgoContainer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XSAlgo.XSAlgo_AlgoContainer_get_type_descriptor(*args)

class XSAlgo_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Provides initerface to the algorithms from Shape Healing
        and others for XSTEP processors.
        Creates and initializes default AlgoContainer.


        """
        return _XSAlgo.XSAlgo__Init(*args)

    Init = staticmethod(Init)

    def SetAlgoContainer(*args):
        """
        SetAlgoContainer(Handle_XSAlgo_AlgoContainer aContainer)

        Sets default AlgoContainer

        :type aContainer: OCC.wrapper.XSAlgo.Handle_XSAlgo_AlgoContainer

        """
        return _XSAlgo.XSAlgo__SetAlgoContainer(*args)

    SetAlgoContainer = staticmethod(SetAlgoContainer)

    def AlgoContainer(*args):
        """
        AlgoContainer() -> Handle_XSAlgo_AlgoContainer

        Returns default AlgoContainer

        :rtype: OCC.wrapper.XSAlgo.Handle_XSAlgo_AlgoContainer

        """
        return _XSAlgo.XSAlgo__AlgoContainer(*args)

    AlgoContainer = staticmethod(AlgoContainer)

    def __init__(self):
        this = _XSAlgo.new_XSAlgo_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSAlgo.delete_XSAlgo_
XSAlgo__swigregister = _XSAlgo.XSAlgo__swigregister
XSAlgo__swigregister(XSAlgo_)

def XSAlgo__Init(*args):
    """
    XSAlgo__Init()

    Provides initerface to the algorithms from Shape Healing
    and others for XSTEP processors.
    Creates and initializes default AlgoContainer.


    """
    return _XSAlgo.XSAlgo__Init(*args)

def XSAlgo__SetAlgoContainer(*args):
    """
    XSAlgo__SetAlgoContainer(Handle_XSAlgo_AlgoContainer aContainer)

    Sets default AlgoContainer

    :type aContainer: OCC.wrapper.XSAlgo.Handle_XSAlgo_AlgoContainer

    """
    return _XSAlgo.XSAlgo__SetAlgoContainer(*args)

def XSAlgo__AlgoContainer(*args):
    """
    XSAlgo__AlgoContainer() -> Handle_XSAlgo_AlgoContainer

    Returns default AlgoContainer

    :rtype: OCC.wrapper.XSAlgo.Handle_XSAlgo_AlgoContainer

    """
    return _XSAlgo.XSAlgo__AlgoContainer(*args)

class Handle_XSAlgo_ToolContainer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XSAlgo_ToolContainer self)

        Nullify the handle


        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XSAlgo_ToolContainer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XSAlgo_ToolContainer self, XSAlgo_ToolContainer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XSAlgo_ToolContainer self, Handle_XSAlgo_ToolContainer theHandle) -> Handle_XSAlgo_ToolContainer
        assign(Handle_XSAlgo_ToolContainer self, XSAlgo_ToolContainer thePtr) -> Handle_XSAlgo_ToolContainer
        assign(Handle_XSAlgo_ToolContainer self, Handle_XSAlgo_ToolContainer theHandle) -> Handle_XSAlgo_ToolContainer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XSAlgo_ToolContainer self) -> XSAlgo_ToolContainer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XSAlgo_ToolContainer self) -> XSAlgo_ToolContainer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XSAlgo_ToolContainer self) -> XSAlgo_ToolContainer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer___ref__(self, *args)


    def __hash__(self):
        return _XSAlgo.Handle_XSAlgo_ToolContainer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XSAlgo.Handle_XSAlgo_ToolContainer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XSAlgo.new_Handle_XSAlgo_ToolContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XSAlgo.Handle_XSAlgo_ToolContainer_DownCast)
    __swig_destroy__ = _XSAlgo.delete_Handle_XSAlgo_ToolContainer

    def get_type_name(self, *args):
        """
        get_type_name(Handle_XSAlgo_ToolContainer self) -> char const *

        :rtype: const char *

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSAlgo.Handle_XSAlgo_ToolContainer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSAlgo.Handle_XSAlgo_ToolContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XSAlgo_ToolContainer self)

        Memory deallocator for transient classes


        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XSAlgo_ToolContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XSAlgo_ToolContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XSAlgo_ToolContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XSAlgo_ToolContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XSAlgo_ToolContainer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XSAlgo_ToolContainer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XSAlgo_ToolContainer self)

        Increments the reference counter of this object


        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XSAlgo_ToolContainer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSAlgo.Handle_XSAlgo_ToolContainer_DecrementRefCounter(self, *args)

Handle_XSAlgo_ToolContainer_swigregister = _XSAlgo.Handle_XSAlgo_ToolContainer_swigregister
Handle_XSAlgo_ToolContainer_swigregister(Handle_XSAlgo_ToolContainer)

def Handle_XSAlgo_ToolContainer_DownCast(thing):
    return _XSAlgo.Handle_XSAlgo_ToolContainer_DownCast(thing)
Handle_XSAlgo_ToolContainer_DownCast = _XSAlgo.Handle_XSAlgo_ToolContainer_DownCast

class Handle_XSAlgo_AlgoContainer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XSAlgo_AlgoContainer self)

        Nullify the handle


        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XSAlgo_AlgoContainer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XSAlgo_AlgoContainer self, XSAlgo_AlgoContainer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XSAlgo_AlgoContainer self, Handle_XSAlgo_AlgoContainer theHandle) -> Handle_XSAlgo_AlgoContainer
        assign(Handle_XSAlgo_AlgoContainer self, XSAlgo_AlgoContainer thePtr) -> Handle_XSAlgo_AlgoContainer
        assign(Handle_XSAlgo_AlgoContainer self, Handle_XSAlgo_AlgoContainer theHandle) -> Handle_XSAlgo_AlgoContainer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XSAlgo_AlgoContainer self) -> XSAlgo_AlgoContainer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XSAlgo_AlgoContainer self) -> XSAlgo_AlgoContainer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XSAlgo_AlgoContainer self) -> XSAlgo_AlgoContainer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer___ref__(self, *args)


    def __hash__(self):
        return _XSAlgo.Handle_XSAlgo_AlgoContainer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XSAlgo.Handle_XSAlgo_AlgoContainer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XSAlgo.new_Handle_XSAlgo_AlgoContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XSAlgo.Handle_XSAlgo_AlgoContainer_DownCast)
    __swig_destroy__ = _XSAlgo.delete_Handle_XSAlgo_AlgoContainer

    def SetToolContainer(self, *args):
        """
        SetToolContainer(Handle_XSAlgo_AlgoContainer self, Handle_XSAlgo_ToolContainer TC)

        Sets ToolContainer

        :type TC: OCC.wrapper.XSAlgo.Handle_XSAlgo_ToolContainer

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_SetToolContainer(self, *args)


    def ToolContainer(self, *args):
        """
        ToolContainer(Handle_XSAlgo_AlgoContainer self) -> Handle_XSAlgo_ToolContainer

        Returns ToolContainer

        :rtype: OCC.wrapper.XSAlgo.Handle_XSAlgo_ToolContainer

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_ToolContainer(self, *args)


    def PrepareForTransfer(self, *args):
        """
        PrepareForTransfer(Handle_XSAlgo_AlgoContainer self)

        Performs actions necessary for preparing environment
        for transfer. Empty in Open version.


        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_PrepareForTransfer(self, *args)


    def ProcessShape(self, *args):
        """
        ProcessShape(Handle_XSAlgo_AlgoContainer self, TopoDS_Shape shape, Standard_Real const Prec, Standard_Real const MaxTol, Standard_CString const rscfile, Standard_CString const seq, Handle_Standard_Transient info, Handle_Message_ProgressIndicator progress=0, Standard_Boolean const NonManifold) -> TopoDS_Shape

        Does shape processing with specified tolerances
        and returns resulting shape and associated information
        in the form of Transient.
        This information should be later transmitted to
        MergeTransferInfo in order to be recorded in the
        translation map

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Prec: float
        :type MaxTol: float
        :type rscfile: OCC.wrapper.Standard.Standard_CString
        :type seq: OCC.wrapper.Standard.Standard_CString
        :type info: OCC.wrapper.Standard.Handle_Standard_Transient
        :type progress: OCC.wrapper.Message.Handle_Message_ProgressIndicator
        :type NonManifold: bool
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_ProcessShape(self, *args)


    def CheckPCurve(self, *args):
        """
        CheckPCurve(Handle_XSAlgo_AlgoContainer self, TopoDS_Edge edge, TopoDS_Face face, Standard_Real const preci, Standard_Boolean const isSeam) -> Standard_Boolean

        Checks quality of pcurve of the edge on the given face,
        and corrects it if necessary.

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type preci: float
        :type isSeam: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_CheckPCurve(self, *args)


    def MergeTransferInfo(self, *args):
        """
        MergeTransferInfo(Handle_XSAlgo_AlgoContainer self, Handle_Transfer_TransientProcess TP, Handle_Standard_Transient info, Standard_Integer const startTPitem=1)
        MergeTransferInfo(Handle_XSAlgo_AlgoContainer self, Handle_Transfer_FinderProcess FP, Handle_Standard_Transient info)

        Updates translation map (TP or FP) with information
        resulting from ShapeProcessing
        Parameter startTPitem can be used for optimisation, to
        restrict modifications to entities stored in TP starting
        from item startTPitem

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type info: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_MergeTransferInfo(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XSAlgo_AlgoContainer self) -> char const *

        :rtype: const char *

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSAlgo.Handle_XSAlgo_AlgoContainer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSAlgo.Handle_XSAlgo_AlgoContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XSAlgo_AlgoContainer self)

        Memory deallocator for transient classes


        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XSAlgo_AlgoContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XSAlgo_AlgoContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XSAlgo_AlgoContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XSAlgo_AlgoContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XSAlgo_AlgoContainer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XSAlgo_AlgoContainer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XSAlgo_AlgoContainer self)

        Increments the reference counter of this object


        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XSAlgo_AlgoContainer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSAlgo.Handle_XSAlgo_AlgoContainer_DecrementRefCounter(self, *args)

Handle_XSAlgo_AlgoContainer_swigregister = _XSAlgo.Handle_XSAlgo_AlgoContainer_swigregister
Handle_XSAlgo_AlgoContainer_swigregister(Handle_XSAlgo_AlgoContainer)

def Handle_XSAlgo_AlgoContainer_DownCast(thing):
    return _XSAlgo.Handle_XSAlgo_AlgoContainer_DownCast(thing)
Handle_XSAlgo_AlgoContainer_DownCast = _XSAlgo.Handle_XSAlgo_AlgoContainer_DownCast



