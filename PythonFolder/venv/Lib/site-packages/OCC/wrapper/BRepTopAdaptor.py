# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepTopAdaptor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepTopAdaptor')
    _BRepTopAdaptor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepTopAdaptor', [dirname(__file__)])
        except ImportError:
            import _BRepTopAdaptor
            return _BRepTopAdaptor
        try:
            _mod = imp.load_module('_BRepTopAdaptor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepTopAdaptor = swig_import_helper()
    del swig_import_helper
else:
    import _BRepTopAdaptor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepTopAdaptor.delete_SwigPyIterator

    def value(self):
        return _BRepTopAdaptor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepTopAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepTopAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepTopAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepTopAdaptor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepTopAdaptor.SwigPyIterator_copy(self)

    def next(self):
        return _BRepTopAdaptor.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepTopAdaptor.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepTopAdaptor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepTopAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepTopAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepTopAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepTopAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepTopAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepTopAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepTopAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepTopAdaptor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepTopAdaptor.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepTopAdaptor.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepTopAdaptor.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepTopAdaptor.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepTopAdaptor.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepTopAdaptor.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepTopAdaptor.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepTopAdaptor.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepTopAdaptor.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepTopAdaptor.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepTopAdaptor.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepTopAdaptor.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepTopAdaptor.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepTopAdaptor.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepTopAdaptor.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepTopAdaptor.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepTopAdaptor.ptr_to_number(item)
ptr_to_number = _BRepTopAdaptor.ptr_to_number

def HashCode(*args):
    return _BRepTopAdaptor.HashCode(*args)
HashCode = _BRepTopAdaptor.HashCode

def ptr_equal(a, b):
    return _BRepTopAdaptor.ptr_equal(a, b)
ptr_equal = _BRepTopAdaptor.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
class BRepTopAdaptor_HVertex(Adaptor3d.Adaptor3d_HVertex):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BRepTopAdaptor_HVertex
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BRepTopAdaptor_HVertex(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BRepTopAdaptor_HVertex self, TopoDS_Vertex Vtx, Handle_BRepAdaptor_HCurve2d Curve) -> BRepTopAdaptor_HVertex

        :type Vtx: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type Curve: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d

        """
        this = _BRepTopAdaptor.new_BRepTopAdaptor_HVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Vertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        res = _BRepTopAdaptor.BRepTopAdaptor_HVertex_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeVertex(self, *args):
        """
        ChangeVertex(BRepTopAdaptor_HVertex self) -> TopoDS_Vertex

        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_ChangeVertex(self, *args)


    def Value(self, *args):
        """
        Value(BRepTopAdaptor_HVertex self) -> gp_Pnt2d

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_Value(self, *args)


    def Parameter(self, *args):
        """
        Parameter(BRepTopAdaptor_HVertex self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_Parameter(self, *args)


    def Resolution(self, *args):
        """
        Resolution(BRepTopAdaptor_HVertex self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real

        Parametric resolution (2d).

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_Resolution(self, *args)


    def Orientation(self, *args):
        """
        Orientation(BRepTopAdaptor_HVertex self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_Orientation(self, *args)


    def IsSame(self, *args):
        """
        IsSame(BRepTopAdaptor_HVertex self, Handle_Adaptor3d_HVertex Other) -> Standard_Boolean

        :type Other: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_IsSame(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTopAdaptor.BRepTopAdaptor_HVertex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_HVertex
BRepTopAdaptor_HVertex_swigregister = _BRepTopAdaptor.BRepTopAdaptor_HVertex_swigregister
BRepTopAdaptor_HVertex_swigregister(BRepTopAdaptor_HVertex)

def BRepTopAdaptor_HVertex_get_type_name(*args):
    """
    BRepTopAdaptor_HVertex_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BRepTopAdaptor.BRepTopAdaptor_HVertex_get_type_name(*args)

def BRepTopAdaptor_HVertex_get_type_descriptor(*args):
    """
    BRepTopAdaptor_HVertex_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BRepTopAdaptor.BRepTopAdaptor_HVertex_get_type_descriptor(*args)

class BRepTopAdaptor_FClass2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepTopAdaptor_FClass2d self, TopoDS_Face F, Standard_Real const Tol) -> BRepTopAdaptor_FClass2d

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type Tol: float

        """
        this = _BRepTopAdaptor.new_BRepTopAdaptor_FClass2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PerformInfinitePoint(self, *args):
        """
        PerformInfinitePoint(BRepTopAdaptor_FClass2d self) -> TopAbs_State

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_PerformInfinitePoint(self, *args)


    def Perform(self, *args):
        """
        Perform(BRepTopAdaptor_FClass2d self, gp_Pnt2d Puv, Standard_Boolean const RecadreOnPeriodic) -> TopAbs_State

        :type Puv: OCC.wrapper.gp.gp_Pnt2d
        :type RecadreOnPeriodic: bool
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Perform(self, *args)


    def Destroy(self, *args):
        """Destroy(BRepTopAdaptor_FClass2d self)"""
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Destroy(self, *args)


    def Copy(self, *args):
        """
        :type Other: OCC.wrapper.BRepTopAdaptor.BRepTopAdaptor_FClass2d
        :rtype: OCC.wrapper.BRepTopAdaptor.BRepTopAdaptor_FClass2d

        """
        res = _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Copy(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def assign(self, *args):
        """
        assign(BRepTopAdaptor_FClass2d self, BRepTopAdaptor_FClass2d Other) -> BRepTopAdaptor_FClass2d

        :type Other: OCC.wrapper.BRepTopAdaptor.BRepTopAdaptor_FClass2d
        :rtype: OCC.wrapper.BRepTopAdaptor.BRepTopAdaptor_FClass2d

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_assign(self, *args)


    def TestOnRestriction(self, *args):
        """
        TestOnRestriction(BRepTopAdaptor_FClass2d self, gp_Pnt2d Puv, Standard_Real const Tol, Standard_Boolean const RecadreOnPeriodic) -> TopAbs_State

        Test a point with +- an offset (Tol) and returns
        On if some points are OUT an some are IN
        (Caution: Internal use . see the code for more details)

        :type Puv: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type RecadreOnPeriodic: bool
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_TestOnRestriction(self, *args)

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_FClass2d
BRepTopAdaptor_FClass2d_swigregister = _BRepTopAdaptor.BRepTopAdaptor_FClass2d_swigregister
BRepTopAdaptor_FClass2d_swigregister(BRepTopAdaptor_FClass2d)

class BRepTopAdaptor_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepTopAdaptor_Tool self) -> BRepTopAdaptor_Tool
        __init__(BRepTopAdaptor_Tool self, TopoDS_Face F, Standard_Real const Tol2d) -> BRepTopAdaptor_Tool
        __init__(BRepTopAdaptor_Tool self, Handle_Adaptor3d_HSurface Surface, Standard_Real const Tol2d) -> BRepTopAdaptor_Tool

        :type Surface: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type Tol2d: float

        """
        this = _BRepTopAdaptor.new_BRepTopAdaptor_Tool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(BRepTopAdaptor_Tool self, TopoDS_Face F, Standard_Real const Tol2d)
        Init(BRepTopAdaptor_Tool self, Handle_Adaptor3d_HSurface Surface, Standard_Real const Tol2d)

        :type Surface: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type Tol2d: float

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_Init(self, *args)


    def GetTopolTool(self, *args):
        """
        GetTopolTool(BRepTopAdaptor_Tool self) -> Handle_BRepTopAdaptor_TopolTool

        :rtype: OCC.wrapper.BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_GetTopolTool(self, *args)


    def SetTopolTool(self, *args):
        """
        SetTopolTool(BRepTopAdaptor_Tool self, Handle_BRepTopAdaptor_TopolTool TT)

        :type TT: OCC.wrapper.BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_SetTopolTool(self, *args)


    def GetSurface(self, *args):
        """
        GetSurface(BRepTopAdaptor_Tool self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_GetSurface(self, *args)


    def Destroy(self, *args):
        """Destroy(BRepTopAdaptor_Tool self)"""
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_Destroy(self, *args)

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_Tool
BRepTopAdaptor_Tool_swigregister = _BRepTopAdaptor.BRepTopAdaptor_Tool_swigregister
BRepTopAdaptor_Tool_swigregister(BRepTopAdaptor_Tool)

class Handle_BRepTopAdaptor_HVertex(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BRepTopAdaptor_HVertex self)

        Nullify the handle


        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BRepTopAdaptor_HVertex self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BRepTopAdaptor_HVertex self, BRepTopAdaptor_HVertex thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BRepTopAdaptor_HVertex self, Handle_BRepTopAdaptor_HVertex theHandle) -> Handle_BRepTopAdaptor_HVertex
        assign(Handle_BRepTopAdaptor_HVertex self, BRepTopAdaptor_HVertex thePtr) -> Handle_BRepTopAdaptor_HVertex
        assign(Handle_BRepTopAdaptor_HVertex self, Handle_BRepTopAdaptor_HVertex theHandle) -> Handle_BRepTopAdaptor_HVertex

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BRepTopAdaptor_HVertex self) -> BRepTopAdaptor_HVertex

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BRepTopAdaptor_HVertex self) -> BRepTopAdaptor_HVertex

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BRepTopAdaptor_HVertex self) -> BRepTopAdaptor_HVertex

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex___ref__(self, *args)


    def __hash__(self):
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BRepTopAdaptor.new_Handle_BRepTopAdaptor_HVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DownCast)
    __swig_destroy__ = _BRepTopAdaptor.delete_Handle_BRepTopAdaptor_HVertex

    def Vertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        res = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeVertex(self, *args):
        """
        ChangeVertex(Handle_BRepTopAdaptor_HVertex self) -> TopoDS_Vertex

        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_ChangeVertex(self, *args)


    def Value(self, *args):
        """
        Value(Handle_BRepTopAdaptor_HVertex self) -> gp_Pnt2d

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Value(self, *args)


    def Parameter(self, *args):
        """
        Parameter(Handle_BRepTopAdaptor_HVertex self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Parameter(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_BRepTopAdaptor_HVertex self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real

        Parametric resolution (2d).

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Resolution(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_BRepTopAdaptor_HVertex self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Orientation(self, *args)


    def IsSame(self, *args):
        """
        IsSame(Handle_BRepTopAdaptor_HVertex self, Handle_Adaptor3d_HVertex Other) -> Standard_Boolean

        :type Other: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IsSame(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BRepTopAdaptor_HVertex self) -> char const *

        :rtype: const char *

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BRepTopAdaptor_HVertex self)

        Memory deallocator for transient classes


        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BRepTopAdaptor_HVertex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BRepTopAdaptor_HVertex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BRepTopAdaptor_HVertex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BRepTopAdaptor_HVertex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BRepTopAdaptor_HVertex self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BRepTopAdaptor_HVertex self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BRepTopAdaptor_HVertex self)

        Increments the reference counter of this object


        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BRepTopAdaptor_HVertex self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DecrementRefCounter(self, *args)

Handle_BRepTopAdaptor_HVertex_swigregister = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_swigregister
Handle_BRepTopAdaptor_HVertex_swigregister(Handle_BRepTopAdaptor_HVertex)

def Handle_BRepTopAdaptor_HVertex_DownCast(thing):
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DownCast(thing)
Handle_BRepTopAdaptor_HVertex_DownCast = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DownCast

class BRepTopAdaptor_TopolTool(Adaptor3d.Adaptor3d_TopolTool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BRepTopAdaptor_TopolTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BRepTopAdaptor_TopolTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BRepTopAdaptor_TopolTool self) -> BRepTopAdaptor_TopolTool
        __init__(BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HSurface Surface) -> BRepTopAdaptor_TopolTool

        :type Surface: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        this = _BRepTopAdaptor.new_BRepTopAdaptor_TopolTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Initialize(self, *args):
        """
        Initialize(BRepTopAdaptor_TopolTool self)
        Initialize(BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HSurface S)
        Initialize(BRepTopAdaptor_TopolTool self, Handle_Adaptor2d_HCurve2d Curve)

        :type Curve: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Initialize(self, *args)


    def Init(self, *args):
        """Init(BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Init(self, *args)


    def More(self, *args):
        """
        More(BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_More(self, *args)


    def Value(self, *args):
        """
        Value(BRepTopAdaptor_TopolTool self) -> Handle_Adaptor2d_HCurve2d

        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Value(self, *args)


    def Next(self, *args):
        """Next(BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Next(self, *args)


    def Edge(self, *args):
        """
        Edge(BRepTopAdaptor_TopolTool self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Edge(self, *args)


    def InitVertexIterator(self, *args):
        """InitVertexIterator(BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_InitVertexIterator(self, *args)


    def MoreVertex(self, *args):
        """
        MoreVertex(BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_MoreVertex(self, *args)


    def Vertex(self, *args):
        """
        Vertex(BRepTopAdaptor_TopolTool self) -> Handle_Adaptor3d_HVertex

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Vertex(self, *args)


    def NextVertex(self, *args):
        """NextVertex(BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_NextVertex(self, *args)


    def Classify(self, *args):
        """
        Classify(BRepTopAdaptor_TopolTool self, gp_Pnt2d P2d, Standard_Real const Tol, Standard_Boolean const RecadreOnPeriodic) -> TopAbs_State

        :type P2d: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type RecadreOnPeriodic: bool
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Classify(self, *args)


    def IsThePointOn(self, *args):
        """
        IsThePointOn(BRepTopAdaptor_TopolTool self, gp_Pnt2d P2d, Standard_Real const Tol, Standard_Boolean const RecadreOnPeriodic) -> Standard_Boolean

        see the code for specifications)

        :type P2d: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type RecadreOnPeriodic: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_IsThePointOn(self, *args)


    def Orientation(self, *args):
        """
        Orientation(BRepTopAdaptor_TopolTool self, Handle_Adaptor2d_HCurve2d C) -> TopAbs_Orientation
        Orientation(BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HVertex C) -> TopAbs_Orientation

        If the function returns the orientation of the arc.
        If the orientation is FORWARD or REVERSED, the arc is
        a "real" limit of the surface.
        If the orientation is INTERNAL or EXTERNAL, the arc is
        considered as an arc on the surface.

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Orientation(self, *args)


    def Destroy(self, *args):
        """Destroy(BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Destroy(self, *args)


    def Has3d(self, *args):
        """
        Has3d(BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        answers if arcs and vertices may have 3d representations,
        so that we could use Tol3d and Pnt methods.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Has3d(self, *args)


    def Tol3d(self, *args):
        """
        Tol3d(BRepTopAdaptor_TopolTool self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real
        Tol3d(BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HVertex V) -> Standard_Real

        returns 3d tolerance of the vertex V

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Tol3d(self, *args)


    def Pnt(self, *args):
        """
        Pnt(BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HVertex V) -> gp_Pnt

        returns 3d point of the vertex V

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Pnt(self, *args)


    def ComputeSamplePoints(self, *args):
        """ComputeSamplePoints(BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_ComputeSamplePoints(self, *args)


    def NbSamplesU(self, *args):
        """
        NbSamplesU(BRepTopAdaptor_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_NbSamplesU(self, *args)


    def NbSamplesV(self, *args):
        """
        NbSamplesV(BRepTopAdaptor_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_NbSamplesV(self, *args)


    def NbSamples(self, *args):
        """
        NbSamples(BRepTopAdaptor_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_NbSamples(self, *args)


    def SamplePoint(self, *args):
        """
        SamplePoint(BRepTopAdaptor_TopolTool self, Standard_Integer const Index, gp_Pnt2d P2d, gp_Pnt P3d)

        :type Index: int
        :type P2d: OCC.wrapper.gp.gp_Pnt2d
        :type P3d: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_SamplePoint(self, *args)


    def DomainIsInfinite(self, *args):
        """
        DomainIsInfinite(BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_DomainIsInfinite(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTopAdaptor.BRepTopAdaptor_TopolTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_TopolTool
BRepTopAdaptor_TopolTool_swigregister = _BRepTopAdaptor.BRepTopAdaptor_TopolTool_swigregister
BRepTopAdaptor_TopolTool_swigregister(BRepTopAdaptor_TopolTool)

def BRepTopAdaptor_TopolTool_get_type_name(*args):
    """
    BRepTopAdaptor_TopolTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_get_type_name(*args)

def BRepTopAdaptor_TopolTool_get_type_descriptor(*args):
    """
    BRepTopAdaptor_TopolTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_get_type_descriptor(*args)

class Handle_BRepTopAdaptor_TopolTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BRepTopAdaptor_TopolTool self)

        Nullify the handle


        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BRepTopAdaptor_TopolTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BRepTopAdaptor_TopolTool self, BRepTopAdaptor_TopolTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BRepTopAdaptor_TopolTool self, Handle_BRepTopAdaptor_TopolTool theHandle) -> Handle_BRepTopAdaptor_TopolTool
        assign(Handle_BRepTopAdaptor_TopolTool self, BRepTopAdaptor_TopolTool thePtr) -> Handle_BRepTopAdaptor_TopolTool
        assign(Handle_BRepTopAdaptor_TopolTool self, Handle_BRepTopAdaptor_TopolTool theHandle) -> Handle_BRepTopAdaptor_TopolTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BRepTopAdaptor_TopolTool self) -> BRepTopAdaptor_TopolTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BRepTopAdaptor_TopolTool self) -> BRepTopAdaptor_TopolTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BRepTopAdaptor_TopolTool self) -> BRepTopAdaptor_TopolTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool___ref__(self, *args)


    def __hash__(self):
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BRepTopAdaptor.new_Handle_BRepTopAdaptor_TopolTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DownCast)
    __swig_destroy__ = _BRepTopAdaptor.delete_Handle_BRepTopAdaptor_TopolTool

    def Initialize(self, *args):
        """
        Initialize(Handle_BRepTopAdaptor_TopolTool self)
        Initialize(Handle_BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HSurface S)
        Initialize(Handle_BRepTopAdaptor_TopolTool self, Handle_Adaptor2d_HCurve2d Curve)

        :type Curve: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Initialize(self, *args)


    def Init(self, *args):
        """Init(Handle_BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Init(self, *args)


    def More(self, *args):
        """
        More(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_More(self, *args)


    def Value(self, *args):
        """
        Value(Handle_BRepTopAdaptor_TopolTool self) -> Handle_Adaptor2d_HCurve2d

        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Value(self, *args)


    def Next(self, *args):
        """Next(Handle_BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Next(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Edge(self, *args)


    def InitVertexIterator(self, *args):
        """InitVertexIterator(Handle_BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_InitVertexIterator(self, *args)


    def MoreVertex(self, *args):
        """
        MoreVertex(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_MoreVertex(self, *args)


    def Vertex(self, *args):
        """
        Vertex(Handle_BRepTopAdaptor_TopolTool self) -> Handle_Adaptor3d_HVertex

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Vertex(self, *args)


    def NextVertex(self, *args):
        """NextVertex(Handle_BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_NextVertex(self, *args)


    def Classify(self, *args):
        """
        Classify(Handle_BRepTopAdaptor_TopolTool self, gp_Pnt2d P2d, Standard_Real const Tol, Standard_Boolean const RecadreOnPeriodic) -> TopAbs_State

        :type P2d: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type RecadreOnPeriodic: bool
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Classify(self, *args)


    def IsThePointOn(self, *args):
        """
        IsThePointOn(Handle_BRepTopAdaptor_TopolTool self, gp_Pnt2d P2d, Standard_Real const Tol, Standard_Boolean const RecadreOnPeriodic) -> Standard_Boolean

        see the code for specifications)

        :type P2d: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type RecadreOnPeriodic: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsThePointOn(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_BRepTopAdaptor_TopolTool self, Handle_Adaptor2d_HCurve2d C) -> TopAbs_Orientation
        Orientation(Handle_BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HVertex C) -> TopAbs_Orientation

        If the function returns the orientation of the arc.
        If the orientation is FORWARD or REVERSED, the arc is
        a "real" limit of the surface.
        If the orientation is INTERNAL or EXTERNAL, the arc is
        considered as an arc on the surface.

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Orientation(self, *args)


    def Destroy(self, *args):
        """Destroy(Handle_BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Destroy(self, *args)


    def Has3d(self, *args):
        """
        Has3d(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        answers if arcs and vertices may have 3d representations,
        so that we could use Tol3d and Pnt methods.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Has3d(self, *args)


    def Tol3d(self, *args):
        """
        Tol3d(Handle_BRepTopAdaptor_TopolTool self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real
        Tol3d(Handle_BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HVertex V) -> Standard_Real

        returns 3d tolerance of the vertex V

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Tol3d(self, *args)


    def Pnt(self, *args):
        """
        Pnt(Handle_BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HVertex V) -> gp_Pnt

        returns 3d point of the vertex V

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Pnt(self, *args)


    def ComputeSamplePoints(self, *args):
        """ComputeSamplePoints(Handle_BRepTopAdaptor_TopolTool self)"""
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_ComputeSamplePoints(self, *args)


    def NbSamplesU(self, *args):
        """
        NbSamplesU(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_NbSamplesU(self, *args)


    def NbSamplesV(self, *args):
        """
        NbSamplesV(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_NbSamplesV(self, *args)


    def NbSamples(self, *args):
        """
        NbSamples(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_NbSamples(self, *args)


    def SamplePoint(self, *args):
        """
        SamplePoint(Handle_BRepTopAdaptor_TopolTool self, Standard_Integer const Index, gp_Pnt2d P2d, gp_Pnt P3d)

        :type Index: int
        :type P2d: OCC.wrapper.gp.gp_Pnt2d
        :type P3d: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_SamplePoint(self, *args)


    def DomainIsInfinite(self, *args):
        """
        DomainIsInfinite(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DomainIsInfinite(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BRepTopAdaptor_TopolTool self) -> char const *

        :rtype: const char *

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Identical(self, *args):
        """
        Identical(Handle_BRepTopAdaptor_TopolTool self, Handle_Adaptor3d_HVertex V1, Handle_Adaptor3d_HVertex V2) -> Standard_Boolean

        Returns True if the vertices V1 and V2 are identical.
        This method does not take the orientation of the
        vertices in account.

        :type V1: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :type V2: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Identical(self, *args)


    def UParameters(self, *args):
        """
        UParameters(Handle_BRepTopAdaptor_TopolTool self, NCollection_Array1_Standard_Real theArray)

        return the set of U parameters on the surface
        obtained by the method SamplePnts

        :type theArray: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_UParameters(self, *args)


    def VParameters(self, *args):
        """
        VParameters(Handle_BRepTopAdaptor_TopolTool self, NCollection_Array1_Standard_Real theArray)

        return the set of V parameters on the surface
        obtained by the method SamplePnts

        :type theArray: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_VParameters(self, *args)


    def SamplePnts(self, *args):
        """
        SamplePnts(Handle_BRepTopAdaptor_TopolTool self, Standard_Real const theDefl, Standard_Integer const theNUmin, Standard_Integer const theNVmin)

        compute the sample-points for the intersections algorithms
        by adaptive algorithm for BSpline surfaces. For other surfaces algorithm
        is the same as in method ComputeSamplePoints(), but only fill arrays of U
        and V sample parameters;
        theDefl is a requred deflection
        theNUmin, theNVmin are minimal nb points for U and V.

        :type theDefl: float
        :type theNUmin: int
        :type theNVmin: int

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_SamplePnts(self, *args)


    def BSplSamplePnts(self, *args):
        """
        BSplSamplePnts(Handle_BRepTopAdaptor_TopolTool self, Standard_Real const theDefl, Standard_Integer const theNUmin, Standard_Integer const theNVmin)

        compute the sample-points for the intersections algorithms
        by adaptive algorithm for BSpline surfaces  -  is  used  in  SamplePnts
        theDefl is a requred deflection
        theNUmin, theNVmin are minimal nb points for U and V.

        :type theDefl: float
        :type theNUmin: int
        :type theNVmin: int

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_BSplSamplePnts(self, *args)


    def IsUniformSampling(self, *args):
        """
        IsUniformSampling(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Boolean

        Returns true if provide uniform sampling of points.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsUniformSampling(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BRepTopAdaptor_TopolTool self)

        Memory deallocator for transient classes


        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BRepTopAdaptor_TopolTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BRepTopAdaptor_TopolTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BRepTopAdaptor_TopolTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BRepTopAdaptor_TopolTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BRepTopAdaptor_TopolTool self)

        Increments the reference counter of this object


        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BRepTopAdaptor_TopolTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DecrementRefCounter(self, *args)

Handle_BRepTopAdaptor_TopolTool_swigregister = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_swigregister
Handle_BRepTopAdaptor_TopolTool_swigregister(Handle_BRepTopAdaptor_TopolTool)

def Handle_BRepTopAdaptor_TopolTool_DownCast(thing):
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DownCast(thing)
Handle_BRepTopAdaptor_TopolTool_DownCast = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DownCast

class NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _BRepTopAdaptor.new_NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, BRepTopAdaptor_Tool theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, BRepTopAdaptor_Tool theItem) -> BRepTopAdaptor_Tool

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> BRepTopAdaptor_Tool

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> BRepTopAdaptor_Tool

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> BRepTopAdaptor_Tool

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_Size(self, *args)


    def __iter__(self):
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher___iter__(self)
    __swig_destroy__ = _BRepTopAdaptor.delete_NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher
NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_swigregister = _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_swigregister
NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_swigregister(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher)

class NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _BRepTopAdaptor.new_NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepTopAdaptor.delete_NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IteratorHelper

    def __next__(self):
        return _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IteratorHelper___next__(self)
NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IteratorHelper_swigregister = _BRepTopAdaptor.NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IteratorHelper_swigregister
NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IteratorHelper_swigregister(NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher_IteratorHelper)


try:
	BRepTopAdaptor_MapOfShapeTool = NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher
except NameError:
	pass # does not exist, probably ignored



