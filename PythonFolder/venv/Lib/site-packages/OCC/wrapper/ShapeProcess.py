# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeProcess')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeProcess')
    _ShapeProcess = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeProcess', [dirname(__file__)])
        except ImportError:
            import _ShapeProcess
            return _ShapeProcess
        try:
            _mod = imp.load_module('_ShapeProcess', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeProcess = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeProcess
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeProcess.delete_SwigPyIterator

    def value(self):
        return _ShapeProcess.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ShapeProcess.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ShapeProcess.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ShapeProcess.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ShapeProcess.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ShapeProcess.SwigPyIterator_copy(self)

    def next(self):
        return _ShapeProcess.SwigPyIterator_next(self)

    def __next__(self):
        return _ShapeProcess.SwigPyIterator___next__(self)

    def previous(self):
        return _ShapeProcess.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ShapeProcess.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ShapeProcess.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ShapeProcess.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ShapeProcess.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ShapeProcess.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ShapeProcess.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ShapeProcess.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ShapeProcess.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ShapeProcess.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ShapeProcess.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ShapeProcess.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ShapeProcess.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeProcess.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ShapeProcess.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ShapeProcess.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ShapeProcess.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ShapeProcess.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ShapeProcess.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ShapeProcess.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ShapeProcess.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeProcess.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ShapeProcess.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ShapeProcess.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ShapeProcess.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ShapeProcess.ptr_to_number(item)
ptr_to_number = _ShapeProcess.ptr_to_number

def HashCode(*args):
    return _ShapeProcess.HashCode(*args)
HashCode = _ShapeProcess.HashCode

def ptr_equal(a, b):
    return _ShapeProcess.ptr_equal(a, b)
ptr_equal = _ShapeProcess.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeBuild
else:
    import ShapeBuild
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
class ShapeProcess_Operator(Standard.Standard_Transient):
    """
    Abstract Operator class providing a tool to
    perform an operation on Context
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ShapeProcess_Operator
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ShapeProcess_Operator(self) 
            return h


    def Perform(self, *args):
        """
        Perform(ShapeProcess_Operator self, Handle_ShapeProcess_Context context) -> Standard_Boolean

        Performs operation and eventually records
        changes in the context

        :type context: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Context
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_Operator_Perform(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ShapeProcess.ShapeProcess_Operator_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ShapeProcess.ShapeProcess_Operator_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.ShapeProcess_Operator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_Operator
ShapeProcess_Operator_swigregister = _ShapeProcess.ShapeProcess_Operator_swigregister
ShapeProcess_Operator_swigregister(ShapeProcess_Operator)

def ShapeProcess_Operator_get_type_name(*args):
    """
    ShapeProcess_Operator_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ShapeProcess.ShapeProcess_Operator_get_type_name(*args)

def ShapeProcess_Operator_get_type_descriptor(*args):
    """
    ShapeProcess_Operator_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ShapeProcess.ShapeProcess_Operator_get_type_descriptor(*args)

class ShapeProcess_Context(Standard.Standard_Transient):
    """
    Provides convenient interface to resource file
    Allows to load resource file and get values of
    attributes starting from some scope, for example
    if scope is defined as "ToV4" and requested parameter
    is "exec.op", value of "ToV4.exec.op" parameter from
    the resource file will be returned
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ShapeProcess_Context
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ShapeProcess_Context(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ShapeProcess_Context self) -> ShapeProcess_Context
        __init__(ShapeProcess_Context self, Standard_CString const file, Standard_CString const scope) -> ShapeProcess_Context

        Creates a new tool and initialises by name of
        resource file and (if specified) starting scope
        Calls method Init()

        :type file: OCC.wrapper.Standard.Standard_CString
        :type scope: OCC.wrapper.Standard.Standard_CString

        """
        this = _ShapeProcess.new_ShapeProcess_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(ShapeProcess_Context self, Standard_CString const file, Standard_CString const scope) -> Standard_Boolean

        Initialises a tool by loading resource file and
        (if specified) sets starting scope
        Returns False if resource file not found

        :type file: OCC.wrapper.Standard.Standard_CString
        :type scope: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_Context_Init(self, *args)


    def LoadResourceManager(self, *args):
        """
        LoadResourceManager(ShapeProcess_Context self, Standard_CString const file) -> Handle_Resource_Manager

        Loading Resource_Manager object if this object not
        equal internal static Resource_Manager object or
        internal static Resource_Manager object is null

        :type file: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Resource.Handle_Resource_Manager

        """
        return _ShapeProcess.ShapeProcess_Context_LoadResourceManager(self, *args)


    def ResourceManager(self, *args):
        """
        Returns internal Resource_Manager object

        :rtype: OCC.wrapper.Resource.Handle_Resource_Manager

        """
        res = _ShapeProcess.ShapeProcess_Context_ResourceManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetScope(self, *args):
        """
        SetScope(ShapeProcess_Context self, Standard_CString const scope)

        Set a new (sub)scope

        :type scope: OCC.wrapper.Standard.Standard_CString

        """
        return _ShapeProcess.ShapeProcess_Context_SetScope(self, *args)


    def UnSetScope(self, *args):
        """
        UnSetScope(ShapeProcess_Context self)

        Go out of current scope


        """
        return _ShapeProcess.ShapeProcess_Context_UnSetScope(self, *args)


    def IsParamSet(self, *args):
        """
        IsParamSet(ShapeProcess_Context self, Standard_CString const param) -> Standard_Boolean

        Returns True if parameter is defined in the resource file

        :type param: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_Context_IsParamSet(self, *args)


    def GetReal(self, *args):
        """
        GetReal(ShapeProcess_Context self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_Context_GetReal(self, *args)


    def GetInteger(self, *args):
        """
        GetInteger(ShapeProcess_Context self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_Context_GetInteger(self, *args)


    def GetBoolean(self, *args):
        """
        GetBoolean(ShapeProcess_Context self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_Context_GetBoolean(self, *args)


    def GetString(self, *args):
        """
        GetString(ShapeProcess_Context self, Standard_CString const param, TCollection_AsciiString val) -> Standard_Boolean

        Get value of parameter as being of specific type
        Returns False if parameter is not defined or has a wrong type

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_Context_GetString(self, *args)


    def RealVal(self, *args):
        """
        RealVal(ShapeProcess_Context self, Standard_CString const param, Standard_Real const arg3) -> Standard_Real

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ShapeProcess.ShapeProcess_Context_RealVal(self, *args)


    def IntegerVal(self, *args):
        """
        IntegerVal(ShapeProcess_Context self, Standard_CString const param, Standard_Integer const arg3) -> Standard_Integer

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.ShapeProcess_Context_IntegerVal(self, *args)


    def BooleanVal(self, *args):
        """
        BooleanVal(ShapeProcess_Context self, Standard_CString const param, Standard_Boolean const arg3) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_Context_BooleanVal(self, *args)


    def StringVal(self, *args):
        """
        StringVal(ShapeProcess_Context self, Standard_CString const param, Standard_CString const arg3) -> Standard_CString

        Get value of parameter as being of specific type
        If parameter is not defined or does not have expected
        type, returns default value as specified

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _ShapeProcess.ShapeProcess_Context_StringVal(self, *args)


    def SetMessenger(self, *args):
        """
        SetMessenger(ShapeProcess_Context self, Handle_Message_Messenger messenger)

        Sets Messenger used for outputting messages.

        :type messenger: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _ShapeProcess.ShapeProcess_Context_SetMessenger(self, *args)


    def Messenger(self, *args):
        """
        Messenger(ShapeProcess_Context self) -> Handle_Message_Messenger

        Returns Messenger used for outputting messages.

        :rtype: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _ShapeProcess.ShapeProcess_Context_Messenger(self, *args)


    def SetProgress(self, *args):
        """
        SetProgress(ShapeProcess_Context self, Handle_Message_ProgressIndicator theProgress)

        Sets Progress Indicator.

        :type theProgress: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _ShapeProcess.ShapeProcess_Context_SetProgress(self, *args)


    def Progress(self, *args):
        """
        Progress(ShapeProcess_Context self) -> Handle_Message_ProgressIndicator

        Returns Progress Indicator.

        :rtype: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _ShapeProcess.ShapeProcess_Context_Progress(self, *args)


    def SetTraceLevel(self, *args):
        """
        SetTraceLevel(ShapeProcess_Context self, Standard_Integer const tracelev)

        Sets trace level used for outputting messages
        - 0: no trace at all
        - 1: errors
        - 2: errors and warnings
        - 3: all messages
        Default is 1 : Errors traced

        :type tracelev: int

        """
        return _ShapeProcess.ShapeProcess_Context_SetTraceLevel(self, *args)


    def TraceLevel(self, *args):
        """
        TraceLevel(ShapeProcess_Context self) -> Standard_Integer

        Returns trace level used for outputting messages.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.ShapeProcess_Context_TraceLevel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ShapeProcess.ShapeProcess_Context_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ShapeProcess.ShapeProcess_Context_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.ShapeProcess_Context_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_Context
ShapeProcess_Context_swigregister = _ShapeProcess.ShapeProcess_Context_swigregister
ShapeProcess_Context_swigregister(ShapeProcess_Context)

def ShapeProcess_Context_get_type_name(*args):
    """
    ShapeProcess_Context_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ShapeProcess.ShapeProcess_Context_get_type_name(*args)

def ShapeProcess_Context_get_type_descriptor(*args):
    """
    ShapeProcess_Context_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ShapeProcess.ShapeProcess_Context_get_type_descriptor(*args)

class ShapeProcess_ShapeContext(ShapeProcess_Context):
    """
    Extends Context to handle shapes
    Contains map of shape-shape, and messages
    attached to shapes
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ShapeProcess_ShapeContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ShapeProcess_ShapeContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ShapeProcess_ShapeContext self, Standard_CString const file, Standard_CString const seq) -> ShapeProcess_ShapeContext
        __init__(ShapeProcess_ShapeContext self, TopoDS_Shape S, Standard_CString const file, Standard_CString const seq) -> ShapeProcess_ShapeContext

        Initializes a tool by resource file and shape
        to be processed

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type file: OCC.wrapper.Standard.Standard_CString
        :type seq: OCC.wrapper.Standard.Standard_CString

        """
        this = _ShapeProcess.new_ShapeProcess_ShapeContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(ShapeProcess_ShapeContext self, TopoDS_Shape S)

        Initializes tool by a new shape and clears all results

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Init(self, *args)


    def Shape(self, *args):
        """
        Returns shape being processed

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _ShapeProcess.ShapeProcess_ShapeContext_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Result(self, *args):
        """
        Returns current result

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _ShapeProcess.ShapeProcess_ShapeContext_Result(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Map(self, *args):
        """
        Returns map of replacements shape -> shape
        This map is not recursive

        :rtype: OCC.wrapper.TopTools.TopTools_DataMapOfShapeShape

        """
        res = _ShapeProcess.ShapeProcess_ShapeContext_Map(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Messages(self, *args):
        """
        :rtype: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_MsgRegistrator

        """
        res = _ShapeProcess.ShapeProcess_ShapeContext_Messages(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDetalisation(self, *args):
        """
        SetDetalisation(ShapeProcess_ShapeContext self, TopAbs_ShapeEnum const level)

        :type level: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_SetDetalisation(self, *args)


    def GetDetalisation(self, *args):
        """
        GetDetalisation(ShapeProcess_ShapeContext self) -> TopAbs_ShapeEnum

        Set and get value for detalisation level
        Only shapes of types from TopoDS_COMPOUND and until
        specified detalisation level will be recorded in maps
        To cancel mapping, use TopAbs_SHAPE
        To force full mapping, use TopAbs_VERTEX
        The default level is TopAbs_FACE

        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_GetDetalisation(self, *args)


    def SetResult(self, *args):
        """
        SetResult(ShapeProcess_ShapeContext self, TopoDS_Shape S)

        Sets a new result shape
        NOTE: this method should be used very carefully
        to keep consistency of modifications
        It is recommended to use RecordModification() methods
        with explicit definition of mapping from current
        result to a new one

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_SetResult(self, *args)


    def RecordModification(self, *args):
        """
        RecordModification(ShapeProcess_ShapeContext self, NCollection_DataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher repl, Handle_ShapeExtend_MsgRegistrator msg=0)
        RecordModification(ShapeProcess_ShapeContext self, Handle_ShapeBuild_ReShape repl, Handle_ShapeExtend_MsgRegistrator msg)
        RecordModification(ShapeProcess_ShapeContext self, Handle_ShapeBuild_ReShape repl)
        RecordModification(ShapeProcess_ShapeContext self, TopoDS_Shape sh, BRepTools_Modifier repl, Handle_ShapeExtend_MsgRegistrator msg=0)

        Records modifications and resets result accordingly
        NOTE: modification of resulting shape should be explicitly
        defined in the maps along with modifications of subshapes

        In the last function, sh is the shape on which Modifier
        was run. It can be different from the whole shape,
        but in that case result as a whole should be reset later
        either by call to SetResult(), or by another call to
        RecordModification() which contains mapping of current
        result to a new one explicitly

        :type sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type repl: OCC.wrapper.BRepTools.BRepTools_Modifier
        :type msg: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_MsgRegistrator

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_RecordModification(self, *args)


    def AddMessage(self, *args):
        """
        AddMessage(ShapeProcess_ShapeContext self, TopoDS_Shape S, Message_Msg msg, Message_Gravity const gravity=Message_Warning)

        Record a message for shape S
        Shape S should be one of subshapes of original shape
        (or whole one), but not one of intermediate shapes
        Records only if Message() is not Null

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type msg: OCC.wrapper.Message.Message_Msg
        :type gravity: OCC.wrapper.Message.Message_Gravity

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_AddMessage(self, *args)


    def GetContinuity(self, *args):
        """
        GetContinuity(ShapeProcess_ShapeContext self, Standard_CString const param) -> Standard_Boolean

        Get value of parameter as being of the type GeomAbs_Shape
        Returns False if parameter is not defined or has a wrong type

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_GetContinuity(self, *args)


    def ContinuityVal(self, *args):
        """
        ContinuityVal(ShapeProcess_ShapeContext self, Standard_CString const param, GeomAbs_Shape const arg3) -> GeomAbs_Shape

        Get value of parameter as being of the type GeomAbs_Shape
        If parameter is not defined or does not have expected
        type, returns default value as specified

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_ContinuityVal(self, *args)


    def PrintStatistics(self, *args):
        """
        PrintStatistics(ShapeProcess_ShapeContext self)

        Prints statistics on Shape Processing onto the current Messenger.


        """
        return _ShapeProcess.ShapeProcess_ShapeContext_PrintStatistics(self, *args)


    def SetNonManifold(self, *args):
        """
        SetNonManifold(ShapeProcess_ShapeContext self, Standard_Boolean theNonManifold)

        Set NonManifold flag

        :type theNonManifold: bool

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_SetNonManifold(self, *args)


    def IsNonManifold(self, *args):
        """
        IsNonManifold(ShapeProcess_ShapeContext self) -> Standard_Boolean

        Get NonManifold flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_IsNonManifold(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.ShapeProcess_ShapeContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_ShapeContext
ShapeProcess_ShapeContext_swigregister = _ShapeProcess.ShapeProcess_ShapeContext_swigregister
ShapeProcess_ShapeContext_swigregister(ShapeProcess_ShapeContext)

def ShapeProcess_ShapeContext_get_type_name(*args):
    """
    ShapeProcess_ShapeContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ShapeProcess.ShapeProcess_ShapeContext_get_type_name(*args)

def ShapeProcess_ShapeContext_get_type_descriptor(*args):
    """
    ShapeProcess_ShapeContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ShapeProcess.ShapeProcess_ShapeContext_get_type_descriptor(*args)

class ShapeProcess_UOperator(ShapeProcess_Operator):
    """
    Defines operator as container for static function
    OperFunc. This allows user to create new operators
    without creation of new classes
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ShapeProcess_UOperator
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ShapeProcess_UOperator(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ShapeProcess_UOperator self, ShapeProcess_OperFunc const func) -> ShapeProcess_UOperator

        Creates operator with implementation defined as
        OperFunc (static function)

        :type func: OCC.wrapper.ShapeProcess.ShapeProcess_OperFunc

        """
        this = _ShapeProcess.new_ShapeProcess_UOperator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Perform(self, *args):
        """
        Perform(ShapeProcess_UOperator self, Handle_ShapeProcess_Context context) -> Standard_Boolean

        Performs operation and records changes in the context

        :type context: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Context
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess_UOperator_Perform(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ShapeProcess.ShapeProcess_UOperator_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ShapeProcess.ShapeProcess_UOperator_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.ShapeProcess_UOperator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_UOperator
ShapeProcess_UOperator_swigregister = _ShapeProcess.ShapeProcess_UOperator_swigregister
ShapeProcess_UOperator_swigregister(ShapeProcess_UOperator)

def ShapeProcess_UOperator_get_type_name(*args):
    """
    ShapeProcess_UOperator_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ShapeProcess.ShapeProcess_UOperator_get_type_name(*args)

def ShapeProcess_UOperator_get_type_descriptor(*args):
    """
    ShapeProcess_UOperator_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ShapeProcess.ShapeProcess_UOperator_get_type_descriptor(*args)

class ShapeProcess_(object):
    """
    Shape Processing module
    allows to define and apply general Shape Processing as a
    customizable sequence of Shape Healing operators. The
    customization is implemented via user-editable resource
    file which defines sequence of operators to be executed
    and their parameters.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def RegisterOperator(*args):
        """
        RegisterOperator(Standard_CString const name, Handle_ShapeProcess_Operator op) -> Standard_Boolean

        Registers operator to make it visible for Performer

        :type name: OCC.wrapper.Standard.Standard_CString
        :type op: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Operator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess__RegisterOperator(*args)

    RegisterOperator = staticmethod(RegisterOperator)

    def FindOperator(*args):
        """
        FindOperator(Standard_CString const name, Handle_ShapeProcess_Operator op) -> Standard_Boolean

        Finds operator by its name

        :type name: OCC.wrapper.Standard.Standard_CString
        :type op: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Operator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess__FindOperator(*args)

    FindOperator = staticmethod(FindOperator)

    def Perform(*args):
        """
        Perform(Handle_ShapeProcess_Context context, Standard_CString const seq) -> Standard_Boolean

        Performs a specified sequence of operators on Context
        Resource file and other data should be already loaded
        to Context (including description of sequence seq)

        :type context: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Context
        :type seq: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.ShapeProcess__Perform(*args)

    Perform = staticmethod(Perform)

    def __init__(self):
        """
        Shape Processing module
        allows to define and apply general Shape Processing as a
        customizable sequence of Shape Healing operators. The
        customization is implemented via user-editable resource
        file which defines sequence of operators to be executed
        and their parameters.
        """
        this = _ShapeProcess.new_ShapeProcess_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_
ShapeProcess__swigregister = _ShapeProcess.ShapeProcess__swigregister
ShapeProcess__swigregister(ShapeProcess_)

def ShapeProcess__RegisterOperator(*args):
    """
    ShapeProcess__RegisterOperator(Standard_CString const name, Handle_ShapeProcess_Operator op) -> Standard_Boolean

    Registers operator to make it visible for Performer

    :type name: OCC.wrapper.Standard.Standard_CString
    :type op: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Operator
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ShapeProcess.ShapeProcess__RegisterOperator(*args)

def ShapeProcess__FindOperator(*args):
    """
    ShapeProcess__FindOperator(Standard_CString const name, Handle_ShapeProcess_Operator op) -> Standard_Boolean

    Finds operator by its name

    :type name: OCC.wrapper.Standard.Standard_CString
    :type op: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Operator
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ShapeProcess.ShapeProcess__FindOperator(*args)

def ShapeProcess__Perform(*args):
    """
    ShapeProcess__Perform(Handle_ShapeProcess_Context context, Standard_CString const seq) -> Standard_Boolean

    Performs a specified sequence of operators on Context
    Resource file and other data should be already loaded
    to Context (including description of sequence seq)

    :type context: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Context
    :type seq: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ShapeProcess.ShapeProcess__Perform(*args)

class Handle_ShapeProcess_Context(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ShapeProcess_Context self)

        Nullify the handle


        """
        return _ShapeProcess.Handle_ShapeProcess_Context_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ShapeProcess_Context self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ShapeProcess_Context self, ShapeProcess_Context thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ShapeProcess_Context self, Handle_ShapeProcess_Context theHandle) -> Handle_ShapeProcess_Context
        assign(Handle_ShapeProcess_Context self, ShapeProcess_Context thePtr) -> Handle_ShapeProcess_Context
        assign(Handle_ShapeProcess_Context self, Handle_ShapeProcess_Context theHandle) -> Handle_ShapeProcess_Context

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ShapeProcess_Context self) -> ShapeProcess_Context

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ShapeProcess_Context self) -> ShapeProcess_Context

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_Context___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ShapeProcess_Context self) -> ShapeProcess_Context

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ShapeProcess.Handle_ShapeProcess_Context___ref__(self, *args)


    def __hash__(self):
        return _ShapeProcess.Handle_ShapeProcess_Context___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ShapeProcess.Handle_ShapeProcess_Context___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ShapeProcess.new_Handle_ShapeProcess_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_Context_DownCast)
    __swig_destroy__ = _ShapeProcess.delete_Handle_ShapeProcess_Context

    def Init(self, *args):
        """
        Init(Handle_ShapeProcess_Context self, Standard_CString const file, Standard_CString const scope) -> Standard_Boolean

        Initialises a tool by loading resource file and
        (if specified) sets starting scope
        Returns False if resource file not found

        :type file: OCC.wrapper.Standard.Standard_CString
        :type scope: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_Init(self, *args)


    def LoadResourceManager(self, *args):
        """
        LoadResourceManager(Handle_ShapeProcess_Context self, Standard_CString const file) -> Handle_Resource_Manager

        Loading Resource_Manager object if this object not
        equal internal static Resource_Manager object or
        internal static Resource_Manager object is null

        :type file: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Resource.Handle_Resource_Manager

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_LoadResourceManager(self, *args)


    def ResourceManager(self, *args):
        """
        Returns internal Resource_Manager object

        :rtype: OCC.wrapper.Resource.Handle_Resource_Manager

        """
        res = _ShapeProcess.Handle_ShapeProcess_Context_ResourceManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetScope(self, *args):
        """
        SetScope(Handle_ShapeProcess_Context self, Standard_CString const scope)

        Set a new (sub)scope

        :type scope: OCC.wrapper.Standard.Standard_CString

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_SetScope(self, *args)


    def UnSetScope(self, *args):
        """
        UnSetScope(Handle_ShapeProcess_Context self)

        Go out of current scope


        """
        return _ShapeProcess.Handle_ShapeProcess_Context_UnSetScope(self, *args)


    def IsParamSet(self, *args):
        """
        IsParamSet(Handle_ShapeProcess_Context self, Standard_CString const param) -> Standard_Boolean

        Returns True if parameter is defined in the resource file

        :type param: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_IsParamSet(self, *args)


    def GetReal(self, *args):
        """
        GetReal(Handle_ShapeProcess_Context self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_GetReal(self, *args)


    def GetInteger(self, *args):
        """
        GetInteger(Handle_ShapeProcess_Context self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_GetInteger(self, *args)


    def GetBoolean(self, *args):
        """
        GetBoolean(Handle_ShapeProcess_Context self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_GetBoolean(self, *args)


    def GetString(self, *args):
        """
        GetString(Handle_ShapeProcess_Context self, Standard_CString const param, TCollection_AsciiString val) -> Standard_Boolean

        Get value of parameter as being of specific type
        Returns False if parameter is not defined or has a wrong type

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_GetString(self, *args)


    def RealVal(self, *args):
        """
        RealVal(Handle_ShapeProcess_Context self, Standard_CString const param, Standard_Real const arg3) -> Standard_Real

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_RealVal(self, *args)


    def IntegerVal(self, *args):
        """
        IntegerVal(Handle_ShapeProcess_Context self, Standard_CString const param, Standard_Integer const arg3) -> Standard_Integer

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_IntegerVal(self, *args)


    def BooleanVal(self, *args):
        """
        BooleanVal(Handle_ShapeProcess_Context self, Standard_CString const param, Standard_Boolean const arg3) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_BooleanVal(self, *args)


    def StringVal(self, *args):
        """
        StringVal(Handle_ShapeProcess_Context self, Standard_CString const param, Standard_CString const arg3) -> Standard_CString

        Get value of parameter as being of specific type
        If parameter is not defined or does not have expected
        type, returns default value as specified

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_StringVal(self, *args)


    def SetMessenger(self, *args):
        """
        SetMessenger(Handle_ShapeProcess_Context self, Handle_Message_Messenger messenger)

        Sets Messenger used for outputting messages.

        :type messenger: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_SetMessenger(self, *args)


    def Messenger(self, *args):
        """
        Messenger(Handle_ShapeProcess_Context self) -> Handle_Message_Messenger

        Returns Messenger used for outputting messages.

        :rtype: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_Messenger(self, *args)


    def SetProgress(self, *args):
        """
        SetProgress(Handle_ShapeProcess_Context self, Handle_Message_ProgressIndicator theProgress)

        Sets Progress Indicator.

        :type theProgress: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_SetProgress(self, *args)


    def Progress(self, *args):
        """
        Progress(Handle_ShapeProcess_Context self) -> Handle_Message_ProgressIndicator

        Returns Progress Indicator.

        :rtype: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_Progress(self, *args)


    def SetTraceLevel(self, *args):
        """
        SetTraceLevel(Handle_ShapeProcess_Context self, Standard_Integer const tracelev)

        Sets trace level used for outputting messages
        - 0: no trace at all
        - 1: errors
        - 2: errors and warnings
        - 3: all messages
        Default is 1 : Errors traced

        :type tracelev: int

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_SetTraceLevel(self, *args)


    def TraceLevel(self, *args):
        """
        TraceLevel(Handle_ShapeProcess_Context self) -> Standard_Integer

        Returns trace level used for outputting messages.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_TraceLevel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ShapeProcess_Context self) -> char const *

        :rtype: const char *

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.Handle_ShapeProcess_Context_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.Handle_ShapeProcess_Context_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_ShapeProcess_Context self)

        Memory deallocator for transient classes


        """
        return _ShapeProcess.Handle_ShapeProcess_Context_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ShapeProcess_Context self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ShapeProcess_Context self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ShapeProcess_Context self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ShapeProcess_Context self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ShapeProcess_Context self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ShapeProcess_Context self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ShapeProcess_Context self)

        Increments the reference counter of this object


        """
        return _ShapeProcess.Handle_ShapeProcess_Context_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ShapeProcess_Context self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_Context_DecrementRefCounter(self, *args)

Handle_ShapeProcess_Context_swigregister = _ShapeProcess.Handle_ShapeProcess_Context_swigregister
Handle_ShapeProcess_Context_swigregister(Handle_ShapeProcess_Context)

def Handle_ShapeProcess_Context_DownCast(thing):
    return _ShapeProcess.Handle_ShapeProcess_Context_DownCast(thing)
Handle_ShapeProcess_Context_DownCast = _ShapeProcess.Handle_ShapeProcess_Context_DownCast

class Handle_ShapeProcess_ShapeContext(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ShapeProcess_ShapeContext self)

        Nullify the handle


        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ShapeProcess_ShapeContext self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ShapeProcess_ShapeContext self, ShapeProcess_ShapeContext thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ShapeProcess_ShapeContext self, Handle_ShapeProcess_ShapeContext theHandle) -> Handle_ShapeProcess_ShapeContext
        assign(Handle_ShapeProcess_ShapeContext self, ShapeProcess_ShapeContext thePtr) -> Handle_ShapeProcess_ShapeContext
        assign(Handle_ShapeProcess_ShapeContext self, Handle_ShapeProcess_ShapeContext theHandle) -> Handle_ShapeProcess_ShapeContext

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ShapeProcess_ShapeContext self) -> ShapeProcess_ShapeContext

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ShapeProcess_ShapeContext self) -> ShapeProcess_ShapeContext

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ShapeProcess_ShapeContext self) -> ShapeProcess_ShapeContext

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext___ref__(self, *args)


    def __hash__(self):
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ShapeProcess.Handle_ShapeProcess_ShapeContext___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ShapeProcess.new_Handle_ShapeProcess_ShapeContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_ShapeContext_DownCast)
    __swig_destroy__ = _ShapeProcess.delete_Handle_ShapeProcess_ShapeContext

    def Init(self, *args):
        """
        Init(Handle_ShapeProcess_ShapeContext self, TopoDS_Shape S)

        Initializes tool by a new shape and clears all results

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_Init(self, *args)


    def Shape(self, *args):
        """
        Returns shape being processed

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _ShapeProcess.Handle_ShapeProcess_ShapeContext_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Result(self, *args):
        """
        Returns current result

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _ShapeProcess.Handle_ShapeProcess_ShapeContext_Result(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Map(self, *args):
        """
        Returns map of replacements shape -> shape
        This map is not recursive

        :rtype: OCC.wrapper.TopTools.TopTools_DataMapOfShapeShape

        """
        res = _ShapeProcess.Handle_ShapeProcess_ShapeContext_Map(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Messages(self, *args):
        """
        :rtype: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_MsgRegistrator

        """
        res = _ShapeProcess.Handle_ShapeProcess_ShapeContext_Messages(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDetalisation(self, *args):
        """
        SetDetalisation(Handle_ShapeProcess_ShapeContext self, TopAbs_ShapeEnum const level)

        :type level: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_SetDetalisation(self, *args)


    def GetDetalisation(self, *args):
        """
        GetDetalisation(Handle_ShapeProcess_ShapeContext self) -> TopAbs_ShapeEnum

        Set and get value for detalisation level
        Only shapes of types from TopoDS_COMPOUND and until
        specified detalisation level will be recorded in maps
        To cancel mapping, use TopAbs_SHAPE
        To force full mapping, use TopAbs_VERTEX
        The default level is TopAbs_FACE

        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_GetDetalisation(self, *args)


    def SetResult(self, *args):
        """
        SetResult(Handle_ShapeProcess_ShapeContext self, TopoDS_Shape S)

        Sets a new result shape
        NOTE: this method should be used very carefully
        to keep consistency of modifications
        It is recommended to use RecordModification() methods
        with explicit definition of mapping from current
        result to a new one

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_SetResult(self, *args)


    def RecordModification(self, *args):
        """
        RecordModification(Handle_ShapeProcess_ShapeContext self, NCollection_DataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher repl, Handle_ShapeExtend_MsgRegistrator msg=0)
        RecordModification(Handle_ShapeProcess_ShapeContext self, Handle_ShapeBuild_ReShape repl, Handle_ShapeExtend_MsgRegistrator msg)
        RecordModification(Handle_ShapeProcess_ShapeContext self, Handle_ShapeBuild_ReShape repl)
        RecordModification(Handle_ShapeProcess_ShapeContext self, TopoDS_Shape sh, BRepTools_Modifier repl, Handle_ShapeExtend_MsgRegistrator msg=0)

        Records modifications and resets result accordingly
        NOTE: modification of resulting shape should be explicitly
        defined in the maps along with modifications of subshapes

        In the last function, sh is the shape on which Modifier
        was run. It can be different from the whole shape,
        but in that case result as a whole should be reset later
        either by call to SetResult(), or by another call to
        RecordModification() which contains mapping of current
        result to a new one explicitly

        :type sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type repl: OCC.wrapper.BRepTools.BRepTools_Modifier
        :type msg: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_MsgRegistrator

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_RecordModification(self, *args)


    def AddMessage(self, *args):
        """
        AddMessage(Handle_ShapeProcess_ShapeContext self, TopoDS_Shape S, Message_Msg msg, Message_Gravity const gravity=Message_Warning)

        Record a message for shape S
        Shape S should be one of subshapes of original shape
        (or whole one), but not one of intermediate shapes
        Records only if Message() is not Null

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type msg: OCC.wrapper.Message.Message_Msg
        :type gravity: OCC.wrapper.Message.Message_Gravity

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_AddMessage(self, *args)


    def GetContinuity(self, *args):
        """
        GetContinuity(Handle_ShapeProcess_ShapeContext self, Standard_CString const param) -> Standard_Boolean

        Get value of parameter as being of the type GeomAbs_Shape
        Returns False if parameter is not defined or has a wrong type

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_GetContinuity(self, *args)


    def ContinuityVal(self, *args):
        """
        ContinuityVal(Handle_ShapeProcess_ShapeContext self, Standard_CString const param, GeomAbs_Shape const arg3) -> GeomAbs_Shape

        Get value of parameter as being of the type GeomAbs_Shape
        If parameter is not defined or does not have expected
        type, returns default value as specified

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_ContinuityVal(self, *args)


    def PrintStatistics(self, *args):
        """
        PrintStatistics(Handle_ShapeProcess_ShapeContext self)

        Prints statistics on Shape Processing onto the current Messenger.


        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_PrintStatistics(self, *args)


    def SetNonManifold(self, *args):
        """
        SetNonManifold(Handle_ShapeProcess_ShapeContext self, Standard_Boolean theNonManifold)

        Set NonManifold flag

        :type theNonManifold: bool

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_SetNonManifold(self, *args)


    def IsNonManifold(self, *args):
        """
        IsNonManifold(Handle_ShapeProcess_ShapeContext self) -> Standard_Boolean

        Get NonManifold flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_IsNonManifold(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ShapeProcess_ShapeContext self) -> char const *

        :rtype: const char *

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.Handle_ShapeProcess_ShapeContext_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.Handle_ShapeProcess_ShapeContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LoadResourceManager(self, *args):
        """
        LoadResourceManager(Handle_ShapeProcess_ShapeContext self, Standard_CString const file) -> Handle_Resource_Manager

        Loading Resource_Manager object if this object not
        equal internal static Resource_Manager object or
        internal static Resource_Manager object is null

        :type file: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Resource.Handle_Resource_Manager

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_LoadResourceManager(self, *args)


    def ResourceManager(self, *args):
        """
        Returns internal Resource_Manager object

        :rtype: OCC.wrapper.Resource.Handle_Resource_Manager

        """
        res = _ShapeProcess.Handle_ShapeProcess_ShapeContext_ResourceManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetScope(self, *args):
        """
        SetScope(Handle_ShapeProcess_ShapeContext self, Standard_CString const scope)

        Set a new (sub)scope

        :type scope: OCC.wrapper.Standard.Standard_CString

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_SetScope(self, *args)


    def UnSetScope(self, *args):
        """
        UnSetScope(Handle_ShapeProcess_ShapeContext self)

        Go out of current scope


        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_UnSetScope(self, *args)


    def IsParamSet(self, *args):
        """
        IsParamSet(Handle_ShapeProcess_ShapeContext self, Standard_CString const param) -> Standard_Boolean

        Returns True if parameter is defined in the resource file

        :type param: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_IsParamSet(self, *args)


    def GetReal(self, *args):
        """
        GetReal(Handle_ShapeProcess_ShapeContext self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_GetReal(self, *args)


    def GetInteger(self, *args):
        """
        GetInteger(Handle_ShapeProcess_ShapeContext self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_GetInteger(self, *args)


    def GetBoolean(self, *args):
        """
        GetBoolean(Handle_ShapeProcess_ShapeContext self, Standard_CString const param) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_GetBoolean(self, *args)


    def GetString(self, *args):
        """
        GetString(Handle_ShapeProcess_ShapeContext self, Standard_CString const param, TCollection_AsciiString val) -> Standard_Boolean

        Get value of parameter as being of specific type
        Returns False if parameter is not defined or has a wrong type

        :type param: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_GetString(self, *args)


    def RealVal(self, *args):
        """
        RealVal(Handle_ShapeProcess_ShapeContext self, Standard_CString const param, Standard_Real const arg3) -> Standard_Real

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_RealVal(self, *args)


    def IntegerVal(self, *args):
        """
        IntegerVal(Handle_ShapeProcess_ShapeContext self, Standard_CString const param, Standard_Integer const arg3) -> Standard_Integer

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_IntegerVal(self, *args)


    def BooleanVal(self, *args):
        """
        BooleanVal(Handle_ShapeProcess_ShapeContext self, Standard_CString const param, Standard_Boolean const arg3) -> Standard_Boolean

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_BooleanVal(self, *args)


    def StringVal(self, *args):
        """
        StringVal(Handle_ShapeProcess_ShapeContext self, Standard_CString const param, Standard_CString const arg3) -> Standard_CString

        Get value of parameter as being of specific type
        If parameter is not defined or does not have expected
        type, returns default value as specified

        :type param: OCC.wrapper.Standard.Standard_CString
        :type def: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_StringVal(self, *args)


    def SetMessenger(self, *args):
        """
        SetMessenger(Handle_ShapeProcess_ShapeContext self, Handle_Message_Messenger messenger)

        Sets Messenger used for outputting messages.

        :type messenger: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_SetMessenger(self, *args)


    def Messenger(self, *args):
        """
        Messenger(Handle_ShapeProcess_ShapeContext self) -> Handle_Message_Messenger

        Returns Messenger used for outputting messages.

        :rtype: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_Messenger(self, *args)


    def SetProgress(self, *args):
        """
        SetProgress(Handle_ShapeProcess_ShapeContext self, Handle_Message_ProgressIndicator theProgress)

        Sets Progress Indicator.

        :type theProgress: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_SetProgress(self, *args)


    def Progress(self, *args):
        """
        Progress(Handle_ShapeProcess_ShapeContext self) -> Handle_Message_ProgressIndicator

        Returns Progress Indicator.

        :rtype: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_Progress(self, *args)


    def SetTraceLevel(self, *args):
        """
        SetTraceLevel(Handle_ShapeProcess_ShapeContext self, Standard_Integer const tracelev)

        Sets trace level used for outputting messages
        - 0: no trace at all
        - 1: errors
        - 2: errors and warnings
        - 3: all messages
        Default is 1 : Errors traced

        :type tracelev: int

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_SetTraceLevel(self, *args)


    def TraceLevel(self, *args):
        """
        TraceLevel(Handle_ShapeProcess_ShapeContext self) -> Standard_Integer

        Returns trace level used for outputting messages.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_TraceLevel(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_ShapeProcess_ShapeContext self)

        Memory deallocator for transient classes


        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ShapeProcess_ShapeContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ShapeProcess_ShapeContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ShapeProcess_ShapeContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ShapeProcess_ShapeContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ShapeProcess_ShapeContext self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ShapeProcess_ShapeContext self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ShapeProcess_ShapeContext self)

        Increments the reference counter of this object


        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ShapeProcess_ShapeContext self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_ShapeContext_DecrementRefCounter(self, *args)

Handle_ShapeProcess_ShapeContext_swigregister = _ShapeProcess.Handle_ShapeProcess_ShapeContext_swigregister
Handle_ShapeProcess_ShapeContext_swigregister(Handle_ShapeProcess_ShapeContext)

def Handle_ShapeProcess_ShapeContext_DownCast(thing):
    return _ShapeProcess.Handle_ShapeProcess_ShapeContext_DownCast(thing)
Handle_ShapeProcess_ShapeContext_DownCast = _ShapeProcess.Handle_ShapeProcess_ShapeContext_DownCast

class ShapeProcess_OperLibrary(object):
    """
    Provides a set of following operators

    DirectFaces
    FixShape
    SameParameter
    SetTolerance
    SplitAngle
    BSplineRestriction
    ElementaryToRevolution
    SurfaceToBSpline
    ToBezier
    SplitContinuity
    SplitClosedFaces
    FixWireGaps
    FixFaceSize
    DropSmallEdges
    FixShape
    SplitClosedEdges
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Registers all the operators


        """
        return _ShapeProcess.ShapeProcess_OperLibrary_Init(*args)

    Init = staticmethod(Init)

    def ApplyModifier(*args):
        """
        ApplyModifier(TopoDS_Shape S, Handle_ShapeProcess_ShapeContext context, Handle_BRepTools_Modification M, NCollection_DataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher map, Handle_ShapeExtend_MsgRegistrator msg=0, Standard_Boolean theMutableInput) -> TopoDS_Shape

        Applies BRepTools_Modification to a shape,
        taking into account sharing of components of compounds.
        if theMutableInput vat is set to true then imput shape S
        can be modified during the modification process.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type context: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_ShapeContext
        :type M: OCC.wrapper.BRepTools.Handle_BRepTools_Modification
        :type map: OCC.wrapper.TopTools.TopTools_DataMapOfShapeShape
        :type msg: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_MsgRegistrator
        :type theMutableInput: bool
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_OperLibrary_ApplyModifier(*args)

    ApplyModifier = staticmethod(ApplyModifier)

    def __init__(self):
        """
        Provides a set of following operators

        DirectFaces
        FixShape
        SameParameter
        SetTolerance
        SplitAngle
        BSplineRestriction
        ElementaryToRevolution
        SurfaceToBSpline
        ToBezier
        SplitContinuity
        SplitClosedFaces
        FixWireGaps
        FixFaceSize
        DropSmallEdges
        FixShape
        SplitClosedEdges
        """
        this = _ShapeProcess.new_ShapeProcess_OperLibrary()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_OperLibrary
ShapeProcess_OperLibrary_swigregister = _ShapeProcess.ShapeProcess_OperLibrary_swigregister
ShapeProcess_OperLibrary_swigregister(ShapeProcess_OperLibrary)

def ShapeProcess_OperLibrary_Init(*args):
    """
    ShapeProcess_OperLibrary_Init()

    Registers all the operators


    """
    return _ShapeProcess.ShapeProcess_OperLibrary_Init(*args)

def ShapeProcess_OperLibrary_ApplyModifier(*args):
    """
    ShapeProcess_OperLibrary_ApplyModifier(TopoDS_Shape S, Handle_ShapeProcess_ShapeContext context, Handle_BRepTools_Modification M, NCollection_DataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher map, Handle_ShapeExtend_MsgRegistrator msg=0, Standard_Boolean theMutableInput) -> TopoDS_Shape

    Applies BRepTools_Modification to a shape,
    taking into account sharing of components of compounds.
    if theMutableInput vat is set to true then imput shape S
    can be modified during the modification process.

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape
    :type context: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_ShapeContext
    :type M: OCC.wrapper.BRepTools.Handle_BRepTools_Modification
    :type map: OCC.wrapper.TopTools.TopTools_DataMapOfShapeShape
    :type msg: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_MsgRegistrator
    :type theMutableInput: bool
    :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _ShapeProcess.ShapeProcess_OperLibrary_ApplyModifier(*args)

class Handle_ShapeProcess_Operator(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ShapeProcess_Operator self)

        Nullify the handle


        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ShapeProcess_Operator self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ShapeProcess_Operator self, ShapeProcess_Operator thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ShapeProcess_Operator self, Handle_ShapeProcess_Operator theHandle) -> Handle_ShapeProcess_Operator
        assign(Handle_ShapeProcess_Operator self, ShapeProcess_Operator thePtr) -> Handle_ShapeProcess_Operator
        assign(Handle_ShapeProcess_Operator self, Handle_ShapeProcess_Operator theHandle) -> Handle_ShapeProcess_Operator

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ShapeProcess_Operator self) -> ShapeProcess_Operator

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ShapeProcess_Operator self) -> ShapeProcess_Operator

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ShapeProcess_Operator self) -> ShapeProcess_Operator

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator___ref__(self, *args)


    def __hash__(self):
        return _ShapeProcess.Handle_ShapeProcess_Operator___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ShapeProcess.Handle_ShapeProcess_Operator___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ShapeProcess.new_Handle_ShapeProcess_Operator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_Operator_DownCast)
    __swig_destroy__ = _ShapeProcess.delete_Handle_ShapeProcess_Operator

    def Perform(self, *args):
        """
        Perform(Handle_ShapeProcess_Operator self, Handle_ShapeProcess_Context context) -> Standard_Boolean

        Performs operation and eventually records
        changes in the context

        :type context: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Context
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_Perform(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ShapeProcess_Operator self) -> char const *

        :rtype: const char *

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.Handle_ShapeProcess_Operator_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.Handle_ShapeProcess_Operator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_ShapeProcess_Operator self)

        Memory deallocator for transient classes


        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ShapeProcess_Operator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ShapeProcess_Operator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ShapeProcess_Operator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ShapeProcess_Operator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ShapeProcess_Operator self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ShapeProcess_Operator self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ShapeProcess_Operator self)

        Increments the reference counter of this object


        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ShapeProcess_Operator self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_Operator_DecrementRefCounter(self, *args)

Handle_ShapeProcess_Operator_swigregister = _ShapeProcess.Handle_ShapeProcess_Operator_swigregister
Handle_ShapeProcess_Operator_swigregister(Handle_ShapeProcess_Operator)

def Handle_ShapeProcess_Operator_DownCast(thing):
    return _ShapeProcess.Handle_ShapeProcess_Operator_DownCast(thing)
Handle_ShapeProcess_Operator_DownCast = _ShapeProcess.Handle_ShapeProcess_Operator_DownCast

class Handle_ShapeProcess_UOperator(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ShapeProcess_UOperator self)

        Nullify the handle


        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ShapeProcess_UOperator self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ShapeProcess_UOperator self, ShapeProcess_UOperator thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ShapeProcess_UOperator self, Handle_ShapeProcess_UOperator theHandle) -> Handle_ShapeProcess_UOperator
        assign(Handle_ShapeProcess_UOperator self, ShapeProcess_UOperator thePtr) -> Handle_ShapeProcess_UOperator
        assign(Handle_ShapeProcess_UOperator self, Handle_ShapeProcess_UOperator theHandle) -> Handle_ShapeProcess_UOperator

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ShapeProcess_UOperator self) -> ShapeProcess_UOperator

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ShapeProcess_UOperator self) -> ShapeProcess_UOperator

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ShapeProcess_UOperator self) -> ShapeProcess_UOperator

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator___ref__(self, *args)


    def __hash__(self):
        return _ShapeProcess.Handle_ShapeProcess_UOperator___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ShapeProcess.Handle_ShapeProcess_UOperator___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ShapeProcess.new_Handle_ShapeProcess_UOperator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_UOperator_DownCast)
    __swig_destroy__ = _ShapeProcess.delete_Handle_ShapeProcess_UOperator

    def Perform(self, *args):
        """
        Perform(Handle_ShapeProcess_UOperator self, Handle_ShapeProcess_Context context) -> Standard_Boolean

        Performs operation and records changes in the context

        :type context: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_Context
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_Perform(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ShapeProcess_UOperator self) -> char const *

        :rtype: const char *

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.Handle_ShapeProcess_UOperator_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeProcess.Handle_ShapeProcess_UOperator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_ShapeProcess_UOperator self)

        Memory deallocator for transient classes


        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ShapeProcess_UOperator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ShapeProcess_UOperator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ShapeProcess_UOperator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ShapeProcess_UOperator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ShapeProcess_UOperator self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ShapeProcess_UOperator self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ShapeProcess_UOperator self)

        Increments the reference counter of this object


        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ShapeProcess_UOperator self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeProcess.Handle_ShapeProcess_UOperator_DecrementRefCounter(self, *args)

Handle_ShapeProcess_UOperator_swigregister = _ShapeProcess.Handle_ShapeProcess_UOperator_swigregister
Handle_ShapeProcess_UOperator_swigregister(Handle_ShapeProcess_UOperator)

def Handle_ShapeProcess_UOperator_DownCast(thing):
    return _ShapeProcess.Handle_ShapeProcess_UOperator_DownCast(thing)
Handle_ShapeProcess_UOperator_DownCast = _ShapeProcess.Handle_ShapeProcess_UOperator_DownCast



