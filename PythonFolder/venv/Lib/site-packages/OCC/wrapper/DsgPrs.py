# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DsgPrs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DsgPrs')
    _DsgPrs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DsgPrs', [dirname(__file__)])
        except ImportError:
            import _DsgPrs
            return _DsgPrs
        try:
            _mod = imp.load_module('_DsgPrs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DsgPrs = swig_import_helper()
    del swig_import_helper
else:
    import _DsgPrs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DsgPrs.delete_SwigPyIterator

    def value(self):
        return _DsgPrs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DsgPrs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DsgPrs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DsgPrs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DsgPrs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DsgPrs.SwigPyIterator_copy(self)

    def next(self):
        return _DsgPrs.SwigPyIterator_next(self)

    def __next__(self):
        return _DsgPrs.SwigPyIterator___next__(self)

    def previous(self):
        return _DsgPrs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DsgPrs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DsgPrs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DsgPrs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DsgPrs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DsgPrs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DsgPrs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DsgPrs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DsgPrs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DsgPrs.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_DsgPrs.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _DsgPrs.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DsgPrs.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _DsgPrs.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _DsgPrs.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _DsgPrs.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DsgPrs.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_DsgPrs.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _DsgPrs.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DsgPrs.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _DsgPrs.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _DsgPrs.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _DsgPrs.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _DsgPrs.ptr_to_number(item)
ptr_to_number = _DsgPrs.ptr_to_number

def HashCode(*args):
    return _DsgPrs.HashCode(*args)
HashCode = _DsgPrs.HashCode

def ptr_equal(a, b):
    return _DsgPrs.ptr_equal(a, b)
ptr_equal = _DsgPrs.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
DsgPrs_AS_NONE = _DsgPrs.DsgPrs_AS_NONE
DsgPrs_AS_FIRSTAR = _DsgPrs.DsgPrs_AS_FIRSTAR
DsgPrs_AS_LASTAR = _DsgPrs.DsgPrs_AS_LASTAR
DsgPrs_AS_BOTHAR = _DsgPrs.DsgPrs_AS_BOTHAR
DsgPrs_AS_FIRSTPT = _DsgPrs.DsgPrs_AS_FIRSTPT
DsgPrs_AS_LASTPT = _DsgPrs.DsgPrs_AS_LASTPT
DsgPrs_AS_BOTHPT = _DsgPrs.DsgPrs_AS_BOTHPT
DsgPrs_AS_FIRSTAR_LASTPT = _DsgPrs.DsgPrs_AS_FIRSTAR_LASTPT
DsgPrs_AS_FIRSTPT_LASTAR = _DsgPrs.DsgPrs_AS_FIRSTPT_LASTAR
class DsgPrs_FilletRadiusPresentation(object):
    """A framework for displaying radii of fillets."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const thevalue, TCollection_ExtendedString aText, gp_Pnt aPosition, gp_Dir aNormalDir, gp_Pnt aBasePnt, gp_Pnt aFirstPoint, gp_Pnt aSecondPoint, gp_Pnt aCenter, DsgPrs_ArrowSide const ArrowPrs, Standard_Boolean const drawRevers, gp_Pnt DrawPosition, gp_Pnt EndOfArrow, Handle_Geom_TrimmedCurve TrimCurve)

        Adds a display of the radius of a fillet to the
        presentation aPresentation. The display ttributes
        defined by the attribute manager aDrawer. the value
        specifies the length of the radius.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type thevalue: float
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aPosition: OCC.wrapper.gp.gp_Pnt
        :type aNormalDir: OCC.wrapper.gp.gp_Dir
        :type aBasePnt: OCC.wrapper.gp.gp_Pnt
        :type aFirstPoint: OCC.wrapper.gp.gp_Pnt
        :type aSecondPoint: OCC.wrapper.gp.gp_Pnt
        :type aCenter: OCC.wrapper.gp.gp_Pnt
        :type ArrowPrs: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
        :type drawRevers: bool
        :type DrawPosition: OCC.wrapper.gp.gp_Pnt
        :type EndOfArrow: OCC.wrapper.gp.gp_Pnt
        :type TrimCurve: OCC.wrapper.Geom.Handle_Geom_TrimmedCurve
        :type HasCircle: bool

        """
        return _DsgPrs.DsgPrs_FilletRadiusPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework for displaying radii of fillets."""
        this = _DsgPrs.new_DsgPrs_FilletRadiusPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_FilletRadiusPresentation
DsgPrs_FilletRadiusPresentation_swigregister = _DsgPrs.DsgPrs_FilletRadiusPresentation_swigregister
DsgPrs_FilletRadiusPresentation_swigregister(DsgPrs_FilletRadiusPresentation)

def DsgPrs_FilletRadiusPresentation_Add(*args):
    """
    DsgPrs_FilletRadiusPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const thevalue, TCollection_ExtendedString aText, gp_Pnt aPosition, gp_Dir aNormalDir, gp_Pnt aBasePnt, gp_Pnt aFirstPoint, gp_Pnt aSecondPoint, gp_Pnt aCenter, DsgPrs_ArrowSide const ArrowPrs, Standard_Boolean const drawRevers, gp_Pnt DrawPosition, gp_Pnt EndOfArrow, Handle_Geom_TrimmedCurve TrimCurve)

    Adds a display of the radius of a fillet to the
    presentation aPresentation. The display ttributes
    defined by the attribute manager aDrawer. the value
    specifies the length of the radius.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type thevalue: float
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type aPosition: OCC.wrapper.gp.gp_Pnt
    :type aNormalDir: OCC.wrapper.gp.gp_Dir
    :type aBasePnt: OCC.wrapper.gp.gp_Pnt
    :type aFirstPoint: OCC.wrapper.gp.gp_Pnt
    :type aSecondPoint: OCC.wrapper.gp.gp_Pnt
    :type aCenter: OCC.wrapper.gp.gp_Pnt
    :type ArrowPrs: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
    :type drawRevers: bool
    :type DrawPosition: OCC.wrapper.gp.gp_Pnt
    :type EndOfArrow: OCC.wrapper.gp.gp_Pnt
    :type TrimCurve: OCC.wrapper.Geom.Handle_Geom_TrimmedCurve
    :type HasCircle: bool

    """
    return _DsgPrs.DsgPrs_FilletRadiusPresentation_Add(*args)

class DsgPrs_TangentPresentation(object):
    """A framework to define display of tangents."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt OffsetPoint, gp_Dir aDirection, Standard_Real const aLength)

        Adds the point OffsetPoint, the direction aDirection
        and the length aLength to the presentation object aPresentation.
        The display attributes of the tangent are defined by
        the attribute manager aDrawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
        :type aDirection: OCC.wrapper.gp.gp_Dir
        :type aLength: float

        """
        return _DsgPrs.DsgPrs_TangentPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework to define display of tangents."""
        this = _DsgPrs.new_DsgPrs_TangentPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_TangentPresentation
DsgPrs_TangentPresentation_swigregister = _DsgPrs.DsgPrs_TangentPresentation_swigregister
DsgPrs_TangentPresentation_swigregister(DsgPrs_TangentPresentation)

def DsgPrs_TangentPresentation_Add(*args):
    """
    DsgPrs_TangentPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt OffsetPoint, gp_Dir aDirection, Standard_Real const aLength)

    Adds the point OffsetPoint, the direction aDirection
    and the length aLength to the presentation object aPresentation.
    The display attributes of the tangent are defined by
    the attribute manager aDrawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
    :type aDirection: OCC.wrapper.gp.gp_Dir
    :type aLength: float

    """
    return _DsgPrs.DsgPrs_TangentPresentation_Add(*args)

class DsgPrs_ShapeDirPresentation(object):
    """
    A framework to define display of the normal to the
    surface of a shape.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation prs, Handle_Prs3d_Drawer aDrawer, TopoDS_Shape shape, Standard_Integer const mode)

        Adds the shape shape and the mode mode to the
        presentation object prs.
        The display attributes of the normal are defined by the
        attribute manager aDrawer.
        mode determines whether the first or the last point of
        the normal is given to the presentation object. If the
        first point: 0; if the last point, 1.

        :type prs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type mode: int

        """
        return _DsgPrs.DsgPrs_ShapeDirPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """
        A framework to define display of the normal to the
        surface of a shape.
        """
        this = _DsgPrs.new_DsgPrs_ShapeDirPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_ShapeDirPresentation
DsgPrs_ShapeDirPresentation_swigregister = _DsgPrs.DsgPrs_ShapeDirPresentation_swigregister
DsgPrs_ShapeDirPresentation_swigregister(DsgPrs_ShapeDirPresentation)

def DsgPrs_ShapeDirPresentation_Add(*args):
    """
    DsgPrs_ShapeDirPresentation_Add(Handle_Prs3d_Presentation prs, Handle_Prs3d_Drawer aDrawer, TopoDS_Shape shape, Standard_Integer const mode)

    Adds the shape shape and the mode mode to the
    presentation object prs.
    The display attributes of the normal are defined by the
    attribute manager aDrawer.
    mode determines whether the first or the last point of
    the normal is given to the presentation object. If the
    first point: 0; if the last point, 1.

    :type prs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type mode: int

    """
    return _DsgPrs.DsgPrs_ShapeDirPresentation_Add(*args)

class DsgPrs_IdenticPresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt aPntAttach, gp_Pnt aPntOffset)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt aFAttach, gp_Pnt aSAttach, gp_Pnt aPntOffset)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Ax2 aAx2, gp_Pnt aCenter, gp_Pnt aFAttach, gp_Pnt aSAttach, gp_Pnt aPntOffset)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Ax2 aAx2, gp_Pnt aCenter, gp_Pnt aFAttach, gp_Pnt aSAttach, gp_Pnt aPntOffset, gp_Pnt aPntOnCirc)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Elips anEllipse, gp_Pnt aFAttach, gp_Pnt aSAttach, gp_Pnt aPntOffset, gp_Pnt aPntOnElli)

        draws the 'identic' presentation in the case of
        ellipses: draws an arc of the anEllipse
        between <aFAttach> and <aSAttach> and
        draws a segment between <aPntOffset> and <aPntOnElli>

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type anEllipse: OCC.wrapper.gp.gp_Elips
        :type aFAttach: OCC.wrapper.gp.gp_Pnt
        :type aSAttach: OCC.wrapper.gp.gp_Pnt
        :type aPntOffset: OCC.wrapper.gp.gp_Pnt
        :type aPntOnElli: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_IdenticPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        this = _DsgPrs.new_DsgPrs_IdenticPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_IdenticPresentation
DsgPrs_IdenticPresentation_swigregister = _DsgPrs.DsgPrs_IdenticPresentation_swigregister
DsgPrs_IdenticPresentation_swigregister(DsgPrs_IdenticPresentation)

def DsgPrs_IdenticPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt aPntAttach, gp_Pnt aPntOffset)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt aFAttach, gp_Pnt aSAttach, gp_Pnt aPntOffset)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Ax2 aAx2, gp_Pnt aCenter, gp_Pnt aFAttach, gp_Pnt aSAttach, gp_Pnt aPntOffset)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Ax2 aAx2, gp_Pnt aCenter, gp_Pnt aFAttach, gp_Pnt aSAttach, gp_Pnt aPntOffset, gp_Pnt aPntOnCirc)
    DsgPrs_IdenticPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Elips anEllipse, gp_Pnt aFAttach, gp_Pnt aSAttach, gp_Pnt aPntOffset, gp_Pnt aPntOnElli)

    draws the 'identic' presentation in the case of
    ellipses: draws an arc of the anEllipse
    between <aFAttach> and <aSAttach> and
    draws a segment between <aPntOffset> and <aPntOnElli>

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type anEllipse: OCC.wrapper.gp.gp_Elips
    :type aFAttach: OCC.wrapper.gp.gp_Pnt
    :type aSAttach: OCC.wrapper.gp.gp_Pnt
    :type aPntOffset: OCC.wrapper.gp.gp_Pnt
    :type aPntOnElli: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_IdenticPresentation_Add(*args)

class DsgPrs_SymbPresentation(object):
    """A framework to define display of symbols."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt OffsetPoint)

        Adds the text aText and the point OffsetPoint to the
        presentation object aPresentation.
        The display attributes of the shaded plane are
        defined by the attribute manager aDrawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_SymbPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework to define display of symbols."""
        this = _DsgPrs.new_DsgPrs_SymbPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_SymbPresentation
DsgPrs_SymbPresentation_swigregister = _DsgPrs.DsgPrs_SymbPresentation_swigregister
DsgPrs_SymbPresentation_swigregister(DsgPrs_SymbPresentation)

def DsgPrs_SymbPresentation_Add(*args):
    """
    DsgPrs_SymbPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt OffsetPoint)

    Adds the text aText and the point OffsetPoint to the
    presentation object aPresentation.
    The display attributes of the shaded plane are
    defined by the attribute manager aDrawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_SymbPresentation_Add(*args)

class DsgPrs_AnglePresentation(object):
    """A framework for displaying angles."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const aVal, TCollection_ExtendedString aText, gp_Circ aCircle, gp_Pnt aPosition, gp_Pnt Apex, gp_Circ VminCircle, gp_Circ VmaxCircle, Standard_Real const aArrowSize)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Pnt OffsetPoint)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString thevalstring, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Pnt OffsetPoint)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString thevalstring, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString thevalstring, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Dir axisdir, gp_Pnt OffsetPoint)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString thevalstring, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Dir axisdir, Standard_Boolean const isPlane, gp_Ax1 AxisOfSurf, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, gp_Pnt theCenter, gp_Pnt AttachmentPoint1, gp_Ax1 theAxe, DsgPrs_ArrowSide const ArrowSide)

        simple representation of a poor lonesome angle dimension
        Draw a line from <theCenter>   to <AttachmentPoint1>, then operates
        a rotation around the perpmay add one  or
        two Arrows  according to  <ArrowSide>  value.  The
        attributes (color,arrowsize,...) are driven by the Drawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type theval: float
        :type theCenter: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
        :type theAxe: OCC.wrapper.gp.gp_Ax1
        :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

        """
        return _DsgPrs.DsgPrs_AnglePresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework for displaying angles."""
        this = _DsgPrs.new_DsgPrs_AnglePresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_AnglePresentation
DsgPrs_AnglePresentation_swigregister = _DsgPrs.DsgPrs_AnglePresentation_swigregister
DsgPrs_AnglePresentation_swigregister(DsgPrs_AnglePresentation)

def DsgPrs_AnglePresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const aVal, TCollection_ExtendedString aText, gp_Circ aCircle, gp_Pnt aPosition, gp_Pnt Apex, gp_Circ VminCircle, gp_Circ VmaxCircle, Standard_Real const aArrowSize)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Pnt OffsetPoint)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString thevalstring, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Pnt OffsetPoint)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString thevalstring, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString thevalstring, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Dir axisdir, gp_Pnt OffsetPoint)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString thevalstring, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Dir axisdir, Standard_Boolean const isPlane, gp_Ax1 AxisOfSurf, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
    DsgPrs_AnglePresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, gp_Pnt theCenter, gp_Pnt AttachmentPoint1, gp_Ax1 theAxe, DsgPrs_ArrowSide const ArrowSide)

    simple representation of a poor lonesome angle dimension
    Draw a line from <theCenter>   to <AttachmentPoint1>, then operates
    a rotation around the perpmay add one  or
    two Arrows  according to  <ArrowSide>  value.  The
    attributes (color,arrowsize,...) are driven by the Drawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type theval: float
    :type theCenter: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
    :type theAxe: OCC.wrapper.gp.gp_Ax1
    :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

    """
    return _DsgPrs.DsgPrs_AnglePresentation_Add(*args)

class DsgPrs_ShadedPlanePresentation(object):
    """A framework to define display of shaded planes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPt1, gp_Pnt aPt2, gp_Pnt aPt3)

        Adds the points aPt1, aPt2 and aPt3 to the
        presentation object, aPresentation.
        The display attributes of the shaded plane are
        defined by the attribute manager aDrawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aPt1: OCC.wrapper.gp.gp_Pnt
        :type aPt2: OCC.wrapper.gp.gp_Pnt
        :type aPt3: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_ShadedPlanePresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework to define display of shaded planes."""
        this = _DsgPrs.new_DsgPrs_ShadedPlanePresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_ShadedPlanePresentation
DsgPrs_ShadedPlanePresentation_swigregister = _DsgPrs.DsgPrs_ShadedPlanePresentation_swigregister
DsgPrs_ShadedPlanePresentation_swigregister(DsgPrs_ShadedPlanePresentation)

def DsgPrs_ShadedPlanePresentation_Add(*args):
    """
    DsgPrs_ShadedPlanePresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPt1, gp_Pnt aPt2, gp_Pnt aPt3)

    Adds the points aPt1, aPt2 and aPt3 to the
    presentation object, aPresentation.
    The display attributes of the shaded plane are
    defined by the attribute manager aDrawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aPt1: OCC.wrapper.gp.gp_Pnt
    :type aPt2: OCC.wrapper.gp.gp_Pnt
    :type aPt3: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_ShadedPlanePresentation_Add(*args)

class DsgPrs_MidPointPresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Ax2 theAxe, gp_Pnt MidPoint, gp_Pnt Position, gp_Pnt AttachPoint, Standard_Boolean const first)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Ax2 theAxe, gp_Pnt MidPoint, gp_Pnt Position, gp_Pnt AttachPoint, gp_Pnt Point1, gp_Pnt Point2, Standard_Boolean const first)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Circ aCircle, gp_Pnt MidPoint, gp_Pnt Position, gp_Pnt AttachPoint, gp_Pnt Point1, gp_Pnt Point2, Standard_Boolean const first)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Elips anElips, gp_Pnt MidPoint, gp_Pnt Position, gp_Pnt AttachPoint, gp_Pnt Point1, gp_Pnt Point2, Standard_Boolean const first)

        draws the representation of a MidPoint between
        two entire ellipses or two elliptic arcs.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type anElips: OCC.wrapper.gp.gp_Elips
        :type MidPoint: OCC.wrapper.gp.gp_Pnt
        :type Position: OCC.wrapper.gp.gp_Pnt
        :type AttachPoint: OCC.wrapper.gp.gp_Pnt
        :type Point1: OCC.wrapper.gp.gp_Pnt
        :type Point2: OCC.wrapper.gp.gp_Pnt
        :type first: bool

        """
        return _DsgPrs.DsgPrs_MidPointPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        this = _DsgPrs.new_DsgPrs_MidPointPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_MidPointPresentation
DsgPrs_MidPointPresentation_swigregister = _DsgPrs.DsgPrs_MidPointPresentation_swigregister
DsgPrs_MidPointPresentation_swigregister(DsgPrs_MidPointPresentation)

def DsgPrs_MidPointPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Ax2 theAxe, gp_Pnt MidPoint, gp_Pnt Position, gp_Pnt AttachPoint, Standard_Boolean const first)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Ax2 theAxe, gp_Pnt MidPoint, gp_Pnt Position, gp_Pnt AttachPoint, gp_Pnt Point1, gp_Pnt Point2, Standard_Boolean const first)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Circ aCircle, gp_Pnt MidPoint, gp_Pnt Position, gp_Pnt AttachPoint, gp_Pnt Point1, gp_Pnt Point2, Standard_Boolean const first)
    DsgPrs_MidPointPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Elips anElips, gp_Pnt MidPoint, gp_Pnt Position, gp_Pnt AttachPoint, gp_Pnt Point1, gp_Pnt Point2, Standard_Boolean const first)

    draws the representation of a MidPoint between
    two entire ellipses or two elliptic arcs.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type anElips: OCC.wrapper.gp.gp_Elips
    :type MidPoint: OCC.wrapper.gp.gp_Pnt
    :type Position: OCC.wrapper.gp.gp_Pnt
    :type AttachPoint: OCC.wrapper.gp.gp_Pnt
    :type Point1: OCC.wrapper.gp.gp_Pnt
    :type Point2: OCC.wrapper.gp.gp_Pnt
    :type first: bool

    """
    return _DsgPrs.DsgPrs_MidPointPresentation_Add(*args)

class DsgPrs_ParalPresentation(object):
    """A framework to define display of relations of parallelism between shapes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)

        Defines the display of elements showing relations of
        parallelism between shapes.
        These include the two points of attachment
        AttachmentPoint1 and AttachmentPoint1, the
        direction aDirection, the offset point OffsetPoint and
        the text aText.
        These arguments are added to the presentation
        object aPresentation. Their display attributes are
        defined by the attribute manager aDrawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
        :type aDirection: OCC.wrapper.gp.gp_Dir
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
        :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

        """
        return _DsgPrs.DsgPrs_ParalPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework to define display of relations of parallelism between shapes."""
        this = _DsgPrs.new_DsgPrs_ParalPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_ParalPresentation
DsgPrs_ParalPresentation_swigregister = _DsgPrs.DsgPrs_ParalPresentation_swigregister
DsgPrs_ParalPresentation_swigregister(DsgPrs_ParalPresentation)

def DsgPrs_ParalPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint)
    DsgPrs_ParalPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)

    Defines the display of elements showing relations of
    parallelism between shapes.
    These include the two points of attachment
    AttachmentPoint1 and AttachmentPoint1, the
    direction aDirection, the offset point OffsetPoint and
    the text aText.
    These arguments are added to the presentation
    object aPresentation. Their display attributes are
    defined by the attribute manager aDrawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
    :type aDirection: OCC.wrapper.gp.gp_Dir
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
    :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

    """
    return _DsgPrs.DsgPrs_ParalPresentation_Add(*args)

class DsgPrs_EllipseRadiusPresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Pnt anEndOfArrow, gp_Pnt aCenter, Standard_Boolean const IsMaxRadius, DsgPrs_ArrowSide const ArrowSide)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString aText, gp_Elips anEllipse, gp_Pnt AttachmentPoint, gp_Pnt anEndOfArrow, gp_Pnt aCenter, Standard_Real const uFirst, Standard_Boolean const IsInDomain, Standard_Boolean const IsMaxRadius, DsgPrs_ArrowSide const ArrowSide)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString aText, Handle_Geom_OffsetCurve aCurve, gp_Pnt AttachmentPoint, gp_Pnt anEndOfArrow, gp_Pnt aCenter, Standard_Real const uFirst, Standard_Boolean const IsInDomain, Standard_Boolean const IsMaxRadius, DsgPrs_ArrowSide const ArrowSide)

        draws a  Radius  (Major  or  Minor) representation
        for arc of an offset  curve  from  ellipse

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type theval: float
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aCurve: OCC.wrapper.Geom.Handle_Geom_OffsetCurve
        :type AttachmentPoint: OCC.wrapper.gp.gp_Pnt
        :type anEndOfArrow: OCC.wrapper.gp.gp_Pnt
        :type aCenter: OCC.wrapper.gp.gp_Pnt
        :type uFirst: float
        :type IsInDomain: bool
        :type IsMaxRadius: bool
        :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

        """
        return _DsgPrs.DsgPrs_EllipseRadiusPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        this = _DsgPrs.new_DsgPrs_EllipseRadiusPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_EllipseRadiusPresentation
DsgPrs_EllipseRadiusPresentation_swigregister = _DsgPrs.DsgPrs_EllipseRadiusPresentation_swigregister
DsgPrs_EllipseRadiusPresentation_swigregister(DsgPrs_EllipseRadiusPresentation)

def DsgPrs_EllipseRadiusPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Pnt anEndOfArrow, gp_Pnt aCenter, Standard_Boolean const IsMaxRadius, DsgPrs_ArrowSide const ArrowSide)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString aText, gp_Elips anEllipse, gp_Pnt AttachmentPoint, gp_Pnt anEndOfArrow, gp_Pnt aCenter, Standard_Real const uFirst, Standard_Boolean const IsInDomain, Standard_Boolean const IsMaxRadius, DsgPrs_ArrowSide const ArrowSide)
    DsgPrs_EllipseRadiusPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, Standard_Real const theval, TCollection_ExtendedString aText, Handle_Geom_OffsetCurve aCurve, gp_Pnt AttachmentPoint, gp_Pnt anEndOfArrow, gp_Pnt aCenter, Standard_Real const uFirst, Standard_Boolean const IsInDomain, Standard_Boolean const IsMaxRadius, DsgPrs_ArrowSide const ArrowSide)

    draws a  Radius  (Major  or  Minor) representation
    for arc of an offset  curve  from  ellipse

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type theval: float
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type aCurve: OCC.wrapper.Geom.Handle_Geom_OffsetCurve
    :type AttachmentPoint: OCC.wrapper.gp.gp_Pnt
    :type anEndOfArrow: OCC.wrapper.gp.gp_Pnt
    :type aCenter: OCC.wrapper.gp.gp_Pnt
    :type uFirst: float
    :type IsInDomain: bool
    :type IsMaxRadius: bool
    :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

    """
    return _DsgPrs.DsgPrs_EllipseRadiusPresentation_Add(*args)

class DsgPrs_ConcentricPresentation(object):
    """A framework to define display of relations of concentricity."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aCenter, Standard_Real const aRadius, gp_Dir aNorm, gp_Pnt aPoint)

        Defines the display of elements showing relations of
        concentricity between shapes.
        These include the center aCenter, the radius
        aRadius, the direction aNorm and the point aPoint.
        These arguments are added to the presentation
        object aPresentation. Their display attributes are
        defined by the attribute manager aDrawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aCenter: OCC.wrapper.gp.gp_Pnt
        :type aRadius: float
        :type aNorm: OCC.wrapper.gp.gp_Dir
        :type aPoint: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_ConcentricPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework to define display of relations of concentricity."""
        this = _DsgPrs.new_DsgPrs_ConcentricPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_ConcentricPresentation
DsgPrs_ConcentricPresentation_swigregister = _DsgPrs.DsgPrs_ConcentricPresentation_swigregister
DsgPrs_ConcentricPresentation_swigregister(DsgPrs_ConcentricPresentation)

def DsgPrs_ConcentricPresentation_Add(*args):
    """
    DsgPrs_ConcentricPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aCenter, Standard_Real const aRadius, gp_Dir aNorm, gp_Pnt aPoint)

    Defines the display of elements showing relations of
    concentricity between shapes.
    These include the center aCenter, the radius
    aRadius, the direction aNorm and the point aPoint.
    These arguments are added to the presentation
    object aPresentation. Their display attributes are
    defined by the attribute manager aDrawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aCenter: OCC.wrapper.gp.gp_Pnt
    :type aRadius: float
    :type aNorm: OCC.wrapper.gp.gp_Dir
    :type aPoint: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_ConcentricPresentation_Add(*args)

class DsgPrs_XYZPlanePresentation(object):
    """A framework for displaying the planes of an XYZ trihedron."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPt1, gp_Pnt aPt2, gp_Pnt aPt3)

        Draws each plane of a trihedron displayed in the
        presentation aPresentation and with attributes
        defined by the attribute manager aDrawer. Each
        triangular plane is defined by the points aPt1 aPt2 and aPt3.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aPt1: OCC.wrapper.gp.gp_Pnt
        :type aPt2: OCC.wrapper.gp.gp_Pnt
        :type aPt3: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_XYZPlanePresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework for displaying the planes of an XYZ trihedron."""
        this = _DsgPrs.new_DsgPrs_XYZPlanePresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_XYZPlanePresentation
DsgPrs_XYZPlanePresentation_swigregister = _DsgPrs.DsgPrs_XYZPlanePresentation_swigregister
DsgPrs_XYZPlanePresentation_swigregister(DsgPrs_XYZPlanePresentation)

def DsgPrs_XYZPlanePresentation_Add(*args):
    """
    DsgPrs_XYZPlanePresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPt1, gp_Pnt aPt2, gp_Pnt aPt3)

    Draws each plane of a trihedron displayed in the
    presentation aPresentation and with attributes
    defined by the attribute manager aDrawer. Each
    triangular plane is defined by the points aPt1 aPt2 and aPt3.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aPt1: OCC.wrapper.gp.gp_Pnt
    :type aPt2: OCC.wrapper.gp.gp_Pnt
    :type aPt3: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_XYZPlanePresentation_Add(*args)

class DsgPrs_LengthPresentation(object):
    """
    Framework for displaying lengths.
    The length displayed is indicated by line segments
    and text alone or by a combination of line segment,
    text and   arrows at either or both of its ends.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Pln PlaneOfFaces, gp_Dir aDirection, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, Handle_Geom_Surface SecondSurf, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt Pt1, gp_Pnt Pt2, DsgPrs_ArrowSide const ArrowSide)

        Draws a line segment representing a length in the
        display aPresentation.
        This segment joins the points AttachmentPoint1 and
        AttachmentPoint2, along the direction aDirection.
        The value of the enumeration ArrowSide controls
        whether arrows will be displayed at either or both ends of the length.
        The line and arrow attributes are specified by the attribute manager aDrawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type Pt1: OCC.wrapper.gp.gp_Pnt
        :type Pt2: OCC.wrapper.gp.gp_Pnt
        :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

        """
        return _DsgPrs.DsgPrs_LengthPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """
        Framework for displaying lengths.
        The length displayed is indicated by line segments
        and text alone or by a combination of line segment,
        text and   arrows at either or both of its ends.
        """
        this = _DsgPrs.new_DsgPrs_LengthPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_LengthPresentation
DsgPrs_LengthPresentation_swigregister = _DsgPrs.DsgPrs_LengthPresentation_swigregister
DsgPrs_LengthPresentation_swigregister(DsgPrs_LengthPresentation)

def DsgPrs_LengthPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Pln PlaneOfFaces, gp_Dir aDirection, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, Handle_Geom_Surface SecondSurf, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Pnt OffsetPoint, DsgPrs_ArrowSide const ArrowSide)
    DsgPrs_LengthPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt Pt1, gp_Pnt Pt2, DsgPrs_ArrowSide const ArrowSide)

    Draws a line segment representing a length in the
    display aPresentation.
    This segment joins the points AttachmentPoint1 and
    AttachmentPoint2, along the direction aDirection.
    The value of the enumeration ArrowSide controls
    whether arrows will be displayed at either or both ends of the length.
    The line and arrow attributes are specified by the attribute manager aDrawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type Pt1: OCC.wrapper.gp.gp_Pnt
    :type Pt2: OCC.wrapper.gp.gp_Pnt
    :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

    """
    return _DsgPrs.DsgPrs_LengthPresentation_Add(*args)

class DsgPrs_XYZAxisPresentation(object):
    """A framework for displaying the axes of an XYZ trihedron."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_LineAspect anLineAspect, gp_Dir aDir, Standard_Real const aVal, Standard_CString const aText, gp_Pnt aPfirst, gp_Pnt aPlast)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_LineAspect aLineAspect, Handle_Prs3d_ArrowAspect anArrowAspect, Handle_Prs3d_TextAspect aTextAspect, gp_Dir aDir, Standard_Real const aVal, Standard_CString const aText, gp_Pnt aPfirst, gp_Pnt aPlast)

        draws the presentation X ,Y ,Z axis

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aLineAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect
        :type anArrowAspect: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect
        :type aTextAspect: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect
        :type aDir: OCC.wrapper.gp.gp_Dir
        :type aVal: float
        :type aText: OCC.wrapper.Standard.Standard_CString
        :type aPfirst: OCC.wrapper.gp.gp_Pnt
        :type aPlast: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_XYZAxisPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework for displaying the axes of an XYZ trihedron."""
        this = _DsgPrs.new_DsgPrs_XYZAxisPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_XYZAxisPresentation
DsgPrs_XYZAxisPresentation_swigregister = _DsgPrs.DsgPrs_XYZAxisPresentation_swigregister
DsgPrs_XYZAxisPresentation_swigregister(DsgPrs_XYZAxisPresentation)

def DsgPrs_XYZAxisPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_LineAspect anLineAspect, gp_Dir aDir, Standard_Real const aVal, Standard_CString const aText, gp_Pnt aPfirst, gp_Pnt aPlast)
    DsgPrs_XYZAxisPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_LineAspect aLineAspect, Handle_Prs3d_ArrowAspect anArrowAspect, Handle_Prs3d_TextAspect aTextAspect, gp_Dir aDir, Standard_Real const aVal, Standard_CString const aText, gp_Pnt aPfirst, gp_Pnt aPlast)

    draws the presentation X ,Y ,Z axis

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aLineAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect
    :type anArrowAspect: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect
    :type aTextAspect: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect
    :type aDir: OCC.wrapper.gp.gp_Dir
    :type aVal: float
    :type aText: OCC.wrapper.Standard.Standard_CString
    :type aPfirst: OCC.wrapper.gp.gp_Pnt
    :type aPlast: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_XYZAxisPresentation_Add(*args)

class DsgPrs_RadiusPresentation(object):
    """A framework to define display of radii."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Circ aCircle, Standard_Real const firstparam, Standard_Real const lastparam, Standard_Boolean const drawFromCenter, Standard_Boolean const reverseArrow)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Pnt Center, gp_Pnt EndOfArrow, DsgPrs_ArrowSide const ArrowSide, Standard_Boolean const drawFromCenter, Standard_Boolean const reverseArrow)

        Adds the circle aCircle, the text aText, the points
        AttachmentPoint, Center and EndOfArrow to the
        presentation object aPresentation.
        The display attributes of these elements is defined by
        the attribute manager aDrawer.
        The value of the enumeration Arrowside determines
        the type of arrow displayed: whether there will be
        arrowheads at both ends or only one, for example.
        If the Boolean drawFromCenter is false, the
        arrowhead will point towards the center of aCircle.
        If the Boolean reverseArrow is true, the arrowhead
        will point away from the attachment point.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type AttachmentPoint: OCC.wrapper.gp.gp_Pnt
        :type Center: OCC.wrapper.gp.gp_Pnt
        :type EndOfArrow: OCC.wrapper.gp.gp_Pnt
        :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
        :type drawFromCenter: bool
        :type reverseArrow: bool

        """
        return _DsgPrs.DsgPrs_RadiusPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework to define display of radii."""
        this = _DsgPrs.new_DsgPrs_RadiusPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_RadiusPresentation
DsgPrs_RadiusPresentation_swigregister = _DsgPrs.DsgPrs_RadiusPresentation_swigregister
DsgPrs_RadiusPresentation_swigregister(DsgPrs_RadiusPresentation)

def DsgPrs_RadiusPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Circ aCircle, Standard_Real const firstparam, Standard_Real const lastparam, Standard_Boolean const drawFromCenter, Standard_Boolean const reverseArrow)
    DsgPrs_RadiusPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Pnt Center, gp_Pnt EndOfArrow, DsgPrs_ArrowSide const ArrowSide, Standard_Boolean const drawFromCenter, Standard_Boolean const reverseArrow)

    Adds the circle aCircle, the text aText, the points
    AttachmentPoint, Center and EndOfArrow to the
    presentation object aPresentation.
    The display attributes of these elements is defined by
    the attribute manager aDrawer.
    The value of the enumeration Arrowside determines
    the type of arrow displayed: whether there will be
    arrowheads at both ends or only one, for example.
    If the Boolean drawFromCenter is false, the
    arrowhead will point towards the center of aCircle.
    If the Boolean reverseArrow is true, the arrowhead
    will point away from the attachment point.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type AttachmentPoint: OCC.wrapper.gp.gp_Pnt
    :type Center: OCC.wrapper.gp.gp_Pnt
    :type EndOfArrow: OCC.wrapper.gp.gp_Pnt
    :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
    :type drawFromCenter: bool
    :type reverseArrow: bool

    """
    return _DsgPrs.DsgPrs_RadiusPresentation_Add(*args)

class DsgPrs_EqualDistancePresentation(object):
    """
    A framework to display equal distances between shapes and a given plane.
    The distance is the length of a projection from the shape to the plane.
    These distances are used to compare two shapes by this vector alone.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt Point1, gp_Pnt Point2, gp_Pnt Point3, gp_Pnt Point4, Handle_Geom_Plane Plane)

        Adds the points Point1, Point2, Point3 Point4, and the
        plane Plane to the presentation object aPresentation.
        The display attributes of these elements is defined by the attribute manager aDrawer.
        The distance is the length of a projection from the shape to the plane.
        These distances are used to compare two shapes by this vector alone.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type Point1: OCC.wrapper.gp.gp_Pnt
        :type Point2: OCC.wrapper.gp.gp_Pnt
        :type Point3: OCC.wrapper.gp.gp_Pnt
        :type Point4: OCC.wrapper.gp.gp_Pnt
        :type Plane: OCC.wrapper.Geom.Handle_Geom_Plane

        """
        return _DsgPrs.DsgPrs_EqualDistancePresentation_Add(*args)

    Add = staticmethod(Add)

    def AddInterval(*args):
        """
        AddInterval(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPoint1, gp_Pnt aPoint2, gp_Dir aDir, gp_Pnt aPosition, DsgPrs_ArrowSide const anArrowSide, gp_Pnt anExtremePnt1, gp_Pnt anExtremePnt2)

        is used for presentation of interval between
        two lines or two points or between a line and a point.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aPoint1: OCC.wrapper.gp.gp_Pnt
        :type aPoint2: OCC.wrapper.gp.gp_Pnt
        :type aDir: OCC.wrapper.gp.gp_Dir
        :type aPosition: OCC.wrapper.gp.gp_Pnt
        :type anArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
        :type anExtremePnt1: OCC.wrapper.gp.gp_Pnt
        :type anExtremePnt2: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_EqualDistancePresentation_AddInterval(*args)

    AddInterval = staticmethod(AddInterval)

    def AddIntervalBetweenTwoArcs(*args):
        """
        AddIntervalBetweenTwoArcs(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Circ aCircle1, gp_Circ aCircle2, gp_Pnt aPoint1, gp_Pnt aPoint2, gp_Pnt aPoint3, gp_Pnt aPoint4, DsgPrs_ArrowSide const anArrowSide)

        is used for presentation of interval between two arcs.
        One of arcs can have a zero radius.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aCircle1: OCC.wrapper.gp.gp_Circ
        :type aCircle2: OCC.wrapper.gp.gp_Circ
        :type aPoint1: OCC.wrapper.gp.gp_Pnt
        :type aPoint2: OCC.wrapper.gp.gp_Pnt
        :type aPoint3: OCC.wrapper.gp.gp_Pnt
        :type aPoint4: OCC.wrapper.gp.gp_Pnt
        :type anArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

        """
        return _DsgPrs.DsgPrs_EqualDistancePresentation_AddIntervalBetweenTwoArcs(*args)

    AddIntervalBetweenTwoArcs = staticmethod(AddIntervalBetweenTwoArcs)

    def __init__(self):
        """
        A framework to display equal distances between shapes and a given plane.
        The distance is the length of a projection from the shape to the plane.
        These distances are used to compare two shapes by this vector alone.
        """
        this = _DsgPrs.new_DsgPrs_EqualDistancePresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_EqualDistancePresentation
DsgPrs_EqualDistancePresentation_swigregister = _DsgPrs.DsgPrs_EqualDistancePresentation_swigregister
DsgPrs_EqualDistancePresentation_swigregister(DsgPrs_EqualDistancePresentation)

def DsgPrs_EqualDistancePresentation_Add(*args):
    """
    DsgPrs_EqualDistancePresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt Point1, gp_Pnt Point2, gp_Pnt Point3, gp_Pnt Point4, Handle_Geom_Plane Plane)

    Adds the points Point1, Point2, Point3 Point4, and the
    plane Plane to the presentation object aPresentation.
    The display attributes of these elements is defined by the attribute manager aDrawer.
    The distance is the length of a projection from the shape to the plane.
    These distances are used to compare two shapes by this vector alone.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type Point1: OCC.wrapper.gp.gp_Pnt
    :type Point2: OCC.wrapper.gp.gp_Pnt
    :type Point3: OCC.wrapper.gp.gp_Pnt
    :type Point4: OCC.wrapper.gp.gp_Pnt
    :type Plane: OCC.wrapper.Geom.Handle_Geom_Plane

    """
    return _DsgPrs.DsgPrs_EqualDistancePresentation_Add(*args)

def DsgPrs_EqualDistancePresentation_AddInterval(*args):
    """
    DsgPrs_EqualDistancePresentation_AddInterval(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPoint1, gp_Pnt aPoint2, gp_Dir aDir, gp_Pnt aPosition, DsgPrs_ArrowSide const anArrowSide, gp_Pnt anExtremePnt1, gp_Pnt anExtremePnt2)

    is used for presentation of interval between
    two lines or two points or between a line and a point.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aPoint1: OCC.wrapper.gp.gp_Pnt
    :type aPoint2: OCC.wrapper.gp.gp_Pnt
    :type aDir: OCC.wrapper.gp.gp_Dir
    :type aPosition: OCC.wrapper.gp.gp_Pnt
    :type anArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
    :type anExtremePnt1: OCC.wrapper.gp.gp_Pnt
    :type anExtremePnt2: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_EqualDistancePresentation_AddInterval(*args)

def DsgPrs_EqualDistancePresentation_AddIntervalBetweenTwoArcs(*args):
    """
    DsgPrs_EqualDistancePresentation_AddIntervalBetweenTwoArcs(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Circ aCircle1, gp_Circ aCircle2, gp_Pnt aPoint1, gp_Pnt aPoint2, gp_Pnt aPoint3, gp_Pnt aPoint4, DsgPrs_ArrowSide const anArrowSide)

    is used for presentation of interval between two arcs.
    One of arcs can have a zero radius.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aCircle1: OCC.wrapper.gp.gp_Circ
    :type aCircle2: OCC.wrapper.gp.gp_Circ
    :type aPoint1: OCC.wrapper.gp.gp_Pnt
    :type aPoint2: OCC.wrapper.gp.gp_Pnt
    :type aPoint3: OCC.wrapper.gp.gp_Pnt
    :type aPoint4: OCC.wrapper.gp.gp_Pnt
    :type anArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

    """
    return _DsgPrs.DsgPrs_EqualDistancePresentation_AddIntervalBetweenTwoArcs(*args)

class DsgPrs_DiameterPresentation(object):
    """A framework for displaying diameters in shapes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Circ aCircle, DsgPrs_ArrowSide const ArrowSide, Standard_Boolean const IsDiamSymbol)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Circ aCircle, Standard_Real const uFirst, Standard_Real const uLast, DsgPrs_ArrowSide const ArrowSide, Standard_Boolean const IsDiamSymbol)

        Draws the diameter of the arc anArc displayed in the
        presentation aPresentation and with attributes
        defined by the attribute manager aDrawer. The point
        AttachmentPoint defines the point of contact
        between the arc and the diameter presentation. The
        value of the enumeration ArrowSide controls whether
        arrows will be displayed at either or both ends of the
        length. The parameters uFirst and uLast define the
        first and last points of the arc. The text aText labels the diameter.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type AttachmentPoint: OCC.wrapper.gp.gp_Pnt
        :type aCircle: OCC.wrapper.gp.gp_Circ
        :type uFirst: float
        :type uLast: float
        :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
        :type IsDiamSymbol: bool

        """
        return _DsgPrs.DsgPrs_DiameterPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework for displaying diameters in shapes."""
        this = _DsgPrs.new_DsgPrs_DiameterPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_DiameterPresentation
DsgPrs_DiameterPresentation_swigregister = _DsgPrs.DsgPrs_DiameterPresentation_swigregister
DsgPrs_DiameterPresentation_swigregister(DsgPrs_DiameterPresentation)

def DsgPrs_DiameterPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Circ aCircle, DsgPrs_ArrowSide const ArrowSide, Standard_Boolean const IsDiamSymbol)
    DsgPrs_DiameterPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint, gp_Circ aCircle, Standard_Real const uFirst, Standard_Real const uLast, DsgPrs_ArrowSide const ArrowSide, Standard_Boolean const IsDiamSymbol)

    Draws the diameter of the arc anArc displayed in the
    presentation aPresentation and with attributes
    defined by the attribute manager aDrawer. The point
    AttachmentPoint defines the point of contact
    between the arc and the diameter presentation. The
    value of the enumeration ArrowSide controls whether
    arrows will be displayed at either or both ends of the
    length. The parameters uFirst and uLast define the
    first and last points of the arc. The text aText labels the diameter.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type AttachmentPoint: OCC.wrapper.gp.gp_Pnt
    :type aCircle: OCC.wrapper.gp.gp_Circ
    :type uFirst: float
    :type uLast: float
    :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
    :type IsDiamSymbol: bool

    """
    return _DsgPrs.DsgPrs_DiameterPresentation_Add(*args)

class DsgPrs_Chamf2dPresentation(object):
    """Framework for display of 2D chamfers."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPntAttach, gp_Pnt aPntEnd, TCollection_ExtendedString aText)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPntAttach, gp_Pnt aPntEnd, TCollection_ExtendedString aText, DsgPrs_ArrowSide const ArrowSide)

        Defines the display of texts, symbols and icons used
        to present 2D chamfers.
        These include the text aText, the point of attachment,
        aPntAttach and the end point aPntEnd.
        These arguments are added to the presentation
        object aPresentation. Their display attributes are
        defined by the attribute manager aDrawer. The arrow
        at the point of attachment has a display defined by a
        value of the enumeration DsgPrs_Arrowside.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aPntAttach: OCC.wrapper.gp.gp_Pnt
        :type aPntEnd: OCC.wrapper.gp.gp_Pnt
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

        """
        return _DsgPrs.DsgPrs_Chamf2dPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """Framework for display of 2D chamfers."""
        this = _DsgPrs.new_DsgPrs_Chamf2dPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_Chamf2dPresentation
DsgPrs_Chamf2dPresentation_swigregister = _DsgPrs.DsgPrs_Chamf2dPresentation_swigregister
DsgPrs_Chamf2dPresentation_swigregister(DsgPrs_Chamf2dPresentation)

def DsgPrs_Chamf2dPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPntAttach, gp_Pnt aPntEnd, TCollection_ExtendedString aText)
    DsgPrs_Chamf2dPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPntAttach, gp_Pnt aPntEnd, TCollection_ExtendedString aText, DsgPrs_ArrowSide const ArrowSide)

    Defines the display of texts, symbols and icons used
    to present 2D chamfers.
    These include the text aText, the point of attachment,
    aPntAttach and the end point aPntEnd.
    These arguments are added to the presentation
    object aPresentation. Their display attributes are
    defined by the attribute manager aDrawer. The arrow
    at the point of attachment has a display defined by a
    value of the enumeration DsgPrs_Arrowside.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aPntAttach: OCC.wrapper.gp.gp_Pnt
    :type aPntEnd: OCC.wrapper.gp.gp_Pnt
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide

    """
    return _DsgPrs.DsgPrs_Chamf2dPresentation_Add(*args)

class DsgPrs_EqualRadiusPresentation(object):
    """A framework to define display of equality in radii."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt FirstCenter, gp_Pnt SecondCenter, gp_Pnt FirstPoint, gp_Pnt SecondPoint, Handle_Geom_Plane Plane)

        Adds the points FirstCenter, SecondCenter,
        FirstPoint, SecondPoint, and the plane Plane to the
        presentation object aPresentation.
        The display attributes of these elements is defined by
        the attribute manager aDrawer.
        FirstCenter and SecondCenter are the centers of the
        first and second shapes respectively, and FirstPoint
        and SecondPoint are the attachment points of the radii to arcs.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type FirstCenter: OCC.wrapper.gp.gp_Pnt
        :type SecondCenter: OCC.wrapper.gp.gp_Pnt
        :type FirstPoint: OCC.wrapper.gp.gp_Pnt
        :type SecondPoint: OCC.wrapper.gp.gp_Pnt
        :type Plane: OCC.wrapper.Geom.Handle_Geom_Plane

        """
        return _DsgPrs.DsgPrs_EqualRadiusPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework to define display of equality in radii."""
        this = _DsgPrs.new_DsgPrs_EqualRadiusPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_EqualRadiusPresentation
DsgPrs_EqualRadiusPresentation_swigregister = _DsgPrs.DsgPrs_EqualRadiusPresentation_swigregister
DsgPrs_EqualRadiusPresentation_swigregister(DsgPrs_EqualRadiusPresentation)

def DsgPrs_EqualRadiusPresentation_Add(*args):
    """
    DsgPrs_EqualRadiusPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt FirstCenter, gp_Pnt SecondCenter, gp_Pnt FirstPoint, gp_Pnt SecondPoint, Handle_Geom_Plane Plane)

    Adds the points FirstCenter, SecondCenter,
    FirstPoint, SecondPoint, and the plane Plane to the
    presentation object aPresentation.
    The display attributes of these elements is defined by
    the attribute manager aDrawer.
    FirstCenter and SecondCenter are the centers of the
    first and second shapes respectively, and FirstPoint
    and SecondPoint are the attachment points of the radii to arcs.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type FirstCenter: OCC.wrapper.gp.gp_Pnt
    :type SecondCenter: OCC.wrapper.gp.gp_Pnt
    :type FirstPoint: OCC.wrapper.gp.gp_Pnt
    :type SecondPoint: OCC.wrapper.gp.gp_Pnt
    :type Plane: OCC.wrapper.Geom.Handle_Geom_Plane

    """
    return _DsgPrs.DsgPrs_EqualRadiusPresentation_Add(*args)

class DsgPrs_(object):
    """Describes Standard Presentations for DsgIHM objects"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ComputeSymbol(*args):
        """
        ComputeSymbol(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_DimensionAspect anAspect, gp_Pnt pt1, gp_Pnt pt2, gp_Dir dir1, gp_Dir dir2, DsgPrs_ArrowSide const ArrowSide, Standard_Boolean const drawFromCenter)

        draws symbols ((one or two) arrows,(one or two)points
        at thebeginning and at the end of the dimension

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type anAspect: OCC.wrapper.Prs3d.Handle_Prs3d_DimensionAspect
        :type pt1: OCC.wrapper.gp.gp_Pnt
        :type pt2: OCC.wrapper.gp.gp_Pnt
        :type dir1: OCC.wrapper.gp.gp_Dir
        :type dir2: OCC.wrapper.gp.gp_Dir
        :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
        :type drawFromCenter: bool

        """
        return _DsgPrs.DsgPrs__ComputeSymbol(*args)

    ComputeSymbol = staticmethod(ComputeSymbol)

    def ComputePlanarFacesLengthPresentation(*args):
        """
        ComputePlanarFacesLengthPresentation(Standard_Real const FirstArrowLength, Standard_Real const SecondArrowLength, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir DirAttach, gp_Pnt OffsetPoint, gp_Pln PlaneOfFaces, gp_Pnt EndOfArrow1, gp_Pnt EndOfArrow2, gp_Dir DirOfArrow1)

        :type FirstArrowLength: float
        :type SecondArrowLength: float
        :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
        :type DirAttach: OCC.wrapper.gp.gp_Dir
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
        :type PlaneOfFaces: OCC.wrapper.gp.gp_Pln
        :type EndOfArrow1: OCC.wrapper.gp.gp_Pnt
        :type EndOfArrow2: OCC.wrapper.gp.gp_Pnt
        :type DirOfArrow1: OCC.wrapper.gp.gp_Dir

        """
        return _DsgPrs.DsgPrs__ComputePlanarFacesLengthPresentation(*args)

    ComputePlanarFacesLengthPresentation = staticmethod(ComputePlanarFacesLengthPresentation)

    def ComputeCurvilinearFacesLengthPresentation(*args):
        """
        ComputeCurvilinearFacesLengthPresentation(Standard_Real const FirstArrowLength, Standard_Real const SecondArrowLength, Handle_Geom_Surface SecondSurf, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir DirAttach, gp_Pnt EndOfArrow2, gp_Dir DirOfArrow1, Handle_Geom_Curve VCurve, Handle_Geom_Curve UCurve)

        :type FirstArrowLength: float
        :type SecondArrowLength: float
        :type SecondSurf: OCC.wrapper.Geom.Handle_Geom_Surface
        :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
        :type DirAttach: OCC.wrapper.gp.gp_Dir
        :type EndOfArrow2: OCC.wrapper.gp.gp_Pnt
        :type DirOfArrow1: OCC.wrapper.gp.gp_Dir
        :type VCurve: OCC.wrapper.Geom.Handle_Geom_Curve
        :type UCurve: OCC.wrapper.Geom.Handle_Geom_Curve
        :type FirstU: float
        :type deltaU: float
        :type FirstV: float
        :type deltaV: float

        """
        return _DsgPrs.DsgPrs__ComputeCurvilinearFacesLengthPresentation(*args)

    ComputeCurvilinearFacesLengthPresentation = staticmethod(ComputeCurvilinearFacesLengthPresentation)

    def ComputeFacesAnglePresentation(*args):
        """
        ComputeFacesAnglePresentation(Standard_Real const ArrowLength, Standard_Real const Value, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Dir axisdir, Standard_Boolean const isPlane, gp_Ax1 AxisOfSurf, gp_Pnt OffsetPoint, gp_Circ AngleCirc, gp_Pnt EndOfArrow1, gp_Pnt EndOfArrow2, gp_Dir DirOfArrow1, gp_Dir DirOfArrow2, gp_Pnt ProjAttachPoint2, gp_Circ AttachCirc)

        :type ArrowLength: float
        :type Value: float
        :type CenterPoint: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
        :type dir1: OCC.wrapper.gp.gp_Dir
        :type dir2: OCC.wrapper.gp.gp_Dir
        :type axisdir: OCC.wrapper.gp.gp_Dir
        :type isPlane: bool
        :type AxisOfSurf: OCC.wrapper.gp.gp_Ax1
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
        :type AngleCirc: OCC.wrapper.gp.gp_Circ
        :type FirstParAngleCirc: float
        :type LastParAngleCirc: float
        :type EndOfArrow1: OCC.wrapper.gp.gp_Pnt
        :type EndOfArrow2: OCC.wrapper.gp.gp_Pnt
        :type DirOfArrow1: OCC.wrapper.gp.gp_Dir
        :type DirOfArrow2: OCC.wrapper.gp.gp_Dir
        :type ProjAttachPoint2: OCC.wrapper.gp.gp_Pnt
        :type AttachCirc: OCC.wrapper.gp.gp_Circ
        :type FirstParAttachCirc: float
        :type LastParAttachCirc: float

        """
        return _DsgPrs.DsgPrs__ComputeFacesAnglePresentation(*args)

    ComputeFacesAnglePresentation = staticmethod(ComputeFacesAnglePresentation)

    def ComputeRadiusLine(*args):
        """
        ComputeRadiusLine(gp_Pnt aCenter, gp_Pnt anEndOfArrow, gp_Pnt aPosition, Standard_Boolean const drawFromCenter, gp_Pnt aRadLineOrign, gp_Pnt aRadLineEnd)

        :type aCenter: OCC.wrapper.gp.gp_Pnt
        :type anEndOfArrow: OCC.wrapper.gp.gp_Pnt
        :type aPosition: OCC.wrapper.gp.gp_Pnt
        :type drawFromCenter: bool
        :type aRadLineOrign: OCC.wrapper.gp.gp_Pnt
        :type aRadLineEnd: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs__ComputeRadiusLine(*args)

    ComputeRadiusLine = staticmethod(ComputeRadiusLine)

    def ComputeFilletRadiusPresentation(*args):
        """
        ComputeFilletRadiusPresentation(Standard_Real const ArrowLength, Standard_Real const Value, gp_Pnt Position, gp_Dir NormalDir, gp_Pnt FirstPoint, gp_Pnt SecondPoint, gp_Pnt Center, gp_Pnt BasePnt, Standard_Boolean const drawRevers, gp_Circ FilletCirc, gp_Pnt EndOfArrow, gp_Dir DirOfArrow, gp_Pnt DrawPosition)

        computes Geometry for  fillet radius  presentation;
        special case flag  SpecCase equal Standard_True if
        radius of  fillet circle  =  0  or if  anngle between
        Vec1(Center, FirstPoint)  and Vec2(Center,SecondPoint) equal 0 or PI

        :type ArrowLength: float
        :type Value: float
        :type Position: OCC.wrapper.gp.gp_Pnt
        :type NormalDir: OCC.wrapper.gp.gp_Dir
        :type FirstPoint: OCC.wrapper.gp.gp_Pnt
        :type SecondPoint: OCC.wrapper.gp.gp_Pnt
        :type Center: OCC.wrapper.gp.gp_Pnt
        :type BasePnt: OCC.wrapper.gp.gp_Pnt
        :type drawRevers: bool
        :type SpecCase: bool
        :type FilletCirc: OCC.wrapper.gp.gp_Circ
        :type FirstParCirc: float
        :type LastParCirc: float
        :type EndOfArrow: OCC.wrapper.gp.gp_Pnt
        :type DirOfArrow: OCC.wrapper.gp.gp_Dir
        :type DrawPosition: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs__ComputeFilletRadiusPresentation(*args)

    ComputeFilletRadiusPresentation = staticmethod(ComputeFilletRadiusPresentation)

    def DistanceFromApex(*args):
        """
        DistanceFromApex(gp_Elips elips, gp_Pnt Apex, Standard_Real const par) -> Standard_Real

        computes  length  of  ellipse  arc  in  parametric  units

        :type elips: OCC.wrapper.gp.gp_Elips
        :type Apex: OCC.wrapper.gp.gp_Pnt
        :type par: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DsgPrs.DsgPrs__DistanceFromApex(*args)

    DistanceFromApex = staticmethod(DistanceFromApex)

    def __init__(self):
        """Describes Standard Presentations for DsgIHM objects"""
        this = _DsgPrs.new_DsgPrs_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_
DsgPrs__swigregister = _DsgPrs.DsgPrs__swigregister
DsgPrs__swigregister(DsgPrs_)

def DsgPrs__ComputeSymbol(*args):
    """
    DsgPrs__ComputeSymbol(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_DimensionAspect anAspect, gp_Pnt pt1, gp_Pnt pt2, gp_Dir dir1, gp_Dir dir2, DsgPrs_ArrowSide const ArrowSide, Standard_Boolean const drawFromCenter)

    draws symbols ((one or two) arrows,(one or two)points
    at thebeginning and at the end of the dimension

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type anAspect: OCC.wrapper.Prs3d.Handle_Prs3d_DimensionAspect
    :type pt1: OCC.wrapper.gp.gp_Pnt
    :type pt2: OCC.wrapper.gp.gp_Pnt
    :type dir1: OCC.wrapper.gp.gp_Dir
    :type dir2: OCC.wrapper.gp.gp_Dir
    :type ArrowSide: OCC.wrapper.DsgPrs.DsgPrs_ArrowSide
    :type drawFromCenter: bool

    """
    return _DsgPrs.DsgPrs__ComputeSymbol(*args)

def DsgPrs__ComputePlanarFacesLengthPresentation(*args):
    """
    DsgPrs__ComputePlanarFacesLengthPresentation(Standard_Real const FirstArrowLength, Standard_Real const SecondArrowLength, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir DirAttach, gp_Pnt OffsetPoint, gp_Pln PlaneOfFaces, gp_Pnt EndOfArrow1, gp_Pnt EndOfArrow2, gp_Dir DirOfArrow1)

    :type FirstArrowLength: float
    :type SecondArrowLength: float
    :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
    :type DirAttach: OCC.wrapper.gp.gp_Dir
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
    :type PlaneOfFaces: OCC.wrapper.gp.gp_Pln
    :type EndOfArrow1: OCC.wrapper.gp.gp_Pnt
    :type EndOfArrow2: OCC.wrapper.gp.gp_Pnt
    :type DirOfArrow1: OCC.wrapper.gp.gp_Dir

    """
    return _DsgPrs.DsgPrs__ComputePlanarFacesLengthPresentation(*args)

def DsgPrs__ComputeCurvilinearFacesLengthPresentation(*args):
    """
    DsgPrs__ComputeCurvilinearFacesLengthPresentation(Standard_Real const FirstArrowLength, Standard_Real const SecondArrowLength, Handle_Geom_Surface SecondSurf, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir DirAttach, gp_Pnt EndOfArrow2, gp_Dir DirOfArrow1, Handle_Geom_Curve VCurve, Handle_Geom_Curve UCurve)

    :type FirstArrowLength: float
    :type SecondArrowLength: float
    :type SecondSurf: OCC.wrapper.Geom.Handle_Geom_Surface
    :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
    :type DirAttach: OCC.wrapper.gp.gp_Dir
    :type EndOfArrow2: OCC.wrapper.gp.gp_Pnt
    :type DirOfArrow1: OCC.wrapper.gp.gp_Dir
    :type VCurve: OCC.wrapper.Geom.Handle_Geom_Curve
    :type UCurve: OCC.wrapper.Geom.Handle_Geom_Curve
    :type FirstU: float
    :type deltaU: float
    :type FirstV: float
    :type deltaV: float

    """
    return _DsgPrs.DsgPrs__ComputeCurvilinearFacesLengthPresentation(*args)

def DsgPrs__ComputeFacesAnglePresentation(*args):
    """
    DsgPrs__ComputeFacesAnglePresentation(Standard_Real const ArrowLength, Standard_Real const Value, gp_Pnt CenterPoint, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir dir1, gp_Dir dir2, gp_Dir axisdir, Standard_Boolean const isPlane, gp_Ax1 AxisOfSurf, gp_Pnt OffsetPoint, gp_Circ AngleCirc, gp_Pnt EndOfArrow1, gp_Pnt EndOfArrow2, gp_Dir DirOfArrow1, gp_Dir DirOfArrow2, gp_Pnt ProjAttachPoint2, gp_Circ AttachCirc)

    :type ArrowLength: float
    :type Value: float
    :type CenterPoint: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
    :type dir1: OCC.wrapper.gp.gp_Dir
    :type dir2: OCC.wrapper.gp.gp_Dir
    :type axisdir: OCC.wrapper.gp.gp_Dir
    :type isPlane: bool
    :type AxisOfSurf: OCC.wrapper.gp.gp_Ax1
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
    :type AngleCirc: OCC.wrapper.gp.gp_Circ
    :type FirstParAngleCirc: float
    :type LastParAngleCirc: float
    :type EndOfArrow1: OCC.wrapper.gp.gp_Pnt
    :type EndOfArrow2: OCC.wrapper.gp.gp_Pnt
    :type DirOfArrow1: OCC.wrapper.gp.gp_Dir
    :type DirOfArrow2: OCC.wrapper.gp.gp_Dir
    :type ProjAttachPoint2: OCC.wrapper.gp.gp_Pnt
    :type AttachCirc: OCC.wrapper.gp.gp_Circ
    :type FirstParAttachCirc: float
    :type LastParAttachCirc: float

    """
    return _DsgPrs.DsgPrs__ComputeFacesAnglePresentation(*args)

def DsgPrs__ComputeRadiusLine(*args):
    """
    DsgPrs__ComputeRadiusLine(gp_Pnt aCenter, gp_Pnt anEndOfArrow, gp_Pnt aPosition, Standard_Boolean const drawFromCenter, gp_Pnt aRadLineOrign, gp_Pnt aRadLineEnd)

    :type aCenter: OCC.wrapper.gp.gp_Pnt
    :type anEndOfArrow: OCC.wrapper.gp.gp_Pnt
    :type aPosition: OCC.wrapper.gp.gp_Pnt
    :type drawFromCenter: bool
    :type aRadLineOrign: OCC.wrapper.gp.gp_Pnt
    :type aRadLineEnd: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs__ComputeRadiusLine(*args)

def DsgPrs__ComputeFilletRadiusPresentation(*args):
    """
    DsgPrs__ComputeFilletRadiusPresentation(Standard_Real const ArrowLength, Standard_Real const Value, gp_Pnt Position, gp_Dir NormalDir, gp_Pnt FirstPoint, gp_Pnt SecondPoint, gp_Pnt Center, gp_Pnt BasePnt, Standard_Boolean const drawRevers, gp_Circ FilletCirc, gp_Pnt EndOfArrow, gp_Dir DirOfArrow, gp_Pnt DrawPosition)

    computes Geometry for  fillet radius  presentation;
    special case flag  SpecCase equal Standard_True if
    radius of  fillet circle  =  0  or if  anngle between
    Vec1(Center, FirstPoint)  and Vec2(Center,SecondPoint) equal 0 or PI

    :type ArrowLength: float
    :type Value: float
    :type Position: OCC.wrapper.gp.gp_Pnt
    :type NormalDir: OCC.wrapper.gp.gp_Dir
    :type FirstPoint: OCC.wrapper.gp.gp_Pnt
    :type SecondPoint: OCC.wrapper.gp.gp_Pnt
    :type Center: OCC.wrapper.gp.gp_Pnt
    :type BasePnt: OCC.wrapper.gp.gp_Pnt
    :type drawRevers: bool
    :type SpecCase: bool
    :type FilletCirc: OCC.wrapper.gp.gp_Circ
    :type FirstParCirc: float
    :type LastParCirc: float
    :type EndOfArrow: OCC.wrapper.gp.gp_Pnt
    :type DirOfArrow: OCC.wrapper.gp.gp_Dir
    :type DrawPosition: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs__ComputeFilletRadiusPresentation(*args)

def DsgPrs__DistanceFromApex(*args):
    """
    DsgPrs__DistanceFromApex(gp_Elips elips, gp_Pnt Apex, Standard_Real const par) -> Standard_Real

    computes  length  of  ellipse  arc  in  parametric  units

    :type elips: OCC.wrapper.gp.gp_Elips
    :type Apex: OCC.wrapper.gp.gp_Pnt
    :type par: float
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _DsgPrs.DsgPrs__DistanceFromApex(*args)

class DsgPrs_PerpenPresentation(object):
    """
    A framework to define display of perpendicular
    constraints between shapes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt pAx1, gp_Pnt pAx2, gp_Pnt pnt1, gp_Pnt pnt2, gp_Pnt OffsetPoint, Standard_Boolean const intOut1, Standard_Boolean const intOut2)

        Defines the display of elements showing
        perpendicular constraints between shapes.
        These include the two axis points pAx1 and pAx2,
        the two points pnt1 and pnt2, the offset point
        OffsetPoint and the two Booleans intOut1} and intOut2{.
        These arguments are added to the presentation
        object aPresentation. Their display attributes are
        defined by the attribute manager aDrawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type pAx1: OCC.wrapper.gp.gp_Pnt
        :type pAx2: OCC.wrapper.gp.gp_Pnt
        :type pnt1: OCC.wrapper.gp.gp_Pnt
        :type pnt2: OCC.wrapper.gp.gp_Pnt
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
        :type intOut1: bool
        :type intOut2: bool

        """
        return _DsgPrs.DsgPrs_PerpenPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """
        A framework to define display of perpendicular
        constraints between shapes.
        """
        this = _DsgPrs.new_DsgPrs_PerpenPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_PerpenPresentation
DsgPrs_PerpenPresentation_swigregister = _DsgPrs.DsgPrs_PerpenPresentation_swigregister
DsgPrs_PerpenPresentation_swigregister(DsgPrs_PerpenPresentation)

def DsgPrs_PerpenPresentation_Add(*args):
    """
    DsgPrs_PerpenPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt pAx1, gp_Pnt pAx2, gp_Pnt pnt1, gp_Pnt pnt2, gp_Pnt OffsetPoint, Standard_Boolean const intOut1, Standard_Boolean const intOut2)

    Defines the display of elements showing
    perpendicular constraints between shapes.
    These include the two axis points pAx1 and pAx2,
    the two points pnt1 and pnt2, the offset point
    OffsetPoint and the two Booleans intOut1} and intOut2{.
    These arguments are added to the presentation
    object aPresentation. Their display attributes are
    defined by the attribute manager aDrawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type pAx1: OCC.wrapper.gp.gp_Pnt
    :type pAx2: OCC.wrapper.gp.gp_Pnt
    :type pnt1: OCC.wrapper.gp.gp_Pnt
    :type pnt2: OCC.wrapper.gp.gp_Pnt
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt
    :type intOut1: bool
    :type intOut2: bool

    """
    return _DsgPrs.DsgPrs_PerpenPresentation_Add(*args)

class DsgPrs_FixPresentation(object):
    """class which draws the presentation of Fixed objects"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPntAttach, gp_Pnt aPntEnd, gp_Dir aNormPln, Standard_Real const aSymbSize)

        draws the presentation of fixed objects by
        drawing the 'fix' symbol at position <aPntEnd>.
        A binding segment is drawn between <aPntAttach>
        ( which belongs the the fix object) and <aPntEnd>.
        aSymbSize is the size of the 'fix'symbol

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aPntAttach: OCC.wrapper.gp.gp_Pnt
        :type aPntEnd: OCC.wrapper.gp.gp_Pnt
        :type aNormPln: OCC.wrapper.gp.gp_Dir
        :type aSymbSize: float

        """
        return _DsgPrs.DsgPrs_FixPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """class which draws the presentation of Fixed objects"""
        this = _DsgPrs.new_DsgPrs_FixPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_FixPresentation
DsgPrs_FixPresentation_swigregister = _DsgPrs.DsgPrs_FixPresentation_swigregister
DsgPrs_FixPresentation_swigregister(DsgPrs_FixPresentation)

def DsgPrs_FixPresentation_Add(*args):
    """
    DsgPrs_FixPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt aPntAttach, gp_Pnt aPntEnd, gp_Dir aNormPln, Standard_Real const aSymbSize)

    draws the presentation of fixed objects by
    drawing the 'fix' symbol at position <aPntEnd>.
    A binding segment is drawn between <aPntAttach>
    ( which belongs the the fix object) and <aPntEnd>.
    aSymbSize is the size of the 'fix'symbol

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aPntAttach: OCC.wrapper.gp.gp_Pnt
    :type aPntEnd: OCC.wrapper.gp.gp_Pnt
    :type aNormPln: OCC.wrapper.gp.gp_Dir
    :type aSymbSize: float

    """
    return _DsgPrs.DsgPrs_FixPresentation_Add(*args)

class DsgPrs_DatumPrs(Prs3d.Prs3d_Root):
    """A framework for displaying an XYZ trihedron."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation thePresentation, gp_Ax2 theDatum, Handle_Prs3d_Drawer theDrawer)

        Draw XYZ axes at specified location with attributes defined by the attribute manager theDrawer:
        - Prs3d_DatumAspect defines arrow, line and lenght trihedron axis parameters,
        - Prs3d_TextAspect defines displayed text.
        The thihedron origin and axis directions are defined by theDatum coordinate system.
        DsgPrs_XYZAxisPresentation framework is used to create graphical primitives for each axis.
        Axes are marked with "X", "Y", "Z" text.
        @param thePresentation [out] the modified presentation
        @param theDatum [in] the source of trihedron position
        @param theDrawer [in] the provider of display attributes

        :type thePresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type theDatum: OCC.wrapper.gp.gp_Ax2
        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _DsgPrs.DsgPrs_DatumPrs_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework for displaying an XYZ trihedron."""
        this = _DsgPrs.new_DsgPrs_DatumPrs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_DatumPrs
DsgPrs_DatumPrs_swigregister = _DsgPrs.DsgPrs_DatumPrs_swigregister
DsgPrs_DatumPrs_swigregister(DsgPrs_DatumPrs)

def DsgPrs_DatumPrs_Add(*args):
    """
    DsgPrs_DatumPrs_Add(Handle_Prs3d_Presentation thePresentation, gp_Ax2 theDatum, Handle_Prs3d_Drawer theDrawer)

    Draw XYZ axes at specified location with attributes defined by the attribute manager theDrawer:
    - Prs3d_DatumAspect defines arrow, line and lenght trihedron axis parameters,
    - Prs3d_TextAspect defines displayed text.
    The thihedron origin and axis directions are defined by theDatum coordinate system.
    DsgPrs_XYZAxisPresentation framework is used to create graphical primitives for each axis.
    Axes are marked with "X", "Y", "Z" text.
    @param thePresentation [out] the modified presentation
    @param theDatum [in] the source of trihedron position
    @param theDrawer [in] the provider of display attributes

    :type thePresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type theDatum: OCC.wrapper.gp.gp_Ax2
    :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

    """
    return _DsgPrs.DsgPrs_DatumPrs_Add(*args)

class DsgPrs_OffsetPresentation(object):
    """A framework to define display of offsets."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Dir aDirection2, gp_Pnt OffsetPoint)

        Defines the display of elements showing offset shapes.
        These include the two points of attachment
        AttachmentPoint1 and AttachmentPoint1, the two
        directions aDirection and aDirection2, and the offset point OffsetPoint.
        These arguments are added to the presentation
        object aPresentation. Their display attributes are
        defined by the attribute manager aDrawer.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
        :type aDirection: OCC.wrapper.gp.gp_Dir
        :type aDirection2: OCC.wrapper.gp.gp_Dir
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_OffsetPresentation_Add(*args)

    Add = staticmethod(Add)

    def AddAxes(*args):
        """
        AddAxes(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Dir aDirection2, gp_Pnt OffsetPoint)

        draws the representation of axes alignement Constraint
        between the point AttachmentPoint1 and the
        point AttachmentPoint2, along direction
        aDirection, using the offset point OffsetPoint.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
        :type aDirection: OCC.wrapper.gp.gp_Dir
        :type aDirection2: OCC.wrapper.gp.gp_Dir
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_OffsetPresentation_AddAxes(*args)

    AddAxes = staticmethod(AddAxes)

    def __init__(self):
        """A framework to define display of offsets."""
        this = _DsgPrs.new_DsgPrs_OffsetPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_OffsetPresentation
DsgPrs_OffsetPresentation_swigregister = _DsgPrs.DsgPrs_OffsetPresentation_swigregister
DsgPrs_OffsetPresentation_swigregister(DsgPrs_OffsetPresentation)

def DsgPrs_OffsetPresentation_Add(*args):
    """
    DsgPrs_OffsetPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Dir aDirection2, gp_Pnt OffsetPoint)

    Defines the display of elements showing offset shapes.
    These include the two points of attachment
    AttachmentPoint1 and AttachmentPoint1, the two
    directions aDirection and aDirection2, and the offset point OffsetPoint.
    These arguments are added to the presentation
    object aPresentation. Their display attributes are
    defined by the attribute manager aDrawer.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
    :type aDirection: OCC.wrapper.gp.gp_Dir
    :type aDirection2: OCC.wrapper.gp.gp_Dir
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_OffsetPresentation_Add(*args)

def DsgPrs_OffsetPresentation_AddAxes(*args):
    """
    DsgPrs_OffsetPresentation_AddAxes(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, TCollection_ExtendedString aText, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection, gp_Dir aDirection2, gp_Pnt OffsetPoint)

    draws the representation of axes alignement Constraint
    between the point AttachmentPoint1 and the
    point AttachmentPoint2, along direction
    aDirection, using the offset point OffsetPoint.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
    :type aDirection: OCC.wrapper.gp.gp_Dir
    :type aDirection2: OCC.wrapper.gp.gp_Dir
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_OffsetPresentation_AddAxes(*args)

class DsgPrs_SymmetricPresentation(object):
    """A framework to define display of symmetry between shapes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args):
        """
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection1, gp_Lin aAxis, gp_Pnt OffsetPoint)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Circ aCircle1, gp_Lin aAxis, gp_Pnt OffsetPoint)
        Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Lin aAxis, gp_Pnt OffsetPoint)

        Adds the points OffsetPoint, AttachmentPoint1,
        AttachmentPoint2 and the axis anAxis to the
        presentation object aPresentation.
        The display attributes of the symmetry are defined by
        the attribute manager aDrawer.
        This syntax is used for display of symmetries between two vertices.

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
        :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
        :type aAxis: OCC.wrapper.gp.gp_Lin
        :type OffsetPoint: OCC.wrapper.gp.gp_Pnt

        """
        return _DsgPrs.DsgPrs_SymmetricPresentation_Add(*args)

    Add = staticmethod(Add)

    def __init__(self):
        """A framework to define display of symmetry between shapes."""
        this = _DsgPrs.new_DsgPrs_SymmetricPresentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DsgPrs.delete_DsgPrs_SymmetricPresentation
DsgPrs_SymmetricPresentation_swigregister = _DsgPrs.DsgPrs_SymmetricPresentation_swigregister
DsgPrs_SymmetricPresentation_swigregister(DsgPrs_SymmetricPresentation)

def DsgPrs_SymmetricPresentation_Add(*args):
    """
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Dir aDirection1, gp_Lin aAxis, gp_Pnt OffsetPoint)
    Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Circ aCircle1, gp_Lin aAxis, gp_Pnt OffsetPoint)
    DsgPrs_SymmetricPresentation_Add(Handle_Prs3d_Presentation aPresentation, Handle_Prs3d_Drawer aDrawer, gp_Pnt AttachmentPoint1, gp_Pnt AttachmentPoint2, gp_Lin aAxis, gp_Pnt OffsetPoint)

    Adds the points OffsetPoint, AttachmentPoint1,
    AttachmentPoint2 and the axis anAxis to the
    presentation object aPresentation.
    The display attributes of the symmetry are defined by
    the attribute manager aDrawer.
    This syntax is used for display of symmetries between two vertices.

    :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type aDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :type AttachmentPoint1: OCC.wrapper.gp.gp_Pnt
    :type AttachmentPoint2: OCC.wrapper.gp.gp_Pnt
    :type aAxis: OCC.wrapper.gp.gp_Lin
    :type OffsetPoint: OCC.wrapper.gp.gp_Pnt

    """
    return _DsgPrs.DsgPrs_SymmetricPresentation_Add(*args)



