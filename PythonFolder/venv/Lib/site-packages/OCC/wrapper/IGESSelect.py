# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESSelect')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESSelect')
    _IGESSelect = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESSelect', [dirname(__file__)])
        except ImportError:
            import _IGESSelect
            return _IGESSelect
        try:
            _mod = imp.load_module('_IGESSelect', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESSelect = swig_import_helper()
    del swig_import_helper
else:
    import _IGESSelect
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESSelect.delete_SwigPyIterator

    def value(self):
        return _IGESSelect.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESSelect.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESSelect.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESSelect.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESSelect.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESSelect.SwigPyIterator_copy(self)

    def next(self):
        return _IGESSelect.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESSelect.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESSelect.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESSelect.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESSelect.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESSelect.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESSelect.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESSelect.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESSelect.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESSelect.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESSelect.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESSelect.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESSelect.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESSelect.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESSelect.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESSelect.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESSelect.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESSelect.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESSelect.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESSelect.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESSelect.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESSelect.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESSelect.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESSelect.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESSelect.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESSelect.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESSelect.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESSelect.ptr_to_number(item)
ptr_to_number = _IGESSelect.ptr_to_number

def HashCode(*args):
    return _IGESSelect.HashCode(*args)
HashCode = _IGESSelect.HashCode

def ptr_equal(a, b):
    return _IGESSelect.ptr_equal(a, b)
ptr_equal = _IGESSelect.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFGraph
else:
    import IFGraph
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFSelect
else:
    import IFSelect
del _swig_python_version_info
class IGESSelect_EditHeader(IFSelect.IFSelect_Editor):
    """
    This class is aimed to display and edit the Header of an
    IGES Model : Start Section and Global Section
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_EditHeader
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_EditHeader(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_EditHeader self) -> IGESSelect_EditHeader

        This class is aimed to display and edit the Header of an
        IGES Model : Start Section and Global Section
        """
        this = _IGESSelect.new_IGESSelect_EditHeader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Label(self, *args):
        """
        Label(IGESSelect_EditHeader self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_EditHeader_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(IGESSelect_EditHeader self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_EditHeader_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.IGESSelect_EditHeader_StringValue(self, *args)


    def Load(self, *args):
        """
        Load(IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_EditHeader_Load(self, *args)


    def Update(self, *args):
        """
        Update(IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TCollection_HAsciiString newval, Standard_Boolean const enforce) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newval: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_EditHeader_Update(self, *args)


    def Apply(self, *args):
        """
        Apply(IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_EditHeader_Apply(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_EditHeader_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_EditHeader_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_EditHeader_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_EditHeader
IGESSelect_EditHeader_swigregister = _IGESSelect.IGESSelect_EditHeader_swigregister
IGESSelect_EditHeader_swigregister(IGESSelect_EditHeader)

def IGESSelect_EditHeader_get_type_name(*args):
    """
    IGESSelect_EditHeader_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_EditHeader_get_type_name(*args)

def IGESSelect_EditHeader_get_type_descriptor(*args):
    """
    IGESSelect_EditHeader_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_EditHeader_get_type_descriptor(*args)

class IGESSelect_SplineToBSpline(IFSelect.IFSelect_Transformer):
    """
    This type of Transformer allows to convert Spline Curves (IGES
    type 112) and Surfaces (IGES Type 126) to BSpline Curves (IGES
    type 114) and Surfac (IGES Type 128). All other entities are
    rebuilt as identical but on the basis of this conversion.

    It also gives an option to, either convert as such (i.e. each
    starting part of the spline becomes a segment of the bspline,
    with continuity C0 between segments), or try to increase
    continuity as far as possible to C1 or to C2.

    It does nothing if the starting model contains no Spline
    Curve (IGES Type 112) or Surface (IGES Type 126). Else,
    converting and rebuilding implies copying of entities.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SplineToBSpline
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SplineToBSpline(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SplineToBSpline self, Standard_Boolean const tryC2) -> IGESSelect_SplineToBSpline

        Creates a Transformer SplineToBSpline. If <tryC2> is True,
        it will in addition try to upgrade continuity up to C2.

        :type tryC2: bool

        """
        this = _IGESSelect.new_IGESSelect_SplineToBSpline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OptionTryC2(self, *args):
        """
        OptionTryC2(IGESSelect_SplineToBSpline self) -> Standard_Boolean

        Returns the option TryC2 given at creation time

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SplineToBSpline_OptionTryC2(self, *args)


    def Perform(self, *args):
        """
        Perform(IGESSelect_SplineToBSpline self, Interface_Graph G, Handle_Interface_Protocol protocol, Interface_CheckIterator checks, Handle_Interface_InterfaceModel newmod) -> Standard_Boolean

        Performs the transformation, if there is at least one Spline
        Curve (112) or Surface (126). Does nothing if there is none.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type checks: OCC.wrapper.Interface.Interface_CheckIterator
        :type newmod: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SplineToBSpline_Perform(self, *args)


    def Updated(self, *args):
        """
        Updated(IGESSelect_SplineToBSpline self, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto) -> Standard_Boolean

        Returns the transformed entities.
        If original data contained no Spline Curve or Surface,
        the result is identity : <entto> = <entfrom>
        Else, the copied counterpart is returned : for a Spline Curve
        or Surface, it is a converted BSpline Curve or Surface. Else,
        it is the result of general service Copy (rebuilt as necessary
        by BSPlines replacing Splines).

        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SplineToBSpline_Updated(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_SplineToBSpline self) -> TCollection_AsciiString

        Returns a text which defines the way a Transformer works :
        "Conversion Spline to BSpline" and as opted,
        " trying to upgrade continuity"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SplineToBSpline_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SplineToBSpline_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SplineToBSpline_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SplineToBSpline_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SplineToBSpline
IGESSelect_SplineToBSpline_swigregister = _IGESSelect.IGESSelect_SplineToBSpline_swigregister
IGESSelect_SplineToBSpline_swigregister(IGESSelect_SplineToBSpline)

def IGESSelect_SplineToBSpline_get_type_name(*args):
    """
    IGESSelect_SplineToBSpline_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SplineToBSpline_get_type_name(*args)

def IGESSelect_SplineToBSpline_get_type_descriptor(*args):
    """
    IGESSelect_SplineToBSpline_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SplineToBSpline_get_type_descriptor(*args)

class IGESSelect_SelectLevelNumber(IFSelect.IFSelect_SelectExtract):
    """
    This selection looks at Level Number of IGES Entities :
    it considers items attached, either to a single level with a
    given value, or to a level list which contains this value

    Level = 0  means entities not attached to any level

    Remark : the class CounterOfLevelNumber gives informations
    about present levels in a file.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectLevelNumber
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectLevelNumber(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectLevelNumber self) -> IGESSelect_SelectLevelNumber

        Creates a SelectLevelNumber, with no Level criterium : see
        SetLevelNumber. Empty, this selection filters nothing.


        """
        this = _IGESSelect.new_IGESSelect_SelectLevelNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetLevelNumber(self, *args):
        """
        SetLevelNumber(IGESSelect_SelectLevelNumber self, Handle_IFSelect_IntParam levnum)

        Sets a Parameter as Level criterium

        :type levnum: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_SelectLevelNumber_SetLevelNumber(self, *args)


    def LevelNumber(self, *args):
        """
        LevelNumber(IGESSelect_SelectLevelNumber self) -> Handle_IFSelect_IntParam

        Returns the Level criterium. NullHandle if not yet set
        (interpreted as Level = 0 : no level number attached)

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_SelectLevelNumber_LevelNumber(self, *args)


    def Sort(self, *args):
        """
        Sort(IGESSelect_SelectLevelNumber self, Standard_Integer const rank, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <ent> is an IGES Entity with Level Number
        admits the criterium (= value if single level, or one of the
        attached level numbers = value if level list)

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectLevelNumber_Sort(self, *args)


    def ExtractLabel(self, *args):
        """
        ExtractLabel(IGESSelect_SelectLevelNumber self) -> TCollection_AsciiString

        Returns the Selection criterium :
        "IGES Entity, Level Number admits <nn>" (if nn > 0) or
        "IGES Entity attached to no Level" (if nn = 0)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectLevelNumber_ExtractLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectLevelNumber_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectLevelNumber_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectLevelNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectLevelNumber
IGESSelect_SelectLevelNumber_swigregister = _IGESSelect.IGESSelect_SelectLevelNumber_swigregister
IGESSelect_SelectLevelNumber_swigregister(IGESSelect_SelectLevelNumber)

def IGESSelect_SelectLevelNumber_get_type_name(*args):
    """
    IGESSelect_SelectLevelNumber_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectLevelNumber_get_type_name(*args)

def IGESSelect_SelectLevelNumber_get_type_descriptor(*args):
    """
    IGESSelect_SelectLevelNumber_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectLevelNumber_get_type_descriptor(*args)

class IGESSelect_ModelModifier(IFSelect.IFSelect_Modifier):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_ModelModifier
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_ModelModifier(self) 
            return h


    def Perform(self, *args):
        """
        Perform(IGESSelect_ModelModifier self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_ModelModifier_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(IGESSelect_ModelModifier self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_ModelModifier_PerformProtocol(self, *args)


    def Performing(self, *args):
        """
        Performing(IGESSelect_ModelModifier self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific Perform, without Protocol. If Performing with
        Protocol is redefined, Performing without Protocol must
        though be defined to do nothing (not called, but demanded
        by the linker)

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_ModelModifier_Performing(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_ModelModifier_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_ModelModifier_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_ModelModifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_ModelModifier
IGESSelect_ModelModifier_swigregister = _IGESSelect.IGESSelect_ModelModifier_swigregister
IGESSelect_ModelModifier_swigregister(IGESSelect_ModelModifier)

def IGESSelect_ModelModifier_get_type_name(*args):
    """
    IGESSelect_ModelModifier_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_ModelModifier_get_type_name(*args)

def IGESSelect_ModelModifier_get_type_descriptor(*args):
    """
    IGESSelect_ModelModifier_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_ModelModifier_get_type_descriptor(*args)

class IGESSelect_IGESName(IFSelect.IFSelect_Signature):
    """
    IGESName is a Signature specific to IGESNorm :
    it considers the Name of an IGESEntity as being its ShortLabel
    (some sending systems use name, not to identify entities, but
    ratjer to classify them)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_IGESName
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_IGESName(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_IGESName self) -> IGESSelect_IGESName

        Creates a Signature for IGES Name (reduced to ShortLabel,
        without SubscriptLabel or Long Name)


        """
        this = _IGESSelect.new_IGESSelect_IGESName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Value(IGESSelect_IGESName self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the ShortLabel as being the Name of an IGESEntity
        If <ent> has no name, it returns empty string ""

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_IGESName_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_IGESName_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_IGESName_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_IGESName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_IGESName
IGESSelect_IGESName_swigregister = _IGESSelect.IGESSelect_IGESName_swigregister
IGESSelect_IGESName_swigregister(IGESSelect_IGESName)

def IGESSelect_IGESName_get_type_name(*args):
    """
    IGESSelect_IGESName_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_IGESName_get_type_name(*args)

def IGESSelect_IGESName_get_type_descriptor(*args):
    """
    IGESSelect_IGESName_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_IGESName_get_type_descriptor(*args)

class IGESSelect_SignColor(IFSelect.IFSelect_Signature):
    """
    Gives Color attached to an entity
    Several forms are possible, according to <mode>
    1 : number : "Dnn" for entity, "Snn" for standard, "(none)" for 0
    2 : name : Of standard color, or of the color entity, or "(none)"
    (if the color entity has no name, its label is taken)
    3 : RGB values, form R:nn,G:nn,B:nn
    4 : RED value   : an integer
    5 : GREEN value : an integer
    6 : BLUE value  : an integer
    Other computable values can be added if needed :
    CMY values, Percentages for Hue, Lightness, Saturation
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SignColor
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SignColor(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SignColor self, Standard_Integer const mode) -> IGESSelect_SignColor

        Creates a SignColor
        mode : see above for the meaning
        modes 4,5,6 give a numeric integer value
        Name is initialised according to the mode

        :type mode: int

        """
        this = _IGESSelect.new_IGESSelect_SignColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Value(IGESSelect_SignColor self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the value (see above)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_SignColor_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SignColor_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SignColor_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SignColor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SignColor
IGESSelect_SignColor_swigregister = _IGESSelect.IGESSelect_SignColor_swigregister
IGESSelect_SignColor_swigregister(IGESSelect_SignColor)

def IGESSelect_SignColor_get_type_name(*args):
    """
    IGESSelect_SignColor_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SignColor_get_type_name(*args)

def IGESSelect_SignColor_get_type_descriptor(*args):
    """
    IGESSelect_SignColor_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SignColor_get_type_descriptor(*args)

class IGESSelect_SelectSingleViewFrom(IFSelect.IFSelect_SelectDeduct):
    """
    This selection gets the Single Views attached to its input
    IGES entities. Single Views themselves or Drawings as passed
    as such (Drawings, for their Annotations)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectSingleViewFrom
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectSingleViewFrom(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectSingleViewFrom self) -> IGESSelect_SelectSingleViewFrom

        Creates a SelectSingleViewFrom


        """
        this = _IGESSelect.new_IGESSelect_SelectSingleViewFrom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def RootResult(self, *args):
        """
        RootResult(IGESSelect_SelectSingleViewFrom self, Interface_Graph G) -> Interface_EntityIterator

        Selects the Single Views attached (in Directory Part) to
        input entities

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.IGESSelect_SelectSingleViewFrom_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_SelectSingleViewFrom self) -> TCollection_AsciiString

        Returns the label, with is "Single Views attached"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectSingleViewFrom_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectSingleViewFrom_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectSingleViewFrom_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectSingleViewFrom_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectSingleViewFrom
IGESSelect_SelectSingleViewFrom_swigregister = _IGESSelect.IGESSelect_SelectSingleViewFrom_swigregister
IGESSelect_SelectSingleViewFrom_swigregister(IGESSelect_SelectSingleViewFrom)

def IGESSelect_SelectSingleViewFrom_get_type_name(*args):
    """
    IGESSelect_SelectSingleViewFrom_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectSingleViewFrom_get_type_name(*args)

def IGESSelect_SelectSingleViewFrom_get_type_descriptor(*args):
    """
    IGESSelect_SelectSingleViewFrom_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectSingleViewFrom_get_type_descriptor(*args)

class IGESSelect_EditDirPart(IFSelect.IFSelect_Editor):
    """
    This class is aimed to display and edit the Directory Part of
    an IGESEntity
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_EditDirPart
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_EditDirPart(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_EditDirPart self) -> IGESSelect_EditDirPart

        This class is aimed to display and edit the Directory Part of
        an IGESEntity
        """
        this = _IGESSelect.new_IGESSelect_EditDirPart(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Label(self, *args):
        """
        Label(IGESSelect_EditDirPart self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_EditDirPart_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_EditDirPart_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.IGESSelect_EditDirPart_StringValue(self, *args)


    def Load(self, *args):
        """
        Load(IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_EditDirPart_Load(self, *args)


    def Update(self, *args):
        """
        Update(IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TCollection_HAsciiString newval, Standard_Boolean const enforce) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newval: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_EditDirPart_Update(self, *args)


    def Apply(self, *args):
        """
        Apply(IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_EditDirPart_Apply(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_EditDirPart_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_EditDirPart_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_EditDirPart_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_EditDirPart
IGESSelect_EditDirPart_swigregister = _IGESSelect.IGESSelect_EditDirPart_swigregister
IGESSelect_EditDirPart_swigregister(IGESSelect_EditDirPart)

def IGESSelect_EditDirPart_get_type_name(*args):
    """
    IGESSelect_EditDirPart_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_EditDirPart_get_type_name(*args)

def IGESSelect_EditDirPart_get_type_descriptor(*args):
    """
    IGESSelect_EditDirPart_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_EditDirPart_get_type_descriptor(*args)

class IGESSelect_ChangeLevelList(IGESSelect_ModelModifier):
    """
    Changes Level List (in directory part) to a new single value
    Only entities attached to a LevelListEntity are considered
    If OldNumber is defined, only entities whose LevelList
    contains its Value are processed. Else all LevelLists are.

    Remark : this concerns the Directory Part only. The Level List
    Entities themselves (their content) are not affected.

    If NewNumber is defined (positive or zero), it gives the new
    value for Level Number. Else, the first value of the LevelList
    is set as new LevelNumber
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_ChangeLevelList
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_ChangeLevelList(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_ChangeLevelList self) -> IGESSelect_ChangeLevelList

        Creates a ChangeLevelList, not yet defined
        (see SetOldNumber and SetNewNumber)


        """
        this = _IGESSelect.new_IGESSelect_ChangeLevelList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasOldNumber(self, *args):
        """
        HasOldNumber(IGESSelect_ChangeLevelList self) -> Standard_Boolean

        Returns True if OldNumber is defined : then, only entities
        which have a LevelList which contains the value are processed.
        Else, all entities attached to a LevelList are.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_HasOldNumber(self, *args)


    def OldNumber(self, *args):
        """
        OldNumber(IGESSelect_ChangeLevelList self) -> Handle_IFSelect_IntParam

        Returns the parameter for OldNumber. If not defined (Null
        Handle), it will be interpreted as "all level lists"

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_OldNumber(self, *args)


    def SetOldNumber(self, *args):
        """
        SetOldNumber(IGESSelect_ChangeLevelList self, Handle_IFSelect_IntParam param)

        Sets a parameter for OldNumber

        :type param: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_SetOldNumber(self, *args)


    def HasNewNumber(self, *args):
        """
        HasNewNumber(IGESSelect_ChangeLevelList self) -> Standard_Boolean

        Returns True if NewNumber is defined : then, it gives the new
        value for Level Number. Else, the first value of the LevelList
        is used as new Level Number.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_HasNewNumber(self, *args)


    def NewNumber(self, *args):
        """
        NewNumber(IGESSelect_ChangeLevelList self) -> Handle_IFSelect_IntParam

        Returns the parameter for NewNumber. If not defined (Null
        Handle), it will be interpreted as "new value 0"

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_NewNumber(self, *args)


    def SetNewNumber(self, *args):
        """
        SetNewNumber(IGESSelect_ChangeLevelList self, Handle_IFSelect_IntParam param)

        Sets a parameter for NewNumber

        :type param: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_SetNewNumber(self, *args)


    def Performing(self, *args):
        """
        Performing(IGESSelect_ChangeLevelList self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : considers selected target entities :
        If OldNumber is not defined, all entities attached to a
        Level List
        If OldNumber is defined (value not negative), entities with a
        Level List which contains this value
        Attaches all these entities to value given by NewNumber, or
        the first value of the Level List

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_ChangeLevelList self) -> TCollection_AsciiString

        Returns a text which begins by
        "Changes Level Lists containing <old>", or
        "Changes all Level Lists in D.E.", and ends by
        " to Number <new>"  or  " to Number = first value in List"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_ChangeLevelList_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_ChangeLevelList_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_ChangeLevelList
IGESSelect_ChangeLevelList_swigregister = _IGESSelect.IGESSelect_ChangeLevelList_swigregister
IGESSelect_ChangeLevelList_swigregister(IGESSelect_ChangeLevelList)

def IGESSelect_ChangeLevelList_get_type_name(*args):
    """
    IGESSelect_ChangeLevelList_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_ChangeLevelList_get_type_name(*args)

def IGESSelect_ChangeLevelList_get_type_descriptor(*args):
    """
    IGESSelect_ChangeLevelList_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_ChangeLevelList_get_type_descriptor(*args)

class IGESSelect_Activator(IFSelect.IFSelect_Activator):
    """
    Performs Actions specific to IGESSelect, i.e. creation of
    IGES Selections and Dispatches, plus dumping specific to IGES
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_Activator
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_Activator(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_Activator self) -> IGESSelect_Activator

        Performs Actions specific to IGESSelect, i.e. creation of
        IGES Selections and Dispatches, plus dumping specific to IGES
        """
        this = _IGESSelect.new_IGESSelect_Activator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Do(self, *args):
        """
        Do(IGESSelect_Activator self, Standard_Integer const number, Handle_IFSelect_SessionPilot pilot) -> IFSelect_ReturnStatus

        Executes a Command Line for IGESSelect

        :type number: int
        :type pilot: OCC.wrapper.IFSelect.Handle_IFSelect_SessionPilot
        :rtype: OCC.wrapper.IFSelect.IFSelect_ReturnStatus

        """
        return _IGESSelect.IGESSelect_Activator_Do(self, *args)


    def Help(self, *args):
        """
        Help(IGESSelect_Activator self, Standard_Integer const number) -> Standard_CString

        Sends a short help message for IGESSelect commands

        :type number: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_Activator_Help(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_Activator_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_Activator_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_Activator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_Activator
IGESSelect_Activator_swigregister = _IGESSelect.IGESSelect_Activator_swigregister
IGESSelect_Activator_swigregister(IGESSelect_Activator)

def IGESSelect_Activator_get_type_name(*args):
    """
    IGESSelect_Activator_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_Activator_get_type_name(*args)

def IGESSelect_Activator_get_type_descriptor(*args):
    """
    IGESSelect_Activator_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_Activator_get_type_descriptor(*args)

class IGESSelect_ViewSorter(Standard.Standard_Transient):
    """
    Sorts IGES Entities on the views and drawings.
    In a first step, it splits a set of entities according the
    different views they are attached to.
    Then, packets according single views (+ drawing frames), or
    according drawings (which refer to the views) can be determined

    It is a TShared, hence it can be a workomg field of a non-
    mutable object (a Dispatch for instance)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_ViewSorter
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_ViewSorter(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_ViewSorter self) -> IGESSelect_ViewSorter

        Creates a ViewSorter, empty. SetModel remains to be called


        """
        this = _IGESSelect.new_IGESSelect_ViewSorter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetModel(self, *args):
        """
        SetModel(IGESSelect_ViewSorter self, Handle_IGESData_IGESModel model)

        Sets the Model (for PacketList)

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _IGESSelect.IGESSelect_ViewSorter_SetModel(self, *args)


    def Clear(self, *args):
        """
        Clear(IGESSelect_ViewSorter self)

        Clears recorded data


        """
        return _IGESSelect.IGESSelect_ViewSorter_Clear(self, *args)


    def Add(self, *args):
        """
        Add(IGESSelect_ViewSorter self, Handle_Standard_Transient ent) -> Standard_Boolean

        Adds an item according its type : AddEntity,AddList,AddModel

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_ViewSorter_Add(self, *args)


    def AddEntity(self, *args):
        """
        AddEntity(IGESSelect_ViewSorter self, Handle_IGESData_IGESEntity igesent) -> Standard_Boolean

        Adds an IGES entity. Records the view it is attached to.
        Records directly <ent> if it is a ViewKindEntity or a Drawing
        Returns True if added, False if already in the map

        :type igesent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_ViewSorter_AddEntity(self, *args)


    def AddList(self, *args):
        """
        AddList(IGESSelect_ViewSorter self, Handle_TColStd_HSequenceOfTransient list)

        Adds a list of entities by adding each of the items

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

        """
        return _IGESSelect.IGESSelect_ViewSorter_AddList(self, *args)


    def AddModel(self, *args):
        """
        AddModel(IGESSelect_ViewSorter self, Handle_Interface_InterfaceModel model)

        Adds all the entities contained in a Model

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESSelect.IGESSelect_ViewSorter_AddModel(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(IGESSelect_ViewSorter self) -> Standard_Integer

        Returns the count of already recorded

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect_ViewSorter_NbEntities(self, *args)


    def SortSingleViews(self, *args):
        """
        SortSingleViews(IGESSelect_ViewSorter self, Standard_Boolean const alsoframes)

        Prepares the result to keep only sets attached to Single Views
        If <alsoframes> is given True, it keeps also the Drawings as
        specific sets, in order to get their frames.
        Entities attached to no single view are put in Remaining List.

        Result can then be read by the methods NbSets,SetItem,SetList,
        RemainingList(final = True)

        :type alsoframes: bool

        """
        return _IGESSelect.IGESSelect_ViewSorter_SortSingleViews(self, *args)


    def SortDrawings(self, *args):
        """
        SortDrawings(IGESSelect_ViewSorter self, Interface_Graph G)

        Prepares the result to the sets attached to Drawings :
        All the single views referenced by a Drawing become bound to
        the set for this Drawing

        Entities or Views which correspond to no Drawing are put into
        the Remaining List.

        Result can then be read by the methods NbSets,SetItem,SetList,
        RemainingList(final = True)

        :type G: OCC.wrapper.Interface.Interface_Graph

        """
        return _IGESSelect.IGESSelect_ViewSorter_SortDrawings(self, *args)


    def NbSets(self, *args):
        """
        NbSets(IGESSelect_ViewSorter self, Standard_Boolean const final) -> Standard_Integer

        Returns the count of sets recorded, one per distinct item.
        The Remaining List is not counted.
        If <final> is False, the sets are attached to distinct views
        determined by the method Add.
        If <final> is True, they are the sets determined by the last
        call to, either SortSingleViews, or SortDrawings.

        Warning : Drawings directly recorded are also counted as sets, because
        of their Frame (which is made of Annotations)

        :type final: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect_ViewSorter_NbSets(self, *args)


    def SetItem(self, *args):
        """
        SetItem(IGESSelect_ViewSorter self, Standard_Integer const num, Standard_Boolean const final) -> Handle_IGESData_IGESEntity

        Returns the Item which is attached to a set of entities
        For <final> and definition of sets, see method NbSets.
        This item can be a kind of View or a Drawing

        :type num: int
        :type final: bool
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSelect.IGESSelect_ViewSorter_SetItem(self, *args)


    def Sets(self, *args):
        """
        Sets(IGESSelect_ViewSorter self, Standard_Boolean const final) -> Handle_IFSelect_PacketList

        Returns the complete content of the determined Sets, which
        include Duplicated and Remaining (duplication 0) lists
        For <final> and definition of sets, see method NbSets.

        :type final: bool
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_PacketList

        """
        return _IGESSelect.IGESSelect_ViewSorter_Sets(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_ViewSorter_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_ViewSorter_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_ViewSorter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_ViewSorter
IGESSelect_ViewSorter_swigregister = _IGESSelect.IGESSelect_ViewSorter_swigregister
IGESSelect_ViewSorter_swigregister(IGESSelect_ViewSorter)

def IGESSelect_ViewSorter_get_type_name(*args):
    """
    IGESSelect_ViewSorter_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_ViewSorter_get_type_name(*args)

def IGESSelect_ViewSorter_get_type_descriptor(*args):
    """
    IGESSelect_ViewSorter_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_ViewSorter_get_type_descriptor(*args)

class IGESSelect_SetLabel(IGESSelect_ModelModifier):
    """
    Sets/Clears Short Label of Entities, those designated by the
    Selection. No Selection means all the file

    May enforce, else it sets only if no label is yet set
    Mode : 0 to clear (always enforced)
    1 to set label to DE number (changes it if already set)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SetLabel
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SetLabel(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SetLabel self, Standard_Integer const mode, Standard_Boolean const enforce) -> IGESSelect_SetLabel

        Creates a SetLabel for IGESEntity
        Mode : see Purpose of the class

        :type mode: int
        :type enforce: bool

        """
        this = _IGESSelect.new_IGESSelect_SetLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_SetLabel self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Sets or Clears the Label

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_SetLabel_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_SetLabel self) -> TCollection_AsciiString

        Returns a text which is
        "Clear Short Label"  or  "Set Label to DE"
        With possible additional information " (enforced)"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SetLabel_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SetLabel_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SetLabel_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SetLabel_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SetLabel
IGESSelect_SetLabel_swigregister = _IGESSelect.IGESSelect_SetLabel_swigregister
IGESSelect_SetLabel_swigregister(IGESSelect_SetLabel)

def IGESSelect_SetLabel_get_type_name(*args):
    """
    IGESSelect_SetLabel_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SetLabel_get_type_name(*args)

def IGESSelect_SetLabel_get_type_descriptor(*args):
    """
    IGESSelect_SetLabel_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SetLabel_get_type_descriptor(*args)

class IGESSelect_Dumper(IFSelect.IFSelect_SessionDumper):
    """
    Dumper from IGESSelect takes into account, for SessionFile, the
    classes defined in the package IGESSelect : Selections,
    Dispatches, Modifiers
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_Dumper
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_Dumper(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_Dumper self) -> IGESSelect_Dumper

        Creates a Dumper and puts it into the Library of Dumper


        """
        this = _IGESSelect.new_IGESSelect_Dumper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def WriteOwn(self, *args):
        """
        WriteOwn(IGESSelect_Dumper self, IFSelect_SessionFile file, Handle_Standard_Transient item) -> Standard_Boolean

        Write the Own Parameters of Types defined in package IGESSelect
        Returns True if <item> has been processed, False else

        :type file: OCC.wrapper.IFSelect.IFSelect_SessionFile
        :type item: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_Dumper_WriteOwn(self, *args)


    def ReadOwn(self, *args):
        """
        ReadOwn(IGESSelect_Dumper self, IFSelect_SessionFile file, TCollection_AsciiString type, Handle_Standard_Transient item) -> Standard_Boolean

        Recognizes and Read Own Parameters for Types of package
        IGESSelect. Returns True if done and <item> created, False else

        :type file: OCC.wrapper.IFSelect.IFSelect_SessionFile
        :type type: OCC.wrapper.TCollection.TCollection_AsciiString
        :type item: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_Dumper_ReadOwn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_Dumper_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_Dumper_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_Dumper_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_Dumper
IGESSelect_Dumper_swigregister = _IGESSelect.IGESSelect_Dumper_swigregister
IGESSelect_Dumper_swigregister(IGESSelect_Dumper)

def IGESSelect_Dumper_get_type_name(*args):
    """
    IGESSelect_Dumper_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_Dumper_get_type_name(*args)

def IGESSelect_Dumper_get_type_descriptor(*args):
    """
    IGESSelect_Dumper_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_Dumper_get_type_descriptor(*args)

class IGESSelect_UpdateLastChange(IGESSelect_ModelModifier):
    """
    Allows to Change the Last Change Date indication in the Header
    (Global Section) of IGES File. It is taken from the operating
    system (time of application of the Modifier).
    The Selection of the Modifier is not used : it simply acts as
    a criterium to select IGES Files to touch up.
    Remark : IGES Models noted as version before IGES 5.1 are in
    addition changed to 5.1
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_UpdateLastChange
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_UpdateLastChange(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_UpdateLastChange self) -> IGESSelect_UpdateLastChange

        Creates an UpdateLastChange, which uses the system Date


        """
        this = _IGESSelect.new_IGESSelect_UpdateLastChange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_UpdateLastChange self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : the system Date
        is set to Global Section Item n0 25. Also sets IGES Version
        (Item n0 23) to IGES5 if it was older.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_UpdateLastChange_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_UpdateLastChange self) -> TCollection_AsciiString

        Returns a text which is
        "Update IGES Header Last Change Date"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_UpdateLastChange_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_UpdateLastChange_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_UpdateLastChange_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_UpdateLastChange_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_UpdateLastChange
IGESSelect_UpdateLastChange_swigregister = _IGESSelect.IGESSelect_UpdateLastChange_swigregister
IGESSelect_UpdateLastChange_swigregister(IGESSelect_UpdateLastChange)

def IGESSelect_UpdateLastChange_get_type_name(*args):
    """
    IGESSelect_UpdateLastChange_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_UpdateLastChange_get_type_name(*args)

def IGESSelect_UpdateLastChange_get_type_descriptor(*args):
    """
    IGESSelect_UpdateLastChange_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_UpdateLastChange_get_type_descriptor(*args)

class IGESSelect_RemoveCurves(IGESSelect_ModelModifier):
    """
    Removes Curves UV or 3D (not both !) from Faces, those
    designated by the Selection. No Selection means all the file
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_RemoveCurves
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_RemoveCurves(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_RemoveCurves self, Standard_Boolean const UV) -> IGESSelect_RemoveCurves

        Creates a RemoveCurves from Faces (141/142/143/144)
        UV True  : Removes UV Curves (pcurves)
        UV False : Removes 3D Curves

        :type UV: bool

        """
        this = _IGESSelect.new_IGESSelect_RemoveCurves(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_RemoveCurves self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Removes the Curves

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_RemoveCurves_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_RemoveCurves self) -> TCollection_AsciiString

        Returns a text which is
        "Remove Curves UV on Face"  or  "Remove Curves 3D on Face"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_RemoveCurves_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_RemoveCurves_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_RemoveCurves_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_RemoveCurves_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_RemoveCurves
IGESSelect_RemoveCurves_swigregister = _IGESSelect.IGESSelect_RemoveCurves_swigregister
IGESSelect_RemoveCurves_swigregister(IGESSelect_RemoveCurves)

def IGESSelect_RemoveCurves_get_type_name(*args):
    """
    IGESSelect_RemoveCurves_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_RemoveCurves_get_type_name(*args)

def IGESSelect_RemoveCurves_get_type_descriptor(*args):
    """
    IGESSelect_RemoveCurves_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_RemoveCurves_get_type_descriptor(*args)

class IGESSelect_AutoCorrect(IGESSelect_ModelModifier):
    """
    Does the absolutely effective corrections on IGES Entity.
    That is to say : regarding the norm in details, some values
    have mandatory values, or set of values with constraints.
    When such values/constraints are univoque, they can be forced.
    Also nullifies items of Directory Part, Associativities, and
    Properties, which are not (or not longer) in <target> Model.

    Works by calling a BasicEditor from IGESData
    Works with the specific IGES Services : DirChecker which
    allows to correct data in "Directory Part" of Entities (such
    as required values for status, or references to be null), and
    the specific IGES service OwnCorrect, which is specialised for
    each type of entity.

    Remark : this does not comprise the computation of use flag or
    subordinate status according references, which is made by
    the ModelModifier class ComputeStatus.

    The Input Selection, when present, designates the entities to
    be corrected. If it is not present, all the entities of the
    model are corrected.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_AutoCorrect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_AutoCorrect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_AutoCorrect self) -> IGESSelect_AutoCorrect

        Creates an AutoCorrect.


        """
        this = _IGESSelect.new_IGESSelect_AutoCorrect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_AutoCorrect self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : corrects entities when it is absolutely
        obvious, i.e. non equivoque (by DirChecker and specific
        service OwnCorrect) : works with a protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_AutoCorrect_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_AutoCorrect self) -> TCollection_AsciiString

        Returns a text which is
        "Auto-correction of IGES Entities"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_AutoCorrect_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_AutoCorrect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_AutoCorrect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_AutoCorrect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_AutoCorrect
IGESSelect_AutoCorrect_swigregister = _IGESSelect.IGESSelect_AutoCorrect_swigregister
IGESSelect_AutoCorrect_swigregister(IGESSelect_AutoCorrect)

def IGESSelect_AutoCorrect_get_type_name(*args):
    """
    IGESSelect_AutoCorrect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_AutoCorrect_get_type_name(*args)

def IGESSelect_AutoCorrect_get_type_descriptor(*args):
    """
    IGESSelect_AutoCorrect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_AutoCorrect_get_type_descriptor(*args)

class IGESSelect_FileModifier(IFSelect.IFSelect_GeneralModifier):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_FileModifier
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_FileModifier(self) 
            return h


    def Perform(self, *args):
        """
        Perform(IGESSelect_FileModifier self, IFSelect_ContextWrite ctx, IGESData_IGESWriter writer)

        Perform the action specific to each class of File Modifier
        <ctx> is the ContextWrite, which brings : the model, the
        protocol, the file name, plus the object AppliedModifiers
        (not used here) and the CheckList
        Remark that the model has to be casted for specific access

        <writer> is the Writer and is specific to each norm, on which
        to act

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextWrite
        :type writer: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSelect.IGESSelect_FileModifier_Perform(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_FileModifier_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_FileModifier_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_FileModifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_FileModifier
IGESSelect_FileModifier_swigregister = _IGESSelect.IGESSelect_FileModifier_swigregister
IGESSelect_FileModifier_swigregister(IGESSelect_FileModifier)

def IGESSelect_FileModifier_get_type_name(*args):
    """
    IGESSelect_FileModifier_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_FileModifier_get_type_name(*args)

def IGESSelect_FileModifier_get_type_descriptor(*args):
    """
    IGESSelect_FileModifier_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_FileModifier_get_type_descriptor(*args)

class IGESSelect_UpdateFileName(IGESSelect_ModelModifier):
    """
    Sets the File Name in Header to be the actual name of the file
    If new file name is unknown, the former one is kept
    Remark : this works well only when it is Applied and send time
    If it is run immediately, new file name is unknown and nothing
    is done
    The Selection of the Modifier is not used : it simply acts as
    a criterium to select IGES Files to touch up
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_UpdateFileName
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_UpdateFileName(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_UpdateFileName self) -> IGESSelect_UpdateFileName

        Creates an UpdateFileName, which uses the system Date


        """
        this = _IGESSelect.new_IGESSelect_UpdateFileName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_UpdateFileName self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : the system Date
        is set to Global Section Item n0 18.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_UpdateFileName_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_UpdateFileName self) -> TCollection_AsciiString

        Returns a text which is
        "Updates IGES File Name to new current one"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_UpdateFileName_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_UpdateFileName_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_UpdateFileName_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_UpdateFileName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_UpdateFileName
IGESSelect_UpdateFileName_swigregister = _IGESSelect.IGESSelect_UpdateFileName_swigregister
IGESSelect_UpdateFileName_swigregister(IGESSelect_UpdateFileName)

def IGESSelect_UpdateFileName_get_type_name(*args):
    """
    IGESSelect_UpdateFileName_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_UpdateFileName_get_type_name(*args)

def IGESSelect_UpdateFileName_get_type_descriptor(*args):
    """
    IGESSelect_UpdateFileName_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_UpdateFileName_get_type_descriptor(*args)

class IGESSelect_DispPerDrawing(IFSelect.IFSelect_Dispatch):
    """
    This type of dispatch defines sets of entities attached to
    distinct drawings. This information is taken from attached
    views which appear in the Directory Part. Also Drawing Frames
    are considered when Drawings are part of input list.

    Remaining data concern entities not attached to a drawing.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_DispPerDrawing
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_DispPerDrawing(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_DispPerDrawing self) -> IGESSelect_DispPerDrawing

        Creates a DispPerDrawing


        """
        this = _IGESSelect.new_IGESSelect_DispPerDrawing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Label(self, *args):
        """
        Label(IGESSelect_DispPerDrawing self) -> TCollection_AsciiString

        Returns as Label, "One File per Drawing"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_DispPerDrawing_Label(self, *args)


    def Packets(self, *args):
        """
        Packets(IGESSelect_DispPerDrawing self, Interface_Graph G, IFGraph_SubPartsIterator packs)

        Computes the list of produced Packets. Packets are computed
        by a ViewSorter (SortDrawings with also frames).

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type packs: OCC.wrapper.IFGraph.IFGraph_SubPartsIterator

        """
        return _IGESSelect.IGESSelect_DispPerDrawing_Packets(self, *args)


    def CanHaveRemainder(self, *args):
        """
        CanHaveRemainder(IGESSelect_DispPerDrawing self) -> Standard_Boolean

        Returns True, because of entities attached to no view.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_DispPerDrawing_CanHaveRemainder(self, *args)


    def Remainder(self, *args):
        """
        Remainder(IGESSelect_DispPerDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Returns Remainder which is a set of Entities.
        It is supposed to be called once Packets has been called.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.IGESSelect_DispPerDrawing_Remainder(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_DispPerDrawing_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_DispPerDrawing_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_DispPerDrawing_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_DispPerDrawing
IGESSelect_DispPerDrawing_swigregister = _IGESSelect.IGESSelect_DispPerDrawing_swigregister
IGESSelect_DispPerDrawing_swigregister(IGESSelect_DispPerDrawing)

def IGESSelect_DispPerDrawing_get_type_name(*args):
    """
    IGESSelect_DispPerDrawing_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_DispPerDrawing_get_type_name(*args)

def IGESSelect_DispPerDrawing_get_type_descriptor(*args):
    """
    IGESSelect_DispPerDrawing_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_DispPerDrawing_get_type_descriptor(*args)

class IGESSelect_ChangeLevelNumber(IGESSelect_ModelModifier):
    """
    Changes Level Number (as null or single) to a new single value
    Entities attached to a LevelListEntity are ignored
    Entities considered can be, either all Entities but those
    attached to a LevelListEntity, or Entities attached to a
    specific Level Number (0 for not defined).

    Remark : this concerns the Directory Part only. The Level List
    Entities themselves (their content) are not affected.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_ChangeLevelNumber
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_ChangeLevelNumber(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_ChangeLevelNumber self) -> IGESSelect_ChangeLevelNumber

        Creates a ChangeLevelNumber, not yet defined
        (see SetOldNumber and SetNewNumber)


        """
        this = _IGESSelect.new_IGESSelect_ChangeLevelNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasOldNumber(self, *args):
        """
        HasOldNumber(IGESSelect_ChangeLevelNumber self) -> Standard_Boolean

        Returns True if OldNumber is defined : then, only entities
        attached to the value of OldNumber will be considered. Else,
        all entities but those attached to a Level List will be.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_HasOldNumber(self, *args)


    def OldNumber(self, *args):
        """
        OldNumber(IGESSelect_ChangeLevelNumber self) -> Handle_IFSelect_IntParam

        Returns the parameter for OldNumber. If not defined (Null
        Handle), it will be interpreted as "all level numbers"

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_OldNumber(self, *args)


    def SetOldNumber(self, *args):
        """
        SetOldNumber(IGESSelect_ChangeLevelNumber self, Handle_IFSelect_IntParam param)

        Sets a parameter for OldNumber

        :type param: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_SetOldNumber(self, *args)


    def NewNumber(self, *args):
        """
        NewNumber(IGESSelect_ChangeLevelNumber self) -> Handle_IFSelect_IntParam

        Returns the parameter for NewNumber. If not defined (Null
        Handle), it will be interpreted as "new value 0"

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_NewNumber(self, *args)


    def SetNewNumber(self, *args):
        """
        SetNewNumber(IGESSelect_ChangeLevelNumber self, Handle_IFSelect_IntParam param)

        Sets a parameter for NewNumber

        :type param: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_SetNewNumber(self, *args)


    def Performing(self, *args):
        """
        Performing(IGESSelect_ChangeLevelNumber self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : considers selected target entities :
        If OldNumber is not defined, all entities but those attached
        to a Level List
        If OldNumber is defined (value not negative), entities with a
        defined Level Number (can be zero)
        Attaches all these entities to value given by NewNumber, or
        zero if not defined

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_ChangeLevelNumber self) -> TCollection_AsciiString

        Returns a text which is
        "Changes Level Number <old> to <new>" , or
        "Changes all Levels Numbers positive and zero to <new>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_ChangeLevelNumber_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_ChangeLevelNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_ChangeLevelNumber
IGESSelect_ChangeLevelNumber_swigregister = _IGESSelect.IGESSelect_ChangeLevelNumber_swigregister
IGESSelect_ChangeLevelNumber_swigregister(IGESSelect_ChangeLevelNumber)

def IGESSelect_ChangeLevelNumber_get_type_name(*args):
    """
    IGESSelect_ChangeLevelNumber_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_ChangeLevelNumber_get_type_name(*args)

def IGESSelect_ChangeLevelNumber_get_type_descriptor(*args):
    """
    IGESSelect_ChangeLevelNumber_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_ChangeLevelNumber_get_type_descriptor(*args)

class IGESSelect_SelectFaces(IFSelect.IFSelect_SelectExplore):
    """
    This selection returns the faces contained in an IGES Entity
    or itself if it is a Face
    Face means :
    - Face (510) of a ManifoldSolidBrep
    - TrimmedSurface (144)
    - BoundedSurface (143)
    - Plane with a Bounding Curve (108, form not 0)
    - Also, any Surface which is not in a TrimmedSurface, a
    BoundedSurface, or a Face (FREE Surface)
    -> i.e. a Face for which Natural Bounds will be considered
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectFaces
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectFaces(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectFaces self) -> IGESSelect_SelectFaces

        This selection returns the faces contained in an IGES Entity
        or itself if it is a Face
        Face means :
        - Face (510) of a ManifoldSolidBrep
        - TrimmedSurface (144)
        - BoundedSurface (143)
        - Plane with a Bounding Curve (108, form not 0)
        - Also, any Surface which is not in a TrimmedSurface, a
        BoundedSurface, or a Face (FREE Surface)
        -> i.e. a Face for which Natural Bounds will be considered
        """
        this = _IGESSelect.new_IGESSelect_SelectFaces(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Explore(self, *args):
        """
        Explore(IGESSelect_SelectFaces self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity, to take its faces
        Works recursively

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectFaces_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(IGESSelect_SelectFaces self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Faces"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectFaces_ExploreLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectFaces_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectFaces_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectFaces_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectFaces
IGESSelect_SelectFaces_swigregister = _IGESSelect.IGESSelect_SelectFaces_swigregister
IGESSelect_SelectFaces_swigregister(IGESSelect_SelectFaces)

def IGESSelect_SelectFaces_get_type_name(*args):
    """
    IGESSelect_SelectFaces_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectFaces_get_type_name(*args)

def IGESSelect_SelectFaces_get_type_descriptor(*args):
    """
    IGESSelect_SelectFaces_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectFaces_get_type_descriptor(*args)

class IGESSelect_ComputeStatus(IGESSelect_ModelModifier):
    """
    Computes Status of IGES Entities for a whole IGESModel.
    This concerns SubordinateStatus and UseFlag, which must have
    some definite values according the way they are referenced.
    (see definitions of Logical use, Physical use, etc...)

    Works by calling a BasicEditor from IGESData. Works on the
    whole produced (target) model, because computation is global.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_ComputeStatus
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_ComputeStatus(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_ComputeStatus self) -> IGESSelect_ComputeStatus

        Creates an ComputeStatus, which uses the system Date


        """
        this = _IGESSelect.new_IGESSelect_ComputeStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_ComputeStatus self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : it first evaluates the required values for
        Subordinate Status and Use Flag (in Directory Part of each
        IGES Entity). Then it corrects them, for the whole target.
        Works with a Protocol. Implementation uses BasicEditor

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_ComputeStatus_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_ComputeStatus self) -> TCollection_AsciiString

        Returns a text which is
        "Compute Subordinate Status and Use Flag"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_ComputeStatus_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_ComputeStatus_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_ComputeStatus_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_ComputeStatus_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_ComputeStatus
IGESSelect_ComputeStatus_swigregister = _IGESSelect.IGESSelect_ComputeStatus_swigregister
IGESSelect_ComputeStatus_swigregister(IGESSelect_ComputeStatus)

def IGESSelect_ComputeStatus_get_type_name(*args):
    """
    IGESSelect_ComputeStatus_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_ComputeStatus_get_type_name(*args)

def IGESSelect_ComputeStatus_get_type_descriptor(*args):
    """
    IGESSelect_ComputeStatus_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_ComputeStatus_get_type_descriptor(*args)

class IGESSelect_SignLevelNumber(IFSelect.IFSelect_Signature):
    """
    Gives D.E. Level Number under two possible forms :
    * for counter : "LEVEL nnnnnnn", " NO LEVEL", " LEVEL LIST"
    * for selection : "/nnn/", "/0/", "/1/2/nnn/"

    For matching, giving /nn/ gets any entity attached to level nn
    whatever simple or in a level list
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SignLevelNumber
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SignLevelNumber(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SignLevelNumber self, Standard_Boolean const countmode) -> IGESSelect_SignLevelNumber

        Creates a SignLevelNumber
        <countmode> True : values are naturally displayed
        <countmode> False: values are separated by slashes
        in order to allow selection by signature by Draw or C++

        :type countmode: bool

        """
        this = _IGESSelect.new_IGESSelect_SignLevelNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Value(IGESSelect_SignLevelNumber self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the value (see above)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_SignLevelNumber_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SignLevelNumber_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SignLevelNumber_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SignLevelNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SignLevelNumber
IGESSelect_SignLevelNumber_swigregister = _IGESSelect.IGESSelect_SignLevelNumber_swigregister
IGESSelect_SignLevelNumber_swigregister(IGESSelect_SignLevelNumber)

def IGESSelect_SignLevelNumber_get_type_name(*args):
    """
    IGESSelect_SignLevelNumber_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SignLevelNumber_get_type_name(*args)

def IGESSelect_SignLevelNumber_get_type_descriptor(*args):
    """
    IGESSelect_SignLevelNumber_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SignLevelNumber_get_type_descriptor(*args)

class IGESSelect_SelectName(IFSelect.IFSelect_SelectExtract):
    """
    Selects Entities which have a given name.
    Consider Property Name if present, else Short Label, but
    not the Subscript Number
    First version : keeps exact name
    Later : regular expression
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectName
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectName(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectName self) -> IGESSelect_SelectName

        Creates an empty SelectName : every entity is considered
        good (no filter active)


        """
        this = _IGESSelect.new_IGESSelect_SelectName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sort(self, *args):
        """
        Sort(IGESSelect_SelectName self, Standard_Integer const rank, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if Name of Entity complies with Name Filter

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectName_Sort(self, *args)


    def SetName(self, *args):
        """
        SetName(IGESSelect_SelectName self, Handle_TCollection_HAsciiString name)

        Sets a Name as a criterium : IGES Entities which have this name
        are kept (without regular expression, there should be at most
        one). <name> can be regarded as a Text Parameter

        :type name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.IGESSelect_SelectName_SetName(self, *args)


    def Name(self, *args):
        """
        Name(IGESSelect_SelectName self) -> Handle_TCollection_HAsciiString

        Returns the Name used as Filter

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.IGESSelect_SelectName_Name(self, *args)


    def ExtractLabel(self, *args):
        """
        ExtractLabel(IGESSelect_SelectName self) -> TCollection_AsciiString

        Returns the Selection criterium : "IGES Entity, Name : <name>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectName_ExtractLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectName_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectName_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectName
IGESSelect_SelectName_swigregister = _IGESSelect.IGESSelect_SelectName_swigregister
IGESSelect_SelectName_swigregister(IGESSelect_SelectName)

def IGESSelect_SelectName_get_type_name(*args):
    """
    IGESSelect_SelectName_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectName_get_type_name(*args)

def IGESSelect_SelectName_get_type_descriptor(*args):
    """
    IGESSelect_SelectName_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectName_get_type_descriptor(*args)

class IGESSelect_SelectPCurves(IFSelect.IFSelect_SelectExplore):
    """
    This Selection returns the pcurves which lie on a face
    In two modes : global (i.e. a CompositeCurve is not explored)
    or basic (all the basic curves are listed)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectPCurves
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectPCurves(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectPCurves self, Standard_Boolean const basic) -> IGESSelect_SelectPCurves

        Creates a SelectPCurves
        basic True  : lists all the components of pcurves
        basic False : lists the uppest level definitions
        (i.e. stops at CompositeCurve)

        :type basic: bool

        """
        this = _IGESSelect.new_IGESSelect_SelectPCurves(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Explore(self, *args):
        """
        Explore(IGESSelect_SelectPCurves self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity, to take its contained PCurves
        An independant curve is IGNORED : only faces are explored

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectPCurves_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(IGESSelect_SelectPCurves self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Basic PCurves" or
        "Global PCurves"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectPCurves_ExploreLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectPCurves_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectPCurves_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectPCurves_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectPCurves
IGESSelect_SelectPCurves_swigregister = _IGESSelect.IGESSelect_SelectPCurves_swigregister
IGESSelect_SelectPCurves_swigregister(IGESSelect_SelectPCurves)

def IGESSelect_SelectPCurves_get_type_name(*args):
    """
    IGESSelect_SelectPCurves_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectPCurves_get_type_name(*args)

def IGESSelect_SelectPCurves_get_type_descriptor(*args):
    """
    IGESSelect_SelectPCurves_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectPCurves_get_type_descriptor(*args)

class IGESSelect_CounterOfLevelNumber(IFSelect.IFSelect_SignCounter):
    """
    This class gives information about Level Number. It counts
    entities according level number, considering also the
    multiple level (see the class LevelList) for which an entity
    is attached to each of the listed levels.

    Data are available, as level number, or as their alphanumeric
    counterparts ("LEVEL nnnnnnn", " NO LEVEL", " LEVEL LIST")
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_CounterOfLevelNumber
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_CounterOfLevelNumber(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_CounterOfLevelNumber self, Standard_Boolean const withmap, Standard_Boolean const withlist) -> IGESSelect_CounterOfLevelNumber

        Creates a CounterOfLevelNumber, clear, ready to work
        <withmap> and <withlist> are transmitted to SignCounter

        :type withmap: bool
        :type withlist: bool

        """
        this = _IGESSelect.new_IGESSelect_CounterOfLevelNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Clear(self, *args):
        """
        Clear(IGESSelect_CounterOfLevelNumber self)

        Resets already memorized informations : also numeric data


        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_Clear(self, *args)


    def AddSign(self, *args):
        """
        AddSign(IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model)

        Adds an entity by considering its lrvrl number(s)
        A level is added both in numeric and alphanumeric form,
        i.e. LevelList gives "LEVEL LIST", others (no level or
        positive level) displays level number on 7 digits (C : %7d)
        Remark : an entity attached to a Level List is added for
        " LEVEL LIST", and for each of its constituant levels

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_AddSign(self, *args)


    def AddLevel(self, *args):
        """
        AddLevel(IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Standard_Integer const level)

        The internal action to record a new level number, positive,
        null (no level) or negative (level list)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type level: int

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_AddLevel(self, *args)


    def HighestLevel(self, *args):
        """
        HighestLevel(IGESSelect_CounterOfLevelNumber self) -> Standard_Integer

        Returns the highest value found for a level number

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_HighestLevel(self, *args)


    def NbTimesLevel(self, *args):
        """
        NbTimesLevel(IGESSelect_CounterOfLevelNumber self, Standard_Integer const level) -> Standard_Integer

        Returns the number of times a level is used,
        0 if it has not been recorded at all
        <level> = 0 counts entities attached to no level
        <level> < 0 counts entities attached to a LevelList

        :type level: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_NbTimesLevel(self, *args)


    def Levels(self, *args):
        """
        Levels(IGESSelect_CounterOfLevelNumber self) -> Handle_TColStd_HSequenceOfInteger

        Returns the ordered list of used positive Level numbers

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfInteger

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_Levels(self, *args)


    def Sign(self, *args):
        """
        Sign(IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Handle_TCollection_HAsciiString

        Determines and returns the value of the signature for an
        entity as an HAsciiString. Redefined, gives the same result
        as AddSign, see this method ("LEVEL LIST" or "nnnnnnn")

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_Sign(self, *args)


    def PrintCount(self, *args):
        """
        PrintCount(IGESSelect_CounterOfLevelNumber self, Handle_Message_Messenger S)

        Prints the counts of items (not the list) then the Highest
        Level Number recorded

        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_PrintCount(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_CounterOfLevelNumber_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_CounterOfLevelNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_CounterOfLevelNumber
IGESSelect_CounterOfLevelNumber_swigregister = _IGESSelect.IGESSelect_CounterOfLevelNumber_swigregister
IGESSelect_CounterOfLevelNumber_swigregister(IGESSelect_CounterOfLevelNumber)

def IGESSelect_CounterOfLevelNumber_get_type_name(*args):
    """
    IGESSelect_CounterOfLevelNumber_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_CounterOfLevelNumber_get_type_name(*args)

def IGESSelect_CounterOfLevelNumber_get_type_descriptor(*args):
    """
    IGESSelect_CounterOfLevelNumber_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_CounterOfLevelNumber_get_type_descriptor(*args)

class IGESSelect_SelectBypassSubfigure(IFSelect.IFSelect_SelectExplore):
    """
    Selects a list built as follows :
    Subfigures correspond to
    * Definition (basic : type 308, or Network : type 320)
    * Instance (Singular : type 408, or Network : 420, or
    patterns : 412,414)

    Entities which are not Subfigure are taken as such
    For Subfigures Instances, their definition is taken, then
    explored itself
    For Subfigures Definitions, the list of "Associated Entities"
    is explored
    Hence, level 0 (D) recursively explores a Subfigure if some of
    its Elements are Subfigures. level 1 explores just at first
    level (i.e. for an instance, returns its definition)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectBypassSubfigure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectBypassSubfigure(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectBypassSubfigure self, Standard_Integer const level=0) -> IGESSelect_SelectBypassSubfigure

        Creates a SelectBypassSubfigure, by default all level
        (level = 1 explores at first level)

        :type level: int

        """
        this = _IGESSelect.new_IGESSelect_SelectBypassSubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Explore(self, *args):
        """
        Explore(IGESSelect_SelectBypassSubfigure self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity : for a Subfigure, gives its elements
        Else, takes the entity itself

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectBypassSubfigure_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(IGESSelect_SelectBypassSubfigure self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Content of Subfigure"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectBypassSubfigure_ExploreLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectBypassSubfigure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectBypassSubfigure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectBypassSubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectBypassSubfigure
IGESSelect_SelectBypassSubfigure_swigregister = _IGESSelect.IGESSelect_SelectBypassSubfigure_swigregister
IGESSelect_SelectBypassSubfigure_swigregister(IGESSelect_SelectBypassSubfigure)

def IGESSelect_SelectBypassSubfigure_get_type_name(*args):
    """
    IGESSelect_SelectBypassSubfigure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectBypassSubfigure_get_type_name(*args)

def IGESSelect_SelectBypassSubfigure_get_type_descriptor(*args):
    """
    IGESSelect_SelectBypassSubfigure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectBypassSubfigure_get_type_descriptor(*args)

class IGESSelect_SelectBypassGroup(IFSelect.IFSelect_SelectExplore):
    """
    Selects a list built as follows :
    Groups are entities type 402, forms 1,7,14,15 (Group,
    Ordered or not, "WithoutBackPointer" or not)

    Entities which are not GROUP are taken as such
    For Groups, their list of Elements is explore
    Hence, level 0 (D) recursively explores a Group if some of
    its Elements are Groups. level 1 explores just at first level
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectBypassGroup
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectBypassGroup(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectBypassGroup self, Standard_Integer const level=0) -> IGESSelect_SelectBypassGroup

        Creates a SelectBypassGroup, by default all level
        (level = 1 explores at first level)

        :type level: int

        """
        this = _IGESSelect.new_IGESSelect_SelectBypassGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Explore(self, *args):
        """
        Explore(IGESSelect_SelectBypassGroup self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity : for a Group, gives its elements
        Else, takes the entity itself

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectBypassGroup_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(IGESSelect_SelectBypassGroup self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Content of Group"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectBypassGroup_ExploreLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectBypassGroup_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectBypassGroup_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectBypassGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectBypassGroup
IGESSelect_SelectBypassGroup_swigregister = _IGESSelect.IGESSelect_SelectBypassGroup_swigregister
IGESSelect_SelectBypassGroup_swigregister(IGESSelect_SelectBypassGroup)

def IGESSelect_SelectBypassGroup_get_type_name(*args):
    """
    IGESSelect_SelectBypassGroup_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectBypassGroup_get_type_name(*args)

def IGESSelect_SelectBypassGroup_get_type_descriptor(*args):
    """
    IGESSelect_SelectBypassGroup_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectBypassGroup_get_type_descriptor(*args)

class IGESSelect_SignStatus(IFSelect.IFSelect_Signature):
    """
    Gives D.E. Status under the form i,j,k,l (4 figures)
    i for BlankStatus
    j for SubordinateStatus
    k for UseFlag
    l for Hierarchy

    For matching, allowed shortcuts
    B(Blanked) or V(Visible) are allowed instead of  i
    I(Independant=0), P(Physically Dep.=1), L(Logically Dep.=2) or
    D(Dependant=3) are allowed instead of  j
    These letters must be given in their good position
    For non-exact matching :
    a letter (see above), no comma : only this status is checked
    nothing or a star between commas : this status is OK
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SignStatus
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SignStatus(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SignStatus self) -> IGESSelect_SignStatus

        Gives D.E. Status under the form i,j,k,l (4 figures)
        i for BlankStatus
        j for SubordinateStatus
        k for UseFlag
        l for Hierarchy

        For matching, allowed shortcuts
        B(Blanked) or V(Visible) are allowed instead of  i
        I(Independant=0), P(Physically Dep.=1), L(Logically Dep.=2) or
        D(Dependant=3) are allowed instead of  j
        These letters must be given in their good position
        For non-exact matching :
        a letter (see above), no comma : only this status is checked
        nothing or a star between commas : this status is OK
        """
        this = _IGESSelect.new_IGESSelect_SignStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Value(IGESSelect_SignStatus self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the value (see above)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_SignStatus_Value(self, *args)


    def Matches(self, *args):
        """
        Matches(IGESSelect_SignStatus self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Performs the match rule (see above)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SignStatus_Matches(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SignStatus_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SignStatus_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SignStatus_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SignStatus
IGESSelect_SignStatus_swigregister = _IGESSelect.IGESSelect_SignStatus_swigregister
IGESSelect_SignStatus_swigregister(IGESSelect_SignStatus)

def IGESSelect_SignStatus_get_type_name(*args):
    """
    IGESSelect_SignStatus_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SignStatus_get_type_name(*args)

def IGESSelect_SignStatus_get_type_descriptor(*args):
    """
    IGESSelect_SignStatus_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SignStatus_get_type_descriptor(*args)

class IGESSelect_SetGlobalParameter(IGESSelect_ModelModifier):
    """
    Sets a Global (Header) Parameter to a new value, directly given
    Controls the form of the parameter (Integer, Real, String
    with such or such form), but not the consistence of the new
    value regarding the rest of the file.

    The new value is given under the form of a HAsciiString, even
    for Integer or Real values. For String values, Hollerith forms
    are accepted but not mandatory
    Warning : a Null (not set) value is not accepted. For an empty string,
    give a Text Parameter which is empty
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SetGlobalParameter
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SetGlobalParameter(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SetGlobalParameter self, Standard_Integer const numpar) -> IGESSelect_SetGlobalParameter

        Creates an SetGlobalParameter, to be applied on Global
        Parameter <numpar>

        :type numpar: int

        """
        this = _IGESSelect.new_IGESSelect_SetGlobalParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GlobalNumber(self, *args):
        """
        GlobalNumber(IGESSelect_SetGlobalParameter self) -> Standard_Integer

        Returns the global parameter number to which this modifiers
        applies

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect_SetGlobalParameter_GlobalNumber(self, *args)


    def SetValue(self, *args):
        """
        SetValue(IGESSelect_SetGlobalParameter self, Handle_TCollection_HAsciiString text)

        Sets a Text Parameter for the new value

        :type text: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.IGESSelect_SetGlobalParameter_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(IGESSelect_SetGlobalParameter self) -> Handle_TCollection_HAsciiString

        Returns the value to set to the global parameter (Text Param)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.IGESSelect_SetGlobalParameter_Value(self, *args)


    def Performing(self, *args):
        """
        Performing(IGESSelect_SetGlobalParameter self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : the form of the new
        value is checked regarding the parameter number (given at
        creation time).

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_SetGlobalParameter_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_SetGlobalParameter self) -> TCollection_AsciiString

        Returns a text which is
        "Sets Global Parameter <numpar> to <new value>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SetGlobalParameter_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SetGlobalParameter_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SetGlobalParameter_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SetGlobalParameter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SetGlobalParameter
IGESSelect_SetGlobalParameter_swigregister = _IGESSelect.IGESSelect_SetGlobalParameter_swigregister
IGESSelect_SetGlobalParameter_swigregister(IGESSelect_SetGlobalParameter)

def IGESSelect_SetGlobalParameter_get_type_name(*args):
    """
    IGESSelect_SetGlobalParameter_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SetGlobalParameter_get_type_name(*args)

def IGESSelect_SetGlobalParameter_get_type_descriptor(*args):
    """
    IGESSelect_SetGlobalParameter_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SetGlobalParameter_get_type_descriptor(*args)

class IGESSelect_IGESTypeForm(IFSelect.IFSelect_Signature):
    """
    IGESTypeForm is a Signature specific to the IGES Norm :
    it gives the signature under two possible forms :
    - as "mmm nnn", with "mmm" as IGES Type Number, and "nnn"
    as IGES From Number (even if = 0)  [Default]
    - as "mmm" alone, which gives only the IGES Type Number
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_IGESTypeForm
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_IGESTypeForm(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_IGESTypeForm self, Standard_Boolean const withform) -> IGESSelect_IGESTypeForm

        Creates a Signature for IGES Type & Form Numbers
        If <withform> is False, for IGES Type Number only

        :type withform: bool

        """
        this = _IGESSelect.new_IGESSelect_IGESTypeForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Value(IGESSelect_IGESTypeForm self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the signature for IGES, "mmm nnn" or "mmm" according
        creation choice (Type & Form or Type only)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_IGESTypeForm_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_IGESTypeForm_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_IGESTypeForm_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_IGESTypeForm_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetFormA(self, withform):
        return _IGESSelect.IGESSelect_IGESTypeForm_SetFormA(self, withform)

    def SetForm(self, withform):
        return _IGESSelect.IGESSelect_IGESTypeForm_SetForm(self, withform)
    __swig_destroy__ = _IGESSelect.delete_IGESSelect_IGESTypeForm
IGESSelect_IGESTypeForm_swigregister = _IGESSelect.IGESSelect_IGESTypeForm_swigregister
IGESSelect_IGESTypeForm_swigregister(IGESSelect_IGESTypeForm)

def IGESSelect_IGESTypeForm_get_type_name(*args):
    """
    IGESSelect_IGESTypeForm_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_IGESTypeForm_get_type_name(*args)

def IGESSelect_IGESTypeForm_get_type_descriptor(*args):
    """
    IGESSelect_IGESTypeForm_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_IGESTypeForm_get_type_descriptor(*args)

class IGESSelect_SelectFromSingleView(IFSelect.IFSelect_SelectDeduct):
    """
    This selection gets in all the model, the entities which are
    attached to the views given as input. Only Single Views are
    considered. This information is kept from Directory Part
    (View Item).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectFromSingleView
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectFromSingleView(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectFromSingleView self) -> IGESSelect_SelectFromSingleView

        Creates a SelectFromSingleView


        """
        this = _IGESSelect.new_IGESSelect_SelectFromSingleView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def RootResult(self, *args):
        """
        RootResult(IGESSelect_SelectFromSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Selects the Entities which are attached to the Single View(s)
        present in the Input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.IGESSelect_SelectFromSingleView_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_SelectFromSingleView self) -> TCollection_AsciiString

        Returns the label, with is "Entities attached to single View"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectFromSingleView_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectFromSingleView_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectFromSingleView_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectFromSingleView_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectFromSingleView
IGESSelect_SelectFromSingleView_swigregister = _IGESSelect.IGESSelect_SelectFromSingleView_swigregister
IGESSelect_SelectFromSingleView_swigregister(IGESSelect_SelectFromSingleView)

def IGESSelect_SelectFromSingleView_get_type_name(*args):
    """
    IGESSelect_SelectFromSingleView_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectFromSingleView_get_type_name(*args)

def IGESSelect_SelectFromSingleView_get_type_descriptor(*args):
    """
    IGESSelect_SelectFromSingleView_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectFromSingleView_get_type_descriptor(*args)

class Handle_IGESSelect_SplineToBSpline(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SplineToBSpline self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SplineToBSpline self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SplineToBSpline self, IGESSelect_SplineToBSpline thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SplineToBSpline self, Handle_IGESSelect_SplineToBSpline theHandle) -> Handle_IGESSelect_SplineToBSpline
        assign(Handle_IGESSelect_SplineToBSpline self, IGESSelect_SplineToBSpline thePtr) -> Handle_IGESSelect_SplineToBSpline
        assign(Handle_IGESSelect_SplineToBSpline self, Handle_IGESSelect_SplineToBSpline theHandle) -> Handle_IGESSelect_SplineToBSpline

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SplineToBSpline self) -> IGESSelect_SplineToBSpline

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SplineToBSpline self) -> IGESSelect_SplineToBSpline

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SplineToBSpline self) -> IGESSelect_SplineToBSpline

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SplineToBSpline___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SplineToBSpline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SplineToBSpline_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SplineToBSpline

    def OptionTryC2(self, *args):
        """
        OptionTryC2(Handle_IGESSelect_SplineToBSpline self) -> Standard_Boolean

        Returns the option TryC2 given at creation time

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_OptionTryC2(self, *args)


    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_SplineToBSpline self, Interface_Graph G, Handle_Interface_Protocol protocol, Interface_CheckIterator checks, Handle_Interface_InterfaceModel newmod) -> Standard_Boolean

        Performs the transformation, if there is at least one Spline
        Curve (112) or Surface (126). Does nothing if there is none.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type checks: OCC.wrapper.Interface.Interface_CheckIterator
        :type newmod: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_Perform(self, *args)


    def Updated(self, *args):
        """
        Updated(Handle_IGESSelect_SplineToBSpline self, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto) -> Standard_Boolean

        Returns the transformed entities.
        If original data contained no Spline Curve or Surface,
        the result is identity : <entto> = <entfrom>
        Else, the copied counterpart is returned : for a Spline Curve
        or Surface, it is a converted BSpline Curve or Surface. Else,
        it is the result of general service Copy (rebuilt as necessary
        by BSPlines replacing Splines).

        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_Updated(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SplineToBSpline self) -> TCollection_AsciiString

        Returns a text which defines the way a Transformer works :
        "Conversion Spline to BSpline" and as opted,
        " trying to upgrade continuity"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SplineToBSpline self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SplineToBSpline_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SplineToBSpline_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeProtocol(self, *args):
        """
        ChangeProtocol(Handle_IGESSelect_SplineToBSpline self, Handle_Interface_Protocol newproto) -> Standard_Boolean

        This methods allows to declare that the Protocol applied to
        the new Model has changed. It applies to the last call to
        Perform.

        Returns True if the Protocol has changed, False else.
        The provided default keeps the starting Protocol. This method
        should be redefined as required by the effect of Perform.

        :type newproto: OCC.wrapper.Interface.Handle_Interface_Protocol
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_ChangeProtocol(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SplineToBSpline self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SplineToBSpline self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SplineToBSpline self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SplineToBSpline self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SplineToBSpline self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SplineToBSpline self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SplineToBSpline self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SplineToBSpline self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SplineToBSpline self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SplineToBSpline_DecrementRefCounter(self, *args)

Handle_IGESSelect_SplineToBSpline_swigregister = _IGESSelect.Handle_IGESSelect_SplineToBSpline_swigregister
Handle_IGESSelect_SplineToBSpline_swigregister(Handle_IGESSelect_SplineToBSpline)

def Handle_IGESSelect_SplineToBSpline_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SplineToBSpline_DownCast(thing)
Handle_IGESSelect_SplineToBSpline_DownCast = _IGESSelect.Handle_IGESSelect_SplineToBSpline_DownCast

class Handle_IGESSelect_SelectLevelNumber(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectLevelNumber self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectLevelNumber self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectLevelNumber self, IGESSelect_SelectLevelNumber thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectLevelNumber self, Handle_IGESSelect_SelectLevelNumber theHandle) -> Handle_IGESSelect_SelectLevelNumber
        assign(Handle_IGESSelect_SelectLevelNumber self, IGESSelect_SelectLevelNumber thePtr) -> Handle_IGESSelect_SelectLevelNumber
        assign(Handle_IGESSelect_SelectLevelNumber self, Handle_IGESSelect_SelectLevelNumber theHandle) -> Handle_IGESSelect_SelectLevelNumber

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectLevelNumber self) -> IGESSelect_SelectLevelNumber

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectLevelNumber self) -> IGESSelect_SelectLevelNumber

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectLevelNumber self) -> IGESSelect_SelectLevelNumber

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectLevelNumber___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectLevelNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectLevelNumber_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectLevelNumber

    def SetLevelNumber(self, *args):
        """
        SetLevelNumber(Handle_IGESSelect_SelectLevelNumber self, Handle_IFSelect_IntParam levnum)

        Sets a Parameter as Level criterium

        :type levnum: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_SetLevelNumber(self, *args)


    def LevelNumber(self, *args):
        """
        LevelNumber(Handle_IGESSelect_SelectLevelNumber self) -> Handle_IFSelect_IntParam

        Returns the Level criterium. NullHandle if not yet set
        (interpreted as Level = 0 : no level number attached)

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_LevelNumber(self, *args)


    def Sort(self, *args):
        """
        Sort(Handle_IGESSelect_SelectLevelNumber self, Standard_Integer const rank, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <ent> is an IGES Entity with Level Number
        admits the criterium (= value if single level, or one of the
        attached level numbers = value if level list)

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_Sort(self, *args)


    def ExtractLabel(self, *args):
        """
        ExtractLabel(Handle_IGESSelect_SelectLevelNumber self) -> TCollection_AsciiString

        Returns the Selection criterium :
        "IGES Entity, Level Number admits <nn>" (if nn > 0) or
        "IGES Entity attached to no Level" (if nn = 0)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_ExtractLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectLevelNumber self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectLevelNumber_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectLevelNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDirect(self, *args):
        """
        IsDirect(Handle_IGESSelect_SelectLevelNumber self) -> Standard_Boolean

        Returns True if Sort criterium is Direct, False if Reverse

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_IsDirect(self, *args)


    def SetDirect(self, *args):
        """
        SetDirect(Handle_IGESSelect_SelectLevelNumber self, Standard_Boolean const direct)

        Sets Sort criterium sense to a new value
        (True : Direct , False : Reverse)

        :type direct: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_SetDirect(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectLevelNumber self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Sort on each input Entity : the Entity is kept as
        output if Sort returns the same value as Direct status

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_RootResult(self, *args)


    def SortInGraph(self, *args):
        """
        SortInGraph(Handle_IGESSelect_SelectLevelNumber self, Standard_Integer const rank, Handle_Standard_Transient ent, Interface_Graph G) -> Standard_Boolean

        Works as Sort but works on the Graph
        Default directly calls Sort, but it can be redefined
        If SortInGraph is redefined, Sort should be defined even if
        not called (to avoid deferred methods in a final class)

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_SortInGraph(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectLevelNumber self) -> TCollection_AsciiString

        Returns a text saying "Picked" or "Removed", plus the
        specific criterium returned by ExtractLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectLevelNumber self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectLevelNumber self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectLevelNumber self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectLevelNumber self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectLevelNumber self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectLevelNumber self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectLevelNumber self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectLevelNumber self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectLevelNumber self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectLevelNumber self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectLevelNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectLevelNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectLevelNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectLevelNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectLevelNumber self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectLevelNumber self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectLevelNumber self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectLevelNumber self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectLevelNumber_swigregister = _IGESSelect.Handle_IGESSelect_SelectLevelNumber_swigregister
Handle_IGESSelect_SelectLevelNumber_swigregister(Handle_IGESSelect_SelectLevelNumber)

def Handle_IGESSelect_SelectLevelNumber_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectLevelNumber_DownCast(thing)
Handle_IGESSelect_SelectLevelNumber_DownCast = _IGESSelect.Handle_IGESSelect_SelectLevelNumber_DownCast

class Handle_IGESSelect_SelectFromSingleView(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectFromSingleView self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectFromSingleView self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectFromSingleView self, IGESSelect_SelectFromSingleView thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectFromSingleView self, Handle_IGESSelect_SelectFromSingleView theHandle) -> Handle_IGESSelect_SelectFromSingleView
        assign(Handle_IGESSelect_SelectFromSingleView self, IGESSelect_SelectFromSingleView thePtr) -> Handle_IGESSelect_SelectFromSingleView
        assign(Handle_IGESSelect_SelectFromSingleView self, Handle_IGESSelect_SelectFromSingleView theHandle) -> Handle_IGESSelect_SelectFromSingleView

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectFromSingleView self) -> IGESSelect_SelectFromSingleView

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectFromSingleView self) -> IGESSelect_SelectFromSingleView

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectFromSingleView self) -> IGESSelect_SelectFromSingleView

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectFromSingleView___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectFromSingleView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectFromSingleView_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectFromSingleView

    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectFromSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Selects the Entities which are attached to the Single View(s)
        present in the Input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectFromSingleView self) -> TCollection_AsciiString

        Returns the label, with is "Entities attached to single View"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectFromSingleView self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectFromSingleView_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectFromSingleView_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectFromSingleView self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectFromSingleView self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectFromSingleView self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectFromSingleView self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectFromSingleView self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectFromSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectFromSingleView self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectFromSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectFromSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectFromSingleView self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectFromSingleView self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectFromSingleView self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectFromSingleView self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectFromSingleView self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectFromSingleView self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectFromSingleView self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectFromSingleView self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectFromSingleView self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectFromSingleView_swigregister = _IGESSelect.Handle_IGESSelect_SelectFromSingleView_swigregister
Handle_IGESSelect_SelectFromSingleView_swigregister(Handle_IGESSelect_SelectFromSingleView)

def Handle_IGESSelect_SelectFromSingleView_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectFromSingleView_DownCast(thing)
Handle_IGESSelect_SelectFromSingleView_DownCast = _IGESSelect.Handle_IGESSelect_SelectFromSingleView_DownCast

class Handle_IGESSelect_EditHeader(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_EditHeader self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_EditHeader self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_EditHeader self, IGESSelect_EditHeader thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_EditHeader self, Handle_IGESSelect_EditHeader theHandle) -> Handle_IGESSelect_EditHeader
        assign(Handle_IGESSelect_EditHeader self, IGESSelect_EditHeader thePtr) -> Handle_IGESSelect_EditHeader
        assign(Handle_IGESSelect_EditHeader self, Handle_IGESSelect_EditHeader theHandle) -> Handle_IGESSelect_EditHeader

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_EditHeader self) -> IGESSelect_EditHeader

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_EditHeader self) -> IGESSelect_EditHeader

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_EditHeader self) -> IGESSelect_EditHeader

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_EditHeader___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_EditHeader___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_EditHeader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_EditHeader_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_EditHeader

    def Label(self, *args):
        """
        Label(Handle_IGESSelect_EditHeader self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(Handle_IGESSelect_EditHeader self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(Handle_IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_StringValue(self, *args)


    def Load(self, *args):
        """
        Load(Handle_IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Load(self, *args)


    def Update(self, *args):
        """
        Update(Handle_IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TCollection_HAsciiString newval, Standard_Boolean const enforce) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newval: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Update(self, *args)


    def Apply(self, *args):
        """
        Apply(Handle_IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Apply(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_EditHeader self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_EditHeader_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_EditHeader_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_IGESSelect_EditHeader self, Standard_Integer const num, Handle_Interface_TypedValue typval, Standard_CString const shortname, IFSelect_EditValue const accessmode=IFSelect_Editable)

        Sets a Typed Value for a given ident and short name, with an
        Edit Mode

        :type num: int
        :type typval: OCC.wrapper.Interface.Handle_Interface_TypedValue
        :type shortname: OCC.wrapper.Standard.Standard_CString
        :type accessmode: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_SetValue(self, *args)


    def SetList(self, *args):
        """
        SetList(Handle_IGESSelect_EditHeader self, Standard_Integer const num, Standard_Integer const max=0)

        Sets a parameter to be a List
        max < 0 : not for a list (set when starting)
        max = 0 : list with no length limit (default for SetList)
        max > 0 : list limited to <max> items

        :type num: int
        :type max: int

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_SetList(self, *args)


    def NbValues(self, *args):
        """
        NbValues(Handle_IGESSelect_EditHeader self) -> Standard_Integer

        Returns the count of Typed Values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_NbValues(self, *args)


    def TypedValue(self, *args):
        """
        TypedValue(Handle_IGESSelect_EditHeader self, Standard_Integer const num) -> Handle_Interface_TypedValue

        Returns a Typed Value from its ident

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_TypedValue

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_TypedValue(self, *args)


    def IsList(self, *args):
        """
        IsList(Handle_IGESSelect_EditHeader self, Standard_Integer const num) -> Standard_Boolean

        Tells if a parameter is a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_IsList(self, *args)


    def MaxList(self, *args):
        """
        MaxList(Handle_IGESSelect_EditHeader self, Standard_Integer const num) -> Standard_Integer

        Returns max length allowed for a list
        = 0 means : list with no limit
        < 0 means : not a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_MaxList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_EditHeader self, Standard_Integer const num, Standard_Boolean const isshort) -> Standard_CString

        Returns the name of a Value (complete or short) from its ident
        Short Name can be empty

        :type num: int
        :type isshort: bool
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Name(self, *args)


    def EditMode(self, *args):
        """
        EditMode(Handle_IGESSelect_EditHeader self, Standard_Integer const num) -> IFSelect_EditValue

        Returns the edit mode of a Value

        :type num: int
        :rtype: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_EditMode(self, *args)


    def NameNumber(self, *args):
        """
        NameNumber(Handle_IGESSelect_EditHeader self, Standard_CString const name) -> Standard_Integer

        Returns the number (ident) of a Value, from its name, short or
        complete. If not found, returns 0

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_NameNumber(self, *args)


    def PrintNames(self, *args):
        """
        PrintNames(Handle_IGESSelect_EditHeader self, Handle_Message_Messenger S)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_PrintNames(self, *args)


    def PrintDefs(self, *args):
        """
        PrintDefs(Handle_IGESSelect_EditHeader self, Handle_Message_Messenger S, Standard_Boolean const labels)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type labels: bool

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_PrintDefs(self, *args)


    def MaxNameLength(self, *args):
        """
        MaxNameLength(Handle_IGESSelect_EditHeader self, Standard_Integer const what) -> Standard_Integer

        Returns the MaxLength of, according to what :
        <what> = -1 : length of short names
        <what> =  0 : length of complete names
        <what> =  1 : length of values labels

        :type what: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_MaxNameLength(self, *args)


    def Form(self, *args):
        """
        Form(Handle_IGESSelect_EditHeader self, Standard_Boolean const readonly, Standard_Boolean const undoable) -> Handle_IFSelect_EditForm

        Builds and Returns an EditForm, empty (no data yet)
        Can be redefined to return a specific type of EditForm

        :type readonly: bool
        :type undoable: bool
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Form(self, *args)


    def ListEditor(self, *args):
        """
        ListEditor(Handle_IGESSelect_EditHeader self, Standard_Integer const num) -> Handle_IFSelect_ListEditor

        Returns a ListEditor for a parameter which is a List
        Default returns a basic ListEditor for a List, a Null Handle
        if <num> is not for a List. Can be redefined

        :type num: int
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_ListEditor

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_ListEditor(self, *args)


    def ListValue(self, *args):
        """
        ListValue(Handle_IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the value of an EditForm as a List, for a given item
        If not a list, a Null Handle should be returned
        Default returns a Null Handle, because many Editors have
        no list to edit. To be redefined as required

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_ListValue(self, *args)


    def UpdateList(self, *args):
        """
        UpdateList(Handle_IGESSelect_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TColStd_HSequenceOfHAsciiString newlist, Standard_Boolean const enforce) -> Standard_Boolean

        Acts as Update, but when the value is a list

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newlist: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_UpdateList(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_EditHeader self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_EditHeader self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_EditHeader self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_EditHeader self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_EditHeader self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_EditHeader self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_EditHeader self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_EditHeader self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_EditHeader self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditHeader_DecrementRefCounter(self, *args)

Handle_IGESSelect_EditHeader_swigregister = _IGESSelect.Handle_IGESSelect_EditHeader_swigregister
Handle_IGESSelect_EditHeader_swigregister(Handle_IGESSelect_EditHeader)

def Handle_IGESSelect_EditHeader_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_EditHeader_DownCast(thing)
Handle_IGESSelect_EditHeader_DownCast = _IGESSelect.Handle_IGESSelect_EditHeader_DownCast

class IGESSelect_RebuildDrawings(IGESSelect_ModelModifier):
    """
    Rebuilds Drawings which were bypassed to produce new models.
    If a set of entities, all put into a same IGESModel, were
    attached to a same Drawing in the starting Model, this Modifier
    rebuilds the original Drawing, but only with the transferred
    entities. This includes that all its views are kept too, but
    empty; and annotations are not kept. Drawing Name is renewed.

    If the Input Selection is present, tries to rebuild Drawings
    only for the selected entities. Else, tries to rebuild
    Drawings for all the transferred entities.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_RebuildDrawings
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_RebuildDrawings(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_RebuildDrawings self) -> IGESSelect_RebuildDrawings

        Creates an RebuildDrawings, which uses the system Date


        """
        this = _IGESSelect.new_IGESSelect_RebuildDrawings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_RebuildDrawings self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Rebuilds the original Drawings

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_RebuildDrawings_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_RebuildDrawings self) -> TCollection_AsciiString

        Returns a text which is
        "Rebuild Drawings"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_RebuildDrawings_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_RebuildDrawings_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_RebuildDrawings_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_RebuildDrawings_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_RebuildDrawings
IGESSelect_RebuildDrawings_swigregister = _IGESSelect.IGESSelect_RebuildDrawings_swigregister
IGESSelect_RebuildDrawings_swigregister(IGESSelect_RebuildDrawings)

def IGESSelect_RebuildDrawings_get_type_name(*args):
    """
    IGESSelect_RebuildDrawings_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_RebuildDrawings_get_type_name(*args)

def IGESSelect_RebuildDrawings_get_type_descriptor(*args):
    """
    IGESSelect_RebuildDrawings_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_RebuildDrawings_get_type_descriptor(*args)

class IGESSelect_FloatFormat(IGESSelect_FileModifier):
    """
    This class gives control out format for floatting values :
    ZeroSuppress or no, Main Format, Format in Range (for values
    around 1.), as IGESWriter allows to manage it.
    Formats are given under C-printf form
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_FloatFormat
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_FloatFormat(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_FloatFormat self) -> IGESSelect_FloatFormat

        Creates a new FloatFormat, with standard options :
        ZeroSuppress, Main Format = %E,
        Format between 0.001 and 1000. = %f


        """
        this = _IGESSelect.new_IGESSelect_FloatFormat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetDefault(self, *args):
        """
        SetDefault(IGESSelect_FloatFormat self, Standard_Integer const digits=0)

        Sets FloatFormat to default value (see Create) but if <digits>
        is given positive, it commands Formats (main and range) to
        ensure <digits> significant digits to be displayed

        :type digits: int

        """
        return _IGESSelect.IGESSelect_FloatFormat_SetDefault(self, *args)


    def SetZeroSuppress(self, *args):
        """
        SetZeroSuppress(IGESSelect_FloatFormat self, Standard_Boolean const mode)

        Sets ZeroSuppress mode to a new value

        :type mode: bool

        """
        return _IGESSelect.IGESSelect_FloatFormat_SetZeroSuppress(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(IGESSelect_FloatFormat self, Standard_CString const format)

        Sets Main Format to a new value
        Remark : SetFormat, SetZeroSuppress and SetFormatForRange are
        independant

        :type format: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_FloatFormat_SetFormat(self, *args)


    def SetFormatForRange(self, *args):
        """
        SetFormatForRange(IGESSelect_FloatFormat self, Standard_CString const format, Standard_Real const Rmin=0.1, Standard_Real const Rmax=1000.0)

        Sets Format for Range to a new value with its range of
        application.
        To cancel it, give format as "" (empty string)
        Remark that if the condition (0. < Rmin < Rmax)  is not
        verified, this secondary format will be ignored.
        Moreover, this secondary format is intended to be used in a
        range around 1.

        :type format: OCC.wrapper.Standard.Standard_CString
        :type Rmin: float
        :type Rmax: float

        """
        return _IGESSelect.IGESSelect_FloatFormat_SetFormatForRange(self, *args)


    def Format(self, *args):
        """
        Format(IGESSelect_FloatFormat self, TCollection_AsciiString mainform, TCollection_AsciiString forminrange)

        Returns all recorded parameters :
        zerosup  : ZeroSuppress status
        mainform : Main Format (which applies out of the range, or
        for every real if no range is set)
        hasrange : True if a FormatInRange is set, False else
        (following parameters do not apply if it is False)
        forminrange : Secondary Format (it applies inside the range)
        rangemin, rangemax : the range in which the secondary format
        applies

        :type zerosup: bool
        :type mainform: OCC.wrapper.TCollection.TCollection_AsciiString
        :type hasrange: bool
        :type forminrange: OCC.wrapper.TCollection.TCollection_AsciiString
        :type rangemin: float
        :type rangemax: float

        """
        return _IGESSelect.IGESSelect_FloatFormat_Format(self, *args)


    def Perform(self, *args):
        """
        Perform(IGESSelect_FloatFormat self, IFSelect_ContextWrite ctx, IGESData_IGESWriter writer)

        Sets the Floatting Formats of IGESWriter to the recorded
        parameters

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextWrite
        :type writer: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSelect.IGESSelect_FloatFormat_Perform(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_FloatFormat self) -> TCollection_AsciiString

        Returns specific Label : for instance,
        "Float Format [ZeroSuppress] %E [, in range R1-R2 %f]"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_FloatFormat_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_FloatFormat_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_FloatFormat_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_FloatFormat_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_FloatFormat
IGESSelect_FloatFormat_swigregister = _IGESSelect.IGESSelect_FloatFormat_swigregister
IGESSelect_FloatFormat_swigregister(IGESSelect_FloatFormat)

def IGESSelect_FloatFormat_get_type_name(*args):
    """
    IGESSelect_FloatFormat_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_FloatFormat_get_type_name(*args)

def IGESSelect_FloatFormat_get_type_descriptor(*args):
    """
    IGESSelect_FloatFormat_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_FloatFormat_get_type_descriptor(*args)

class Handle_IGESSelect_SetLabel(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SetLabel self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SetLabel self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SetLabel self, IGESSelect_SetLabel thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SetLabel self, Handle_IGESSelect_SetLabel theHandle) -> Handle_IGESSelect_SetLabel
        assign(Handle_IGESSelect_SetLabel self, IGESSelect_SetLabel thePtr) -> Handle_IGESSelect_SetLabel
        assign(Handle_IGESSelect_SetLabel self, Handle_IGESSelect_SetLabel theHandle) -> Handle_IGESSelect_SetLabel

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SetLabel self) -> IGESSelect_SetLabel

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SetLabel self) -> IGESSelect_SetLabel

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SetLabel self) -> IGESSelect_SetLabel

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SetLabel___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SetLabel___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SetLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SetLabel_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SetLabel

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_SetLabel self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Sets or Clears the Label

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SetLabel self) -> TCollection_AsciiString

        Returns a text which is
        "Clear Short Label"  or  "Set Label to DE"
        With possible additional information " (enforced)"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SetLabel self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SetLabel_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SetLabel_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_SetLabel self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_SetLabel self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_SetLabel self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_SetLabel self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_SetLabel self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_SetLabel self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_SetLabel self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_SetLabel self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_SetLabel self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_SetLabel self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SetLabel self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SetLabel self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SetLabel self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SetLabel self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SetLabel self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SetLabel self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SetLabel self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SetLabel self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SetLabel self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SetLabel_DecrementRefCounter(self, *args)

Handle_IGESSelect_SetLabel_swigregister = _IGESSelect.Handle_IGESSelect_SetLabel_swigregister
Handle_IGESSelect_SetLabel_swigregister(Handle_IGESSelect_SetLabel)

def Handle_IGESSelect_SetLabel_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SetLabel_DownCast(thing)
Handle_IGESSelect_SetLabel_DownCast = _IGESSelect.Handle_IGESSelect_SetLabel_DownCast

class Handle_IGESSelect_SelectPCurves(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectPCurves self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectPCurves self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectPCurves self, IGESSelect_SelectPCurves thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectPCurves self, Handle_IGESSelect_SelectPCurves theHandle) -> Handle_IGESSelect_SelectPCurves
        assign(Handle_IGESSelect_SelectPCurves self, IGESSelect_SelectPCurves thePtr) -> Handle_IGESSelect_SelectPCurves
        assign(Handle_IGESSelect_SelectPCurves self, Handle_IGESSelect_SelectPCurves theHandle) -> Handle_IGESSelect_SelectPCurves

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectPCurves self) -> IGESSelect_SelectPCurves

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectPCurves self) -> IGESSelect_SelectPCurves

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectPCurves self) -> IGESSelect_SelectPCurves

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectPCurves___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectPCurves___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectPCurves(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectPCurves_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectPCurves

    def Explore(self, *args):
        """
        Explore(Handle_IGESSelect_SelectPCurves self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity, to take its contained PCurves
        An independant curve is IGNORED : only faces are explored

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(Handle_IGESSelect_SelectPCurves self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Basic PCurves" or
        "Global PCurves"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_ExploreLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectPCurves self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectPCurves_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectPCurves_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Level(self, *args):
        """
        Level(Handle_IGESSelect_SelectPCurves self) -> Standard_Integer

        Returns the required exploring level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_Level(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectPCurves self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Explore on each input entity : it can be rejected,
        taken for output, or to explore. If the maximum level has not
        yet been attained, or if no max level is specified, entities
        to be explored are themselves used as if they were input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectPCurves self) -> TCollection_AsciiString

        Returns a text saying "(Recursive)" or "(Level nn)" plus
        specific criterium returned by ExploreLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectPCurves self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectPCurves self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectPCurves self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectPCurves self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectPCurves self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectPCurves self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectPCurves self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectPCurves self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectPCurves self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectPCurves self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectPCurves self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectPCurves self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectPCurves self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectPCurves self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectPCurves self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectPCurves self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectPCurves self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectPCurves self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectPCurves_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectPCurves_swigregister = _IGESSelect.Handle_IGESSelect_SelectPCurves_swigregister
Handle_IGESSelect_SelectPCurves_swigregister(Handle_IGESSelect_SelectPCurves)

def Handle_IGESSelect_SelectPCurves_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectPCurves_DownCast(thing)
Handle_IGESSelect_SelectPCurves_DownCast = _IGESSelect.Handle_IGESSelect_SelectPCurves_DownCast

class IGESSelect_RebuildGroups(IGESSelect_ModelModifier):
    """
    Rebuilds Groups which were bypassed to produce new models.
    If a set of entities, all put into a same IGESModel, were
    part of a same Group in the starting Model, this Modifier
    rebuilds the original group, but only with the transferred
    entities. The distinctions (Ordered or not, "WhithoutBackP"
    or not) are renewed, also the name of the group.

    If the Input Selection is present, tries to rebuild groups
    only for the selected entities. Else, tries to rebuild
    groups for all the transferred entities.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_RebuildGroups
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_RebuildGroups(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_RebuildGroups self) -> IGESSelect_RebuildGroups

        Creates an RebuildGroups, which uses the system Date


        """
        this = _IGESSelect.new_IGESSelect_RebuildGroups(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_RebuildGroups self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Rebuilds the original groups

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_RebuildGroups_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_RebuildGroups self) -> TCollection_AsciiString

        Returns a text which is
        "Rebuild Groups"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_RebuildGroups_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_RebuildGroups_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_RebuildGroups_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_RebuildGroups_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_RebuildGroups
IGESSelect_RebuildGroups_swigregister = _IGESSelect.IGESSelect_RebuildGroups_swigregister
IGESSelect_RebuildGroups_swigregister(IGESSelect_RebuildGroups)

def IGESSelect_RebuildGroups_get_type_name(*args):
    """
    IGESSelect_RebuildGroups_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_RebuildGroups_get_type_name(*args)

def IGESSelect_RebuildGroups_get_type_descriptor(*args):
    """
    IGESSelect_RebuildGroups_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_RebuildGroups_get_type_descriptor(*args)

class Handle_IGESSelect_SignColor(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SignColor self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SignColor_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SignColor self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SignColor self, IGESSelect_SignColor thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SignColor self, Handle_IGESSelect_SignColor theHandle) -> Handle_IGESSelect_SignColor
        assign(Handle_IGESSelect_SignColor self, IGESSelect_SignColor thePtr) -> Handle_IGESSelect_SignColor
        assign(Handle_IGESSelect_SignColor self, Handle_IGESSelect_SignColor theHandle) -> Handle_IGESSelect_SignColor

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SignColor self) -> IGESSelect_SignColor

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SignColor self) -> IGESSelect_SignColor

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignColor___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SignColor self) -> IGESSelect_SignColor

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SignColor___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SignColor___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SignColor___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SignColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SignColor_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SignColor

    def Value(self, *args):
        """
        Value(Handle_IGESSelect_SignColor self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the value (see above)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SignColor self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SignColor_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SignColor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetIntCase(self, *args):
        """
        SetIntCase(Handle_IGESSelect_SignColor self, Standard_Boolean const hasmin, Standard_Integer const valmin, Standard_Boolean const hasmax, Standard_Integer const valmax)

        Sets the information data to tell "integer cases" with
        possible min and max values
        To be called when creating

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_SetIntCase(self, *args)


    def IsIntCase(self, *args):
        """
        IsIntCase(Handle_IGESSelect_SignColor self) -> Standard_Boolean

        Tells if this Signature gives integer values
        and returns values from SetIntCase if True

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_IsIntCase(self, *args)


    def AddCase(self, *args):
        """
        AddCase(Handle_IGESSelect_SignColor self, Standard_CString const acase)

        Adds a possible case
        To be called when creating, IF the list of possible cases for
        Value is known when starting
        For instance, for CDL types, rather do not fill this,
        but for a specific enumeration (such as a status), can be used

        :type acase: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_AddCase(self, *args)


    def CaseList(self, *args):
        """
        CaseList(Handle_IGESSelect_SignColor self) -> Handle_TColStd_HSequenceOfAsciiString

        Returns the predefined list of possible cases, filled by AddCase
        Null Handle if no predefined list (hence, to be counted)
        Useful to filter on  really possible vase, for instance, or
        for a help

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_CaseList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_SignColor self) -> Standard_CString

        Returns an identification of the Signature (a word), given at
        initialization time
        Returns the Signature for a Transient object. It is specific
        of each sub-class of Signature. For a Null Handle, it should
        provide ""
        It can work with the model which contains the entity

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_Name(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SignColor self) -> TCollection_AsciiString

        The label of a Signature uses its name as follow :
        "Signature : <name>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_Label(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_IGESSelect_SignColor self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Tells if the value for <ent> in <model> matches a text, with
        a criterium <exact>.
        The default definition calls MatchValue
        Can be redefined

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_Matches(self, *args)


    def MatchValue(self, *args):
        """
        MatchValue(Handle_IGESSelect_SignColor self, Standard_CString const val, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Default procedure to tell if a value <val> matches a text
        with a criterium <exact>. <exact> = True requires equality,
        else only contained (no reg-exp)

        :type val: OCC.wrapper.Standard.Standard_CString
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_MatchValue(self, *args)


    def IntValue(self, *args):
        """
        IntValue(Handle_IGESSelect_SignColor self, Standard_Integer const val) -> Standard_CString

        This procedure converts an Integer to a CString
        It is a convenient way when the value of a signature has the
        form of a simple integer value
        The value is to be used immediately (one buffer only, no copy)

        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_IntValue(self, *args)


    def Text(self, *args):
        """
        Text(Handle_IGESSelect_SignColor self, Handle_Standard_Transient ent, Handle_Standard_Transient context) -> TCollection_AsciiString

        Returns an identification of the Signature (a word), given at
        initialization time
        Specialised to consider context as an InterfaceModel

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type context: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_Text(self, *args)


    def ClassName(self, *args):
        """
        ClassName(Handle_IGESSelect_SignColor self, Standard_CString const typnam) -> Standard_CString

        From a CDL Type Name, returns the Class part (package dropped)
        WARNING : buffered, to be immediately copied or printed

        :type typnam: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_ClassName(self, *args)


    def TextAlone(self, *args):
        """
        TextAlone(Handle_IGESSelect_SignColor self, Handle_Standard_Transient ent) -> TCollection_AsciiString

        Gives a text as a signature for a transient object alone, i.e.
        without defined context.
        By default, calls Text with undefined context (Null Handle) and
        if empty, then returns DynamicType

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_TextAlone(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SignColor self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SignColor_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SignColor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SignColor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SignColor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SignColor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SignColor self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SignColor self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SignColor self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SignColor_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SignColor self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SignColor_DecrementRefCounter(self, *args)

Handle_IGESSelect_SignColor_swigregister = _IGESSelect.Handle_IGESSelect_SignColor_swigregister
Handle_IGESSelect_SignColor_swigregister(Handle_IGESSelect_SignColor)

def Handle_IGESSelect_SignColor_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SignColor_DownCast(thing)
Handle_IGESSelect_SignColor_DownCast = _IGESSelect.Handle_IGESSelect_SignColor_DownCast

class IGESSelect_UpdateCreationDate(IGESSelect_ModelModifier):
    """
    Allows to Change the Creation Date indication in the Header
    (Global Section) of IGES File. It is taken from the operating
    system (time of application of the Modifier).
    The Selection of the Modifier is not used : it simply acts as
    a criterium to select IGES Files to touch up
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_UpdateCreationDate
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_UpdateCreationDate(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_UpdateCreationDate self) -> IGESSelect_UpdateCreationDate

        Creates an UpdateCreationDate, which uses the system Date


        """
        this = _IGESSelect.new_IGESSelect_UpdateCreationDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_UpdateCreationDate self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : the system Date
        is set to Global Section Item n0 18.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_UpdateCreationDate_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_UpdateCreationDate self) -> TCollection_AsciiString

        Returns a text which is
        "Update IGES Header Creation Date"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_UpdateCreationDate_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_UpdateCreationDate_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_UpdateCreationDate_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_UpdateCreationDate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_UpdateCreationDate
IGESSelect_UpdateCreationDate_swigregister = _IGESSelect.IGESSelect_UpdateCreationDate_swigregister
IGESSelect_UpdateCreationDate_swigregister(IGESSelect_UpdateCreationDate)

def IGESSelect_UpdateCreationDate_get_type_name(*args):
    """
    IGESSelect_UpdateCreationDate_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_UpdateCreationDate_get_type_name(*args)

def IGESSelect_UpdateCreationDate_get_type_descriptor(*args):
    """
    IGESSelect_UpdateCreationDate_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_UpdateCreationDate_get_type_descriptor(*args)

class Handle_IGESSelect_SignStatus(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SignStatus self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SignStatus self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SignStatus self, IGESSelect_SignStatus thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SignStatus self, Handle_IGESSelect_SignStatus theHandle) -> Handle_IGESSelect_SignStatus
        assign(Handle_IGESSelect_SignStatus self, IGESSelect_SignStatus thePtr) -> Handle_IGESSelect_SignStatus
        assign(Handle_IGESSelect_SignStatus self, Handle_IGESSelect_SignStatus theHandle) -> Handle_IGESSelect_SignStatus

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SignStatus self) -> IGESSelect_SignStatus

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SignStatus self) -> IGESSelect_SignStatus

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SignStatus self) -> IGESSelect_SignStatus

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SignStatus___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SignStatus___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SignStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SignStatus_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SignStatus

    def Value(self, *args):
        """
        Value(Handle_IGESSelect_SignStatus self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the value (see above)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_Value(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_IGESSelect_SignStatus self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Performs the match rule (see above)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_Matches(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SignStatus self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SignStatus_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SignStatus_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetIntCase(self, *args):
        """
        SetIntCase(Handle_IGESSelect_SignStatus self, Standard_Boolean const hasmin, Standard_Integer const valmin, Standard_Boolean const hasmax, Standard_Integer const valmax)

        Sets the information data to tell "integer cases" with
        possible min and max values
        To be called when creating

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_SetIntCase(self, *args)


    def IsIntCase(self, *args):
        """
        IsIntCase(Handle_IGESSelect_SignStatus self) -> Standard_Boolean

        Tells if this Signature gives integer values
        and returns values from SetIntCase if True

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_IsIntCase(self, *args)


    def AddCase(self, *args):
        """
        AddCase(Handle_IGESSelect_SignStatus self, Standard_CString const acase)

        Adds a possible case
        To be called when creating, IF the list of possible cases for
        Value is known when starting
        For instance, for CDL types, rather do not fill this,
        but for a specific enumeration (such as a status), can be used

        :type acase: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_AddCase(self, *args)


    def CaseList(self, *args):
        """
        CaseList(Handle_IGESSelect_SignStatus self) -> Handle_TColStd_HSequenceOfAsciiString

        Returns the predefined list of possible cases, filled by AddCase
        Null Handle if no predefined list (hence, to be counted)
        Useful to filter on  really possible vase, for instance, or
        for a help

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_CaseList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_SignStatus self) -> Standard_CString

        Returns an identification of the Signature (a word), given at
        initialization time
        Returns the Signature for a Transient object. It is specific
        of each sub-class of Signature. For a Null Handle, it should
        provide ""
        It can work with the model which contains the entity

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_Name(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SignStatus self) -> TCollection_AsciiString

        The label of a Signature uses its name as follow :
        "Signature : <name>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_Label(self, *args)


    def MatchValue(self, *args):
        """
        MatchValue(Handle_IGESSelect_SignStatus self, Standard_CString const val, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Default procedure to tell if a value <val> matches a text
        with a criterium <exact>. <exact> = True requires equality,
        else only contained (no reg-exp)

        :type val: OCC.wrapper.Standard.Standard_CString
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_MatchValue(self, *args)


    def IntValue(self, *args):
        """
        IntValue(Handle_IGESSelect_SignStatus self, Standard_Integer const val) -> Standard_CString

        This procedure converts an Integer to a CString
        It is a convenient way when the value of a signature has the
        form of a simple integer value
        The value is to be used immediately (one buffer only, no copy)

        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_IntValue(self, *args)


    def Text(self, *args):
        """
        Text(Handle_IGESSelect_SignStatus self, Handle_Standard_Transient ent, Handle_Standard_Transient context) -> TCollection_AsciiString

        Returns an identification of the Signature (a word), given at
        initialization time
        Specialised to consider context as an InterfaceModel

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type context: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_Text(self, *args)


    def ClassName(self, *args):
        """
        ClassName(Handle_IGESSelect_SignStatus self, Standard_CString const typnam) -> Standard_CString

        From a CDL Type Name, returns the Class part (package dropped)
        WARNING : buffered, to be immediately copied or printed

        :type typnam: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_ClassName(self, *args)


    def TextAlone(self, *args):
        """
        TextAlone(Handle_IGESSelect_SignStatus self, Handle_Standard_Transient ent) -> TCollection_AsciiString

        Gives a text as a signature for a transient object alone, i.e.
        without defined context.
        By default, calls Text with undefined context (Null Handle) and
        if empty, then returns DynamicType

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_TextAlone(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SignStatus self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SignStatus self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SignStatus self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SignStatus self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SignStatus self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SignStatus self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SignStatus self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SignStatus self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SignStatus self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SignStatus_DecrementRefCounter(self, *args)

Handle_IGESSelect_SignStatus_swigregister = _IGESSelect.Handle_IGESSelect_SignStatus_swigregister
Handle_IGESSelect_SignStatus_swigregister(Handle_IGESSelect_SignStatus)

def Handle_IGESSelect_SignStatus_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SignStatus_DownCast(thing)
Handle_IGESSelect_SignStatus_DownCast = _IGESSelect.Handle_IGESSelect_SignStatus_DownCast

class Handle_IGESSelect_AutoCorrect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_AutoCorrect self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_AutoCorrect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_AutoCorrect self, IGESSelect_AutoCorrect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_AutoCorrect self, Handle_IGESSelect_AutoCorrect theHandle) -> Handle_IGESSelect_AutoCorrect
        assign(Handle_IGESSelect_AutoCorrect self, IGESSelect_AutoCorrect thePtr) -> Handle_IGESSelect_AutoCorrect
        assign(Handle_IGESSelect_AutoCorrect self, Handle_IGESSelect_AutoCorrect theHandle) -> Handle_IGESSelect_AutoCorrect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_AutoCorrect self) -> IGESSelect_AutoCorrect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_AutoCorrect self) -> IGESSelect_AutoCorrect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_AutoCorrect self) -> IGESSelect_AutoCorrect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_AutoCorrect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_AutoCorrect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_AutoCorrect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_AutoCorrect_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_AutoCorrect

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_AutoCorrect self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : corrects entities when it is absolutely
        obvious, i.e. non equivoque (by DirChecker and specific
        service OwnCorrect) : works with a protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_AutoCorrect self) -> TCollection_AsciiString

        Returns a text which is
        "Auto-correction of IGES Entities"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_AutoCorrect self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_AutoCorrect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_AutoCorrect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_AutoCorrect self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_AutoCorrect self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_AutoCorrect self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_AutoCorrect self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_AutoCorrect self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_AutoCorrect self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_AutoCorrect self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_AutoCorrect self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_AutoCorrect self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_AutoCorrect self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_AutoCorrect self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_AutoCorrect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_AutoCorrect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_AutoCorrect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_AutoCorrect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_AutoCorrect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_AutoCorrect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_AutoCorrect self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_AutoCorrect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_AutoCorrect_DecrementRefCounter(self, *args)

Handle_IGESSelect_AutoCorrect_swigregister = _IGESSelect.Handle_IGESSelect_AutoCorrect_swigregister
Handle_IGESSelect_AutoCorrect_swigregister(Handle_IGESSelect_AutoCorrect)

def Handle_IGESSelect_AutoCorrect_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_AutoCorrect_DownCast(thing)
Handle_IGESSelect_AutoCorrect_DownCast = _IGESSelect.Handle_IGESSelect_AutoCorrect_DownCast

class Handle_IGESSelect_SelectSingleViewFrom(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectSingleViewFrom self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectSingleViewFrom self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectSingleViewFrom self, IGESSelect_SelectSingleViewFrom thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectSingleViewFrom self, Handle_IGESSelect_SelectSingleViewFrom theHandle) -> Handle_IGESSelect_SelectSingleViewFrom
        assign(Handle_IGESSelect_SelectSingleViewFrom self, IGESSelect_SelectSingleViewFrom thePtr) -> Handle_IGESSelect_SelectSingleViewFrom
        assign(Handle_IGESSelect_SelectSingleViewFrom self, Handle_IGESSelect_SelectSingleViewFrom theHandle) -> Handle_IGESSelect_SelectSingleViewFrom

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectSingleViewFrom self) -> IGESSelect_SelectSingleViewFrom

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectSingleViewFrom self) -> IGESSelect_SelectSingleViewFrom

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectSingleViewFrom self) -> IGESSelect_SelectSingleViewFrom

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectSingleViewFrom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectSingleViewFrom

    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectSingleViewFrom self, Interface_Graph G) -> Interface_EntityIterator

        Selects the Single Views attached (in Directory Part) to
        input entities

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectSingleViewFrom self) -> TCollection_AsciiString

        Returns the label, with is "Single Views attached"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectSingleViewFrom self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectSingleViewFrom self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectSingleViewFrom self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectSingleViewFrom self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectSingleViewFrom self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectSingleViewFrom self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectSingleViewFrom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectSingleViewFrom self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectSingleViewFrom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectSingleViewFrom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectSingleViewFrom self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectSingleViewFrom self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectSingleViewFrom self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectSingleViewFrom self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectSingleViewFrom self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectSingleViewFrom self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectSingleViewFrom self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectSingleViewFrom self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectSingleViewFrom self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectSingleViewFrom_swigregister = _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_swigregister
Handle_IGESSelect_SelectSingleViewFrom_swigregister(Handle_IGESSelect_SelectSingleViewFrom)

def Handle_IGESSelect_SelectSingleViewFrom_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_DownCast(thing)
Handle_IGESSelect_SelectSingleViewFrom_DownCast = _IGESSelect.Handle_IGESSelect_SelectSingleViewFrom_DownCast

class IGESSelect_SelectVisibleStatus(IFSelect.IFSelect_SelectExtract):
    """
    This selection looks at Blank Status of IGES Entities
    Direct  selection keeps Visible Entities (Blank = 0),
    Reverse selection keeps Blanked Entities (Blank = 1)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectVisibleStatus
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectVisibleStatus(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectVisibleStatus self) -> IGESSelect_SelectVisibleStatus

        Creates a SelectVisibleStatus


        """
        this = _IGESSelect.new_IGESSelect_SelectVisibleStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sort(self, *args):
        """
        Sort(IGESSelect_SelectVisibleStatus self, Standard_Integer const rank, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <ent> is an IGES Entity with Blank Status = 0

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectVisibleStatus_Sort(self, *args)


    def ExtractLabel(self, *args):
        """
        ExtractLabel(IGESSelect_SelectVisibleStatus self) -> TCollection_AsciiString

        Returns the Selection criterium : "IGES Entity, Status Visible"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectVisibleStatus_ExtractLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectVisibleStatus_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectVisibleStatus_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectVisibleStatus_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectVisibleStatus
IGESSelect_SelectVisibleStatus_swigregister = _IGESSelect.IGESSelect_SelectVisibleStatus_swigregister
IGESSelect_SelectVisibleStatus_swigregister(IGESSelect_SelectVisibleStatus)

def IGESSelect_SelectVisibleStatus_get_type_name(*args):
    """
    IGESSelect_SelectVisibleStatus_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectVisibleStatus_get_type_name(*args)

def IGESSelect_SelectVisibleStatus_get_type_descriptor(*args):
    """
    IGESSelect_SelectVisibleStatus_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectVisibleStatus_get_type_descriptor(*args)

class Handle_IGESSelect_EditDirPart(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_EditDirPart self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_EditDirPart self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_EditDirPart self, IGESSelect_EditDirPart thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_EditDirPart self, Handle_IGESSelect_EditDirPart theHandle) -> Handle_IGESSelect_EditDirPart
        assign(Handle_IGESSelect_EditDirPart self, IGESSelect_EditDirPart thePtr) -> Handle_IGESSelect_EditDirPart
        assign(Handle_IGESSelect_EditDirPart self, Handle_IGESSelect_EditDirPart theHandle) -> Handle_IGESSelect_EditDirPart

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_EditDirPart self) -> IGESSelect_EditDirPart

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_EditDirPart self) -> IGESSelect_EditDirPart

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_EditDirPart self) -> IGESSelect_EditDirPart

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_EditDirPart___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_EditDirPart___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_EditDirPart(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_EditDirPart_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_EditDirPart

    def Label(self, *args):
        """
        Label(Handle_IGESSelect_EditDirPart self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(Handle_IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(Handle_IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_StringValue(self, *args)


    def Load(self, *args):
        """
        Load(Handle_IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Load(self, *args)


    def Update(self, *args):
        """
        Update(Handle_IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TCollection_HAsciiString newval, Standard_Boolean const enforce) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newval: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Update(self, *args)


    def Apply(self, *args):
        """
        Apply(Handle_IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Apply(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_EditDirPart self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_EditDirPart_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_EditDirPart_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_IGESSelect_EditDirPart self, Standard_Integer const num, Handle_Interface_TypedValue typval, Standard_CString const shortname, IFSelect_EditValue const accessmode=IFSelect_Editable)

        Sets a Typed Value for a given ident and short name, with an
        Edit Mode

        :type num: int
        :type typval: OCC.wrapper.Interface.Handle_Interface_TypedValue
        :type shortname: OCC.wrapper.Standard.Standard_CString
        :type accessmode: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_SetValue(self, *args)


    def SetList(self, *args):
        """
        SetList(Handle_IGESSelect_EditDirPart self, Standard_Integer const num, Standard_Integer const max=0)

        Sets a parameter to be a List
        max < 0 : not for a list (set when starting)
        max = 0 : list with no length limit (default for SetList)
        max > 0 : list limited to <max> items

        :type num: int
        :type max: int

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_SetList(self, *args)


    def NbValues(self, *args):
        """
        NbValues(Handle_IGESSelect_EditDirPart self) -> Standard_Integer

        Returns the count of Typed Values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_NbValues(self, *args)


    def TypedValue(self, *args):
        """
        TypedValue(Handle_IGESSelect_EditDirPart self, Standard_Integer const num) -> Handle_Interface_TypedValue

        Returns a Typed Value from its ident

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_TypedValue

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_TypedValue(self, *args)


    def IsList(self, *args):
        """
        IsList(Handle_IGESSelect_EditDirPart self, Standard_Integer const num) -> Standard_Boolean

        Tells if a parameter is a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_IsList(self, *args)


    def MaxList(self, *args):
        """
        MaxList(Handle_IGESSelect_EditDirPart self, Standard_Integer const num) -> Standard_Integer

        Returns max length allowed for a list
        = 0 means : list with no limit
        < 0 means : not a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_MaxList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_EditDirPart self, Standard_Integer const num, Standard_Boolean const isshort) -> Standard_CString

        Returns the name of a Value (complete or short) from its ident
        Short Name can be empty

        :type num: int
        :type isshort: bool
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Name(self, *args)


    def EditMode(self, *args):
        """
        EditMode(Handle_IGESSelect_EditDirPart self, Standard_Integer const num) -> IFSelect_EditValue

        Returns the edit mode of a Value

        :type num: int
        :rtype: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_EditMode(self, *args)


    def NameNumber(self, *args):
        """
        NameNumber(Handle_IGESSelect_EditDirPart self, Standard_CString const name) -> Standard_Integer

        Returns the number (ident) of a Value, from its name, short or
        complete. If not found, returns 0

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_NameNumber(self, *args)


    def PrintNames(self, *args):
        """
        PrintNames(Handle_IGESSelect_EditDirPart self, Handle_Message_Messenger S)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_PrintNames(self, *args)


    def PrintDefs(self, *args):
        """
        PrintDefs(Handle_IGESSelect_EditDirPart self, Handle_Message_Messenger S, Standard_Boolean const labels)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type labels: bool

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_PrintDefs(self, *args)


    def MaxNameLength(self, *args):
        """
        MaxNameLength(Handle_IGESSelect_EditDirPart self, Standard_Integer const what) -> Standard_Integer

        Returns the MaxLength of, according to what :
        <what> = -1 : length of short names
        <what> =  0 : length of complete names
        <what> =  1 : length of values labels

        :type what: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_MaxNameLength(self, *args)


    def Form(self, *args):
        """
        Form(Handle_IGESSelect_EditDirPart self, Standard_Boolean const readonly, Standard_Boolean const undoable) -> Handle_IFSelect_EditForm

        Builds and Returns an EditForm, empty (no data yet)
        Can be redefined to return a specific type of EditForm

        :type readonly: bool
        :type undoable: bool
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Form(self, *args)


    def ListEditor(self, *args):
        """
        ListEditor(Handle_IGESSelect_EditDirPart self, Standard_Integer const num) -> Handle_IFSelect_ListEditor

        Returns a ListEditor for a parameter which is a List
        Default returns a basic ListEditor for a List, a Null Handle
        if <num> is not for a List. Can be redefined

        :type num: int
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_ListEditor

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_ListEditor(self, *args)


    def ListValue(self, *args):
        """
        ListValue(Handle_IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the value of an EditForm as a List, for a given item
        If not a list, a Null Handle should be returned
        Default returns a Null Handle, because many Editors have
        no list to edit. To be redefined as required

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_ListValue(self, *args)


    def UpdateList(self, *args):
        """
        UpdateList(Handle_IGESSelect_EditDirPart self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TColStd_HSequenceOfHAsciiString newlist, Standard_Boolean const enforce) -> Standard_Boolean

        Acts as Update, but when the value is a list

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newlist: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_UpdateList(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_EditDirPart self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_EditDirPart self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_EditDirPart self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_EditDirPart self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_EditDirPart self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_EditDirPart self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_EditDirPart self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_EditDirPart self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_EditDirPart self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_EditDirPart_DecrementRefCounter(self, *args)

Handle_IGESSelect_EditDirPart_swigregister = _IGESSelect.Handle_IGESSelect_EditDirPart_swigregister
Handle_IGESSelect_EditDirPart_swigregister(Handle_IGESSelect_EditDirPart)

def Handle_IGESSelect_EditDirPart_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_EditDirPart_DownCast(thing)
Handle_IGESSelect_EditDirPart_DownCast = _IGESSelect.Handle_IGESSelect_EditDirPart_DownCast

class IGESSelect_AddGroup(IGESSelect_ModelModifier):
    """
    Adds a Group to contain the entities designated by the
    Selection. If no Selection is given, nothing is done
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_AddGroup
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_AddGroup(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_AddGroup self) -> IGESSelect_AddGroup

        Creates an AddGroup


        """
        this = _IGESSelect.new_IGESSelect_AddGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_AddGroup self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Adds a new group

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_AddGroup_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_AddGroup self) -> TCollection_AsciiString

        Returns a text which is
        "Add Group"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_AddGroup_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_AddGroup_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_AddGroup_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_AddGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_AddGroup
IGESSelect_AddGroup_swigregister = _IGESSelect.IGESSelect_AddGroup_swigregister
IGESSelect_AddGroup_swigregister(IGESSelect_AddGroup)

def IGESSelect_AddGroup_get_type_name(*args):
    """
    IGESSelect_AddGroup_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_AddGroup_get_type_name(*args)

def IGESSelect_AddGroup_get_type_descriptor(*args):
    """
    IGESSelect_AddGroup_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_AddGroup_get_type_descriptor(*args)

class Handle_IGESSelect_ViewSorter(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_ViewSorter self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_ViewSorter self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_ViewSorter self, IGESSelect_ViewSorter thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_ViewSorter self, Handle_IGESSelect_ViewSorter theHandle) -> Handle_IGESSelect_ViewSorter
        assign(Handle_IGESSelect_ViewSorter self, IGESSelect_ViewSorter thePtr) -> Handle_IGESSelect_ViewSorter
        assign(Handle_IGESSelect_ViewSorter self, Handle_IGESSelect_ViewSorter theHandle) -> Handle_IGESSelect_ViewSorter

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_ViewSorter self) -> IGESSelect_ViewSorter

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_ViewSorter self) -> IGESSelect_ViewSorter

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_ViewSorter self) -> IGESSelect_ViewSorter

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_ViewSorter___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_ViewSorter___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_ViewSorter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_ViewSorter_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_ViewSorter

    def SetModel(self, *args):
        """
        SetModel(Handle_IGESSelect_ViewSorter self, Handle_IGESData_IGESModel model)

        Sets the Model (for PacketList)

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_SetModel(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_IGESSelect_ViewSorter self)

        Clears recorded data


        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_Clear(self, *args)


    def Add(self, *args):
        """
        Add(Handle_IGESSelect_ViewSorter self, Handle_Standard_Transient ent) -> Standard_Boolean

        Adds an item according its type : AddEntity,AddList,AddModel

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_Add(self, *args)


    def AddEntity(self, *args):
        """
        AddEntity(Handle_IGESSelect_ViewSorter self, Handle_IGESData_IGESEntity igesent) -> Standard_Boolean

        Adds an IGES entity. Records the view it is attached to.
        Records directly <ent> if it is a ViewKindEntity or a Drawing
        Returns True if added, False if already in the map

        :type igesent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_AddEntity(self, *args)


    def AddList(self, *args):
        """
        AddList(Handle_IGESSelect_ViewSorter self, Handle_TColStd_HSequenceOfTransient list)

        Adds a list of entities by adding each of the items

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_AddList(self, *args)


    def AddModel(self, *args):
        """
        AddModel(Handle_IGESSelect_ViewSorter self, Handle_Interface_InterfaceModel model)

        Adds all the entities contained in a Model

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_AddModel(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESSelect_ViewSorter self) -> Standard_Integer

        Returns the count of already recorded

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_NbEntities(self, *args)


    def SortSingleViews(self, *args):
        """
        SortSingleViews(Handle_IGESSelect_ViewSorter self, Standard_Boolean const alsoframes)

        Prepares the result to keep only sets attached to Single Views
        If <alsoframes> is given True, it keeps also the Drawings as
        specific sets, in order to get their frames.
        Entities attached to no single view are put in Remaining List.

        Result can then be read by the methods NbSets,SetItem,SetList,
        RemainingList(final = True)

        :type alsoframes: bool

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_SortSingleViews(self, *args)


    def SortDrawings(self, *args):
        """
        SortDrawings(Handle_IGESSelect_ViewSorter self, Interface_Graph G)

        Prepares the result to the sets attached to Drawings :
        All the single views referenced by a Drawing become bound to
        the set for this Drawing

        Entities or Views which correspond to no Drawing are put into
        the Remaining List.

        Result can then be read by the methods NbSets,SetItem,SetList,
        RemainingList(final = True)

        :type G: OCC.wrapper.Interface.Interface_Graph

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_SortDrawings(self, *args)


    def NbSets(self, *args):
        """
        NbSets(Handle_IGESSelect_ViewSorter self, Standard_Boolean const final) -> Standard_Integer

        Returns the count of sets recorded, one per distinct item.
        The Remaining List is not counted.
        If <final> is False, the sets are attached to distinct views
        determined by the method Add.
        If <final> is True, they are the sets determined by the last
        call to, either SortSingleViews, or SortDrawings.

        Warning : Drawings directly recorded are also counted as sets, because
        of their Frame (which is made of Annotations)

        :type final: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_NbSets(self, *args)


    def SetItem(self, *args):
        """
        SetItem(Handle_IGESSelect_ViewSorter self, Standard_Integer const num, Standard_Boolean const final) -> Handle_IGESData_IGESEntity

        Returns the Item which is attached to a set of entities
        For <final> and definition of sets, see method NbSets.
        This item can be a kind of View or a Drawing

        :type num: int
        :type final: bool
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_SetItem(self, *args)


    def Sets(self, *args):
        """
        Sets(Handle_IGESSelect_ViewSorter self, Standard_Boolean const final) -> Handle_IFSelect_PacketList

        Returns the complete content of the determined Sets, which
        include Duplicated and Remaining (duplication 0) lists
        For <final> and definition of sets, see method NbSets.

        :type final: bool
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_PacketList

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_Sets(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_ViewSorter self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ViewSorter_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ViewSorter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_ViewSorter self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_ViewSorter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_ViewSorter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_ViewSorter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_ViewSorter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_ViewSorter self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_ViewSorter self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_ViewSorter self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_ViewSorter self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ViewSorter_DecrementRefCounter(self, *args)

Handle_IGESSelect_ViewSorter_swigregister = _IGESSelect.Handle_IGESSelect_ViewSorter_swigregister
Handle_IGESSelect_ViewSorter_swigregister(Handle_IGESSelect_ViewSorter)

def Handle_IGESSelect_ViewSorter_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_ViewSorter_DownCast(thing)
Handle_IGESSelect_ViewSorter_DownCast = _IGESSelect.Handle_IGESSelect_ViewSorter_DownCast

class IGESSelect_SetVersion5(IGESSelect_ModelModifier):
    """
    Sets IGES Version (coded in global parameter 23) to be at least
    IGES 5.1 . If it is older, it is set to IGES 5.1, and
    LastChangeDate (new Global n0 25) is added (current time)
    Else, it does nothing (i.e. changes neither IGES Version nor
    LastChangeDate)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SetVersion5
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SetVersion5(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SetVersion5 self) -> IGESSelect_SetVersion5

        Creates an SetVersion5, which uses the system Date for Last
        Change Date


        """
        this = _IGESSelect.new_IGESSelect_SetVersion5(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Performing(self, *args):
        """
        Performing(IGESSelect_SetVersion5 self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : IGES Version (coded)
        is upgraded to 5.1 if it is older, and it this case the new
        global parameter 25 (LastChangeDate) is set to current time

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.IGESSelect_SetVersion5_Performing(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_SetVersion5 self) -> TCollection_AsciiString

        Returns a text which is
        "Update IGES Version to 5.1"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SetVersion5_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SetVersion5_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SetVersion5_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SetVersion5_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SetVersion5
IGESSelect_SetVersion5_swigregister = _IGESSelect.IGESSelect_SetVersion5_swigregister
IGESSelect_SetVersion5_swigregister(IGESSelect_SetVersion5)

def IGESSelect_SetVersion5_get_type_name(*args):
    """
    IGESSelect_SetVersion5_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SetVersion5_get_type_name(*args)

def IGESSelect_SetVersion5_get_type_descriptor(*args):
    """
    IGESSelect_SetVersion5_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SetVersion5_get_type_descriptor(*args)

class Handle_IGESSelect_UpdateLastChange(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_UpdateLastChange self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_UpdateLastChange self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_UpdateLastChange self, IGESSelect_UpdateLastChange thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_UpdateLastChange self, Handle_IGESSelect_UpdateLastChange theHandle) -> Handle_IGESSelect_UpdateLastChange
        assign(Handle_IGESSelect_UpdateLastChange self, IGESSelect_UpdateLastChange thePtr) -> Handle_IGESSelect_UpdateLastChange
        assign(Handle_IGESSelect_UpdateLastChange self, Handle_IGESSelect_UpdateLastChange theHandle) -> Handle_IGESSelect_UpdateLastChange

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_UpdateLastChange self) -> IGESSelect_UpdateLastChange

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_UpdateLastChange self) -> IGESSelect_UpdateLastChange

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_UpdateLastChange self) -> IGESSelect_UpdateLastChange

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_UpdateLastChange___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_UpdateLastChange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_UpdateLastChange_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_UpdateLastChange

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_UpdateLastChange self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : the system Date
        is set to Global Section Item n0 25. Also sets IGES Version
        (Item n0 23) to IGES5 if it was older.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_UpdateLastChange self) -> TCollection_AsciiString

        Returns a text which is
        "Update IGES Header Last Change Date"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_UpdateLastChange self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_UpdateLastChange_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_UpdateLastChange_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_UpdateLastChange self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_UpdateLastChange self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_UpdateLastChange self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_UpdateLastChange self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_UpdateLastChange self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_UpdateLastChange self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_UpdateLastChange self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_UpdateLastChange self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_UpdateLastChange self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_UpdateLastChange self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_UpdateLastChange self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_UpdateLastChange self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_UpdateLastChange self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_UpdateLastChange self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_UpdateLastChange self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_UpdateLastChange self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_UpdateLastChange self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_UpdateLastChange self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_UpdateLastChange self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_UpdateLastChange_DecrementRefCounter(self, *args)

Handle_IGESSelect_UpdateLastChange_swigregister = _IGESSelect.Handle_IGESSelect_UpdateLastChange_swigregister
Handle_IGESSelect_UpdateLastChange_swigregister(Handle_IGESSelect_UpdateLastChange)

def Handle_IGESSelect_UpdateLastChange_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_UpdateLastChange_DownCast(thing)
Handle_IGESSelect_UpdateLastChange_DownCast = _IGESSelect.Handle_IGESSelect_UpdateLastChange_DownCast

class IGESSelect_AddFileComment(IGESSelect_FileModifier):
    """
    This class allows to add comment lines on writing an IGES File
    These lines are added to Start Section, instead of the only
    one blank line written by default.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_AddFileComment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_AddFileComment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_AddFileComment self) -> IGESSelect_AddFileComment

        Creates a new emoty AddFileComment. Use AddLine to complete it


        """
        this = _IGESSelect.new_IGESSelect_AddFileComment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Clear(self, *args):
        """
        Clear(IGESSelect_AddFileComment self)

        Clears the list of file comment lines already stored


        """
        return _IGESSelect.IGESSelect_AddFileComment_Clear(self, *args)


    def AddLine(self, *args):
        """
        AddLine(IGESSelect_AddFileComment self, Standard_CString const line)

        Adds a line for file comment
        Remark : Lines are limited to 72 useful char.s . A line of more than
        72 char.s will be splited into several ones of 72 max each.

        :type line: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_AddFileComment_AddLine(self, *args)


    def AddLines(self, *args):
        """
        AddLines(IGESSelect_AddFileComment self, Handle_TColStd_HSequenceOfHAsciiString lines)

        Adds a list of lines for file comment
        Each of them must comply with demand of AddLine

        :type lines: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESSelect.IGESSelect_AddFileComment_AddLines(self, *args)


    def NbLines(self, *args):
        """
        NbLines(IGESSelect_AddFileComment self) -> Standard_Integer

        Returns the count of stored lines

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect_AddFileComment_NbLines(self, *args)


    def Line(self, *args):
        """
        Line(IGESSelect_AddFileComment self, Standard_Integer const num) -> Standard_CString

        Returns a stored line given its rank

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.IGESSelect_AddFileComment_Line(self, *args)


    def Lines(self, *args):
        """
        Lines(IGESSelect_AddFileComment self) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the complete list of lines in once

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESSelect.IGESSelect_AddFileComment_Lines(self, *args)


    def Perform(self, *args):
        """
        Perform(IGESSelect_AddFileComment self, IFSelect_ContextWrite ctx, IGESData_IGESWriter writer)

        Sends the comment lines to the file (Start Section)

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextWrite
        :type writer: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSelect.IGESSelect_AddFileComment_Perform(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_AddFileComment self) -> TCollection_AsciiString

        Returns specific Label, which is
        "Add <nn> Comment Lines (Start Section)"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_AddFileComment_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_AddFileComment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_AddFileComment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_AddFileComment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_AddFileComment
IGESSelect_AddFileComment_swigregister = _IGESSelect.IGESSelect_AddFileComment_swigregister
IGESSelect_AddFileComment_swigregister(IGESSelect_AddFileComment)

def IGESSelect_AddFileComment_get_type_name(*args):
    """
    IGESSelect_AddFileComment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_AddFileComment_get_type_name(*args)

def IGESSelect_AddFileComment_get_type_descriptor(*args):
    """
    IGESSelect_AddFileComment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_AddFileComment_get_type_descriptor(*args)

class Handle_IGESSelect_RemoveCurves(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_RemoveCurves self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_RemoveCurves self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_RemoveCurves self, IGESSelect_RemoveCurves thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_RemoveCurves self, Handle_IGESSelect_RemoveCurves theHandle) -> Handle_IGESSelect_RemoveCurves
        assign(Handle_IGESSelect_RemoveCurves self, IGESSelect_RemoveCurves thePtr) -> Handle_IGESSelect_RemoveCurves
        assign(Handle_IGESSelect_RemoveCurves self, Handle_IGESSelect_RemoveCurves theHandle) -> Handle_IGESSelect_RemoveCurves

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_RemoveCurves self) -> IGESSelect_RemoveCurves

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_RemoveCurves self) -> IGESSelect_RemoveCurves

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_RemoveCurves self) -> IGESSelect_RemoveCurves

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_RemoveCurves___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_RemoveCurves___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_RemoveCurves(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_RemoveCurves_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_RemoveCurves

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_RemoveCurves self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Removes the Curves

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_RemoveCurves self) -> TCollection_AsciiString

        Returns a text which is
        "Remove Curves UV on Face"  or  "Remove Curves 3D on Face"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_RemoveCurves self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_RemoveCurves_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_RemoveCurves_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_RemoveCurves self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_RemoveCurves self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_RemoveCurves self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_RemoveCurves self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_RemoveCurves self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_RemoveCurves self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_RemoveCurves self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_RemoveCurves self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_RemoveCurves self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_RemoveCurves self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_RemoveCurves self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_RemoveCurves self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_RemoveCurves self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_RemoveCurves self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_RemoveCurves self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_RemoveCurves self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_RemoveCurves self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_RemoveCurves self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_RemoveCurves self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_RemoveCurves_DecrementRefCounter(self, *args)

Handle_IGESSelect_RemoveCurves_swigregister = _IGESSelect.Handle_IGESSelect_RemoveCurves_swigregister
Handle_IGESSelect_RemoveCurves_swigregister(Handle_IGESSelect_RemoveCurves)

def Handle_IGESSelect_RemoveCurves_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_RemoveCurves_DownCast(thing)
Handle_IGESSelect_RemoveCurves_DownCast = _IGESSelect.Handle_IGESSelect_RemoveCurves_DownCast

class Handle_IGESSelect_UpdateFileName(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_UpdateFileName self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_UpdateFileName self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_UpdateFileName self, IGESSelect_UpdateFileName thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_UpdateFileName self, Handle_IGESSelect_UpdateFileName theHandle) -> Handle_IGESSelect_UpdateFileName
        assign(Handle_IGESSelect_UpdateFileName self, IGESSelect_UpdateFileName thePtr) -> Handle_IGESSelect_UpdateFileName
        assign(Handle_IGESSelect_UpdateFileName self, Handle_IGESSelect_UpdateFileName theHandle) -> Handle_IGESSelect_UpdateFileName

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_UpdateFileName self) -> IGESSelect_UpdateFileName

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_UpdateFileName self) -> IGESSelect_UpdateFileName

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_UpdateFileName self) -> IGESSelect_UpdateFileName

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_UpdateFileName___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_UpdateFileName___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_UpdateFileName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_UpdateFileName_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_UpdateFileName

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_UpdateFileName self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : the system Date
        is set to Global Section Item n0 18.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_UpdateFileName self) -> TCollection_AsciiString

        Returns a text which is
        "Updates IGES File Name to new current one"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_UpdateFileName self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_UpdateFileName_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_UpdateFileName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_UpdateFileName self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_UpdateFileName self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_UpdateFileName self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_UpdateFileName self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_UpdateFileName self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_UpdateFileName self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_UpdateFileName self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_UpdateFileName self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_UpdateFileName self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_UpdateFileName self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_UpdateFileName self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_UpdateFileName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_UpdateFileName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_UpdateFileName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_UpdateFileName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_UpdateFileName self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_UpdateFileName self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_UpdateFileName self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_UpdateFileName self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_UpdateFileName_DecrementRefCounter(self, *args)

Handle_IGESSelect_UpdateFileName_swigregister = _IGESSelect.Handle_IGESSelect_UpdateFileName_swigregister
Handle_IGESSelect_UpdateFileName_swigregister(Handle_IGESSelect_UpdateFileName)

def Handle_IGESSelect_UpdateFileName_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_UpdateFileName_DownCast(thing)
Handle_IGESSelect_UpdateFileName_DownCast = _IGESSelect.Handle_IGESSelect_UpdateFileName_DownCast

class Handle_IGESSelect_IGESName(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_IGESName self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_IGESName_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_IGESName self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_IGESName self, IGESSelect_IGESName thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_IGESName self, Handle_IGESSelect_IGESName theHandle) -> Handle_IGESSelect_IGESName
        assign(Handle_IGESSelect_IGESName self, IGESSelect_IGESName thePtr) -> Handle_IGESSelect_IGESName
        assign(Handle_IGESSelect_IGESName self, Handle_IGESSelect_IGESName theHandle) -> Handle_IGESSelect_IGESName

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_IGESName self) -> IGESSelect_IGESName

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_IGESName self) -> IGESSelect_IGESName

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_IGESName___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_IGESName self) -> IGESSelect_IGESName

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_IGESName___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_IGESName___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_IGESName___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_IGESName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_IGESName_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_IGESName

    def Value(self, *args):
        """
        Value(Handle_IGESSelect_IGESName self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the ShortLabel as being the Name of an IGESEntity
        If <ent> has no name, it returns empty string ""

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_IGESName self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_IGESName_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_IGESName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetIntCase(self, *args):
        """
        SetIntCase(Handle_IGESSelect_IGESName self, Standard_Boolean const hasmin, Standard_Integer const valmin, Standard_Boolean const hasmax, Standard_Integer const valmax)

        Sets the information data to tell "integer cases" with
        possible min and max values
        To be called when creating

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_SetIntCase(self, *args)


    def IsIntCase(self, *args):
        """
        IsIntCase(Handle_IGESSelect_IGESName self) -> Standard_Boolean

        Tells if this Signature gives integer values
        and returns values from SetIntCase if True

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_IsIntCase(self, *args)


    def AddCase(self, *args):
        """
        AddCase(Handle_IGESSelect_IGESName self, Standard_CString const acase)

        Adds a possible case
        To be called when creating, IF the list of possible cases for
        Value is known when starting
        For instance, for CDL types, rather do not fill this,
        but for a specific enumeration (such as a status), can be used

        :type acase: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_AddCase(self, *args)


    def CaseList(self, *args):
        """
        CaseList(Handle_IGESSelect_IGESName self) -> Handle_TColStd_HSequenceOfAsciiString

        Returns the predefined list of possible cases, filled by AddCase
        Null Handle if no predefined list (hence, to be counted)
        Useful to filter on  really possible vase, for instance, or
        for a help

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_CaseList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_IGESName self) -> Standard_CString

        Returns an identification of the Signature (a word), given at
        initialization time
        Returns the Signature for a Transient object. It is specific
        of each sub-class of Signature. For a Null Handle, it should
        provide ""
        It can work with the model which contains the entity

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_Name(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_IGESName self) -> TCollection_AsciiString

        The label of a Signature uses its name as follow :
        "Signature : <name>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_Label(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_IGESSelect_IGESName self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Tells if the value for <ent> in <model> matches a text, with
        a criterium <exact>.
        The default definition calls MatchValue
        Can be redefined

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_Matches(self, *args)


    def MatchValue(self, *args):
        """
        MatchValue(Handle_IGESSelect_IGESName self, Standard_CString const val, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Default procedure to tell if a value <val> matches a text
        with a criterium <exact>. <exact> = True requires equality,
        else only contained (no reg-exp)

        :type val: OCC.wrapper.Standard.Standard_CString
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_MatchValue(self, *args)


    def IntValue(self, *args):
        """
        IntValue(Handle_IGESSelect_IGESName self, Standard_Integer const val) -> Standard_CString

        This procedure converts an Integer to a CString
        It is a convenient way when the value of a signature has the
        form of a simple integer value
        The value is to be used immediately (one buffer only, no copy)

        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_IntValue(self, *args)


    def Text(self, *args):
        """
        Text(Handle_IGESSelect_IGESName self, Handle_Standard_Transient ent, Handle_Standard_Transient context) -> TCollection_AsciiString

        Returns an identification of the Signature (a word), given at
        initialization time
        Specialised to consider context as an InterfaceModel

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type context: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_Text(self, *args)


    def ClassName(self, *args):
        """
        ClassName(Handle_IGESSelect_IGESName self, Standard_CString const typnam) -> Standard_CString

        From a CDL Type Name, returns the Class part (package dropped)
        WARNING : buffered, to be immediately copied or printed

        :type typnam: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_ClassName(self, *args)


    def TextAlone(self, *args):
        """
        TextAlone(Handle_IGESSelect_IGESName self, Handle_Standard_Transient ent) -> TCollection_AsciiString

        Gives a text as a signature for a transient object alone, i.e.
        without defined context.
        By default, calls Text with undefined context (Null Handle) and
        if empty, then returns DynamicType

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_TextAlone(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_IGESName self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_IGESName_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_IGESName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_IGESName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_IGESName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_IGESName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_IGESName self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_IGESName self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_IGESName self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_IGESName_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_IGESName self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_IGESName_DecrementRefCounter(self, *args)

Handle_IGESSelect_IGESName_swigregister = _IGESSelect.Handle_IGESSelect_IGESName_swigregister
Handle_IGESSelect_IGESName_swigregister(Handle_IGESSelect_IGESName)

def Handle_IGESSelect_IGESName_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_IGESName_DownCast(thing)
Handle_IGESSelect_IGESName_DownCast = _IGESSelect.Handle_IGESSelect_IGESName_DownCast

class Handle_IGESSelect_Dumper(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_Dumper self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_Dumper_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_Dumper self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_Dumper self, IGESSelect_Dumper thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_Dumper self, Handle_IGESSelect_Dumper theHandle) -> Handle_IGESSelect_Dumper
        assign(Handle_IGESSelect_Dumper self, IGESSelect_Dumper thePtr) -> Handle_IGESSelect_Dumper
        assign(Handle_IGESSelect_Dumper self, Handle_IGESSelect_Dumper theHandle) -> Handle_IGESSelect_Dumper

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_Dumper self) -> IGESSelect_Dumper

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_Dumper self) -> IGESSelect_Dumper

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_Dumper___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_Dumper self) -> IGESSelect_Dumper

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_Dumper___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_Dumper___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_Dumper___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_Dumper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_Dumper_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_Dumper

    def WriteOwn(self, *args):
        """
        WriteOwn(Handle_IGESSelect_Dumper self, IFSelect_SessionFile file, Handle_Standard_Transient item) -> Standard_Boolean

        Write the Own Parameters of Types defined in package IGESSelect
        Returns True if <item> has been processed, False else

        :type file: OCC.wrapper.IFSelect.IFSelect_SessionFile
        :type item: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_WriteOwn(self, *args)


    def ReadOwn(self, *args):
        """
        ReadOwn(Handle_IGESSelect_Dumper self, IFSelect_SessionFile file, TCollection_AsciiString type, Handle_Standard_Transient item) -> Standard_Boolean

        Recognizes and Read Own Parameters for Types of package
        IGESSelect. Returns True if done and <item> created, False else

        :type file: OCC.wrapper.IFSelect.IFSelect_SessionFile
        :type type: OCC.wrapper.TCollection.TCollection_AsciiString
        :type item: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_ReadOwn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_Dumper self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_Dumper_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_Dumper_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def First(self, *args):
        """
        First(Handle_IGESSelect_Dumper self) -> Handle_IFSelect_SessionDumper

        Returns the First item of the Library of Dumper. The Next ones
        are then obtained by Next on the returned items

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SessionDumper

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_First(self, *args)


    def Next(self, *args):
        """
        Next(Handle_IGESSelect_Dumper self) -> Handle_IFSelect_SessionDumper

        Returns the Next SesionDumper in the Library. Returns a Null
        Handle at the End.

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SessionDumper

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_Next(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_Dumper self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_Dumper_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_Dumper self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_Dumper self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_Dumper self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_Dumper self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_Dumper self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_Dumper self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_Dumper self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_Dumper_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_Dumper self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_Dumper_DecrementRefCounter(self, *args)

Handle_IGESSelect_Dumper_swigregister = _IGESSelect.Handle_IGESSelect_Dumper_swigregister
Handle_IGESSelect_Dumper_swigregister(Handle_IGESSelect_Dumper)

def Handle_IGESSelect_Dumper_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_Dumper_DownCast(thing)
Handle_IGESSelect_Dumper_DownCast = _IGESSelect.Handle_IGESSelect_Dumper_DownCast

class IGESSelect_WorkLibrary(IFSelect.IFSelect_WorkLibrary):
    """Performs Read and Write an IGES File with an IGES Model"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_WorkLibrary
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_WorkLibrary(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_WorkLibrary self, Standard_Boolean const modefnes) -> IGESSelect_WorkLibrary

        Creates a IGES WorkLibrary
        If <modefnes> is given as True, it will work for FNES

        :type modefnes: bool

        """
        this = _IGESSelect.new_IGESSelect_WorkLibrary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ReadFile(self, *args):
        """
        ReadFile(IGESSelect_WorkLibrary self, Standard_CString const name, Handle_Interface_InterfaceModel model, Handle_Interface_Protocol protocol) -> Standard_Integer

        Reads a IGES File and returns a IGES Model (into <mod>),
        or lets <mod> "Null" in case of Error
        Returns 0 if OK, 1 if Read Error, -1 if File not opened

        :type name: OCC.wrapper.Standard.Standard_CString
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect_WorkLibrary_ReadFile(self, *args)


    def WriteFile(self, *args):
        """
        WriteFile(IGESSelect_WorkLibrary self, IFSelect_ContextWrite ctx) -> Standard_Boolean

        Writes a File from a IGES Model (brought by <ctx>)
        Returns False (and writes no file) if <ctx> is not for IGES

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextWrite
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_WorkLibrary_WriteFile(self, *args)


    def DefineProtocol(*args):
        """
        DefineProtocol() -> Handle_IGESData_Protocol

        Defines a protocol to be adequate for IGES
        (encompasses ALL the IGES norm including IGESSolid, IGESAppli)

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESSelect.IGESSelect_WorkLibrary_DefineProtocol(*args)

    DefineProtocol = staticmethod(DefineProtocol)

    def DumpEntity(self, *args):
        """
        DumpEntity(IGESSelect_WorkLibrary self, Handle_Interface_InterfaceModel model, Handle_Interface_Protocol protocol, Handle_Standard_Transient entity, Handle_Message_Messenger S, Standard_Integer const level)

        Dumps an IGES Entity with an IGES Dumper. <level> is the one
        used by IGESDumper.

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type entity: OCC.wrapper.Standard.Handle_Standard_Transient
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type level: int

        """
        return _IGESSelect.IGESSelect_WorkLibrary_DumpEntity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_WorkLibrary_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_WorkLibrary_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_WorkLibrary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_WorkLibrary
IGESSelect_WorkLibrary_swigregister = _IGESSelect.IGESSelect_WorkLibrary_swigregister
IGESSelect_WorkLibrary_swigregister(IGESSelect_WorkLibrary)

def IGESSelect_WorkLibrary_DefineProtocol(*args):
    """
    IGESSelect_WorkLibrary_DefineProtocol() -> Handle_IGESData_Protocol

    Defines a protocol to be adequate for IGES
    (encompasses ALL the IGES norm including IGESSolid, IGESAppli)

    :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

    """
    return _IGESSelect.IGESSelect_WorkLibrary_DefineProtocol(*args)

def IGESSelect_WorkLibrary_get_type_name(*args):
    """
    IGESSelect_WorkLibrary_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_WorkLibrary_get_type_name(*args)

def IGESSelect_WorkLibrary_get_type_descriptor(*args):
    """
    IGESSelect_WorkLibrary_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_WorkLibrary_get_type_descriptor(*args)

class Handle_IGESSelect_ModelModifier(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_ModelModifier self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_ModelModifier self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_ModelModifier self, IGESSelect_ModelModifier thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_ModelModifier self, Handle_IGESSelect_ModelModifier theHandle) -> Handle_IGESSelect_ModelModifier
        assign(Handle_IGESSelect_ModelModifier self, IGESSelect_ModelModifier thePtr) -> Handle_IGESSelect_ModelModifier
        assign(Handle_IGESSelect_ModelModifier self, Handle_IGESSelect_ModelModifier theHandle) -> Handle_IGESSelect_ModelModifier

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_ModelModifier self) -> IGESSelect_ModelModifier

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_ModelModifier self) -> IGESSelect_ModelModifier

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_ModelModifier self) -> IGESSelect_ModelModifier

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_ModelModifier___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_ModelModifier___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_ModelModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_ModelModifier_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_ModelModifier

    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_ModelModifier self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_ModelModifier self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_PerformProtocol(self, *args)


    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_ModelModifier self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific Perform, without Protocol. If Performing with
        Protocol is redefined, Performing without Protocol must
        though be defined to do nothing (not called, but demanded
        by the linker)

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_Performing(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_ModelModifier self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ModelModifier_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ModelModifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_ModelModifier self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_ModelModifier self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_ModelModifier self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_ModelModifier self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_ModelModifier self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_ModelModifier self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_ModelModifier self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_ModelModifier self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_Selection(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_ModelModifier self) -> TCollection_AsciiString

        Returns a short text which defines the operation performed

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_Label(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_ModelModifier self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_ModelModifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_ModelModifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_ModelModifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_ModelModifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_ModelModifier self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_ModelModifier self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_ModelModifier self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_ModelModifier self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ModelModifier_DecrementRefCounter(self, *args)

Handle_IGESSelect_ModelModifier_swigregister = _IGESSelect.Handle_IGESSelect_ModelModifier_swigregister
Handle_IGESSelect_ModelModifier_swigregister(Handle_IGESSelect_ModelModifier)

def Handle_IGESSelect_ModelModifier_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_ModelModifier_DownCast(thing)
Handle_IGESSelect_ModelModifier_DownCast = _IGESSelect.Handle_IGESSelect_ModelModifier_DownCast

class IGESSelect_SelectSubordinate(IFSelect.IFSelect_SelectExtract):
    """
    This selections uses Subordinate Status as sort criterium
    It is an integer number which can be :
    0 Independant
    1 Physically Dependant
    2 Logically Dependant
    3 Both (recorded)
    + to sort :
    4 : 1 or 3  ->  at least Physically
    5 : 2 or 3  ->  at least Logically
    6 : 1 or 2 or 3 -> any kind of dependance
    (corresponds to 0 reversed)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectSubordinate
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectSubordinate(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectSubordinate self, Standard_Integer const status) -> IGESSelect_SelectSubordinate

        Creates a SelectSubordinate with a status to be sorted

        :type status: int

        """
        this = _IGESSelect.new_IGESSelect_SelectSubordinate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Status(self, *args):
        """
        Status(IGESSelect_SelectSubordinate self) -> Standard_Integer

        Returns the status used for sorting

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect_SelectSubordinate_Status(self, *args)


    def Sort(self, *args):
        """
        Sort(IGESSelect_SelectSubordinate self, Standard_Integer const rank, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <ent> is an IGES Entity with Subordinate
        Status matching the criterium

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectSubordinate_Sort(self, *args)


    def ExtractLabel(self, *args):
        """
        ExtractLabel(IGESSelect_SelectSubordinate self) -> TCollection_AsciiString

        Returns the Selection criterium : "IGES Entity, Independant"
        etc...

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectSubordinate_ExtractLabel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectSubordinate_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectSubordinate_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectSubordinate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectSubordinate
IGESSelect_SelectSubordinate_swigregister = _IGESSelect.IGESSelect_SelectSubordinate_swigregister
IGESSelect_SelectSubordinate_swigregister(IGESSelect_SelectSubordinate)

def IGESSelect_SelectSubordinate_get_type_name(*args):
    """
    IGESSelect_SelectSubordinate_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectSubordinate_get_type_name(*args)

def IGESSelect_SelectSubordinate_get_type_descriptor(*args):
    """
    IGESSelect_SelectSubordinate_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectSubordinate_get_type_descriptor(*args)

class Handle_IGESSelect_Activator(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_Activator self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_Activator_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_Activator self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_Activator_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_Activator self, IGESSelect_Activator thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_Activator_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_Activator self, Handle_IGESSelect_Activator theHandle) -> Handle_IGESSelect_Activator
        assign(Handle_IGESSelect_Activator self, IGESSelect_Activator thePtr) -> Handle_IGESSelect_Activator
        assign(Handle_IGESSelect_Activator self, Handle_IGESSelect_Activator theHandle) -> Handle_IGESSelect_Activator

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_Activator_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_Activator self) -> IGESSelect_Activator

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_Activator_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_Activator self) -> IGESSelect_Activator

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_Activator___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_Activator self) -> IGESSelect_Activator

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_Activator___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_Activator___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_Activator___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_Activator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_Activator_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_Activator

    def Do(self, *args):
        """
        Do(Handle_IGESSelect_Activator self, Standard_Integer const number, Handle_IFSelect_SessionPilot pilot) -> IFSelect_ReturnStatus

        Executes a Command Line for IGESSelect

        :type number: int
        :type pilot: OCC.wrapper.IFSelect.Handle_IFSelect_SessionPilot
        :rtype: OCC.wrapper.IFSelect.IFSelect_ReturnStatus

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Do(self, *args)


    def Help(self, *args):
        """
        Help(Handle_IGESSelect_Activator self, Standard_Integer const number) -> Standard_CString

        Sends a short help message for IGESSelect commands

        :type number: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Help(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_Activator self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_Activator_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_Activator_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_Activator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Adding(self, *args):
        """
        Adding(Handle_IGESSelect_Activator self, Handle_IFSelect_Activator actor, Standard_Integer const number, Standard_CString const command, Standard_Integer const mode)

        Records, in a Dictionary available for all the Activators,
        the command title an Activator can process, attached with
        its number, proper for this Activator
        <mode> allows to distinguish various execution modes
        0: default mode; 1 : for xset

        :type actor: OCC.wrapper.IFSelect.Handle_IFSelect_Activator
        :type number: int
        :type command: OCC.wrapper.Standard.Standard_CString
        :type mode: int

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Adding(self, *args)


    def Add(self, *args):
        """
        Add(Handle_IGESSelect_Activator self, Standard_Integer const number, Standard_CString const command)

        Allows a self-definition by an Activator of the Commands it
        processes, call the class method Adding (mode 0)

        :type number: int
        :type command: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Add(self, *args)


    def AddSet(self, *args):
        """
        AddSet(Handle_IGESSelect_Activator self, Standard_Integer const number, Standard_CString const command)

        Same as Add but specifies that this command is candidate for
        xset (creation of items, xset : named items; mode 1)

        :type number: int
        :type command: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_Activator_AddSet(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_IGESSelect_Activator self, Standard_CString const command)

        Removes a Command, if it is recorded (else, does nothing)

        :type command: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Remove(self, *args)


    def Select(self, *args):
        """
        Select(Handle_IGESSelect_Activator self, Standard_CString const command, Handle_IFSelect_Activator actor) -> Standard_Boolean

        Selects, for a Command given by its title, an actor with its
        command number. Returns True if found, False else

        :type command: OCC.wrapper.Standard.Standard_CString
        :type number: int
        :type actor: OCC.wrapper.IFSelect.Handle_IFSelect_Activator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Select(self, *args)


    def Mode(self, *args):
        """
        Mode(Handle_IGESSelect_Activator self, Standard_CString const command) -> Standard_Integer

        Returns mode recorded for a command. -1 if not found

        :type command: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Mode(self, *args)


    def Commands(self, *args):
        """
        Commands(Handle_IGESSelect_Activator self, Standard_Integer const mode=-1, Standard_CString const command) -> Handle_TColStd_HSequenceOfAsciiString

        Returns, for a root of command title, the list of possible
        commands.
        <mode> : -1 (D) for all commands if <commands> is empty
        -1 + command : about a Group , >= 0 see Adding
        By default, it returns the whole list of known commands.

        :type mode: int
        :type command: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Commands(self, *args)


    def Group(self, *args):
        """
        Group(Handle_IGESSelect_Activator self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_Activator_Group(self, *args)


    def File(self, *args):
        """
        File(Handle_IGESSelect_Activator self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_Activator_File(self, *args)


    def SetForGroup(self, *args):
        """
        SetForGroup(Handle_IGESSelect_Activator self, Standard_CString const group, Standard_CString const file)

        Group and SetGroup define a "Group of commands" which
        correspond to an Activator. Default is "XSTEP"
        Also a file may be attached

        :type group: OCC.wrapper.Standard.Standard_CString
        :type file: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_Activator_SetForGroup(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_Activator self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_Activator_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_Activator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_Activator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_Activator_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_Activator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_Activator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_Activator_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_Activator self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_Activator_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_Activator self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_Activator_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_Activator self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_Activator_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_Activator self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_Activator_DecrementRefCounter(self, *args)

Handle_IGESSelect_Activator_swigregister = _IGESSelect.Handle_IGESSelect_Activator_swigregister
Handle_IGESSelect_Activator_swigregister(Handle_IGESSelect_Activator)

def Handle_IGESSelect_Activator_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_Activator_DownCast(thing)
Handle_IGESSelect_Activator_DownCast = _IGESSelect.Handle_IGESSelect_Activator_DownCast

class IGESSelect_SelectFromDrawing(IFSelect.IFSelect_SelectDeduct):
    """
    This selection gets in all the model, the entities which are
    attached to the drawing(s) given as input. This includes :
    - Drawing Frame (Annotations directky referenced by Drawings)
    - Entities attached to the single Views referenced by Drawings
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectFromDrawing
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectFromDrawing(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectFromDrawing self) -> IGESSelect_SelectFromDrawing

        Creates a SelectFromDrawing


        """
        this = _IGESSelect.new_IGESSelect_SelectFromDrawing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def RootResult(self, *args):
        """
        RootResult(IGESSelect_SelectFromDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Selects the Entities which are attached to the Drawing(s)
        present in the Input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.IGESSelect_SelectFromDrawing_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_SelectFromDrawing self) -> TCollection_AsciiString

        Returns the label, with is "Entities attached to Drawing"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectFromDrawing_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectFromDrawing_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectFromDrawing_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectFromDrawing_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectFromDrawing
IGESSelect_SelectFromDrawing_swigregister = _IGESSelect.IGESSelect_SelectFromDrawing_swigregister
IGESSelect_SelectFromDrawing_swigregister(IGESSelect_SelectFromDrawing)

def IGESSelect_SelectFromDrawing_get_type_name(*args):
    """
    IGESSelect_SelectFromDrawing_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectFromDrawing_get_type_name(*args)

def IGESSelect_SelectFromDrawing_get_type_descriptor(*args):
    """
    IGESSelect_SelectFromDrawing_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectFromDrawing_get_type_descriptor(*args)

class Handle_IGESSelect_SelectFaces(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectFaces self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectFaces self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectFaces self, IGESSelect_SelectFaces thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectFaces self, Handle_IGESSelect_SelectFaces theHandle) -> Handle_IGESSelect_SelectFaces
        assign(Handle_IGESSelect_SelectFaces self, IGESSelect_SelectFaces thePtr) -> Handle_IGESSelect_SelectFaces
        assign(Handle_IGESSelect_SelectFaces self, Handle_IGESSelect_SelectFaces theHandle) -> Handle_IGESSelect_SelectFaces

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectFaces self) -> IGESSelect_SelectFaces

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectFaces self) -> IGESSelect_SelectFaces

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectFaces self) -> IGESSelect_SelectFaces

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectFaces___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectFaces___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectFaces(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectFaces_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectFaces

    def Explore(self, *args):
        """
        Explore(Handle_IGESSelect_SelectFaces self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity, to take its faces
        Works recursively

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(Handle_IGESSelect_SelectFaces self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Faces"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_ExploreLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectFaces self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectFaces_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectFaces_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Level(self, *args):
        """
        Level(Handle_IGESSelect_SelectFaces self) -> Standard_Integer

        Returns the required exploring level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_Level(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectFaces self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Explore on each input entity : it can be rejected,
        taken for output, or to explore. If the maximum level has not
        yet been attained, or if no max level is specified, entities
        to be explored are themselves used as if they were input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectFaces self) -> TCollection_AsciiString

        Returns a text saying "(Recursive)" or "(Level nn)" plus
        specific criterium returned by ExploreLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectFaces self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectFaces self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectFaces self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectFaces self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectFaces self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectFaces self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectFaces self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectFaces self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectFaces self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectFaces self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectFaces self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectFaces self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectFaces self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectFaces self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectFaces self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectFaces self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectFaces self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectFaces self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectFaces_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectFaces_swigregister = _IGESSelect.Handle_IGESSelect_SelectFaces_swigregister
Handle_IGESSelect_SelectFaces_swigregister(Handle_IGESSelect_SelectFaces)

def Handle_IGESSelect_SelectFaces_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectFaces_DownCast(thing)
Handle_IGESSelect_SelectFaces_DownCast = _IGESSelect.Handle_IGESSelect_SelectFaces_DownCast

class Handle_IGESSelect_RebuildGroups(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_RebuildGroups self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_RebuildGroups self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_RebuildGroups self, IGESSelect_RebuildGroups thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_RebuildGroups self, Handle_IGESSelect_RebuildGroups theHandle) -> Handle_IGESSelect_RebuildGroups
        assign(Handle_IGESSelect_RebuildGroups self, IGESSelect_RebuildGroups thePtr) -> Handle_IGESSelect_RebuildGroups
        assign(Handle_IGESSelect_RebuildGroups self, Handle_IGESSelect_RebuildGroups theHandle) -> Handle_IGESSelect_RebuildGroups

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_RebuildGroups self) -> IGESSelect_RebuildGroups

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_RebuildGroups self) -> IGESSelect_RebuildGroups

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_RebuildGroups self) -> IGESSelect_RebuildGroups

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_RebuildGroups___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_RebuildGroups___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_RebuildGroups(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_RebuildGroups_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_RebuildGroups

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_RebuildGroups self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Rebuilds the original groups

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_RebuildGroups self) -> TCollection_AsciiString

        Returns a text which is
        "Rebuild Groups"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_RebuildGroups self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_RebuildGroups_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_RebuildGroups_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_RebuildGroups self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_RebuildGroups self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_RebuildGroups self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_RebuildGroups self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_RebuildGroups self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_RebuildGroups self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_RebuildGroups self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_RebuildGroups self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_RebuildGroups self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_RebuildGroups self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_RebuildGroups self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_RebuildGroups self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_RebuildGroups self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_RebuildGroups self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_RebuildGroups self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_RebuildGroups self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_RebuildGroups self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_RebuildGroups self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_RebuildGroups self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_RebuildGroups_DecrementRefCounter(self, *args)

Handle_IGESSelect_RebuildGroups_swigregister = _IGESSelect.Handle_IGESSelect_RebuildGroups_swigregister
Handle_IGESSelect_RebuildGroups_swigregister(Handle_IGESSelect_RebuildGroups)

def Handle_IGESSelect_RebuildGroups_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_RebuildGroups_DownCast(thing)
Handle_IGESSelect_RebuildGroups_DownCast = _IGESSelect.Handle_IGESSelect_RebuildGroups_DownCast

class Handle_IGESSelect_DispPerDrawing(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_DispPerDrawing self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_DispPerDrawing self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_DispPerDrawing self, IGESSelect_DispPerDrawing thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_DispPerDrawing self, Handle_IGESSelect_DispPerDrawing theHandle) -> Handle_IGESSelect_DispPerDrawing
        assign(Handle_IGESSelect_DispPerDrawing self, IGESSelect_DispPerDrawing thePtr) -> Handle_IGESSelect_DispPerDrawing
        assign(Handle_IGESSelect_DispPerDrawing self, Handle_IGESSelect_DispPerDrawing theHandle) -> Handle_IGESSelect_DispPerDrawing

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_DispPerDrawing self) -> IGESSelect_DispPerDrawing

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_DispPerDrawing self) -> IGESSelect_DispPerDrawing

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_DispPerDrawing self) -> IGESSelect_DispPerDrawing

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_DispPerDrawing___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_DispPerDrawing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_DispPerDrawing_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_DispPerDrawing

    def Label(self, *args):
        """
        Label(Handle_IGESSelect_DispPerDrawing self) -> TCollection_AsciiString

        Returns as Label, "One File per Drawing"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_Label(self, *args)


    def Packets(self, *args):
        """
        Packets(Handle_IGESSelect_DispPerDrawing self, Interface_Graph G, IFGraph_SubPartsIterator packs)

        Computes the list of produced Packets. Packets are computed
        by a ViewSorter (SortDrawings with also frames).

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type packs: OCC.wrapper.IFGraph.IFGraph_SubPartsIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_Packets(self, *args)


    def CanHaveRemainder(self, *args):
        """
        CanHaveRemainder(Handle_IGESSelect_DispPerDrawing self) -> Standard_Boolean

        Returns True, because of entities attached to no view.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_CanHaveRemainder(self, *args)


    def Remainder(self, *args):
        """
        Remainder(Handle_IGESSelect_DispPerDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Returns Remainder which is a set of Entities.
        It is supposed to be called once Packets has been called.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_Remainder(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_DispPerDrawing self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_DispPerDrawing_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_DispPerDrawing_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetRootName(self, *args):
        """
        SetRootName(Handle_IGESSelect_DispPerDrawing self, Handle_TCollection_HAsciiString name)

        Sets a Root Name as an HAsciiString
        To reset it, give a Null Handle (then, a ShareOut will have
        to define the Default Root Name)

        :type name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_SetRootName(self, *args)


    def HasRootName(self, *args):
        """
        HasRootName(Handle_IGESSelect_DispPerDrawing self) -> Standard_Boolean

        Returns True if a specific Root Name has been set
        (else, the Default Root Name has to be used)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_HasRootName(self, *args)


    def RootName(self, *args):
        """
        Returns the Root Name for files produced by this dispatch
        It is empty if it has not been set or if it has been reset

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        res = _IGESSelect.Handle_IGESSelect_DispPerDrawing_RootName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetFinalSelection(self, *args):
        """
        SetFinalSelection(Handle_IGESSelect_DispPerDrawing self, Handle_IFSelect_Selection sel)

        Stores (or Changes) the Final Selection for a Dispatch

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_SetFinalSelection(self, *args)


    def FinalSelection(self, *args):
        """
        FinalSelection(Handle_IGESSelect_DispPerDrawing self) -> Handle_IFSelect_Selection

        Returns the Final Selection of a Dispatch
        we 'd like : C++ : return const &

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_FinalSelection(self, *args)


    def Selections(self, *args):
        """
        Selections(Handle_IGESSelect_DispPerDrawing self) -> IFSelect_SelectionIterator

        Returns the complete list of source Selections (starting
        from FinalSelection)

        :rtype: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_Selections(self, *args)


    def LimitedMax(self, *args):
        """
        LimitedMax(Handle_IGESSelect_DispPerDrawing self, Standard_Integer const nbent) -> Standard_Boolean

        Returns True if a Dispatch generates a count of Packets always
        less than or equal to a maximum value : it can be computed
        from the total count of Entities to be dispatched : <nbent>.
        If answer is False, no limited maximum is expected for account
        If answer is True, expected maximum is given in argument <max>
        Default answer given here is False (can be redefined)

        :type nbent: int
        :type max: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_LimitedMax(self, *args)


    def GetEntities(self, *args):
        """
        GetEntities(Handle_IGESSelect_DispPerDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Gets Unique Root Entities from the Final Selection, given an
        input Graph
        This the starting step for an Evaluation (Packets - Remainder)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_GetEntities(self, *args)


    def Packeted(self, *args):
        """
        Packeted(Handle_IGESSelect_DispPerDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of all Input Entities (see GetEntities) which
        are put in a Packet. That is, Entities listed in GetEntities
        but not in Remainder (see below). Input is given as a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_Packeted(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_DispPerDrawing self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_DispPerDrawing self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_DispPerDrawing self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_DispPerDrawing self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_DispPerDrawing self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_DispPerDrawing self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_DispPerDrawing self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_DispPerDrawing self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_DispPerDrawing self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_DispPerDrawing_DecrementRefCounter(self, *args)

Handle_IGESSelect_DispPerDrawing_swigregister = _IGESSelect.Handle_IGESSelect_DispPerDrawing_swigregister
Handle_IGESSelect_DispPerDrawing_swigregister(Handle_IGESSelect_DispPerDrawing)

def Handle_IGESSelect_DispPerDrawing_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_DispPerDrawing_DownCast(thing)
Handle_IGESSelect_DispPerDrawing_DownCast = _IGESSelect.Handle_IGESSelect_DispPerDrawing_DownCast

class Handle_IGESSelect_SetGlobalParameter(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SetGlobalParameter self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SetGlobalParameter self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SetGlobalParameter self, IGESSelect_SetGlobalParameter thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SetGlobalParameter self, Handle_IGESSelect_SetGlobalParameter theHandle) -> Handle_IGESSelect_SetGlobalParameter
        assign(Handle_IGESSelect_SetGlobalParameter self, IGESSelect_SetGlobalParameter thePtr) -> Handle_IGESSelect_SetGlobalParameter
        assign(Handle_IGESSelect_SetGlobalParameter self, Handle_IGESSelect_SetGlobalParameter theHandle) -> Handle_IGESSelect_SetGlobalParameter

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SetGlobalParameter self) -> IGESSelect_SetGlobalParameter

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SetGlobalParameter self) -> IGESSelect_SetGlobalParameter

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SetGlobalParameter self) -> IGESSelect_SetGlobalParameter

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SetGlobalParameter___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SetGlobalParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SetGlobalParameter_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SetGlobalParameter

    def GlobalNumber(self, *args):
        """
        GlobalNumber(Handle_IGESSelect_SetGlobalParameter self) -> Standard_Integer

        Returns the global parameter number to which this modifiers
        applies

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_GlobalNumber(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESSelect_SetGlobalParameter self, Handle_TCollection_HAsciiString text)

        Sets a Text Parameter for the new value

        :type text: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESSelect_SetGlobalParameter self) -> Handle_TCollection_HAsciiString

        Returns the value to set to the global parameter (Text Param)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Value(self, *args)


    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_SetGlobalParameter self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : the form of the new
        value is checked regarding the parameter number (given at
        creation time).

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SetGlobalParameter self) -> TCollection_AsciiString

        Returns a text which is
        "Sets Global Parameter <numpar> to <new value>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SetGlobalParameter self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SetGlobalParameter_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SetGlobalParameter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_SetGlobalParameter self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_SetGlobalParameter self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_SetGlobalParameter self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_SetGlobalParameter self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_SetGlobalParameter self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_SetGlobalParameter self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_SetGlobalParameter self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_SetGlobalParameter self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_SetGlobalParameter self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_SetGlobalParameter self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SetGlobalParameter self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SetGlobalParameter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SetGlobalParameter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SetGlobalParameter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SetGlobalParameter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SetGlobalParameter self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SetGlobalParameter self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SetGlobalParameter self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SetGlobalParameter self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_DecrementRefCounter(self, *args)

Handle_IGESSelect_SetGlobalParameter_swigregister = _IGESSelect.Handle_IGESSelect_SetGlobalParameter_swigregister
Handle_IGESSelect_SetGlobalParameter_swigregister(Handle_IGESSelect_SetGlobalParameter)

def Handle_IGESSelect_SetGlobalParameter_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SetGlobalParameter_DownCast(thing)
Handle_IGESSelect_SetGlobalParameter_DownCast = _IGESSelect.Handle_IGESSelect_SetGlobalParameter_DownCast

class Handle_IGESSelect_ChangeLevelNumber(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_ChangeLevelNumber self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_ChangeLevelNumber self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_ChangeLevelNumber self, IGESSelect_ChangeLevelNumber thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_ChangeLevelNumber self, Handle_IGESSelect_ChangeLevelNumber theHandle) -> Handle_IGESSelect_ChangeLevelNumber
        assign(Handle_IGESSelect_ChangeLevelNumber self, IGESSelect_ChangeLevelNumber thePtr) -> Handle_IGESSelect_ChangeLevelNumber
        assign(Handle_IGESSelect_ChangeLevelNumber self, Handle_IGESSelect_ChangeLevelNumber theHandle) -> Handle_IGESSelect_ChangeLevelNumber

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_ChangeLevelNumber self) -> IGESSelect_ChangeLevelNumber

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_ChangeLevelNumber self) -> IGESSelect_ChangeLevelNumber

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_ChangeLevelNumber self) -> IGESSelect_ChangeLevelNumber

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_ChangeLevelNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_ChangeLevelNumber_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_ChangeLevelNumber

    def HasOldNumber(self, *args):
        """
        HasOldNumber(Handle_IGESSelect_ChangeLevelNumber self) -> Standard_Boolean

        Returns True if OldNumber is defined : then, only entities
        attached to the value of OldNumber will be considered. Else,
        all entities but those attached to a Level List will be.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_HasOldNumber(self, *args)


    def OldNumber(self, *args):
        """
        OldNumber(Handle_IGESSelect_ChangeLevelNumber self) -> Handle_IFSelect_IntParam

        Returns the parameter for OldNumber. If not defined (Null
        Handle), it will be interpreted as "all level numbers"

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_OldNumber(self, *args)


    def SetOldNumber(self, *args):
        """
        SetOldNumber(Handle_IGESSelect_ChangeLevelNumber self, Handle_IFSelect_IntParam param)

        Sets a parameter for OldNumber

        :type param: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_SetOldNumber(self, *args)


    def NewNumber(self, *args):
        """
        NewNumber(Handle_IGESSelect_ChangeLevelNumber self) -> Handle_IFSelect_IntParam

        Returns the parameter for NewNumber. If not defined (Null
        Handle), it will be interpreted as "new value 0"

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_NewNumber(self, *args)


    def SetNewNumber(self, *args):
        """
        SetNewNumber(Handle_IGESSelect_ChangeLevelNumber self, Handle_IFSelect_IntParam param)

        Sets a parameter for NewNumber

        :type param: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_SetNewNumber(self, *args)


    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_ChangeLevelNumber self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : considers selected target entities :
        If OldNumber is not defined, all entities but those attached
        to a Level List
        If OldNumber is defined (value not negative), entities with a
        defined Level Number (can be zero)
        Attaches all these entities to value given by NewNumber, or
        zero if not defined

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_ChangeLevelNumber self) -> TCollection_AsciiString

        Returns a text which is
        "Changes Level Number <old> to <new>" , or
        "Changes all Levels Numbers positive and zero to <new>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_ChangeLevelNumber self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_ChangeLevelNumber self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_ChangeLevelNumber self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_ChangeLevelNumber self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_ChangeLevelNumber self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_ChangeLevelNumber self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_ChangeLevelNumber self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_ChangeLevelNumber self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_ChangeLevelNumber self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_ChangeLevelNumber self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_ChangeLevelNumber self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_ChangeLevelNumber self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_ChangeLevelNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_ChangeLevelNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_ChangeLevelNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_ChangeLevelNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_ChangeLevelNumber self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_ChangeLevelNumber self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_ChangeLevelNumber self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_ChangeLevelNumber self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_DecrementRefCounter(self, *args)

Handle_IGESSelect_ChangeLevelNumber_swigregister = _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_swigregister
Handle_IGESSelect_ChangeLevelNumber_swigregister(Handle_IGESSelect_ChangeLevelNumber)

def Handle_IGESSelect_ChangeLevelNumber_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_DownCast(thing)
Handle_IGESSelect_ChangeLevelNumber_DownCast = _IGESSelect.Handle_IGESSelect_ChangeLevelNumber_DownCast

class Handle_IGESSelect_ComputeStatus(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_ComputeStatus self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_ComputeStatus self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_ComputeStatus self, IGESSelect_ComputeStatus thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_ComputeStatus self, Handle_IGESSelect_ComputeStatus theHandle) -> Handle_IGESSelect_ComputeStatus
        assign(Handle_IGESSelect_ComputeStatus self, IGESSelect_ComputeStatus thePtr) -> Handle_IGESSelect_ComputeStatus
        assign(Handle_IGESSelect_ComputeStatus self, Handle_IGESSelect_ComputeStatus theHandle) -> Handle_IGESSelect_ComputeStatus

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_ComputeStatus self) -> IGESSelect_ComputeStatus

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_ComputeStatus self) -> IGESSelect_ComputeStatus

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_ComputeStatus self) -> IGESSelect_ComputeStatus

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_ComputeStatus___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_ComputeStatus___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_ComputeStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_ComputeStatus_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_ComputeStatus

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_ComputeStatus self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : it first evaluates the required values for
        Subordinate Status and Use Flag (in Directory Part of each
        IGES Entity). Then it corrects them, for the whole target.
        Works with a Protocol. Implementation uses BasicEditor

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_ComputeStatus self) -> TCollection_AsciiString

        Returns a text which is
        "Compute Subordinate Status and Use Flag"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_ComputeStatus self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ComputeStatus_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ComputeStatus_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_ComputeStatus self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_ComputeStatus self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_ComputeStatus self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_ComputeStatus self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_ComputeStatus self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_ComputeStatus self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_ComputeStatus self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_ComputeStatus self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_ComputeStatus self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_ComputeStatus self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_ComputeStatus self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_ComputeStatus self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_ComputeStatus self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_ComputeStatus self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_ComputeStatus self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_ComputeStatus self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_ComputeStatus self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_ComputeStatus self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_ComputeStatus self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ComputeStatus_DecrementRefCounter(self, *args)

Handle_IGESSelect_ComputeStatus_swigregister = _IGESSelect.Handle_IGESSelect_ComputeStatus_swigregister
Handle_IGESSelect_ComputeStatus_swigregister(Handle_IGESSelect_ComputeStatus)

def Handle_IGESSelect_ComputeStatus_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_ComputeStatus_DownCast(thing)
Handle_IGESSelect_ComputeStatus_DownCast = _IGESSelect.Handle_IGESSelect_ComputeStatus_DownCast

class IGESSelect_DispPerSingleView(IFSelect.IFSelect_Dispatch):
    """
    This type of dispatch defines sets of entities attached to
    distinct single views. This information appears in the
    Directory Part. Drawings are taken into account too,
    because of their frames (proper lists of annotations)

    Remaining data concern entities not attached to a single view.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_DispPerSingleView
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_DispPerSingleView(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_DispPerSingleView self) -> IGESSelect_DispPerSingleView

        Creates a DispPerSingleView


        """
        this = _IGESSelect.new_IGESSelect_DispPerSingleView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Label(self, *args):
        """
        Label(IGESSelect_DispPerSingleView self) -> TCollection_AsciiString

        Returns as Label, "One File per single View or Drawing Frame"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_DispPerSingleView_Label(self, *args)


    def Packets(self, *args):
        """
        Packets(IGESSelect_DispPerSingleView self, Interface_Graph G, IFGraph_SubPartsIterator packs)

        Computes the list of produced Packets. Packets are computed
        by a ViewSorter (SortSingleViews with also frames).

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type packs: OCC.wrapper.IFGraph.IFGraph_SubPartsIterator

        """
        return _IGESSelect.IGESSelect_DispPerSingleView_Packets(self, *args)


    def CanHaveRemainder(self, *args):
        """
        CanHaveRemainder(IGESSelect_DispPerSingleView self) -> Standard_Boolean

        Returns True, because of entities attached to no view.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_DispPerSingleView_CanHaveRemainder(self, *args)


    def Remainder(self, *args):
        """
        Remainder(IGESSelect_DispPerSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Returns Remainder which is a set of Entities.
        It is supposed to be called once Packets has been called.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.IGESSelect_DispPerSingleView_Remainder(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_DispPerSingleView_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_DispPerSingleView_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_DispPerSingleView_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_DispPerSingleView
IGESSelect_DispPerSingleView_swigregister = _IGESSelect.IGESSelect_DispPerSingleView_swigregister
IGESSelect_DispPerSingleView_swigregister(IGESSelect_DispPerSingleView)

def IGESSelect_DispPerSingleView_get_type_name(*args):
    """
    IGESSelect_DispPerSingleView_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_DispPerSingleView_get_type_name(*args)

def IGESSelect_DispPerSingleView_get_type_descriptor(*args):
    """
    IGESSelect_DispPerSingleView_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_DispPerSingleView_get_type_descriptor(*args)

class Handle_IGESSelect_ChangeLevelList(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_ChangeLevelList self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_ChangeLevelList self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_ChangeLevelList self, IGESSelect_ChangeLevelList thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_ChangeLevelList self, Handle_IGESSelect_ChangeLevelList theHandle) -> Handle_IGESSelect_ChangeLevelList
        assign(Handle_IGESSelect_ChangeLevelList self, IGESSelect_ChangeLevelList thePtr) -> Handle_IGESSelect_ChangeLevelList
        assign(Handle_IGESSelect_ChangeLevelList self, Handle_IGESSelect_ChangeLevelList theHandle) -> Handle_IGESSelect_ChangeLevelList

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_ChangeLevelList self) -> IGESSelect_ChangeLevelList

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_ChangeLevelList self) -> IGESSelect_ChangeLevelList

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_ChangeLevelList self) -> IGESSelect_ChangeLevelList

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_ChangeLevelList___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_ChangeLevelList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_ChangeLevelList_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_ChangeLevelList

    def HasOldNumber(self, *args):
        """
        HasOldNumber(Handle_IGESSelect_ChangeLevelList self) -> Standard_Boolean

        Returns True if OldNumber is defined : then, only entities
        which have a LevelList which contains the value are processed.
        Else, all entities attached to a LevelList are.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_HasOldNumber(self, *args)


    def OldNumber(self, *args):
        """
        OldNumber(Handle_IGESSelect_ChangeLevelList self) -> Handle_IFSelect_IntParam

        Returns the parameter for OldNumber. If not defined (Null
        Handle), it will be interpreted as "all level lists"

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_OldNumber(self, *args)


    def SetOldNumber(self, *args):
        """
        SetOldNumber(Handle_IGESSelect_ChangeLevelList self, Handle_IFSelect_IntParam param)

        Sets a parameter for OldNumber

        :type param: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_SetOldNumber(self, *args)


    def HasNewNumber(self, *args):
        """
        HasNewNumber(Handle_IGESSelect_ChangeLevelList self) -> Standard_Boolean

        Returns True if NewNumber is defined : then, it gives the new
        value for Level Number. Else, the first value of the LevelList
        is used as new Level Number.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_HasNewNumber(self, *args)


    def NewNumber(self, *args):
        """
        NewNumber(Handle_IGESSelect_ChangeLevelList self) -> Handle_IFSelect_IntParam

        Returns the parameter for NewNumber. If not defined (Null
        Handle), it will be interpreted as "new value 0"

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_NewNumber(self, *args)


    def SetNewNumber(self, *args):
        """
        SetNewNumber(Handle_IGESSelect_ChangeLevelList self, Handle_IFSelect_IntParam param)

        Sets a parameter for NewNumber

        :type param: OCC.wrapper.IFSelect.Handle_IFSelect_IntParam

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_SetNewNumber(self, *args)


    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_ChangeLevelList self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : considers selected target entities :
        If OldNumber is not defined, all entities attached to a
        Level List
        If OldNumber is defined (value not negative), entities with a
        Level List which contains this value
        Attaches all these entities to value given by NewNumber, or
        the first value of the Level List

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_ChangeLevelList self) -> TCollection_AsciiString

        Returns a text which begins by
        "Changes Level Lists containing <old>", or
        "Changes all Level Lists in D.E.", and ends by
        " to Number <new>"  or  " to Number = first value in List"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_ChangeLevelList self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ChangeLevelList_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_ChangeLevelList_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_ChangeLevelList self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_ChangeLevelList self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_ChangeLevelList self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_ChangeLevelList self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_ChangeLevelList self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_ChangeLevelList self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_ChangeLevelList self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_ChangeLevelList self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_ChangeLevelList self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_ChangeLevelList self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_ChangeLevelList self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_ChangeLevelList self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_ChangeLevelList self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_ChangeLevelList self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_ChangeLevelList self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_ChangeLevelList self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_ChangeLevelList self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_ChangeLevelList self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_ChangeLevelList self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_ChangeLevelList_DecrementRefCounter(self, *args)

Handle_IGESSelect_ChangeLevelList_swigregister = _IGESSelect.Handle_IGESSelect_ChangeLevelList_swigregister
Handle_IGESSelect_ChangeLevelList_swigregister(Handle_IGESSelect_ChangeLevelList)

def Handle_IGESSelect_ChangeLevelList_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_ChangeLevelList_DownCast(thing)
Handle_IGESSelect_ChangeLevelList_DownCast = _IGESSelect.Handle_IGESSelect_ChangeLevelList_DownCast

class IGESSelect_SelectBasicGeom(IFSelect.IFSelect_SelectExplore):
    """
    This selection returns the basic geometric elements
    contained in an IGES Entity
    Intended to run a "quick" transfer. I.E. :
    - for a Group, considers its Elements
    - for a Trimmed or Bounded Surface or a Face (BREP),
    considers the 3D curves of each of its loops
    - for a Plane (108), considers its Bounding Curve
    - for a Curve itself, takes it

    Also, FREE surfaces are taken, because curve 3d is known for
    them. (the ideal should be to have their natural bounds)

    If <curvesonly> is set, ONLY curves-3d are returned
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectBasicGeom
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectBasicGeom(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectBasicGeom self, Standard_Integer const mode) -> IGESSelect_SelectBasicGeom

        Creates a SelectBasicGeom, which allways works recursively
        mode = -1 : Returns Surfaces (without trimming)
        mode = +1 : Returns Curves 3D (free or bound of surface)
        mode = +2 : Returns Basic Curves 3D : as 1 but CompositeCurves
        are returned in detail
        mode = 0  : both

        :type mode: int

        """
        this = _IGESSelect.new_IGESSelect_SelectBasicGeom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Explore(self, *args):
        """
        Explore(IGESSelect_SelectBasicGeom self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity, to take its contained Curves 3d
        Works recursively

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectBasicGeom_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(IGESSelect_SelectBasicGeom self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Curves 3d" or
        "Basic Geometry"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectBasicGeom_ExploreLabel(self, *args)


    def SubCurves(*args):
        """
        SubCurves(Handle_IGESData_IGESEntity ent, Interface_EntityIterator explored) -> Standard_Boolean

        This method can be called from everywhere to get the curves
        as sub-elements of a given curve :
        CompositeCurve : explored lists its subs + returns True
        Any Curve : explored is not filled but returned is True
        Other : returned is False

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.IGESSelect_SelectBasicGeom_SubCurves(*args)

    SubCurves = staticmethod(SubCurves)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectBasicGeom_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectBasicGeom_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectBasicGeom_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectBasicGeom
IGESSelect_SelectBasicGeom_swigregister = _IGESSelect.IGESSelect_SelectBasicGeom_swigregister
IGESSelect_SelectBasicGeom_swigregister(IGESSelect_SelectBasicGeom)

def IGESSelect_SelectBasicGeom_SubCurves(*args):
    """
    IGESSelect_SelectBasicGeom_SubCurves(Handle_IGESData_IGESEntity ent, Interface_EntityIterator explored) -> Standard_Boolean

    This method can be called from everywhere to get the curves
    as sub-elements of a given curve :
    CompositeCurve : explored lists its subs + returns True
    Any Curve : explored is not filled but returned is True
    Other : returned is False

    :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :type explored: OCC.wrapper.Interface.Interface_EntityIterator
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESSelect.IGESSelect_SelectBasicGeom_SubCurves(*args)

def IGESSelect_SelectBasicGeom_get_type_name(*args):
    """
    IGESSelect_SelectBasicGeom_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectBasicGeom_get_type_name(*args)

def IGESSelect_SelectBasicGeom_get_type_descriptor(*args):
    """
    IGESSelect_SelectBasicGeom_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectBasicGeom_get_type_descriptor(*args)

class Handle_IGESSelect_AddFileComment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_AddFileComment self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_AddFileComment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_AddFileComment self, IGESSelect_AddFileComment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_AddFileComment self, Handle_IGESSelect_AddFileComment theHandle) -> Handle_IGESSelect_AddFileComment
        assign(Handle_IGESSelect_AddFileComment self, IGESSelect_AddFileComment thePtr) -> Handle_IGESSelect_AddFileComment
        assign(Handle_IGESSelect_AddFileComment self, Handle_IGESSelect_AddFileComment theHandle) -> Handle_IGESSelect_AddFileComment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_AddFileComment self) -> IGESSelect_AddFileComment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_AddFileComment self) -> IGESSelect_AddFileComment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_AddFileComment self) -> IGESSelect_AddFileComment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_AddFileComment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_AddFileComment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_AddFileComment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_AddFileComment_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_AddFileComment

    def Clear(self, *args):
        """
        Clear(Handle_IGESSelect_AddFileComment self)

        Clears the list of file comment lines already stored


        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Clear(self, *args)


    def AddLine(self, *args):
        """
        AddLine(Handle_IGESSelect_AddFileComment self, Standard_CString const line)

        Adds a line for file comment
        Remark : Lines are limited to 72 useful char.s . A line of more than
        72 char.s will be splited into several ones of 72 max each.

        :type line: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_AddLine(self, *args)


    def AddLines(self, *args):
        """
        AddLines(Handle_IGESSelect_AddFileComment self, Handle_TColStd_HSequenceOfHAsciiString lines)

        Adds a list of lines for file comment
        Each of them must comply with demand of AddLine

        :type lines: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_AddLines(self, *args)


    def NbLines(self, *args):
        """
        NbLines(Handle_IGESSelect_AddFileComment self) -> Standard_Integer

        Returns the count of stored lines

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_NbLines(self, *args)


    def Line(self, *args):
        """
        Line(Handle_IGESSelect_AddFileComment self, Standard_Integer const num) -> Standard_CString

        Returns a stored line given its rank

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Line(self, *args)


    def Lines(self, *args):
        """
        Lines(Handle_IGESSelect_AddFileComment self) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the complete list of lines in once

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Lines(self, *args)


    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_AddFileComment self, IFSelect_ContextWrite ctx, IGESData_IGESWriter writer)

        Sends the comment lines to the file (Start Section)

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextWrite
        :type writer: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Perform(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_AddFileComment self) -> TCollection_AsciiString

        Returns specific Label, which is
        "Add <nn> Comment Lines (Start Section)"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_AddFileComment self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_AddFileComment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_AddFileComment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_AddFileComment self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_AddFileComment self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_AddFileComment self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_AddFileComment self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_AddFileComment self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_AddFileComment self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_AddFileComment self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_AddFileComment self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_AddFileComment self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_AddFileComment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_AddFileComment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_AddFileComment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_AddFileComment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_AddFileComment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_AddFileComment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_AddFileComment self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_AddFileComment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_AddFileComment_DecrementRefCounter(self, *args)

Handle_IGESSelect_AddFileComment_swigregister = _IGESSelect.Handle_IGESSelect_AddFileComment_swigregister
Handle_IGESSelect_AddFileComment_swigregister(Handle_IGESSelect_AddFileComment)

def Handle_IGESSelect_AddFileComment_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_AddFileComment_DownCast(thing)
Handle_IGESSelect_AddFileComment_DownCast = _IGESSelect.Handle_IGESSelect_AddFileComment_DownCast

class Handle_IGESSelect_SetVersion5(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SetVersion5 self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SetVersion5 self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SetVersion5 self, IGESSelect_SetVersion5 thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SetVersion5 self, Handle_IGESSelect_SetVersion5 theHandle) -> Handle_IGESSelect_SetVersion5
        assign(Handle_IGESSelect_SetVersion5 self, IGESSelect_SetVersion5 thePtr) -> Handle_IGESSelect_SetVersion5
        assign(Handle_IGESSelect_SetVersion5 self, Handle_IGESSelect_SetVersion5 theHandle) -> Handle_IGESSelect_SetVersion5

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SetVersion5 self) -> IGESSelect_SetVersion5

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SetVersion5 self) -> IGESSelect_SetVersion5

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SetVersion5 self) -> IGESSelect_SetVersion5

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SetVersion5___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SetVersion5___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SetVersion5(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SetVersion5_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SetVersion5

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_SetVersion5 self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : IGES Version (coded)
        is upgraded to 5.1 if it is older, and it this case the new
        global parameter 25 (LastChangeDate) is set to current time

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SetVersion5 self) -> TCollection_AsciiString

        Returns a text which is
        "Update IGES Version to 5.1"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SetVersion5 self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SetVersion5_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SetVersion5_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_SetVersion5 self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_SetVersion5 self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_SetVersion5 self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_SetVersion5 self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_SetVersion5 self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_SetVersion5 self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_SetVersion5 self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_SetVersion5 self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_SetVersion5 self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_SetVersion5 self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SetVersion5 self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SetVersion5 self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SetVersion5 self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SetVersion5 self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SetVersion5 self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SetVersion5 self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SetVersion5 self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SetVersion5 self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SetVersion5 self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SetVersion5_DecrementRefCounter(self, *args)

Handle_IGESSelect_SetVersion5_swigregister = _IGESSelect.Handle_IGESSelect_SetVersion5_swigregister
Handle_IGESSelect_SetVersion5_swigregister(Handle_IGESSelect_SetVersion5)

def Handle_IGESSelect_SetVersion5_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SetVersion5_DownCast(thing)
Handle_IGESSelect_SetVersion5_DownCast = _IGESSelect.Handle_IGESSelect_SetVersion5_DownCast

class Handle_IGESSelect_WorkLibrary(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_WorkLibrary self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_WorkLibrary self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_WorkLibrary self, IGESSelect_WorkLibrary thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_WorkLibrary self, Handle_IGESSelect_WorkLibrary theHandle) -> Handle_IGESSelect_WorkLibrary
        assign(Handle_IGESSelect_WorkLibrary self, IGESSelect_WorkLibrary thePtr) -> Handle_IGESSelect_WorkLibrary
        assign(Handle_IGESSelect_WorkLibrary self, Handle_IGESSelect_WorkLibrary theHandle) -> Handle_IGESSelect_WorkLibrary

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_WorkLibrary self) -> IGESSelect_WorkLibrary

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_WorkLibrary self) -> IGESSelect_WorkLibrary

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_WorkLibrary self) -> IGESSelect_WorkLibrary

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_WorkLibrary___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_WorkLibrary___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_WorkLibrary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_WorkLibrary_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_WorkLibrary

    def ReadFile(self, *args):
        """
        ReadFile(Handle_IGESSelect_WorkLibrary self, Standard_CString const name, Handle_Interface_InterfaceModel model, Handle_Interface_Protocol protocol) -> Standard_Integer

        Reads a IGES File and returns a IGES Model (into <mod>),
        or lets <mod> "Null" in case of Error
        Returns 0 if OK, 1 if Read Error, -1 if File not opened

        :type name: OCC.wrapper.Standard.Standard_CString
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_ReadFile(self, *args)


    def WriteFile(self, *args):
        """
        WriteFile(Handle_IGESSelect_WorkLibrary self, IFSelect_ContextWrite ctx) -> Standard_Boolean

        Writes a File from a IGES Model (brought by <ctx>)
        Returns False (and writes no file) if <ctx> is not for IGES

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextWrite
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_WriteFile(self, *args)


    def DefineProtocol(self, *args):
        """
        DefineProtocol(Handle_IGESSelect_WorkLibrary self) -> Handle_IGESData_Protocol

        Defines a protocol to be adequate for IGES
        (encompasses ALL the IGES norm including IGESSolid, IGESAppli)

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_Protocol

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_DefineProtocol(self, *args)


    def DumpEntity(self, *args):
        """
        DumpEntity(Handle_IGESSelect_WorkLibrary self, Handle_Interface_InterfaceModel model, Handle_Interface_Protocol protocol, Handle_Standard_Transient entity, Handle_Message_Messenger S, Standard_Integer const level)

        Dumps an IGES Entity with an IGES Dumper. <level> is the one
        used by IGESDumper.

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type entity: OCC.wrapper.Standard.Handle_Standard_Transient
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type level: int

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_DumpEntity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_WorkLibrary self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_WorkLibrary_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_WorkLibrary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CopyModel(self, *args):
        """
        CopyModel(Handle_IGESSelect_WorkLibrary self, Handle_Interface_InterfaceModel original, Handle_Interface_InterfaceModel newmodel, Interface_EntityIterator list, Interface_CopyTool TC) -> Standard_Boolean

        Performs the copy of entities from an original model to a new
        one. It must also copy headers if any. Returns True when done.
        The provided default works by copying the individual entities
        designated in the list, by using the general service class
        CopyTool.
        It can be redefined for a norm which, either implements Copy
        by another way (do not forget to Bind each copied result with
        its original entity in TC) and returns True, or does not know
        how to copy and returns False

        :type original: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type newmodel: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type list: OCC.wrapper.Interface.Interface_EntityIterator
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_CopyModel(self, *args)


    def SetDumpLevels(self, *args):
        """
        SetDumpLevels(Handle_IGESSelect_WorkLibrary self, Standard_Integer const arg2, Standard_Integer const max)

        Records a default level and a maximum value for level
        level for DumpEntity can go between 0 and <max>
        default value will be <def>

        :type def: int
        :type max: int

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_SetDumpLevels(self, *args)


    def DumpLevels(self, *args):
        """
        DumpLevels(Handle_IGESSelect_WorkLibrary self)

        Returns the recorded default and maximum dump levels
        If none was recorded, max is returned negative, def as zero

        :type def: int
        :type max: int

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_DumpLevels(self, *args)


    def SetDumpHelp(self, *args):
        """
        SetDumpHelp(Handle_IGESSelect_WorkLibrary self, Standard_Integer const level, Standard_CString const help)

        Records a short line of help for a level (0 - max)

        :type level: int
        :type help: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_SetDumpHelp(self, *args)


    def DumpHelp(self, *args):
        """
        DumpHelp(Handle_IGESSelect_WorkLibrary self, Standard_Integer const level) -> Standard_CString

        Returns the help line recorded for <level>, or an empty string

        :type level: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_DumpHelp(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_WorkLibrary self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_WorkLibrary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_WorkLibrary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_WorkLibrary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_WorkLibrary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_WorkLibrary self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_WorkLibrary self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_WorkLibrary self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_WorkLibrary self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_WorkLibrary_DecrementRefCounter(self, *args)

Handle_IGESSelect_WorkLibrary_swigregister = _IGESSelect.Handle_IGESSelect_WorkLibrary_swigregister
Handle_IGESSelect_WorkLibrary_swigregister(Handle_IGESSelect_WorkLibrary)

def Handle_IGESSelect_WorkLibrary_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_WorkLibrary_DownCast(thing)
Handle_IGESSelect_WorkLibrary_DownCast = _IGESSelect.Handle_IGESSelect_WorkLibrary_DownCast

class Handle_IGESSelect_AddGroup(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_AddGroup self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_AddGroup self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_AddGroup self, IGESSelect_AddGroup thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_AddGroup self, Handle_IGESSelect_AddGroup theHandle) -> Handle_IGESSelect_AddGroup
        assign(Handle_IGESSelect_AddGroup self, IGESSelect_AddGroup thePtr) -> Handle_IGESSelect_AddGroup
        assign(Handle_IGESSelect_AddGroup self, Handle_IGESSelect_AddGroup theHandle) -> Handle_IGESSelect_AddGroup

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_AddGroup self) -> IGESSelect_AddGroup

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_AddGroup self) -> IGESSelect_AddGroup

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_AddGroup self) -> IGESSelect_AddGroup

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_AddGroup___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_AddGroup___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_AddGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_AddGroup_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_AddGroup

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_AddGroup self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Adds a new group

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_AddGroup self) -> TCollection_AsciiString

        Returns a text which is
        "Add Group"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_AddGroup self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_AddGroup_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_AddGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_AddGroup self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_AddGroup self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_AddGroup self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_AddGroup self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_AddGroup self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_AddGroup self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_AddGroup self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_AddGroup self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_AddGroup self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_AddGroup self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_AddGroup self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_AddGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_AddGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_AddGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_AddGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_AddGroup self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_AddGroup self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_AddGroup self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_AddGroup self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_AddGroup_DecrementRefCounter(self, *args)

Handle_IGESSelect_AddGroup_swigregister = _IGESSelect.Handle_IGESSelect_AddGroup_swigregister
Handle_IGESSelect_AddGroup_swigregister(Handle_IGESSelect_AddGroup)

def Handle_IGESSelect_AddGroup_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_AddGroup_DownCast(thing)
Handle_IGESSelect_AddGroup_DownCast = _IGESSelect.Handle_IGESSelect_AddGroup_DownCast

class Handle_IGESSelect_SelectName(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectName self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectName_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectName self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectName self, IGESSelect_SelectName thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectName self, Handle_IGESSelect_SelectName theHandle) -> Handle_IGESSelect_SelectName
        assign(Handle_IGESSelect_SelectName self, IGESSelect_SelectName thePtr) -> Handle_IGESSelect_SelectName
        assign(Handle_IGESSelect_SelectName self, Handle_IGESSelect_SelectName theHandle) -> Handle_IGESSelect_SelectName

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectName self) -> IGESSelect_SelectName

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectName self) -> IGESSelect_SelectName

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectName___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectName self) -> IGESSelect_SelectName

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectName___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectName___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectName___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectName_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectName

    def Sort(self, *args):
        """
        Sort(Handle_IGESSelect_SelectName self, Standard_Integer const rank, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if Name of Entity complies with Name Filter

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_Sort(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_IGESSelect_SelectName self, Handle_TCollection_HAsciiString name)

        Sets a Name as a criterium : IGES Entities which have this name
        are kept (without regular expression, there should be at most
        one). <name> can be regarded as a Text Parameter

        :type name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_SelectName self) -> Handle_TCollection_HAsciiString

        Returns the Name used as Filter

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_Name(self, *args)


    def ExtractLabel(self, *args):
        """
        ExtractLabel(Handle_IGESSelect_SelectName self) -> TCollection_AsciiString

        Returns the Selection criterium : "IGES Entity, Name : <name>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_ExtractLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectName self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectName_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDirect(self, *args):
        """
        IsDirect(Handle_IGESSelect_SelectName self) -> Standard_Boolean

        Returns True if Sort criterium is Direct, False if Reverse

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_IsDirect(self, *args)


    def SetDirect(self, *args):
        """
        SetDirect(Handle_IGESSelect_SelectName self, Standard_Boolean const direct)

        Sets Sort criterium sense to a new value
        (True : Direct , False : Reverse)

        :type direct: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_SetDirect(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectName self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Sort on each input Entity : the Entity is kept as
        output if Sort returns the same value as Direct status

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_RootResult(self, *args)


    def SortInGraph(self, *args):
        """
        SortInGraph(Handle_IGESSelect_SelectName self, Standard_Integer const rank, Handle_Standard_Transient ent, Interface_Graph G) -> Standard_Boolean

        Works as Sort but works on the Graph
        Default directly calls Sort, but it can be redefined
        If SortInGraph is redefined, Sort should be defined even if
        not called (to avoid deferred methods in a final class)

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_SortInGraph(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectName self) -> TCollection_AsciiString

        Returns a text saying "Picked" or "Removed", plus the
        specific criterium returned by ExtractLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectName self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectName self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectName self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectName self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectName self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectName self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectName self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectName self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectName self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectName self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectName_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectName self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectName self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectName self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectName_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectName self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectName_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectName_swigregister = _IGESSelect.Handle_IGESSelect_SelectName_swigregister
Handle_IGESSelect_SelectName_swigregister(Handle_IGESSelect_SelectName)

def Handle_IGESSelect_SelectName_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectName_DownCast(thing)
Handle_IGESSelect_SelectName_DownCast = _IGESSelect.Handle_IGESSelect_SelectName_DownCast

class Handle_IGESSelect_SignLevelNumber(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SignLevelNumber self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SignLevelNumber self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SignLevelNumber self, IGESSelect_SignLevelNumber thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SignLevelNumber self, Handle_IGESSelect_SignLevelNumber theHandle) -> Handle_IGESSelect_SignLevelNumber
        assign(Handle_IGESSelect_SignLevelNumber self, IGESSelect_SignLevelNumber thePtr) -> Handle_IGESSelect_SignLevelNumber
        assign(Handle_IGESSelect_SignLevelNumber self, Handle_IGESSelect_SignLevelNumber theHandle) -> Handle_IGESSelect_SignLevelNumber

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SignLevelNumber self) -> IGESSelect_SignLevelNumber

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SignLevelNumber self) -> IGESSelect_SignLevelNumber

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SignLevelNumber self) -> IGESSelect_SignLevelNumber

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SignLevelNumber___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SignLevelNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SignLevelNumber_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SignLevelNumber

    def Value(self, *args):
        """
        Value(Handle_IGESSelect_SignLevelNumber self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the value (see above)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SignLevelNumber self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SignLevelNumber_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SignLevelNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetIntCase(self, *args):
        """
        SetIntCase(Handle_IGESSelect_SignLevelNumber self, Standard_Boolean const hasmin, Standard_Integer const valmin, Standard_Boolean const hasmax, Standard_Integer const valmax)

        Sets the information data to tell "integer cases" with
        possible min and max values
        To be called when creating

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_SetIntCase(self, *args)


    def IsIntCase(self, *args):
        """
        IsIntCase(Handle_IGESSelect_SignLevelNumber self) -> Standard_Boolean

        Tells if this Signature gives integer values
        and returns values from SetIntCase if True

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_IsIntCase(self, *args)


    def AddCase(self, *args):
        """
        AddCase(Handle_IGESSelect_SignLevelNumber self, Standard_CString const acase)

        Adds a possible case
        To be called when creating, IF the list of possible cases for
        Value is known when starting
        For instance, for CDL types, rather do not fill this,
        but for a specific enumeration (such as a status), can be used

        :type acase: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_AddCase(self, *args)


    def CaseList(self, *args):
        """
        CaseList(Handle_IGESSelect_SignLevelNumber self) -> Handle_TColStd_HSequenceOfAsciiString

        Returns the predefined list of possible cases, filled by AddCase
        Null Handle if no predefined list (hence, to be counted)
        Useful to filter on  really possible vase, for instance, or
        for a help

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_CaseList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_SignLevelNumber self) -> Standard_CString

        Returns an identification of the Signature (a word), given at
        initialization time
        Returns the Signature for a Transient object. It is specific
        of each sub-class of Signature. For a Null Handle, it should
        provide ""
        It can work with the model which contains the entity

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_Name(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SignLevelNumber self) -> TCollection_AsciiString

        The label of a Signature uses its name as follow :
        "Signature : <name>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_Label(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_IGESSelect_SignLevelNumber self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Tells if the value for <ent> in <model> matches a text, with
        a criterium <exact>.
        The default definition calls MatchValue
        Can be redefined

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_Matches(self, *args)


    def MatchValue(self, *args):
        """
        MatchValue(Handle_IGESSelect_SignLevelNumber self, Standard_CString const val, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Default procedure to tell if a value <val> matches a text
        with a criterium <exact>. <exact> = True requires equality,
        else only contained (no reg-exp)

        :type val: OCC.wrapper.Standard.Standard_CString
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_MatchValue(self, *args)


    def IntValue(self, *args):
        """
        IntValue(Handle_IGESSelect_SignLevelNumber self, Standard_Integer const val) -> Standard_CString

        This procedure converts an Integer to a CString
        It is a convenient way when the value of a signature has the
        form of a simple integer value
        The value is to be used immediately (one buffer only, no copy)

        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_IntValue(self, *args)


    def Text(self, *args):
        """
        Text(Handle_IGESSelect_SignLevelNumber self, Handle_Standard_Transient ent, Handle_Standard_Transient context) -> TCollection_AsciiString

        Returns an identification of the Signature (a word), given at
        initialization time
        Specialised to consider context as an InterfaceModel

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type context: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_Text(self, *args)


    def ClassName(self, *args):
        """
        ClassName(Handle_IGESSelect_SignLevelNumber self, Standard_CString const typnam) -> Standard_CString

        From a CDL Type Name, returns the Class part (package dropped)
        WARNING : buffered, to be immediately copied or printed

        :type typnam: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_ClassName(self, *args)


    def TextAlone(self, *args):
        """
        TextAlone(Handle_IGESSelect_SignLevelNumber self, Handle_Standard_Transient ent) -> TCollection_AsciiString

        Gives a text as a signature for a transient object alone, i.e.
        without defined context.
        By default, calls Text with undefined context (Null Handle) and
        if empty, then returns DynamicType

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_TextAlone(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SignLevelNumber self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SignLevelNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SignLevelNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SignLevelNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SignLevelNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SignLevelNumber self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SignLevelNumber self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SignLevelNumber self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SignLevelNumber self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SignLevelNumber_DecrementRefCounter(self, *args)

Handle_IGESSelect_SignLevelNumber_swigregister = _IGESSelect.Handle_IGESSelect_SignLevelNumber_swigregister
Handle_IGESSelect_SignLevelNumber_swigregister(Handle_IGESSelect_SignLevelNumber)

def Handle_IGESSelect_SignLevelNumber_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SignLevelNumber_DownCast(thing)
Handle_IGESSelect_SignLevelNumber_DownCast = _IGESSelect.Handle_IGESSelect_SignLevelNumber_DownCast

class IGESSelect_SelectDrawingFrom(IFSelect.IFSelect_SelectDeduct):
    """
    This selection gets the Drawings attached to its input IGES
    entities. They are read through thr Single Views, referenced
    in Directory Parts of the entities
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSelect_SelectDrawingFrom
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSelect_SelectDrawingFrom(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSelect_SelectDrawingFrom self) -> IGESSelect_SelectDrawingFrom

        Creates a SelectDrawingFrom


        """
        this = _IGESSelect.new_IGESSelect_SelectDrawingFrom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def RootResult(self, *args):
        """
        RootResult(IGESSelect_SelectDrawingFrom self, Interface_Graph G) -> Interface_EntityIterator

        Selects the Drawings attached (through Single Views in
        Directory Part) to input entities

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.IGESSelect_SelectDrawingFrom_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(IGESSelect_SelectDrawingFrom self) -> TCollection_AsciiString

        Returns the label, with is "Drawings attached"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.IGESSelect_SelectDrawingFrom_Label(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSelect.IGESSelect_SelectDrawingFrom_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSelect.IGESSelect_SelectDrawingFrom_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.IGESSelect_SelectDrawingFrom_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSelect.delete_IGESSelect_SelectDrawingFrom
IGESSelect_SelectDrawingFrom_swigregister = _IGESSelect.IGESSelect_SelectDrawingFrom_swigregister
IGESSelect_SelectDrawingFrom_swigregister(IGESSelect_SelectDrawingFrom)

def IGESSelect_SelectDrawingFrom_get_type_name(*args):
    """
    IGESSelect_SelectDrawingFrom_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSelect.IGESSelect_SelectDrawingFrom_get_type_name(*args)

def IGESSelect_SelectDrawingFrom_get_type_descriptor(*args):
    """
    IGESSelect_SelectDrawingFrom_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSelect.IGESSelect_SelectDrawingFrom_get_type_descriptor(*args)

class Handle_IGESSelect_SelectDrawingFrom(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectDrawingFrom self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectDrawingFrom self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectDrawingFrom self, IGESSelect_SelectDrawingFrom thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectDrawingFrom self, Handle_IGESSelect_SelectDrawingFrom theHandle) -> Handle_IGESSelect_SelectDrawingFrom
        assign(Handle_IGESSelect_SelectDrawingFrom self, IGESSelect_SelectDrawingFrom thePtr) -> Handle_IGESSelect_SelectDrawingFrom
        assign(Handle_IGESSelect_SelectDrawingFrom self, Handle_IGESSelect_SelectDrawingFrom theHandle) -> Handle_IGESSelect_SelectDrawingFrom

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectDrawingFrom self) -> IGESSelect_SelectDrawingFrom

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectDrawingFrom self) -> IGESSelect_SelectDrawingFrom

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectDrawingFrom self) -> IGESSelect_SelectDrawingFrom

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectDrawingFrom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectDrawingFrom_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectDrawingFrom

    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectDrawingFrom self, Interface_Graph G) -> Interface_EntityIterator

        Selects the Drawings attached (through Single Views in
        Directory Part) to input entities

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectDrawingFrom self) -> TCollection_AsciiString

        Returns the label, with is "Drawings attached"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectDrawingFrom self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectDrawingFrom self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectDrawingFrom self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectDrawingFrom self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectDrawingFrom self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectDrawingFrom self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectDrawingFrom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectDrawingFrom self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectDrawingFrom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectDrawingFrom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectDrawingFrom self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectDrawingFrom self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectDrawingFrom self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectDrawingFrom self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectDrawingFrom self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectDrawingFrom self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectDrawingFrom self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectDrawingFrom self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectDrawingFrom self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectDrawingFrom_swigregister = _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_swigregister
Handle_IGESSelect_SelectDrawingFrom_swigregister(Handle_IGESSelect_SelectDrawingFrom)

def Handle_IGESSelect_SelectDrawingFrom_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_DownCast(thing)
Handle_IGESSelect_SelectDrawingFrom_DownCast = _IGESSelect.Handle_IGESSelect_SelectDrawingFrom_DownCast

class IGESSelect_(object):
    """
    This package defines the library of the most used tools for
    IGES Files : Selections & Modifiers specific to the IGES norm,
    and the most needed converters
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Run(*args):
        """
        Run()

        Simply gives a prompt for a conversational action on standard
        input/output. Returns the status of a


        """
        return _IGESSelect.IGESSelect__Run(*args)

    Run = staticmethod(Run)

    def WhatIges(*args):
        """
        WhatIges(Handle_IGESData_IGESEntity ent, Interface_Graph G, Handle_IGESData_IGESEntity sup) -> Standard_Integer

        Gives a quick analysis of an IGES Entity in the context of a
        model (i.e. a File) described by a Graph.
        Returned values are :
        <sup> : the most meaningfull super entity, if any (else Null)
        <index> : meaningfull index relating to super entity, if any
        <returned> : a status which helps exploitation of <sup>, by
        giving a case
        (normally, types of <ent> and <sup> should suffice to
        known the case)

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type sup: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.IGESSelect__WhatIges(*args)

    WhatIges = staticmethod(WhatIges)

    def __init__(self):
        """
        This package defines the library of the most used tools for
        IGES Files : Selections & Modifiers specific to the IGES norm,
        and the most needed converters
        """
        this = _IGESSelect.new_IGESSelect_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESSelect.delete_IGESSelect_
IGESSelect__swigregister = _IGESSelect.IGESSelect__swigregister
IGESSelect__swigregister(IGESSelect_)

def IGESSelect__Run(*args):
    """
    IGESSelect__Run()

    Simply gives a prompt for a conversational action on standard
    input/output. Returns the status of a


    """
    return _IGESSelect.IGESSelect__Run(*args)

def IGESSelect__WhatIges(*args):
    """
    IGESSelect__WhatIges(Handle_IGESData_IGESEntity ent, Interface_Graph G, Handle_IGESData_IGESEntity sup) -> Standard_Integer

    Gives a quick analysis of an IGES Entity in the context of a
    model (i.e. a File) described by a Graph.
    Returned values are :
    <sup> : the most meaningfull super entity, if any (else Null)
    <index> : meaningfull index relating to super entity, if any
    <returned> : a status which helps exploitation of <sup>, by
    giving a case
    (normally, types of <ent> and <sup> should suffice to
    known the case)

    :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :type G: OCC.wrapper.Interface.Interface_Graph
    :type sup: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :type index: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESSelect.IGESSelect__WhatIges(*args)

class Handle_IGESSelect_SelectBypassSubfigure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectBypassSubfigure self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectBypassSubfigure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectBypassSubfigure self, IGESSelect_SelectBypassSubfigure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectBypassSubfigure self, Handle_IGESSelect_SelectBypassSubfigure theHandle) -> Handle_IGESSelect_SelectBypassSubfigure
        assign(Handle_IGESSelect_SelectBypassSubfigure self, IGESSelect_SelectBypassSubfigure thePtr) -> Handle_IGESSelect_SelectBypassSubfigure
        assign(Handle_IGESSelect_SelectBypassSubfigure self, Handle_IGESSelect_SelectBypassSubfigure theHandle) -> Handle_IGESSelect_SelectBypassSubfigure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectBypassSubfigure self) -> IGESSelect_SelectBypassSubfigure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectBypassSubfigure self) -> IGESSelect_SelectBypassSubfigure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectBypassSubfigure self) -> IGESSelect_SelectBypassSubfigure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectBypassSubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectBypassSubfigure

    def Explore(self, *args):
        """
        Explore(Handle_IGESSelect_SelectBypassSubfigure self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity : for a Subfigure, gives its elements
        Else, takes the entity itself

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(Handle_IGESSelect_SelectBypassSubfigure self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Content of Subfigure"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_ExploreLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectBypassSubfigure self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Level(self, *args):
        """
        Level(Handle_IGESSelect_SelectBypassSubfigure self) -> Standard_Integer

        Returns the required exploring level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_Level(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectBypassSubfigure self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Explore on each input entity : it can be rejected,
        taken for output, or to explore. If the maximum level has not
        yet been attained, or if no max level is specified, entities
        to be explored are themselves used as if they were input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectBypassSubfigure self) -> TCollection_AsciiString

        Returns a text saying "(Recursive)" or "(Level nn)" plus
        specific criterium returned by ExploreLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectBypassSubfigure self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectBypassSubfigure self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectBypassSubfigure self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectBypassSubfigure self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectBypassSubfigure self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectBypassSubfigure self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectBypassSubfigure self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectBypassSubfigure self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectBypassSubfigure self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectBypassSubfigure self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectBypassSubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectBypassSubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectBypassSubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectBypassSubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectBypassSubfigure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectBypassSubfigure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectBypassSubfigure self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectBypassSubfigure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectBypassSubfigure_swigregister = _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_swigregister
Handle_IGESSelect_SelectBypassSubfigure_swigregister(Handle_IGESSelect_SelectBypassSubfigure)

def Handle_IGESSelect_SelectBypassSubfigure_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_DownCast(thing)
Handle_IGESSelect_SelectBypassSubfigure_DownCast = _IGESSelect.Handle_IGESSelect_SelectBypassSubfigure_DownCast

class Handle_IGESSelect_SelectVisibleStatus(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectVisibleStatus self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectVisibleStatus self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectVisibleStatus self, IGESSelect_SelectVisibleStatus thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectVisibleStatus self, Handle_IGESSelect_SelectVisibleStatus theHandle) -> Handle_IGESSelect_SelectVisibleStatus
        assign(Handle_IGESSelect_SelectVisibleStatus self, IGESSelect_SelectVisibleStatus thePtr) -> Handle_IGESSelect_SelectVisibleStatus
        assign(Handle_IGESSelect_SelectVisibleStatus self, Handle_IGESSelect_SelectVisibleStatus theHandle) -> Handle_IGESSelect_SelectVisibleStatus

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectVisibleStatus self) -> IGESSelect_SelectVisibleStatus

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectVisibleStatus self) -> IGESSelect_SelectVisibleStatus

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectVisibleStatus self) -> IGESSelect_SelectVisibleStatus

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectVisibleStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectVisibleStatus_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectVisibleStatus

    def Sort(self, *args):
        """
        Sort(Handle_IGESSelect_SelectVisibleStatus self, Standard_Integer const rank, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <ent> is an IGES Entity with Blank Status = 0

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_Sort(self, *args)


    def ExtractLabel(self, *args):
        """
        ExtractLabel(Handle_IGESSelect_SelectVisibleStatus self) -> TCollection_AsciiString

        Returns the Selection criterium : "IGES Entity, Status Visible"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_ExtractLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectVisibleStatus self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDirect(self, *args):
        """
        IsDirect(Handle_IGESSelect_SelectVisibleStatus self) -> Standard_Boolean

        Returns True if Sort criterium is Direct, False if Reverse

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_IsDirect(self, *args)


    def SetDirect(self, *args):
        """
        SetDirect(Handle_IGESSelect_SelectVisibleStatus self, Standard_Boolean const direct)

        Sets Sort criterium sense to a new value
        (True : Direct , False : Reverse)

        :type direct: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_SetDirect(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectVisibleStatus self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Sort on each input Entity : the Entity is kept as
        output if Sort returns the same value as Direct status

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_RootResult(self, *args)


    def SortInGraph(self, *args):
        """
        SortInGraph(Handle_IGESSelect_SelectVisibleStatus self, Standard_Integer const rank, Handle_Standard_Transient ent, Interface_Graph G) -> Standard_Boolean

        Works as Sort but works on the Graph
        Default directly calls Sort, but it can be redefined
        If SortInGraph is redefined, Sort should be defined even if
        not called (to avoid deferred methods in a final class)

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_SortInGraph(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectVisibleStatus self) -> TCollection_AsciiString

        Returns a text saying "Picked" or "Removed", plus the
        specific criterium returned by ExtractLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectVisibleStatus self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectVisibleStatus self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectVisibleStatus self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectVisibleStatus self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectVisibleStatus self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectVisibleStatus self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectVisibleStatus self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectVisibleStatus self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectVisibleStatus self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectVisibleStatus self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectVisibleStatus self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectVisibleStatus self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectVisibleStatus self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectVisibleStatus self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectVisibleStatus self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectVisibleStatus self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectVisibleStatus self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectVisibleStatus self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectVisibleStatus_swigregister = _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_swigregister
Handle_IGESSelect_SelectVisibleStatus_swigregister(Handle_IGESSelect_SelectVisibleStatus)

def Handle_IGESSelect_SelectVisibleStatus_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_DownCast(thing)
Handle_IGESSelect_SelectVisibleStatus_DownCast = _IGESSelect.Handle_IGESSelect_SelectVisibleStatus_DownCast

class Handle_IGESSelect_UpdateCreationDate(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_UpdateCreationDate self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_UpdateCreationDate self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_UpdateCreationDate self, IGESSelect_UpdateCreationDate thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_UpdateCreationDate self, Handle_IGESSelect_UpdateCreationDate theHandle) -> Handle_IGESSelect_UpdateCreationDate
        assign(Handle_IGESSelect_UpdateCreationDate self, IGESSelect_UpdateCreationDate thePtr) -> Handle_IGESSelect_UpdateCreationDate
        assign(Handle_IGESSelect_UpdateCreationDate self, Handle_IGESSelect_UpdateCreationDate theHandle) -> Handle_IGESSelect_UpdateCreationDate

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_UpdateCreationDate self) -> IGESSelect_UpdateCreationDate

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_UpdateCreationDate self) -> IGESSelect_UpdateCreationDate

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_UpdateCreationDate self) -> IGESSelect_UpdateCreationDate

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_UpdateCreationDate___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_UpdateCreationDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_UpdateCreationDate_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_UpdateCreationDate

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_UpdateCreationDate self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : only <target> is used : the system Date
        is set to Global Section Item n0 18.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_UpdateCreationDate self) -> TCollection_AsciiString

        Returns a text which is
        "Update IGES Header Creation Date"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_UpdateCreationDate self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_UpdateCreationDate_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_UpdateCreationDate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_UpdateCreationDate self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_UpdateCreationDate self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_UpdateCreationDate self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_UpdateCreationDate self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_UpdateCreationDate self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_UpdateCreationDate self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_UpdateCreationDate self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_UpdateCreationDate self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_UpdateCreationDate self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_UpdateCreationDate self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_UpdateCreationDate self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_UpdateCreationDate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_UpdateCreationDate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_UpdateCreationDate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_UpdateCreationDate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_UpdateCreationDate self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_UpdateCreationDate self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_UpdateCreationDate self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_UpdateCreationDate self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_DecrementRefCounter(self, *args)

Handle_IGESSelect_UpdateCreationDate_swigregister = _IGESSelect.Handle_IGESSelect_UpdateCreationDate_swigregister
Handle_IGESSelect_UpdateCreationDate_swigregister(Handle_IGESSelect_UpdateCreationDate)

def Handle_IGESSelect_UpdateCreationDate_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_UpdateCreationDate_DownCast(thing)
Handle_IGESSelect_UpdateCreationDate_DownCast = _IGESSelect.Handle_IGESSelect_UpdateCreationDate_DownCast

class Handle_IGESSelect_CounterOfLevelNumber(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_CounterOfLevelNumber self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_CounterOfLevelNumber self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_CounterOfLevelNumber self, IGESSelect_CounterOfLevelNumber thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_CounterOfLevelNumber self, Handle_IGESSelect_CounterOfLevelNumber theHandle) -> Handle_IGESSelect_CounterOfLevelNumber
        assign(Handle_IGESSelect_CounterOfLevelNumber self, IGESSelect_CounterOfLevelNumber thePtr) -> Handle_IGESSelect_CounterOfLevelNumber
        assign(Handle_IGESSelect_CounterOfLevelNumber self, Handle_IGESSelect_CounterOfLevelNumber theHandle) -> Handle_IGESSelect_CounterOfLevelNumber

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_CounterOfLevelNumber self) -> IGESSelect_CounterOfLevelNumber

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_CounterOfLevelNumber self) -> IGESSelect_CounterOfLevelNumber

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_CounterOfLevelNumber self) -> IGESSelect_CounterOfLevelNumber

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_CounterOfLevelNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_CounterOfLevelNumber

    def Clear(self, *args):
        """
        Clear(Handle_IGESSelect_CounterOfLevelNumber self)

        Resets already memorized informations : also numeric data


        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Clear(self, *args)


    def AddSign(self, *args):
        """
        AddSign(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model)

        Adds an entity by considering its lrvrl number(s)
        A level is added both in numeric and alphanumeric form,
        i.e. LevelList gives "LEVEL LIST", others (no level or
        positive level) displays level number on 7 digits (C : %7d)
        Remark : an entity attached to a Level List is added for
        " LEVEL LIST", and for each of its constituant levels

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_AddSign(self, *args)


    def AddLevel(self, *args):
        """
        AddLevel(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Standard_Integer const level)

        The internal action to record a new level number, positive,
        null (no level) or negative (level list)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type level: int

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_AddLevel(self, *args)


    def HighestLevel(self, *args):
        """
        HighestLevel(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_Integer

        Returns the highest value found for a level number

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_HighestLevel(self, *args)


    def NbTimesLevel(self, *args):
        """
        NbTimesLevel(Handle_IGESSelect_CounterOfLevelNumber self, Standard_Integer const level) -> Standard_Integer

        Returns the number of times a level is used,
        0 if it has not been recorded at all
        <level> = 0 counts entities attached to no level
        <level> < 0 counts entities attached to a LevelList

        :type level: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_NbTimesLevel(self, *args)


    def Levels(self, *args):
        """
        Levels(Handle_IGESSelect_CounterOfLevelNumber self) -> Handle_TColStd_HSequenceOfInteger

        Returns the ordered list of used positive Level numbers

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfInteger

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Levels(self, *args)


    def Sign(self, *args):
        """
        Sign(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Handle_TCollection_HAsciiString

        Determines and returns the value of the signature for an
        entity as an HAsciiString. Redefined, gives the same result
        as AddSign, see this method ("LEVEL LIST" or "nnnnnnn")

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Sign(self, *args)


    def PrintCount(self, *args):
        """
        PrintCount(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Message_Messenger S)

        Prints the counts of items (not the list) then the Highest
        Level Number recorded

        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_PrintCount(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_CounterOfLevelNumber self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Signature(self, *args):
        """
        Signature(Handle_IGESSelect_CounterOfLevelNumber self) -> Handle_IFSelect_Signature

        Returns the Signature used to count entities. It can be null.

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Signature

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Signature(self, *args)


    def SetMap(self, *args):
        """
        SetMap(Handle_IGESSelect_CounterOfLevelNumber self, Standard_Boolean const withmap)

        Changes the control status. The map is not cleared, simply
        its use changes

        :type withmap: bool

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_SetMap(self, *args)


    def AddEntity(self, *args):
        """
        AddEntity(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Adds an entity by considering its signature, which is given by
        call to method AddSign
        Returns True if added, False if already in the map (and
        map control status set)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_AddEntity(self, *args)


    def AddList(self, *args):
        """
        AddList(Handle_IGESSelect_CounterOfLevelNumber self, Handle_TColStd_HSequenceOfTransient list, Handle_Interface_InterfaceModel model)

        Adds a list of entities by adding each of the items

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_AddList(self, *args)


    def AddWithGraph(self, *args):
        """
        AddWithGraph(Handle_IGESSelect_CounterOfLevelNumber self, Handle_TColStd_HSequenceOfTransient list, Interface_Graph graph)

        Adds a list of entities in the context given by the graph
        Default just call basic AddList
        Can be redefined to get a signature computed with the graph

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
        :type graph: OCC.wrapper.Interface.Interface_Graph

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_AddWithGraph(self, *args)


    def AddModel(self, *args):
        """
        AddModel(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Interface_InterfaceModel model)

        Adds all the entities contained in a Model

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_AddModel(self, *args)


    def AddFromSelection(self, *args):
        """
        AddFromSelection(Handle_IGESSelect_CounterOfLevelNumber self, Handle_IFSelect_Selection sel, Interface_Graph G)

        Adds the result determined by a Selection from a Graph
        Remark : does not impact at all data from SetSelection & Co

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection
        :type G: OCC.wrapper.Interface.Interface_Graph

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_AddFromSelection(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_CounterOfLevelNumber self, Handle_IFSelect_Selection sel)

        Sets a Selection as input : this causes content to be cleared
        then the Selection to be ready to compute (but not immediatly)

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_SetSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_CounterOfLevelNumber self) -> Handle_IFSelect_Selection

        Returns the selection, or a null Handle

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Selection(self, *args)


    def SetSelMode(self, *args):
        """
        SetSelMode(Handle_IGESSelect_CounterOfLevelNumber self, Standard_Integer const selmode)

        Changes the mode of working with the selection :
        -1 just clears optimisation data and nothing else
        0 clears it   1 inhibits it for computing (but no clearing)
        2 sets it active for computing
        Default at creation is 0, after SetSelection (not null) is 2

        :type selmode: int

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_SetSelMode(self, *args)


    def SelMode(self, *args):
        """
        SelMode(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_Integer

        Returns the mode of working with the selection

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_SelMode(self, *args)


    def ComputeSelected(self, *args):
        """
        ComputeSelected(Handle_IGESSelect_CounterOfLevelNumber self, Interface_Graph G, Standard_Boolean const forced) -> Standard_Boolean

        Computes from the selection result, if selection is active
        (mode 2). If selection is not defined (mode 0) or is inhibited
        (mode 1) does nothing.
        Returns True if computation is done (or optimised), False else
        This method is called by ComputeCounter from WorkSession

        If <forced> is True, recomputes systematically
        Else (D), if the counter was not cleared and if the former
        computed result started from the same total size of Graph and
        same count of selected entities : computation is not redone
        unless <forced> is given as True

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type forced: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_ComputeSelected(self, *args)


    def ComputedSign(self, *args):
        """
        ComputedSign(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Interface_Graph G) -> Standard_CString

        Applies AddWithGraph on one entity, and returns the Signature
        Value which has been recorded
        To do this, Add is called with SignOnly Mode True during the
        call, the returned value is LastValue

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_ComputedSign(self, *args)


    def SetList(self, *args):
        """
        SetList(Handle_IGESSelect_CounterOfLevelNumber self, Standard_Boolean const withlist)

        Changes the record-list status. The list is not cleared but
        its use changes

        :type withlist: bool

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_SetList(self, *args)


    def ModeSignOnly(self, *args):
        """
        ModeSignOnly(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_Boolean &

        Returns modifiable the SignOnly Mode
        If False (D), the counter normally counts
        If True, the counting work is turned off, Add only fills the
        LastValue, which can be used as signature, when a counter
        works from data which are not available from a Signature

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_ModeSignOnly(self, *args)


    def Add(self, *args):
        """
        Add(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Standard_Transient ent, Standard_CString const sign)

        Adds an entity with its signature, i.e. :
        - counts an item more for <sign>
        - if record-list status is set, records the entity
        Accepts a null entity (the signature is then for the global
        model). But if the string is empty, counts a Null item.

        If SignOnly Mode is set, this work is replaced by just
        setting LastValue

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type sign: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Add(self, *args)


    def LastValue(self, *args):
        """
        LastValue(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_CString

        Returns the last value recorded by Add (only if SignMode set)
        Cleared by Clear or Init

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_LastValue(self, *args)


    def Init(self, *args):
        """
        Init(Handle_IGESSelect_CounterOfLevelNumber self, Standard_CString const name, NCollection_IndexedDataMap< TCollection_AsciiString,Standard_Integer > const & count, NCollection_IndexedDataMap< TCollection_AsciiString,opencascade::handle< Standard_Transient > > const & list, Standard_Integer const nbnuls)

        Aknowledges the list in once. Name identifies the Signature

        :type name: OCC.wrapper.Standard.Standard_CString
        :type count: OCC.wrapper.IFSelect.NCollection_IndexedDataMap_TCollection_AsciiString_Standard_Integer
        :type list: OCC.wrapper.IFSelect.NCollection_IndexedDataMap_TCollection_AsciiString_Handle_Standard_Transient
        :type nbnuls: int

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Init(self, *args)


    def List(self, *args):
        """
        List(Handle_IGESSelect_CounterOfLevelNumber self, Standard_CString const root) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the list of signatures, as a sequence of strings
        (but without their respective counts). It is ordered.
        By default, for all the signatures.
        If <root> is given non empty, for the signatures which
        begin by <root>

        :type root: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_List(self, *args)


    def HasEntities(self, *args):
        """
        HasEntities(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_Boolean

        Returns True if the list of Entities is aknowledged, else
        the method Entities will always return a Null Handle

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_HasEntities(self, *args)


    def NbNulls(self, *args):
        """
        NbNulls(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_Integer

        Returns the count of null entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_NbNulls(self, *args)


    def NbTimes(self, *args):
        """
        NbTimes(Handle_IGESSelect_CounterOfLevelNumber self, Standard_CString const sign) -> Standard_Integer

        Returns the number of times a signature was counted,
        0 if it has not been recorded at all

        :type sign: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_NbTimes(self, *args)


    def Entities(self, *args):
        """
        Entities(Handle_IGESSelect_CounterOfLevelNumber self, Standard_CString const sign) -> Handle_TColStd_HSequenceOfTransient

        Returns the list of entities attached to a signature
        It is empty if <sign> has not been recorded
        It is a Null Handle if the list of entities is not known

        :type sign: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Entities(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_IGESSelect_CounterOfLevelNumber self, Standard_CString const name)

        Defines a name for a SignatureList (used to print it)

        :type name: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_CString

        Returns the recorded Name.
        Remark : default is "..." (no SetName called)

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Name(self, *args)


    def PrintList(self, *args):
        """
        PrintList(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Message_Messenger S, Handle_Interface_InterfaceModel model, IFSelect_PrintCount const mod=IFSelect_ListByItem)

        Prints the lists of items, if they are present (else, prints
        a message "no list available")
        Uses <model> to determine for each entity to be listed, its
        number, and its specific identifier (by PrintLabel)
        <mod> gives a mode for printing :
        - CountByItem : just count (as PrintCount)
        - ShortByItem : minimum i.e. count plus 5 first entity numbers
        - ShortByItem(D) complete list of entity numbers (0: "Global")
        - EntitiesByItem : list of (entity number/PrintLabel from the model)
        other modes are ignored

        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type mod: OCC.wrapper.IFSelect.IFSelect_PrintCount

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_PrintList(self, *args)


    def PrintSum(self, *args):
        """
        PrintSum(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Message_Messenger S)

        Prints a summary
        Item which has the greatest count of entities
        For items which are numeric values : their count, maximum,
        minimum values, cumul, average

        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_PrintSum(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_CounterOfLevelNumber self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_CounterOfLevelNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_CounterOfLevelNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_CounterOfLevelNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_CounterOfLevelNumber self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_CounterOfLevelNumber self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_DecrementRefCounter(self, *args)

Handle_IGESSelect_CounterOfLevelNumber_swigregister = _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_swigregister
Handle_IGESSelect_CounterOfLevelNumber_swigregister(Handle_IGESSelect_CounterOfLevelNumber)

def Handle_IGESSelect_CounterOfLevelNumber_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_DownCast(thing)
Handle_IGESSelect_CounterOfLevelNumber_DownCast = _IGESSelect.Handle_IGESSelect_CounterOfLevelNumber_DownCast

class Handle_IGESSelect_SelectBypassGroup(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectBypassGroup self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectBypassGroup self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectBypassGroup self, IGESSelect_SelectBypassGroup thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectBypassGroup self, Handle_IGESSelect_SelectBypassGroup theHandle) -> Handle_IGESSelect_SelectBypassGroup
        assign(Handle_IGESSelect_SelectBypassGroup self, IGESSelect_SelectBypassGroup thePtr) -> Handle_IGESSelect_SelectBypassGroup
        assign(Handle_IGESSelect_SelectBypassGroup self, Handle_IGESSelect_SelectBypassGroup theHandle) -> Handle_IGESSelect_SelectBypassGroup

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectBypassGroup self) -> IGESSelect_SelectBypassGroup

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectBypassGroup self) -> IGESSelect_SelectBypassGroup

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectBypassGroup self) -> IGESSelect_SelectBypassGroup

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectBypassGroup___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectBypassGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectBypassGroup_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectBypassGroup

    def Explore(self, *args):
        """
        Explore(Handle_IGESSelect_SelectBypassGroup self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity : for a Group, gives its elements
        Else, takes the entity itself

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(Handle_IGESSelect_SelectBypassGroup self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Content of Group"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_ExploreLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectBypassGroup self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectBypassGroup_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectBypassGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Level(self, *args):
        """
        Level(Handle_IGESSelect_SelectBypassGroup self) -> Standard_Integer

        Returns the required exploring level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_Level(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectBypassGroup self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Explore on each input entity : it can be rejected,
        taken for output, or to explore. If the maximum level has not
        yet been attained, or if no max level is specified, entities
        to be explored are themselves used as if they were input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectBypassGroup self) -> TCollection_AsciiString

        Returns a text saying "(Recursive)" or "(Level nn)" plus
        specific criterium returned by ExploreLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectBypassGroup self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectBypassGroup self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectBypassGroup self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectBypassGroup self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectBypassGroup self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectBypassGroup self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectBypassGroup self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectBypassGroup self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectBypassGroup self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectBypassGroup self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectBypassGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectBypassGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectBypassGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectBypassGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectBypassGroup self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectBypassGroup self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectBypassGroup self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectBypassGroup self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectBypassGroup_swigregister = _IGESSelect.Handle_IGESSelect_SelectBypassGroup_swigregister
Handle_IGESSelect_SelectBypassGroup_swigregister(Handle_IGESSelect_SelectBypassGroup)

def Handle_IGESSelect_SelectBypassGroup_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectBypassGroup_DownCast(thing)
Handle_IGESSelect_SelectBypassGroup_DownCast = _IGESSelect.Handle_IGESSelect_SelectBypassGroup_DownCast

class Handle_IGESSelect_SelectSubordinate(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectSubordinate self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectSubordinate self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectSubordinate self, IGESSelect_SelectSubordinate thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectSubordinate self, Handle_IGESSelect_SelectSubordinate theHandle) -> Handle_IGESSelect_SelectSubordinate
        assign(Handle_IGESSelect_SelectSubordinate self, IGESSelect_SelectSubordinate thePtr) -> Handle_IGESSelect_SelectSubordinate
        assign(Handle_IGESSelect_SelectSubordinate self, Handle_IGESSelect_SelectSubordinate theHandle) -> Handle_IGESSelect_SelectSubordinate

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectSubordinate self) -> IGESSelect_SelectSubordinate

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectSubordinate self) -> IGESSelect_SelectSubordinate

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectSubordinate self) -> IGESSelect_SelectSubordinate

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectSubordinate___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectSubordinate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectSubordinate_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectSubordinate

    def Status(self, *args):
        """
        Status(Handle_IGESSelect_SelectSubordinate self) -> Standard_Integer

        Returns the status used for sorting

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_Status(self, *args)


    def Sort(self, *args):
        """
        Sort(Handle_IGESSelect_SelectSubordinate self, Standard_Integer const rank, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <ent> is an IGES Entity with Subordinate
        Status matching the criterium

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_Sort(self, *args)


    def ExtractLabel(self, *args):
        """
        ExtractLabel(Handle_IGESSelect_SelectSubordinate self) -> TCollection_AsciiString

        Returns the Selection criterium : "IGES Entity, Independant"
        etc...

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_ExtractLabel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectSubordinate self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectSubordinate_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectSubordinate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDirect(self, *args):
        """
        IsDirect(Handle_IGESSelect_SelectSubordinate self) -> Standard_Boolean

        Returns True if Sort criterium is Direct, False if Reverse

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_IsDirect(self, *args)


    def SetDirect(self, *args):
        """
        SetDirect(Handle_IGESSelect_SelectSubordinate self, Standard_Boolean const direct)

        Sets Sort criterium sense to a new value
        (True : Direct , False : Reverse)

        :type direct: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_SetDirect(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectSubordinate self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Sort on each input Entity : the Entity is kept as
        output if Sort returns the same value as Direct status

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_RootResult(self, *args)


    def SortInGraph(self, *args):
        """
        SortInGraph(Handle_IGESSelect_SelectSubordinate self, Standard_Integer const rank, Handle_Standard_Transient ent, Interface_Graph G) -> Standard_Boolean

        Works as Sort but works on the Graph
        Default directly calls Sort, but it can be redefined
        If SortInGraph is redefined, Sort should be defined even if
        not called (to avoid deferred methods in a final class)

        :type rank: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_SortInGraph(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectSubordinate self) -> TCollection_AsciiString

        Returns a text saying "Picked" or "Removed", plus the
        specific criterium returned by ExtractLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectSubordinate self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectSubordinate self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectSubordinate self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectSubordinate self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectSubordinate self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectSubordinate self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectSubordinate self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectSubordinate self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectSubordinate self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectSubordinate self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectSubordinate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectSubordinate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectSubordinate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectSubordinate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectSubordinate self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectSubordinate self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectSubordinate self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectSubordinate self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectSubordinate_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectSubordinate_swigregister = _IGESSelect.Handle_IGESSelect_SelectSubordinate_swigregister
Handle_IGESSelect_SelectSubordinate_swigregister(Handle_IGESSelect_SelectSubordinate)

def Handle_IGESSelect_SelectSubordinate_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectSubordinate_DownCast(thing)
Handle_IGESSelect_SelectSubordinate_DownCast = _IGESSelect.Handle_IGESSelect_SelectSubordinate_DownCast

class Handle_IGESSelect_SelectFromDrawing(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectFromDrawing self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectFromDrawing self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectFromDrawing self, IGESSelect_SelectFromDrawing thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectFromDrawing self, Handle_IGESSelect_SelectFromDrawing theHandle) -> Handle_IGESSelect_SelectFromDrawing
        assign(Handle_IGESSelect_SelectFromDrawing self, IGESSelect_SelectFromDrawing thePtr) -> Handle_IGESSelect_SelectFromDrawing
        assign(Handle_IGESSelect_SelectFromDrawing self, Handle_IGESSelect_SelectFromDrawing theHandle) -> Handle_IGESSelect_SelectFromDrawing

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectFromDrawing self) -> IGESSelect_SelectFromDrawing

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectFromDrawing self) -> IGESSelect_SelectFromDrawing

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectFromDrawing self) -> IGESSelect_SelectFromDrawing

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectFromDrawing___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectFromDrawing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectFromDrawing_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectFromDrawing

    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectFromDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Selects the Entities which are attached to the Drawing(s)
        present in the Input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectFromDrawing self) -> TCollection_AsciiString

        Returns the label, with is "Entities attached to Drawing"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectFromDrawing self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectFromDrawing_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectFromDrawing_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectFromDrawing self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectFromDrawing self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectFromDrawing self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectFromDrawing self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectFromDrawing self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectFromDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectFromDrawing self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectFromDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectFromDrawing self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectFromDrawing self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectFromDrawing self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectFromDrawing self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectFromDrawing self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectFromDrawing self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectFromDrawing self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectFromDrawing self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectFromDrawing self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectFromDrawing self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectFromDrawing_swigregister = _IGESSelect.Handle_IGESSelect_SelectFromDrawing_swigregister
Handle_IGESSelect_SelectFromDrawing_swigregister(Handle_IGESSelect_SelectFromDrawing)

def Handle_IGESSelect_SelectFromDrawing_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectFromDrawing_DownCast(thing)
Handle_IGESSelect_SelectFromDrawing_DownCast = _IGESSelect.Handle_IGESSelect_SelectFromDrawing_DownCast

class Handle_IGESSelect_DispPerSingleView(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_DispPerSingleView self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_DispPerSingleView self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_DispPerSingleView self, IGESSelect_DispPerSingleView thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_DispPerSingleView self, Handle_IGESSelect_DispPerSingleView theHandle) -> Handle_IGESSelect_DispPerSingleView
        assign(Handle_IGESSelect_DispPerSingleView self, IGESSelect_DispPerSingleView thePtr) -> Handle_IGESSelect_DispPerSingleView
        assign(Handle_IGESSelect_DispPerSingleView self, Handle_IGESSelect_DispPerSingleView theHandle) -> Handle_IGESSelect_DispPerSingleView

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_DispPerSingleView self) -> IGESSelect_DispPerSingleView

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_DispPerSingleView self) -> IGESSelect_DispPerSingleView

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_DispPerSingleView self) -> IGESSelect_DispPerSingleView

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_DispPerSingleView___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_DispPerSingleView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_DispPerSingleView_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_DispPerSingleView

    def Label(self, *args):
        """
        Label(Handle_IGESSelect_DispPerSingleView self) -> TCollection_AsciiString

        Returns as Label, "One File per single View or Drawing Frame"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_Label(self, *args)


    def Packets(self, *args):
        """
        Packets(Handle_IGESSelect_DispPerSingleView self, Interface_Graph G, IFGraph_SubPartsIterator packs)

        Computes the list of produced Packets. Packets are computed
        by a ViewSorter (SortSingleViews with also frames).

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type packs: OCC.wrapper.IFGraph.IFGraph_SubPartsIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_Packets(self, *args)


    def CanHaveRemainder(self, *args):
        """
        CanHaveRemainder(Handle_IGESSelect_DispPerSingleView self) -> Standard_Boolean

        Returns True, because of entities attached to no view.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_CanHaveRemainder(self, *args)


    def Remainder(self, *args):
        """
        Remainder(Handle_IGESSelect_DispPerSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Returns Remainder which is a set of Entities.
        It is supposed to be called once Packets has been called.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_Remainder(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_DispPerSingleView self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_DispPerSingleView_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_DispPerSingleView_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetRootName(self, *args):
        """
        SetRootName(Handle_IGESSelect_DispPerSingleView self, Handle_TCollection_HAsciiString name)

        Sets a Root Name as an HAsciiString
        To reset it, give a Null Handle (then, a ShareOut will have
        to define the Default Root Name)

        :type name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_SetRootName(self, *args)


    def HasRootName(self, *args):
        """
        HasRootName(Handle_IGESSelect_DispPerSingleView self) -> Standard_Boolean

        Returns True if a specific Root Name has been set
        (else, the Default Root Name has to be used)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_HasRootName(self, *args)


    def RootName(self, *args):
        """
        Returns the Root Name for files produced by this dispatch
        It is empty if it has not been set or if it has been reset

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        res = _IGESSelect.Handle_IGESSelect_DispPerSingleView_RootName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetFinalSelection(self, *args):
        """
        SetFinalSelection(Handle_IGESSelect_DispPerSingleView self, Handle_IFSelect_Selection sel)

        Stores (or Changes) the Final Selection for a Dispatch

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_SetFinalSelection(self, *args)


    def FinalSelection(self, *args):
        """
        FinalSelection(Handle_IGESSelect_DispPerSingleView self) -> Handle_IFSelect_Selection

        Returns the Final Selection of a Dispatch
        we 'd like : C++ : return const &

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_FinalSelection(self, *args)


    def Selections(self, *args):
        """
        Selections(Handle_IGESSelect_DispPerSingleView self) -> IFSelect_SelectionIterator

        Returns the complete list of source Selections (starting
        from FinalSelection)

        :rtype: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_Selections(self, *args)


    def LimitedMax(self, *args):
        """
        LimitedMax(Handle_IGESSelect_DispPerSingleView self, Standard_Integer const nbent) -> Standard_Boolean

        Returns True if a Dispatch generates a count of Packets always
        less than or equal to a maximum value : it can be computed
        from the total count of Entities to be dispatched : <nbent>.
        If answer is False, no limited maximum is expected for account
        If answer is True, expected maximum is given in argument <max>
        Default answer given here is False (can be redefined)

        :type nbent: int
        :type max: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_LimitedMax(self, *args)


    def GetEntities(self, *args):
        """
        GetEntities(Handle_IGESSelect_DispPerSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Gets Unique Root Entities from the Final Selection, given an
        input Graph
        This the starting step for an Evaluation (Packets - Remainder)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_GetEntities(self, *args)


    def Packeted(self, *args):
        """
        Packeted(Handle_IGESSelect_DispPerSingleView self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of all Input Entities (see GetEntities) which
        are put in a Packet. That is, Entities listed in GetEntities
        but not in Remainder (see below). Input is given as a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_Packeted(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_DispPerSingleView self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_DispPerSingleView self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_DispPerSingleView self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_DispPerSingleView self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_DispPerSingleView self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_DispPerSingleView self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_DispPerSingleView self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_DispPerSingleView self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_DispPerSingleView self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_DispPerSingleView_DecrementRefCounter(self, *args)

Handle_IGESSelect_DispPerSingleView_swigregister = _IGESSelect.Handle_IGESSelect_DispPerSingleView_swigregister
Handle_IGESSelect_DispPerSingleView_swigregister(Handle_IGESSelect_DispPerSingleView)

def Handle_IGESSelect_DispPerSingleView_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_DispPerSingleView_DownCast(thing)
Handle_IGESSelect_DispPerSingleView_DownCast = _IGESSelect.Handle_IGESSelect_DispPerSingleView_DownCast

class Handle_IGESSelect_FloatFormat(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_FloatFormat self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_FloatFormat self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_FloatFormat self, IGESSelect_FloatFormat thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_FloatFormat self, Handle_IGESSelect_FloatFormat theHandle) -> Handle_IGESSelect_FloatFormat
        assign(Handle_IGESSelect_FloatFormat self, IGESSelect_FloatFormat thePtr) -> Handle_IGESSelect_FloatFormat
        assign(Handle_IGESSelect_FloatFormat self, Handle_IGESSelect_FloatFormat theHandle) -> Handle_IGESSelect_FloatFormat

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_FloatFormat self) -> IGESSelect_FloatFormat

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_FloatFormat self) -> IGESSelect_FloatFormat

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_FloatFormat self) -> IGESSelect_FloatFormat

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_FloatFormat___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_FloatFormat___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_FloatFormat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_FloatFormat_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_FloatFormat

    def SetDefault(self, *args):
        """
        SetDefault(Handle_IGESSelect_FloatFormat self, Standard_Integer const digits=0)

        Sets FloatFormat to default value (see Create) but if <digits>
        is given positive, it commands Formats (main and range) to
        ensure <digits> significant digits to be displayed

        :type digits: int

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_SetDefault(self, *args)


    def SetZeroSuppress(self, *args):
        """
        SetZeroSuppress(Handle_IGESSelect_FloatFormat self, Standard_Boolean const mode)

        Sets ZeroSuppress mode to a new value

        :type mode: bool

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_SetZeroSuppress(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_IGESSelect_FloatFormat self, Standard_CString const format)

        Sets Main Format to a new value
        Remark : SetFormat, SetZeroSuppress and SetFormatForRange are
        independant

        :type format: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_SetFormat(self, *args)


    def SetFormatForRange(self, *args):
        """
        SetFormatForRange(Handle_IGESSelect_FloatFormat self, Standard_CString const format, Standard_Real const Rmin=0.1, Standard_Real const Rmax=1000.0)

        Sets Format for Range to a new value with its range of
        application.
        To cancel it, give format as "" (empty string)
        Remark that if the condition (0. < Rmin < Rmax)  is not
        verified, this secondary format will be ignored.
        Moreover, this secondary format is intended to be used in a
        range around 1.

        :type format: OCC.wrapper.Standard.Standard_CString
        :type Rmin: float
        :type Rmax: float

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_SetFormatForRange(self, *args)


    def Format(self, *args):
        """
        Format(Handle_IGESSelect_FloatFormat self, TCollection_AsciiString mainform, TCollection_AsciiString forminrange)

        Returns all recorded parameters :
        zerosup  : ZeroSuppress status
        mainform : Main Format (which applies out of the range, or
        for every real if no range is set)
        hasrange : True if a FormatInRange is set, False else
        (following parameters do not apply if it is False)
        forminrange : Secondary Format (it applies inside the range)
        rangemin, rangemax : the range in which the secondary format
        applies

        :type zerosup: bool
        :type mainform: OCC.wrapper.TCollection.TCollection_AsciiString
        :type hasrange: bool
        :type forminrange: OCC.wrapper.TCollection.TCollection_AsciiString
        :type rangemin: float
        :type rangemax: float

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_Format(self, *args)


    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_FloatFormat self, IFSelect_ContextWrite ctx, IGESData_IGESWriter writer)

        Sets the Floatting Formats of IGESWriter to the recorded
        parameters

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextWrite
        :type writer: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_Perform(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_FloatFormat self) -> TCollection_AsciiString

        Returns specific Label : for instance,
        "Float Format [ZeroSuppress] %E [, in range R1-R2 %f]"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_FloatFormat self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_FloatFormat_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_FloatFormat_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_FloatFormat self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_FloatFormat self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_FloatFormat self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_FloatFormat self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_FloatFormat self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_FloatFormat self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_FloatFormat self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_FloatFormat self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_FloatFormat self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_FloatFormat self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_FloatFormat self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_FloatFormat self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_FloatFormat self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_FloatFormat self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_FloatFormat self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_FloatFormat self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_FloatFormat self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_FloatFormat_DecrementRefCounter(self, *args)

Handle_IGESSelect_FloatFormat_swigregister = _IGESSelect.Handle_IGESSelect_FloatFormat_swigregister
Handle_IGESSelect_FloatFormat_swigregister(Handle_IGESSelect_FloatFormat)

def Handle_IGESSelect_FloatFormat_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_FloatFormat_DownCast(thing)
Handle_IGESSelect_FloatFormat_DownCast = _IGESSelect.Handle_IGESSelect_FloatFormat_DownCast

class Handle_IGESSelect_SelectBasicGeom(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_SelectBasicGeom self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_SelectBasicGeom self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_SelectBasicGeom self, IGESSelect_SelectBasicGeom thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_SelectBasicGeom self, Handle_IGESSelect_SelectBasicGeom theHandle) -> Handle_IGESSelect_SelectBasicGeom
        assign(Handle_IGESSelect_SelectBasicGeom self, IGESSelect_SelectBasicGeom thePtr) -> Handle_IGESSelect_SelectBasicGeom
        assign(Handle_IGESSelect_SelectBasicGeom self, Handle_IGESSelect_SelectBasicGeom theHandle) -> Handle_IGESSelect_SelectBasicGeom

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_SelectBasicGeom self) -> IGESSelect_SelectBasicGeom

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_SelectBasicGeom self) -> IGESSelect_SelectBasicGeom

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_SelectBasicGeom self) -> IGESSelect_SelectBasicGeom

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_SelectBasicGeom___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_SelectBasicGeom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_SelectBasicGeom_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_SelectBasicGeom

    def Explore(self, *args):
        """
        Explore(Handle_IGESSelect_SelectBasicGeom self, Standard_Integer const level, Handle_Standard_Transient ent, Interface_Graph G, Interface_EntityIterator explored) -> Standard_Boolean

        Explores an entity, to take its contained Curves 3d
        Works recursively

        :type level: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type G: OCC.wrapper.Interface.Interface_Graph
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_Explore(self, *args)


    def ExploreLabel(self, *args):
        """
        ExploreLabel(Handle_IGESSelect_SelectBasicGeom self) -> TCollection_AsciiString

        Returns a text defining the criterium : "Curves 3d" or
        "Basic Geometry"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_ExploreLabel(self, *args)


    def SubCurves(self, *args):
        """
        SubCurves(Handle_IGESSelect_SelectBasicGeom self, Handle_IGESData_IGESEntity ent, Interface_EntityIterator explored) -> Standard_Boolean

        This method can be called from everywhere to get the curves
        as sub-elements of a given curve :
        CompositeCurve : explored lists its subs + returns True
        Any Curve : explored is not filled but returned is True
        Other : returned is False

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type explored: OCC.wrapper.Interface.Interface_EntityIterator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_SubCurves(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_SelectBasicGeom self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectBasicGeom_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_SelectBasicGeom_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Level(self, *args):
        """
        Level(Handle_IGESSelect_SelectBasicGeom self) -> Standard_Integer

        Returns the required exploring level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_Level(self, *args)


    def RootResult(self, *args):
        """
        RootResult(Handle_IGESSelect_SelectBasicGeom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities. Works by calling the
        method Explore on each input entity : it can be rejected,
        taken for output, or to explore. If the maximum level has not
        yet been attained, or if no max level is specified, entities
        to be explored are themselves used as if they were input

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_RootResult(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_SelectBasicGeom self) -> TCollection_AsciiString

        Returns a text saying "(Recursive)" or "(Level nn)" plus
        specific criterium returned by ExploreLabel (see below)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_Label(self, *args)


    def SetInput(self, *args):
        """
        SetInput(Handle_IGESSelect_SelectBasicGeom self, Handle_IFSelect_Selection sel)

        Defines or Changes the Input Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_SetInput(self, *args)


    def Input(self, *args):
        """
        Input(Handle_IGESSelect_SelectBasicGeom self) -> Handle_IFSelect_Selection

        Returns the Input Selection

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_Input(self, *args)


    def HasInput(self, *args):
        """
        HasInput(Handle_IGESSelect_SelectBasicGeom self) -> Standard_Boolean

        Returns True if the Input Selection is defined, False else

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_HasInput(self, *args)


    def HasAlternate(self, *args):
        """
        HasAlternate(Handle_IGESSelect_SelectBasicGeom self) -> Standard_Boolean

        Tells if an Alternate List has been set, i.e. : the Alternate
        Definition is present and set

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_HasAlternate(self, *args)


    def Alternate(self, *args):
        """
        Alternate(Handle_IGESSelect_SelectBasicGeom self) -> Handle_IFSelect_SelectPointed

        Returns the Alternate Definition
        It is returned modifiable, hence an already defined
        SelectPointed can be used
        But if it was not yet defined, it is created the first time

        It is exploited by InputResult

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectPointed

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_Alternate(self, *args)


    def InputResult(self, *args):
        """
        InputResult(Handle_IGESSelect_SelectBasicGeom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the Result determined by Input Selection, as Unique
        if Input Selection is not defined, returns an empty list.

        If Alternate is set, InputResult takes its definition instead
        of calling the Input Selection, then clears it

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_InputResult(self, *args)


    def FillIterator(self, *args):
        """
        FillIterator(Handle_IGESSelect_SelectBasicGeom self, IFSelect_SelectionIterator iter)

        Puts in an Iterator the Selections from which "me" depends
        This list contains one Selection : the InputSelection

        :type iter: OCC.wrapper.IFSelect.IFSelect_SelectionIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_FillIterator(self, *args)


    def UniqueResult(self, *args):
        """
        UniqueResult(Handle_IGESSelect_SelectBasicGeom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of selected entities, each of them beeing
        unique. Default definition works from RootResult. According
        HasUniqueResult, UniqueResult returns directly RootResult,
        or build a Unique Result from it with a Graph.

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_UniqueResult(self, *args)


    def CompleteResult(self, *args):
        """
        CompleteResult(Handle_IGESSelect_SelectBasicGeom self, Interface_Graph G) -> Interface_EntityIterator

        Returns the list of entities involved by a Selection, i.e.
        UniqueResult plus the shared entities (directly or not)

        :type G: OCC.wrapper.Interface.Interface_Graph
        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_CompleteResult(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_SelectBasicGeom self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_SelectBasicGeom self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_SelectBasicGeom self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_SelectBasicGeom self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_SelectBasicGeom self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_SelectBasicGeom self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_SelectBasicGeom self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_SelectBasicGeom self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_SelectBasicGeom self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_DecrementRefCounter(self, *args)

Handle_IGESSelect_SelectBasicGeom_swigregister = _IGESSelect.Handle_IGESSelect_SelectBasicGeom_swigregister
Handle_IGESSelect_SelectBasicGeom_swigregister(Handle_IGESSelect_SelectBasicGeom)

def Handle_IGESSelect_SelectBasicGeom_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_SelectBasicGeom_DownCast(thing)
Handle_IGESSelect_SelectBasicGeom_DownCast = _IGESSelect.Handle_IGESSelect_SelectBasicGeom_DownCast

class Handle_IGESSelect_IGESTypeForm(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_IGESTypeForm self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_IGESTypeForm self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_IGESTypeForm self, IGESSelect_IGESTypeForm thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_IGESTypeForm self, Handle_IGESSelect_IGESTypeForm theHandle) -> Handle_IGESSelect_IGESTypeForm
        assign(Handle_IGESSelect_IGESTypeForm self, IGESSelect_IGESTypeForm thePtr) -> Handle_IGESSelect_IGESTypeForm
        assign(Handle_IGESSelect_IGESTypeForm self, Handle_IGESSelect_IGESTypeForm theHandle) -> Handle_IGESSelect_IGESTypeForm

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_IGESTypeForm self) -> IGESSelect_IGESTypeForm

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_IGESTypeForm self) -> IGESSelect_IGESTypeForm

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_IGESTypeForm self) -> IGESSelect_IGESTypeForm

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_IGESTypeForm___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_IGESTypeForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_IGESTypeForm_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_IGESTypeForm

    def Value(self, *args):
        """
        Value(Handle_IGESSelect_IGESTypeForm self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_CString

        Returns the signature for IGES, "mmm nnn" or "mmm" according
        creation choice (Type & Form or Type only)

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_IGESTypeForm self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_IGESTypeForm_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_IGESTypeForm_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetFormA(self, withform):
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_SetFormA(self, withform)

    def SetForm(self, withform):
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_SetForm(self, withform)

    def SetIntCase(self, *args):
        """
        SetIntCase(Handle_IGESSelect_IGESTypeForm self, Standard_Boolean const hasmin, Standard_Integer const valmin, Standard_Boolean const hasmax, Standard_Integer const valmax)

        Sets the information data to tell "integer cases" with
        possible min and max values
        To be called when creating

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_SetIntCase(self, *args)


    def IsIntCase(self, *args):
        """
        IsIntCase(Handle_IGESSelect_IGESTypeForm self) -> Standard_Boolean

        Tells if this Signature gives integer values
        and returns values from SetIntCase if True

        :type hasmin: bool
        :type valmin: int
        :type hasmax: bool
        :type valmax: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_IsIntCase(self, *args)


    def AddCase(self, *args):
        """
        AddCase(Handle_IGESSelect_IGESTypeForm self, Standard_CString const acase)

        Adds a possible case
        To be called when creating, IF the list of possible cases for
        Value is known when starting
        For instance, for CDL types, rather do not fill this,
        but for a specific enumeration (such as a status), can be used

        :type acase: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_AddCase(self, *args)


    def CaseList(self, *args):
        """
        CaseList(Handle_IGESSelect_IGESTypeForm self) -> Handle_TColStd_HSequenceOfAsciiString

        Returns the predefined list of possible cases, filled by AddCase
        Null Handle if no predefined list (hence, to be counted)
        Useful to filter on  really possible vase, for instance, or
        for a help

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfAsciiString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_CaseList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSelect_IGESTypeForm self) -> Standard_CString

        Returns an identification of the Signature (a word), given at
        initialization time
        Returns the Signature for a Transient object. It is specific
        of each sub-class of Signature. For a Null Handle, it should
        provide ""
        It can work with the model which contains the entity

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_Name(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_IGESTypeForm self) -> TCollection_AsciiString

        The label of a Signature uses its name as follow :
        "Signature : <name>"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_Label(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_IGESSelect_IGESTypeForm self, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Tells if the value for <ent> in <model> matches a text, with
        a criterium <exact>.
        The default definition calls MatchValue
        Can be redefined

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_Matches(self, *args)


    def MatchValue(self, *args):
        """
        MatchValue(Handle_IGESSelect_IGESTypeForm self, Standard_CString const val, TCollection_AsciiString text, Standard_Boolean const exact) -> Standard_Boolean

        Default procedure to tell if a value <val> matches a text
        with a criterium <exact>. <exact> = True requires equality,
        else only contained (no reg-exp)

        :type val: OCC.wrapper.Standard.Standard_CString
        :type text: OCC.wrapper.TCollection.TCollection_AsciiString
        :type exact: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_MatchValue(self, *args)


    def IntValue(self, *args):
        """
        IntValue(Handle_IGESSelect_IGESTypeForm self, Standard_Integer const val) -> Standard_CString

        This procedure converts an Integer to a CString
        It is a convenient way when the value of a signature has the
        form of a simple integer value
        The value is to be used immediately (one buffer only, no copy)

        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_IntValue(self, *args)


    def Text(self, *args):
        """
        Text(Handle_IGESSelect_IGESTypeForm self, Handle_Standard_Transient ent, Handle_Standard_Transient context) -> TCollection_AsciiString

        Returns an identification of the Signature (a word), given at
        initialization time
        Specialised to consider context as an InterfaceModel

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type context: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_Text(self, *args)


    def ClassName(self, *args):
        """
        ClassName(Handle_IGESSelect_IGESTypeForm self, Standard_CString const typnam) -> Standard_CString

        From a CDL Type Name, returns the Class part (package dropped)
        WARNING : buffered, to be immediately copied or printed

        :type typnam: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_ClassName(self, *args)


    def TextAlone(self, *args):
        """
        TextAlone(Handle_IGESSelect_IGESTypeForm self, Handle_Standard_Transient ent) -> TCollection_AsciiString

        Gives a text as a signature for a transient object alone, i.e.
        without defined context.
        By default, calls Text with undefined context (Null Handle) and
        if empty, then returns DynamicType

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_TextAlone(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_IGESTypeForm self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_IGESTypeForm self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_IGESTypeForm self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_IGESTypeForm self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_IGESTypeForm self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_IGESTypeForm self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_IGESTypeForm self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_IGESTypeForm self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_IGESTypeForm self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_IGESTypeForm_DecrementRefCounter(self, *args)

Handle_IGESSelect_IGESTypeForm_swigregister = _IGESSelect.Handle_IGESSelect_IGESTypeForm_swigregister
Handle_IGESSelect_IGESTypeForm_swigregister(Handle_IGESSelect_IGESTypeForm)

def Handle_IGESSelect_IGESTypeForm_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_IGESTypeForm_DownCast(thing)
Handle_IGESSelect_IGESTypeForm_DownCast = _IGESSelect.Handle_IGESSelect_IGESTypeForm_DownCast

class Handle_IGESSelect_RebuildDrawings(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_RebuildDrawings self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_RebuildDrawings self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_RebuildDrawings self, IGESSelect_RebuildDrawings thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_RebuildDrawings self, Handle_IGESSelect_RebuildDrawings theHandle) -> Handle_IGESSelect_RebuildDrawings
        assign(Handle_IGESSelect_RebuildDrawings self, IGESSelect_RebuildDrawings thePtr) -> Handle_IGESSelect_RebuildDrawings
        assign(Handle_IGESSelect_RebuildDrawings self, Handle_IGESSelect_RebuildDrawings theHandle) -> Handle_IGESSelect_RebuildDrawings

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_RebuildDrawings self) -> IGESSelect_RebuildDrawings

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_RebuildDrawings self) -> IGESSelect_RebuildDrawings

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_RebuildDrawings self) -> IGESSelect_RebuildDrawings

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_RebuildDrawings___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_RebuildDrawings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_RebuildDrawings_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_RebuildDrawings

    def Performing(self, *args):
        """
        Performing(Handle_IGESSelect_RebuildDrawings self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Interface_CopyTool TC)

        Specific action : Rebuilds the original Drawings

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_Performing(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_RebuildDrawings self) -> TCollection_AsciiString

        Returns a text which is
        "Rebuild Drawings"

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_Label(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_RebuildDrawings self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_RebuildDrawings_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_RebuildDrawings_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_RebuildDrawings self, IFSelect_ContextModif ctx, Handle_Interface_InterfaceModel target, Handle_Interface_Protocol protocol, Interface_CopyTool TC)

        The inherited Perform does the required cast (and refuses to
        go further if cast has failed) then calls the instantiated
        Performing

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_Perform(self, *args)


    def PerformProtocol(self, *args):
        """
        PerformProtocol(Handle_IGESSelect_RebuildDrawings self, IFSelect_ContextModif ctx, Handle_IGESData_IGESModel target, Handle_IGESData_Protocol proto, Interface_CopyTool TC)

        Specific Perform with Protocol. It is defined to let the
        Protocol unused and to call Performing without Protocol
        (most current case). It can be redefined if specific action
        requires Protocol.

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextModif
        :type target: OCC.wrapper.IGESData.Handle_IGESData_IGESModel
        :type proto: OCC.wrapper.IGESData.Handle_IGESData_Protocol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_PerformProtocol(self, *args)


    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_RebuildDrawings self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_RebuildDrawings self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_RebuildDrawings self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_RebuildDrawings self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_RebuildDrawings self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_RebuildDrawings self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_RebuildDrawings self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_RebuildDrawings self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_Selection(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_RebuildDrawings self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_RebuildDrawings self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_RebuildDrawings self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_RebuildDrawings self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_RebuildDrawings self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_RebuildDrawings self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_RebuildDrawings self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_RebuildDrawings self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_RebuildDrawings self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_RebuildDrawings_DecrementRefCounter(self, *args)

Handle_IGESSelect_RebuildDrawings_swigregister = _IGESSelect.Handle_IGESSelect_RebuildDrawings_swigregister
Handle_IGESSelect_RebuildDrawings_swigregister(Handle_IGESSelect_RebuildDrawings)

def Handle_IGESSelect_RebuildDrawings_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_RebuildDrawings_DownCast(thing)
Handle_IGESSelect_RebuildDrawings_DownCast = _IGESSelect.Handle_IGESSelect_RebuildDrawings_DownCast

class Handle_IGESSelect_FileModifier(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSelect_FileModifier self)

        Nullify the handle


        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSelect_FileModifier self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSelect_FileModifier self, IGESSelect_FileModifier thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSelect_FileModifier self, Handle_IGESSelect_FileModifier theHandle) -> Handle_IGESSelect_FileModifier
        assign(Handle_IGESSelect_FileModifier self, IGESSelect_FileModifier thePtr) -> Handle_IGESSelect_FileModifier
        assign(Handle_IGESSelect_FileModifier self, Handle_IGESSelect_FileModifier theHandle) -> Handle_IGESSelect_FileModifier

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSelect_FileModifier self) -> IGESSelect_FileModifier

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSelect_FileModifier self) -> IGESSelect_FileModifier

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSelect_FileModifier self) -> IGESSelect_FileModifier

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier___ref__(self, *args)


    def __hash__(self):
        return _IGESSelect.Handle_IGESSelect_FileModifier___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSelect.Handle_IGESSelect_FileModifier___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSelect.new_Handle_IGESSelect_FileModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSelect.Handle_IGESSelect_FileModifier_DownCast)
    __swig_destroy__ = _IGESSelect.delete_Handle_IGESSelect_FileModifier

    def Perform(self, *args):
        """
        Perform(Handle_IGESSelect_FileModifier self, IFSelect_ContextWrite ctx, IGESData_IGESWriter writer)

        Perform the action specific to each class of File Modifier
        <ctx> is the ContextWrite, which brings : the model, the
        protocol, the file name, plus the object AppliedModifiers
        (not used here) and the CheckList
        Remark that the model has to be casted for specific access

        <writer> is the Writer and is specific to each norm, on which
        to act

        :type ctx: OCC.wrapper.IFSelect.IFSelect_ContextWrite
        :type writer: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_Perform(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSelect_FileModifier self) -> char const *

        :rtype: const char *

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_FileModifier_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSelect.Handle_IGESSelect_FileModifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MayChangeGraph(self, *args):
        """
        MayChangeGraph(Handle_IGESSelect_FileModifier self) -> Standard_Boolean

        Returns True if this modifier may change the graph of
        dependences (aknowledged at creation time)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_MayChangeGraph(self, *args)


    def SetDispatch(self, *args):
        """
        SetDispatch(Handle_IGESSelect_FileModifier self, Handle_IFSelect_Dispatch disp)

        Attaches to a Dispatch. If <disp> is Null, Resets it
        (to apply the Modifier on every Dispatch)

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_SetDispatch(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSelect_FileModifier self) -> Handle_IFSelect_Dispatch

        Returns the Dispatch to be matched, Null if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_Dispatch(self, *args)


    def Applies(self, *args):
        """
        Applies(Handle_IGESSelect_FileModifier self, Handle_IFSelect_Dispatch disp) -> Standard_Boolean

        Returns True if a Model obtained from the Dispatch <disp>
        is to be treated (apart from the Selection criterium)
        If Dispatch(me) is Null, returns True. Else, checks <disp>

        :type disp: OCC.wrapper.IFSelect.Handle_IFSelect_Dispatch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_Applies(self, *args)


    def SetSelection(self, *args):
        """
        SetSelection(Handle_IGESSelect_FileModifier self, Handle_IFSelect_Selection sel)

        Sets a Selection : a Model is treated if it contains one or
        more Entities designated by the Selection

        :type sel: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_SetSelection(self, *args)


    def ResetSelection(self, *args):
        """
        ResetSelection(Handle_IGESSelect_FileModifier self)

        Resets the Selection : this criterium is not longer active


        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_ResetSelection(self, *args)


    def HasSelection(self, *args):
        """
        HasSelection(Handle_IGESSelect_FileModifier self) -> Standard_Boolean

        Returns True if a Selection is set as an additionnal criterium

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_HasSelection(self, *args)


    def Selection(self, *args):
        """
        Selection(Handle_IGESSelect_FileModifier self) -> Handle_IFSelect_Selection

        Returns the Selection, or a Null Handle if not set

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Selection

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_Selection(self, *args)


    def Label(self, *args):
        """
        Label(Handle_IGESSelect_FileModifier self) -> TCollection_AsciiString

        Returns a short text which defines the operation performed

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_Label(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSelect_FileModifier self)

        Memory deallocator for transient classes


        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSelect_FileModifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSelect_FileModifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSelect_FileModifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSelect_FileModifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSelect_FileModifier self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSelect_FileModifier self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSelect_FileModifier self)

        Increments the reference counter of this object


        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSelect_FileModifier self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSelect.Handle_IGESSelect_FileModifier_DecrementRefCounter(self, *args)

Handle_IGESSelect_FileModifier_swigregister = _IGESSelect.Handle_IGESSelect_FileModifier_swigregister
Handle_IGESSelect_FileModifier_swigregister(Handle_IGESSelect_FileModifier)

def Handle_IGESSelect_FileModifier_DownCast(thing):
    return _IGESSelect.Handle_IGESSelect_FileModifier_DownCast(thing)
Handle_IGESSelect_FileModifier_DownCast = _IGESSelect.Handle_IGESSelect_FileModifier_DownCast



