# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NETGENPlugin')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NETGENPlugin')
    _NETGENPlugin = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NETGENPlugin', [dirname(__file__)])
        except ImportError:
            import _NETGENPlugin
            return _NETGENPlugin
        try:
            _mod = imp.load_module('_NETGENPlugin', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NETGENPlugin = swig_import_helper()
    del swig_import_helper
else:
    import _NETGENPlugin
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NETGENPlugin.delete_SwigPyIterator

    def value(self):
        return _NETGENPlugin.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _NETGENPlugin.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _NETGENPlugin.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _NETGENPlugin.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _NETGENPlugin.SwigPyIterator_equal(self, x)

    def copy(self):
        return _NETGENPlugin.SwigPyIterator_copy(self)

    def next(self):
        return _NETGENPlugin.SwigPyIterator_next(self)

    def __next__(self):
        return _NETGENPlugin.SwigPyIterator___next__(self)

    def previous(self):
        return _NETGENPlugin.SwigPyIterator_previous(self)

    def advance(self, n):
        return _NETGENPlugin.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _NETGENPlugin.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _NETGENPlugin.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _NETGENPlugin.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _NETGENPlugin.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _NETGENPlugin.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _NETGENPlugin.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _NETGENPlugin.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _NETGENPlugin.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_NETGENPlugin.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _NETGENPlugin.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _NETGENPlugin.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NETGENPlugin.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _NETGENPlugin.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _NETGENPlugin.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _NETGENPlugin.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _NETGENPlugin.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_NETGENPlugin.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _NETGENPlugin.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _NETGENPlugin.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NETGENPlugin.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _NETGENPlugin.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _NETGENPlugin.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _NETGENPlugin.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _NETGENPlugin.ptr_to_number(item)
ptr_to_number = _NETGENPlugin.ptr_to_number

def HashCode(*args):
    return _NETGENPlugin.HashCode(*args)
HashCode = _NETGENPlugin.HashCode

def ptr_equal(a, b):
    return _NETGENPlugin.ptr_equal(a, b)
ptr_equal = _NETGENPlugin.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMESH
else:
    import SMESH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepMesh
else:
    import BRepMesh
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDSAbs
else:
    import SMDSAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeAnalysis
else:
    import ShapeAnalysis
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAPI
else:
    import GeomAPI
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Approx
else:
    import Approx
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppCont
else:
    import AppCont
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Extrema
else:
    import Extrema
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MeshVS
else:
    import MeshVS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMESHDS
else:
    import SMESHDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDS
else:
    import SMDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdMeshers
else:
    import StdMeshers
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MEFISTO
else:
    import MEFISTO
del _swig_python_version_info
class NETGENPlugin_Hypothesis(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VeryCoarse = _NETGENPlugin.NETGENPlugin_Hypothesis_VeryCoarse
    Coarse = _NETGENPlugin.NETGENPlugin_Hypothesis_Coarse
    Moderate = _NETGENPlugin.NETGENPlugin_Hypothesis_Moderate
    Fine = _NETGENPlugin.NETGENPlugin_Hypothesis_Fine
    VeryFine = _NETGENPlugin.NETGENPlugin_Hypothesis_VeryFine
    UserDefined = _NETGENPlugin.NETGENPlugin_Hypothesis_UserDefined

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_Hypothesis self, int hypId, SMESH_Gen gen) -> NETGENPlugin_Hypothesis

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_Hypothesis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetMaxSize(self, *args):
        """
        SetMaxSize(NETGENPlugin_Hypothesis self, double theSize)

        :type theSize: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetMaxSize(self, *args)


    def GetMaxSize(self, *args):
        """
        GetMaxSize(NETGENPlugin_Hypothesis self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetMaxSize(self, *args)


    def SetMinSize(self, *args):
        """
        SetMinSize(NETGENPlugin_Hypothesis self, double theSize)

        :type theSize: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetMinSize(self, *args)


    def GetMinSize(self, *args):
        """
        GetMinSize(NETGENPlugin_Hypothesis self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetMinSize(self, *args)


    def SetSecondOrder(self, *args):
        """
        SetSecondOrder(NETGENPlugin_Hypothesis self, bool theVal)

        :type theVal: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetSecondOrder(self, *args)


    def GetSecondOrder(self, *args):
        """
        GetSecondOrder(NETGENPlugin_Hypothesis self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetSecondOrder(self, *args)


    def SetOptimize(self, *args):
        """
        SetOptimize(NETGENPlugin_Hypothesis self, bool theVal)

        :type theVal: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetOptimize(self, *args)


    def GetOptimize(self, *args):
        """
        GetOptimize(NETGENPlugin_Hypothesis self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetOptimize(self, *args)


    def SetFineness(self, *args):
        """
        SetFineness(NETGENPlugin_Hypothesis self, NETGENPlugin_Hypothesis::Fineness theFineness)

        :type theFineness: Fineness

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetFineness(self, *args)


    def GetFineness(self, *args):
        """
        GetFineness(NETGENPlugin_Hypothesis self) -> NETGENPlugin_Hypothesis::Fineness

        :rtype: Fineness

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetFineness(self, *args)


    def SetGrowthRate(self, *args):
        """
        SetGrowthRate(NETGENPlugin_Hypothesis self, double theRate)

        :type theRate: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetGrowthRate(self, *args)


    def GetGrowthRate(self, *args):
        """
        GetGrowthRate(NETGENPlugin_Hypothesis self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetGrowthRate(self, *args)


    def SetNbSegPerEdge(self, *args):
        """
        SetNbSegPerEdge(NETGENPlugin_Hypothesis self, double theVal)

        :type theVal: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetNbSegPerEdge(self, *args)


    def GetNbSegPerEdge(self, *args):
        """
        GetNbSegPerEdge(NETGENPlugin_Hypothesis self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetNbSegPerEdge(self, *args)


    def SetNbSegPerRadius(self, *args):
        """
        SetNbSegPerRadius(NETGENPlugin_Hypothesis self, double theVal)

        :type theVal: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetNbSegPerRadius(self, *args)


    def GetNbSegPerRadius(self, *args):
        """
        GetNbSegPerRadius(NETGENPlugin_Hypothesis self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetNbSegPerRadius(self, *args)


    def SetChordalErrorEnabled(self, *args):
        """
        SetChordalErrorEnabled(NETGENPlugin_Hypothesis self, bool value)

        :type value: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetChordalErrorEnabled(self, *args)


    def GetChordalErrorEnabled(self, *args):
        """
        GetChordalErrorEnabled(NETGENPlugin_Hypothesis self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetChordalErrorEnabled(self, *args)


    def SetChordalError(self, *args):
        """
        SetChordalError(NETGENPlugin_Hypothesis self, double value)

        :type value: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetChordalError(self, *args)


    def GetChordalError(self, *args):
        """
        GetChordalError(NETGENPlugin_Hypothesis self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetChordalError(self, *args)


    def SetLocalSizeOnEntry(self, *args):
        """
        SetLocalSizeOnEntry(NETGENPlugin_Hypothesis self, std::string const & entry, double localSize)

        :type entry: string
        :type localSize: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetLocalSizeOnEntry(self, *args)


    def GetLocalSizeOnEntry(self, *args):
        """
        GetLocalSizeOnEntry(NETGENPlugin_Hypothesis self, std::string const & entry) -> double

        :type entry: string
        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetLocalSizeOnEntry(self, *args)


    def GetLocalSizesAndEntries(self, *args):
        """
        :rtype: TLocalSize

        """
        res = _NETGENPlugin.NETGENPlugin_Hypothesis_GetLocalSizesAndEntries(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def UnsetLocalSizeOnEntry(self, *args):
        """
        UnsetLocalSizeOnEntry(NETGENPlugin_Hypothesis self, std::string const & entry)

        :type entry: string

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_UnsetLocalSizeOnEntry(self, *args)


    def SetMeshSizeFile(self, *args):
        """
        SetMeshSizeFile(NETGENPlugin_Hypothesis self, std::string const & fileName)

        :type fileName: string

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetMeshSizeFile(self, *args)


    def GetMeshSizeFile(self, *args):
        """
        :rtype: string

        """
        res = _NETGENPlugin.NETGENPlugin_Hypothesis_GetMeshSizeFile(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetQuadAllowed(self, *args):
        """
        SetQuadAllowed(NETGENPlugin_Hypothesis self, bool theVal)

        :type theVal: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetQuadAllowed(self, *args)


    def GetQuadAllowed(self, *args):
        """
        GetQuadAllowed(NETGENPlugin_Hypothesis self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetQuadAllowed(self, *args)


    def SetSurfaceCurvature(self, *args):
        """
        SetSurfaceCurvature(NETGENPlugin_Hypothesis self, bool theVal)

        :type theVal: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetSurfaceCurvature(self, *args)


    def GetSurfaceCurvature(self, *args):
        """
        GetSurfaceCurvature(NETGENPlugin_Hypothesis self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetSurfaceCurvature(self, *args)


    def SetFuseEdges(self, *args):
        """
        SetFuseEdges(NETGENPlugin_Hypothesis self, bool theVal)

        :type theVal: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetFuseEdges(self, *args)


    def GetFuseEdges(self, *args):
        """
        GetFuseEdges(NETGENPlugin_Hypothesis self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetFuseEdges(self, *args)


    def SetNbSurfOptSteps(self, *args):
        """
        SetNbSurfOptSteps(NETGENPlugin_Hypothesis self, int nb)

        :type nb: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetNbSurfOptSteps(self, *args)


    def GetNbSurfOptSteps(self, *args):
        """
        GetNbSurfOptSteps(NETGENPlugin_Hypothesis self) -> int

        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetNbSurfOptSteps(self, *args)


    def SetNbVolOptSteps(self, *args):
        """
        SetNbVolOptSteps(NETGENPlugin_Hypothesis self, int nb)

        :type nb: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetNbVolOptSteps(self, *args)


    def GetNbVolOptSteps(self, *args):
        """
        GetNbVolOptSteps(NETGENPlugin_Hypothesis self) -> int

        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetNbVolOptSteps(self, *args)


    def SetElemSizeWeight(self, *args):
        """
        SetElemSizeWeight(NETGENPlugin_Hypothesis self, double size)

        :type size: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetElemSizeWeight(self, *args)


    def GetElemSizeWeight(self, *args):
        """
        GetElemSizeWeight(NETGENPlugin_Hypothesis self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetElemSizeWeight(self, *args)


    def SetWorstElemMeasure(self, *args):
        """
        SetWorstElemMeasure(NETGENPlugin_Hypothesis self, int val)

        :type val: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetWorstElemMeasure(self, *args)


    def GetWorstElemMeasure(self, *args):
        """
        GetWorstElemMeasure(NETGENPlugin_Hypothesis self) -> int

        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetWorstElemMeasure(self, *args)


    def SetUseDelauney(self, *args):
        """
        SetUseDelauney(NETGENPlugin_Hypothesis self, bool toUse)

        :type toUse: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetUseDelauney(self, *args)


    def GetUseDelauney(self, *args):
        """
        GetUseDelauney(NETGENPlugin_Hypothesis self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetUseDelauney(self, *args)


    def SetCheckOverlapping(self, *args):
        """
        SetCheckOverlapping(NETGENPlugin_Hypothesis self, bool toCheck)

        :type toCheck: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetCheckOverlapping(self, *args)


    def GetCheckOverlapping(self, *args):
        """
        GetCheckOverlapping(NETGENPlugin_Hypothesis self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetCheckOverlapping(self, *args)


    def SetCheckChartBoundary(self, *args):
        """
        SetCheckChartBoundary(NETGENPlugin_Hypothesis self, bool toCheck)

        :type toCheck: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetCheckChartBoundary(self, *args)


    def GetCheckChartBoundary(self, *args):
        """
        GetCheckChartBoundary(NETGENPlugin_Hypothesis self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetCheckChartBoundary(self, *args)


    def GetDefaultFineness(*args):
        """
        GetDefaultFineness() -> NETGENPlugin_Hypothesis::Fineness

        :rtype: Fineness

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultFineness(*args)

    GetDefaultFineness = staticmethod(GetDefaultFineness)

    def GetDefaultSecondOrder(*args):
        """
        GetDefaultSecondOrder() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultSecondOrder(*args)

    GetDefaultSecondOrder = staticmethod(GetDefaultSecondOrder)

    def GetDefaultQuadAllowed(*args):
        """
        GetDefaultQuadAllowed() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultQuadAllowed(*args)

    GetDefaultQuadAllowed = staticmethod(GetDefaultQuadAllowed)

    def GetDefaultMaxSize(*args):
        """
        GetDefaultMaxSize() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultMaxSize(*args)

    GetDefaultMaxSize = staticmethod(GetDefaultMaxSize)

    def GetDefaultGrowthRate(*args):
        """
        GetDefaultGrowthRate() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultGrowthRate(*args)

    GetDefaultGrowthRate = staticmethod(GetDefaultGrowthRate)

    def GetDefaultNbSegPerRadius(*args):
        """
        GetDefaultNbSegPerRadius() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultNbSegPerRadius(*args)

    GetDefaultNbSegPerRadius = staticmethod(GetDefaultNbSegPerRadius)

    def GetDefaultNbSegPerEdge(*args):
        """
        GetDefaultNbSegPerEdge() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultNbSegPerEdge(*args)

    GetDefaultNbSegPerEdge = staticmethod(GetDefaultNbSegPerEdge)

    def GetDefaultChordalError(*args):
        """
        GetDefaultChordalError() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultChordalError(*args)

    GetDefaultChordalError = staticmethod(GetDefaultChordalError)

    def GetDefaultOptimize(*args):
        """
        GetDefaultOptimize() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultOptimize(*args)

    GetDefaultOptimize = staticmethod(GetDefaultOptimize)

    def GetDefaultNbSurfOptSteps(*args):
        """
        GetDefaultNbSurfOptSteps() -> int

        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultNbSurfOptSteps(*args)

    GetDefaultNbSurfOptSteps = staticmethod(GetDefaultNbSurfOptSteps)

    def GetDefaultNbVolOptSteps(*args):
        """
        GetDefaultNbVolOptSteps() -> int

        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultNbVolOptSteps(*args)

    GetDefaultNbVolOptSteps = staticmethod(GetDefaultNbVolOptSteps)

    def GetDefaultElemSizeWeight(*args):
        """
        GetDefaultElemSizeWeight() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultElemSizeWeight(*args)

    GetDefaultElemSizeWeight = staticmethod(GetDefaultElemSizeWeight)

    def GetDefaultWorstElemMeasure(*args):
        """
        GetDefaultWorstElemMeasure() -> int

        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultWorstElemMeasure(*args)

    GetDefaultWorstElemMeasure = staticmethod(GetDefaultWorstElemMeasure)

    def GetDefaultSurfaceCurvature(*args):
        """
        GetDefaultSurfaceCurvature() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultSurfaceCurvature(*args)

    GetDefaultSurfaceCurvature = staticmethod(GetDefaultSurfaceCurvature)

    def GetDefaultUseDelauney(*args):
        """
        GetDefaultUseDelauney() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultUseDelauney(*args)

    GetDefaultUseDelauney = staticmethod(GetDefaultUseDelauney)

    def GetDefaultCheckOverlapping(*args):
        """
        GetDefaultCheckOverlapping() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultCheckOverlapping(*args)

    GetDefaultCheckOverlapping = staticmethod(GetDefaultCheckOverlapping)

    def GetDefaultCheckChartBoundary(*args):
        """
        GetDefaultCheckChartBoundary() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultCheckChartBoundary(*args)

    GetDefaultCheckChartBoundary = staticmethod(GetDefaultCheckChartBoundary)

    def GetDefaultFuseEdges(*args):
        """
        GetDefaultFuseEdges() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultFuseEdges(*args)

    GetDefaultFuseEdges = staticmethod(GetDefaultFuseEdges)

    def SaveTo(self, *args):
        """
        SaveTo(NETGENPlugin_Hypothesis self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(NETGENPlugin_Hypothesis self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(NETGENPlugin_Hypothesis self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Does nothing
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - always false

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(NETGENPlugin_Hypothesis self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Hypothesis_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_Hypothesis
NETGENPlugin_Hypothesis_swigregister = _NETGENPlugin.NETGENPlugin_Hypothesis_swigregister
NETGENPlugin_Hypothesis_swigregister(NETGENPlugin_Hypothesis)

def NETGENPlugin_Hypothesis_GetDefaultFineness(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultFineness() -> NETGENPlugin_Hypothesis::Fineness

    :rtype: Fineness

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultFineness(*args)

def NETGENPlugin_Hypothesis_GetDefaultSecondOrder(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultSecondOrder() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultSecondOrder(*args)

def NETGENPlugin_Hypothesis_GetDefaultQuadAllowed(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultQuadAllowed() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultQuadAllowed(*args)

def NETGENPlugin_Hypothesis_GetDefaultMaxSize(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultMaxSize() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultMaxSize(*args)

def NETGENPlugin_Hypothesis_GetDefaultGrowthRate(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultGrowthRate() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultGrowthRate(*args)

def NETGENPlugin_Hypothesis_GetDefaultNbSegPerRadius(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultNbSegPerRadius() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultNbSegPerRadius(*args)

def NETGENPlugin_Hypothesis_GetDefaultNbSegPerEdge(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultNbSegPerEdge() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultNbSegPerEdge(*args)

def NETGENPlugin_Hypothesis_GetDefaultChordalError(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultChordalError() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultChordalError(*args)

def NETGENPlugin_Hypothesis_GetDefaultOptimize(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultOptimize() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultOptimize(*args)

def NETGENPlugin_Hypothesis_GetDefaultNbSurfOptSteps(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultNbSurfOptSteps() -> int

    :rtype: int

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultNbSurfOptSteps(*args)

def NETGENPlugin_Hypothesis_GetDefaultNbVolOptSteps(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultNbVolOptSteps() -> int

    :rtype: int

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultNbVolOptSteps(*args)

def NETGENPlugin_Hypothesis_GetDefaultElemSizeWeight(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultElemSizeWeight() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultElemSizeWeight(*args)

def NETGENPlugin_Hypothesis_GetDefaultWorstElemMeasure(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultWorstElemMeasure() -> int

    :rtype: int

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultWorstElemMeasure(*args)

def NETGENPlugin_Hypothesis_GetDefaultSurfaceCurvature(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultSurfaceCurvature() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultSurfaceCurvature(*args)

def NETGENPlugin_Hypothesis_GetDefaultUseDelauney(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultUseDelauney() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultUseDelauney(*args)

def NETGENPlugin_Hypothesis_GetDefaultCheckOverlapping(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultCheckOverlapping() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultCheckOverlapping(*args)

def NETGENPlugin_Hypothesis_GetDefaultCheckChartBoundary(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultCheckChartBoundary() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultCheckChartBoundary(*args)

def NETGENPlugin_Hypothesis_GetDefaultFuseEdges(*args):
    """
    NETGENPlugin_Hypothesis_GetDefaultFuseEdges() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Hypothesis_GetDefaultFuseEdges(*args)

class NETGENPlugin_SimpleHypothesis_2D(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_SimpleHypothesis_2D self, int hypId, SMESH_Gen gen) -> NETGENPlugin_SimpleHypothesis_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_SimpleHypothesis_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetNumberOfSegments(self, *args):
        """
        SetNumberOfSegments(NETGENPlugin_SimpleHypothesis_2D self, int nb)

        Sets <number of segments> value

        :type nb: int

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_SetNumberOfSegments(self, *args)


    def GetNumberOfSegments(self, *args):
        """
        GetNumberOfSegments(NETGENPlugin_SimpleHypothesis_2D self) -> int

        Returns <number of segments> value.
        Can be zero in case if LocalLength() has been set

        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_GetNumberOfSegments(self, *args)


    def SetLocalLength(self, *args):
        """
        SetLocalLength(NETGENPlugin_SimpleHypothesis_2D self, double segmentLength)

        Sets <segment length> value

        :type segmentLength: double

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_SetLocalLength(self, *args)


    def GetLocalLength(self, *args):
        """
        GetLocalLength(NETGENPlugin_SimpleHypothesis_2D self) -> double

        Returns <segment length> value.
        Can be zero in case if NumberOfSegments() has been set

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_GetLocalLength(self, *args)


    def LengthFromEdges(self, *args):
        """
        LengthFromEdges(NETGENPlugin_SimpleHypothesis_2D self)

        Sets <maximum element area> to be dependent on 1D discretization


        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_LengthFromEdges(self, *args)


    def SetMaxElementArea(self, *args):
        """
        SetMaxElementArea(NETGENPlugin_SimpleHypothesis_2D self, double area)

        Sets <maximum element area> value.
        Zero or negative value means same as LengthFromEdges().

        :type area: double

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_SetMaxElementArea(self, *args)


    def GetMaxElementArea(self, *args):
        """
        GetMaxElementArea(NETGENPlugin_SimpleHypothesis_2D self) -> double

        Returns <maximum element area> value.
        Can be zero in case of LengthFromEdges()

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_GetMaxElementArea(self, *args)


    def SetAllowQuadrangles(self, *args):
        """
        SetAllowQuadrangles(NETGENPlugin_SimpleHypothesis_2D self, bool toAllow)

        Enables/disables generation of quadrangular faces

        :type toAllow: bool

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_SetAllowQuadrangles(self, *args)


    def GetAllowQuadrangles(self, *args):
        """
        GetAllowQuadrangles(NETGENPlugin_SimpleHypothesis_2D self) -> bool

        Returns true if generation of quadrangular faces is enabled

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_GetAllowQuadrangles(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(NETGENPlugin_SimpleHypothesis_2D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(NETGENPlugin_SimpleHypothesis_2D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(NETGENPlugin_SimpleHypothesis_2D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Set parameters by mesh
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if theShape is meshed

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(NETGENPlugin_SimpleHypothesis_2D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_SimpleHypothesis_2D
NETGENPlugin_SimpleHypothesis_2D_swigregister = _NETGENPlugin.NETGENPlugin_SimpleHypothesis_2D_swigregister
NETGENPlugin_SimpleHypothesis_2D_swigregister(NETGENPlugin_SimpleHypothesis_2D)

class NETGENPlugin_RemesherHypothesis_2D(NETGENPlugin_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_RemesherHypothesis_2D self, int hypId, SMESH_Gen gen) -> NETGENPlugin_RemesherHypothesis_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_RemesherHypothesis_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetRidgeAngle(self, *args):
        """
        SetRidgeAngle(NETGENPlugin_RemesherHypothesis_2D self, double angle)

        :type angle: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRidgeAngle(self, *args)


    def GetRidgeAngle(self, *args):
        """
        GetRidgeAngle(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRidgeAngle(self, *args)


    def SetEdgeCornerAngle(self, *args):
        """
        SetEdgeCornerAngle(NETGENPlugin_RemesherHypothesis_2D self, double angle)

        :type angle: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetEdgeCornerAngle(self, *args)


    def GetEdgeCornerAngle(self, *args):
        """
        GetEdgeCornerAngle(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetEdgeCornerAngle(self, *args)


    def SetChartAngle(self, *args):
        """
        SetChartAngle(NETGENPlugin_RemesherHypothesis_2D self, double angle)

        :type angle: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetChartAngle(self, *args)


    def GetChartAngle(self, *args):
        """
        GetChartAngle(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetChartAngle(self, *args)


    def SetOuterChartAngle(self, *args):
        """
        SetOuterChartAngle(NETGENPlugin_RemesherHypothesis_2D self, double angle)

        :type angle: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetOuterChartAngle(self, *args)


    def GetOuterChartAngle(self, *args):
        """
        GetOuterChartAngle(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetOuterChartAngle(self, *args)


    def SetRestHChartDistFactor(self, *args):
        """
        SetRestHChartDistFactor(NETGENPlugin_RemesherHypothesis_2D self, double f)

        :type f: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHChartDistFactor(self, *args)


    def GetRestHChartDistFactor(self, *args):
        """
        GetRestHChartDistFactor(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHChartDistFactor(self, *args)


    def SetRestHChartDistEnable(self, *args):
        """
        SetRestHChartDistEnable(NETGENPlugin_RemesherHypothesis_2D self, bool enable)

        :type enable: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHChartDistEnable(self, *args)


    def GetRestHChartDistEnable(self, *args):
        """
        GetRestHChartDistEnable(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHChartDistEnable(self, *args)


    def SetRestHLineLengthFactor(self, *args):
        """
        SetRestHLineLengthFactor(NETGENPlugin_RemesherHypothesis_2D self, double f)

        :type f: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHLineLengthFactor(self, *args)


    def GetRestHLineLengthFactor(self, *args):
        """
        GetRestHLineLengthFactor(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHLineLengthFactor(self, *args)


    def SetRestHLineLengthEnable(self, *args):
        """
        SetRestHLineLengthEnable(NETGENPlugin_RemesherHypothesis_2D self, bool enable)

        :type enable: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHLineLengthEnable(self, *args)


    def GetRestHLineLengthEnable(self, *args):
        """
        GetRestHLineLengthEnable(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHLineLengthEnable(self, *args)


    def SetRestHCloseEdgeFactor(self, *args):
        """
        SetRestHCloseEdgeFactor(NETGENPlugin_RemesherHypothesis_2D self, double f)

        :type f: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHCloseEdgeFactor(self, *args)


    def GetRestHCloseEdgeFactor(self, *args):
        """
        GetRestHCloseEdgeFactor(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHCloseEdgeFactor(self, *args)


    def SetRestHCloseEdgeEnable(self, *args):
        """
        SetRestHCloseEdgeEnable(NETGENPlugin_RemesherHypothesis_2D self, bool enable)

        :type enable: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHCloseEdgeEnable(self, *args)


    def GetRestHCloseEdgeEnable(self, *args):
        """
        GetRestHCloseEdgeEnable(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHCloseEdgeEnable(self, *args)


    def SetRestHSurfCurvFactor(self, *args):
        """
        SetRestHSurfCurvFactor(NETGENPlugin_RemesherHypothesis_2D self, double f)

        :type f: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHSurfCurvFactor(self, *args)


    def GetRestHSurfCurvFactor(self, *args):
        """
        GetRestHSurfCurvFactor(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHSurfCurvFactor(self, *args)


    def SetRestHSurfCurvEnable(self, *args):
        """
        SetRestHSurfCurvEnable(NETGENPlugin_RemesherHypothesis_2D self, bool enable)

        :type enable: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHSurfCurvEnable(self, *args)


    def GetRestHSurfCurvEnable(self, *args):
        """
        GetRestHSurfCurvEnable(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHSurfCurvEnable(self, *args)


    def SetRestHEdgeAngleFactor(self, *args):
        """
        SetRestHEdgeAngleFactor(NETGENPlugin_RemesherHypothesis_2D self, double f)

        :type f: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHEdgeAngleFactor(self, *args)


    def GetRestHEdgeAngleFactor(self, *args):
        """
        GetRestHEdgeAngleFactor(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHEdgeAngleFactor(self, *args)


    def SetRestHEdgeAngleEnable(self, *args):
        """
        SetRestHEdgeAngleEnable(NETGENPlugin_RemesherHypothesis_2D self, bool enable)

        :type enable: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHEdgeAngleEnable(self, *args)


    def GetRestHEdgeAngleEnable(self, *args):
        """
        GetRestHEdgeAngleEnable(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHEdgeAngleEnable(self, *args)


    def SetRestHSurfMeshCurvFactor(self, *args):
        """
        SetRestHSurfMeshCurvFactor(NETGENPlugin_RemesherHypothesis_2D self, double f)

        :type f: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHSurfMeshCurvFactor(self, *args)


    def GetRestHSurfMeshCurvFactor(self, *args):
        """
        GetRestHSurfMeshCurvFactor(NETGENPlugin_RemesherHypothesis_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHSurfMeshCurvFactor(self, *args)


    def SetRestHSurfMeshCurvEnable(self, *args):
        """
        SetRestHSurfMeshCurvEnable(NETGENPlugin_RemesherHypothesis_2D self, bool enable)

        :type enable: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetRestHSurfMeshCurvEnable(self, *args)


    def GetRestHSurfMeshCurvEnable(self, *args):
        """
        GetRestHSurfMeshCurvEnable(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetRestHSurfMeshCurvEnable(self, *args)


    def SetKeepExistingEdges(self, *args):
        """
        SetKeepExistingEdges(NETGENPlugin_RemesherHypothesis_2D self, bool toKeep)

        :type toKeep: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetKeepExistingEdges(self, *args)


    def GetKeepExistingEdges(self, *args):
        """
        GetKeepExistingEdges(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetKeepExistingEdges(self, *args)


    def SetMakeGroupsOfSurfaces(self, *args):
        """
        SetMakeGroupsOfSurfaces(NETGENPlugin_RemesherHypothesis_2D self, bool toMake)

        :type toMake: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetMakeGroupsOfSurfaces(self, *args)


    def GetMakeGroupsOfSurfaces(self, *args):
        """
        GetMakeGroupsOfSurfaces(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetMakeGroupsOfSurfaces(self, *args)


    def SetFixedEdgeGroup(self, *args):
        """
        SetFixedEdgeGroup(NETGENPlugin_RemesherHypothesis_2D self, SMESH_Group edgeGroup)

        :type edgeGroup: OCC.wrapper.SMESH.SMESH_Group

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetFixedEdgeGroup(self, *args)


    def GetFixedEdgeGroupID(self, *args):
        """
        GetFixedEdgeGroupID(NETGENPlugin_RemesherHypothesis_2D self) -> int

        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetFixedEdgeGroupID(self, *args)


    def GetFixedEdgeGroup(self, *args):
        """
        GetFixedEdgeGroup(NETGENPlugin_RemesherHypothesis_2D self, SMESH_Mesh mesh) -> SMESH_Group

        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: OCC.wrapper.SMESH.SMESH_Group

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetFixedEdgeGroup(self, *args)


    def SetLoadMeshOnCancel(self, *args):
        """
        SetLoadMeshOnCancel(NETGENPlugin_RemesherHypothesis_2D self, bool toLoad)

        :type toLoad: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SetLoadMeshOnCancel(self, *args)


    def GetLoadMeshOnCancel(self, *args):
        """
        GetLoadMeshOnCancel(NETGENPlugin_RemesherHypothesis_2D self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_GetLoadMeshOnCancel(self, *args)


    def DefaultRidgeAngle(*args):
        """
        DefaultRidgeAngle() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRidgeAngle(*args)

    DefaultRidgeAngle = staticmethod(DefaultRidgeAngle)

    def DefaultEdgeCornerAngle(*args):
        """
        DefaultEdgeCornerAngle() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultEdgeCornerAngle(*args)

    DefaultEdgeCornerAngle = staticmethod(DefaultEdgeCornerAngle)

    def DefaultChartAngle(*args):
        """
        DefaultChartAngle() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultChartAngle(*args)

    DefaultChartAngle = staticmethod(DefaultChartAngle)

    def DefaultOuterChartAngle(*args):
        """
        DefaultOuterChartAngle() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultOuterChartAngle(*args)

    DefaultOuterChartAngle = staticmethod(DefaultOuterChartAngle)

    def DefaultRestHChartDistFactor(*args):
        """
        DefaultRestHChartDistFactor() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHChartDistFactor(*args)

    DefaultRestHChartDistFactor = staticmethod(DefaultRestHChartDistFactor)

    def DefaultRestHChartDistEnable(*args):
        """
        DefaultRestHChartDistEnable() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHChartDistEnable(*args)

    DefaultRestHChartDistEnable = staticmethod(DefaultRestHChartDistEnable)

    def DefaultRestHLineLengthFactor(*args):
        """
        DefaultRestHLineLengthFactor() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHLineLengthFactor(*args)

    DefaultRestHLineLengthFactor = staticmethod(DefaultRestHLineLengthFactor)

    def DefaultRestHLineLengthEnable(*args):
        """
        DefaultRestHLineLengthEnable() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHLineLengthEnable(*args)

    DefaultRestHLineLengthEnable = staticmethod(DefaultRestHLineLengthEnable)

    def DefaultRestHCloseEdgeFactor(*args):
        """
        DefaultRestHCloseEdgeFactor() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHCloseEdgeFactor(*args)

    DefaultRestHCloseEdgeFactor = staticmethod(DefaultRestHCloseEdgeFactor)

    def DefaultRestHCloseEdgeEnable(*args):
        """
        DefaultRestHCloseEdgeEnable() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHCloseEdgeEnable(*args)

    DefaultRestHCloseEdgeEnable = staticmethod(DefaultRestHCloseEdgeEnable)

    def DefaultRestHSurfCurvFactor(*args):
        """
        DefaultRestHSurfCurvFactor() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfCurvFactor(*args)

    DefaultRestHSurfCurvFactor = staticmethod(DefaultRestHSurfCurvFactor)

    def DefaultRestHSurfCurvEnable(*args):
        """
        DefaultRestHSurfCurvEnable() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfCurvEnable(*args)

    DefaultRestHSurfCurvEnable = staticmethod(DefaultRestHSurfCurvEnable)

    def DefaultRestHEdgeAngleFactor(*args):
        """
        DefaultRestHEdgeAngleFactor() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHEdgeAngleFactor(*args)

    DefaultRestHEdgeAngleFactor = staticmethod(DefaultRestHEdgeAngleFactor)

    def DefaultRestHEdgeAngleEnable(*args):
        """
        DefaultRestHEdgeAngleEnable() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHEdgeAngleEnable(*args)

    DefaultRestHEdgeAngleEnable = staticmethod(DefaultRestHEdgeAngleEnable)

    def DefaultRestHSurfMeshCurvFactor(*args):
        """
        DefaultRestHSurfMeshCurvFactor() -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfMeshCurvFactor(*args)

    DefaultRestHSurfMeshCurvFactor = staticmethod(DefaultRestHSurfMeshCurvFactor)

    def DefaultRestHSurfMeshCurvEnable(*args):
        """
        DefaultRestHSurfMeshCurvEnable() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfMeshCurvEnable(*args)

    DefaultRestHSurfMeshCurvEnable = staticmethod(DefaultRestHSurfMeshCurvEnable)

    def DefaultKeepExistingEdges(*args):
        """
        DefaultKeepExistingEdges() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultKeepExistingEdges(*args)

    DefaultKeepExistingEdges = staticmethod(DefaultKeepExistingEdges)

    def DefaultMakeGroupsOfSurfaces(*args):
        """
        DefaultMakeGroupsOfSurfaces() -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultMakeGroupsOfSurfaces(*args)

    DefaultMakeGroupsOfSurfaces = staticmethod(DefaultMakeGroupsOfSurfaces)

    def SaveTo(self, *args):
        """
        SaveTo(NETGENPlugin_RemesherHypothesis_2D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(NETGENPlugin_RemesherHypothesis_2D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_LoadFrom(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_RemesherHypothesis_2D
NETGENPlugin_RemesherHypothesis_2D_swigregister = _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_swigregister
NETGENPlugin_RemesherHypothesis_2D_swigregister(NETGENPlugin_RemesherHypothesis_2D)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRidgeAngle(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRidgeAngle() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRidgeAngle(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultEdgeCornerAngle(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultEdgeCornerAngle() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultEdgeCornerAngle(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultChartAngle(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultChartAngle() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultChartAngle(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultOuterChartAngle(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultOuterChartAngle() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultOuterChartAngle(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHChartDistFactor(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHChartDistFactor() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHChartDistFactor(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHChartDistEnable(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHChartDistEnable() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHChartDistEnable(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHLineLengthFactor(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHLineLengthFactor() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHLineLengthFactor(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHLineLengthEnable(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHLineLengthEnable() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHLineLengthEnable(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHCloseEdgeFactor(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHCloseEdgeFactor() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHCloseEdgeFactor(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHCloseEdgeEnable(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHCloseEdgeEnable() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHCloseEdgeEnable(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfCurvFactor(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfCurvFactor() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfCurvFactor(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfCurvEnable(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfCurvEnable() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfCurvEnable(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHEdgeAngleFactor(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHEdgeAngleFactor() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHEdgeAngleFactor(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHEdgeAngleEnable(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHEdgeAngleEnable() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHEdgeAngleEnable(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfMeshCurvFactor(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfMeshCurvFactor() -> double

    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfMeshCurvFactor(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfMeshCurvEnable(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfMeshCurvEnable() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultRestHSurfMeshCurvEnable(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultKeepExistingEdges(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultKeepExistingEdges() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultKeepExistingEdges(*args)

def NETGENPlugin_RemesherHypothesis_2D_DefaultMakeGroupsOfSurfaces(*args):
    """
    NETGENPlugin_RemesherHypothesis_2D_DefaultMakeGroupsOfSurfaces() -> bool

    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_RemesherHypothesis_2D_DefaultMakeGroupsOfSurfaces(*args)

class NETGENPlugin_NETGEN_2D3D(SMESH.SMESH_3D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_NETGEN_2D3D self, int hypId, SMESH_Gen gen) -> NETGENPlugin_NETGEN_2D3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_NETGEN_2D3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(NETGENPlugin_NETGEN_2D3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D3D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(NETGENPlugin_NETGEN_2D3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D3D_Compute(self, *args)


    def CancelCompute(self, *args):
        """
        CancelCompute(NETGENPlugin_NETGEN_2D3D self)

        rief Sets _computeCanceled to true. It's usage depends on
        implementation of a particular mesher.


        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D3D_CancelCompute(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(NETGENPlugin_NETGEN_2D3D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D3D_GetProgress(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(NETGENPlugin_NETGEN_2D3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D3D_Evaluate(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_NETGEN_2D3D
NETGENPlugin_NETGEN_2D3D_swigregister = _NETGENPlugin.NETGENPlugin_NETGEN_2D3D_swigregister
NETGENPlugin_NETGEN_2D3D_swigregister(NETGENPlugin_NETGEN_2D3D)

class NETGENPlugin_NETGEN_2D_ONLY(SMESH.SMESH_2D_Algo):
    """
    rief Mesher generating 2D elements on a geometrical face taking
    into account pre-existing nodes on face boundaries

    Historically, NETGENPlugin_NETGEN_2D is actually 1D-2D, that is why
    the class is named NETGENPlugin_NETGEN_2D_ONLY. Renaming is useless as
    algorithm field "_name" can't be changed
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_NETGEN_2D_ONLY self, int hypId, SMESH_Gen gen) -> NETGENPlugin_NETGEN_2D_ONLY

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_NETGEN_2D_ONLY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(NETGENPlugin_NETGEN_2D_ONLY self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_ONLY_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(NETGENPlugin_NETGEN_2D_ONLY self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_ONLY_Compute(self, *args)


    def CancelCompute(self, *args):
        """
        CancelCompute(NETGENPlugin_NETGEN_2D_ONLY self)

        rief Sets _computeCanceled to true. It's usage depends on
        implementation of a particular mesher.


        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_ONLY_CancelCompute(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(NETGENPlugin_NETGEN_2D_ONLY self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_ONLY_GetProgress(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(NETGENPlugin_NETGEN_2D_ONLY self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_ONLY_Evaluate(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_NETGEN_2D_ONLY
NETGENPlugin_NETGEN_2D_ONLY_swigregister = _NETGENPlugin.NETGENPlugin_NETGEN_2D_ONLY_swigregister
NETGENPlugin_NETGEN_2D_ONLY_swigregister(NETGENPlugin_NETGEN_2D_ONLY)

class NETGENPlugin_NETGEN_3D(SMESH.SMESH_3D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_NETGEN_3D self, int hypId, SMESH_Gen gen) -> NETGENPlugin_NETGEN_3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_NETGEN_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(NETGENPlugin_NETGEN_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_3D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(NETGENPlugin_NETGEN_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool
        Compute(NETGENPlugin_NETGEN_3D self, SMESH_Mesh aMesh, SMESH_MesherHelper aHelper) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_3D_Compute(self, *args)


    def CancelCompute(self, *args):
        """
        CancelCompute(NETGENPlugin_NETGEN_3D self)

        rief Sets _computeCanceled to true. It's usage depends on
        implementation of a particular mesher.


        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_3D_CancelCompute(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(NETGENPlugin_NETGEN_3D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_3D_GetProgress(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(NETGENPlugin_NETGEN_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_3D_Evaluate(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_NETGEN_3D
NETGENPlugin_NETGEN_3D_swigregister = _NETGENPlugin.NETGENPlugin_NETGEN_3D_swigregister
NETGENPlugin_NETGEN_3D_swigregister(NETGENPlugin_NETGEN_3D)

class NETGENPlugin_Internals(object):
    """
    rief Container of info needed to solve problems with internal shapes.

    Issue 0020676. It is made up as a class to be ready to extract from NETGEN
    and put in SMESH as soon as the same solution is needed somewhere else.
    The approach is to precompute internal edges in 2D and internal faces in 3D
    and put their mesh correctly (twice) into netgen mesh.
    In 2D, this class finds internal edges in faces and their vertices.
    In 3D, it additionally finds internal faces, their edges shared with other faces,
    and their vertices shared by several internal edges. Nodes built on the found
    shapes and mesh faces built on the found internal faces are to be doubled in
    netgen mesh to emulate a "crack"

    For internal faces a more simple solution is found, which is just to duplicate
    mesh faces on internal geom faces without modeling a "real crack". For this
    reason findBorderElements() is no more used anywhere.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_Internals self, SMESH_Mesh mesh, TopoDS_Shape shape, bool is3D) -> NETGENPlugin_Internals

        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type is3D: bool

        """
        this = _NETGENPlugin.new_NETGENPlugin_Internals(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMesh(self, *args):
        """
        getMesh(NETGENPlugin_Internals self) -> SMESH_Mesh

        :rtype: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _NETGENPlugin.NETGENPlugin_Internals_getMesh(self, *args)


    def isShapeToPrecompute(self, *args):
        """
        isShapeToPrecompute(NETGENPlugin_Internals self, TopoDS_Shape s) -> bool

        :type s: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Internals_isShapeToPrecompute(self, *args)


    def hasInternalEdges(self, *args):
        """
        hasInternalEdges(NETGENPlugin_Internals self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Internals_hasInternalEdges(self, *args)


    def isInternalEdge(self, *args):
        """
        isInternalEdge(NETGENPlugin_Internals self, int id) -> bool

        :type id: int
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Internals_isInternalEdge(self, *args)


    def getEdgesAndVerticesWithFaces(self, *args):
        """
        :rtype: OCC.wrapper.NETGENPlugin.map

        """
        res = _NETGENPlugin.NETGENPlugin_Internals_getEdgesAndVerticesWithFaces(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def hasInternalVertexInFace(self, *args):
        """
        hasInternalVertexInFace(NETGENPlugin_Internals self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Internals_hasInternalVertexInFace(self, *args)


    def getFacesWithVertices(self, *args):
        """
        :rtype: OCC.wrapper.NETGENPlugin.map_list

        """
        res = _NETGENPlugin.NETGENPlugin_Internals_getFacesWithVertices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def hasInternalFaces(self, *args):
        """
        hasInternalFaces(NETGENPlugin_Internals self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Internals_hasInternalFaces(self, *args)


    def isInternalShape(self, *args):
        """
        isInternalShape(NETGENPlugin_Internals self, int id) -> bool

        :type id: int
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Internals_isInternalShape(self, *args)


    def findBorderElements(self, *args):
        """
        findBorderElements(NETGENPlugin_Internals self, std::set< SMDS_MeshElement const *,TIDCompare,std::allocator< SMDS_MeshElement const * > > & borderElems)

        :type borderElems: OCC.wrapper.NETGENPlugin.set_SMDS_MeshElement_TIDCompare

        """
        return _NETGENPlugin.NETGENPlugin_Internals_findBorderElements(self, *args)


    def isBorderFace(self, *args):
        """
        isBorderFace(NETGENPlugin_Internals self, int faceID) -> bool

        :type faceID: int
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Internals_isBorderFace(self, *args)


    def getInternalFaces(self, *args):
        """
        getInternalFaces(NETGENPlugin_Internals self, NCollection_IndexedMap_TopoDS_Shape_TopTools_ShapeMapHasher fmap, NCollection_IndexedMap_TopoDS_Shape_TopTools_ShapeMapHasher emap, std::list< SMESH_subMesh *,std::allocator< SMESH_subMesh * > > & facesSM, std::list< SMESH_subMesh *,std::allocator< SMESH_subMesh * > > & boundarySM)

        :type fmap: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape
        :type emap: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape
        :type facesSM: OCC.wrapper.NETGENPlugin.list_SMESH_subMesh
        :type boundarySM: OCC.wrapper.NETGENPlugin.list_SMESH_subMesh

        """
        return _NETGENPlugin.NETGENPlugin_Internals_getInternalFaces(self, *args)


    def hasInternalVertexInSolid(self, *args):
        """
        hasInternalVertexInSolid(NETGENPlugin_Internals self) -> bool
        hasInternalVertexInSolid(NETGENPlugin_Internals self, int soID) -> bool

        :type soID: int
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Internals_hasInternalVertexInSolid(self, *args)


    def getSolidsWithVertices(self, *args):
        """
        :rtype: OCC.wrapper.NETGENPlugin.map_list

        """
        res = _NETGENPlugin.NETGENPlugin_Internals_getSolidsWithVertices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def getInternalEdges(self, *args):
        return _NETGENPlugin.NETGENPlugin_Internals_getInternalEdges(self, *args)
    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_Internals
NETGENPlugin_Internals_swigregister = _NETGENPlugin.NETGENPlugin_Internals_swigregister
NETGENPlugin_Internals_swigregister(NETGENPlugin_Internals)

class NETGENPlugin_SimpleHypothesis_3D(NETGENPlugin_SimpleHypothesis_2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_SimpleHypothesis_3D self, int hypId, SMESH_Gen gen) -> NETGENPlugin_SimpleHypothesis_3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_SimpleHypothesis_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LengthFromFaces(self, *args):
        """LengthFromFaces(NETGENPlugin_SimpleHypothesis_3D self)"""
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_3D_LengthFromFaces(self, *args)


    def SetMaxElementVolume(self, *args):
        """
        SetMaxElementVolume(NETGENPlugin_SimpleHypothesis_3D self, double value)

        :type value: double

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_3D_SetMaxElementVolume(self, *args)


    def GetMaxElementVolume(self, *args):
        """
        GetMaxElementVolume(NETGENPlugin_SimpleHypothesis_3D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_3D_GetMaxElementVolume(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(NETGENPlugin_SimpleHypothesis_3D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_3D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(NETGENPlugin_SimpleHypothesis_3D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_3D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(NETGENPlugin_SimpleHypothesis_3D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Set parameters by mesh
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if theShape is meshed

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_SimpleHypothesis_3D_SetParametersByMesh(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_SimpleHypothesis_3D
NETGENPlugin_SimpleHypothesis_3D_swigregister = _NETGENPlugin.NETGENPlugin_SimpleHypothesis_3D_swigregister
NETGENPlugin_SimpleHypothesis_3D_swigregister(NETGENPlugin_SimpleHypothesis_3D)

class NETGENPlugin_NETGEN_2D(SMESH.SMESH_2D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_NETGEN_2D self, int hypId, SMESH_Gen gen) -> NETGENPlugin_NETGEN_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_NETGEN_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(NETGENPlugin_NETGEN_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(NETGENPlugin_NETGEN_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_Compute(self, *args)


    def CancelCompute(self, *args):
        """
        CancelCompute(NETGENPlugin_NETGEN_2D self)

        rief Sets _computeCanceled to true. It's usage depends on
        implementation of a particular mesher.


        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_CancelCompute(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(NETGENPlugin_NETGEN_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_GetProgress(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(NETGENPlugin_NETGEN_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_NETGEN_2D_Evaluate(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_NETGEN_2D
NETGENPlugin_NETGEN_2D_swigregister = _NETGENPlugin.NETGENPlugin_NETGEN_2D_swigregister
NETGENPlugin_NETGEN_2D_swigregister(NETGENPlugin_NETGEN_2D)

class NETGENPlugin_Hypothesis_2D(NETGENPlugin_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_Hypothesis_2D self, int hypId, SMESH_Gen gen) -> NETGENPlugin_Hypothesis_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_Hypothesis_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_Hypothesis_2D
NETGENPlugin_Hypothesis_2D_swigregister = _NETGENPlugin.NETGENPlugin_Hypothesis_2D_swigregister
NETGENPlugin_Hypothesis_2D_swigregister(NETGENPlugin_Hypothesis_2D)

class NETGENPlugin_Remesher_2D(SMESH.SMESH_2D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_Remesher_2D self, int hypId, SMESH_Gen gen) -> NETGENPlugin_Remesher_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _NETGENPlugin.new_NETGENPlugin_Remesher_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(NETGENPlugin_Remesher_2D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theStatus: Hypothesis_Status
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Remesher_2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(NETGENPlugin_Remesher_2D self, SMESH_Mesh theMesh, SMESH_MesherHelper theHelper) -> bool
        Compute(NETGENPlugin_Remesher_2D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Remesher_2D_Compute(self, *args)


    def CancelCompute(self, *args):
        """
        CancelCompute(NETGENPlugin_Remesher_2D self)

        rief Sets _computeCanceled to true. It's usage depends on
        implementation of a particular mesher.


        """
        return _NETGENPlugin.NETGENPlugin_Remesher_2D_CancelCompute(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(NETGENPlugin_Remesher_2D self) -> double

        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Remesher_2D_GetProgress(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(NETGENPlugin_Remesher_2D self, SMESH_Mesh theMesh, TopoDS_Shape theShape, MapShapeNbElems & theResMap) -> bool

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theResMap: MapShapeNbElems
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Remesher_2D_Evaluate(self, *args)

    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_Remesher_2D
NETGENPlugin_Remesher_2D_swigregister = _NETGENPlugin.NETGENPlugin_Remesher_2D_swigregister
NETGENPlugin_Remesher_2D_swigregister(NETGENPlugin_Remesher_2D)

class NETGENPlugin_Mesher(object):
    """rief This class calls the NETGEN mesher of OCC geometry"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NETGENPlugin_Mesher self, SMESH_Mesh mesh, TopoDS_Shape aShape, bool const isVolume) -> NETGENPlugin_Mesher

        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type isVolume: const bool

        """
        this = _NETGENPlugin.new_NETGENPlugin_Mesher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetSelfPointer(self, *args):
        """
        SetSelfPointer(NETGENPlugin_Mesher self, NETGENPlugin_Mesher ** ptr)

        :type ptr: OCC.wrapper.NETGENPlugin.NETGENPlugin_Mesher

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_SetSelfPointer(self, *args)


    def SetParameters(self, *args):
        """
        SetParameters(NETGENPlugin_Mesher self, NETGENPlugin_Hypothesis hyp)
        SetParameters(NETGENPlugin_Mesher self, NETGENPlugin_SimpleHypothesis_2D hyp)
        SetParameters(NETGENPlugin_Mesher self, StdMeshers_ViscousLayers hyp)

        :type hyp: OCC.wrapper.StdMeshers.StdMeshers_ViscousLayers

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_SetParameters(self, *args)


    def SetViscousLayers2DAssigned(self, *args):
        """
        SetViscousLayers2DAssigned(NETGENPlugin_Mesher self, bool isAssigned)

        :type isAssigned: bool

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_SetViscousLayers2DAssigned(self, *args)


    def SetLocalSizeForChordalError(self, *args):
        """
        SetLocalSizeForChordalError(NETGENPlugin_Mesher self, netgen::OCCGeometry & occgeo, netgen::Mesh & ngMesh)

        :type occgeo: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_SetLocalSizeForChordalError(self, *args)


    def SetLocalSize(*args):
        """
        SetLocalSize(netgen::OCCGeometry & occgeo, netgen::Mesh & ngMesh)

        :type occgeo: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_SetLocalSize(*args)

    SetLocalSize = staticmethod(SetLocalSize)

    def Compute(self, *args):
        """
        Compute(NETGENPlugin_Mesher self) -> bool

        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(NETGENPlugin_Mesher self, MapShapeNbElems & aResMap) -> bool

        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_Evaluate(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(NETGENPlugin_Mesher self, SMESH_Algo holder, int const * algoProgressTic, double const * algoProgress) -> double

        :type holder: OCC.wrapper.SMESH.SMESH_Algo
        :type algoProgressTic: const int *
        :type algoProgress: const double *
        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_GetProgress(self, *args)


    def PrepareOCCgeometry(*args):
        """
        PrepareOCCgeometry(netgen::OCCGeometry & occgeom, TopoDS_Shape shape, SMESH_Mesh mesh, std::list< SMESH_subMesh *,std::allocator< SMESH_subMesh * > > * meshedSM=None, NETGENPlugin_Internals internalShapes=None)

        :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type meshedSM: OCC.wrapper.NETGENPlugin.list_SMESH_subMesh
        :type internalShapes: OCC.wrapper.NETGENPlugin.NETGENPlugin_Internals

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_PrepareOCCgeometry(*args)

    PrepareOCCgeometry = staticmethod(PrepareOCCgeometry)

    def GetDefaultMinSize(*args):
        """
        GetDefaultMinSize(TopoDS_Shape shape, double const maxSize) -> double

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type maxSize: const double
        :rtype: double

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_GetDefaultMinSize(*args)

    GetDefaultMinSize = staticmethod(GetDefaultMinSize)

    def RestrictLocalSize(*args):
        """
        RestrictLocalSize(netgen::Mesh & ngMesh, gp_XYZ p, double size, bool const overrideMinH=True)

        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
        :type p: OCC.wrapper.gp.gp_XYZ
        :type size: double
        :type overrideMinH: const bool

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_RestrictLocalSize(*args)

    RestrictLocalSize = staticmethod(RestrictLocalSize)

    def FillSMesh(*args):
        """
        FillSMesh(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, NETGENPlugin_ngMeshInfo const & initState, SMESH_Mesh sMesh, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, SMESH_Comment comment, SMESH_MesherHelper quadHelper=None) -> int

        :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
        :type initState: OCC.wrapper.NETGENPlugin.NETGENPlugin_ngMeshInfo
        :type sMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
        :type comment: OCC.wrapper.SMESH.SMESH_Comment
        :type quadHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :rtype: int

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_FillSMesh(*args)

    FillSMesh = staticmethod(FillSMesh)

    def FillNgMesh(self, *args):
        """
        FillNgMesh(NETGENPlugin_Mesher self, netgen::OCCGeometry & occgeom, netgen::Mesh & ngMesh, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, std::list< SMESH_subMesh *,std::allocator< SMESH_subMesh * > > const & meshedSM, SMESH_MesherHelper quadHelper=None, shared_ptr_SMESH_ProxyMesh proxyMesh) -> bool

        :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
        :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
        :type meshedSM: OCC.wrapper.NETGENPlugin.list_SMESH_subMesh
        :type quadHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :type proxyMesh: Ptr
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_FillNgMesh(self, *args)


    def FixIntFaces(*args):
        """
        FixIntFaces(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, NETGENPlugin_Internals internalShapes)

        :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
        :type internalShapes: OCC.wrapper.NETGENPlugin.NETGENPlugin_Internals

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_FixIntFaces(*args)

    FixIntFaces = staticmethod(FixIntFaces)

    def FixFaceMesh(*args):
        """
        FixFaceMesh(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, int const faceID) -> bool

        :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
        :type faceID: const int
        :rtype: bool

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_FixFaceMesh(*args)

    FixFaceMesh = staticmethod(FixFaceMesh)

    def AddIntVerticesInFaces(*args):
        """
        AddIntVerticesInFaces(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, NETGENPlugin_Internals internalShapes)

        :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
        :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
        :type internalShapes: OCC.wrapper.NETGENPlugin.NETGENPlugin_Internals

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_AddIntVerticesInFaces(*args)

    AddIntVerticesInFaces = staticmethod(AddIntVerticesInFaces)

    def AddIntVerticesInSolids(*args):
        """
        AddIntVerticesInSolids(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, NETGENPlugin_Internals internalShapes)

        :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
        :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
        :type internalShapes: OCC.wrapper.NETGENPlugin.NETGENPlugin_Internals

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_AddIntVerticesInSolids(*args)

    AddIntVerticesInSolids = staticmethod(AddIntVerticesInSolids)

    def AddSegmentsToMesh(*args):
        """
        AddSegmentsToMesh(netgen::Mesh & ngMesh, netgen::OCCGeometry & geom, TSideVector const & wires, SMESH_MesherHelper helper, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, bool const overrideMinH=True) -> shared_ptr_SMESH_ComputeError

        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
        :type geom: OCC.wrapper.NETGENPlugin.OCCGeometry
        :type wires: TSideVector
        :type helper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
        :type overrideMinH: const bool
        :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_AddSegmentsToMesh(*args)

    AddSegmentsToMesh = staticmethod(AddSegmentsToMesh)

    def SetDefaultParameters(self, *args):
        """SetDefaultParameters(NETGENPlugin_Mesher self)"""
        return _NETGENPlugin.NETGENPlugin_Mesher_SetDefaultParameters(self, *args)


    def ReadErrors(*args):
        """
        ReadErrors(std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodeVec) -> shared_ptr_SMESH_ComputeError

        :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
        :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_ReadErrors(*args)

    ReadErrors = staticmethod(ReadErrors)

    def toPython(*args):
        """
        toPython(netgen::Mesh const * ngMesh)

        :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh

        """
        return _NETGENPlugin.NETGENPlugin_Mesher_toPython(*args)

    toPython = staticmethod(toPython)
    __swig_destroy__ = _NETGENPlugin.delete_NETGENPlugin_Mesher
NETGENPlugin_Mesher_swigregister = _NETGENPlugin.NETGENPlugin_Mesher_swigregister
NETGENPlugin_Mesher_swigregister(NETGENPlugin_Mesher)

def NETGENPlugin_Mesher_SetLocalSize(*args):
    """
    NETGENPlugin_Mesher_SetLocalSize(netgen::OCCGeometry & occgeo, netgen::Mesh & ngMesh)

    :type occgeo: OCC.wrapper.NETGENPlugin.OCCGeometry
    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_SetLocalSize(*args)

def NETGENPlugin_Mesher_PrepareOCCgeometry(*args):
    """
    NETGENPlugin_Mesher_PrepareOCCgeometry(netgen::OCCGeometry & occgeom, TopoDS_Shape shape, SMESH_Mesh mesh, std::list< SMESH_subMesh *,std::allocator< SMESH_subMesh * > > * meshedSM=None, NETGENPlugin_Internals internalShapes=None)

    :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type mesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type meshedSM: OCC.wrapper.NETGENPlugin.list_SMESH_subMesh
    :type internalShapes: OCC.wrapper.NETGENPlugin.NETGENPlugin_Internals

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_PrepareOCCgeometry(*args)

def NETGENPlugin_Mesher_GetDefaultMinSize(*args):
    """
    NETGENPlugin_Mesher_GetDefaultMinSize(TopoDS_Shape shape, double const maxSize) -> double

    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type maxSize: const double
    :rtype: double

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_GetDefaultMinSize(*args)

def NETGENPlugin_Mesher_RestrictLocalSize(*args):
    """
    NETGENPlugin_Mesher_RestrictLocalSize(netgen::Mesh & ngMesh, gp_XYZ p, double size, bool const overrideMinH=True)

    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
    :type p: OCC.wrapper.gp.gp_XYZ
    :type size: double
    :type overrideMinH: const bool

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_RestrictLocalSize(*args)

def NETGENPlugin_Mesher_FillSMesh(*args):
    """
    NETGENPlugin_Mesher_FillSMesh(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, NETGENPlugin_ngMeshInfo const & initState, SMESH_Mesh sMesh, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, SMESH_Comment comment, SMESH_MesherHelper quadHelper=None) -> int

    :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
    :type initState: OCC.wrapper.NETGENPlugin.NETGENPlugin_ngMeshInfo
    :type sMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
    :type comment: OCC.wrapper.SMESH.SMESH_Comment
    :type quadHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
    :rtype: int

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_FillSMesh(*args)

def NETGENPlugin_Mesher_FixIntFaces(*args):
    """
    NETGENPlugin_Mesher_FixIntFaces(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, NETGENPlugin_Internals internalShapes)

    :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
    :type internalShapes: OCC.wrapper.NETGENPlugin.NETGENPlugin_Internals

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_FixIntFaces(*args)

def NETGENPlugin_Mesher_FixFaceMesh(*args):
    """
    NETGENPlugin_Mesher_FixFaceMesh(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, int const faceID) -> bool

    :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
    :type faceID: const int
    :rtype: bool

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_FixFaceMesh(*args)

def NETGENPlugin_Mesher_AddIntVerticesInFaces(*args):
    """
    NETGENPlugin_Mesher_AddIntVerticesInFaces(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, NETGENPlugin_Internals internalShapes)

    :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
    :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
    :type internalShapes: OCC.wrapper.NETGENPlugin.NETGENPlugin_Internals

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_AddIntVerticesInFaces(*args)

def NETGENPlugin_Mesher_AddIntVerticesInSolids(*args):
    """
    NETGENPlugin_Mesher_AddIntVerticesInSolids(netgen::OCCGeometry const & occgeom, netgen::Mesh & ngMesh, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, NETGENPlugin_Internals internalShapes)

    :type occgeom: OCC.wrapper.NETGENPlugin.OCCGeometry
    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
    :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
    :type internalShapes: OCC.wrapper.NETGENPlugin.NETGENPlugin_Internals

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_AddIntVerticesInSolids(*args)

def NETGENPlugin_Mesher_AddSegmentsToMesh(*args):
    """
    NETGENPlugin_Mesher_AddSegmentsToMesh(netgen::Mesh & ngMesh, netgen::OCCGeometry & geom, TSideVector const & wires, SMESH_MesherHelper helper, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodeVec, bool const overrideMinH=True) -> shared_ptr_SMESH_ComputeError

    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh
    :type geom: OCC.wrapper.NETGENPlugin.OCCGeometry
    :type wires: TSideVector
    :type helper: OCC.wrapper.SMESH.SMESH_MesherHelper
    :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
    :type overrideMinH: const bool
    :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_AddSegmentsToMesh(*args)

def NETGENPlugin_Mesher_ReadErrors(*args):
    """
    NETGENPlugin_Mesher_ReadErrors(std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodeVec) -> shared_ptr_SMESH_ComputeError

    :type nodeVec: OCC.wrapper.NETGENPlugin.vector_SMDS_MeshNode
    :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_ReadErrors(*args)

def NETGENPlugin_Mesher_toPython(*args):
    """
    NETGENPlugin_Mesher_toPython(netgen::Mesh const * ngMesh)

    :type ngMesh: OCC.wrapper.NETGENPlugin.Mesh

    """
    return _NETGENPlugin.NETGENPlugin_Mesher_toPython(*args)



