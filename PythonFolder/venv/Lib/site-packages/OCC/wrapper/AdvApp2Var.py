# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AdvApp2Var')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AdvApp2Var')
    _AdvApp2Var = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AdvApp2Var', [dirname(__file__)])
        except ImportError:
            import _AdvApp2Var
            return _AdvApp2Var
        try:
            _mod = imp.load_module('_AdvApp2Var', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AdvApp2Var = swig_import_helper()
    del swig_import_helper
else:
    import _AdvApp2Var
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AdvApp2Var.delete_SwigPyIterator

    def value(self):
        return _AdvApp2Var.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AdvApp2Var.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AdvApp2Var.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AdvApp2Var.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AdvApp2Var.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AdvApp2Var.SwigPyIterator_copy(self)

    def next(self):
        return _AdvApp2Var.SwigPyIterator_next(self)

    def __next__(self):
        return _AdvApp2Var.SwigPyIterator___next__(self)

    def previous(self):
        return _AdvApp2Var.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AdvApp2Var.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AdvApp2Var.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AdvApp2Var.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AdvApp2Var.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AdvApp2Var.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AdvApp2Var.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AdvApp2Var.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AdvApp2Var.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _AdvApp2Var.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_AdvApp2Var.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _AdvApp2Var.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _AdvApp2Var.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _AdvApp2Var.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _AdvApp2Var.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _AdvApp2Var.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _AdvApp2Var.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_AdvApp2Var.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _AdvApp2Var.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _AdvApp2Var.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _AdvApp2Var.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _AdvApp2Var.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _AdvApp2Var.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _AdvApp2Var.ptr_to_number(item)
ptr_to_number = _AdvApp2Var.ptr_to_number

def HashCode(*args):
    return _AdvApp2Var.HashCode(*args)
HashCode = _AdvApp2Var.HashCode

def ptr_equal(a, b):
    return _AdvApp2Var.ptr_equal(a, b)
ptr_equal = _AdvApp2Var.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
AdvApp2Var_Absolute = _AdvApp2Var.AdvApp2Var_Absolute
AdvApp2Var_Relative = _AdvApp2Var.AdvApp2Var_Relative
AdvApp2Var_Regular = _AdvApp2Var.AdvApp2Var_Regular
AdvApp2Var_Incremental = _AdvApp2Var.AdvApp2Var_Incremental
class AdvApp2Var_Node(object):
    """used to store constraints on a (Ui,Vj) point"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApp2Var_Node self) -> AdvApp2Var_Node
        __init__(AdvApp2Var_Node self, Standard_Integer const iu, Standard_Integer const iv) -> AdvApp2Var_Node
        __init__(AdvApp2Var_Node self, gp_XY UV, Standard_Integer const iu, Standard_Integer const iv) -> AdvApp2Var_Node

        :type UV: OCC.wrapper.gp.gp_XY
        :type iu: int
        :type iv: int

        """
        this = _AdvApp2Var.new_AdvApp2Var_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Coord(self, *args):
        """
        Coord(AdvApp2Var_Node self) -> gp_XY

        :rtype: OCC.wrapper.gp.gp_XY

        """
        return _AdvApp2Var.AdvApp2Var_Node_Coord(self, *args)


    def SetCoord(self, *args):
        """
        SetCoord(AdvApp2Var_Node self, Standard_Real const x1, Standard_Real const x2)

        :type x1: float
        :type x2: float

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetCoord(self, *args)


    def UOrder(self, *args):
        """
        UOrder(AdvApp2Var_Node self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Node_UOrder(self, *args)


    def VOrder(self, *args):
        """
        VOrder(AdvApp2Var_Node self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Node_VOrder(self, *args)


    def SetPoint(self, *args):
        """
        SetPoint(AdvApp2Var_Node self, Standard_Integer const iu, Standard_Integer const iv, gp_Pnt Cte)

        :type iu: int
        :type iv: int
        :type Cte: OCC.wrapper.gp.gp_Pnt

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetPoint(self, *args)


    def Point(self, *args):
        """
        Point(AdvApp2Var_Node self, Standard_Integer const iu, Standard_Integer const iv) -> gp_Pnt

        :type iu: int
        :type iv: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _AdvApp2Var.AdvApp2Var_Node_Point(self, *args)


    def SetError(self, *args):
        """
        SetError(AdvApp2Var_Node self, Standard_Integer const iu, Standard_Integer const iv, Standard_Real const error)

        :type iu: int
        :type iv: int
        :type error: float

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetError(self, *args)


    def Error(self, *args):
        """
        Error(AdvApp2Var_Node self, Standard_Integer const iu, Standard_Integer const iv) -> Standard_Real

        :type iu: int
        :type iv: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Node_Error(self, *args)

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Node
AdvApp2Var_Node_swigregister = _AdvApp2Var.AdvApp2Var_Node_swigregister
AdvApp2Var_Node_swigregister(AdvApp2Var_Node)

class AdvApp2Var_Iso(object):
    """used to store constraints on a line U = Ui or V = Vj"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApp2Var_Iso self) -> AdvApp2Var_Iso
        __init__(AdvApp2Var_Iso self, GeomAbs_IsoType const type, Standard_Real const cte, Standard_Real const Ufirst, Standard_Real const Ulast, Standard_Real const Vfirst, Standard_Real const Vlast, Standard_Integer const pos, Standard_Integer const iu, Standard_Integer const iv) -> AdvApp2Var_Iso

        :type type: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type cte: float
        :type Ufirst: float
        :type Ulast: float
        :type Vfirst: float
        :type Vlast: float
        :type pos: int
        :type iu: int
        :type iv: int

        """
        this = _AdvApp2Var.new_AdvApp2Var_Iso(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsApproximated(self, *args):
        """
        IsApproximated(AdvApp2Var_Iso self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_Iso_IsApproximated(self, *args)


    def HasResult(self, *args):
        """
        HasResult(AdvApp2Var_Iso self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_Iso_HasResult(self, *args)


    def MakeApprox(self, *args):
        """
        MakeApprox(AdvApp2Var_Iso self, AdvApp2Var_Context Conditions, Standard_Real const a, Standard_Real const b, Standard_Real const c, Standard_Real const d, AdvApp2Var_EvaluatorFunc2Var func, AdvApp2Var_Node NodeBegin, AdvApp2Var_Node NodeEnd)

        :type Conditions: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context
        :type a: float
        :type b: float
        :type c: float
        :type d: float
        :type func: OCC.wrapper.AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var
        :type NodeBegin: OCC.wrapper.AdvApp2Var.AdvApp2Var_Node
        :type NodeEnd: OCC.wrapper.AdvApp2Var.AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_Iso_MakeApprox(self, *args)


    def ChangeDomain(self, *args):
        """
        ChangeDomain(AdvApp2Var_Iso self, Standard_Real const a, Standard_Real const b)
        ChangeDomain(AdvApp2Var_Iso self, Standard_Real const a, Standard_Real const b, Standard_Real const c, Standard_Real const d)

        :type a: float
        :type b: float
        :type c: float
        :type d: float

        """
        return _AdvApp2Var.AdvApp2Var_Iso_ChangeDomain(self, *args)


    def SetConstante(self, *args):
        """
        SetConstante(AdvApp2Var_Iso self, Standard_Real const newcte)

        :type newcte: float

        """
        return _AdvApp2Var.AdvApp2Var_Iso_SetConstante(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(AdvApp2Var_Iso self, Standard_Integer const newpos)

        :type newpos: int

        """
        return _AdvApp2Var.AdvApp2Var_Iso_SetPosition(self, *args)


    def ResetApprox(self, *args):
        """ResetApprox(AdvApp2Var_Iso self)"""
        return _AdvApp2Var.AdvApp2Var_Iso_ResetApprox(self, *args)


    def OverwriteApprox(self, *args):
        """OverwriteApprox(AdvApp2Var_Iso self)"""
        return _AdvApp2Var.AdvApp2Var_Iso_OverwriteApprox(self, *args)


    def Type(self, *args):
        """
        Type(AdvApp2Var_Iso self) -> GeomAbs_IsoType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_IsoType

        """
        return _AdvApp2Var.AdvApp2Var_Iso_Type(self, *args)


    def Constante(self, *args):
        """
        Constante(AdvApp2Var_Iso self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Iso_Constante(self, *args)


    def T0(self, *args):
        """
        T0(AdvApp2Var_Iso self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Iso_T0(self, *args)


    def T1(self, *args):
        """
        T1(AdvApp2Var_Iso self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Iso_T1(self, *args)


    def U0(self, *args):
        """
        U0(AdvApp2Var_Iso self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Iso_U0(self, *args)


    def U1(self, *args):
        """
        U1(AdvApp2Var_Iso self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Iso_U1(self, *args)


    def V0(self, *args):
        """
        V0(AdvApp2Var_Iso self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Iso_V0(self, *args)


    def V1(self, *args):
        """
        V1(AdvApp2Var_Iso self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Iso_V1(self, *args)


    def UOrder(self, *args):
        """
        UOrder(AdvApp2Var_Iso self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Iso_UOrder(self, *args)


    def VOrder(self, *args):
        """
        VOrder(AdvApp2Var_Iso self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Iso_VOrder(self, *args)


    def Position(self, *args):
        """
        Position(AdvApp2Var_Iso self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Iso_Position(self, *args)


    def NbCoeff(self, *args):
        """
        NbCoeff(AdvApp2Var_Iso self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Iso_NbCoeff(self, *args)


    def Polynom(self, *args):
        """
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        res = _AdvApp2Var.AdvApp2Var_Iso_Polynom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SomTab(self, *args):
        """
        SomTab(AdvApp2Var_Iso self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Iso_SomTab(self, *args)


    def DifTab(self, *args):
        """
        DifTab(AdvApp2Var_Iso self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Iso_DifTab(self, *args)


    def MaxErrors(self, *args):
        """
        MaxErrors(AdvApp2Var_Iso self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Iso_MaxErrors(self, *args)


    def MoyErrors(self, *args):
        """
        MoyErrors(AdvApp2Var_Iso self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Iso_MoyErrors(self, *args)

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Iso
AdvApp2Var_Iso_swigregister = _AdvApp2Var.AdvApp2Var_Iso_swigregister
AdvApp2Var_Iso_swigregister(AdvApp2Var_Iso)

class AdvApp2Var_Patch(object):
    """used to store results on a domain [Ui,Ui+1]x[Vj,Vj+1]"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApp2Var_Patch self) -> AdvApp2Var_Patch
        __init__(AdvApp2Var_Patch self, Standard_Real const U0, Standard_Real const U1, Standard_Real const V0, Standard_Real const V1, Standard_Integer const iu, Standard_Integer const iv) -> AdvApp2Var_Patch

        :type U0: float
        :type U1: float
        :type V0: float
        :type V1: float
        :type iu: int
        :type iv: int

        """
        this = _AdvApp2Var.new_AdvApp2Var_Patch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsDiscretised(self, *args):
        """
        IsDiscretised(AdvApp2Var_Patch self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsDiscretised(self, *args)


    def Discretise(self, *args):
        """
        Discretise(AdvApp2Var_Patch self, AdvApp2Var_Context Conditions, AdvApp2Var_Framework Constraints, AdvApp2Var_EvaluatorFunc2Var func)

        :type Conditions: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context
        :type Constraints: OCC.wrapper.AdvApp2Var.AdvApp2Var_Framework
        :type func: OCC.wrapper.AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Discretise(self, *args)


    def IsApproximated(self, *args):
        """
        IsApproximated(AdvApp2Var_Patch self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsApproximated(self, *args)


    def HasResult(self, *args):
        """
        HasResult(AdvApp2Var_Patch self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_Patch_HasResult(self, *args)


    def MakeApprox(self, *args):
        """
        MakeApprox(AdvApp2Var_Patch self, AdvApp2Var_Context Conditions, AdvApp2Var_Framework Constraints, Standard_Integer const NumDec)

        :type Conditions: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context
        :type Constraints: OCC.wrapper.AdvApp2Var.AdvApp2Var_Framework
        :type NumDec: int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_MakeApprox(self, *args)


    def AddConstraints(self, *args):
        """
        AddConstraints(AdvApp2Var_Patch self, AdvApp2Var_Context Conditions, AdvApp2Var_Framework Constraints)

        :type Conditions: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context
        :type Constraints: OCC.wrapper.AdvApp2Var.AdvApp2Var_Framework

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AddConstraints(self, *args)


    def AddErrors(self, *args):
        """
        AddErrors(AdvApp2Var_Patch self, AdvApp2Var_Framework Constraints)

        :type Constraints: OCC.wrapper.AdvApp2Var.AdvApp2Var_Framework

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AddErrors(self, *args)


    def ChangeDomain(self, *args):
        """
        ChangeDomain(AdvApp2Var_Patch self, Standard_Real const a, Standard_Real const b, Standard_Real const c, Standard_Real const d)

        :type a: float
        :type b: float
        :type c: float
        :type d: float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_ChangeDomain(self, *args)


    def ResetApprox(self, *args):
        """ResetApprox(AdvApp2Var_Patch self)"""
        return _AdvApp2Var.AdvApp2Var_Patch_ResetApprox(self, *args)


    def OverwriteApprox(self, *args):
        """OverwriteApprox(AdvApp2Var_Patch self)"""
        return _AdvApp2Var.AdvApp2Var_Patch_OverwriteApprox(self, *args)


    def U0(self, *args):
        """
        U0(AdvApp2Var_Patch self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Patch_U0(self, *args)


    def U1(self, *args):
        """
        U1(AdvApp2Var_Patch self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Patch_U1(self, *args)


    def V0(self, *args):
        """
        V0(AdvApp2Var_Patch self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Patch_V0(self, *args)


    def V1(self, *args):
        """
        V1(AdvApp2Var_Patch self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Patch_V1(self, *args)


    def UOrder(self, *args):
        """
        UOrder(AdvApp2Var_Patch self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Patch_UOrder(self, *args)


    def VOrder(self, *args):
        """
        VOrder(AdvApp2Var_Patch self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Patch_VOrder(self, *args)


    def CutSense(self, *args):
        """
        CutSense(AdvApp2Var_Patch self) -> Standard_Integer
        CutSense(AdvApp2Var_Patch self, AdvApp2Var_Criterion Crit, Standard_Integer const NumDec) -> Standard_Integer

        :type Crit: OCC.wrapper.AdvApp2Var.AdvApp2Var_Criterion
        :type NumDec: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Patch_CutSense(self, *args)


    def NbCoeffInU(self, *args):
        """
        NbCoeffInU(AdvApp2Var_Patch self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Patch_NbCoeffInU(self, *args)


    def NbCoeffInV(self, *args):
        """
        NbCoeffInV(AdvApp2Var_Patch self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Patch_NbCoeffInV(self, *args)


    def ChangeNbCoeff(self, *args):
        """
        ChangeNbCoeff(AdvApp2Var_Patch self, Standard_Integer const NbCoeffU, Standard_Integer const NbCoeffV)

        :type NbCoeffU: int
        :type NbCoeffV: int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_ChangeNbCoeff(self, *args)


    def Poles(self, *args):
        """
        Poles(AdvApp2Var_Patch self, Standard_Integer const SSPIndex, AdvApp2Var_Context Conditions) -> Handle_TColgp_HArray2OfPnt

        :type SSPIndex: int
        :type Conditions: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context
        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray2OfPnt

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Poles(self, *args)


    def Coefficients(self, *args):
        """
        Coefficients(AdvApp2Var_Patch self, Standard_Integer const SSPIndex, AdvApp2Var_Context Conditions) -> Handle_TColStd_HArray1OfReal

        :type SSPIndex: int
        :type Conditions: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Coefficients(self, *args)


    def MaxErrors(self, *args):
        """
        MaxErrors(AdvApp2Var_Patch self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Patch_MaxErrors(self, *args)


    def AverageErrors(self, *args):
        """
        AverageErrors(AdvApp2Var_Patch self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AverageErrors(self, *args)


    def IsoErrors(self, *args):
        """
        IsoErrors(AdvApp2Var_Patch self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsoErrors(self, *args)


    def CritValue(self, *args):
        """
        CritValue(AdvApp2Var_Patch self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Patch_CritValue(self, *args)


    def SetCritValue(self, *args):
        """
        SetCritValue(AdvApp2Var_Patch self, Standard_Real const dist)

        :type dist: float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_SetCritValue(self, *args)

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Patch
AdvApp2Var_Patch_swigregister = _AdvApp2Var.AdvApp2Var_Patch_swigregister
AdvApp2Var_Patch_swigregister(AdvApp2Var_Patch)

class AdvApp2Var_Context(object):
    """
    contains  all the  parameters  for approximation
    ( tolerancy, computing option, ...)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApp2Var_Context self) -> AdvApp2Var_Context
        __init__(AdvApp2Var_Context self, Standard_Integer const ifav, Standard_Integer const iu, Standard_Integer const iv, Standard_Integer const nlimu, Standard_Integer const nlimv, Standard_Integer const iprecis, Standard_Integer const nb1Dss, Standard_Integer const nb2Dss, Standard_Integer const nb3Dss, Handle_TColStd_HArray1OfReal tol1D, Handle_TColStd_HArray1OfReal tol2D, Handle_TColStd_HArray1OfReal tol3D, Handle_TColStd_HArray2OfReal tof1D, Handle_TColStd_HArray2OfReal tof2D, Handle_TColStd_HArray2OfReal tof3D) -> AdvApp2Var_Context

        :type ifav: int
        :type iu: int
        :type iv: int
        :type nlimu: int
        :type nlimv: int
        :type iprecis: int
        :type nb1Dss: int
        :type nb2Dss: int
        :type nb3Dss: int
        :type tol1D: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type tol2D: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type tol3D: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type tof1D: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type tof2D: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type tof3D: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        this = _AdvApp2Var.new_AdvApp2Var_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TotalDimension(self, *args):
        """
        TotalDimension(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_TotalDimension(self, *args)


    def TotalNumberSSP(self, *args):
        """
        TotalNumberSSP(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_TotalNumberSSP(self, *args)


    def FavorIso(self, *args):
        """
        FavorIso(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_FavorIso(self, *args)


    def UOrder(self, *args):
        """
        UOrder(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_UOrder(self, *args)


    def VOrder(self, *args):
        """
        VOrder(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_VOrder(self, *args)


    def ULimit(self, *args):
        """
        ULimit(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_ULimit(self, *args)


    def VLimit(self, *args):
        """
        VLimit(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_VLimit(self, *args)


    def UJacDeg(self, *args):
        """
        UJacDeg(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_UJacDeg(self, *args)


    def VJacDeg(self, *args):
        """
        VJacDeg(AdvApp2Var_Context self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Context_VJacDeg(self, *args)


    def UJacMax(self, *args):
        """
        UJacMax(AdvApp2Var_Context self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_UJacMax(self, *args)


    def VJacMax(self, *args):
        """
        VJacMax(AdvApp2Var_Context self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_VJacMax(self, *args)


    def URoots(self, *args):
        """
        URoots(AdvApp2Var_Context self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_URoots(self, *args)


    def VRoots(self, *args):
        """
        VRoots(AdvApp2Var_Context self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_VRoots(self, *args)


    def UGauss(self, *args):
        """
        UGauss(AdvApp2Var_Context self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_UGauss(self, *args)


    def VGauss(self, *args):
        """
        VGauss(AdvApp2Var_Context self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_VGauss(self, *args)


    def IToler(self, *args):
        """
        IToler(AdvApp2Var_Context self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_IToler(self, *args)


    def FToler(self, *args):
        """
        FToler(AdvApp2Var_Context self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_FToler(self, *args)


    def CToler(self, *args):
        """
        CToler(AdvApp2Var_Context self) -> Handle_TColStd_HArray2OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_CToler(self, *args)

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Context
AdvApp2Var_Context_swigregister = _AdvApp2Var.AdvApp2Var_Context_swigregister
AdvApp2Var_Context_swigregister(AdvApp2Var_Context)

class NCollection_Sequence_AdvApp2Var_Patch(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_AdvApp2Var_Patch self) -> NCollection_Sequence< AdvApp2Var_Patch >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_AdvApp2Var_Patch self) -> NCollection_Sequence< AdvApp2Var_Patch >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_AdvApp2Var_Patch self) -> NCollection_Sequence< AdvApp2Var_Patch >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_AdvApp2Var_Patch self) -> NCollection_Sequence< AdvApp2Var_Patch >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _AdvApp2Var.new_NCollection_Sequence_AdvApp2Var_Patch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_AdvApp2Var_Patch self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_AdvApp2Var_Patch self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_AdvApp2Var_Patch self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_AdvApp2Var_Patch self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_AdvApp2Var_Patch self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_AdvApp2Var_Patch self)

        Reverse sequence


        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_AdvApp2Var_Patch self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_AdvApp2Var_Patch self, NCollection_Sequence_AdvApp2Var_Patch theOther) -> NCollection_Sequence_AdvApp2Var_Patch

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_AdvApp2Var_Patch self, NCollection_Sequence_AdvApp2Var_Patch theOther) -> NCollection_Sequence_AdvApp2Var_Patch

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_AdvApp2Var_Patch self, NCollection_Sequence< AdvApp2Var_Patch >::Iterator & thePosition)
        Remove(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_AdvApp2Var_Patch self, AdvApp2Var_Patch theItem)
        Append(NCollection_Sequence_AdvApp2Var_Patch self, NCollection_Sequence_AdvApp2Var_Patch theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_AdvApp2Var_Patch self, AdvApp2Var_Patch theItem)
        Prepend(NCollection_Sequence_AdvApp2Var_Patch self, NCollection_Sequence_AdvApp2Var_Patch theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theIndex, AdvApp2Var_Patch theItem)
        InsertBefore(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Patch theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_AdvApp2Var_Patch self, NCollection_Sequence< AdvApp2Var_Patch >::Iterator & thePosition, AdvApp2Var_Patch theItem)
        InsertAfter(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Patch theSeq)
        InsertAfter(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theIndex, AdvApp2Var_Patch theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Patch theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_AdvApp2Var_Patch self) -> AdvApp2Var_Patch

        First item access

        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_AdvApp2Var_Patch self) -> AdvApp2Var_Patch

        Last item access

        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theIndex) -> AdvApp2Var_Patch

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_AdvApp2Var_Patch self, Standard_Integer const theIndex, AdvApp2Var_Patch theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_SetValue(self, *args)


    def __iter__(self):
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch___iter__(self)
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_Sequence_AdvApp2Var_Patch
NCollection_Sequence_AdvApp2Var_Patch_swigregister = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_swigregister
NCollection_Sequence_AdvApp2Var_Patch_swigregister(NCollection_Sequence_AdvApp2Var_Patch)

def NCollection_Sequence_AdvApp2Var_Patch_delNode(*args):
    """
    NCollection_Sequence_AdvApp2Var_Patch_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_delNode(*args)

class NCollection_Sequence_AdvApp2Var_Patch_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _AdvApp2Var.new_NCollection_Sequence_AdvApp2Var_Patch_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_Sequence_AdvApp2Var_Patch_IteratorHelper

    def __next__(self):
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_IteratorHelper___next__(self)
NCollection_Sequence_AdvApp2Var_Patch_IteratorHelper_swigregister = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Patch_IteratorHelper_swigregister
NCollection_Sequence_AdvApp2Var_Patch_IteratorHelper_swigregister(NCollection_Sequence_AdvApp2Var_Patch_IteratorHelper)


try:
	AdvApp2Var_SequenceOfPatch = NCollection_Sequence_AdvApp2Var_Patch
except NameError:
	pass # does not exist, probably ignored

class AdvApp2Var_SysBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(AdvApp2Var_SysBase self) -> AdvApp2Var_SysBase"""
        this = _AdvApp2Var.new_AdvApp2Var_SysBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def mainial_(self, *args):
        """
        mainial_(AdvApp2Var_SysBase self) -> int

        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mainial_(self, *args)


    def macinit_(*args):
        """
        macinit_(int * arg1, int * arg2) -> int

        :type : int *
        :type : int *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macinit_(*args)

    macinit_ = staticmethod(macinit_)

    def mcrdelt_(self, *args):
        """
        mcrdelt_(AdvApp2Var_SysBase self, integer * iunit, integer * isize, void * t, intptr_t * iofset, integer * iercod) -> int

        :type iunit: integer
        :type isize: integer
        :type t: void *
        :type iofset: intptr_t
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrdelt_(self, *args)


    def mcrfill_(*args):
        """
        mcrfill_(integer * size, void * tin, void * tout) -> int

        :type size: integer
        :type tin: void *
        :type tout: void *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrfill_(*args)

    mcrfill_ = staticmethod(mcrfill_)

    def mcrrqst_(self, *args):
        """
        mcrrqst_(AdvApp2Var_SysBase self, integer * iunit, integer * isize, void * t, intptr_t * iofset, integer * iercod) -> int

        :type iunit: integer
        :type isize: integer
        :type t: void *
        :type iofset: intptr_t
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrrqst_(self, *args)


    def mnfndeb_(*args):
        """
        mnfndeb_() -> integer

        :rtype: integer

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mnfndeb_(*args)

    mnfndeb_ = staticmethod(mnfndeb_)

    def do__fio(*args):
        """
        do__fio() -> int

        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_do__fio(*args)

    do__fio = staticmethod(do__fio)

    def do__lio(*args):
        """
        do__lio() -> int

        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_do__lio(*args)

    do__lio = staticmethod(do__lio)

    def macrai4_(self, *args):
        """
        macrai4_(AdvApp2Var_SysBase self, integer * nbelem, integer * maxelm, integer * itablo, intptr_t * iofset, integer * iercod) -> int

        :type nbelem: integer
        :type maxelm: integer
        :type itablo: integer
        :type iofset: intptr_t
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrai4_(self, *args)


    def macrar8_(self, *args):
        """
        macrar8_(AdvApp2Var_SysBase self, integer * nbelem, integer * maxelm, doublereal * xtablo, intptr_t * iofset, integer * iercod) -> int

        :type nbelem: integer
        :type maxelm: integer
        :type xtablo: doublereal
        :type iofset: intptr_t
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrar8_(self, *args)


    def macrdi4_(self, *args):
        """
        macrdi4_(AdvApp2Var_SysBase self, integer * nbelem, integer * maxelm, integer * itablo, intptr_t * iofset, integer * iercod) -> int

        :type nbelem: integer
        :type maxelm: integer
        :type itablo: integer
        :type iofset: intptr_t
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrdi4_(self, *args)


    def macrdr8_(self, *args):
        """
        macrdr8_(AdvApp2Var_SysBase self, integer * nbelem, integer * maxelm, doublereal * xtablo, intptr_t * iofset, integer * iercod) -> int

        :type nbelem: integer
        :type maxelm: integer
        :type xtablo: doublereal
        :type iofset: intptr_t
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrdr8_(self, *args)


    def maermsg_(*args):
        """
        maermsg_(char const * cnompg, integer * icoder, ftnlen cnompg_len) -> int

        :type cnompg: const char *
        :type icoder: integer
        :type cnompg_len: ftnlen
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maermsg_(*args)

    maermsg_ = staticmethod(maermsg_)

    def maitbr8_(*args):
        """
        maitbr8_(integer * itaill, doublereal * xtab, doublereal * xval) -> int

        :type itaill: integer
        :type xtab: doublereal
        :type xval: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maitbr8_(*args)

    maitbr8_ = staticmethod(maitbr8_)

    def maovsr8_(*args):
        """
        maovsr8_(integer * ivalcs) -> int

        :type ivalcs: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maovsr8_(*args)

    maovsr8_ = staticmethod(maovsr8_)

    def mgenmsg_(*args):
        """
        mgenmsg_(char const * nomprg, ftnlen nomprg_len) -> int

        :type nomprg: const char *
        :type nomprg_len: ftnlen
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mgenmsg_(*args)

    mgenmsg_ = staticmethod(mgenmsg_)

    def mgsomsg_(*args):
        """
        mgsomsg_(char const * nomprg, ftnlen nomprg_len) -> int

        :type nomprg: const char *
        :type nomprg_len: ftnlen
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mgsomsg_(*args)

    mgsomsg_ = staticmethod(mgsomsg_)

    def miraz_(*args):
        """
        miraz_(integer * taille, void * adt)

        :type taille: integer
        :type adt: void *

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_miraz_(*args)

    miraz_ = staticmethod(miraz_)

    def msifill_(*args):
        """
        msifill_(integer * nbintg, integer * ivecin, integer * ivecou) -> int

        :type nbintg: integer
        :type ivecin: integer
        :type ivecou: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_msifill_(*args)

    msifill_ = staticmethod(msifill_)

    def msrfill_(*args):
        """
        msrfill_(integer * nbreel, doublereal * vecent, doublereal * vecsor) -> int

        :type nbreel: integer
        :type vecent: doublereal
        :type vecsor: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_msrfill_(*args)

    msrfill_ = staticmethod(msrfill_)

    def mswrdbg_(*args):
        """
        mswrdbg_(char const * ctexte, ftnlen ctexte_len) -> int

        :type ctexte: const char *
        :type ctexte_len: ftnlen
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mswrdbg_(*args)

    mswrdbg_ = staticmethod(mswrdbg_)

    def mvriraz_(*args):
        """
        mvriraz_(integer * taille, void * adt)

        :type taille: integer
        :type adt: void *

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mvriraz_(*args)

    mvriraz_ = staticmethod(mvriraz_)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SysBase
AdvApp2Var_SysBase_swigregister = _AdvApp2Var.AdvApp2Var_SysBase_swigregister
AdvApp2Var_SysBase_swigregister(AdvApp2Var_SysBase)

def AdvApp2Var_SysBase_macinit_(*args):
    """
    AdvApp2Var_SysBase_macinit_(int * arg2, int * arg3) -> int

    :type : int *
    :type : int *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_macinit_(*args)

def AdvApp2Var_SysBase_mcrfill_(*args):
    """
    AdvApp2Var_SysBase_mcrfill_(integer * size, void * tin, void * tout) -> int

    :type size: integer
    :type tin: void *
    :type tout: void *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mcrfill_(*args)

def AdvApp2Var_SysBase_mnfndeb_(*args):
    """
    AdvApp2Var_SysBase_mnfndeb_() -> integer

    :rtype: integer

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mnfndeb_(*args)

def AdvApp2Var_SysBase_do__fio(*args):
    """
    AdvApp2Var_SysBase_do__fio() -> int

    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_do__fio(*args)

def AdvApp2Var_SysBase_do__lio(*args):
    """
    AdvApp2Var_SysBase_do__lio() -> int

    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_do__lio(*args)

def AdvApp2Var_SysBase_maermsg_(*args):
    """
    AdvApp2Var_SysBase_maermsg_(char const * cnompg, integer * icoder, ftnlen cnompg_len) -> int

    :type cnompg: const char *
    :type icoder: integer
    :type cnompg_len: ftnlen
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maermsg_(*args)

def AdvApp2Var_SysBase_maitbr8_(*args):
    """
    AdvApp2Var_SysBase_maitbr8_(integer * itaill, doublereal * xtab, doublereal * xval) -> int

    :type itaill: integer
    :type xtab: doublereal
    :type xval: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maitbr8_(*args)

def AdvApp2Var_SysBase_maovsr8_(*args):
    """
    AdvApp2Var_SysBase_maovsr8_(integer * ivalcs) -> int

    :type ivalcs: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maovsr8_(*args)

def AdvApp2Var_SysBase_mgenmsg_(*args):
    """
    AdvApp2Var_SysBase_mgenmsg_(char const * nomprg, ftnlen nomprg_len) -> int

    :type nomprg: const char *
    :type nomprg_len: ftnlen
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mgenmsg_(*args)

def AdvApp2Var_SysBase_mgsomsg_(*args):
    """
    AdvApp2Var_SysBase_mgsomsg_(char const * nomprg, ftnlen nomprg_len) -> int

    :type nomprg: const char *
    :type nomprg_len: ftnlen
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mgsomsg_(*args)

def AdvApp2Var_SysBase_miraz_(*args):
    """
    AdvApp2Var_SysBase_miraz_(integer * taille, void * adt)

    :type taille: integer
    :type adt: void *

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_miraz_(*args)

def AdvApp2Var_SysBase_msifill_(*args):
    """
    AdvApp2Var_SysBase_msifill_(integer * nbintg, integer * ivecin, integer * ivecou) -> int

    :type nbintg: integer
    :type ivecin: integer
    :type ivecou: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_msifill_(*args)

def AdvApp2Var_SysBase_msrfill_(*args):
    """
    AdvApp2Var_SysBase_msrfill_(integer * nbreel, doublereal * vecent, doublereal * vecsor) -> int

    :type nbreel: integer
    :type vecent: doublereal
    :type vecsor: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_msrfill_(*args)

def AdvApp2Var_SysBase_mswrdbg_(*args):
    """
    AdvApp2Var_SysBase_mswrdbg_(char const * ctexte, ftnlen ctexte_len) -> int

    :type ctexte: const char *
    :type ctexte_len: ftnlen
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mswrdbg_(*args)

def AdvApp2Var_SysBase_mvriraz_(*args):
    """
    AdvApp2Var_SysBase_mvriraz_(integer * taille, void * adt)

    :type taille: integer
    :type adt: void *

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mvriraz_(*args)

class AdvApp2Var_ApproxAFunc2Var(object):
    """
    Perform   the  approximation of  <Func>     F(U,V)
    Arguments are :
    Num1DSS, Num2DSS, Num3DSS :The numbers of 1,2,3 dimensional subspaces
    OneDTol, TwoDTol, ThreeDTol: The tolerance of approximation in each
    subspaces
    OneDTolFr, TwoDTolFr, ThreeDTolFr: The tolerance of approximation on
    the boundarys in each subspaces
    [FirstInU, LastInU]: The Bounds in U of the Approximation
    [FirstInV, LastInV]: The Bounds in V of the Approximation
    FavorIso : Give preference to extract u-iso or v-iso on F(U,V)
    This can be usefull to optimize the <Func> methode
    ContInU, ContInV : Continuity waiting in u and v
    PrecisCode : Precision on approximation's error mesurement
    1 : Fast computation and average precision
    2 : Average computation and good precision
    3 : Slow computation and very good precision
    MaxDegInU : Maximum u-degree waiting in U
    MaxDegInV : Maximum u-degree waiting in V
    Warning:
    MaxDegInU (resp. MaxDegInV) must be >= 2*iu (resp. iv) + 1,
    where iu (resp. iv) = 0 if ContInU (resp. ContInV)  = GeomAbs_C0,
    = 1 if                          = GeomAbs_C1,
    = 2 if                          = GeomAbs_C2.
    MaxPatch  : Maximun number of Patch waiting
    number of Patch is number of u span * number of v span
    Func      : The external method to evaluate F(U,V)
    Crit      : To (re)defined condition of convergence
    UChoice, VChoice : To define the way in U (or V) Knot insertion
    Warning:
    for the moment, the result is a 3D Surface
    so Num1DSS and Num2DSS must be equals to 0
    and Num3DSS must be equal to 1.
    Warning:
    the Function of type EvaluatorFunc2Var from Approx
    must be a subclass of AdvApp2Var_EvaluatorFunc2Var

    the result should be formatted in the following way :
    <--Num1DSS--> <--2 * Num2DSS--> <--3 * Num3DSS-->
    R[0,0] ....   R[Num1DSS,0].....  R[Dimension-1,0] for the 1st parameter
    R[0,i] ....   R[Num1DSS,i].....  R[Dimension-1,i] for the ith parameter
    R[0,N-1] .... R[Num1DSS,N-1].... R[Dimension-1,N-1] for the Nth parameter

    the order in which each Subspace appears should be consistent
    with the tolerances given in the create function and the
    results will be given in that order as well that is :
    Surface(n) will correspond to the nth entry described by Num3DSS
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Num1DSS, Standard_Integer const Num2DSS, Standard_Integer const Num3DSS, Handle_TColStd_HArray1OfReal OneDTol, Handle_TColStd_HArray1OfReal TwoDTol, Handle_TColStd_HArray1OfReal ThreeDTol, Handle_TColStd_HArray2OfReal OneDTolFr, Handle_TColStd_HArray2OfReal TwoDTolFr, Handle_TColStd_HArray2OfReal ThreeDTolFr, Standard_Real const FirstInU, Standard_Real const LastInU, Standard_Real const FirstInV, Standard_Real const LastInV, GeomAbs_IsoType const FavorIso, GeomAbs_Shape const ContInU, GeomAbs_Shape const ContInV, Standard_Integer const PrecisCode, Standard_Integer const MaxDegInU, Standard_Integer const MaxDegInV, Standard_Integer const MaxPatch, AdvApp2Var_EvaluatorFunc2Var Func, AdvApprox_Cutting UChoice, AdvApprox_Cutting VChoice) -> AdvApp2Var_ApproxAFunc2Var
        __init__(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Num1DSS, Standard_Integer const Num2DSS, Standard_Integer const Num3DSS, Handle_TColStd_HArray1OfReal OneDTol, Handle_TColStd_HArray1OfReal TwoDTol, Handle_TColStd_HArray1OfReal ThreeDTol, Handle_TColStd_HArray2OfReal OneDTolFr, Handle_TColStd_HArray2OfReal TwoDTolFr, Handle_TColStd_HArray2OfReal ThreeDTolFr, Standard_Real const FirstInU, Standard_Real const LastInU, Standard_Real const FirstInV, Standard_Real const LastInV, GeomAbs_IsoType const FavorIso, GeomAbs_Shape const ContInU, GeomAbs_Shape const ContInV, Standard_Integer const PrecisCode, Standard_Integer const MaxDegInU, Standard_Integer const MaxDegInV, Standard_Integer const MaxPatch, AdvApp2Var_EvaluatorFunc2Var Func, AdvApp2Var_Criterion Crit, AdvApprox_Cutting UChoice, AdvApprox_Cutting VChoice) -> AdvApp2Var_ApproxAFunc2Var

        :type Num1DSS: int
        :type Num2DSS: int
        :type Num3DSS: int
        :type OneDTol: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type TwoDTol: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type ThreeDTol: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type OneDTolFr: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type TwoDTolFr: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type ThreeDTolFr: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type FirstInU: float
        :type LastInU: float
        :type FirstInV: float
        :type LastInV: float
        :type FavorIso: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type ContInU: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type ContInV: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type PrecisCode: int
        :type MaxDegInU: int
        :type MaxDegInV: int
        :type MaxPatch: int
        :type Func: OCC.wrapper.AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var
        :type Crit: OCC.wrapper.AdvApp2Var.AdvApp2Var_Criterion
        :type UChoice: OCC.wrapper.AdvApprox.AdvApprox_Cutting
        :type VChoice: OCC.wrapper.AdvApprox.AdvApprox_Cutting

        """
        this = _AdvApp2Var.new_AdvApp2Var_ApproxAFunc2Var(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsDone(self, *args):
        """
        IsDone(AdvApp2Var_ApproxAFunc2Var self) -> Standard_Boolean

        True if the approximation succeeded within the imposed
        tolerances and the wished continuities

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_IsDone(self, *args)


    def HasResult(self, *args):
        """
        HasResult(AdvApp2Var_ApproxAFunc2Var self) -> Standard_Boolean

        True if the approximation did come out with a result that
        is not NECESSARELY within the required tolerance or a result
        that is not recognized with the wished continuities

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_HasResult(self, *args)


    def Surface(self, *args):
        """
        Surface(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Index) -> Handle_Geom_BSplineSurface

        returns the BSplineSurface of range Index

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_Surface(self, *args)


    def UDegree(self, *args):
        """
        UDegree(AdvApp2Var_ApproxAFunc2Var self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UDegree(self, *args)


    def VDegree(self, *args):
        """
        VDegree(AdvApp2Var_ApproxAFunc2Var self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VDegree(self, *args)


    def NumSubSpaces(self, *args):
        """
        NumSubSpaces(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension) -> Standard_Integer

        :type Dimension: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_NumSubSpaces(self, *args)


    def MaxError(self, *args):
        """
        MaxError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension) -> Handle_TColStd_HArray1OfReal
        MaxError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension, Standard_Integer const Index) -> Standard_Real

        returns the error max of the BSplineSurface of range Index

        :type Dimension: int
        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_MaxError(self, *args)


    def AverageError(self, *args):
        """
        AverageError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension) -> Handle_TColStd_HArray1OfReal
        AverageError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension, Standard_Integer const Index) -> Standard_Real

        returns the average error of the BSplineSurface of range Index

        :type Dimension: int
        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_AverageError(self, *args)


    def UFrontError(self, *args):
        """
        UFrontError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension) -> Handle_TColStd_HArray1OfReal
        UFrontError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension, Standard_Integer const Index) -> Standard_Real

        returns the error max of the BSplineSurface of range Index on a UFrontier

        :type Dimension: int
        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UFrontError(self, *args)


    def VFrontError(self, *args):
        """
        VFrontError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension) -> Handle_TColStd_HArray1OfReal
        VFrontError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension, Standard_Integer const Index) -> Standard_Real

        returns the error max of the BSplineSurface of range Index on a VFrontier

        :type Dimension: int
        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VFrontError(self, *args)


    def CritError(self, *args):
        """
        CritError(AdvApp2Var_ApproxAFunc2Var self, Standard_Integer const Dimension, Standard_Integer const Index) -> Standard_Real

        :type Dimension: int
        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_CritError(self, *args)


    def Dump(self, *args):
        """
        Dump(AdvApp2Var_ApproxAFunc2Var self, Standard_OStream & o)

        Prints on the stream o informations on the current state
        of the object.

        :type o: OCC.wrapper.Standard.Standard_OStream

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_Dump(self, *args)

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_ApproxAFunc2Var
AdvApp2Var_ApproxAFunc2Var_swigregister = _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_swigregister
AdvApp2Var_ApproxAFunc2Var_swigregister(AdvApp2Var_ApproxAFunc2Var)

class AdvApp2Var_MathBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def mmapcmp_(*args):
        """
        mmapcmp_(integer * arg1, integer * arg2, integer * arg3, double * arg4, double * arg5) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : double *
        :type : double *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmapcmp_(*args)

    mmapcmp_ = staticmethod(mmapcmp_)

    def mmdrc11_(*args):
        """
        mmdrc11_(integer * arg1, integer * arg2, integer * arg3, doublereal * arg4, doublereal * arg5, doublereal * arg6) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmdrc11_(*args)

    mmdrc11_ = staticmethod(mmdrc11_)

    def mmfmca9_(*args):
        """
        mmfmca9_(integer * arg1, integer * arg2, integer * arg3, integer * arg4, integer * arg5, integer * arg6, doublereal * arg7, doublereal * arg8) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca9_(*args)

    mmfmca9_ = staticmethod(mmfmca9_)

    def mmfmcb5_(*args):
        """
        mmfmcb5_(integer * arg1, integer * arg2, integer * arg3, doublereal * arg4, integer * arg5, integer * arg6, integer * arg7, doublereal * arg8, integer * arg9) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcb5_(*args)

    mmfmcb5_ = staticmethod(mmfmcb5_)

    def mmwprcs_(*args):
        """
        mmwprcs_(doublereal * arg1, doublereal * arg2, doublereal * arg3, doublereal * arg4, integer * arg5, integer * arg6)

        :type : doublereal
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :type : integer
        :type : integer

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmwprcs_(*args)

    mmwprcs_ = staticmethod(mmwprcs_)

    def mmcglc1_(*args):
        """
        mmcglc1_(integer * ndimax, integer * ndimen, integer * ncoeff, doublereal * courbe, doublereal * tdebut, doublereal * tfinal, doublereal * epsiln, doublereal * xlongc, doublereal * erreur, integer * iercod) -> int

        :type ndimax: integer
        :type ndimen: integer
        :type ncoeff: integer
        :type courbe: doublereal
        :type tdebut: doublereal
        :type tfinal: doublereal
        :type epsiln: doublereal
        :type xlongc: doublereal
        :type erreur: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcglc1_(*args)

    mmcglc1_ = staticmethod(mmcglc1_)

    def mmbulld_(*args):
        """
        mmbulld_(integer * nbcoln, integer * nblign, doublereal * dtabtr, integer * numcle) -> int

        :type nbcoln: integer
        :type nblign: integer
        :type dtabtr: doublereal
        :type numcle: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmbulld_(*args)

    mmbulld_ = staticmethod(mmbulld_)

    def mmcdriv_(*args):
        """
        mmcdriv_(integer * ndimen, integer * ncoeff, doublereal * courbe, integer * ideriv, integer * ncofdv, doublereal * crvdrv) -> int

        :type ndimen: integer
        :type ncoeff: integer
        :type courbe: doublereal
        :type ideriv: integer
        :type ncofdv: integer
        :type crvdrv: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcdriv_(*args)

    mmcdriv_ = staticmethod(mmcdriv_)

    def mmcvctx_(*args):
        """
        mmcvctx_(integer * ndimen, integer * ncofmx, integer * nderiv, doublereal * ctrtes, doublereal * crvres, doublereal * tabaux, doublereal * xmatri, integer * iercod) -> int

        :type ndimen: integer
        :type ncofmx: integer
        :type nderiv: integer
        :type ctrtes: doublereal
        :type crvres: doublereal
        :type tabaux: doublereal
        :type xmatri: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcvctx_(*args)

    mmcvctx_ = staticmethod(mmcvctx_)

    def mdsptpt_(*args):
        """
        mdsptpt_(integer * ndimen, doublereal * point1, doublereal * point2, doublereal * distan) -> int

        :type ndimen: integer
        :type point1: doublereal
        :type point2: doublereal
        :type distan: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mdsptpt_(*args)

    mdsptpt_ = staticmethod(mdsptpt_)

    def mmaperx_(*args):
        """
        mmaperx_(integer * ncofmx, integer * ndimen, integer * ncoeff, integer * iordre, doublereal * crvjac, integer * ncfnew, doublereal * ycvmax, doublereal * errmax, integer * iercod) -> int

        :type ncofmx: integer
        :type ndimen: integer
        :type ncoeff: integer
        :type iordre: integer
        :type crvjac: doublereal
        :type ncfnew: integer
        :type ycvmax: doublereal
        :type errmax: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmaperx_(*args)

    mmaperx_ = staticmethod(mmaperx_)

    def mmdrvck_(*args):
        """
        mmdrvck_(integer * ncoeff, integer * ndimen, doublereal * courbe, integer * ideriv, doublereal * tparam, doublereal * pntcrb) -> int

        :type ncoeff: integer
        :type ndimen: integer
        :type courbe: doublereal
        :type ideriv: integer
        :type tparam: doublereal
        :type pntcrb: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmdrvck_(*args)

    mmdrvck_ = staticmethod(mmdrvck_)

    def mmeps1_(*args):
        """
        mmeps1_(doublereal * epsilo) -> int

        :type epsilo: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmeps1_(*args)

    mmeps1_ = staticmethod(mmeps1_)

    def mmfmca8_(*args):
        """
        mmfmca8_(integer const * ndimen, integer const * ncoefu, integer const * ncoefv, integer const * ndimax, integer const * ncfumx, integer const * ncfvmx, doublereal * tabini, doublereal * tabres) -> int

        :type ndimen: integer
        :type ncoefu: integer
        :type ncoefv: integer
        :type ndimax: integer
        :type ncfumx: integer
        :type ncfvmx: integer
        :type tabini: doublereal
        :type tabres: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca8_(*args)

    mmfmca8_ = staticmethod(mmfmca8_)

    def mmfmcar_(*args):
        """
        mmfmcar_(integer * ndimen, integer * ncofmx, integer * ncoefu, integer * ncoefv, doublereal * patold, doublereal * upara1, doublereal * upara2, doublereal * vpara1, doublereal * vpara2, doublereal * patnew, integer * iercod) -> int

        :type ndimen: integer
        :type ncofmx: integer
        :type ncoefu: integer
        :type ncoefv: integer
        :type patold: doublereal
        :type upara1: doublereal
        :type upara2: doublereal
        :type vpara1: doublereal
        :type vpara2: doublereal
        :type patnew: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcar_(*args)

    mmfmcar_ = staticmethod(mmfmcar_)

    def mmfmtb1_(*args):
        """
        mmfmtb1_(integer * maxsz1, doublereal * table1, integer * isize1, integer * jsize1, integer * maxsz2, doublereal * table2, integer * isize2, integer * jsize2, integer * iercod) -> int

        :type maxsz1: integer
        :type table1: doublereal
        :type isize1: integer
        :type jsize1: integer
        :type maxsz2: integer
        :type table2: doublereal
        :type isize2: integer
        :type jsize2: integer
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmtb1_(*args)

    mmfmtb1_ = staticmethod(mmfmtb1_)

    def mmhjcan_(*args):
        """
        mmhjcan_(integer * ndimen, integer * ncourb, integer * ncftab, integer * orcont, integer * ncflim, doublereal * tcbold, doublereal * tdecop, doublereal * tcbnew, integer * iercod) -> int

        :type ndimen: integer
        :type ncourb: integer
        :type ncftab: integer
        :type orcont: integer
        :type ncflim: integer
        :type tcbold: doublereal
        :type tdecop: doublereal
        :type tcbnew: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmhjcan_(*args)

    mmhjcan_ = staticmethod(mmhjcan_)

    def mminltt_(*args):
        """
        mminltt_(integer * ncolmx, integer * nlgnmx, doublereal * tabtri, integer * nbrcol, integer * nbrlgn, doublereal * ajoute, doublereal * epseg, integer * iercod) -> int

        :type ncolmx: integer
        :type nlgnmx: integer
        :type tabtri: doublereal
        :type nbrcol: integer
        :type nbrlgn: integer
        :type ajoute: doublereal
        :type epseg: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mminltt_(*args)

    mminltt_ = staticmethod(mminltt_)

    def mmjaccv_(*args):
        """
        mmjaccv_(integer const * ncoef, integer const * ndim, integer const * ider, doublereal const * crvlgd, doublereal * polaux, doublereal * crvcan) -> int

        :type ncoef: integer
        :type ndim: integer
        :type ider: integer
        :type crvlgd: doublereal
        :type polaux: doublereal
        :type crvcan: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmjaccv_(*args)

    mmjaccv_ = staticmethod(mmjaccv_)

    def mmpobas_(*args):
        """
        mmpobas_(doublereal * tparam, integer * iordre, integer * ncoeff, integer * nderiv, doublereal * valbas, integer * iercod) -> int

        :type tparam: doublereal
        :type iordre: integer
        :type ncoeff: integer
        :type nderiv: integer
        :type valbas: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmpobas_(*args)

    mmpobas_ = staticmethod(mmpobas_)

    def mmmpocur_(*args):
        """
        mmmpocur_(integer * ncofmx, integer * ndim, integer * ndeg, doublereal * courbe, doublereal * tparam, doublereal * tabval) -> int

        :type ncofmx: integer
        :type ndim: integer
        :type ndeg: integer
        :type courbe: doublereal
        :type tparam: doublereal
        :type tabval: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmmpocur_(*args)

    mmmpocur_ = staticmethod(mmmpocur_)

    def mmposui_(*args):
        """
        mmposui_(integer * dimmat, integer * nistoc, integer * aposit, integer * posuiv, integer * iercod) -> int

        :type dimmat: integer
        :type nistoc: integer
        :type aposit: integer
        :type posuiv: integer
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmposui_(*args)

    mmposui_ = staticmethod(mmposui_)

    def mmresol_(*args):
        """
        mmresol_(integer * hdimen, integer * gdimen, integer * hnstoc, integer * gnstoc, integer * mnstoc, doublereal * matsyh, doublereal * matsyg, doublereal * vecsyh, doublereal * vecsyg, integer * hposit, integer * hposui, integer * gposit, integer * mmposui, integer * mposit, doublereal * vecsol, integer * iercod) -> int

        :type hdimen: integer
        :type gdimen: integer
        :type hnstoc: integer
        :type gnstoc: integer
        :type mnstoc: integer
        :type matsyh: doublereal
        :type matsyg: doublereal
        :type vecsyh: doublereal
        :type vecsyg: doublereal
        :type hposit: integer
        :type hposui: integer
        :type gposit: integer
        :type mmposui: integer
        :type mposit: integer
        :type vecsol: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmresol_(*args)

    mmresol_ = staticmethod(mmresol_)

    def mmrtptt_(*args):
        """
        mmrtptt_(integer * ndglgd, doublereal * rtlegd) -> int

        :type ndglgd: integer
        :type rtlegd: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmrtptt_(*args)

    mmrtptt_ = staticmethod(mmrtptt_)

    def mmsrre2_(*args):
        """
        mmsrre2_(doublereal * tparam, integer * nbrval, doublereal * tablev, doublereal * epsil, integer * numint, integer * itypen, integer * iercod) -> int

        :type tparam: doublereal
        :type nbrval: integer
        :type tablev: doublereal
        :type epsil: doublereal
        :type numint: integer
        :type itypen: integer
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmsrre2_(*args)

    mmsrre2_ = staticmethod(mmsrre2_)

    def mmtrpjj_(*args):
        """
        mmtrpjj_(integer * ncofmx, integer * ndimen, integer * ncoeff, doublereal * epsi3d, integer * iordre, doublereal * crvlgd, doublereal * ycvmax, doublereal * errmax, integer * ncfnew) -> int

        :type ncofmx: integer
        :type ndimen: integer
        :type ncoeff: integer
        :type epsi3d: doublereal
        :type iordre: integer
        :type crvlgd: doublereal
        :type ycvmax: doublereal
        :type errmax: doublereal
        :type ncfnew: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmtrpjj_(*args)

    mmtrpjj_ = staticmethod(mmtrpjj_)

    def mmunivt_(*args):
        """
        mmunivt_(integer * ndimen, doublereal * vector, doublereal * vecnrm, doublereal * epsiln, integer * iercod) -> int

        :type ndimen: integer
        :type vector: doublereal
        :type vecnrm: doublereal
        :type epsiln: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmunivt_(*args)

    mmunivt_ = staticmethod(mmunivt_)

    def mmvncol_(*args):
        """
        mmvncol_(integer * ndimen, doublereal * vecin, doublereal * vecout, integer * iercod) -> int

        :type ndimen: integer
        :type vecin: doublereal
        :type vecout: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmvncol_(*args)

    mmvncol_ = staticmethod(mmvncol_)

    def msc_(*args):
        """
        msc_(integer * ndimen, doublereal * vecte1, doublereal * vecte2) -> doublereal

        :type ndimen: integer
        :type vecte1: doublereal
        :type vecte2: doublereal
        :rtype: doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_msc_(*args)

    msc_ = staticmethod(msc_)

    def mvsheld_(*args):
        """
        mvsheld_(integer * n, integer * arg2, doublereal * dtab, integer * icle) -> int

        :type n: integer
        :type is: integer
        :type dtab: doublereal
        :type icle: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mvsheld_(*args)

    mvsheld_ = staticmethod(mvsheld_)

    def mmarcin_(*args):
        """
        mmarcin_(integer * ndimax, integer * ndim, integer * ncoeff, doublereal * crvold, doublereal * u0, doublereal * u1, doublereal * crvnew, integer * iercod) -> int

        :type ndimax: integer
        :type ndim: integer
        :type ncoeff: integer
        :type crvold: doublereal
        :type u0: doublereal
        :type u1: doublereal
        :type crvnew: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmarcin_(*args)

    mmarcin_ = staticmethod(mmarcin_)

    def mmcvinv_(*args):
        """
        mmcvinv_(integer * ndimax, integer * ncoef, integer * ndim, doublereal * curveo, doublereal * curve) -> int

        :type ndimax: integer
        :type ncoef: integer
        :type ndim: integer
        :type curveo: doublereal
        :type curve: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcvinv_(*args)

    mmcvinv_ = staticmethod(mmcvinv_)

    def mmjacan_(*args):
        """
        mmjacan_(integer const * ideriv, integer * ndeg, doublereal * poljac, doublereal * polcan) -> int

        :type ideriv: integer
        :type ndeg: integer
        :type poljac: doublereal
        :type polcan: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmjacan_(*args)

    mmjacan_ = staticmethod(mmjacan_)

    def mmpocrb_(*args):
        """
        mmpocrb_(integer * ndimax, integer * ncoeff, doublereal * courbe, integer * ndim, doublereal * tparam, doublereal * pntcrb) -> int

        :type ndimax: integer
        :type ncoeff: integer
        :type courbe: doublereal
        :type ndim: integer
        :type tparam: doublereal
        :type pntcrb: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmpocrb_(*args)

    mmpocrb_ = staticmethod(mmpocrb_)

    def mmmrslwd_(*args):
        """
        mmmrslwd_(integer * normax, integer * nordre, integer * ndim, doublereal * amat, doublereal * bmat, doublereal * epspiv, doublereal * aaux, doublereal * xmat, integer * iercod) -> int

        :type normax: integer
        :type nordre: integer
        :type ndim: integer
        :type amat: doublereal
        :type bmat: doublereal
        :type epspiv: doublereal
        :type aaux: doublereal
        :type xmat: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmmrslwd_(*args)

    mmmrslwd_ = staticmethod(mmmrslwd_)

    def mmveps3_(*args):
        """
        mmveps3_(doublereal * eps03) -> int

        :type eps03: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmveps3_(*args)

    mmveps3_ = staticmethod(mmveps3_)

    def pow__di(*args):
        """
        pow__di(doublereal * x, integer * n) -> doublereal

        :type x: doublereal
        :type n: integer
        :rtype: doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_pow__di(*args)

    pow__di = staticmethod(pow__di)

    def mzsnorm_(*args):
        """
        mzsnorm_(integer * ndimen, doublereal * vecteu) -> doublereal

        :type ndimen: integer
        :type vecteu: doublereal
        :rtype: doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mzsnorm_(*args)

    mzsnorm_ = staticmethod(mzsnorm_)

    def __init__(self):
        this = _AdvApp2Var.new_AdvApp2Var_MathBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_MathBase
AdvApp2Var_MathBase_swigregister = _AdvApp2Var.AdvApp2Var_MathBase_swigregister
AdvApp2Var_MathBase_swigregister(AdvApp2Var_MathBase)

def AdvApp2Var_MathBase_mmapcmp_(*args):
    """
    AdvApp2Var_MathBase_mmapcmp_(integer * arg2, integer * arg3, integer * arg4, double * arg5, double * arg6) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : double *
    :type : double *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmapcmp_(*args)

def AdvApp2Var_MathBase_mmdrc11_(*args):
    """
    AdvApp2Var_MathBase_mmdrc11_(integer * arg2, integer * arg3, integer * arg4, doublereal * arg5, doublereal * arg6, doublereal * arg7) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmdrc11_(*args)

def AdvApp2Var_MathBase_mmfmca9_(*args):
    """
    AdvApp2Var_MathBase_mmfmca9_(integer * arg2, integer * arg3, integer * arg4, integer * arg5, integer * arg6, integer * arg7, doublereal * arg8, doublereal * arg9) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca9_(*args)

def AdvApp2Var_MathBase_mmfmcb5_(*args):
    """
    AdvApp2Var_MathBase_mmfmcb5_(integer * arg2, integer * arg3, integer * arg4, doublereal * arg5, integer * arg6, integer * arg7, integer * arg8, doublereal * arg9, integer * arg10) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcb5_(*args)

def AdvApp2Var_MathBase_mmwprcs_(*args):
    """
    AdvApp2Var_MathBase_mmwprcs_(doublereal * arg2, doublereal * arg3, doublereal * arg4, doublereal * arg5, integer * arg6, integer * arg7)

    :type : doublereal
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :type : integer
    :type : integer

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmwprcs_(*args)

def AdvApp2Var_MathBase_mmcglc1_(*args):
    """
    AdvApp2Var_MathBase_mmcglc1_(integer * ndimax, integer * ndimen, integer * ncoeff, doublereal * courbe, doublereal * tdebut, doublereal * tfinal, doublereal * epsiln, doublereal * xlongc, doublereal * erreur, integer * iercod) -> int

    :type ndimax: integer
    :type ndimen: integer
    :type ncoeff: integer
    :type courbe: doublereal
    :type tdebut: doublereal
    :type tfinal: doublereal
    :type epsiln: doublereal
    :type xlongc: doublereal
    :type erreur: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcglc1_(*args)

def AdvApp2Var_MathBase_mmbulld_(*args):
    """
    AdvApp2Var_MathBase_mmbulld_(integer * nbcoln, integer * nblign, doublereal * dtabtr, integer * numcle) -> int

    :type nbcoln: integer
    :type nblign: integer
    :type dtabtr: doublereal
    :type numcle: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmbulld_(*args)

def AdvApp2Var_MathBase_mmcdriv_(*args):
    """
    AdvApp2Var_MathBase_mmcdriv_(integer * ndimen, integer * ncoeff, doublereal * courbe, integer * ideriv, integer * ncofdv, doublereal * crvdrv) -> int

    :type ndimen: integer
    :type ncoeff: integer
    :type courbe: doublereal
    :type ideriv: integer
    :type ncofdv: integer
    :type crvdrv: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcdriv_(*args)

def AdvApp2Var_MathBase_mmcvctx_(*args):
    """
    AdvApp2Var_MathBase_mmcvctx_(integer * ndimen, integer * ncofmx, integer * nderiv, doublereal * ctrtes, doublereal * crvres, doublereal * tabaux, doublereal * xmatri, integer * iercod) -> int

    :type ndimen: integer
    :type ncofmx: integer
    :type nderiv: integer
    :type ctrtes: doublereal
    :type crvres: doublereal
    :type tabaux: doublereal
    :type xmatri: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcvctx_(*args)

def AdvApp2Var_MathBase_mdsptpt_(*args):
    """
    AdvApp2Var_MathBase_mdsptpt_(integer * ndimen, doublereal * point1, doublereal * point2, doublereal * distan) -> int

    :type ndimen: integer
    :type point1: doublereal
    :type point2: doublereal
    :type distan: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mdsptpt_(*args)

def AdvApp2Var_MathBase_mmaperx_(*args):
    """
    AdvApp2Var_MathBase_mmaperx_(integer * ncofmx, integer * ndimen, integer * ncoeff, integer * iordre, doublereal * crvjac, integer * ncfnew, doublereal * ycvmax, doublereal * errmax, integer * iercod) -> int

    :type ncofmx: integer
    :type ndimen: integer
    :type ncoeff: integer
    :type iordre: integer
    :type crvjac: doublereal
    :type ncfnew: integer
    :type ycvmax: doublereal
    :type errmax: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmaperx_(*args)

def AdvApp2Var_MathBase_mmdrvck_(*args):
    """
    AdvApp2Var_MathBase_mmdrvck_(integer * ncoeff, integer * ndimen, doublereal * courbe, integer * ideriv, doublereal * tparam, doublereal * pntcrb) -> int

    :type ncoeff: integer
    :type ndimen: integer
    :type courbe: doublereal
    :type ideriv: integer
    :type tparam: doublereal
    :type pntcrb: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmdrvck_(*args)

def AdvApp2Var_MathBase_mmeps1_(*args):
    """
    AdvApp2Var_MathBase_mmeps1_(doublereal * epsilo) -> int

    :type epsilo: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmeps1_(*args)

def AdvApp2Var_MathBase_mmfmca8_(*args):
    """
    AdvApp2Var_MathBase_mmfmca8_(integer const * ndimen, integer const * ncoefu, integer const * ncoefv, integer const * ndimax, integer const * ncfumx, integer const * ncfvmx, doublereal * tabini, doublereal * tabres) -> int

    :type ndimen: integer
    :type ncoefu: integer
    :type ncoefv: integer
    :type ndimax: integer
    :type ncfumx: integer
    :type ncfvmx: integer
    :type tabini: doublereal
    :type tabres: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca8_(*args)

def AdvApp2Var_MathBase_mmfmcar_(*args):
    """
    AdvApp2Var_MathBase_mmfmcar_(integer * ndimen, integer * ncofmx, integer * ncoefu, integer * ncoefv, doublereal * patold, doublereal * upara1, doublereal * upara2, doublereal * vpara1, doublereal * vpara2, doublereal * patnew, integer * iercod) -> int

    :type ndimen: integer
    :type ncofmx: integer
    :type ncoefu: integer
    :type ncoefv: integer
    :type patold: doublereal
    :type upara1: doublereal
    :type upara2: doublereal
    :type vpara1: doublereal
    :type vpara2: doublereal
    :type patnew: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcar_(*args)

def AdvApp2Var_MathBase_mmfmtb1_(*args):
    """
    AdvApp2Var_MathBase_mmfmtb1_(integer * maxsz1, doublereal * table1, integer * isize1, integer * jsize1, integer * maxsz2, doublereal * table2, integer * isize2, integer * jsize2, integer * iercod) -> int

    :type maxsz1: integer
    :type table1: doublereal
    :type isize1: integer
    :type jsize1: integer
    :type maxsz2: integer
    :type table2: doublereal
    :type isize2: integer
    :type jsize2: integer
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmtb1_(*args)

def AdvApp2Var_MathBase_mmhjcan_(*args):
    """
    AdvApp2Var_MathBase_mmhjcan_(integer * ndimen, integer * ncourb, integer * ncftab, integer * orcont, integer * ncflim, doublereal * tcbold, doublereal * tdecop, doublereal * tcbnew, integer * iercod) -> int

    :type ndimen: integer
    :type ncourb: integer
    :type ncftab: integer
    :type orcont: integer
    :type ncflim: integer
    :type tcbold: doublereal
    :type tdecop: doublereal
    :type tcbnew: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmhjcan_(*args)

def AdvApp2Var_MathBase_mminltt_(*args):
    """
    AdvApp2Var_MathBase_mminltt_(integer * ncolmx, integer * nlgnmx, doublereal * tabtri, integer * nbrcol, integer * nbrlgn, doublereal * ajoute, doublereal * epseg, integer * iercod) -> int

    :type ncolmx: integer
    :type nlgnmx: integer
    :type tabtri: doublereal
    :type nbrcol: integer
    :type nbrlgn: integer
    :type ajoute: doublereal
    :type epseg: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mminltt_(*args)

def AdvApp2Var_MathBase_mmjaccv_(*args):
    """
    AdvApp2Var_MathBase_mmjaccv_(integer const * ncoef, integer const * ndim, integer const * ider, doublereal const * crvlgd, doublereal * polaux, doublereal * crvcan) -> int

    :type ncoef: integer
    :type ndim: integer
    :type ider: integer
    :type crvlgd: doublereal
    :type polaux: doublereal
    :type crvcan: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmjaccv_(*args)

def AdvApp2Var_MathBase_mmpobas_(*args):
    """
    AdvApp2Var_MathBase_mmpobas_(doublereal * tparam, integer * iordre, integer * ncoeff, integer * nderiv, doublereal * valbas, integer * iercod) -> int

    :type tparam: doublereal
    :type iordre: integer
    :type ncoeff: integer
    :type nderiv: integer
    :type valbas: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmpobas_(*args)

def AdvApp2Var_MathBase_mmmpocur_(*args):
    """
    AdvApp2Var_MathBase_mmmpocur_(integer * ncofmx, integer * ndim, integer * ndeg, doublereal * courbe, doublereal * tparam, doublereal * tabval) -> int

    :type ncofmx: integer
    :type ndim: integer
    :type ndeg: integer
    :type courbe: doublereal
    :type tparam: doublereal
    :type tabval: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmmpocur_(*args)

def AdvApp2Var_MathBase_mmposui_(*args):
    """
    AdvApp2Var_MathBase_mmposui_(integer * dimmat, integer * nistoc, integer * aposit, integer * posuiv, integer * iercod) -> int

    :type dimmat: integer
    :type nistoc: integer
    :type aposit: integer
    :type posuiv: integer
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmposui_(*args)

def AdvApp2Var_MathBase_mmresol_(*args):
    """
    AdvApp2Var_MathBase_mmresol_(integer * hdimen, integer * gdimen, integer * hnstoc, integer * gnstoc, integer * mnstoc, doublereal * matsyh, doublereal * matsyg, doublereal * vecsyh, doublereal * vecsyg, integer * hposit, integer * hposui, integer * gposit, integer * mmposui, integer * mposit, doublereal * vecsol, integer * iercod) -> int

    :type hdimen: integer
    :type gdimen: integer
    :type hnstoc: integer
    :type gnstoc: integer
    :type mnstoc: integer
    :type matsyh: doublereal
    :type matsyg: doublereal
    :type vecsyh: doublereal
    :type vecsyg: doublereal
    :type hposit: integer
    :type hposui: integer
    :type gposit: integer
    :type mmposui: integer
    :type mposit: integer
    :type vecsol: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmresol_(*args)

def AdvApp2Var_MathBase_mmrtptt_(*args):
    """
    AdvApp2Var_MathBase_mmrtptt_(integer * ndglgd, doublereal * rtlegd) -> int

    :type ndglgd: integer
    :type rtlegd: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmrtptt_(*args)

def AdvApp2Var_MathBase_mmsrre2_(*args):
    """
    AdvApp2Var_MathBase_mmsrre2_(doublereal * tparam, integer * nbrval, doublereal * tablev, doublereal * epsil, integer * numint, integer * itypen, integer * iercod) -> int

    :type tparam: doublereal
    :type nbrval: integer
    :type tablev: doublereal
    :type epsil: doublereal
    :type numint: integer
    :type itypen: integer
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmsrre2_(*args)

def AdvApp2Var_MathBase_mmtrpjj_(*args):
    """
    AdvApp2Var_MathBase_mmtrpjj_(integer * ncofmx, integer * ndimen, integer * ncoeff, doublereal * epsi3d, integer * iordre, doublereal * crvlgd, doublereal * ycvmax, doublereal * errmax, integer * ncfnew) -> int

    :type ncofmx: integer
    :type ndimen: integer
    :type ncoeff: integer
    :type epsi3d: doublereal
    :type iordre: integer
    :type crvlgd: doublereal
    :type ycvmax: doublereal
    :type errmax: doublereal
    :type ncfnew: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmtrpjj_(*args)

def AdvApp2Var_MathBase_mmunivt_(*args):
    """
    AdvApp2Var_MathBase_mmunivt_(integer * ndimen, doublereal * vector, doublereal * vecnrm, doublereal * epsiln, integer * iercod) -> int

    :type ndimen: integer
    :type vector: doublereal
    :type vecnrm: doublereal
    :type epsiln: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmunivt_(*args)

def AdvApp2Var_MathBase_mmvncol_(*args):
    """
    AdvApp2Var_MathBase_mmvncol_(integer * ndimen, doublereal * vecin, doublereal * vecout, integer * iercod) -> int

    :type ndimen: integer
    :type vecin: doublereal
    :type vecout: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmvncol_(*args)

def AdvApp2Var_MathBase_msc_(*args):
    """
    AdvApp2Var_MathBase_msc_(integer * ndimen, doublereal * vecte1, doublereal * vecte2) -> doublereal

    :type ndimen: integer
    :type vecte1: doublereal
    :type vecte2: doublereal
    :rtype: doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_msc_(*args)

def AdvApp2Var_MathBase_mvsheld_(*args):
    """
    AdvApp2Var_MathBase_mvsheld_(integer * n, integer * arg3, doublereal * dtab, integer * icle) -> int

    :type n: integer
    :type is: integer
    :type dtab: doublereal
    :type icle: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mvsheld_(*args)

def AdvApp2Var_MathBase_mmarcin_(*args):
    """
    AdvApp2Var_MathBase_mmarcin_(integer * ndimax, integer * ndim, integer * ncoeff, doublereal * crvold, doublereal * u0, doublereal * u1, doublereal * crvnew, integer * iercod) -> int

    :type ndimax: integer
    :type ndim: integer
    :type ncoeff: integer
    :type crvold: doublereal
    :type u0: doublereal
    :type u1: doublereal
    :type crvnew: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmarcin_(*args)

def AdvApp2Var_MathBase_mmcvinv_(*args):
    """
    AdvApp2Var_MathBase_mmcvinv_(integer * ndimax, integer * ncoef, integer * ndim, doublereal * curveo, doublereal * curve) -> int

    :type ndimax: integer
    :type ncoef: integer
    :type ndim: integer
    :type curveo: doublereal
    :type curve: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcvinv_(*args)

def AdvApp2Var_MathBase_mmjacan_(*args):
    """
    AdvApp2Var_MathBase_mmjacan_(integer const * ideriv, integer * ndeg, doublereal * poljac, doublereal * polcan) -> int

    :type ideriv: integer
    :type ndeg: integer
    :type poljac: doublereal
    :type polcan: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmjacan_(*args)

def AdvApp2Var_MathBase_mmpocrb_(*args):
    """
    AdvApp2Var_MathBase_mmpocrb_(integer * ndimax, integer * ncoeff, doublereal * courbe, integer * ndim, doublereal * tparam, doublereal * pntcrb) -> int

    :type ndimax: integer
    :type ncoeff: integer
    :type courbe: doublereal
    :type ndim: integer
    :type tparam: doublereal
    :type pntcrb: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmpocrb_(*args)

def AdvApp2Var_MathBase_mmmrslwd_(*args):
    """
    AdvApp2Var_MathBase_mmmrslwd_(integer * normax, integer * nordre, integer * ndim, doublereal * amat, doublereal * bmat, doublereal * epspiv, doublereal * aaux, doublereal * xmat, integer * iercod) -> int

    :type normax: integer
    :type nordre: integer
    :type ndim: integer
    :type amat: doublereal
    :type bmat: doublereal
    :type epspiv: doublereal
    :type aaux: doublereal
    :type xmat: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmmrslwd_(*args)

def AdvApp2Var_MathBase_mmveps3_(*args):
    """
    AdvApp2Var_MathBase_mmveps3_(doublereal * eps03) -> int

    :type eps03: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmveps3_(*args)

def AdvApp2Var_MathBase_pow__di(*args):
    """
    AdvApp2Var_MathBase_pow__di(doublereal * x, integer * n) -> doublereal

    :type x: doublereal
    :type n: integer
    :rtype: doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_pow__di(*args)

def AdvApp2Var_MathBase_mzsnorm_(*args):
    """
    AdvApp2Var_MathBase_mzsnorm_(integer * ndimen, doublereal * vecteu) -> doublereal

    :type ndimen: integer
    :type vecteu: doublereal
    :rtype: doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mzsnorm_(*args)

class AdvApp2Var_Network(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApp2Var_Network self) -> AdvApp2Var_Network
        __init__(AdvApp2Var_Network self, NCollection_Sequence_AdvApp2Var_Patch Net, NCollection_Sequence_Standard_Real TheU, NCollection_Sequence_Standard_Real TheV) -> AdvApp2Var_Network

        :type Net: OCC.wrapper.AdvApp2Var.AdvApp2Var_SequenceOfPatch
        :type TheU: OCC.wrapper.TColStd.TColStd_SequenceOfReal
        :type TheV: OCC.wrapper.TColStd.TColStd_SequenceOfReal

        """
        this = _AdvApp2Var.new_AdvApp2Var_Network(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FirstNotApprox(self, *args):
        """
        FirstNotApprox(AdvApp2Var_Network self) -> Standard_Boolean

        search the Index of the first Patch not approximated,
        if all Patches are approximated Standard_False is returned

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_Network_FirstNotApprox(self, *args)


    def ChangePatch(self, *args):
        """
        ChangePatch(AdvApp2Var_Network self, Standard_Integer const Index) -> AdvApp2Var_Patch

        :type Index: int
        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_Network_ChangePatch(self, *args)


    def UpdateInU(self, *args):
        """
        UpdateInU(AdvApp2Var_Network self, Standard_Real const CuttingValue)

        :type CuttingValue: float

        """
        return _AdvApp2Var.AdvApp2Var_Network_UpdateInU(self, *args)


    def UpdateInV(self, *args):
        """
        UpdateInV(AdvApp2Var_Network self, Standard_Real const CuttingValue)

        :type CuttingValue: float

        """
        return _AdvApp2Var.AdvApp2Var_Network_UpdateInV(self, *args)


    def SameDegree(self, *args):
        """
        SameDegree(AdvApp2Var_Network self, Standard_Integer const iu, Standard_Integer const iv)

        :type iu: int
        :type iv: int
        :type ncfu: int
        :type ncfv: int

        """
        return _AdvApp2Var.AdvApp2Var_Network_SameDegree(self, *args)


    def NbPatch(self, *args):
        """
        NbPatch(AdvApp2Var_Network self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatch(self, *args)


    def NbPatchInU(self, *args):
        """
        NbPatchInU(AdvApp2Var_Network self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatchInU(self, *args)


    def NbPatchInV(self, *args):
        """
        NbPatchInV(AdvApp2Var_Network self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatchInV(self, *args)


    def UParameter(self, *args):
        """
        UParameter(AdvApp2Var_Network self, Standard_Integer const Index) -> Standard_Real

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Network_UParameter(self, *args)


    def VParameter(self, *args):
        """
        VParameter(AdvApp2Var_Network self, Standard_Integer const Index) -> Standard_Real

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Network_VParameter(self, *args)


    def Patch(self, *args):
        """
        :type UIndex: int
        :type VIndex: int
        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch

        """
        res = _AdvApp2Var.AdvApp2Var_Network_Patch(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        :type UIndex: int
        :type VIndex: int
        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch

        """
        res = _AdvApp2Var.AdvApp2Var_Network___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Network
AdvApp2Var_Network_swigregister = _AdvApp2Var.AdvApp2Var_Network_swigregister
AdvApp2Var_Network_swigregister(AdvApp2Var_Network)

class AdvApp2Var_Criterion(object):
    """this class contains a given criterion to be satisfied"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Value(self, *args):
        """
        Value(AdvApp2Var_Criterion self, AdvApp2Var_Patch P, AdvApp2Var_Context C)

        :type P: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch
        :type C: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Value(self, *args)


    def IsSatisfied(self, *args):
        """
        IsSatisfied(AdvApp2Var_Criterion self, AdvApp2Var_Patch P) -> Standard_Boolean

        :type P: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_IsSatisfied(self, *args)


    def MaxValue(self, *args):
        """
        MaxValue(AdvApp2Var_Criterion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_MaxValue(self, *args)


    def Type(self, *args):
        """
        Type(AdvApp2Var_Criterion self) -> AdvApp2Var_CriterionType

        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_CriterionType

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Type(self, *args)


    def Repartition(self, *args):
        """
        Repartition(AdvApp2Var_Criterion self) -> AdvApp2Var_CriterionRepartition

        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_CriterionRepartition

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Repartition(self, *args)

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Criterion
AdvApp2Var_Criterion_swigregister = _AdvApp2Var.AdvApp2Var_Criterion_swigregister
AdvApp2Var_Criterion_swigregister(AdvApp2Var_Criterion)

class AdvApp2Var_ApproxF2var(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def mma2fnc_(*args):
        """
        mma2fnc_(integer * ndimen, integer * nbsesp, integer * ndimse, doublereal * uvfonc, AdvApp2Var_EvaluatorFunc2Var foncnp, doublereal * tconst, integer * isofav, integer * nbroot, doublereal * rootlg, integer * iordre, integer * ideriv, integer * ndgjac, integer * nbcrmx, integer * ncflim, doublereal * epsapr, integer * ncoeff, doublereal * courbe, integer * nbcrbe, doublereal * somtab, doublereal * diftab, doublereal * contr1, doublereal * contr2, doublereal * tabdec, doublereal * errmax, doublereal * errmoy, integer * iercod) -> int

        :type ndimen: integer
        :type nbsesp: integer
        :type ndimse: integer
        :type uvfonc: doublereal
        :type foncnp: OCC.wrapper.AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var
        :type tconst: doublereal
        :type isofav: integer
        :type nbroot: integer
        :type rootlg: doublereal
        :type iordre: integer
        :type ideriv: integer
        :type ndgjac: integer
        :type nbcrmx: integer
        :type ncflim: integer
        :type epsapr: doublereal
        :type ncoeff: integer
        :type courbe: doublereal
        :type nbcrbe: integer
        :type somtab: doublereal
        :type diftab: doublereal
        :type contr1: doublereal
        :type contr2: doublereal
        :type tabdec: doublereal
        :type errmax: doublereal
        :type errmoy: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fnc_(*args)

    mma2fnc_ = staticmethod(mma2fnc_)

    def mma2roo_(*args):
        """
        mma2roo_(integer * nbpntu, integer * nbpntv, doublereal * urootl, doublereal * vrootl) -> int

        :type nbpntu: integer
        :type nbpntv: integer
        :type urootl: doublereal
        :type vrootl: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2roo_(*args)

    mma2roo_ = staticmethod(mma2roo_)

    def mma2jmx_(*args):
        """
        mma2jmx_(integer * ndgjac, integer * iordre, doublereal * xjacmx) -> int

        :type ndgjac: integer
        :type iordre: integer
        :type xjacmx: doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2jmx_(*args)

    mma2jmx_ = staticmethod(mma2jmx_)

    def mmapptt_(*args):
        """
        mmapptt_(integer const * arg1, integer const * arg2, integer const * arg3, doublereal * arg4, integer * arg5) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mmapptt_(*args)

    mmapptt_ = staticmethod(mmapptt_)

    def mma2cdi_(*args):
        """
        mma2cdi_(integer * ndimen, integer * nbpntu, doublereal * urootl, integer * nbpntv, doublereal * vrootl, integer * iordru, integer * iordrv, doublereal * contr1, doublereal * contr2, doublereal * contr3, doublereal * contr4, doublereal * sotbu1, doublereal * sotbu2, doublereal * ditbu1, doublereal * ditbu2, doublereal * sotbv1, doublereal * sotbv2, doublereal * ditbv1, doublereal * ditbv2, doublereal * sosotb, doublereal * soditb, doublereal * disotb, doublereal * diditb, integer * iercod) -> int

        :type ndimen: integer
        :type nbpntu: integer
        :type urootl: doublereal
        :type nbpntv: integer
        :type vrootl: doublereal
        :type iordru: integer
        :type iordrv: integer
        :type contr1: doublereal
        :type contr2: doublereal
        :type contr3: doublereal
        :type contr4: doublereal
        :type sotbu1: doublereal
        :type sotbu2: doublereal
        :type ditbu1: doublereal
        :type ditbu2: doublereal
        :type sotbv1: doublereal
        :type sotbv2: doublereal
        :type ditbv1: doublereal
        :type ditbv2: doublereal
        :type sosotb: doublereal
        :type soditb: doublereal
        :type disotb: doublereal
        :type diditb: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2cdi_(*args)

    mma2cdi_ = staticmethod(mma2cdi_)

    def mma2ds1_(*args):
        """
        mma2ds1_(integer * ndimen, doublereal * uintfn, doublereal * vintfn, AdvApp2Var_EvaluatorFunc2Var foncnp, integer * nbpntu, integer * nbpntv, doublereal * urootb, doublereal * vrootb, integer * isofav, doublereal * sosotb, doublereal * disotb, doublereal * soditb, doublereal * diditb, doublereal * fpntab, doublereal * ttable, integer * iercod) -> int

        :type ndimen: integer
        :type uintfn: doublereal
        :type vintfn: doublereal
        :type foncnp: OCC.wrapper.AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var
        :type nbpntu: integer
        :type nbpntv: integer
        :type urootb: doublereal
        :type vrootb: doublereal
        :type isofav: integer
        :type sosotb: doublereal
        :type disotb: doublereal
        :type soditb: doublereal
        :type diditb: doublereal
        :type fpntab: doublereal
        :type ttable: doublereal
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ds1_(*args)

    mma2ds1_ = staticmethod(mma2ds1_)

    def mma2ce1_(*args):
        """
        mma2ce1_(integer * numdec, integer * ndimen, integer * nbsesp, integer * ndimse, integer * ndminu, integer * ndminv, integer * ndguli, integer * ndgvli, integer * ndjacu, integer * ndjacv, integer * iordru, integer * iordrv, integer * nbpntu, integer * nbpntv, doublereal * epsapr, doublereal * sosotb, doublereal * disotb, doublereal * soditb, doublereal * diditb, doublereal * patjac, doublereal * errmax, doublereal * errmoy, integer * ndegpu, integer * ndegpv, integer * itydec, integer * iercod) -> int

        :type numdec: integer
        :type ndimen: integer
        :type nbsesp: integer
        :type ndimse: integer
        :type ndminu: integer
        :type ndminv: integer
        :type ndguli: integer
        :type ndgvli: integer
        :type ndjacu: integer
        :type ndjacv: integer
        :type iordru: integer
        :type iordrv: integer
        :type nbpntu: integer
        :type nbpntv: integer
        :type epsapr: doublereal
        :type sosotb: doublereal
        :type disotb: doublereal
        :type soditb: doublereal
        :type diditb: doublereal
        :type patjac: doublereal
        :type errmax: doublereal
        :type errmoy: doublereal
        :type ndegpu: integer
        :type ndegpv: integer
        :type itydec: integer
        :type iercod: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ce1_(*args)

    mma2ce1_ = staticmethod(mma2ce1_)

    def mma2can_(*args):
        """
        mma2can_(integer const * arg1, integer const * arg2, integer const * arg3, integer const * arg4, integer const * arg5, integer const * arg6, integer const * arg7, doublereal const * arg8, doublereal * arg9, doublereal * arg10, integer * arg11) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :type : integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2can_(*args)

    mma2can_ = staticmethod(mma2can_)

    def mma1her_(*args):
        """
        mma1her_(integer const * arg1, doublereal * arg2, integer * arg3) -> int

        :type : integer
        :type : doublereal
        :type : integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma1her_(*args)

    mma1her_ = staticmethod(mma1her_)

    def mma2ac2_(*args):
        """
        mma2ac2_(integer const * arg1, integer const * arg2, integer const * arg3, integer const * arg4, integer const * arg5, integer const * arg6, doublereal const * arg7, integer const * arg8, doublereal const * arg9, doublereal const * arg10, doublereal * arg11) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : integer
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac2_(*args)

    mma2ac2_ = staticmethod(mma2ac2_)

    def mma2ac3_(*args):
        """
        mma2ac3_(integer const * arg1, integer const * arg2, integer const * arg3, integer const * arg4, integer const * arg5, integer const * arg6, doublereal const * arg7, integer const * arg8, doublereal const * arg9, doublereal const * arg10, doublereal * arg11) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : integer
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac3_(*args)

    mma2ac3_ = staticmethod(mma2ac3_)

    def mma2ac1_(*args):
        """
        mma2ac1_(integer const * arg1, integer const * arg2, integer const * arg3, integer const * arg4, integer const * arg5, doublereal const * arg6, doublereal const * arg7, doublereal const * arg8, doublereal const * arg9, doublereal const * arg10, doublereal const * arg11, doublereal * arg12) -> int

        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : integer
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :type : doublereal
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac1_(*args)

    mma2ac1_ = staticmethod(mma2ac1_)

    def mma2fx6_(*args):
        """
        mma2fx6_(integer * ncfmxu, integer * ncfmxv, integer * ndimen, integer * nbsesp, integer * ndimse, integer * nbupat, integer * nbvpat, integer * iordru, integer * iordrv, doublereal * epsapr, doublereal * epsfro, doublereal * patcan, doublereal * errmax, integer * ncoefu, integer * ncoefv) -> int

        :type ncfmxu: integer
        :type ncfmxv: integer
        :type ndimen: integer
        :type nbsesp: integer
        :type ndimse: integer
        :type nbupat: integer
        :type nbvpat: integer
        :type iordru: integer
        :type iordrv: integer
        :type epsapr: doublereal
        :type epsfro: doublereal
        :type patcan: doublereal
        :type errmax: doublereal
        :type ncoefu: integer
        :type ncoefv: integer
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fx6_(*args)

    mma2fx6_ = staticmethod(mma2fx6_)

    def __init__(self):
        this = _AdvApp2Var.new_AdvApp2Var_ApproxF2var()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_ApproxF2var
AdvApp2Var_ApproxF2var_swigregister = _AdvApp2Var.AdvApp2Var_ApproxF2var_swigregister
AdvApp2Var_ApproxF2var_swigregister(AdvApp2Var_ApproxF2var)

def AdvApp2Var_ApproxF2var_mma2fnc_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2fnc_(integer * ndimen, integer * nbsesp, integer * ndimse, doublereal * uvfonc, AdvApp2Var_EvaluatorFunc2Var foncnp, doublereal * tconst, integer * isofav, integer * nbroot, doublereal * rootlg, integer * iordre, integer * ideriv, integer * ndgjac, integer * nbcrmx, integer * ncflim, doublereal * epsapr, integer * ncoeff, doublereal * courbe, integer * nbcrbe, doublereal * somtab, doublereal * diftab, doublereal * contr1, doublereal * contr2, doublereal * tabdec, doublereal * errmax, doublereal * errmoy, integer * iercod) -> int

    :type ndimen: integer
    :type nbsesp: integer
    :type ndimse: integer
    :type uvfonc: doublereal
    :type foncnp: OCC.wrapper.AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var
    :type tconst: doublereal
    :type isofav: integer
    :type nbroot: integer
    :type rootlg: doublereal
    :type iordre: integer
    :type ideriv: integer
    :type ndgjac: integer
    :type nbcrmx: integer
    :type ncflim: integer
    :type epsapr: doublereal
    :type ncoeff: integer
    :type courbe: doublereal
    :type nbcrbe: integer
    :type somtab: doublereal
    :type diftab: doublereal
    :type contr1: doublereal
    :type contr2: doublereal
    :type tabdec: doublereal
    :type errmax: doublereal
    :type errmoy: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fnc_(*args)

def AdvApp2Var_ApproxF2var_mma2roo_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2roo_(integer * nbpntu, integer * nbpntv, doublereal * urootl, doublereal * vrootl) -> int

    :type nbpntu: integer
    :type nbpntv: integer
    :type urootl: doublereal
    :type vrootl: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2roo_(*args)

def AdvApp2Var_ApproxF2var_mma2jmx_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2jmx_(integer * ndgjac, integer * iordre, doublereal * xjacmx) -> int

    :type ndgjac: integer
    :type iordre: integer
    :type xjacmx: doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2jmx_(*args)

def AdvApp2Var_ApproxF2var_mmapptt_(*args):
    """
    AdvApp2Var_ApproxF2var_mmapptt_(integer const * arg2, integer const * arg3, integer const * arg4, doublereal * arg5, integer * arg6) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mmapptt_(*args)

def AdvApp2Var_ApproxF2var_mma2cdi_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2cdi_(integer * ndimen, integer * nbpntu, doublereal * urootl, integer * nbpntv, doublereal * vrootl, integer * iordru, integer * iordrv, doublereal * contr1, doublereal * contr2, doublereal * contr3, doublereal * contr4, doublereal * sotbu1, doublereal * sotbu2, doublereal * ditbu1, doublereal * ditbu2, doublereal * sotbv1, doublereal * sotbv2, doublereal * ditbv1, doublereal * ditbv2, doublereal * sosotb, doublereal * soditb, doublereal * disotb, doublereal * diditb, integer * iercod) -> int

    :type ndimen: integer
    :type nbpntu: integer
    :type urootl: doublereal
    :type nbpntv: integer
    :type vrootl: doublereal
    :type iordru: integer
    :type iordrv: integer
    :type contr1: doublereal
    :type contr2: doublereal
    :type contr3: doublereal
    :type contr4: doublereal
    :type sotbu1: doublereal
    :type sotbu2: doublereal
    :type ditbu1: doublereal
    :type ditbu2: doublereal
    :type sotbv1: doublereal
    :type sotbv2: doublereal
    :type ditbv1: doublereal
    :type ditbv2: doublereal
    :type sosotb: doublereal
    :type soditb: doublereal
    :type disotb: doublereal
    :type diditb: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2cdi_(*args)

def AdvApp2Var_ApproxF2var_mma2ds1_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2ds1_(integer * ndimen, doublereal * uintfn, doublereal * vintfn, AdvApp2Var_EvaluatorFunc2Var foncnp, integer * nbpntu, integer * nbpntv, doublereal * urootb, doublereal * vrootb, integer * isofav, doublereal * sosotb, doublereal * disotb, doublereal * soditb, doublereal * diditb, doublereal * fpntab, doublereal * ttable, integer * iercod) -> int

    :type ndimen: integer
    :type uintfn: doublereal
    :type vintfn: doublereal
    :type foncnp: OCC.wrapper.AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var
    :type nbpntu: integer
    :type nbpntv: integer
    :type urootb: doublereal
    :type vrootb: doublereal
    :type isofav: integer
    :type sosotb: doublereal
    :type disotb: doublereal
    :type soditb: doublereal
    :type diditb: doublereal
    :type fpntab: doublereal
    :type ttable: doublereal
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ds1_(*args)

def AdvApp2Var_ApproxF2var_mma2ce1_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2ce1_(integer * numdec, integer * ndimen, integer * nbsesp, integer * ndimse, integer * ndminu, integer * ndminv, integer * ndguli, integer * ndgvli, integer * ndjacu, integer * ndjacv, integer * iordru, integer * iordrv, integer * nbpntu, integer * nbpntv, doublereal * epsapr, doublereal * sosotb, doublereal * disotb, doublereal * soditb, doublereal * diditb, doublereal * patjac, doublereal * errmax, doublereal * errmoy, integer * ndegpu, integer * ndegpv, integer * itydec, integer * iercod) -> int

    :type numdec: integer
    :type ndimen: integer
    :type nbsesp: integer
    :type ndimse: integer
    :type ndminu: integer
    :type ndminv: integer
    :type ndguli: integer
    :type ndgvli: integer
    :type ndjacu: integer
    :type ndjacv: integer
    :type iordru: integer
    :type iordrv: integer
    :type nbpntu: integer
    :type nbpntv: integer
    :type epsapr: doublereal
    :type sosotb: doublereal
    :type disotb: doublereal
    :type soditb: doublereal
    :type diditb: doublereal
    :type patjac: doublereal
    :type errmax: doublereal
    :type errmoy: doublereal
    :type ndegpu: integer
    :type ndegpv: integer
    :type itydec: integer
    :type iercod: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ce1_(*args)

def AdvApp2Var_ApproxF2var_mma2can_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2can_(integer const * arg2, integer const * arg3, integer const * arg4, integer const * arg5, integer const * arg6, integer const * arg7, integer const * arg8, doublereal const * arg9, doublereal * arg10, doublereal * arg11, integer * arg12) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :type : integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2can_(*args)

def AdvApp2Var_ApproxF2var_mma1her_(*args):
    """
    AdvApp2Var_ApproxF2var_mma1her_(integer const * arg2, doublereal * arg3, integer * arg4) -> int

    :type : integer
    :type : doublereal
    :type : integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma1her_(*args)

def AdvApp2Var_ApproxF2var_mma2ac2_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2ac2_(integer const * arg2, integer const * arg3, integer const * arg4, integer const * arg5, integer const * arg6, integer const * arg7, doublereal const * arg8, integer const * arg9, doublereal const * arg10, doublereal const * arg11, doublereal * arg12) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : integer
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac2_(*args)

def AdvApp2Var_ApproxF2var_mma2ac3_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2ac3_(integer const * arg2, integer const * arg3, integer const * arg4, integer const * arg5, integer const * arg6, integer const * arg7, doublereal const * arg8, integer const * arg9, doublereal const * arg10, doublereal const * arg11, doublereal * arg12) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : integer
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac3_(*args)

def AdvApp2Var_ApproxF2var_mma2ac1_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2ac1_(integer const * arg2, integer const * arg3, integer const * arg4, integer const * arg5, integer const * arg6, doublereal const * arg7, doublereal const * arg8, doublereal const * arg9, doublereal const * arg10, doublereal const * arg11, doublereal const * arg12, doublereal * arg13) -> int

    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : integer
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :type : doublereal
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac1_(*args)

def AdvApp2Var_ApproxF2var_mma2fx6_(*args):
    """
    AdvApp2Var_ApproxF2var_mma2fx6_(integer * ncfmxu, integer * ncfmxv, integer * ndimen, integer * nbsesp, integer * ndimse, integer * nbupat, integer * nbvpat, integer * iordru, integer * iordrv, doublereal * epsapr, doublereal * epsfro, doublereal * patcan, doublereal * errmax, integer * ncoefu, integer * ncoefv) -> int

    :type ncfmxu: integer
    :type ncfmxv: integer
    :type ndimen: integer
    :type nbsesp: integer
    :type ndimse: integer
    :type nbupat: integer
    :type nbvpat: integer
    :type iordru: integer
    :type iordrv: integer
    :type epsapr: doublereal
    :type epsfro: doublereal
    :type patcan: doublereal
    :type errmax: doublereal
    :type ncoefu: integer
    :type ncoefv: integer
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fx6_(*args)

class NCollection_Sequence_AdvApp2Var_Node(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_AdvApp2Var_Node self) -> NCollection_Sequence< AdvApp2Var_Node >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_AdvApp2Var_Node self) -> NCollection_Sequence< AdvApp2Var_Node >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_AdvApp2Var_Node self) -> NCollection_Sequence< AdvApp2Var_Node >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_AdvApp2Var_Node self) -> NCollection_Sequence< AdvApp2Var_Node >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _AdvApp2Var.new_NCollection_Sequence_AdvApp2Var_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_AdvApp2Var_Node self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_AdvApp2Var_Node self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_AdvApp2Var_Node self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_AdvApp2Var_Node self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_AdvApp2Var_Node self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_AdvApp2Var_Node self)

        Reverse sequence


        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_AdvApp2Var_Node self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_AdvApp2Var_Node self, NCollection_Sequence_AdvApp2Var_Node theOther) -> NCollection_Sequence_AdvApp2Var_Node

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_AdvApp2Var_Node self, NCollection_Sequence_AdvApp2Var_Node theOther) -> NCollection_Sequence_AdvApp2Var_Node

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_AdvApp2Var_Node self, NCollection_Sequence< AdvApp2Var_Node >::Iterator & thePosition)
        Remove(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_AdvApp2Var_Node self, AdvApp2Var_Node theItem)
        Append(NCollection_Sequence_AdvApp2Var_Node self, NCollection_Sequence_AdvApp2Var_Node theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_AdvApp2Var_Node self, AdvApp2Var_Node theItem)
        Prepend(NCollection_Sequence_AdvApp2Var_Node self, NCollection_Sequence_AdvApp2Var_Node theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theIndex, AdvApp2Var_Node theItem)
        InsertBefore(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Node theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_AdvApp2Var_Node self, NCollection_Sequence< AdvApp2Var_Node >::Iterator & thePosition, AdvApp2Var_Node theItem)
        InsertAfter(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Node theSeq)
        InsertAfter(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theIndex, AdvApp2Var_Node theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Node theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_AdvApp2Var_Node self) -> AdvApp2Var_Node

        First item access

        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_AdvApp2Var_Node self) -> AdvApp2Var_Node

        Last item access

        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theIndex) -> AdvApp2Var_Node

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_AdvApp2Var_Node self, Standard_Integer const theIndex, AdvApp2Var_Node theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_SetValue(self, *args)


    def __iter__(self):
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node___iter__(self)
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_Sequence_AdvApp2Var_Node
NCollection_Sequence_AdvApp2Var_Node_swigregister = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_swigregister
NCollection_Sequence_AdvApp2Var_Node_swigregister(NCollection_Sequence_AdvApp2Var_Node)

def NCollection_Sequence_AdvApp2Var_Node_delNode(*args):
    """
    NCollection_Sequence_AdvApp2Var_Node_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_delNode(*args)

class NCollection_Sequence_AdvApp2Var_Node_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _AdvApp2Var.new_NCollection_Sequence_AdvApp2Var_Node_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_Sequence_AdvApp2Var_Node_IteratorHelper

    def __next__(self):
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_IteratorHelper___next__(self)
NCollection_Sequence_AdvApp2Var_Node_IteratorHelper_swigregister = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Node_IteratorHelper_swigregister
NCollection_Sequence_AdvApp2Var_Node_IteratorHelper_swigregister(NCollection_Sequence_AdvApp2Var_Node_IteratorHelper)


try:
	AdvApp2Var_SequenceOfNode = NCollection_Sequence_AdvApp2Var_Node
except NameError:
	pass # does not exist, probably ignored

class AdvApp2Var_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Getmdnombr(*args):
        """
        Getmdnombr() -> mdnombr_1_ &

        :rtype: mdnombr_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmdnombr(*args)

    Getmdnombr = staticmethod(Getmdnombr)

    def Getminombr(*args):
        """
        Getminombr() -> minombr_1_ &

        :rtype: minombr_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getminombr(*args)

    Getminombr = staticmethod(Getminombr)

    def Getmaovpar(*args):
        """
        Getmaovpar() -> maovpar_1_ &

        :rtype: maovpar_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmaovpar(*args)

    Getmaovpar = staticmethod(Getmaovpar)

    def Getmaovpch(*args):
        """
        Getmaovpch() -> maovpch_1_ &

        :rtype: maovpch_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmaovpch(*args)

    Getmaovpch = staticmethod(Getmaovpch)

    def Getmlgdrtl(*args):
        """
        Getmlgdrtl() -> mlgdrtl_1_ &

        :rtype: mlgdrtl_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmlgdrtl(*args)

    Getmlgdrtl = staticmethod(Getmlgdrtl)

    def Getmmjcobi(*args):
        """
        Getmmjcobi() -> mmjcobi_1_ &

        :rtype: mmjcobi_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmjcobi(*args)

    Getmmjcobi = staticmethod(Getmmjcobi)

    def Getmmcmcnp(*args):
        """
        Getmmcmcnp() -> mmcmcnp_1_ &

        :rtype: mmcmcnp_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmcmcnp(*args)

    Getmmcmcnp = staticmethod(Getmmcmcnp)

    def Getmmapgss(*args):
        """
        Getmmapgss() -> mmapgss_1_ &

        :rtype: mmapgss_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgss(*args)

    Getmmapgss = staticmethod(Getmmapgss)

    def Getmmapgs0(*args):
        """
        Getmmapgs0() -> mmapgs0_1_ &

        :rtype: mmapgs0_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs0(*args)

    Getmmapgs0 = staticmethod(Getmmapgs0)

    def Getmmapgs1(*args):
        """
        Getmmapgs1() -> mmapgs1_1_ &

        :rtype: mmapgs1_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs1(*args)

    Getmmapgs1 = staticmethod(Getmmapgs1)

    def Getmmapgs2(*args):
        """
        Getmmapgs2() -> mmapgs2_1_ &

        :rtype: mmapgs2_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs2(*args)

    Getmmapgs2 = staticmethod(Getmmapgs2)

    def __init__(self):
        this = _AdvApp2Var.new_AdvApp2Var_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Data
AdvApp2Var_Data_swigregister = _AdvApp2Var.AdvApp2Var_Data_swigregister
AdvApp2Var_Data_swigregister(AdvApp2Var_Data)

def AdvApp2Var_Data_Getmdnombr(*args):
    """
    AdvApp2Var_Data_Getmdnombr() -> mdnombr_1_ &

    :rtype: mdnombr_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmdnombr(*args)

def AdvApp2Var_Data_Getminombr(*args):
    """
    AdvApp2Var_Data_Getminombr() -> minombr_1_ &

    :rtype: minombr_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getminombr(*args)

def AdvApp2Var_Data_Getmaovpar(*args):
    """
    AdvApp2Var_Data_Getmaovpar() -> maovpar_1_ &

    :rtype: maovpar_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmaovpar(*args)

def AdvApp2Var_Data_Getmaovpch(*args):
    """
    AdvApp2Var_Data_Getmaovpch() -> maovpch_1_ &

    :rtype: maovpch_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmaovpch(*args)

def AdvApp2Var_Data_Getmlgdrtl(*args):
    """
    AdvApp2Var_Data_Getmlgdrtl() -> mlgdrtl_1_ &

    :rtype: mlgdrtl_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmlgdrtl(*args)

def AdvApp2Var_Data_Getmmjcobi(*args):
    """
    AdvApp2Var_Data_Getmmjcobi() -> mmjcobi_1_ &

    :rtype: mmjcobi_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmjcobi(*args)

def AdvApp2Var_Data_Getmmcmcnp(*args):
    """
    AdvApp2Var_Data_Getmmcmcnp() -> mmcmcnp_1_ &

    :rtype: mmcmcnp_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmcmcnp(*args)

def AdvApp2Var_Data_Getmmapgss(*args):
    """
    AdvApp2Var_Data_Getmmapgss() -> mmapgss_1_ &

    :rtype: mmapgss_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgss(*args)

def AdvApp2Var_Data_Getmmapgs0(*args):
    """
    AdvApp2Var_Data_Getmmapgs0() -> mmapgs0_1_ &

    :rtype: mmapgs0_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs0(*args)

def AdvApp2Var_Data_Getmmapgs1(*args):
    """
    AdvApp2Var_Data_Getmmapgs1() -> mmapgs1_1_ &

    :rtype: mmapgs1_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs1(*args)

def AdvApp2Var_Data_Getmmapgs2(*args):
    """
    AdvApp2Var_Data_Getmmapgs2() -> mmapgs2_1_ &

    :rtype: mmapgs2_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs2(*args)

class AdvApp2Var_EvaluatorFunc2Var(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, *args):
        """
        Evaluate(AdvApp2Var_EvaluatorFunc2Var self, Standard_Integer * theDimension, Standard_Real * theUStartEnd, Standard_Real * theVStartEnd, Standard_Integer * theFavorIso, Standard_Real * theConstParam, Standard_Integer * theNbParams, Standard_Real * theParameters, Standard_Integer * theUOrder, Standard_Integer * theVOrder, Standard_Real * theResult, Standard_Integer * theErrorCode)

        Function evaluation method to be defined by descendant

        :type theDimension: int
        :type theUStartEnd: float
        :type theVStartEnd: float
        :type theFavorIso: int
        :type theConstParam: float
        :type theNbParams: int
        :type theParameters: float
        :type theUOrder: int
        :type theVOrder: int
        :type theResult: float
        :type theErrorCode: int

        """
        return _AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var_Evaluate(self, *args)


    def __call__(self, *args):
        """
        __call__(AdvApp2Var_EvaluatorFunc2Var self, Standard_Integer * theDimension, Standard_Real * theUStartEnd, Standard_Real * theVStartEnd, Standard_Integer * theFavorIso, Standard_Real * theConstParam, Standard_Integer * theNbParams, Standard_Real * theParameters, Standard_Integer * theUOrder, Standard_Integer * theVOrder, Standard_Real * theResult, Standard_Integer * theErrorCode)

        Shortcut for function-call style usage

        :type theDimension: int
        :type theUStartEnd: float
        :type theVStartEnd: float
        :type theFavorIso: int
        :type theConstParam: float
        :type theNbParams: int
        :type theParameters: float
        :type theUOrder: int
        :type theVOrder: int
        :type theResult: float
        :type theErrorCode: int

        """
        return _AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var___call__(self, *args)

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_EvaluatorFunc2Var
AdvApp2Var_EvaluatorFunc2Var_swigregister = _AdvApp2Var.AdvApp2Var_EvaluatorFunc2Var_swigregister
AdvApp2Var_EvaluatorFunc2Var_swigregister(AdvApp2Var_EvaluatorFunc2Var)

class NCollection_Sequence_AdvApp2Var_Strip(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_AdvApp2Var_Strip self) -> NCollection_Sequence< AdvApp2Var_Strip >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_AdvApp2Var_Strip self) -> NCollection_Sequence< AdvApp2Var_Strip >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_AdvApp2Var_Strip self) -> NCollection_Sequence< AdvApp2Var_Strip >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_AdvApp2Var_Strip self) -> NCollection_Sequence< AdvApp2Var_Strip >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _AdvApp2Var.new_NCollection_Sequence_AdvApp2Var_Strip(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_AdvApp2Var_Strip self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_AdvApp2Var_Strip self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_AdvApp2Var_Strip self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_AdvApp2Var_Strip self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_AdvApp2Var_Strip self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_AdvApp2Var_Strip self)

        Reverse sequence


        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_AdvApp2Var_Strip self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_AdvApp2Var_Strip self, NCollection_Sequence_AdvApp2Var_Strip theOther) -> NCollection_Sequence_AdvApp2Var_Strip

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_AdvApp2Var_Strip self, NCollection_Sequence_AdvApp2Var_Strip theOther) -> NCollection_Sequence_AdvApp2Var_Strip

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_AdvApp2Var_Strip self, NCollection_Sequence< AdvApp2Var_Strip >::Iterator & thePosition)
        Remove(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_AdvApp2Var_Strip self, NCollection_Sequence_AdvApp2Var_Iso theItem)
        Append(NCollection_Sequence_AdvApp2Var_Strip self, NCollection_Sequence_AdvApp2Var_Strip theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_AdvApp2Var_Strip self, NCollection_Sequence_AdvApp2Var_Iso theItem)
        Prepend(NCollection_Sequence_AdvApp2Var_Strip self, NCollection_Sequence_AdvApp2Var_Strip theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Iso theItem)
        InsertBefore(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Strip theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_AdvApp2Var_Strip self, NCollection_Sequence< AdvApp2Var_Strip >::Iterator & thePosition, NCollection_Sequence_AdvApp2Var_Iso theItem)
        InsertAfter(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Strip theSeq)
        InsertAfter(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Iso theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Strip theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_AdvApp2Var_Strip self) -> NCollection_Sequence_AdvApp2Var_Iso

        First item access

        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_AdvApp2Var_Strip self) -> NCollection_Sequence_AdvApp2Var_Iso

        Last item access

        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theIndex) -> NCollection_Sequence_AdvApp2Var_Iso

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_AdvApp2Var_Strip self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Iso theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_SetValue(self, *args)


    def __iter__(self):
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip___iter__(self)
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_Sequence_AdvApp2Var_Strip
NCollection_Sequence_AdvApp2Var_Strip_swigregister = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_swigregister
NCollection_Sequence_AdvApp2Var_Strip_swigregister(NCollection_Sequence_AdvApp2Var_Strip)

def NCollection_Sequence_AdvApp2Var_Strip_delNode(*args):
    """
    NCollection_Sequence_AdvApp2Var_Strip_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_delNode(*args)

class NCollection_Sequence_AdvApp2Var_Strip_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _AdvApp2Var.new_NCollection_Sequence_AdvApp2Var_Strip_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_Sequence_AdvApp2Var_Strip_IteratorHelper

    def __next__(self):
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_IteratorHelper___next__(self)
NCollection_Sequence_AdvApp2Var_Strip_IteratorHelper_swigregister = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Strip_IteratorHelper_swigregister
NCollection_Sequence_AdvApp2Var_Strip_IteratorHelper_swigregister(NCollection_Sequence_AdvApp2Var_Strip_IteratorHelper)


try:
	AdvApp2Var_SequenceOfStrip = NCollection_Sequence_AdvApp2Var_Strip
except NameError:
	pass # does not exist, probably ignored

class AdvApp2Var_Framework(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApp2Var_Framework self) -> AdvApp2Var_Framework
        __init__(AdvApp2Var_Framework self, NCollection_Sequence_AdvApp2Var_Node Frame, NCollection_Sequence_AdvApp2Var_Strip UFrontier, NCollection_Sequence_AdvApp2Var_Strip VFrontier) -> AdvApp2Var_Framework

        :type Frame: OCC.wrapper.AdvApp2Var.AdvApp2Var_SequenceOfNode
        :type UFrontier: OCC.wrapper.AdvApp2Var.AdvApp2Var_SequenceOfStrip
        :type VFrontier: OCC.wrapper.AdvApp2Var.AdvApp2Var_SequenceOfStrip

        """
        this = _AdvApp2Var.new_AdvApp2Var_Framework(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FirstNotApprox(self, *args):
        """
        FirstNotApprox(AdvApp2Var_Framework self, AdvApp2Var_Iso anIso) -> Standard_Boolean

        search the Index of the first Iso not approximated,
        if all Isos are approximated Standard_False is returned.

        :type IndexIso: int
        :type IndexStrip: int
        :type anIso: OCC.wrapper.AdvApp2Var.AdvApp2Var_Iso
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.AdvApp2Var_Framework_FirstNotApprox(self, *args)


    def FirstNode(self, *args):
        """
        FirstNode(AdvApp2Var_Framework self, GeomAbs_IsoType const Type, Standard_Integer const IndexIso, Standard_Integer const IndexStrip) -> Standard_Integer

        :type Type: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type IndexIso: int
        :type IndexStrip: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Framework_FirstNode(self, *args)


    def LastNode(self, *args):
        """
        LastNode(AdvApp2Var_Framework self, GeomAbs_IsoType const Type, Standard_Integer const IndexIso, Standard_Integer const IndexStrip) -> Standard_Integer

        :type Type: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type IndexIso: int
        :type IndexStrip: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.AdvApp2Var_Framework_LastNode(self, *args)


    def ChangeIso(self, *args):
        """
        ChangeIso(AdvApp2Var_Framework self, Standard_Integer const IndexIso, Standard_Integer const IndexStrip, AdvApp2Var_Iso anIso)

        :type IndexIso: int
        :type IndexStrip: int
        :type anIso: OCC.wrapper.AdvApp2Var.AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Framework_ChangeIso(self, *args)


    def Node(self, *args):
        """
        :type U: float
        :type V: float
        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_Node

        """
        res = _AdvApp2Var.AdvApp2Var_Framework_Node(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsoU(self, *args):
        """
        :type U: float
        :type V0: float
        :type V1: float
        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_Iso

        """
        res = _AdvApp2Var.AdvApp2Var_Framework_IsoU(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsoV(self, *args):
        """
        :type U0: float
        :type U1: float
        :type V: float
        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_Iso

        """
        res = _AdvApp2Var.AdvApp2Var_Framework_IsoV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeNode(self, *args):
        """
        ChangeNode(AdvApp2Var_Framework self, Standard_Integer const IndexNode) -> AdvApp2Var_Node

        :type IndexNode: int
        :rtype: OCC.wrapper.AdvApp2Var.AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_Framework_ChangeNode(self, *args)


    def UpdateInU(self, *args):
        """
        UpdateInU(AdvApp2Var_Framework self, Standard_Real const CuttingValue)

        :type CuttingValue: float

        """
        return _AdvApp2Var.AdvApp2Var_Framework_UpdateInU(self, *args)


    def UpdateInV(self, *args):
        """
        UpdateInV(AdvApp2Var_Framework self, Standard_Real const CuttingValue)

        :type CuttingValue: float

        """
        return _AdvApp2Var.AdvApp2Var_Framework_UpdateInV(self, *args)


    def UEquation(self, *args):
        """
        :type IndexIso: int
        :type IndexStrip: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        res = _AdvApp2Var.AdvApp2Var_Framework_UEquation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VEquation(self, *args):
        """
        :type IndexIso: int
        :type IndexStrip: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        res = _AdvApp2Var.AdvApp2Var_Framework_VEquation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Framework
AdvApp2Var_Framework_swigregister = _AdvApp2Var.AdvApp2Var_Framework_swigregister
AdvApp2Var_Framework_swigregister(AdvApp2Var_Framework)

class NCollection_Sequence_AdvApp2Var_Iso(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_AdvApp2Var_Iso self) -> NCollection_Sequence< AdvApp2Var_Iso >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_AdvApp2Var_Iso self) -> NCollection_Sequence< AdvApp2Var_Iso >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_AdvApp2Var_Iso self) -> NCollection_Sequence< AdvApp2Var_Iso >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_AdvApp2Var_Iso self) -> NCollection_Sequence< AdvApp2Var_Iso >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _AdvApp2Var.new_NCollection_Sequence_AdvApp2Var_Iso(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_AdvApp2Var_Iso self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_AdvApp2Var_Iso self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_AdvApp2Var_Iso self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_AdvApp2Var_Iso self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_AdvApp2Var_Iso self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_AdvApp2Var_Iso self)

        Reverse sequence


        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_AdvApp2Var_Iso self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_AdvApp2Var_Iso self, NCollection_Sequence_AdvApp2Var_Iso theOther) -> NCollection_Sequence_AdvApp2Var_Iso

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_AdvApp2Var_Iso self, NCollection_Sequence_AdvApp2Var_Iso theOther) -> NCollection_Sequence_AdvApp2Var_Iso

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_AdvApp2Var_Iso self, NCollection_Sequence< AdvApp2Var_Iso >::Iterator & thePosition)
        Remove(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_AdvApp2Var_Iso self, AdvApp2Var_Iso theItem)
        Append(NCollection_Sequence_AdvApp2Var_Iso self, NCollection_Sequence_AdvApp2Var_Iso theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_AdvApp2Var_Iso self, AdvApp2Var_Iso theItem)
        Prepend(NCollection_Sequence_AdvApp2Var_Iso self, NCollection_Sequence_AdvApp2Var_Iso theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theIndex, AdvApp2Var_Iso theItem)
        InsertBefore(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Iso theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_AdvApp2Var_Iso self, NCollection_Sequence< AdvApp2Var_Iso >::Iterator & thePosition, AdvApp2Var_Iso theItem)
        InsertAfter(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Iso theSeq)
        InsertAfter(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theIndex, AdvApp2Var_Iso theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theIndex, NCollection_Sequence_AdvApp2Var_Iso theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_AdvApp2Var_Iso self) -> AdvApp2Var_Iso

        First item access

        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_AdvApp2Var_Iso self) -> AdvApp2Var_Iso

        Last item access

        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theIndex) -> AdvApp2Var_Iso

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_AdvApp2Var_Iso self, Standard_Integer const theIndex, AdvApp2Var_Iso theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_SetValue(self, *args)


    def __iter__(self):
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso___iter__(self)
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_Sequence_AdvApp2Var_Iso
NCollection_Sequence_AdvApp2Var_Iso_swigregister = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_swigregister
NCollection_Sequence_AdvApp2Var_Iso_swigregister(NCollection_Sequence_AdvApp2Var_Iso)

def NCollection_Sequence_AdvApp2Var_Iso_delNode(*args):
    """
    NCollection_Sequence_AdvApp2Var_Iso_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_delNode(*args)

class NCollection_Sequence_AdvApp2Var_Iso_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _AdvApp2Var.new_NCollection_Sequence_AdvApp2Var_Iso_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_NCollection_Sequence_AdvApp2Var_Iso_IteratorHelper

    def __next__(self):
        return _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_IteratorHelper___next__(self)
NCollection_Sequence_AdvApp2Var_Iso_IteratorHelper_swigregister = _AdvApp2Var.NCollection_Sequence_AdvApp2Var_Iso_IteratorHelper_swigregister
NCollection_Sequence_AdvApp2Var_Iso_IteratorHelper_swigregister(NCollection_Sequence_AdvApp2Var_Iso_IteratorHelper)


try:
	AdvApp2Var_Strip = NCollection_Sequence_AdvApp2Var_Iso
except NameError:
	pass # does not exist, probably ignored



