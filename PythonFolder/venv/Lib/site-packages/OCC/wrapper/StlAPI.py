# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StlAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StlAPI')
    _StlAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StlAPI', [dirname(__file__)])
        except ImportError:
            import _StlAPI
            return _StlAPI
        try:
            _mod = imp.load_module('_StlAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StlAPI = swig_import_helper()
    del swig_import_helper
else:
    import _StlAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StlAPI.delete_SwigPyIterator

    def value(self):
        return _StlAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StlAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StlAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StlAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StlAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StlAPI.SwigPyIterator_copy(self)

    def next(self):
        return _StlAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _StlAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _StlAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StlAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StlAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StlAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StlAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StlAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StlAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StlAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StlAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StlAPI.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StlAPI.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StlAPI.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StlAPI.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StlAPI.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StlAPI.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StlAPI.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StlAPI.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StlAPI.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StlAPI.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StlAPI.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StlAPI.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StlAPI.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StlAPI.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StlAPI.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StlAPI.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StlAPI.ptr_to_number(item)
ptr_to_number = _StlAPI.ptr_to_number

def HashCode(*args):
    return _StlAPI.HashCode(*args)
HashCode = _StlAPI.HashCode

def ptr_equal(a, b):
    return _StlAPI.ptr_equal(a, b)
ptr_equal = _StlAPI.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
class StlAPI_(object):
    """Offers the API for STL data manipulation."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Write(*args):
        """
        Write(TopoDS_Shape theShape, Standard_CString const theFile, Standard_Boolean const theAsciiMode) -> Standard_Boolean

        Convert and write shape to STL format.
        File is written in binary if aAsciiMode is False otherwise it is written in Ascii (by default).

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theFile: OCC.wrapper.Standard.Standard_CString
        :type theAsciiMode: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StlAPI.StlAPI__Write(*args)

    Write = staticmethod(Write)

    def Read(*args):
        """
        Read(TopoDS_Shape theShape, Standard_CString const aFile) -> Standard_Boolean

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aFile: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StlAPI.StlAPI__Read(*args)

    Read = staticmethod(Read)

    def __init__(self):
        """Offers the API for STL data manipulation."""
        this = _StlAPI.new_StlAPI_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StlAPI.delete_StlAPI_
StlAPI__swigregister = _StlAPI.StlAPI__swigregister
StlAPI__swigregister(StlAPI_)

def StlAPI__Write(*args):
    """
    StlAPI__Write(TopoDS_Shape theShape, Standard_CString const theFile, Standard_Boolean const theAsciiMode) -> Standard_Boolean

    Convert and write shape to STL format.
    File is written in binary if aAsciiMode is False otherwise it is written in Ascii (by default).

    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theFile: OCC.wrapper.Standard.Standard_CString
    :type theAsciiMode: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _StlAPI.StlAPI__Write(*args)

def StlAPI__Read(*args):
    """
    StlAPI__Read(TopoDS_Shape theShape, Standard_CString const aFile) -> Standard_Boolean

    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aFile: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _StlAPI.StlAPI__Read(*args)

class StlAPI_Reader(object):
    """Reading from stereolithography format."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Read(self, *args):
        """
        Read(StlAPI_Reader self, TopoDS_Shape theShape, Standard_CString const theFileName) -> Standard_Boolean

        Reads STL file to the TopoDS_Shape (each triangle is converted to the face).
        @return True if reading is successful

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theFileName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StlAPI.StlAPI_Reader_Read(self, *args)


    def __init__(self):
        """Reading from stereolithography format."""
        this = _StlAPI.new_StlAPI_Reader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StlAPI.delete_StlAPI_Reader
StlAPI_Reader_swigregister = _StlAPI.StlAPI_Reader_swigregister
StlAPI_Reader_swigregister(StlAPI_Reader)

class StlAPI_Writer(object):
    """
    This class creates and writes
    STL files from Open CASCADE shapes. An STL file can be written to an existing STL file or to a new one.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StlAPI_Writer self) -> StlAPI_Writer

        Creates a writer object with default parameters: ASCIIMode.


        """
        this = _StlAPI.new_StlAPI_Writer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ASCIIMode(self, *args):
        """
        ASCIIMode(StlAPI_Writer self) -> Standard_Boolean &

        Returns the address to the flag defining the mode for writing the file.
        This address may be used to either read or change the flag.
        If the mode returns True (default value) the generated file is an ASCII file.
        If the mode returns False, the generated file is a binary file.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StlAPI.StlAPI_Writer_ASCIIMode(self, *args)


    def Write(self, *args):
        """
        Write(StlAPI_Writer self, TopoDS_Shape theShape, Standard_CString const theFileName) -> Standard_Boolean

        Converts a given shape to STL format and writes it to file with a given filename.
        @return the error state.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theFileName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StlAPI.StlAPI_Writer_Write(self, *args)

    __swig_destroy__ = _StlAPI.delete_StlAPI_Writer
StlAPI_Writer_swigregister = _StlAPI.StlAPI_Writer_swigregister
StlAPI_Writer_swigregister(StlAPI_Writer)



