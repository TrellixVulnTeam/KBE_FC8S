# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StdMeshers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StdMeshers')
    _StdMeshers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StdMeshers', [dirname(__file__)])
        except ImportError:
            import _StdMeshers
            return _StdMeshers
        try:
            _mod = imp.load_module('_StdMeshers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StdMeshers = swig_import_helper()
    del swig_import_helper
else:
    import _StdMeshers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StdMeshers.delete_SwigPyIterator

    def value(self):
        return _StdMeshers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StdMeshers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StdMeshers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StdMeshers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StdMeshers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StdMeshers.SwigPyIterator_copy(self)

    def next(self):
        return _StdMeshers.SwigPyIterator_next(self)

    def __next__(self):
        return _StdMeshers.SwigPyIterator___next__(self)

    def previous(self):
        return _StdMeshers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StdMeshers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StdMeshers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StdMeshers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StdMeshers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StdMeshers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StdMeshers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StdMeshers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StdMeshers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdMeshers.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StdMeshers.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StdMeshers.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdMeshers.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdMeshers.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StdMeshers.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StdMeshers.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StdMeshers.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdMeshers.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StdMeshers.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StdMeshers.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdMeshers.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdMeshers.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StdMeshers.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StdMeshers.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StdMeshers.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StdMeshers.ptr_to_number(item)
ptr_to_number = _StdMeshers.ptr_to_number

def HashCode(*args):
    return _StdMeshers.HashCode(*args)
HashCode = _StdMeshers.HashCode

def ptr_equal(a, b):
    return _StdMeshers.ptr_equal(a, b)
ptr_equal = _StdMeshers.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMESH
else:
    import SMESH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepMesh
else:
    import BRepMesh
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDSAbs
else:
    import SMDSAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeAnalysis
else:
    import ShapeAnalysis
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAPI
else:
    import GeomAPI
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Approx
else:
    import Approx
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppCont
else:
    import AppCont
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Extrema
else:
    import Extrema
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MeshVS
else:
    import MeshVS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMESHDS
else:
    import SMESHDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDS
else:
    import SMDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MEFISTO
else:
    import MEFISTO
del _swig_python_version_info
QUAD_STANDARD = _StdMeshers.QUAD_STANDARD
QUAD_TRIANGLE_PREF = _StdMeshers.QUAD_TRIANGLE_PREF
QUAD_QUADRANGLE_PREF = _StdMeshers.QUAD_QUADRANGLE_PREF
QUAD_QUADRANGLE_PREF_REVERSED = _StdMeshers.QUAD_QUADRANGLE_PREF_REVERSED
QUAD_REDUCED = _StdMeshers.QUAD_REDUCED
QUAD_NB_TYPES = _StdMeshers.QUAD_NB_TYPES
QUAD_BOTTOM_SIDE = _StdMeshers.QUAD_BOTTOM_SIDE
QUAD_RIGHT_SIDE = _StdMeshers.QUAD_RIGHT_SIDE
QUAD_TOP_SIDE = _StdMeshers.QUAD_TOP_SIDE
QUAD_LEFT_SIDE = _StdMeshers.QUAD_LEFT_SIDE
NB_QUAD_SIDES = _StdMeshers.NB_QUAD_SIDES
class StdMeshers_Propagation(SMESH.SMESH_Hypothesis):
    """rief Propagation hypothesis"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Propagation self, int hypId, SMESH_Gen gen) -> StdMeshers_Propagation

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Propagation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_Propagation self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_Propagation_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_Propagation self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_Propagation_LoadFrom(self, *args)


    def GetName(*args):
        """
        GetName() -> std::string

        :rtype: string

        """
        return _StdMeshers.StdMeshers_Propagation_GetName(*args)

    GetName = staticmethod(GetName)

    def GetFilter(*args):
        """
        GetFilter() -> SMESH_HypoFilter

        rief Returns a filter selecting both StdMeshers_Propagation and
        StdMeshers_PropagOfDistribution hypotheses

        :rtype: OCC.wrapper.SMESH.SMESH_HypoFilter

        """
        return _StdMeshers.StdMeshers_Propagation_GetFilter(*args)

    GetFilter = staticmethod(GetFilter)

    def SetPropagationMgr(*args):
        """
        SetPropagationMgr(SMESH_subMesh subMesh)

        rief Set EventListener managing propagation of hypotheses
        \param subMesh - edge submesh to set event listener on

        1D algo is expected to call this method from it's SetEventListener()

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Propagation_SetPropagationMgr(*args)

    SetPropagationMgr = staticmethod(SetPropagationMgr)

    def GetPropagationSource(*args):
        """
        GetPropagationSource(SMESH_Mesh theMesh, TopoDS_Shape theEdge, bool & isPropagOfDistribution) -> TopoDS_Edge

        rief Return an edge from which hypotheses are propagated
        \param theMesh - mesh
        \param theEdge - edge to which hypotheses are propagated
        etval TopoDS_Edge - source edge, also passing orientation

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type isPropagOfDistribution: bool &
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _StdMeshers.StdMeshers_Propagation_GetPropagationSource(*args)

    GetPropagationSource = staticmethod(GetPropagationSource)

    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_Propagation self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize my parameter values by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Just return false as this hypothesis does not have parameters values

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Propagation_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_Propagation self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Propagation_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Propagation
StdMeshers_Propagation_swigregister = _StdMeshers.StdMeshers_Propagation_swigregister
StdMeshers_Propagation_swigregister(StdMeshers_Propagation)

def StdMeshers_Propagation_GetName(*args):
    """
    StdMeshers_Propagation_GetName() -> std::string

    :rtype: string

    """
    return _StdMeshers.StdMeshers_Propagation_GetName(*args)

def StdMeshers_Propagation_GetFilter(*args):
    """
    StdMeshers_Propagation_GetFilter() -> SMESH_HypoFilter

    rief Returns a filter selecting both StdMeshers_Propagation and
    StdMeshers_PropagOfDistribution hypotheses

    :rtype: OCC.wrapper.SMESH.SMESH_HypoFilter

    """
    return _StdMeshers.StdMeshers_Propagation_GetFilter(*args)

def StdMeshers_Propagation_SetPropagationMgr(*args):
    """
    StdMeshers_Propagation_SetPropagationMgr(SMESH_subMesh subMesh)

    rief Set EventListener managing propagation of hypotheses
    \param subMesh - edge submesh to set event listener on

    1D algo is expected to call this method from it's SetEventListener()

    :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

    """
    return _StdMeshers.StdMeshers_Propagation_SetPropagationMgr(*args)

def StdMeshers_Propagation_GetPropagationSource(*args):
    """
    StdMeshers_Propagation_GetPropagationSource(SMESH_Mesh theMesh, TopoDS_Shape theEdge, bool & isPropagOfDistribution) -> TopoDS_Edge

    rief Return an edge from which hypotheses are propagated
    \param theMesh - mesh
    \param theEdge - edge to which hypotheses are propagated
    etval TopoDS_Edge - source edge, also passing orientation

    :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type theEdge: OCC.wrapper.TopoDS.TopoDS_Shape
    :type isPropagOfDistribution: bool &
    :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

    """
    return _StdMeshers.StdMeshers_Propagation_GetPropagationSource(*args)

class StdMeshers_ImportSource1D(SMESH.SMESH_Hypothesis):
    """rief Stores groups to import elements from"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_ImportSource1D self, int hypId, SMESH_Gen gen) -> StdMeshers_ImportSource1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_ImportSource1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetGroups(self, *args):
        """
        SetGroups(StdMeshers_ImportSource1D self, std::vector< SMESH_Group *,std::allocator< SMESH_Group * > > const & groups)

        :type groups: OCC.wrapper.StdMeshers.vector_SMESH_Group

        """
        return _StdMeshers.StdMeshers_ImportSource1D_SetGroups(self, *args)


    def GetGroups(self, *args):
        """
        :type loaded: bool
        :rtype: OCC.wrapper.StdMeshers.vector_SMESH_Group

        """
        res = _StdMeshers.StdMeshers_ImportSource1D_GetGroups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCopySourceMesh(self, *args):
        """
        SetCopySourceMesh(StdMeshers_ImportSource1D self, bool toCopyMesh, bool toCopyGroups)

        :type toCopyMesh: bool
        :type toCopyGroups: bool

        """
        return _StdMeshers.StdMeshers_ImportSource1D_SetCopySourceMesh(self, *args)


    def GetCopySourceMesh(self, *args):
        """
        GetCopySourceMesh(StdMeshers_ImportSource1D self, bool & toCopyMesh, bool & toCopyGroups)

        :type toCopyMesh: bool &
        :type toCopyGroups: bool &

        """
        return _StdMeshers.StdMeshers_ImportSource1D_GetCopySourceMesh(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_ImportSource1D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_ImportSource1D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_ImportSource1D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_ImportSource1D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_ImportSource1D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ImportSource1D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_ImportSource1D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ImportSource1D_SetParametersByDefaults(self, *args)


    def DataDependOnParams(self, *args):
        """
        DataDependOnParams(StdMeshers_ImportSource1D self) -> bool

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ImportSource1D_DataDependOnParams(self, *args)


    def RestoreGroups(self, *args):
        """
        RestoreGroups(StdMeshers_ImportSource1D self, std::vector< SMESH_Group *,std::allocator< SMESH_Group * > > const & groups)

        :type groups: OCC.wrapper.StdMeshers.vector_SMESH_Group

        """
        return _StdMeshers.StdMeshers_ImportSource1D_RestoreGroups(self, *args)


    def StoreResultGroups(self, *args):
        """
        StoreResultGroups(StdMeshers_ImportSource1D self, std::vector< SMESH_Group *,std::allocator< SMESH_Group * > > const & groups, SMESHDS_Mesh srcMesh, SMESHDS_Mesh tgtMesh)

        :type groups: OCC.wrapper.StdMeshers.vector_SMESH_Group
        :type srcMesh: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :type tgtMesh: OCC.wrapper.SMESHDS.SMESHDS_Mesh

        """
        return _StdMeshers.StdMeshers_ImportSource1D_StoreResultGroups(self, *args)


    def GetResultGroups(self, *args):
        """
        GetResultGroups(StdMeshers_ImportSource1D self, SMESHDS_Mesh srcMesh, SMESHDS_Mesh tgtMesh) -> std::vector< SMESH_Group *,std::allocator< SMESH_Group * > > *

        :type srcMesh: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :type tgtMesh: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :rtype: OCC.wrapper.StdMeshers.vector_SMESH_Group

        """
        return _StdMeshers.StdMeshers_ImportSource1D_GetResultGroups(self, *args)


    def GetSourceMeshes(self, *args):
        """
        GetSourceMeshes(StdMeshers_ImportSource1D self) -> std::vector< SMESH_Mesh *,std::allocator< SMESH_Mesh * > >

        :rtype: OCC.wrapper.StdMeshers.vector_SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ImportSource1D_GetSourceMeshes(self, *args)


    def GetSourceSubMeshes(self, *args):
        """
        GetSourceSubMeshes(StdMeshers_ImportSource1D self, SMESH_Mesh srcMesh) -> std::vector< SMESH_subMesh *,std::allocator< SMESH_subMesh * > >

        :type srcMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: OCC.wrapper.StdMeshers.vector_SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_ImportSource1D_GetSourceSubMeshes(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_ImportSource1D
StdMeshers_ImportSource1D_swigregister = _StdMeshers.StdMeshers_ImportSource1D_swigregister
StdMeshers_ImportSource1D_swigregister(StdMeshers_ImportSource1D)

class StdMeshers_Quadrangle_2D(SMESH.SMESH_2D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Quadrangle_2D self, int hypId, SMESH_Gen gen) -> StdMeshers_Quadrangle_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Quadrangle_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Quadrangle_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Quadrangle_2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Quadrangle_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Quadrangle_2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Quadrangle_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Quadrangle_2D_Evaluate(self, *args)


    def CheckAnd2Dcompute(self, *args):
        """
        CheckAnd2Dcompute(StdMeshers_Quadrangle_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, bool const CreateQuadratic) -> FaceQuadStruct::Ptr

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type CreateQuadratic: const bool
        :rtype: Ptr

        """
        return _StdMeshers.StdMeshers_Quadrangle_2D_CheckAnd2Dcompute(self, *args)


    def CheckNbEdges(self, *args):
        """
        CheckNbEdges(StdMeshers_Quadrangle_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, bool const considerMesh=False, SMESH_MesherHelper aFaceHelper=None) -> FaceQuadStruct::Ptr

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type considerMesh: const bool
        :type aFaceHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :rtype: Ptr

        """
        return _StdMeshers.StdMeshers_Quadrangle_2D_CheckNbEdges(self, *args)


    def IsApplicableToShape(self, *args):
        """
        IsApplicableToShape(StdMeshers_Quadrangle_2D self, TopoDS_Shape shape, bool toCheckAll) -> bool

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Quadrangle_2D_IsApplicableToShape(self, *args)


    def IsApplicable(*args):
        """
        IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Quadrangle_2D_IsApplicable(*args)

    IsApplicable = staticmethod(IsApplicable)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Quadrangle_2D
StdMeshers_Quadrangle_2D_swigregister = _StdMeshers.StdMeshers_Quadrangle_2D_swigregister
StdMeshers_Quadrangle_2D_swigregister(StdMeshers_Quadrangle_2D)

def StdMeshers_Quadrangle_2D_IsApplicable(*args):
    """
    StdMeshers_Quadrangle_2D_IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type toCheckAll: bool
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_Quadrangle_2D_IsApplicable(*args)

class StdMeshers_Regular_1D(SMESH.SMESH_1D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Regular_1D self, int hypId, SMESH_Gen gen) -> StdMeshers_Regular_1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Regular_1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Regular_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Regular_1D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Regular_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Regular_1D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Regular_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Regular_1D_Evaluate(self, *args)


    def CancelCompute(self, *args):
        """
        CancelCompute(StdMeshers_Regular_1D self)

        rief Sets _computeCanceled to true. It's usage depends on
        implementation of a particular mesher.


        """
        return _StdMeshers.StdMeshers_Regular_1D_CancelCompute(self, *args)


    def GetUsedHypothesis(self, *args):
        """
        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type : const bool
        :rtype: OCC.wrapper.StdMeshers.list_SMESHDS_Hypothesis

        """
        res = _StdMeshers.StdMeshers_Regular_1D_GetUsedHypothesis(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_Regular_1D self, SMESH_subMesh subMesh)

        rief Sets event listener to submeshes if necessary
        \param subMesh - submesh where algo is set

        This method is called when a submesh gets HYP_OK algo_state.
        After being set, event listener is notified on each event of a submesh.

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Regular_1D_SetEventListener(self, *args)


    def SubmeshRestored(self, *args):
        """
        SubmeshRestored(StdMeshers_Regular_1D self, SMESH_subMesh subMesh)

        rief Allow algo to do something after persistent restoration
        \param subMesh - restored submesh

        This method is called only if a submesh has HYP_OK algo_state.

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Regular_1D_SubmeshRestored(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Regular_1D
StdMeshers_Regular_1D_swigregister = _StdMeshers.StdMeshers_Regular_1D_swigregister
StdMeshers_Regular_1D_swigregister(StdMeshers_Regular_1D)

class StdMeshers_NumberOfLayers(SMESH.SMESH_Hypothesis):
    """
    This hypothesis is used by "Radial prism" algorithm.
    It specifies number of segments between the internal 
    and the external surfaces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_NumberOfLayers self, int hypId, SMESH_Gen gen) -> StdMeshers_NumberOfLayers

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_NumberOfLayers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetNumberOfLayers(self, *args):
        """
        SetNumberOfLayers(StdMeshers_NumberOfLayers self, int numberOfLayers)

        :type numberOfLayers: int

        """
        return _StdMeshers.StdMeshers_NumberOfLayers_SetNumberOfLayers(self, *args)


    def GetNumberOfLayers(self, *args):
        """
        GetNumberOfLayers(StdMeshers_NumberOfLayers self) -> int

        :rtype: int

        """
        return _StdMeshers.StdMeshers_NumberOfLayers_GetNumberOfLayers(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_NumberOfLayers self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_NumberOfLayers_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_NumberOfLayers self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_NumberOfLayers_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_NumberOfLayers self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize parameters by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Implementation does noting

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_NumberOfLayers_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_NumberOfLayers self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_NumberOfLayers_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_NumberOfLayers
StdMeshers_NumberOfLayers_swigregister = _StdMeshers.StdMeshers_NumberOfLayers_swigregister
StdMeshers_NumberOfLayers_swigregister(StdMeshers_NumberOfLayers)

class StdMeshers_Reversible1D(SMESH.SMESH_Hypothesis):
    """rief A base of reversible 1D hypotheses"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetReversedEdges(self, *args):
        """
        SetReversedEdges(StdMeshers_Reversible1D self, std::vector< int,std::allocator< int > > const & ids)

        :type ids: OCC.wrapper.StdMeshers.vector

        """
        return _StdMeshers.StdMeshers_Reversible1D_SetReversedEdges(self, *args)


    def SetObjectEntry(self, *args):
        """
        SetObjectEntry(StdMeshers_Reversible1D self, char const * entry)

        :type entry: const char *

        """
        return _StdMeshers.StdMeshers_Reversible1D_SetObjectEntry(self, *args)


    def GetObjectEntry(self, *args):
        """
        GetObjectEntry(StdMeshers_Reversible1D self) -> char const *

        :rtype: const char *

        """
        return _StdMeshers.StdMeshers_Reversible1D_GetObjectEntry(self, *args)


    def GetReversedEdges(self, *args):
        """
        :rtype: OCC.wrapper.StdMeshers.vector

        """
        res = _StdMeshers.StdMeshers_Reversible1D_GetReversedEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_Reversible1D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_Reversible1D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_Reversible1D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_Reversible1D_LoadFrom(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Reversible1D
StdMeshers_Reversible1D_swigregister = _StdMeshers.StdMeshers_Reversible1D_swigregister
StdMeshers_Reversible1D_swigregister(StdMeshers_Reversible1D)

class StdMeshers_ViscousLayers(SMESH.SMESH_Hypothesis):
    """rief Hypothesis defining parameters of viscous layers"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SURF_OFFSET_SMOOTH = _StdMeshers.StdMeshers_ViscousLayers_SURF_OFFSET_SMOOTH
    FACE_OFFSET = _StdMeshers.StdMeshers_ViscousLayers_FACE_OFFSET
    NODE_OFFSET = _StdMeshers.StdMeshers_ViscousLayers_NODE_OFFSET

    def __init__(self, *args):
        """
        __init__(StdMeshers_ViscousLayers self, int hypId, SMESH_Gen gen) -> StdMeshers_ViscousLayers

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_ViscousLayers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetBndShapes(self, *args):
        """
        SetBndShapes(StdMeshers_ViscousLayers self, std::vector< int,std::allocator< int > > const & shapeIds, bool toIgnore)

        :type shapeIds: OCC.wrapper.StdMeshers.vector
        :type toIgnore: bool

        """
        return _StdMeshers.StdMeshers_ViscousLayers_SetBndShapes(self, *args)


    def GetBndShapes(self, *args):
        """
        GetBndShapes(StdMeshers_ViscousLayers self) -> std::vector< int,std::allocator< int > >

        :rtype: OCC.wrapper.StdMeshers.vector

        """
        return _StdMeshers.StdMeshers_ViscousLayers_GetBndShapes(self, *args)


    def IsToIgnoreShapes(self, *args):
        """
        IsToIgnoreShapes(StdMeshers_ViscousLayers self) -> bool

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ViscousLayers_IsToIgnoreShapes(self, *args)


    def SetTotalThickness(self, *args):
        """
        SetTotalThickness(StdMeshers_ViscousLayers self, double thickness)

        :type thickness: double

        """
        return _StdMeshers.StdMeshers_ViscousLayers_SetTotalThickness(self, *args)


    def GetTotalThickness(self, *args):
        """
        GetTotalThickness(StdMeshers_ViscousLayers self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_ViscousLayers_GetTotalThickness(self, *args)


    def SetNumberLayers(self, *args):
        """
        SetNumberLayers(StdMeshers_ViscousLayers self, int nb)

        :type nb: int

        """
        return _StdMeshers.StdMeshers_ViscousLayers_SetNumberLayers(self, *args)


    def GetNumberLayers(self, *args):
        """
        GetNumberLayers(StdMeshers_ViscousLayers self) -> int

        :rtype: int

        """
        return _StdMeshers.StdMeshers_ViscousLayers_GetNumberLayers(self, *args)


    def SetStretchFactor(self, *args):
        """
        SetStretchFactor(StdMeshers_ViscousLayers self, double factor)

        :type factor: double

        """
        return _StdMeshers.StdMeshers_ViscousLayers_SetStretchFactor(self, *args)


    def GetStretchFactor(self, *args):
        """
        GetStretchFactor(StdMeshers_ViscousLayers self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_ViscousLayers_GetStretchFactor(self, *args)


    def SetMethod(self, *args):
        """
        SetMethod(StdMeshers_ViscousLayers self, StdMeshers_ViscousLayers::ExtrusionMethod how)

        :type how: ExtrusionMethod

        """
        return _StdMeshers.StdMeshers_ViscousLayers_SetMethod(self, *args)


    def GetMethod(self, *args):
        """
        GetMethod(StdMeshers_ViscousLayers self) -> StdMeshers_ViscousLayers::ExtrusionMethod

        :rtype: ExtrusionMethod

        """
        return _StdMeshers.StdMeshers_ViscousLayers_GetMethod(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_ViscousLayers self, SMESH_Mesh theMesh, TopoDS_Shape theShape, bool const toMakeN2NMap=False) -> shared_ptr_SMESH_ProxyMesh

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toMakeN2NMap: const bool
        :rtype: Ptr

        """
        return _StdMeshers.StdMeshers_ViscousLayers_Compute(self, *args)


    def CheckHypothesis(*args):
        """
        CheckHypothesis(SMESH_Mesh aMesh, TopoDS_Shape aShape) -> shared_ptr_SMESH_ComputeError

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

        """
        return _StdMeshers.StdMeshers_ViscousLayers_CheckHypothesis(*args)

    CheckHypothesis = staticmethod(CheckHypothesis)

    def IsShapeWithLayers(self, *args):
        """
        IsShapeWithLayers(StdMeshers_ViscousLayers self, int shapeIndex) -> bool

        :type shapeIndex: int
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ViscousLayers_IsShapeWithLayers(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_ViscousLayers self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_ViscousLayers_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_ViscousLayers self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_ViscousLayers_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_ViscousLayers self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize my parameter values by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ViscousLayers_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_ViscousLayers self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ViscousLayers_SetParametersByDefaults(self, *args)


    def GetHypType(*args):
        """
        GetHypType() -> char const *

        :rtype: const char *

        """
        return _StdMeshers.StdMeshers_ViscousLayers_GetHypType(*args)

    GetHypType = staticmethod(GetHypType)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_ViscousLayers
StdMeshers_ViscousLayers_swigregister = _StdMeshers.StdMeshers_ViscousLayers_swigregister
StdMeshers_ViscousLayers_swigregister(StdMeshers_ViscousLayers)

def StdMeshers_ViscousLayers_CheckHypothesis(*args):
    """
    StdMeshers_ViscousLayers_CheckHypothesis(SMESH_Mesh aMesh, TopoDS_Shape aShape) -> shared_ptr_SMESH_ComputeError

    :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aStatus: Hypothesis_Status
    :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

    """
    return _StdMeshers.StdMeshers_ViscousLayers_CheckHypothesis(*args)

def StdMeshers_ViscousLayers_GetHypType(*args):
    """
    StdMeshers_ViscousLayers_GetHypType() -> char const *

    :rtype: const char *

    """
    return _StdMeshers.StdMeshers_ViscousLayers_GetHypType(*args)

class StdMeshers_LayerDistribution(SMESH.SMESH_Hypothesis):
    """
    This hypothesis is used by "Radial prism" algorithm.
    It specifies 1D hypothesis defining distribution of segments between the internal 
    and the external surfaces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_LayerDistribution self, int hypId, SMESH_Gen gen) -> StdMeshers_LayerDistribution

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_LayerDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetLayerDistribution(self, *args):
        """
        SetLayerDistribution(StdMeshers_LayerDistribution self, SMESH_Hypothesis hyp1D)

        rief Sets  1D hypothesis specifying distribution of layers
        \param hyp1D - 1D hypothesis

        :type hyp1D: OCC.wrapper.SMESH.SMESH_Hypothesis

        """
        return _StdMeshers.StdMeshers_LayerDistribution_SetLayerDistribution(self, *args)


    def GetLayerDistribution(self, *args):
        """
        GetLayerDistribution(StdMeshers_LayerDistribution self) -> SMESH_Hypothesis

        rief Returns 1D hypothesis specifying distribution of layers
        etval SMESH::SMESH_Hypothesis_ptr - 1D hypothesis

        :rtype: OCC.wrapper.SMESH.SMESH_Hypothesis

        """
        return _StdMeshers.StdMeshers_LayerDistribution_GetLayerDistribution(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_LayerDistribution self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_LayerDistribution_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_LayerDistribution self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_LayerDistribution_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_LayerDistribution self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize parameters by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Implementation does noting

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_LayerDistribution_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_LayerDistribution self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_LayerDistribution_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_LayerDistribution
StdMeshers_LayerDistribution_swigregister = _StdMeshers.StdMeshers_LayerDistribution_swigregister
StdMeshers_LayerDistribution_swigregister(StdMeshers_LayerDistribution)

class StdMeshers_NumberOfSegments(StdMeshers_Reversible1D):
    """
    rief This class represents hypothesis for 1d algorithm

    It provides parameters for subdivision an edge by various
    distribution types, considering the given number of resulting segments
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DT_Regular = _StdMeshers.StdMeshers_NumberOfSegments_DT_Regular
    DT_Scale = _StdMeshers.StdMeshers_NumberOfSegments_DT_Scale
    DT_TabFunc = _StdMeshers.StdMeshers_NumberOfSegments_DT_TabFunc
    DT_ExprFunc = _StdMeshers.StdMeshers_NumberOfSegments_DT_ExprFunc

    def __init__(self, *args):
        """
        __init__(StdMeshers_NumberOfSegments self, int hypId, SMESH_Gen gen) -> StdMeshers_NumberOfSegments

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_NumberOfSegments(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BuildDistributionExpr(self, *args):
        """
        :type : const char *
        :type : int
        :type : int
        :rtype: OCC.wrapper.StdMeshers.vector

        """
        res = _StdMeshers.StdMeshers_NumberOfSegments_BuildDistributionExpr(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BuildDistributionTab(self, *args):
        """
        :type : OCC.wrapper.StdMeshers.vector
        :type : int
        :type : int
        :rtype: OCC.wrapper.StdMeshers.vector

        """
        res = _StdMeshers.StdMeshers_NumberOfSegments_BuildDistributionTab(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetNumberOfSegments(self, *args):
        """
        SetNumberOfSegments(StdMeshers_NumberOfSegments self, int segmentsNumber)

        rief Set the number of segments
        \param segmentsNumber - must be greater than zero

        :type segmentsNumber: int

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SetNumberOfSegments(self, *args)


    def GetNumberOfSegments(self, *args):
        """
        GetNumberOfSegments(StdMeshers_NumberOfSegments self) -> int

        rief Get the number of segments

        :rtype: int

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_GetNumberOfSegments(self, *args)


    def SetDistrType(self, *args):
        """
        SetDistrType(StdMeshers_NumberOfSegments self, StdMeshers_NumberOfSegments::DistrType typ)

        rief Set distribution type

        :type typ: DistrType

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SetDistrType(self, *args)


    def GetDistrType(self, *args):
        """
        GetDistrType(StdMeshers_NumberOfSegments self) -> StdMeshers_NumberOfSegments::DistrType

        rief Get distribution type

        :rtype: DistrType

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_GetDistrType(self, *args)


    def SetScaleFactor(self, *args):
        """
        SetScaleFactor(StdMeshers_NumberOfSegments self, double scaleFactor)

        rief Set scale factor for scale distribution
        \param scaleFactor - positive value different from 1

        Throws SALOME_Exception if distribution type is not DT_Scale,
        or scaleFactor is not a positive value different from 1

        :type scaleFactor: double

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SetScaleFactor(self, *args)


    def GetScaleFactor(self, *args):
        """
        GetScaleFactor(StdMeshers_NumberOfSegments self) -> double

        rief Get scale factor for scale distribution

        Throws SALOME_Exception if distribution type is not DT_Scale

        :rtype: double

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_GetScaleFactor(self, *args)


    def SetTableFunction(self, *args):
        """
        SetTableFunction(StdMeshers_NumberOfSegments self, std::vector< double,std::allocator< double > > const & table)

        rief Set table function for distribution DT_TabFunc
        \param table - this vector contains the pairs (parameter, value)
        following each by other, so the number of elements in the vector
        must be even. The parameters must be in range [0,1] and sorted in
        increase order. The values of function must be positive.

        Throws SALOME_Exception if distribution type is not DT_TabFunc

        :type table: OCC.wrapper.StdMeshers.vector

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SetTableFunction(self, *args)


    def GetTableFunction(self, *args):
        """
        \brief Get table function for distribution DT_TabFunc

        Throws SALOME_Exception if distribution type is not DT_TabFunc

        :rtype: OCC.wrapper.StdMeshers.vector

        """
        res = _StdMeshers.StdMeshers_NumberOfSegments_GetTableFunction(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetExpressionFunction(self, *args):
        """
        SetExpressionFunction(StdMeshers_NumberOfSegments self, char const * expr)

        rief Set expression function for distribution DT_ExprFunc
        \param expr - string containing the expression of the function
        f(t), e.g. "sin(t)"

        Throws SALOME_Exception if distribution type is not DT_ExprFunc

        :type expr: const char *

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SetExpressionFunction(self, *args)


    def GetExpressionFunction(self, *args):
        """
        GetExpressionFunction(StdMeshers_NumberOfSegments self) -> char const *

        rief Get expression function for distribution DT_ExprFunc

        Throws SALOME_Exception if distribution type is not DT_ExprFunc

        :rtype: const char *

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_GetExpressionFunction(self, *args)


    def CheckExpressionFunction(*args):
        """
        CheckExpressionFunction(std::string const & expr, int const convMode) -> std::string

        rief Checks validity of  the expression of the function f(t), e.g. "sin(t)".
        In case of validity returns a cleaned expression
        \param convMode - 0 for "Exponent mode", 1 for "Cut negative mode"

        :type expr: string
        :type convMode: const int
        :rtype: string

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_CheckExpressionFunction(*args)

    CheckExpressionFunction = staticmethod(CheckExpressionFunction)

    def SetConversionMode(self, *args):
        """
        SetConversionMode(StdMeshers_NumberOfSegments self, int conv)

        rief Set conversion mode. When it is 0, it means "exponent mode":
        the function of distribution of density is used as an exponent of 10, i,e, 10^f(t).
        When it is 1, it means "cut negative mode". The function of distribution is used as
        F(t), where F(t0)=f(t0), if f(t0)>=0, otherwise F(t0) = 0.
        This mode is sensible only when function distribution is used (DT_TabFunc or DT_ExprFunc)

        Throws SALOME_Exception if distribution type is not functional

        :type conv: int

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SetConversionMode(self, *args)


    def ConversionMode(self, *args):
        """
        ConversionMode(StdMeshers_NumberOfSegments self) -> int

        rief Returns conversion mode

        Throws SALOME_Exception if distribution type is not functional

        :rtype: int

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_ConversionMode(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_NumberOfSegments self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize number of segments by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_NumberOfSegments self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SetParametersByDefaults(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_NumberOfSegments self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_NumberOfSegments self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_NumberOfSegments_LoadFrom(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_NumberOfSegments
StdMeshers_NumberOfSegments_swigregister = _StdMeshers.StdMeshers_NumberOfSegments_swigregister
StdMeshers_NumberOfSegments_swigregister(StdMeshers_NumberOfSegments)

def StdMeshers_NumberOfSegments_CheckExpressionFunction(*args):
    """
    StdMeshers_NumberOfSegments_CheckExpressionFunction(std::string const & expr, int const convMode) -> std::string

    rief Checks validity of  the expression of the function f(t), e.g. "sin(t)".
    In case of validity returns a cleaned expression
    \param convMode - 0 for "Exponent mode", 1 for "Cut negative mode"

    :type expr: string
    :type convMode: const int
    :rtype: string

    """
    return _StdMeshers.StdMeshers_NumberOfSegments_CheckExpressionFunction(*args)

class StdMeshers_SegmentAroundVertex_0D(SMESH.SMESH_0D_Algo):
    """
    rief Algorithm existing in order just to enable assignation of
    StdMeshers_SegmentLengthAroundVertex hypothesis
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_SegmentAroundVertex_0D self, int hypId, SMESH_Gen gen) -> StdMeshers_SegmentAroundVertex_0D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_SegmentAroundVertex_0D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_SegmentAroundVertex_0D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_SegmentAroundVertex_0D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_SegmentAroundVertex_0D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_SegmentAroundVertex_0D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_SegmentAroundVertex_0D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_SegmentAroundVertex_0D_Evaluate(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_SegmentAroundVertex_0D
StdMeshers_SegmentAroundVertex_0D_swigregister = _StdMeshers.StdMeshers_SegmentAroundVertex_0D_swigregister
StdMeshers_SegmentAroundVertex_0D_swigregister(StdMeshers_SegmentAroundVertex_0D)

class StdMeshers_Projection_3D(SMESH.SMESH_3D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Projection_3D self, int hypId, SMESH_Gen gen) -> StdMeshers_Projection_3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Projection_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Projection_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_3D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Projection_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_3D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Projection_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_3D_Evaluate(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_Projection_3D self, SMESH_subMesh whenSetToSubMesh)

        rief Sets a default event listener to submesh of the source shape
        \param whenSetToSubMesh - submesh where algo is set

        Arranges that CLEAN event is translated from source submesh to
        the whenSetToSubMesh submesh.

        :type whenSetToSubMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Projection_3D_SetEventListener(self, *args)


    def IsApplicableToShape(self, *args):
        """
        IsApplicableToShape(StdMeshers_Projection_3D self, TopoDS_Shape shape, bool toCheckAll) -> bool

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_3D_IsApplicableToShape(self, *args)


    def IsApplicable(*args):
        """
        IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_3D_IsApplicable(*args)

    IsApplicable = staticmethod(IsApplicable)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Projection_3D
StdMeshers_Projection_3D_swigregister = _StdMeshers.StdMeshers_Projection_3D_swigregister
StdMeshers_Projection_3D_swigregister(StdMeshers_Projection_3D)

def StdMeshers_Projection_3D_IsApplicable(*args):
    """
    StdMeshers_Projection_3D_IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type toCheckAll: bool
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_Projection_3D_IsApplicable(*args)

class StdMeshers_HexaFromSkin_3D(SMESH.SMESH_3D_Algo):
    """rief Algorithm generating hexahedral mesh from 2D skin of block"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_HexaFromSkin_3D self, int hypId, SMESH_Gen gen) -> StdMeshers_HexaFromSkin_3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_HexaFromSkin_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_HexaFromSkin_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_HexaFromSkin_3D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_HexaFromSkin_3D self, SMESH_Mesh aMesh, SMESH_MesherHelper aHelper) -> bool
        Compute(StdMeshers_HexaFromSkin_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_HexaFromSkin_3D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_HexaFromSkin_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_HexaFromSkin_3D_Evaluate(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_HexaFromSkin_3D
StdMeshers_HexaFromSkin_3D_swigregister = _StdMeshers.StdMeshers_HexaFromSkin_3D_swigregister
StdMeshers_HexaFromSkin_3D_swigregister(StdMeshers_HexaFromSkin_3D)

class StdMeshers_Projection_2D(SMESH.SMESH_2D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Projection_2D self, int hypId, SMESH_Gen gen) -> StdMeshers_Projection_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Projection_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Projection_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Projection_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Projection_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_2D_Evaluate(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_Projection_2D self, SMESH_subMesh whenSetToSubMesh)

        rief Sets a default event listener to submesh of the source face
        \param whenSetToSubMesh - submesh where algo is set

        After being set, event listener is notified on each event of a submesh.
        This method is called when a submesh gets HYP_OK algo_state.
        Arranges that CLEAN event is translated from source submesh to
        the whenSetToSubMesh submesh.

        :type whenSetToSubMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Projection_2D_SetEventListener(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Projection_2D
StdMeshers_Projection_2D_swigregister = _StdMeshers.StdMeshers_Projection_2D_swigregister
StdMeshers_Projection_2D_swigregister(StdMeshers_Projection_2D)

class StdMeshers_AutomaticLength(SMESH.SMESH_Hypothesis):
    """
    rief 1D Hypothesis to compute segment length free of thinking

    It computes segment length basing on max shape size to shortest edge length ratio:
    S = S0 * f(L/Lmin) where f(x) = 1 + (2/Pi * 7 * atan(x/5) )
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_AutomaticLength self, int hypId, SMESH_Gen gen) -> StdMeshers_AutomaticLength

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_AutomaticLength(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLength(self, *args):
        """
        GetLength(StdMeshers_AutomaticLength self, SMESH_Mesh aMesh, TopoDS_Shape anEdge) -> double
        GetLength(StdMeshers_AutomaticLength self, SMESH_Mesh aMesh, double const edgeLength) -> double

        rief Computes segment length for an edge of given length

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type edgeLength: const double
        :rtype: double

        """
        return _StdMeshers.StdMeshers_AutomaticLength_GetLength(self, *args)


    def SetFineness(self, *args):
        """
        SetFineness(StdMeshers_AutomaticLength self, double theFineness)

        rief Set Fineness
        \param theFineness - The Fineness value [0.0-1.0],
        0 - coarse mesh
        1 - fine mesh

        Raise if theFineness is out of range
        The "Initial Number of Elements on the Shortest Edge" (S0)
        is divided by (0.5 + 4.5 x theFineness)

        :type theFineness: double

        """
        return _StdMeshers.StdMeshers_AutomaticLength_SetFineness(self, *args)


    def GetFineness(self, *args):
        """
        GetFineness(StdMeshers_AutomaticLength self) -> double

        rief Return mesh Fineness
        etval double - Fineness value [0.0-1.0]

        :rtype: double

        """
        return _StdMeshers.StdMeshers_AutomaticLength_GetFineness(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_AutomaticLength self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_AutomaticLength_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_AutomaticLength self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_AutomaticLength_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_AutomaticLength self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize Fineness by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_AutomaticLength_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_AutomaticLength self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_AutomaticLength_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_AutomaticLength
StdMeshers_AutomaticLength_swigregister = _StdMeshers.StdMeshers_AutomaticLength_swigregister
StdMeshers_AutomaticLength_swigregister(StdMeshers_AutomaticLength)

class StdMeshers_ViscousLayers2D(StdMeshers_ViscousLayers):
    """rief Hypothesis defining parameters of viscous layers"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_ViscousLayers2D self, int hypId, SMESH_Gen gen) -> StdMeshers_ViscousLayers2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_ViscousLayers2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Compute(*args):
        """
        Compute(SMESH_Mesh theMesh, TopoDS_Face theShape) -> shared_ptr_SMESH_ProxyMesh

        rief Computes temporary 2D mesh to be used by 2D algorithm.
        Return SMESH_ProxyMesh for the given FACE, or NULL in case of error

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: Ptr

        """
        return _StdMeshers.StdMeshers_ViscousLayers2D_Compute(*args)

    Compute = staticmethod(Compute)

    def RestoreListeners(self, *args):
        """
        RestoreListeners(StdMeshers_ViscousLayers2D self)

        rief At study restoration, restore event listeners used to clear an inferior
        dim sub-mesh modified by viscous layers


        """
        return _StdMeshers.StdMeshers_ViscousLayers2D_RestoreListeners(self, *args)


    def CheckHypothesis(*args):
        """
        CheckHypothesis(SMESH_Mesh aMesh, TopoDS_Shape aShape) -> shared_ptr_SMESH_ComputeError

        rief Checks compatibility of assigned StdMeshers_ViscousLayers2D hypotheses

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

        """
        return _StdMeshers.StdMeshers_ViscousLayers2D_CheckHypothesis(*args)

    CheckHypothesis = staticmethod(CheckHypothesis)

    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_ViscousLayers2D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize my parameter values by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Just return false as this hypothesis does not have parameters values

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ViscousLayers2D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_ViscousLayers2D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ViscousLayers2D_SetParametersByDefaults(self, *args)


    def GetHypType(*args):
        """
        GetHypType() -> char const *

        :rtype: const char *

        """
        return _StdMeshers.StdMeshers_ViscousLayers2D_GetHypType(*args)

    GetHypType = staticmethod(GetHypType)

    def SetProxyMeshOfEdge(*args):
        """
        SetProxyMeshOfEdge(StdMeshers_FaceSide edgeNodes)

        :type edgeNodes: OCC.wrapper.StdMeshers.StdMeshers_FaceSide

        """
        return _StdMeshers.StdMeshers_ViscousLayers2D_SetProxyMeshOfEdge(*args)

    SetProxyMeshOfEdge = staticmethod(SetProxyMeshOfEdge)

    def HasProxyMesh(*args):
        """
        HasProxyMesh(TopoDS_Face face, SMESH_Mesh theMesh) -> bool

        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ViscousLayers2D_HasProxyMesh(*args)

    HasProxyMesh = staticmethod(HasProxyMesh)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_ViscousLayers2D
StdMeshers_ViscousLayers2D_swigregister = _StdMeshers.StdMeshers_ViscousLayers2D_swigregister
StdMeshers_ViscousLayers2D_swigregister(StdMeshers_ViscousLayers2D)

def StdMeshers_ViscousLayers2D_Compute(*args):
    """
    StdMeshers_ViscousLayers2D_Compute(SMESH_Mesh theMesh, TopoDS_Face theShape) -> shared_ptr_SMESH_ProxyMesh

    rief Computes temporary 2D mesh to be used by 2D algorithm.
    Return SMESH_ProxyMesh for the given FACE, or NULL in case of error

    :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type theShape: OCC.wrapper.TopoDS.TopoDS_Face
    :rtype: Ptr

    """
    return _StdMeshers.StdMeshers_ViscousLayers2D_Compute(*args)

def StdMeshers_ViscousLayers2D_CheckHypothesis(*args):
    """
    StdMeshers_ViscousLayers2D_CheckHypothesis(SMESH_Mesh aMesh, TopoDS_Shape aShape) -> shared_ptr_SMESH_ComputeError

    rief Checks compatibility of assigned StdMeshers_ViscousLayers2D hypotheses

    :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aStatus: Hypothesis_Status
    :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

    """
    return _StdMeshers.StdMeshers_ViscousLayers2D_CheckHypothesis(*args)

def StdMeshers_ViscousLayers2D_GetHypType(*args):
    """
    StdMeshers_ViscousLayers2D_GetHypType() -> char const *

    :rtype: const char *

    """
    return _StdMeshers.StdMeshers_ViscousLayers2D_GetHypType(*args)

def StdMeshers_ViscousLayers2D_SetProxyMeshOfEdge(*args):
    """
    StdMeshers_ViscousLayers2D_SetProxyMeshOfEdge(StdMeshers_FaceSide edgeNodes)

    :type edgeNodes: OCC.wrapper.StdMeshers.StdMeshers_FaceSide

    """
    return _StdMeshers.StdMeshers_ViscousLayers2D_SetProxyMeshOfEdge(*args)

def StdMeshers_ViscousLayers2D_HasProxyMesh(*args):
    """
    StdMeshers_ViscousLayers2D_HasProxyMesh(TopoDS_Face face, SMESH_Mesh theMesh) -> bool

    :type face: OCC.wrapper.TopoDS.TopoDS_Face
    :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_ViscousLayers2D_HasProxyMesh(*args)

class StdMeshers_ProjectionSource3D(SMESH.SMESH_Hypothesis):
    """
    This hypothesis specifies a meshed shell or solid to take a mesh pattern from
    and optionally association of vertices between the source shape and a
    target one (where a hipothesis is assigned to)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_ProjectionSource3D self, int hypId, SMESH_Gen gen) -> StdMeshers_ProjectionSource3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_ProjectionSource3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetSource3DShape(self, *args):
        """
        SetSource3DShape(StdMeshers_ProjectionSource3D self, TopoDS_Shape shape)

        Sets a source <shape> to take a mesh pattern from

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_SetSource3DShape(self, *args)


    def GetSource3DShape(self, *args):
        """
        GetSource3DShape(StdMeshers_ProjectionSource3D self) -> TopoDS_Shape

        Returns the source shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_GetSource3DShape(self, *args)


    def SetSourceMesh(self, *args):
        """
        SetSourceMesh(StdMeshers_ProjectionSource3D self, SMESH_Mesh mesh)

        Sets source <mesh> to take a mesh pattern from

        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_SetSourceMesh(self, *args)


    def GetSourceMesh(self, *args):
        """
        GetSourceMesh(StdMeshers_ProjectionSource3D self) -> SMESH_Mesh

        Return source mesh

        :rtype: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_GetSourceMesh(self, *args)


    def SetVertexAssociation(self, *args):
        """
        SetVertexAssociation(StdMeshers_ProjectionSource3D self, TopoDS_Shape sourceVertex1, TopoDS_Shape sourceVertex2, TopoDS_Shape targetVertex1, TopoDS_Shape targetVertex2)

        Sets vertex association between the source shape and the target one.
        This parameter is optional.
        Two vertices must belong to one edge of a shape

        :type sourceVertex1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type sourceVertex2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type targetVertex1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type targetVertex2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_SetVertexAssociation(self, *args)


    def GetSourceVertex(self, *args):
        """
        GetSourceVertex(StdMeshers_ProjectionSource3D self, int i) -> TopoDS_Vertex

        Returns the <i>-th source vertex associated with the <i>-th target vertex.
        Result may be nil if association not set.

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_GetSourceVertex(self, *args)


    def GetTargetVertex(self, *args):
        """
        GetTargetVertex(StdMeshers_ProjectionSource3D self, int i) -> TopoDS_Vertex

        Returns the <i>-th target vertex associated with the <i>-th source vertex.
        Result may be nil if association not set.

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_GetTargetVertex(self, *args)


    def HasVertexAssociation(self, *args):
        """
        HasVertexAssociation(StdMeshers_ProjectionSource3D self) -> bool

        rief Test if vertex association defined
        etval bool - test result

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_HasVertexAssociation(self, *args)


    def GetStoreParams(self, *args):
        """
        GetStoreParams(StdMeshers_ProjectionSource3D self, TopoDS_Shape s1, TopoDS_Shape s2, TopoDS_Shape s3, TopoDS_Shape s4, TopoDS_Shape s5)

        rief Return all parameters

        :type s1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s3: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s4: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s5: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_GetStoreParams(self, *args)


    def RestoreParams(self, *args):
        """
        RestoreParams(StdMeshers_ProjectionSource3D self, TopoDS_Shape s1, TopoDS_Shape s2, TopoDS_Shape s3, TopoDS_Shape s4, TopoDS_Shape s5, SMESH_Mesh mesh)

        rief Set all parameters without notifying on modification

        :type s1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s3: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s4: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s5: OCC.wrapper.TopoDS.TopoDS_Shape
        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_RestoreParams(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_ProjectionSource3D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_ProjectionSource3D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_ProjectionSource3D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize parameters by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Implementation does noting

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_ProjectionSource3D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource3D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_ProjectionSource3D
StdMeshers_ProjectionSource3D_swigregister = _StdMeshers.StdMeshers_ProjectionSource3D_swigregister
StdMeshers_ProjectionSource3D_swigregister(StdMeshers_ProjectionSource3D)

class StdMeshers_NotConformAllowed(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_NotConformAllowed self, int hypId, SMESH_Gen gen) -> StdMeshers_NotConformAllowed

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_NotConformAllowed(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_NotConformAllowed self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_NotConformAllowed_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_NotConformAllowed self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_NotConformAllowed_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_NotConformAllowed self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize my parameter values by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Just return false as this hypothesis does not have parameters values

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_NotConformAllowed_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_NotConformAllowed self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_NotConformAllowed_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_NotConformAllowed
StdMeshers_NotConformAllowed_swigregister = _StdMeshers.StdMeshers_NotConformAllowed_swigregister
StdMeshers_NotConformAllowed_swigregister(StdMeshers_NotConformAllowed)

class StdMeshers_PropagOfDistribution(StdMeshers_Propagation):
    """rief Propagation Of Distribution hypothesis"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_PropagOfDistribution self, int hypId, SMESH_Gen gen) -> StdMeshers_PropagOfDistribution

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_PropagOfDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetName(*args):
        """
        GetName() -> std::string

        :rtype: string

        """
        return _StdMeshers.StdMeshers_PropagOfDistribution_GetName(*args)

    GetName = staticmethod(GetName)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_PropagOfDistribution
StdMeshers_PropagOfDistribution_swigregister = _StdMeshers.StdMeshers_PropagOfDistribution_swigregister
StdMeshers_PropagOfDistribution_swigregister(StdMeshers_PropagOfDistribution)

def StdMeshers_PropagOfDistribution_GetName(*args):
    """
    StdMeshers_PropagOfDistribution_GetName() -> std::string

    :rtype: string

    """
    return _StdMeshers.StdMeshers_PropagOfDistribution_GetName(*args)

class StdMeshers_LengthFromEdges(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_LengthFromEdges self, int hypId, SMESH_Gen gen) -> StdMeshers_LengthFromEdges

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_LengthFromEdges(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetMode(self, *args):
        """
        SetMode(StdMeshers_LengthFromEdges self, int mode)

        :type mode: int

        """
        return _StdMeshers.StdMeshers_LengthFromEdges_SetMode(self, *args)


    def GetMode(self, *args):
        """
        GetMode(StdMeshers_LengthFromEdges self) -> int

        :rtype: int

        """
        return _StdMeshers.StdMeshers_LengthFromEdges_GetMode(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_LengthFromEdges self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_LengthFromEdges_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_LengthFromEdges self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_LengthFromEdges_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_LengthFromEdges self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize my parameter values by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Just return false as this hypothesis does not have parameters values

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_LengthFromEdges_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_LengthFromEdges self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_LengthFromEdges_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_LengthFromEdges
StdMeshers_LengthFromEdges_swigregister = _StdMeshers.StdMeshers_LengthFromEdges_swigregister
StdMeshers_LengthFromEdges_swigregister(StdMeshers_LengthFromEdges)

class StdMeshers_FaceSide(object):
    """
    rief Represents a side of a quasi quadrilateral face.
    It can be composed of several edges. Gives access to geometry and 1D mesh of a side.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ALL_EDGES = _StdMeshers.StdMeshers_FaceSide_ALL_EDGES
    LAST_EDGE = _StdMeshers.StdMeshers_FaceSide_LAST_EDGE

    def __init__(self, *args):
        """
        __init__(StdMeshers_FaceSide self, TopoDS_Face theFace, TopoDS_Edge theEdge, SMESH_Mesh theMesh, bool const theIsForward, bool const theIgnoreMediumNodes, SMESH_MesherHelper theFaceHelper=None, shared_ptr_SMESH_ProxyMesh theProxyMesh) -> StdMeshers_FaceSide
        __init__(StdMeshers_FaceSide self, TopoDS_Face theFace, std::list< TopoDS_Edge,std::allocator< TopoDS_Edge > > const & theEdges, SMESH_Mesh theMesh, bool const theIsForward, bool const theIgnoreMediumNodes, SMESH_MesherHelper theFaceHelper=None, shared_ptr_SMESH_ProxyMesh theProxyMesh) -> StdMeshers_FaceSide
        __init__(StdMeshers_FaceSide self, StdMeshers_FaceSide theSide, SMDS_MeshNode theNode, gp_Pnt2d thePnt2d1, gp_Pnt2d thePnt2d2=None, Handle_Geom2d_Curve theC2d=0, double const theUFirst=0., double const theULast=1.) -> StdMeshers_FaceSide
        __init__(StdMeshers_FaceSide self, UVPtStructVec & theSideNodes, TopoDS_Face theFace, TopoDS_Edge theEdge, SMESH_Mesh theMesh=None) -> StdMeshers_FaceSide

        rief Create a side from an UVPtStructVec

        :type theSideNodes: UVPtStructVec
        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type theEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh

        """
        this = _StdMeshers.new_StdMeshers_FaceSide(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def New(*args):
        """
        New(TopoDS_Face Face, TopoDS_Edge Edge, SMESH_Mesh Mesh, bool const IsForward, bool const IgnoreMediumNodes, SMESH_MesherHelper FaceHelper=None, shared_ptr_SMESH_ProxyMesh ProxyMesh) -> shared_ptr_StdMeshers_FaceSide
        New(TopoDS_Face Face, std::list< TopoDS_Edge,std::allocator< TopoDS_Edge > > const & Edges, SMESH_Mesh Mesh, bool const IsForward, bool const IgnoreMediumNodes, SMESH_MesherHelper FaceHelper=None, shared_ptr_SMESH_ProxyMesh ProxyMesh) -> shared_ptr_StdMeshers_FaceSide
        New(StdMeshers_FaceSide Side, SMDS_MeshNode Node, gp_Pnt2d Pnt2d1, gp_Pnt2d Pnt2d2=None, Handle_Geom2d_Curve C2d=0, double const UFirst=0., double const ULast=1.) -> shared_ptr_StdMeshers_FaceSide
        New(UVPtStructVec & theSideNodes, TopoDS_Face theFace, TopoDS_Edge theEdge, SMESH_Mesh theMesh=None) -> shared_ptr_StdMeshers_FaceSide

        :type theSideNodes: UVPtStructVec
        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type theEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: OCC.wrapper.StdMeshers.StdMeshers_FaceSidePtr

        """
        return _StdMeshers.StdMeshers_FaceSide_New(*args)

    New = staticmethod(New)

    def GetFaceWires(*args):
        """
        GetFaceWires(TopoDS_Face theFace, SMESH_Mesh theMesh, bool const theIgnoreMediumNodes, shared_ptr_SMESH_ComputeError theError, SMESH_MesherHelper theFaceHelper=None, shared_ptr_SMESH_ProxyMesh theProxyMesh, bool const theCheckVertexNodes=True) -> TSideVector

        rief Return wires of a face as StdMeshers_FaceSide's

        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theIgnoreMediumNodes: const bool
        :type theError: TError
        :type theFaceHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :type theProxyMesh: Ptr
        :type theCheckVertexNodes: const bool
        :rtype: TSideVector

        """
        return _StdMeshers.StdMeshers_FaceSide_GetFaceWires(*args)

    GetFaceWires = staticmethod(GetFaceWires)

    def Reverse(self, *args):
        """
        Reverse(StdMeshers_FaceSide self)

        rief Change orientation of side geometry


        """
        return _StdMeshers.StdMeshers_FaceSide_Reverse(self, *args)


    def SetIgnoreMediumNodes(self, *args):
        """
        SetIgnoreMediumNodes(StdMeshers_FaceSide self, bool toIgnore)

        rief Make ignore medium nodes

        :type toIgnore: bool

        """
        return _StdMeshers.StdMeshers_FaceSide_SetIgnoreMediumNodes(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(StdMeshers_FaceSide self, bool const update=False) -> int

        rief Return nb nodes on edges and vertices (+1 to be == GetUVPtStruct().size() ).
        Call it with update == true if mesh of this side can be recomputed
        since creation of this side

        :type update: const bool
        :rtype: int

        """
        return _StdMeshers.StdMeshers_FaceSide_NbPoints(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(StdMeshers_FaceSide self, bool const update=False) -> int

        rief Return nb edges
        Call it with update == true if mesh of this side can be recomputed
        since creation of this side

        :type update: const bool
        :rtype: int

        """
        return _StdMeshers.StdMeshers_FaceSide_NbSegments(self, *args)


    def GetMesh(self, *args):
        """
        GetMesh(StdMeshers_FaceSide self) -> SMESH_Mesh

        rief Return mesh

        :rtype: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_FaceSide_GetMesh(self, *args)


    def MissVertexNode(self, *args):
        """
        MissVertexNode(StdMeshers_FaceSide self) -> bool

        rief Return true if there are vertices without nodes

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_FaceSide_MissVertexNode(self, *args)


    def GetUVPtStruct(self, *args):
        """
        \brief Return detailed data on nodes
        \param isXConst - true if normalized parameter X is constant
        \param constValue - constant parameter value

        Missing nodes are allowed only on internal vertices.
        For a closed side, the 1st point repeats at end

        :type isXConst: bool
        :type constValue: double
        :rtype: UVPtStructVec

        """
        res = _StdMeshers.StdMeshers_FaceSide_GetUVPtStruct(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SimulateUVPtStruct(self, *args):
        """
        \brief Simulates detailed data on nodes
        \param isXConst - true if normalized parameter X is constant
        \param constValue - constant parameter value

        :type nbSeg: int
        :type isXConst: bool
        :type constValue: double
        :rtype: UVPtStructVec

        """
        res = _StdMeshers.StdMeshers_FaceSide_SimulateUVPtStruct(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetOrderedNodes(self, *args):
        """
        GetOrderedNodes(StdMeshers_FaceSide self, int iE) -> std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > >

        rief Return nodes in the order they encounter while walking along
        the whole side or a specified EDGE. For a closed side, the 1st point repeats at end.
        \param iE - index of the EDGE. Default is "all EDGEs".

        :type iE: int
        :rtype: OCC.wrapper.StdMeshers.vector_SMDS_MeshNode

        """
        return _StdMeshers.StdMeshers_FaceSide_GetOrderedNodes(self, *args)


    def GetEdgeNodes(self, *args):
        """
        GetEdgeNodes(StdMeshers_FaceSide self, size_t const i, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodes, bool inlude1stVertex=True, bool inludeLastVertex=True) -> bool

        rief Return nodes of the i-th EDGE.
        Nodes moved to other geometry by MergeNodes() are also returned.
        etval bool - is OK

        :type i: size_t
        :type nodes: OCC.wrapper.StdMeshers.vector_SMDS_MeshNode
        :type inlude1stVertex: bool
        :type inludeLastVertex: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_FaceSide_GetEdgeNodes(self, *args)


    def VertexNode(self, *args):
        """
        VertexNode(StdMeshers_FaceSide self, std::size_t i, bool * isMoved=None) -> SMDS_MeshNode

        rief Return a node from the i-th VERTEX (count starts from zero)
        Nodes moved to other geometry by MergeNodes() are also returned.

        :type i: size_t
        :type isMoved: bool *
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _StdMeshers.StdMeshers_FaceSide_VertexNode(self, *args)


    def Parameter(self, *args):
        """
        Parameter(StdMeshers_FaceSide self, double U, TopoDS_Edge edge) -> double
        Parameter(StdMeshers_FaceSide self, double U) -> double

        rief Return an edge ID and parameter on the edge by a normalized parameter
        \param U - normalized parameter
        etval double - pameter on a curve
        \ warning The returned parameter can be inaccurate if the edge is non-uniformly
        parametrized. Use Value2d() to get a precise point on the edge

        :type U: double
        :type edgeID: int &
        :rtype: double

        """
        return _StdMeshers.StdMeshers_FaceSide_Parameter(self, *args)


    def Value2d(self, *args):
        """
        Value2d(StdMeshers_FaceSide self, double U) -> gp_Pnt2d

        rief Return UV by normalized parameter

        :type U: double
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _StdMeshers.StdMeshers_FaceSide_Value2d(self, *args)


    def Value3d(self, *args):
        """
        Value3d(StdMeshers_FaceSide self, double U) -> gp_Pnt

        rief Return XYZ by normalized parameter

        :type U: double
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _StdMeshers.StdMeshers_FaceSide_Value3d(self, *args)


    def GetCurve2d(self, *args):
        """
        GetCurve2d(StdMeshers_FaceSide self) -> Adaptor2d_Curve2d

        rief Creates a Adaptor2d_Curve2d to be used in SMESH_Block

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        return _StdMeshers.StdMeshers_FaceSide_GetCurve2d(self, *args)


    def GetCurve3d(self, *args):
        """
        GetCurve3d(StdMeshers_FaceSide self) -> BRepAdaptor_CompCurve

        rief Creates a fully functional Adaptor_Curve

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_CompCurve

        """
        return _StdMeshers.StdMeshers_FaceSide_GetCurve3d(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(StdMeshers_FaceSide self) -> int

        rief Return nb of wrapped edges

        :rtype: int

        """
        return _StdMeshers.StdMeshers_FaceSide_NbEdges(self, *args)


    def Edge(self, *args):
        """
        \brief Return i-th edge (count starts from zero)

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _StdMeshers.StdMeshers_FaceSide_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Edges(self, *args):
        """
        \brief Return all edges

        :rtype: OCC.wrapper.StdMeshers.vector_TopoDS_Edge

        """
        res = _StdMeshers.StdMeshers_FaceSide_Edges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Face(self, *args):
        """
        \brief Return the FACE

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _StdMeshers.StdMeshers_FaceSide_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstVertex(self, *args):
        """
        FirstVertex(StdMeshers_FaceSide self, int i=0) -> TopoDS_Vertex

        rief Return 1st vertex of the i-th edge (count starts from zero)

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_FaceSide_FirstVertex(self, *args)


    def LastVertex(self, *args):
        """
        LastVertex(StdMeshers_FaceSide self, int i) -> TopoDS_Vertex

        rief Return last vertex of the i-th edge (count starts from zero)

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_FaceSide_LastVertex(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(StdMeshers_FaceSide self) -> bool

        rief Return \c true if the chain of EDGEs is closed

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_FaceSide_IsClosed(self, *args)


    def Length(self, *args):
        """
        Length(StdMeshers_FaceSide self) -> double

        rief Return side length

        :rtype: double

        """
        return _StdMeshers.StdMeshers_FaceSide_Length(self, *args)


    def EdgeIndex(self, *args):
        """
        EdgeIndex(StdMeshers_FaceSide self, double U) -> int

        rief Return edge index corresponding to normalized parameter

        :type U: double
        :rtype: int

        """
        return _StdMeshers.StdMeshers_FaceSide_EdgeIndex(self, *args)


    def dump(self, *args):
        """
        dump(StdMeshers_FaceSide self, char const * msg=None)

        :type msg: const char *

        """
        return _StdMeshers.StdMeshers_FaceSide_dump(self, *args)


    def EdgeID(self, *args):
        """
        EdgeID(StdMeshers_FaceSide self, int i) -> int

        rief Return ID of i-th wrapped edge (count starts from zero)

        :type i: int
        :rtype: int

        """
        return _StdMeshers.StdMeshers_FaceSide_EdgeID(self, *args)


    def Curve2d(self, *args):
        """
        Curve2d(StdMeshers_FaceSide self, int i) -> Handle_Geom2d_Curve

        rief Return p-curve of i-th wrapped edge (count starts from zero)

        :type i: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _StdMeshers.StdMeshers_FaceSide_Curve2d(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(StdMeshers_FaceSide self, int i) -> double

        rief Return first normalized parameter of the i-th edge (count starts from zero)

        :type i: int
        :rtype: double

        """
        return _StdMeshers.StdMeshers_FaceSide_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(StdMeshers_FaceSide self, int i) -> double

        rief Return last normalized parameter of the i-th edge (count starts from zero)

        :type i: int
        :rtype: double

        """
        return _StdMeshers.StdMeshers_FaceSide_LastParameter(self, *args)


    def FirstU(self, *args):
        """
        FirstU(StdMeshers_FaceSide self, int i) -> double

        rief Return first parameter of the i-th edge (count starts from zero).
        EDGE orientation is taken into account

        :type i: int
        :rtype: double

        """
        return _StdMeshers.StdMeshers_FaceSide_FirstU(self, *args)


    def LastU(self, *args):
        """
        LastU(StdMeshers_FaceSide self, int i) -> double

        rief Return last parameter of the i-th edge (count starts from zero).
        EDGE orientation is taken into account

        :type i: int
        :rtype: double

        """
        return _StdMeshers.StdMeshers_FaceSide_LastU(self, *args)


    def EdgeLength(self, *args):
        """
        EdgeLength(StdMeshers_FaceSide self, int i) -> double

        rief Return length of i-th wrapped edge (count starts from zero)

        :type i: int
        :rtype: double

        """
        return _StdMeshers.StdMeshers_FaceSide_EdgeLength(self, *args)


    def IsReversed(self, *args):
        """
        IsReversed(StdMeshers_FaceSide self, int i) -> bool

        rief Return orientation of i-th wrapped edge (count starts from zero)

        :type i: int
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_FaceSide_IsReversed(self, *args)


    def FaceHelper(self, *args):
        """
        FaceHelper(StdMeshers_FaceSide self) -> SMESH_MesherHelper

        rief Return a helper initialized with the FACE

        :rtype: OCC.wrapper.SMESH.SMESH_MesherHelper

        """
        return _StdMeshers.StdMeshers_FaceSide_FaceHelper(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_FaceSide
StdMeshers_FaceSide_swigregister = _StdMeshers.StdMeshers_FaceSide_swigregister
StdMeshers_FaceSide_swigregister(StdMeshers_FaceSide)

def StdMeshers_FaceSide_New(*args):
    """
    New(TopoDS_Face Face, TopoDS_Edge Edge, SMESH_Mesh Mesh, bool const IsForward, bool const IgnoreMediumNodes, SMESH_MesherHelper FaceHelper=None, shared_ptr_SMESH_ProxyMesh ProxyMesh) -> shared_ptr_StdMeshers_FaceSide
    New(TopoDS_Face Face, std::list< TopoDS_Edge,std::allocator< TopoDS_Edge > > const & Edges, SMESH_Mesh Mesh, bool const IsForward, bool const IgnoreMediumNodes, SMESH_MesherHelper FaceHelper=None, shared_ptr_SMESH_ProxyMesh ProxyMesh) -> shared_ptr_StdMeshers_FaceSide
    New(StdMeshers_FaceSide Side, SMDS_MeshNode Node, gp_Pnt2d Pnt2d1, gp_Pnt2d Pnt2d2=None, Handle_Geom2d_Curve C2d=0, double const UFirst=0., double const ULast=1.) -> shared_ptr_StdMeshers_FaceSide
    StdMeshers_FaceSide_New(UVPtStructVec & theSideNodes, TopoDS_Face theFace, TopoDS_Edge theEdge, SMESH_Mesh theMesh=None) -> shared_ptr_StdMeshers_FaceSide

    :type theSideNodes: UVPtStructVec
    :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type theEdge: OCC.wrapper.TopoDS.TopoDS_Edge
    :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :rtype: OCC.wrapper.StdMeshers.StdMeshers_FaceSidePtr

    """
    return _StdMeshers.StdMeshers_FaceSide_New(*args)

def StdMeshers_FaceSide_GetFaceWires(*args):
    """
    StdMeshers_FaceSide_GetFaceWires(TopoDS_Face theFace, SMESH_Mesh theMesh, bool const theIgnoreMediumNodes, shared_ptr_SMESH_ComputeError theError, SMESH_MesherHelper theFaceHelper=None, shared_ptr_SMESH_ProxyMesh theProxyMesh, bool const theCheckVertexNodes=True) -> TSideVector

    rief Return wires of a face as StdMeshers_FaceSide's

    :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type theIgnoreMediumNodes: const bool
    :type theError: TError
    :type theFaceHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
    :type theProxyMesh: Ptr
    :type theCheckVertexNodes: const bool
    :rtype: TSideVector

    """
    return _StdMeshers.StdMeshers_FaceSide_GetFaceWires(*args)

class StdMeshers_QuadFromMedialAxis_1D2D(StdMeshers_Quadrangle_2D):
    """rief Quadrangle mesher using Medial Axis"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_QuadFromMedialAxis_1D2D self, int hypId, SMESH_Gen gen) -> StdMeshers_QuadFromMedialAxis_1D2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_QuadFromMedialAxis_1D2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_QuadFromMedialAxis_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadFromMedialAxis_1D2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_QuadFromMedialAxis_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadFromMedialAxis_1D2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_QuadFromMedialAxis_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadFromMedialAxis_1D2D_Evaluate(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_QuadFromMedialAxis_1D2D self, SMESH_subMesh subMesh)

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_QuadFromMedialAxis_1D2D_SetEventListener(self, *args)


    def IsApplicableToShape(self, *args):
        """
        IsApplicableToShape(StdMeshers_QuadFromMedialAxis_1D2D self, TopoDS_Shape shape, bool toCheckAll) -> bool

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadFromMedialAxis_1D2D_IsApplicableToShape(self, *args)


    def IsApplicable(*args):
        """
        IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadFromMedialAxis_1D2D_IsApplicable(*args)

    IsApplicable = staticmethod(IsApplicable)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_QuadFromMedialAxis_1D2D
StdMeshers_QuadFromMedialAxis_1D2D_swigregister = _StdMeshers.StdMeshers_QuadFromMedialAxis_1D2D_swigregister
StdMeshers_QuadFromMedialAxis_1D2D_swigregister(StdMeshers_QuadFromMedialAxis_1D2D)

def StdMeshers_QuadFromMedialAxis_1D2D_IsApplicable(*args):
    """
    StdMeshers_QuadFromMedialAxis_1D2D_IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type toCheckAll: bool
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_QuadFromMedialAxis_1D2D_IsApplicable(*args)

class StdMeshers_Arithmetic1D(StdMeshers_Reversible1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Arithmetic1D self, int hypId, SMESH_Gen gen) -> StdMeshers_Arithmetic1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Arithmetic1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetLength(self, *args):
        """
        SetLength(StdMeshers_Arithmetic1D self, double length, bool isStartLength)

        :type length: double
        :type isStartLength: bool

        """
        return _StdMeshers.StdMeshers_Arithmetic1D_SetLength(self, *args)


    def GetLength(self, *args):
        """
        GetLength(StdMeshers_Arithmetic1D self, bool isStartLength) -> double

        :type isStartLength: bool
        :rtype: double

        """
        return _StdMeshers.StdMeshers_Arithmetic1D_GetLength(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_Arithmetic1D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_Arithmetic1D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_Arithmetic1D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_Arithmetic1D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_Arithmetic1D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize start and end length by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Arithmetic1D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_Arithmetic1D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Arithmetic1D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Arithmetic1D
StdMeshers_Arithmetic1D_swigregister = _StdMeshers.StdMeshers_Arithmetic1D_swigregister
StdMeshers_Arithmetic1D_swigregister(StdMeshers_Arithmetic1D)

class StdMeshers_SegmentLengthAroundVertex(SMESH.SMESH_Hypothesis):
    """
    rief This hypothesis specifies length of segments adjacent to the vertex the
    hypothesis is assigned to
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_SegmentLengthAroundVertex self, int hypId, SMESH_Gen gen) -> StdMeshers_SegmentLengthAroundVertex

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_SegmentLengthAroundVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetLength(self, *args):
        """
        SetLength(StdMeshers_SegmentLengthAroundVertex self, double length)

        :type length: double

        """
        return _StdMeshers.StdMeshers_SegmentLengthAroundVertex_SetLength(self, *args)


    def GetLength(self, *args):
        """
        GetLength(StdMeshers_SegmentLengthAroundVertex self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_SegmentLengthAroundVertex_GetLength(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_SegmentLengthAroundVertex self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_SegmentLengthAroundVertex_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_SegmentLengthAroundVertex self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_SegmentLengthAroundVertex_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_SegmentLengthAroundVertex self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize segment length by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_SegmentLengthAroundVertex_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_SegmentLengthAroundVertex self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_SegmentLengthAroundVertex_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_SegmentLengthAroundVertex
StdMeshers_SegmentLengthAroundVertex_swigregister = _StdMeshers.StdMeshers_SegmentLengthAroundVertex_swigregister
StdMeshers_SegmentLengthAroundVertex_swigregister(StdMeshers_SegmentLengthAroundVertex)

class StdMeshers_UseExisting_1D(SMESH.SMESH_1D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_UseExisting_1D self, int hypId, SMESH_Gen gen) -> StdMeshers_UseExisting_1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_UseExisting_1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_UseExisting_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_UseExisting_1D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_UseExisting_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_UseExisting_1D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_UseExisting_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_UseExisting_1D_Evaluate(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_UseExisting_1D
StdMeshers_UseExisting_1D_swigregister = _StdMeshers.StdMeshers_UseExisting_1D_swigregister
StdMeshers_UseExisting_1D_swigregister(StdMeshers_UseExisting_1D)

class StdMeshers_Deflection1D(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Deflection1D self, int hypId, SMESH_Gen gen) -> StdMeshers_Deflection1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Deflection1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetDeflection(self, *args):
        """
        SetDeflection(StdMeshers_Deflection1D self, double value)

        :type value: double

        """
        return _StdMeshers.StdMeshers_Deflection1D_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(StdMeshers_Deflection1D self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_Deflection1D_GetDeflection(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_Deflection1D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_Deflection1D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_Deflection1D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_Deflection1D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_Deflection1D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize deflection value by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Deflection1D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_Deflection1D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Deflection1D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Deflection1D
StdMeshers_Deflection1D_swigregister = _StdMeshers.StdMeshers_Deflection1D_swigregister
StdMeshers_Deflection1D_swigregister(StdMeshers_Deflection1D)

class StdMeshers_RadialPrism_3D(SMESH.SMESH_3D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_RadialPrism_3D self, int hypId, SMESH_Gen gen) -> StdMeshers_RadialPrism_3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_RadialPrism_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_RadialPrism_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialPrism_3D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_RadialPrism_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialPrism_3D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_RadialPrism_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialPrism_3D_Evaluate(self, *args)


    def IsApplicableToShape(self, *args):
        """
        IsApplicableToShape(StdMeshers_RadialPrism_3D self, TopoDS_Shape shape, bool toCheckAll) -> bool

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialPrism_3D_IsApplicableToShape(self, *args)


    def IsApplicable(*args):
        """
        IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialPrism_3D_IsApplicable(*args)

    IsApplicable = staticmethod(IsApplicable)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_RadialPrism_3D
StdMeshers_RadialPrism_3D_swigregister = _StdMeshers.StdMeshers_RadialPrism_3D_swigregister
StdMeshers_RadialPrism_3D_swigregister(StdMeshers_RadialPrism_3D)

def StdMeshers_RadialPrism_3D_IsApplicable(*args):
    """
    StdMeshers_RadialPrism_3D_IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type toCheckAll: bool
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_RadialPrism_3D_IsApplicable(*args)

class StdMeshers_Prism_3D(SMESH.SMESH_3D_Algo):
    """rief Algo building prisms on a prism shape"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Prism_3D self, int hypId, SMESH_Gen gen) -> StdMeshers_Prism_3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Prism_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Prism_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Prism_3D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Prism_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Prism_3D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Prism_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Prism_3D_Evaluate(self, *args)


    def ProjectTriangles(self, *args):
        """
        ProjectTriangles(StdMeshers_Prism_3D self)

        rief Enable removal of quadrangles from the bottom face and
        triangles creation there by projection from the top
        (sole face meshed with triangles is considered to be a bottom one).
        If there are two faces with triangles, triangles must
        be of the same topology, else the algo fails.
        The method must be called before Compute()


        """
        return _StdMeshers.StdMeshers_Prism_3D_ProjectTriangles(self, *args)


    def AddPrisms(*args):
        """
        AddPrisms(std::vector< TNodeColumn const *,std::allocator< TNodeColumn const * > > & nodeColumns, SMESH_MesherHelper helper) -> bool

        rief Create prisms
        \param nodeColumns - columns of nodes generated from nodes of a mesh face
        \param helper - helper initialized by mesh and shape to add prisms to

        :type nodeColumns: OCC.wrapper.StdMeshers.vector_TNodeColumn
        :type helper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Prism_3D_AddPrisms(*args)

    AddPrisms = staticmethod(AddPrisms)

    def IsApplicable(*args):
        """
        IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Prism_3D_IsApplicable(*args)

    IsApplicable = staticmethod(IsApplicable)

    def IsApplicableToShape(self, *args):
        """
        IsApplicableToShape(StdMeshers_Prism_3D self, TopoDS_Shape shape, bool toCheckAll) -> bool

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Prism_3D_IsApplicableToShape(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Prism_3D
StdMeshers_Prism_3D_swigregister = _StdMeshers.StdMeshers_Prism_3D_swigregister
StdMeshers_Prism_3D_swigregister(StdMeshers_Prism_3D)

def StdMeshers_Prism_3D_AddPrisms(*args):
    """
    StdMeshers_Prism_3D_AddPrisms(std::vector< TNodeColumn const *,std::allocator< TNodeColumn const * > > & nodeColumns, SMESH_MesherHelper helper) -> bool

    rief Create prisms
    \param nodeColumns - columns of nodes generated from nodes of a mesh face
    \param helper - helper initialized by mesh and shape to add prisms to

    :type nodeColumns: OCC.wrapper.StdMeshers.vector_TNodeColumn
    :type helper: OCC.wrapper.SMESH.SMESH_MesherHelper
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_Prism_3D_AddPrisms(*args)

def StdMeshers_Prism_3D_IsApplicable(*args):
    """
    StdMeshers_Prism_3D_IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type toCheckAll: bool
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_Prism_3D_IsApplicable(*args)


try:
	TError = SMESH.shared_ptr_SMESH_ComputeError
except AttributeError:
	pass # does not exist, probably ignored

class StdMeshers_MaxLength(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_MaxLength self, int hypId, SMESH_Gen gen) -> StdMeshers_MaxLength

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_MaxLength(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetLength(self, *args):
        """
        SetLength(StdMeshers_MaxLength self, double length)

        :type length: double

        """
        return _StdMeshers.StdMeshers_MaxLength_SetLength(self, *args)


    def GetLength(self, *args):
        """
        GetLength(StdMeshers_MaxLength self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_MaxLength_GetLength(self, *args)


    def HavePreestimatedLength(self, *args):
        """
        HavePreestimatedLength(StdMeshers_MaxLength self) -> bool

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MaxLength_HavePreestimatedLength(self, *args)


    def GetPreestimatedLength(self, *args):
        """
        GetPreestimatedLength(StdMeshers_MaxLength self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_MaxLength_GetPreestimatedLength(self, *args)


    def SetPreestimatedLength(self, *args):
        """
        SetPreestimatedLength(StdMeshers_MaxLength self, double length)

        :type length: double

        """
        return _StdMeshers.StdMeshers_MaxLength_SetPreestimatedLength(self, *args)


    def SetUsePreestimatedLength(self, *args):
        """
        SetUsePreestimatedLength(StdMeshers_MaxLength self, bool toUse)

        :type toUse: bool

        """
        return _StdMeshers.StdMeshers_MaxLength_SetUsePreestimatedLength(self, *args)


    def GetUsePreestimatedLength(self, *args):
        """
        GetUsePreestimatedLength(StdMeshers_MaxLength self) -> bool

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MaxLength_GetUsePreestimatedLength(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_MaxLength self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_MaxLength_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_MaxLength self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_MaxLength_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_MaxLength self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize segment length by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MaxLength_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_MaxLength self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MaxLength_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_MaxLength
StdMeshers_MaxLength_swigregister = _StdMeshers.StdMeshers_MaxLength_swigregister
StdMeshers_MaxLength_swigregister(StdMeshers_MaxLength)

class StdMeshers_LayerDistribution2D(StdMeshers_LayerDistribution):
    """
    This hypothesis is used by "Radial quadrangle" algorithm.
    It specifies 1D hypothesis defining distribution of segments
    between the internal and the external surfaces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_LayerDistribution2D self, int hypId, SMESH_Gen gen) -> StdMeshers_LayerDistribution2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_LayerDistribution2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_LayerDistribution2D
StdMeshers_LayerDistribution2D_swigregister = _StdMeshers.StdMeshers_LayerDistribution2D_swigregister
StdMeshers_LayerDistribution2D_swigregister(StdMeshers_LayerDistribution2D)

class StdMeshers_Cartesian_3D(SMESH.SMESH_3D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Cartesian_3D self, int hypId, SMESH_Gen gen) -> StdMeshers_Cartesian_3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Cartesian_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Cartesian_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Cartesian_3D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Cartesian_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Cartesian_3D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Cartesian_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Cartesian_3D_Evaluate(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_Cartesian_3D self, SMESH_subMesh subMesh)

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Cartesian_3D_SetEventListener(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Cartesian_3D
StdMeshers_Cartesian_3D_swigregister = _StdMeshers.StdMeshers_Cartesian_3D_swigregister
StdMeshers_Cartesian_3D_swigregister(StdMeshers_Cartesian_3D)

class StdMeshers_CartesianParameters3D(SMESH.SMESH_Hypothesis):
    """
    This hypothesis specifies
    - Definition of the Cartesian grid
    - Size threshold
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_CartesianParameters3D self, int hypId, SMESH_Gen gen) -> StdMeshers_CartesianParameters3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_CartesianParameters3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetGrid(self, *args):
        """
        SetGrid(StdMeshers_CartesianParameters3D self, std::vector< double,std::allocator< double > > & xNodes, int axis)

        Sets coordinates of node positions along an axis (countered from 0)

        :type xNodes: OCC.wrapper.StdMeshers.vector
        :type axis: int

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SetGrid(self, *args)


    def GetGrid(self, *args):
        """
        GetGrid(StdMeshers_CartesianParameters3D self, std::vector< double,std::allocator< double > > & xNodes, int axis)

        Return coordinates of node positions along the three axes

        :type xNodes: OCC.wrapper.StdMeshers.vector
        :type axis: int

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_GetGrid(self, *args)


    def SetGridSpacing(self, *args):
        """
        SetGridSpacing(StdMeshers_CartesianParameters3D self, std::vector< std::string,std::allocator< std::string > > & spaceFunctions, std::vector< double,std::allocator< double > > & internalPoints, int const axis)

        rief Set grid spacing along the three axes
        \param spaceFunctions - functions defining spacing values at given point on axis
        \param internalPoints - points dividing a grid into parts along each direction

        Parameter t of spaceFunction f(t) is a position [0,1] within bounding box of
        the shape to mesh

        :type spaceFunctions: OCC.wrapper.StdMeshers.vector_std::string
        :type internalPoints: OCC.wrapper.StdMeshers.vector
        :type axis: const int

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SetGridSpacing(self, *args)


    def GetGridSpacing(self, *args):
        """
        GetGridSpacing(StdMeshers_CartesianParameters3D self, std::vector< std::string,std::allocator< std::string > > & spaceFunctions, std::vector< double,std::allocator< double > > & internalPoints, int const axis)

        :type spaceFunctions: OCC.wrapper.StdMeshers.vector_std::string
        :type internalPoints: OCC.wrapper.StdMeshers.vector
        :type axis: const int

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_GetGridSpacing(self, *args)


    def IsGridBySpacing(self, *args):
        """
        IsGridBySpacing(StdMeshers_CartesianParameters3D self, int const axis) -> bool

        :type axis: const int
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_IsGridBySpacing(self, *args)


    def SetFixedPoint(self, *args):
        """
        SetFixedPoint(StdMeshers_CartesianParameters3D self, double const * p, bool toUnset)

        Set/unset a fixed point, at which a node will be created provided that grid
        is defined by spacing in all directions

        :type p: const double [3]
        :type toUnset: bool

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SetFixedPoint(self, *args)


    def GetFixedPoint(self, *args):
        """
        GetFixedPoint(StdMeshers_CartesianParameters3D self, double * p) -> bool

        :type p: double [3]
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_GetFixedPoint(self, *args)


    def ComputeCoordinates(*args):
        """
        ComputeCoordinates(double const x0, double const x1, std::vector< std::string,std::allocator< std::string > > & spaceFuns, std::vector< double,std::allocator< double > > & points, std::vector< double,std::allocator< double > > & coords, std::string const & axis, double const * xForced=None)

        rief Computes node coordinates by spacing functions
        \param x0 - lower coordinate
        \param x1 - upper coordinate
        \param spaceFuns - space functions
        \param points - internal points
        \param coords - the computed coordinates

        :type x0: const double
        :type x1: const double
        :type spaceFuns: OCC.wrapper.StdMeshers.vector_std::string
        :type points: OCC.wrapper.StdMeshers.vector
        :type coords: OCC.wrapper.StdMeshers.vector
        :type axis: string
        :type xForced: const double *

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_ComputeCoordinates(*args)

    ComputeCoordinates = staticmethod(ComputeCoordinates)

    def GetCoordinates(self, *args):
        """
        GetCoordinates(StdMeshers_CartesianParameters3D self, std::vector< double,std::allocator< double > > & xNodes, std::vector< double,std::allocator< double > > & yNodes, std::vector< double,std::allocator< double > > & zNodes, Bnd_Box bndBox)

        Return coordinates of node positions along the three axes.
        If the grid is defined by spacing functions, the coordinates are computed

        :type xNodes: OCC.wrapper.StdMeshers.vector
        :type yNodes: OCC.wrapper.StdMeshers.vector
        :type zNodes: OCC.wrapper.StdMeshers.vector
        :type bndBox: OCC.wrapper.Bnd.Bnd_Box

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_GetCoordinates(self, *args)


    def SetAxisDirs(self, *args):
        """
        SetAxisDirs(StdMeshers_CartesianParameters3D self, double const * the9DirComps)

        rief Set custom direction of axes

        :type the9DirComps: const double *

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SetAxisDirs(self, *args)


    def GetAxisDirs(self, *args):
        """
        GetAxisDirs(StdMeshers_CartesianParameters3D self) -> double const *

        :rtype: const double *

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_GetAxisDirs(self, *args)


    def ComputeOptimalAxesDirs(*args):
        """
        ComputeOptimalAxesDirs(TopoDS_Shape shape, bool const isOrthogonal, double * dirCoords)

        rief Returns axes at which number of hexahedra is maximal

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type isOrthogonal: const bool
        :type dirCoords: double [9]

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_ComputeOptimalAxesDirs(*args)

    ComputeOptimalAxesDirs = staticmethod(ComputeOptimalAxesDirs)

    def SetSizeThreshold(self, *args):
        """
        SetSizeThreshold(StdMeshers_CartesianParameters3D self, double const threshold)

        Set size threshold. A polyhedral cell got by cutting an initial
        hexahedron by geometry boundary is considered small and is removed if
        it's size is threshold times less than the size of the initial hexahedron.

        :type threshold: const double

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SetSizeThreshold(self, *args)


    def GetSizeThreshold(self, *args):
        """
        GetSizeThreshold(StdMeshers_CartesianParameters3D self) -> double

        rief Return size threshold

        :rtype: double

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_GetSizeThreshold(self, *args)


    def SetToAddEdges(self, *args):
        """
        SetToAddEdges(StdMeshers_CartesianParameters3D self, bool toAdd)

        rief Enables implementation of geometrical edges into the mesh. If this feature
        is disabled, sharp edges of the shape are lost ("smoothed") in the mesh if
        they don't coincide with the grid lines

        :type toAdd: bool

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SetToAddEdges(self, *args)


    def GetToAddEdges(self, *args):
        """
        GetToAddEdges(StdMeshers_CartesianParameters3D self) -> bool

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_GetToAddEdges(self, *args)


    def IsDefined(self, *args):
        """
        IsDefined(StdMeshers_CartesianParameters3D self) -> bool

        rief Return true if parameters are well defined

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_IsDefined(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_CartesianParameters3D self, std::ostream & save) -> std::ostream &

        rief Persistence methods

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_CartesianParameters3D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_CartesianParameters3D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize my parameter values by the mesh built on the geometry

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_CartesianParameters3D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_CartesianParameters3D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_CartesianParameters3D
StdMeshers_CartesianParameters3D_swigregister = _StdMeshers.StdMeshers_CartesianParameters3D_swigregister
StdMeshers_CartesianParameters3D_swigregister(StdMeshers_CartesianParameters3D)

def StdMeshers_CartesianParameters3D_ComputeCoordinates(*args):
    """
    StdMeshers_CartesianParameters3D_ComputeCoordinates(double const x0, double const x1, std::vector< std::string,std::allocator< std::string > > & spaceFuns, std::vector< double,std::allocator< double > > & points, std::vector< double,std::allocator< double > > & coords, std::string const & axis, double const * xForced=None)

    rief Computes node coordinates by spacing functions
    \param x0 - lower coordinate
    \param x1 - upper coordinate
    \param spaceFuns - space functions
    \param points - internal points
    \param coords - the computed coordinates

    :type x0: const double
    :type x1: const double
    :type spaceFuns: OCC.wrapper.StdMeshers.vector_std::string
    :type points: OCC.wrapper.StdMeshers.vector
    :type coords: OCC.wrapper.StdMeshers.vector
    :type axis: string
    :type xForced: const double *

    """
    return _StdMeshers.StdMeshers_CartesianParameters3D_ComputeCoordinates(*args)

def StdMeshers_CartesianParameters3D_ComputeOptimalAxesDirs(*args):
    """
    StdMeshers_CartesianParameters3D_ComputeOptimalAxesDirs(TopoDS_Shape shape, bool const isOrthogonal, double * dirCoords)

    rief Returns axes at which number of hexahedra is maximal

    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type isOrthogonal: const bool
    :type dirCoords: double [9]

    """
    return _StdMeshers.StdMeshers_CartesianParameters3D_ComputeOptimalAxesDirs(*args)

class StdMeshers_MEFISTO_2D(SMESH.SMESH_2D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_MEFISTO_2D self, int hypId, SMESH_Gen gen) -> StdMeshers_MEFISTO_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_MEFISTO_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_MEFISTO_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MEFISTO_2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_MEFISTO_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MEFISTO_2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_MEFISTO_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MEFISTO_2D_Evaluate(self, *args)


    def LoadPoints(self, *args):
        """
        LoadPoints(StdMeshers_MEFISTO_2D self, StdMeshers_MEFISTO_2D::TWireVector & wires, R2 uvslf, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & mefistoToDS, double scalex, double scaley) -> bool

        :type wires: TWireVector
        :type uvslf: OCC.wrapper.MEFISTO.R2
        :type mefistoToDS: OCC.wrapper.StdMeshers.vector_SMDS_MeshNode
        :type scalex: double
        :type scaley: double
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MEFISTO_2D_LoadPoints(self, *args)


    def ComputeScaleOnFace(self, *args):
        """
        ComputeScaleOnFace(StdMeshers_MEFISTO_2D self, SMESH_Mesh aMesh, TopoDS_Face aFace)

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type scalex: double &
        :type scaley: double &

        """
        return _StdMeshers.StdMeshers_MEFISTO_2D_ComputeScaleOnFace(self, *args)


    def StoreResult(self, *args):
        """
        StoreResult(StdMeshers_MEFISTO_2D self, Z nbst, R2 uvst, Z nbt, Z * nust, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & mefistoToDS, double scalex, double scaley)

        :type nbst: Z
        :type uvst: OCC.wrapper.MEFISTO.R2
        :type nbt: Z
        :type nust: Z
        :type mefistoToDS: OCC.wrapper.StdMeshers.vector_SMDS_MeshNode
        :type scalex: double
        :type scaley: double

        """
        return _StdMeshers.StdMeshers_MEFISTO_2D_StoreResult(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_MEFISTO_2D
StdMeshers_MEFISTO_2D_swigregister = _StdMeshers.StdMeshers_MEFISTO_2D_swigregister
StdMeshers_MEFISTO_2D_swigregister(StdMeshers_MEFISTO_2D)

class StdMeshers_Geometric1D(StdMeshers_Reversible1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Geometric1D self, int hypId, SMESH_Gen gen) -> StdMeshers_Geometric1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Geometric1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetStartLength(self, *args):
        """
        SetStartLength(StdMeshers_Geometric1D self, double length)

        :type length: double

        """
        return _StdMeshers.StdMeshers_Geometric1D_SetStartLength(self, *args)


    def SetCommonRatio(self, *args):
        """
        SetCommonRatio(StdMeshers_Geometric1D self, double factor)

        :type factor: double

        """
        return _StdMeshers.StdMeshers_Geometric1D_SetCommonRatio(self, *args)


    def GetStartLength(self, *args):
        """
        GetStartLength(StdMeshers_Geometric1D self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_Geometric1D_GetStartLength(self, *args)


    def GetCommonRatio(self, *args):
        """
        GetCommonRatio(StdMeshers_Geometric1D self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_Geometric1D_GetCommonRatio(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_Geometric1D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_Geometric1D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_Geometric1D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_Geometric1D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_Geometric1D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize start and end length by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Geometric1D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_Geometric1D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Geometric1D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Geometric1D
StdMeshers_Geometric1D_swigregister = _StdMeshers.StdMeshers_Geometric1D_swigregister
StdMeshers_Geometric1D_swigregister(StdMeshers_Geometric1D)

class StdMeshers_QuadrangleParams(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_QuadrangleParams self, int hypId, SMESH_Gen gen) -> StdMeshers_QuadrangleParams

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_QuadrangleParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetTriaVertex(self, *args):
        """
        SetTriaVertex(StdMeshers_QuadrangleParams self, int id)

        :type id: int

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_SetTriaVertex(self, *args)


    def GetTriaVertex(self, *args):
        """
        GetTriaVertex(StdMeshers_QuadrangleParams self) -> int

        :rtype: int

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_GetTriaVertex(self, *args)


    def SetObjectEntry(self, *args):
        """
        SetObjectEntry(StdMeshers_QuadrangleParams self, char const * entry)

        :type entry: const char *

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_SetObjectEntry(self, *args)


    def GetObjectEntry(self, *args):
        """
        GetObjectEntry(StdMeshers_QuadrangleParams self) -> char const *

        :rtype: const char *

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_GetObjectEntry(self, *args)


    def SetQuadType(self, *args):
        """
        SetQuadType(StdMeshers_QuadrangleParams self, StdMeshers_QuadType type)

        :type type: OCC.wrapper.StdMeshers.StdMeshers_QuadType

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_SetQuadType(self, *args)


    def GetQuadType(self, *args):
        """
        GetQuadType(StdMeshers_QuadrangleParams self) -> StdMeshers_QuadType

        :rtype: OCC.wrapper.StdMeshers.StdMeshers_QuadType

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_GetQuadType(self, *args)


    def SetEnforcedNodes(self, *args):
        """
        SetEnforcedNodes(StdMeshers_QuadrangleParams self, std::vector< TopoDS_Shape,std::allocator< TopoDS_Shape > > const & shapes, std::vector< gp_Pnt,std::allocator< gp_Pnt > > const & points)

        :type shapes: OCC.wrapper.StdMeshers.vector_TopoDS_Shape
        :type points: OCC.wrapper.StdMeshers.vector_gp_Pnt

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_SetEnforcedNodes(self, *args)


    def GetEnforcedNodes(self, *args):
        """
        GetEnforcedNodes(StdMeshers_QuadrangleParams self, std::vector< TopoDS_Shape,std::allocator< TopoDS_Shape > > & shapes, std::vector< gp_Pnt,std::allocator< gp_Pnt > > & points)

        :type shapes: OCC.wrapper.StdMeshers.vector_TopoDS_Shape
        :type points: OCC.wrapper.StdMeshers.vector_gp_Pnt

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_GetEnforcedNodes(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_QuadrangleParams self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_QuadrangleParams self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_QuadrangleParams self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize start and end length by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_QuadrangleParams self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadrangleParams_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_QuadrangleParams
StdMeshers_QuadrangleParams_swigregister = _StdMeshers.StdMeshers_QuadrangleParams_swigregister
StdMeshers_QuadrangleParams_swigregister(StdMeshers_QuadrangleParams)

class StdMeshers_Import_1D(SMESH.SMESH_1D_Algo):
    """rief Copy elements from other the mesh"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Import_1D self, int hypId, SMESH_Gen gen) -> StdMeshers_Import_1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Import_1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Import_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Import_1D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Import_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Import_1D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Import_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Import_1D_Evaluate(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_Import_1D self, SMESH_subMesh subMesh)

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Import_1D_SetEventListener(self, *args)


    def SubmeshRestored(self, *args):
        """
        SubmeshRestored(StdMeshers_Import_1D self, SMESH_subMesh subMesh)

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Import_1D_SubmeshRestored(self, *args)


    def getMaps(*args):
        """
        getMaps(SMESH_Mesh srcMesh, SMESH_Mesh tgtMesh, StdMeshers_Import_1D::TNodeNodeMap *& n2n, StdMeshers_Import_1D::TElemElemMap *& e2e)

        :type srcMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type tgtMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type n2n: TNodeNodeMap
        :type e2e: TElemElemMap

        """
        return _StdMeshers.StdMeshers_Import_1D_getMaps(*args)

    getMaps = staticmethod(getMaps)

    def importMesh(*args):
        """
        importMesh(SMESH_Mesh srcMesh, SMESH_Mesh tgtMesh, StdMeshers_ImportSource1D srcHyp, TopoDS_Shape tgtShape)

        :type srcMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type tgtMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type srcHyp: OCC.wrapper.StdMeshers.StdMeshers_ImportSource1D
        :type tgtShape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_Import_1D_importMesh(*args)

    importMesh = staticmethod(importMesh)

    def setEventListener(*args):
        """
        setEventListener(SMESH_subMesh subMesh, StdMeshers_ImportSource1D sourceHyp)

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh
        :type sourceHyp: OCC.wrapper.StdMeshers.StdMeshers_ImportSource1D

        """
        return _StdMeshers.StdMeshers_Import_1D_setEventListener(*args)

    setEventListener = staticmethod(setEventListener)

    def getSubMeshOfCopiedMesh(*args):
        """
        getSubMeshOfCopiedMesh(SMESH_Mesh tgtMesh, SMESH_Mesh srcMesh) -> SMESH_subMesh

        :type tgtMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type srcMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Import_1D_getSubMeshOfCopiedMesh(*args)

    getSubMeshOfCopiedMesh = staticmethod(getSubMeshOfCopiedMesh)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Import_1D
StdMeshers_Import_1D_swigregister = _StdMeshers.StdMeshers_Import_1D_swigregister
StdMeshers_Import_1D_swigregister(StdMeshers_Import_1D)

def StdMeshers_Import_1D_getMaps(*args):
    """
    StdMeshers_Import_1D_getMaps(SMESH_Mesh srcMesh, SMESH_Mesh tgtMesh, StdMeshers_Import_1D::TNodeNodeMap *& n2n, StdMeshers_Import_1D::TElemElemMap *& e2e)

    :type srcMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type tgtMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type n2n: TNodeNodeMap
    :type e2e: TElemElemMap

    """
    return _StdMeshers.StdMeshers_Import_1D_getMaps(*args)

def StdMeshers_Import_1D_importMesh(*args):
    """
    StdMeshers_Import_1D_importMesh(SMESH_Mesh srcMesh, SMESH_Mesh tgtMesh, StdMeshers_ImportSource1D srcHyp, TopoDS_Shape tgtShape)

    :type srcMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type tgtMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type srcHyp: OCC.wrapper.StdMeshers.StdMeshers_ImportSource1D
    :type tgtShape: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _StdMeshers.StdMeshers_Import_1D_importMesh(*args)

def StdMeshers_Import_1D_setEventListener(*args):
    """
    StdMeshers_Import_1D_setEventListener(SMESH_subMesh subMesh, StdMeshers_ImportSource1D sourceHyp)

    :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh
    :type sourceHyp: OCC.wrapper.StdMeshers.StdMeshers_ImportSource1D

    """
    return _StdMeshers.StdMeshers_Import_1D_setEventListener(*args)

def StdMeshers_Import_1D_getSubMeshOfCopiedMesh(*args):
    """
    StdMeshers_Import_1D_getSubMeshOfCopiedMesh(SMESH_Mesh tgtMesh, SMESH_Mesh srcMesh) -> SMESH_subMesh

    :type tgtMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type srcMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :rtype: OCC.wrapper.SMESH.SMESH_subMesh

    """
    return _StdMeshers.StdMeshers_Import_1D_getSubMeshOfCopiedMesh(*args)

class StdMeshers_ImportSource2D(StdMeshers_ImportSource1D):
    """rief Redefines name and dimension of inherited StdMeshers_ImportSource1D"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_ImportSource2D self, int hypId, SMESH_Gen gen) -> StdMeshers_ImportSource2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_ImportSource2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_ImportSource2D
StdMeshers_ImportSource2D_swigregister = _StdMeshers.StdMeshers_ImportSource2D_swigregister
StdMeshers_ImportSource2D_swigregister(StdMeshers_ImportSource2D)

class StdMeshers_CompositeSegment_1D(StdMeshers_Regular_1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_CompositeSegment_1D self, int hypId, SMESH_Gen gen) -> StdMeshers_CompositeSegment_1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_CompositeSegment_1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Compute(self, *args):
        """
        Compute(StdMeshers_CompositeSegment_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_CompositeSegment_1D_Compute(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_CompositeSegment_1D self, SMESH_subMesh subMesh)

        rief Sets event listener to submeshes if necessary
        \param subMesh - submesh where algo is set

        This method is called when a submesh gets HYP_OK algo_state.
        After being set, event listener is notified on each event of a submesh.

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_CompositeSegment_1D_SetEventListener(self, *args)


    def GetFaceSide(*args):
        """
        GetFaceSide(SMESH_Mesh aMesh, TopoDS_Edge anEdge, TopoDS_Face aFace, bool const ignoreMeshed) -> StdMeshers_FaceSide

        rief Return a face side the edge belongs to

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type anEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type ignoreMeshed: const bool
        :rtype: OCC.wrapper.StdMeshers.StdMeshers_FaceSide

        """
        return _StdMeshers.StdMeshers_CompositeSegment_1D_GetFaceSide(*args)

    GetFaceSide = staticmethod(GetFaceSide)

    def AlgoName(*args):
        """
        AlgoName() -> std::string

        rief Returns algo type name

        :rtype: string

        """
        return _StdMeshers.StdMeshers_CompositeSegment_1D_AlgoName(*args)

    AlgoName = staticmethod(AlgoName)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_CompositeSegment_1D
StdMeshers_CompositeSegment_1D_swigregister = _StdMeshers.StdMeshers_CompositeSegment_1D_swigregister
StdMeshers_CompositeSegment_1D_swigregister(StdMeshers_CompositeSegment_1D)

def StdMeshers_CompositeSegment_1D_GetFaceSide(*args):
    """
    StdMeshers_CompositeSegment_1D_GetFaceSide(SMESH_Mesh aMesh, TopoDS_Edge anEdge, TopoDS_Face aFace, bool const ignoreMeshed) -> StdMeshers_FaceSide

    rief Return a face side the edge belongs to

    :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
    :type anEdge: OCC.wrapper.TopoDS.TopoDS_Edge
    :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type ignoreMeshed: const bool
    :rtype: OCC.wrapper.StdMeshers.StdMeshers_FaceSide

    """
    return _StdMeshers.StdMeshers_CompositeSegment_1D_GetFaceSide(*args)

def StdMeshers_CompositeSegment_1D_AlgoName(*args):
    """
    StdMeshers_CompositeSegment_1D_AlgoName() -> std::string

    rief Returns algo type name

    :rtype: string

    """
    return _StdMeshers.StdMeshers_CompositeSegment_1D_AlgoName(*args)

class StdMeshers_Hexa_3D(SMESH.SMESH_3D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Hexa_3D self, int hypId, SMESH_Gen gen) -> StdMeshers_Hexa_3D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Hexa_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Hexa_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Hexa_3D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Hexa_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool
        Compute(StdMeshers_Hexa_3D self, SMESH_Mesh aMesh, SMESH_MesherHelper aHelper) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Hexa_3D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Hexa_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Hexa_3D_Evaluate(self, *args)


    def IsApplicableToShape(self, *args):
        """
        IsApplicableToShape(StdMeshers_Hexa_3D self, TopoDS_Shape shape, bool toCheckAll) -> bool

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Hexa_3D_IsApplicableToShape(self, *args)


    def IsApplicable(*args):
        """
        IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Hexa_3D_IsApplicable(*args)

    IsApplicable = staticmethod(IsApplicable)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Hexa_3D
StdMeshers_Hexa_3D_swigregister = _StdMeshers.StdMeshers_Hexa_3D_swigregister
StdMeshers_Hexa_3D_swigregister(StdMeshers_Hexa_3D)

def StdMeshers_Hexa_3D_IsApplicable(*args):
    """
    StdMeshers_Hexa_3D_IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type toCheckAll: bool
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_Hexa_3D_IsApplicable(*args)

class StdMeshers_RadialQuadrangle_1D2D(StdMeshers_Quadrangle_2D):
    """
    rief Algorithm generating quadrangles on a full or a part of an elliptic face.
    Elements around an ellipse center are triangles.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_RadialQuadrangle_1D2D self, int hypId, SMESH_Gen gen) -> StdMeshers_RadialQuadrangle_1D2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_RadialQuadrangle_1D2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_RadialQuadrangle_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialQuadrangle_1D2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_RadialQuadrangle_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialQuadrangle_1D2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_RadialQuadrangle_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialQuadrangle_1D2D_Evaluate(self, *args)


    def SubmeshRestored(self, *args):
        """
        SubmeshRestored(StdMeshers_RadialQuadrangle_1D2D self, SMESH_subMesh subMesh)

        rief Allow algo to do something after persistent restoration
        \param subMesh - restored submesh

        This method is called only if a submesh has HYP_OK algo_state.

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_RadialQuadrangle_1D2D_SubmeshRestored(self, *args)


    def IsApplicableToShape(self, *args):
        """
        IsApplicableToShape(StdMeshers_RadialQuadrangle_1D2D self, TopoDS_Shape shape, bool toCheckAll) -> bool

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialQuadrangle_1D2D_IsApplicableToShape(self, *args)


    def IsApplicable(*args):
        """
        IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type toCheckAll: bool
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_RadialQuadrangle_1D2D_IsApplicable(*args)

    IsApplicable = staticmethod(IsApplicable)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_RadialQuadrangle_1D2D
StdMeshers_RadialQuadrangle_1D2D_swigregister = _StdMeshers.StdMeshers_RadialQuadrangle_1D2D_swigregister
StdMeshers_RadialQuadrangle_1D2D_swigregister(StdMeshers_RadialQuadrangle_1D2D)

def StdMeshers_RadialQuadrangle_1D2D_IsApplicable(*args):
    """
    StdMeshers_RadialQuadrangle_1D2D_IsApplicable(TopoDS_Shape aShape, bool toCheckAll) -> bool

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type toCheckAll: bool
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_RadialQuadrangle_1D2D_IsApplicable(*args)

class StdMeshers_TNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(StdMeshers_TNode self) -> StdMeshers_TNode"""
        this = _StdMeshers.new_StdMeshers_TNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetNode(self, *args):
        """
        SetNode(StdMeshers_TNode self, SMDS_MeshNode theNode)

        :type theNode: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _StdMeshers.StdMeshers_TNode_SetNode(self, *args)


    def Node(self, *args):
        """
        Node(StdMeshers_TNode self) -> SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _StdMeshers.StdMeshers_TNode_Node(self, *args)


    def SetShapeSupportID(self, *args):
        """
        SetShapeSupportID(StdMeshers_TNode self, int const theID)

        :type theID: const int

        """
        return _StdMeshers.StdMeshers_TNode_SetShapeSupportID(self, *args)


    def ShapeSupportID(self, *args):
        """
        ShapeSupportID(StdMeshers_TNode self) -> int

        :rtype: int

        """
        return _StdMeshers.StdMeshers_TNode_ShapeSupportID(self, *args)


    def SetNormCoord(self, *args):
        """
        SetNormCoord(StdMeshers_TNode self, gp_XYZ theXYZ)

        :type theXYZ: OCC.wrapper.gp.gp_XYZ

        """
        return _StdMeshers.StdMeshers_TNode_SetNormCoord(self, *args)


    def NormCoord(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _StdMeshers.StdMeshers_TNode_NormCoord(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBaseNodeID(self, *args):
        """
        SetBaseNodeID(StdMeshers_TNode self, int const theID)

        :type theID: const int

        """
        return _StdMeshers.StdMeshers_TNode_SetBaseNodeID(self, *args)


    def BaseNodeID(self, *args):
        """
        BaseNodeID(StdMeshers_TNode self) -> int

        :rtype: int

        """
        return _StdMeshers.StdMeshers_TNode_BaseNodeID(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_TNode
StdMeshers_TNode_swigregister = _StdMeshers.StdMeshers_TNode_swigregister
StdMeshers_TNode_swigregister(StdMeshers_TNode)

class vector_FaceQuadStruct_FaceQuadStruct_Ptr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___nonzero__(self)

    def __bool__(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___bool__(self)

    def __len__(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___len__(self)

    def __getslice__(self, i, j):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr___setitem__(self, *args)

    def pop(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_pop(self)

    def append(self, x):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_append(self, x)

    def empty(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_empty(self)

    def size(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_size(self)

    def swap(self, v):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_swap(self, v)

    def begin(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_begin(self)

    def end(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_end(self)

    def rbegin(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_rbegin(self)

    def rend(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_rend(self)

    def clear(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_clear(self)

    def get_allocator(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_get_allocator(self)

    def pop_back(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_pop_back(self)

    def erase(self, *args):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_erase(self, *args)

    def __init__(self, *args):
        this = _StdMeshers.new_vector_FaceQuadStruct_FaceQuadStruct_Ptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_push_back(self, x)

    def front(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_front(self)

    def back(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_back(self)

    def assign(self, n, x):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_assign(self, n, x)

    def resize(self, *args):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_resize(self, *args)

    def insert(self, *args):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_insert(self, *args)

    def reserve(self, n):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_reserve(self, n)

    def capacity(self):
        return _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_capacity(self)
    __swig_destroy__ = _StdMeshers.delete_vector_FaceQuadStruct_FaceQuadStruct_Ptr
vector_FaceQuadStruct_FaceQuadStruct_Ptr_swigregister = _StdMeshers.vector_FaceQuadStruct_FaceQuadStruct_Ptr_swigregister
vector_FaceQuadStruct_FaceQuadStruct_Ptr_swigregister(vector_FaceQuadStruct_FaceQuadStruct_Ptr)

class StdMeshers_FixedPoints1D(StdMeshers_Reversible1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_FixedPoints1D self, int hypId, SMESH_Gen gen) -> StdMeshers_FixedPoints1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_FixedPoints1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPoints(self, *args):
        """
        SetPoints(StdMeshers_FixedPoints1D self, std::vector< double,std::allocator< double > > & listParams)

        :type listParams: OCC.wrapper.StdMeshers.vector

        """
        return _StdMeshers.StdMeshers_FixedPoints1D_SetPoints(self, *args)


    def SetNbSegments(self, *args):
        """
        SetNbSegments(StdMeshers_FixedPoints1D self, std::vector< int,std::allocator< int > > & listNbSeg)

        :type listNbSeg: OCC.wrapper.StdMeshers.vector

        """
        return _StdMeshers.StdMeshers_FixedPoints1D_SetNbSegments(self, *args)


    def GetPoints(self, *args):
        """
        :rtype: OCC.wrapper.StdMeshers.vector

        """
        res = _StdMeshers.StdMeshers_FixedPoints1D_GetPoints(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetNbSegments(self, *args):
        """
        :rtype: OCC.wrapper.StdMeshers.vector

        """
        res = _StdMeshers.StdMeshers_FixedPoints1D_GetNbSegments(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_FixedPoints1D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_FixedPoints1D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_FixedPoints1D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_FixedPoints1D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_FixedPoints1D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize start and end length by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_FixedPoints1D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_FixedPoints1D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_FixedPoints1D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_FixedPoints1D
StdMeshers_FixedPoints1D_swigregister = _StdMeshers.StdMeshers_FixedPoints1D_swigregister
StdMeshers_FixedPoints1D_swigregister(StdMeshers_FixedPoints1D)

class StdMeshers_NumberOfLayers2D(StdMeshers_NumberOfLayers):
    """
    This hypothesis is used by "Radial quadrangle" algorithm.
    It specifies number of segments between the internal 
    and the external surfaces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_NumberOfLayers2D self, int hypId, SMESH_Gen gen) -> StdMeshers_NumberOfLayers2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_NumberOfLayers2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_NumberOfLayers2D
StdMeshers_NumberOfLayers2D_swigregister = _StdMeshers.StdMeshers_NumberOfLayers2D_swigregister
StdMeshers_NumberOfLayers2D_swigregister(StdMeshers_NumberOfLayers2D)

class StdMeshers_Projection_1D(SMESH.SMESH_1D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Projection_1D self, int hypId, SMESH_Gen gen) -> StdMeshers_Projection_1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Projection_1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Projection_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_1D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Projection_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_1D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Projection_1D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_1D_Evaluate(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_Projection_1D self, SMESH_subMesh whenSetToSubMesh)

        rief Sets a default event listener to submesh of the source edge
        \param whenSetToSubMesh - submesh where algo is set

        After being set, event listener is notified on each event of a submesh.
        This method is called when a submesh gets HYP_OK algo_state.
        Arranges that CLEAN event is translated from source submesh to
        the whenSetToSubMesh submesh.

        :type whenSetToSubMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Projection_1D_SetEventListener(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Projection_1D
StdMeshers_Projection_1D_swigregister = _StdMeshers.StdMeshers_Projection_1D_swigregister
StdMeshers_Projection_1D_swigregister(StdMeshers_Projection_1D)

class StdMeshers_QuadranglePreference(SMESH.SMESH_Hypothesis):
    """
    rief Hypothesis for StdMeshers_Quadrangle_2D, forcing construction
    of quadrangles if the number of nodes on opposite edges is not the same.
    GIBI can do it if the global number of nodes is even (DALL operator).
    See PAL10467
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_QuadranglePreference self, int hypId, SMESH_Gen gen) -> StdMeshers_QuadranglePreference

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_QuadranglePreference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_QuadranglePreference self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_QuadranglePreference_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_QuadranglePreference self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_QuadranglePreference_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_QuadranglePreference self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize my parameter values by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Just return false as this hypothesis does not have parameters values

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadranglePreference_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_QuadranglePreference self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadranglePreference_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_QuadranglePreference
StdMeshers_QuadranglePreference_swigregister = _StdMeshers.StdMeshers_QuadranglePreference_swigregister
StdMeshers_QuadranglePreference_swigregister(StdMeshers_QuadranglePreference)

class StdMeshers_LocalLength(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_LocalLength self, int hypId, SMESH_Gen gen) -> StdMeshers_LocalLength

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_LocalLength(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetLength(self, *args):
        """
        SetLength(StdMeshers_LocalLength self, double length)

        :type length: double

        """
        return _StdMeshers.StdMeshers_LocalLength_SetLength(self, *args)


    def SetPrecision(self, *args):
        """
        SetPrecision(StdMeshers_LocalLength self, double precision)

        :type precision: double

        """
        return _StdMeshers.StdMeshers_LocalLength_SetPrecision(self, *args)


    def GetLength(self, *args):
        """
        GetLength(StdMeshers_LocalLength self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_LocalLength_GetLength(self, *args)


    def GetPrecision(self, *args):
        """
        GetPrecision(StdMeshers_LocalLength self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_LocalLength_GetPrecision(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_LocalLength self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_LocalLength_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_LocalLength self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_LocalLength_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_LocalLength self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize segment length by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_LocalLength_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_LocalLength self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_LocalLength_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_LocalLength
StdMeshers_LocalLength_swigregister = _StdMeshers.StdMeshers_LocalLength_swigregister
StdMeshers_LocalLength_swigregister(StdMeshers_LocalLength)

class StdMeshers_Import_1D2D(SMESH.SMESH_2D_Algo):
    """rief Copy elements from other the mesh"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Import_1D2D self, int hypId, SMESH_Gen gen) -> StdMeshers_Import_1D2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Import_1D2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_Import_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Import_1D2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_Import_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Import_1D2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Import_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Import_1D2D_Evaluate(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_Import_1D2D self, SMESH_subMesh subMesh)

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Import_1D2D_SetEventListener(self, *args)


    def SubmeshRestored(self, *args):
        """
        SubmeshRestored(StdMeshers_Import_1D2D self, SMESH_subMesh subMesh)

        :type subMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Import_1D2D_SubmeshRestored(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Import_1D2D
StdMeshers_Import_1D2D_swigregister = _StdMeshers.StdMeshers_Import_1D2D_swigregister
StdMeshers_Import_1D2D_swigregister(StdMeshers_Import_1D2D)

class shared_ptr_StdMeshers_FaceSide(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StdMeshers.new_shared_ptr_StdMeshers_FaceSide(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide___deref__(self)

    def __ref__(self):
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide___ref__(self)
    __swig_destroy__ = _StdMeshers.delete_shared_ptr_StdMeshers_FaceSide

    def New(self, *args):
        """
        New(shared_ptr_StdMeshers_FaceSide self, TopoDS_Face Face, TopoDS_Edge Edge, SMESH_Mesh Mesh, bool const IsForward, bool const IgnoreMediumNodes, SMESH_MesherHelper FaceHelper=None, shared_ptr_SMESH_ProxyMesh ProxyMesh) -> shared_ptr_StdMeshers_FaceSide
        New(shared_ptr_StdMeshers_FaceSide self, TopoDS_Face Face, std::list< TopoDS_Edge,std::allocator< TopoDS_Edge > > const & Edges, SMESH_Mesh Mesh, bool const IsForward, bool const IgnoreMediumNodes, SMESH_MesherHelper FaceHelper=None, shared_ptr_SMESH_ProxyMesh ProxyMesh) -> shared_ptr_StdMeshers_FaceSide
        New(shared_ptr_StdMeshers_FaceSide self, StdMeshers_FaceSide Side, SMDS_MeshNode Node, gp_Pnt2d Pnt2d1, gp_Pnt2d Pnt2d2=None, Handle_Geom2d_Curve C2d=0, double const UFirst=0., double const ULast=1.) -> shared_ptr_StdMeshers_FaceSide
        New(shared_ptr_StdMeshers_FaceSide self, UVPtStructVec & theSideNodes, TopoDS_Face theFace, TopoDS_Edge theEdge, SMESH_Mesh theMesh=None) -> shared_ptr_StdMeshers_FaceSide

        :type theSideNodes: UVPtStructVec
        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type theEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: OCC.wrapper.StdMeshers.StdMeshers_FaceSidePtr

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_New(self, *args)


    def GetFaceWires(self, *args):
        """
        GetFaceWires(shared_ptr_StdMeshers_FaceSide self, TopoDS_Face theFace, SMESH_Mesh theMesh, bool const theIgnoreMediumNodes, shared_ptr_SMESH_ComputeError theError, SMESH_MesherHelper theFaceHelper=None, shared_ptr_SMESH_ProxyMesh theProxyMesh, bool const theCheckVertexNodes=True) -> TSideVector

        rief Return wires of a face as StdMeshers_FaceSide's

        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theIgnoreMediumNodes: const bool
        :type theError: TError
        :type theFaceHelper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :type theProxyMesh: Ptr
        :type theCheckVertexNodes: const bool
        :rtype: TSideVector

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_GetFaceWires(self, *args)


    def Reverse(self, *args):
        """
        Reverse(shared_ptr_StdMeshers_FaceSide self)

        rief Change orientation of side geometry


        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_Reverse(self, *args)


    def SetIgnoreMediumNodes(self, *args):
        """
        SetIgnoreMediumNodes(shared_ptr_StdMeshers_FaceSide self, bool toIgnore)

        rief Make ignore medium nodes

        :type toIgnore: bool

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_SetIgnoreMediumNodes(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(shared_ptr_StdMeshers_FaceSide self, bool const update=False) -> int

        rief Return nb nodes on edges and vertices (+1 to be == GetUVPtStruct().size() ).
        Call it with update == true if mesh of this side can be recomputed
        since creation of this side

        :type update: const bool
        :rtype: int

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_NbPoints(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(shared_ptr_StdMeshers_FaceSide self, bool const update=False) -> int

        rief Return nb edges
        Call it with update == true if mesh of this side can be recomputed
        since creation of this side

        :type update: const bool
        :rtype: int

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_NbSegments(self, *args)


    def GetMesh(self, *args):
        """
        GetMesh(shared_ptr_StdMeshers_FaceSide self) -> SMESH_Mesh

        rief Return mesh

        :rtype: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_GetMesh(self, *args)


    def MissVertexNode(self, *args):
        """
        MissVertexNode(shared_ptr_StdMeshers_FaceSide self) -> bool

        rief Return true if there are vertices without nodes

        :rtype: bool

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_MissVertexNode(self, *args)


    def GetUVPtStruct(self, *args):
        """
        \brief Return detailed data on nodes
        \param isXConst - true if normalized parameter X is constant
        \param constValue - constant parameter value

        Missing nodes are allowed only on internal vertices.
        For a closed side, the 1st point repeats at end

        :type isXConst: bool
        :type constValue: double
        :rtype: UVPtStructVec

        """
        res = _StdMeshers.shared_ptr_StdMeshers_FaceSide_GetUVPtStruct(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SimulateUVPtStruct(self, *args):
        """
        \brief Simulates detailed data on nodes
        \param isXConst - true if normalized parameter X is constant
        \param constValue - constant parameter value

        :type nbSeg: int
        :type isXConst: bool
        :type constValue: double
        :rtype: UVPtStructVec

        """
        res = _StdMeshers.shared_ptr_StdMeshers_FaceSide_SimulateUVPtStruct(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetOrderedNodes(self, *args):
        """
        GetOrderedNodes(shared_ptr_StdMeshers_FaceSide self, int iE) -> std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > >

        rief Return nodes in the order they encounter while walking along
        the whole side or a specified EDGE. For a closed side, the 1st point repeats at end.
        \param iE - index of the EDGE. Default is "all EDGEs".

        :type iE: int
        :rtype: OCC.wrapper.StdMeshers.vector_SMDS_MeshNode

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_GetOrderedNodes(self, *args)


    def GetEdgeNodes(self, *args):
        """
        GetEdgeNodes(shared_ptr_StdMeshers_FaceSide self, size_t const i, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > & nodes, bool inlude1stVertex=True, bool inludeLastVertex=True) -> bool

        rief Return nodes of the i-th EDGE.
        Nodes moved to other geometry by MergeNodes() are also returned.
        etval bool - is OK

        :type i: size_t
        :type nodes: OCC.wrapper.StdMeshers.vector_SMDS_MeshNode
        :type inlude1stVertex: bool
        :type inludeLastVertex: bool
        :rtype: bool

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_GetEdgeNodes(self, *args)


    def VertexNode(self, *args):
        """
        VertexNode(shared_ptr_StdMeshers_FaceSide self, std::size_t i, bool * isMoved=None) -> SMDS_MeshNode

        rief Return a node from the i-th VERTEX (count starts from zero)
        Nodes moved to other geometry by MergeNodes() are also returned.

        :type i: size_t
        :type isMoved: bool *
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_VertexNode(self, *args)


    def Parameter(self, *args):
        """
        Parameter(shared_ptr_StdMeshers_FaceSide self, double U, TopoDS_Edge edge) -> double
        Parameter(shared_ptr_StdMeshers_FaceSide self, double U) -> double

        rief Return an edge ID and parameter on the edge by a normalized parameter
        \param U - normalized parameter
        etval double - pameter on a curve
        \ warning The returned parameter can be inaccurate if the edge is non-uniformly
        parametrized. Use Value2d() to get a precise point on the edge

        :type U: double
        :type edgeID: int &
        :rtype: double

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_Parameter(self, *args)


    def Value2d(self, *args):
        """
        Value2d(shared_ptr_StdMeshers_FaceSide self, double U) -> gp_Pnt2d

        rief Return UV by normalized parameter

        :type U: double
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_Value2d(self, *args)


    def Value3d(self, *args):
        """
        Value3d(shared_ptr_StdMeshers_FaceSide self, double U) -> gp_Pnt

        rief Return XYZ by normalized parameter

        :type U: double
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_Value3d(self, *args)


    def GetCurve2d(self, *args):
        """
        GetCurve2d(shared_ptr_StdMeshers_FaceSide self) -> Adaptor2d_Curve2d

        rief Creates a Adaptor2d_Curve2d to be used in SMESH_Block

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_GetCurve2d(self, *args)


    def GetCurve3d(self, *args):
        """
        GetCurve3d(shared_ptr_StdMeshers_FaceSide self) -> BRepAdaptor_CompCurve

        rief Creates a fully functional Adaptor_Curve

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_CompCurve

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_GetCurve3d(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(shared_ptr_StdMeshers_FaceSide self) -> int

        rief Return nb of wrapped edges

        :rtype: int

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_NbEdges(self, *args)


    def Edge(self, *args):
        """
        \brief Return i-th edge (count starts from zero)

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _StdMeshers.shared_ptr_StdMeshers_FaceSide_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Edges(self, *args):
        """
        \brief Return all edges

        :rtype: OCC.wrapper.StdMeshers.vector_TopoDS_Edge

        """
        res = _StdMeshers.shared_ptr_StdMeshers_FaceSide_Edges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Face(self, *args):
        """
        \brief Return the FACE

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _StdMeshers.shared_ptr_StdMeshers_FaceSide_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstVertex(self, *args):
        """
        FirstVertex(shared_ptr_StdMeshers_FaceSide self, int i=0) -> TopoDS_Vertex

        rief Return 1st vertex of the i-th edge (count starts from zero)

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_FirstVertex(self, *args)


    def LastVertex(self, *args):
        """
        LastVertex(shared_ptr_StdMeshers_FaceSide self, int i) -> TopoDS_Vertex

        rief Return last vertex of the i-th edge (count starts from zero)

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_LastVertex(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(shared_ptr_StdMeshers_FaceSide self) -> bool

        rief Return \c true if the chain of EDGEs is closed

        :rtype: bool

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_IsClosed(self, *args)


    def Length(self, *args):
        """
        Length(shared_ptr_StdMeshers_FaceSide self) -> double

        rief Return side length

        :rtype: double

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_Length(self, *args)


    def EdgeIndex(self, *args):
        """
        EdgeIndex(shared_ptr_StdMeshers_FaceSide self, double U) -> int

        rief Return edge index corresponding to normalized parameter

        :type U: double
        :rtype: int

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_EdgeIndex(self, *args)


    def dump(self, *args):
        """
        dump(shared_ptr_StdMeshers_FaceSide self, char const * msg=None)

        :type msg: const char *

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_dump(self, *args)


    def EdgeID(self, *args):
        """
        EdgeID(shared_ptr_StdMeshers_FaceSide self, int i) -> int

        rief Return ID of i-th wrapped edge (count starts from zero)

        :type i: int
        :rtype: int

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_EdgeID(self, *args)


    def Curve2d(self, *args):
        """
        Curve2d(shared_ptr_StdMeshers_FaceSide self, int i) -> Handle_Geom2d_Curve

        rief Return p-curve of i-th wrapped edge (count starts from zero)

        :type i: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_Curve2d(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(shared_ptr_StdMeshers_FaceSide self, int i) -> double

        rief Return first normalized parameter of the i-th edge (count starts from zero)

        :type i: int
        :rtype: double

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(shared_ptr_StdMeshers_FaceSide self, int i) -> double

        rief Return last normalized parameter of the i-th edge (count starts from zero)

        :type i: int
        :rtype: double

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_LastParameter(self, *args)


    def FirstU(self, *args):
        """
        FirstU(shared_ptr_StdMeshers_FaceSide self, int i) -> double

        rief Return first parameter of the i-th edge (count starts from zero).
        EDGE orientation is taken into account

        :type i: int
        :rtype: double

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_FirstU(self, *args)


    def LastU(self, *args):
        """
        LastU(shared_ptr_StdMeshers_FaceSide self, int i) -> double

        rief Return last parameter of the i-th edge (count starts from zero).
        EDGE orientation is taken into account

        :type i: int
        :rtype: double

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_LastU(self, *args)


    def EdgeLength(self, *args):
        """
        EdgeLength(shared_ptr_StdMeshers_FaceSide self, int i) -> double

        rief Return length of i-th wrapped edge (count starts from zero)

        :type i: int
        :rtype: double

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_EdgeLength(self, *args)


    def IsReversed(self, *args):
        """
        IsReversed(shared_ptr_StdMeshers_FaceSide self, int i) -> bool

        rief Return orientation of i-th wrapped edge (count starts from zero)

        :type i: int
        :rtype: bool

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_IsReversed(self, *args)


    def FaceHelper(self, *args):
        """
        FaceHelper(shared_ptr_StdMeshers_FaceSide self) -> SMESH_MesherHelper

        rief Return a helper initialized with the FACE

        :rtype: OCC.wrapper.SMESH.SMESH_MesherHelper

        """
        return _StdMeshers.shared_ptr_StdMeshers_FaceSide_FaceHelper(self, *args)

shared_ptr_StdMeshers_FaceSide_swigregister = _StdMeshers.shared_ptr_StdMeshers_FaceSide_swigregister
shared_ptr_StdMeshers_FaceSide_swigregister(shared_ptr_StdMeshers_FaceSide)


try:
	StdMeshers_FaceSidePtr = shared_ptr_StdMeshers_FaceSide
except NameError:
	pass # does not exist, probably ignored

class StdMeshers_QuadraticMesh(SMESH.SMESH_Hypothesis):
    """
    rief Hypothesis for StdMeshers_Regular_1D, forcing construction of quadratic edges.
    If the 2D mesher sees that all boundary edges are quadratic ones,
    it generates quadratic faces, else it generates linear faces using
    medium nodes as if they were vertex ones.
    The 3D mesher generates quadratic volumes only if all boundary faces
    are quadratic ones, else it fails.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_QuadraticMesh self, int hypId, SMESH_Gen gen) -> StdMeshers_QuadraticMesh

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_QuadraticMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_QuadraticMesh self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_QuadraticMesh_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_QuadraticMesh self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_QuadraticMesh_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_QuadraticMesh self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize my parameter values by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Just return false as this hypothesis does not have parameters values

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadraticMesh_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_QuadraticMesh self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadraticMesh_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_QuadraticMesh
StdMeshers_QuadraticMesh_swigregister = _StdMeshers.StdMeshers_QuadraticMesh_swigregister
StdMeshers_QuadraticMesh_swigregister(StdMeshers_QuadraticMesh)

class StdMeshers_Penta_3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(StdMeshers_Penta_3D self) -> StdMeshers_Penta_3D"""
        this = _StdMeshers.new_StdMeshers_Penta_3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Compute(self, *args):
        """
        Compute(StdMeshers_Penta_3D self, SMESH_Mesh arg2, TopoDS_Shape arg3) -> bool

        :type : OCC.wrapper.SMESH.SMESH_Mesh
        :type : OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Penta_3D_Compute(self, *args)


    def ErrorStatus(self, *args):
        """
        ErrorStatus(StdMeshers_Penta_3D self) -> int

        :rtype: int

        """
        return _StdMeshers.StdMeshers_Penta_3D_ErrorStatus(self, *args)


    def GetComputeError(self, *args):
        """
        GetComputeError(StdMeshers_Penta_3D self) -> shared_ptr_SMESH_ComputeError

        :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

        """
        return _StdMeshers.StdMeshers_Penta_3D_GetComputeError(self, *args)


    def SetTolerance(self, *args):
        """
        SetTolerance(StdMeshers_Penta_3D self, double const theTol3D)

        :type theTol3D: const double

        """
        return _StdMeshers.StdMeshers_Penta_3D_SetTolerance(self, *args)


    def Tolerance(self, *args):
        """
        Tolerance(StdMeshers_Penta_3D self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_Penta_3D_Tolerance(self, *args)


    def LoadIJNodes(self, *args):
        """
        LoadIJNodes(StdMeshers_Penta_3D self, StdMeshers_IJNodeMap & theIJNodes, TopoDS_Face theFace, TopoDS_Edge theBaseEdge, SMESHDS_Mesh theMesh) -> bool

        :type theIJNodes: OCC.wrapper.StdMeshers.StdMeshers_IJNodeMap
        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type theBaseEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theMesh: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Penta_3D_LoadIJNodes(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Penta_3D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Penta_3D_Evaluate(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Penta_3D
StdMeshers_Penta_3D_swigregister = _StdMeshers.StdMeshers_Penta_3D_swigregister
StdMeshers_Penta_3D_swigregister(StdMeshers_Penta_3D)

class StdMeshers_StartEndLength(StdMeshers_Reversible1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_StartEndLength self, int hypId, SMESH_Gen gen) -> StdMeshers_StartEndLength

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_StartEndLength(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetLength(self, *args):
        """
        SetLength(StdMeshers_StartEndLength self, double length, bool isStartLength)

        :type length: double
        :type isStartLength: bool

        """
        return _StdMeshers.StdMeshers_StartEndLength_SetLength(self, *args)


    def GetLength(self, *args):
        """
        GetLength(StdMeshers_StartEndLength self, bool isStartLength) -> double

        :type isStartLength: bool
        :rtype: double

        """
        return _StdMeshers.StdMeshers_StartEndLength_GetLength(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_StartEndLength self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_StartEndLength_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_StartEndLength self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_StartEndLength_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_StartEndLength self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize start and end length by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_StartEndLength_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_StartEndLength self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_StartEndLength_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_StartEndLength
StdMeshers_StartEndLength_swigregister = _StdMeshers.StdMeshers_StartEndLength_swigregister
StdMeshers_StartEndLength_swigregister(StdMeshers_StartEndLength)

class StdMeshers_UseExisting_2D(SMESH.SMESH_2D_Algo):
    """
    rief 1D and 2D algorithms doing nothing to allow mesh generation
    by mesh edition functions in TUI mode
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_UseExisting_2D self, int hypId, SMESH_Gen gen) -> StdMeshers_UseExisting_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_UseExisting_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_UseExisting_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_UseExisting_2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_UseExisting_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_UseExisting_2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_UseExisting_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_UseExisting_2D_Evaluate(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_UseExisting_2D
StdMeshers_UseExisting_2D_swigregister = _StdMeshers.StdMeshers_UseExisting_2D_swigregister
StdMeshers_UseExisting_2D_swigregister(StdMeshers_UseExisting_2D)

class StdMeshers_ProjectionSource1D(SMESH.SMESH_Hypothesis):
    """
    This hypothesis specifies a meshed edge to take a mesh pattern from
    and optionally association of vertices between the source edge and a
    target one (where a hipothesis is assigned to)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_ProjectionSource1D self, int hypId, SMESH_Gen gen) -> StdMeshers_ProjectionSource1D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_ProjectionSource1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetSourceEdge(self, *args):
        """
        SetSourceEdge(StdMeshers_ProjectionSource1D self, TopoDS_Shape edge)

        Sets source <edge> to take a mesh pattern from

        :type edge: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_SetSourceEdge(self, *args)


    def GetSourceEdge(self, *args):
        """
        GetSourceEdge(StdMeshers_ProjectionSource1D self) -> TopoDS_Shape

        Returns the source edge or a group containing edges

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_GetSourceEdge(self, *args)


    def IsCompoundSource(self, *args):
        """
        IsCompoundSource(StdMeshers_ProjectionSource1D self) -> bool

        Returns true the source edge is a group of edges

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_IsCompoundSource(self, *args)


    def SetSourceMesh(self, *args):
        """
        SetSourceMesh(StdMeshers_ProjectionSource1D self, SMESH_Mesh mesh)

        Sets source <mesh> to take a mesh pattern from

        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_SetSourceMesh(self, *args)


    def GetSourceMesh(self, *args):
        """
        GetSourceMesh(StdMeshers_ProjectionSource1D self) -> SMESH_Mesh

        Return source mesh

        :rtype: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_GetSourceMesh(self, *args)


    def SetVertexAssociation(self, *args):
        """
        SetVertexAssociation(StdMeshers_ProjectionSource1D self, TopoDS_Shape sourceVertex, TopoDS_Shape targetVertex)

        Sets vertex association between the source edge and the target one.
        This parameter is optional

        :type sourceVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type targetVertex: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_SetVertexAssociation(self, *args)


    def GetSourceVertex(self, *args):
        """
        GetSourceVertex(StdMeshers_ProjectionSource1D self) -> TopoDS_Vertex

        Returns the vertex associated with the target vertex.
        Result may be nil if association not set

        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_GetSourceVertex(self, *args)


    def GetTargetVertex(self, *args):
        """
        GetTargetVertex(StdMeshers_ProjectionSource1D self) -> TopoDS_Vertex

        Returns the vertex associated with the source vertex.
        Result may be nil if association not set

        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_GetTargetVertex(self, *args)


    def HasVertexAssociation(self, *args):
        """
        HasVertexAssociation(StdMeshers_ProjectionSource1D self) -> bool

        rief Test if vertex association defined
        etval bool - test result

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_HasVertexAssociation(self, *args)


    def GetStoreParams(self, *args):
        """
        GetStoreParams(StdMeshers_ProjectionSource1D self, TopoDS_Shape s1, TopoDS_Shape s2, TopoDS_Shape s3)

        rief Return all parameters

        :type s1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s3: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_GetStoreParams(self, *args)


    def RestoreParams(self, *args):
        """
        RestoreParams(StdMeshers_ProjectionSource1D self, TopoDS_Shape s1, TopoDS_Shape s2, TopoDS_Shape s3, SMESH_Mesh mesh)

        rief Set all parameters without notifying on modification

        :type s1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s3: OCC.wrapper.TopoDS.TopoDS_Shape
        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_RestoreParams(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_ProjectionSource1D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_ProjectionSource1D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_ProjectionSource1D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize parameters by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Implementation does noting

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_ProjectionSource1D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource1D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_ProjectionSource1D
StdMeshers_ProjectionSource1D_swigregister = _StdMeshers.StdMeshers_ProjectionSource1D_swigregister
StdMeshers_ProjectionSource1D_swigregister(StdMeshers_ProjectionSource1D)

class StdMeshers_MaxElementArea(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_MaxElementArea self, int hypId, SMESH_Gen gen) -> StdMeshers_MaxElementArea

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_MaxElementArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetMaxArea(self, *args):
        """
        SetMaxArea(StdMeshers_MaxElementArea self, double maxArea)

        :type maxArea: double

        """
        return _StdMeshers.StdMeshers_MaxElementArea_SetMaxArea(self, *args)


    def GetMaxArea(self, *args):
        """
        GetMaxArea(StdMeshers_MaxElementArea self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_MaxElementArea_GetMaxArea(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_MaxElementArea self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_MaxElementArea_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_MaxElementArea self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_MaxElementArea_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_MaxElementArea self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize maximal area by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MaxElementArea_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_MaxElementArea self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MaxElementArea_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_MaxElementArea
StdMeshers_MaxElementArea_swigregister = _StdMeshers.StdMeshers_MaxElementArea_swigregister
StdMeshers_MaxElementArea_swigregister(StdMeshers_MaxElementArea)

class StdMeshers_QuadToTriaAdaptor(SMESH.SMESH_ProxyMesh):
    """rief "Transforms" quadrilateral faces into triangular ones by creation of pyramids"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_QuadToTriaAdaptor self) -> StdMeshers_QuadToTriaAdaptor

        rief "Transforms" quadrilateral faces into triangular ones by creation of pyramids
        """
        this = _StdMeshers.new_StdMeshers_QuadToTriaAdaptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Compute(self, *args):
        """
        Compute(StdMeshers_QuadToTriaAdaptor self, SMESH_Mesh aMesh, TopoDS_Shape aShape, SMESH_ProxyMesh aProxyMesh=None) -> bool
        Compute(StdMeshers_QuadToTriaAdaptor self, SMESH_Mesh aMesh) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_QuadToTriaAdaptor_Compute(self, *args)


    def GetShape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _StdMeshers.StdMeshers_QuadToTriaAdaptor_GetShape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdMeshers.delete_StdMeshers_QuadToTriaAdaptor
StdMeshers_QuadToTriaAdaptor_swigregister = _StdMeshers.StdMeshers_QuadToTriaAdaptor_swigregister
StdMeshers_QuadToTriaAdaptor_swigregister(StdMeshers_QuadToTriaAdaptor)


try:
	Ptr = SMESH.shared_ptr_FaceQuadStruct
except AttributeError:
	pass # does not exist, probably ignored

class StdMeshers_ProjectionSource2D(SMESH.SMESH_Hypothesis):
    """
    This hypothesis specifies a meshed face to take a mesh pattern from
    and optionally association of vertices between the source face and a
    target one (where a hipothesis is assigned to)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_ProjectionSource2D self, int hypId, SMESH_Gen gen) -> StdMeshers_ProjectionSource2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_ProjectionSource2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetSourceFace(self, *args):
        """
        SetSourceFace(StdMeshers_ProjectionSource2D self, TopoDS_Shape face)

        Sets a source <face> to take a mesh pattern from

        :type face: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_SetSourceFace(self, *args)


    def GetSourceFace(self, *args):
        """
        GetSourceFace(StdMeshers_ProjectionSource2D self) -> TopoDS_Shape

        Returns the source face or a group containing faces

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_GetSourceFace(self, *args)


    def IsCompoundSource(self, *args):
        """
        IsCompoundSource(StdMeshers_ProjectionSource2D self) -> bool

        Returns true the source face is a group of faces

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_IsCompoundSource(self, *args)


    def SetSourceMesh(self, *args):
        """
        SetSourceMesh(StdMeshers_ProjectionSource2D self, SMESH_Mesh mesh)

        Sets source <mesh> to take a mesh pattern from

        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_SetSourceMesh(self, *args)


    def GetSourceMesh(self, *args):
        """
        GetSourceMesh(StdMeshers_ProjectionSource2D self) -> SMESH_Mesh

        Return source mesh

        :rtype: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_GetSourceMesh(self, *args)


    def SetVertexAssociation(self, *args):
        """
        SetVertexAssociation(StdMeshers_ProjectionSource2D self, TopoDS_Shape sourceVertex1, TopoDS_Shape sourceVertex2, TopoDS_Shape targetVertex1, TopoDS_Shape targetVertex2)

        Sets vertex association between the source face and the target one.
        This parameter is optional.
        Two vertices must belong to one edge of a face

        :type sourceVertex1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type sourceVertex2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type targetVertex1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type targetVertex2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_SetVertexAssociation(self, *args)


    def GetSourceVertex(self, *args):
        """
        GetSourceVertex(StdMeshers_ProjectionSource2D self, int i) -> TopoDS_Vertex

        Returns the <i>-th source vertex associated with the <i>-th target vertex.
        Result may be nil if association not set.
        Valid indices are 1 and 2

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_GetSourceVertex(self, *args)


    def GetTargetVertex(self, *args):
        """
        GetTargetVertex(StdMeshers_ProjectionSource2D self, int i) -> TopoDS_Vertex

        Returns the <i>-th target vertex associated with the <i>-th source vertex.
        Result may be nil if association not set.
        Valid indices are 1 and 2

        :type i: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_GetTargetVertex(self, *args)


    def HasVertexAssociation(self, *args):
        """
        HasVertexAssociation(StdMeshers_ProjectionSource2D self) -> bool

        rief Test if vertex association defined
        etval bool - test result

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_HasVertexAssociation(self, *args)


    def GetStoreParams(self, *args):
        """
        GetStoreParams(StdMeshers_ProjectionSource2D self, TopoDS_Shape s1, TopoDS_Shape s2, TopoDS_Shape s3, TopoDS_Shape s4, TopoDS_Shape s5)

        rief Return all parameters

        :type s1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s3: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s4: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s5: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_GetStoreParams(self, *args)


    def RestoreParams(self, *args):
        """
        RestoreParams(StdMeshers_ProjectionSource2D self, TopoDS_Shape s1, TopoDS_Shape s2, TopoDS_Shape s3, TopoDS_Shape s4, TopoDS_Shape s5, SMESH_Mesh mesh)

        rief Set all parameters without notifying on modification

        :type s1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s3: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s4: OCC.wrapper.TopoDS.TopoDS_Shape
        :type s5: OCC.wrapper.TopoDS.TopoDS_Shape
        :type mesh: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_RestoreParams(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_ProjectionSource2D self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_ProjectionSource2D self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_ProjectionSource2D self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize parameters by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        Implementation does noting

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_ProjectionSource2D self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_ProjectionSource2D_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_ProjectionSource2D
StdMeshers_ProjectionSource2D_swigregister = _StdMeshers.StdMeshers_ProjectionSource2D_swigregister
StdMeshers_ProjectionSource2D_swigregister(StdMeshers_ProjectionSource2D)

class StdMeshers_MaxElementVolume(SMESH.SMESH_Hypothesis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_MaxElementVolume self, int hypId, SMESH_Gen gen) -> StdMeshers_MaxElementVolume

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_MaxElementVolume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetMaxVolume(self, *args):
        """
        SetMaxVolume(StdMeshers_MaxElementVolume self, double maxVolume)

        :type maxVolume: double

        """
        return _StdMeshers.StdMeshers_MaxElementVolume_SetMaxVolume(self, *args)


    def GetMaxVolume(self, *args):
        """
        GetMaxVolume(StdMeshers_MaxElementVolume self) -> double

        :rtype: double

        """
        return _StdMeshers.StdMeshers_MaxElementVolume_GetMaxVolume(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(StdMeshers_MaxElementVolume self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _StdMeshers.StdMeshers_MaxElementVolume_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(StdMeshers_MaxElementVolume self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _StdMeshers.StdMeshers_MaxElementVolume_LoadFrom(self, *args)


    def SetParametersByMesh(self, *args):
        """
        SetParametersByMesh(StdMeshers_MaxElementVolume self, SMESH_Mesh theMesh, TopoDS_Shape theShape) -> bool

        rief Initialize maximal volume by the mesh built on the geometry
        \param theMesh - the built mesh
        \param theShape - the geometry of interest
        etval bool - true if parameter values have been successfully defined

        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MaxElementVolume_SetParametersByMesh(self, *args)


    def SetParametersByDefaults(self, *args):
        """
        SetParametersByDefaults(StdMeshers_MaxElementVolume self, SMESH_Hypothesis::TDefaults const & dflts, SMESH_Mesh theMesh=None) -> bool

        rief Initialize my parameter values by default parameters.
        etval bool - true if parameter values have been successfully defined

        :type dflts: TDefaults
        :type theMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_MaxElementVolume_SetParametersByDefaults(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_MaxElementVolume
StdMeshers_MaxElementVolume_swigregister = _StdMeshers.StdMeshers_MaxElementVolume_swigregister
StdMeshers_MaxElementVolume_swigregister(StdMeshers_MaxElementVolume)

class StdMeshers_Projection_1D2D(StdMeshers_Projection_2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_Projection_1D2D self, int hypId, SMESH_Gen gen) -> StdMeshers_Projection_1D2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_Projection_1D2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Compute(self, *args):
        """
        Compute(StdMeshers_Projection_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_1D2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_Projection_1D2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_Projection_1D2D_Evaluate(self, *args)


    def SetEventListener(self, *args):
        """
        SetEventListener(StdMeshers_Projection_1D2D self, SMESH_subMesh whenSetToSubMesh)

        rief Sets a default event listener to submesh of the source face
        \param whenSetToSubMesh - submesh where algo is set

        After being set, event listener is notified on each event of a submesh.
        This method is called when a submesh gets HYP_OK algo_state.
        Arranges that CLEAN event is translated from source submesh to
        the whenSetToSubMesh submesh.

        :type whenSetToSubMesh: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_Projection_1D2D_SetEventListener(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_Projection_1D2D
StdMeshers_Projection_1D2D_swigregister = _StdMeshers.StdMeshers_Projection_1D2D_swigregister
StdMeshers_Projection_1D2D_swigregister(StdMeshers_Projection_1D2D)

class StdMeshers_PrismAsBlock(SMESH.SMESH_Block):
    """
    rief Tool analyzing and giving access to a prism geometry 
    treating it like a block, i.e. the four side faces are
    emulated by division/uniting of missing/excess faces.
    It also manage associations between block sub-shapes and a mesh.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_PrismAsBlock self) -> StdMeshers_PrismAsBlock

        rief Constructor. Initialization is needed


        """
        this = _StdMeshers.new_StdMeshers_PrismAsBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(StdMeshers_PrismAsBlock self, SMESH_MesherHelper helper, Prism_3D::TPrismTopo const & prism) -> bool

        rief Initialization.
        \param helper - helper loaded with mesh and 3D shape
        \param prism - prism topology
        etval bool - false if a mesh or a shape are KO

        :type helper: OCC.wrapper.SMESH.SMESH_MesherHelper
        :type prism: TPrismTopo
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_Init(self, *args)


    def GetError(self, *args):
        """
        GetError(StdMeshers_PrismAsBlock self) -> shared_ptr_SMESH_ComputeError

        rief Return problem description

        :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_GetError(self, *args)


    def Clear(self, *args):
        """
        Clear(StdMeshers_PrismAsBlock self)

        rief Free allocated memory


        """
        return _StdMeshers.StdMeshers_PrismAsBlock_Clear(self, *args)


    def VerticalSize(self, *args):
        """
        VerticalSize(StdMeshers_PrismAsBlock self) -> int

        rief Return number of nodes on every vertical edge
        etval int - number of nodes including end nodes

        :rtype: int

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_VerticalSize(self, *args)


    def HasNotQuadElemOnTop(self, *args):
        """
        HasNotQuadElemOnTop(StdMeshers_PrismAsBlock self) -> bool

        :rtype: bool

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_HasNotQuadElemOnTop(self, *args)


    def GetNodeColumn(self, *args):
        """
        GetNodeColumn(StdMeshers_PrismAsBlock self, SMDS_MeshNode node) -> TNodeColumn const *

        rief Return pointer to column of nodes
        \param node - bottom node from which the returned column goes up
        etval const TNodeColumn* - the found column

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: TNodeColumn

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_GetNodeColumn(self, *args)


    def GetParam2ColumnMap(self, *args):
        """
        GetParam2ColumnMap(StdMeshers_PrismAsBlock self, int const baseEdgeID, bool & isReverse) -> TParam2ColumnMap const *

        rief Return TParam2ColumnMap for a base edge
        \param baseEdgeID - base edge SMESHDS Index
        \param isReverse - columns in-block orientation
        etval const TParam2ColumnMap* - map

        :type baseEdgeID: const int
        :type isReverse: bool &
        :rtype: TParam2ColumnMap

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_GetParam2ColumnMap(self, *args)


    def HasNodeColumn(self, *args):
        """
        HasNodeColumn(StdMeshers_PrismAsBlock self, SMDS_MeshNode node) -> bool

        rief Return pointer to column of nodes
        \param node - bottom node from which the returned column goes up
        etval const TNodeColumn* - the found column

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_HasNodeColumn(self, *args)


    def GetLayersTransformation(self, *args):
        """
        GetLayersTransformation(StdMeshers_PrismAsBlock self, std::vector< gp_Trsf,std::allocator< gp_Trsf > > & trsf, Prism_3D::TPrismTopo const & prism) -> bool

        rief Return transformations to get coordinates of nodes of each internal layer
        by nodes of the bottom. Layer is a set of nodes at a certain step
        from bottom to top.

        :type trsf: OCC.wrapper.StdMeshers.vector_gp_Trsf
        :type prism: TPrismTopo
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_GetLayersTransformation(self, *args)


    def Mesh(self, *args):
        """
        Mesh(StdMeshers_PrismAsBlock self) -> SMESH_Mesh

        rief Return pointer to mesh
        etval SMESH_Mesh - mesh

        :rtype: OCC.wrapper.SMESH.SMESH_Mesh

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_Mesh(self, *args)


    def MeshDS(self, *args):
        """
        MeshDS(StdMeshers_PrismAsBlock self) -> SMESHDS_Mesh

        rief Return pointer to mesh DS
        etval SMESHDS_Mesh - mesh DS

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Mesh

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_MeshDS(self, *args)


    def SubMesh(self, *args):
        """
        SubMesh(StdMeshers_PrismAsBlock self, int const shapeID) -> SMESH_subMesh

        rief Return submesh of a shape
        \param shapeID - shape given by in-block index
        etval SMESH_subMesh* - found submesh

        :type shapeID: const int
        :rtype: OCC.wrapper.SMESH.SMESH_subMesh

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_SubMesh(self, *args)


    def SubMeshDS(self, *args):
        """
        SubMeshDS(StdMeshers_PrismAsBlock self, int const shapeID) -> SMESHDS_SubMesh

        rief Return submesh DS of a shape
        \param shapeID - shape given by in-block index
        etval SMESHDS_SubMesh* - found submesh DS

        :type shapeID: const int
        :rtype: OCC.wrapper.SMESHDS.SMESHDS_SubMesh

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_SubMeshDS(self, *args)


    def Shape(self, *args):
        """
        \brief Return a in-block shape
        \param shapeID - shape given by in-block index
        \retval SMESHDS_SubMesh* - found submesh

        :type shapeID: const int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _StdMeshers.StdMeshers_PrismAsBlock_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ShapeID(self, *args):
        """
        ShapeID(StdMeshers_PrismAsBlock self, TopoDS_Shape shape) -> int

        rief Return in-block ID of a shape
        \param shape - block sub-shape
        etval int - ID or zero if the shape has no ID

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: int

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_ShapeID(self, *args)


    def IsForwardEdge(*args):
        """
        IsForwardEdge(SMESHDS_Mesh meshDS, TParam2ColumnMap const & columnsMap, TopoDS_Edge bottomEdge, int const sideFaceID) -> bool

        rief Check curve orientation of a bottom edge
        \param meshDS - mesh DS
        \param columnsMap - node columns map of side face
        \param bottomEdge - the bottom edge
        \param sideFaceID - side face in-block ID
        etval bool - true if orientation coincide with in-block forward orientation

        :type meshDS: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :type columnsMap: TParam2ColumnMap
        :type bottomEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type sideFaceID: const int
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_PrismAsBlock_IsForwardEdge(*args)

    IsForwardEdge = staticmethod(IsForwardEdge)
    __swig_destroy__ = _StdMeshers.delete_StdMeshers_PrismAsBlock
StdMeshers_PrismAsBlock_swigregister = _StdMeshers.StdMeshers_PrismAsBlock_swigregister
StdMeshers_PrismAsBlock_swigregister(StdMeshers_PrismAsBlock)

def StdMeshers_PrismAsBlock_IsForwardEdge(*args):
    """
    StdMeshers_PrismAsBlock_IsForwardEdge(SMESHDS_Mesh meshDS, TParam2ColumnMap const & columnsMap, TopoDS_Edge bottomEdge, int const sideFaceID) -> bool

    rief Check curve orientation of a bottom edge
    \param meshDS - mesh DS
    \param columnsMap - node columns map of side face
    \param bottomEdge - the bottom edge
    \param sideFaceID - side face in-block ID
    etval bool - true if orientation coincide with in-block forward orientation

    :type meshDS: OCC.wrapper.SMESHDS.SMESHDS_Mesh
    :type columnsMap: TParam2ColumnMap
    :type bottomEdge: OCC.wrapper.TopoDS.TopoDS_Edge
    :type sideFaceID: const int
    :rtype: bool

    """
    return _StdMeshers.StdMeshers_PrismAsBlock_IsForwardEdge(*args)

class StdMeshers_SMESHBlock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(StdMeshers_SMESHBlock self) -> StdMeshers_SMESHBlock"""
        this = _StdMeshers.new_StdMeshers_SMESHBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(StdMeshers_SMESHBlock self, TopoDS_Shell theShell)
        Load(StdMeshers_SMESHBlock self, TopoDS_Shell theShell, TopoDS_Vertex theV000, TopoDS_Vertex theV001)

        :type theShell: OCC.wrapper.TopoDS.TopoDS_Shell
        :type theV000: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type theV001: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _StdMeshers.StdMeshers_SMESHBlock_Load(self, *args)


    def ComputeParameters(self, *args):
        """
        ComputeParameters(StdMeshers_SMESHBlock self, gp_Pnt thePnt, gp_XYZ theXYZ)
        ComputeParameters(StdMeshers_SMESHBlock self, gp_Pnt thePnt, TopoDS_Shape theShape, gp_XYZ theXYZ)
        ComputeParameters(StdMeshers_SMESHBlock self, double const & theU, TopoDS_Shape theShape, gp_XYZ theXYZ)

        :type theU: const double &
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theXYZ: OCC.wrapper.gp.gp_XYZ

        """
        return _StdMeshers.StdMeshers_SMESHBlock_ComputeParameters(self, *args)


    def Point(self, *args):
        """
        Point(StdMeshers_SMESHBlock self, gp_XYZ theParams, gp_Pnt thePnt)
        Point(StdMeshers_SMESHBlock self, gp_XYZ theParams, TopoDS_Shape theShape, gp_Pnt thePnt)

        :type theParams: OCC.wrapper.gp.gp_XYZ
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _StdMeshers.StdMeshers_SMESHBlock_Point(self, *args)


    def ShapeID(self, *args):
        """
        ShapeID(StdMeshers_SMESHBlock self, TopoDS_Shape theShape) -> int

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: int

        """
        return _StdMeshers.StdMeshers_SMESHBlock_ShapeID(self, *args)


    def Shape(self, *args):
        """
        :type theID: const int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _StdMeshers.StdMeshers_SMESHBlock_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Block(self, *args):
        """
        Block(StdMeshers_SMESHBlock self) -> SMESH_Block

        :rtype: OCC.wrapper.SMESH.SMESH_Block

        """
        return _StdMeshers.StdMeshers_SMESHBlock_Block(self, *args)


    def IsForwardEdge(self, *args):
        """
        IsForwardEdge(StdMeshers_SMESHBlock self, int const theEdgeID) -> bool

        :type theEdgeID: const int
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_SMESHBlock_IsForwardEdge(self, *args)


    def ErrorStatus(self, *args):
        """
        ErrorStatus(StdMeshers_SMESHBlock self) -> int

        :rtype: int

        """
        return _StdMeshers.StdMeshers_SMESHBlock_ErrorStatus(self, *args)


    def GetError(self, *args):
        """
        GetError(StdMeshers_SMESHBlock self) -> shared_ptr_SMESH_ComputeError

        :rtype: OCC.wrapper.SMESH.SMESH_ComputeErrorPtr

        """
        return _StdMeshers.StdMeshers_SMESHBlock_GetError(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_SMESHBlock
StdMeshers_SMESHBlock_swigregister = _StdMeshers.StdMeshers_SMESHBlock_swigregister
StdMeshers_SMESHBlock_swigregister(StdMeshers_SMESHBlock)

class StdMeshers_PolygonPerFace_2D(SMESH.SMESH_2D_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdMeshers_PolygonPerFace_2D self, int hypId, SMESH_Gen gen) -> StdMeshers_PolygonPerFace_2D

        :type hypId: int
        :type gen: OCC.wrapper.SMESH.SMESH_Gen

        """
        this = _StdMeshers.new_StdMeshers_PolygonPerFace_2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckHypothesis(self, *args):
        """
        CheckHypothesis(StdMeshers_PolygonPerFace_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aStatus: Hypothesis_Status
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_PolygonPerFace_2D_CheckHypothesis(self, *args)


    def Compute(self, *args):
        """
        Compute(StdMeshers_PolygonPerFace_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_PolygonPerFace_2D_Compute(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(StdMeshers_PolygonPerFace_2D self, SMESH_Mesh aMesh, TopoDS_Shape aShape, MapShapeNbElems & aResMap) -> bool

        :type aMesh: OCC.wrapper.SMESH.SMESH_Mesh
        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aResMap: MapShapeNbElems
        :rtype: bool

        """
        return _StdMeshers.StdMeshers_PolygonPerFace_2D_Evaluate(self, *args)

    __swig_destroy__ = _StdMeshers.delete_StdMeshers_PolygonPerFace_2D
StdMeshers_PolygonPerFace_2D_swigregister = _StdMeshers.StdMeshers_PolygonPerFace_2D_swigregister
StdMeshers_PolygonPerFace_2D_swigregister(StdMeshers_PolygonPerFace_2D)



