# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Adaptor3d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Adaptor3d')
    _Adaptor3d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Adaptor3d', [dirname(__file__)])
        except ImportError:
            import _Adaptor3d
            return _Adaptor3d
        try:
            _mod = imp.load_module('_Adaptor3d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Adaptor3d = swig_import_helper()
    del swig_import_helper
else:
    import _Adaptor3d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Adaptor3d.delete_SwigPyIterator

    def value(self):
        return _Adaptor3d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Adaptor3d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Adaptor3d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Adaptor3d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Adaptor3d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Adaptor3d.SwigPyIterator_copy(self)

    def next(self):
        return _Adaptor3d.SwigPyIterator_next(self)

    def __next__(self):
        return _Adaptor3d.SwigPyIterator___next__(self)

    def previous(self):
        return _Adaptor3d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Adaptor3d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Adaptor3d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Adaptor3d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Adaptor3d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Adaptor3d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Adaptor3d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Adaptor3d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Adaptor3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Adaptor3d.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Adaptor3d.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Adaptor3d.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Adaptor3d.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor3d.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Adaptor3d.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Adaptor3d.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Adaptor3d.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Adaptor3d.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Adaptor3d.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Adaptor3d.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Adaptor3d.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor3d.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Adaptor3d.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Adaptor3d.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Adaptor3d.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Adaptor3d.ptr_to_number(item)
ptr_to_number = _Adaptor3d.ptr_to_number

def HashCode(*args):
    return _Adaptor3d.HashCode(*args)
HashCode = _Adaptor3d.HashCode

def ptr_equal(a, b):
    return _Adaptor3d.ptr_equal(a, b)
ptr_equal = _Adaptor3d.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class Adaptor3d_HCurve(Standard.Standard_Transient):
    """
    Root class for 3D curves manipulated by handles, on
    which geometric algorithms work.
    An adapted curve is an interface between the
    services provided by a curve and those required of
    the curve by algorithms which use it.
    Two derived concrete classes are provided:
    - GeomAdaptor_HCurve for a curve from the Geom package
    - Adaptor3d_HCurveOnSurface for a curve lying
    on a surface from the Geom package.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Adaptor3d_HCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Adaptor3d_HCurve(self) 
            return h


    def Curve(self, *args):
        """
        Returns a pointer to the Curve inside the HCurve.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _Adaptor3d.Adaptor3d_HCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Adaptor3d_HCurve self) -> Adaptor3d_Curve

        Returns a pointer to the Curve inside the HCurve.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _Adaptor3d.Adaptor3d_HCurve_GetCurve(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(Adaptor3d_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Adaptor3d_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Adaptor3d_HCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Adaptor3d_HCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Adaptor3d_HCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Adaptor3d_HCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_HCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Adaptor3d_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Adaptor3d_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Adaptor3d_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Adaptor3d_HCurve self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Adaptor3d_HCurve self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Adaptor3d_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Adaptor3d_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Adaptor3d_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Adaptor3d_HCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Adaptor3d_HCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Adaptor3d_HCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Adaptor3d.Adaptor3d_HCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Adaptor3d_HCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _Adaptor3d.Adaptor3d_HCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Adaptor3d_HCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _Adaptor3d.Adaptor3d_HCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Adaptor3d_HCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _Adaptor3d.Adaptor3d_HCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Adaptor3d_HCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _Adaptor3d.Adaptor3d_HCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Adaptor3d_HCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _Adaptor3d.Adaptor3d_HCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Adaptor3d_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Adaptor3d_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Adaptor3d_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Adaptor3d_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Adaptor3d_HCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Adaptor3d_HCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Adaptor3d_HCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Adaptor3d_HCurve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Adaptor3d_HCurve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _Adaptor3d.Adaptor3d_HCurve_OffsetCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Adaptor3d_HCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Adaptor3d.Adaptor3d_HCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Adaptor3d_HCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HCurve
Adaptor3d_HCurve_swigregister = _Adaptor3d.Adaptor3d_HCurve_swigregister
Adaptor3d_HCurve_swigregister(Adaptor3d_HCurve)

def Adaptor3d_HCurve_get_type_name(*args):
    """
    Adaptor3d_HCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Adaptor3d.Adaptor3d_HCurve_get_type_name(*args)

def Adaptor3d_HCurve_get_type_descriptor(*args):
    """
    Adaptor3d_HCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Adaptor3d.Adaptor3d_HCurve_get_type_descriptor(*args)

class Adaptor3d_HCurveOnSurface(Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Adaptor3d_HCurveOnSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Adaptor3d_HCurveOnSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Adaptor3d_HCurveOnSurface self) -> Adaptor3d_HCurveOnSurface
        __init__(Adaptor3d_HCurveOnSurface self, Adaptor3d_CurveOnSurface C) -> Adaptor3d_HCurveOnSurface

        Creates a GenHCurve from a Curve

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_CurveOnSurface

        """
        this = _Adaptor3d.new_Adaptor3d_HCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(Adaptor3d_HCurveOnSurface self, Adaptor3d_CurveOnSurface C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_CurveOnSurface

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _Adaptor3d.Adaptor3d_HCurveOnSurface_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Adaptor3d_HCurveOnSurface self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Adaptor3d_HCurveOnSurface self) -> Adaptor3d_CurveOnSurface

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_CurveOnSurface

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_ChangeCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Adaptor3d_HCurveOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HCurveOnSurface
Adaptor3d_HCurveOnSurface_swigregister = _Adaptor3d.Adaptor3d_HCurveOnSurface_swigregister
Adaptor3d_HCurveOnSurface_swigregister(Adaptor3d_HCurveOnSurface)

def Adaptor3d_HCurveOnSurface_get_type_name(*args):
    """
    Adaptor3d_HCurveOnSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Adaptor3d.Adaptor3d_HCurveOnSurface_get_type_name(*args)

def Adaptor3d_HCurveOnSurface_get_type_descriptor(*args):
    """
    Adaptor3d_HCurveOnSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Adaptor3d.Adaptor3d_HCurveOnSurface_get_type_descriptor(*args)

class Handle_Adaptor3d_HCurveOnSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Adaptor3d_HCurveOnSurface self)

        Nullify the handle


        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Adaptor3d_HCurveOnSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Adaptor3d_HCurveOnSurface self, Adaptor3d_HCurveOnSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Adaptor3d_HCurveOnSurface self, Handle_Adaptor3d_HCurveOnSurface theHandle) -> Handle_Adaptor3d_HCurveOnSurface
        assign(Handle_Adaptor3d_HCurveOnSurface self, Adaptor3d_HCurveOnSurface thePtr) -> Handle_Adaptor3d_HCurveOnSurface
        assign(Handle_Adaptor3d_HCurveOnSurface self, Handle_Adaptor3d_HCurveOnSurface theHandle) -> Handle_Adaptor3d_HCurveOnSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Adaptor3d_HCurveOnSurface self) -> Adaptor3d_HCurveOnSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Adaptor3d_HCurveOnSurface self) -> Adaptor3d_HCurveOnSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Adaptor3d_HCurveOnSurface self) -> Adaptor3d_HCurveOnSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface___ref__(self, *args)


    def __hash__(self):
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Adaptor3d.new_Handle_Adaptor3d_HCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DownCast)
    __swig_destroy__ = _Adaptor3d.delete_Handle_Adaptor3d_HCurveOnSurface

    def Set(self, *args):
        """
        Set(Handle_Adaptor3d_HCurveOnSurface self, Adaptor3d_CurveOnSurface C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_CurveOnSurface

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_Adaptor3d_HCurveOnSurface self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Handle_Adaptor3d_HCurveOnSurface self) -> Adaptor3d_CurveOnSurface

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_CurveOnSurface

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_ChangeCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Adaptor3d_HCurveOnSurface self) -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_Adaptor3d_HCurveOnSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_Adaptor3d_HCurveOnSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_Adaptor3d_HCurveOnSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_Adaptor3d_HCurveOnSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Adaptor3d_HCurveOnSurface self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_Adaptor3d_HCurveOnSurface self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_Adaptor3d_HCurveOnSurface self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_Adaptor3d_HCurveOnSurface self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_Adaptor3d_HCurveOnSurface self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_Adaptor3d_HCurveOnSurface self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_Adaptor3d_HCurveOnSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_Adaptor3d_HCurveOnSurface self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_Adaptor3d_HCurveOnSurface self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_Adaptor3d_HCurveOnSurface self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_Adaptor3d_HCurveOnSurface self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_Adaptor3d_HCurveOnSurface self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_Adaptor3d_HCurveOnSurface self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_Adaptor3d_HCurveOnSurface self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_Adaptor3d_HCurveOnSurface self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_Adaptor3d_HCurveOnSurface self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_OffsetCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Adaptor3d_HCurveOnSurface self)

        Memory deallocator for transient classes


        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Adaptor3d_HCurveOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Adaptor3d_HCurveOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Adaptor3d_HCurveOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Adaptor3d_HCurveOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Adaptor3d_HCurveOnSurface self)

        Increments the reference counter of this object


        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Adaptor3d_HCurveOnSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DecrementRefCounter(self, *args)

Handle_Adaptor3d_HCurveOnSurface_swigregister = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_swigregister
Handle_Adaptor3d_HCurveOnSurface_swigregister(Handle_Adaptor3d_HCurveOnSurface)

def Handle_Adaptor3d_HCurveOnSurface_DownCast(thing):
    return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DownCast(thing)
Handle_Adaptor3d_HCurveOnSurface_DownCast = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DownCast

class Adaptor3d_HSurface(Standard.Standard_Transient):
    """
    Root class for surfaces manipulated by handles, on
    which geometric algorithms work.
    An adapted surface is an interface between the
    services provided by a surface and those required of
    the surface by algorithms which use it.
    A derived concrete class is provided:
    GeomAdaptor_HSurface for a surface from the Geom package.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Adaptor3d_HSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Adaptor3d_HSurface(self) 
            return h


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _Adaptor3d.Adaptor3d_HSurface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstUParameter(self, *args):
        """
        FirstUParameter(Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(Adaptor3d_HSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(Adaptor3d_HSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(Adaptor3d_HSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(Adaptor3d_HSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(Adaptor3d_HSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(Adaptor3d_HSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(Adaptor3d_HSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(Adaptor3d_HSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HSurface_Value(self, *args)


    def D0(self, *args):
        """
        D0(Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurface_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(Adaptor3d_HSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(Adaptor3d_HSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Adaptor3d_HSurface self) -> GeomAbs_SurfaceType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_HSurface_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(Adaptor3d_HSurface self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _Adaptor3d.Adaptor3d_HSurface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Adaptor3d_HSurface self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_HSurface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(Adaptor3d_HSurface self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _Adaptor3d.Adaptor3d_HSurface_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(Adaptor3d_HSurface self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_HSurface_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(Adaptor3d_HSurface self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _Adaptor3d.Adaptor3d_HSurface_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Adaptor3d_HSurface self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Adaptor3d_HSurface self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(Adaptor3d_HSurface self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_HSurface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(Adaptor3d_HSurface self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _Adaptor3d.Adaptor3d_HSurface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Adaptor3d_HSurface self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_HSurface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Adaptor3d_HSurface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurface_OffsetValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Adaptor3d_HSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Adaptor3d.Adaptor3d_HSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Adaptor3d_HSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HSurface
Adaptor3d_HSurface_swigregister = _Adaptor3d.Adaptor3d_HSurface_swigregister
Adaptor3d_HSurface_swigregister(Adaptor3d_HSurface)

def Adaptor3d_HSurface_get_type_name(*args):
    """
    Adaptor3d_HSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Adaptor3d.Adaptor3d_HSurface_get_type_name(*args)

def Adaptor3d_HSurface_get_type_descriptor(*args):
    """
    Adaptor3d_HSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Adaptor3d.Adaptor3d_HSurface_get_type_descriptor(*args)

class Adaptor3d_HVertex(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Adaptor3d_HVertex
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Adaptor3d_HVertex(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Adaptor3d_HVertex self) -> Adaptor3d_HVertex
        __init__(Adaptor3d_HVertex self, gp_Pnt2d P, TopAbs_Orientation const Ori, Standard_Real const Resolution) -> Adaptor3d_HVertex

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type Ori: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type Resolution: float

        """
        this = _Adaptor3d.new_Adaptor3d_HVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Value(Adaptor3d_HVertex self) -> gp_Pnt2d

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Adaptor3d.Adaptor3d_HVertex_Value(self, *args)


    def Parameter(self, *args):
        """
        Parameter(Adaptor3d_HVertex self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HVertex_Parameter(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Adaptor3d_HVertex self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real

        Parametric resolution (2d).

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HVertex_Resolution(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Adaptor3d_HVertex self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _Adaptor3d.Adaptor3d_HVertex_Orientation(self, *args)


    def IsSame(self, *args):
        """
        IsSame(Adaptor3d_HVertex self, Handle_Adaptor3d_HVertex Other) -> Standard_Boolean

        :type Other: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HVertex_IsSame(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Adaptor3d_HVertex_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Adaptor3d.Adaptor3d_HVertex_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Adaptor3d_HVertex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HVertex
Adaptor3d_HVertex_swigregister = _Adaptor3d.Adaptor3d_HVertex_swigregister
Adaptor3d_HVertex_swigregister(Adaptor3d_HVertex)

def Adaptor3d_HVertex_get_type_name(*args):
    """
    Adaptor3d_HVertex_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Adaptor3d.Adaptor3d_HVertex_get_type_name(*args)

def Adaptor3d_HVertex_get_type_descriptor(*args):
    """
    Adaptor3d_HVertex_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Adaptor3d.Adaptor3d_HVertex_get_type_descriptor(*args)

class Adaptor3d_Curve(object):
    """
    Root class for 3D curves on which geometric
    algorithms work.
    An adapted curve is an interface between the
    services provided by a curve and those required of
    the curve by algorithms which use it.
    Two derived concrete classes are provided:
    - GeomAdaptor_Curve for a curve from the Geom package
    - Adaptor3d_CurveOnSurface for a curve lying on
    a surface from the Geom package.

    Polynomial coefficients of BSpline curves used for their evaluation are
    cached for better performance. Therefore these evaluations are not
    thread-safe and parallel evaluations need to be prevented.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(self, *args):
        """
        FirstParameter(Adaptor3d_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Curve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Adaptor3d_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Curve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Adaptor3d_Curve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Curve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Adaptor3d_Curve self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals for  continuity
        <S>. May be one if Continuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Curve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Adaptor3d_Curve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Curve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Adaptor3d_Curve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_Curve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Adaptor3d_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Curve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Adaptor3d_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Curve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Adaptor3d_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Curve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Adaptor3d_Curve self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve.

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_Curve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Adaptor3d_Curve self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U on the curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Adaptor3d_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Adaptor3d_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Curve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Adaptor3d_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Curve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Adaptor3d_Curve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Curve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Adaptor3d_Curve self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Curve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Adaptor3d_Curve self) -> GeomAbs_CurveType

        Returns  the  type of the   curve  in the  current
        interval :   Line,   Circle,   Ellipse, Hyperbola,
        Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Adaptor3d.Adaptor3d_Curve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Adaptor3d_Curve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _Adaptor3d.Adaptor3d_Curve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Adaptor3d_Curve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _Adaptor3d.Adaptor3d_Curve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Adaptor3d_Curve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _Adaptor3d.Adaptor3d_Curve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Adaptor3d_Curve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _Adaptor3d.Adaptor3d_Curve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Adaptor3d_Curve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _Adaptor3d.Adaptor3d_Curve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Adaptor3d_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Curve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Adaptor3d_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Curve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Adaptor3d_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Curve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Adaptor3d_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Curve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Adaptor3d_Curve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Adaptor3d_Curve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Adaptor3d_Curve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Adaptor3d_Curve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Adaptor3d_Curve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _Adaptor3d.Adaptor3d_Curve_OffsetCurve(self, *args)


    def __init__(self):
        """
        Root class for 3D curves on which geometric
        algorithms work.
        An adapted curve is an interface between the
        services provided by a curve and those required of
        the curve by algorithms which use it.
        Two derived concrete classes are provided:
        - GeomAdaptor_Curve for a curve from the Geom package
        - Adaptor3d_CurveOnSurface for a curve lying on
        a surface from the Geom package.

        Polynomial coefficients of BSpline curves used for their evaluation are
        cached for better performance. Therefore these evaluations are not
        thread-safe and parallel evaluations need to be prevented.
        """
        this = _Adaptor3d.new_Adaptor3d_Curve()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_Curve
Adaptor3d_Curve_swigregister = _Adaptor3d.Adaptor3d_Curve_swigregister
Adaptor3d_Curve_swigregister(Adaptor3d_Curve)

class Adaptor3d_HIsoCurve(Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Adaptor3d_HIsoCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Adaptor3d_HIsoCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Adaptor3d_HIsoCurve self) -> Adaptor3d_HIsoCurve
        __init__(Adaptor3d_HIsoCurve self, Adaptor3d_IsoCurve C) -> Adaptor3d_HIsoCurve

        Creates a GenHCurve from a Curve

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve

        """
        this = _Adaptor3d.new_Adaptor3d_HIsoCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(Adaptor3d_HIsoCurve self, Adaptor3d_IsoCurve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _Adaptor3d.Adaptor3d_HIsoCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Adaptor3d_HIsoCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Adaptor3d_HIsoCurve self) -> Adaptor3d_IsoCurve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_ChangeCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Adaptor3d_HIsoCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HIsoCurve
Adaptor3d_HIsoCurve_swigregister = _Adaptor3d.Adaptor3d_HIsoCurve_swigregister
Adaptor3d_HIsoCurve_swigregister(Adaptor3d_HIsoCurve)

def Adaptor3d_HIsoCurve_get_type_name(*args):
    """
    Adaptor3d_HIsoCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Adaptor3d.Adaptor3d_HIsoCurve_get_type_name(*args)

def Adaptor3d_HIsoCurve_get_type_descriptor(*args):
    """
    Adaptor3d_HIsoCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Adaptor3d.Adaptor3d_HIsoCurve_get_type_descriptor(*args)

class Handle_Adaptor3d_HSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Adaptor3d_HSurface self)

        Nullify the handle


        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Adaptor3d_HSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Adaptor3d_HSurface self, Adaptor3d_HSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Adaptor3d_HSurface self, Handle_Adaptor3d_HSurface theHandle) -> Handle_Adaptor3d_HSurface
        assign(Handle_Adaptor3d_HSurface self, Adaptor3d_HSurface thePtr) -> Handle_Adaptor3d_HSurface
        assign(Handle_Adaptor3d_HSurface self, Handle_Adaptor3d_HSurface theHandle) -> Handle_Adaptor3d_HSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Adaptor3d_HSurface self) -> Adaptor3d_HSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Adaptor3d_HSurface self) -> Adaptor3d_HSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Adaptor3d_HSurface self) -> Adaptor3d_HSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface___ref__(self, *args)


    def __hash__(self):
        return _Adaptor3d.Handle_Adaptor3d_HSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Adaptor3d.Handle_Adaptor3d_HSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Adaptor3d.new_Handle_Adaptor3d_HSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HSurface_DownCast)
    __swig_destroy__ = _Adaptor3d.delete_Handle_Adaptor3d_HSurface

    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _Adaptor3d.Handle_Adaptor3d_HSurface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstUParameter(self, *args):
        """
        FirstUParameter(Handle_Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(Handle_Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(Handle_Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(Handle_Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(Handle_Adaptor3d_HSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(Handle_Adaptor3d_HSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(Handle_Adaptor3d_HSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(Handle_Adaptor3d_HSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(Handle_Adaptor3d_HSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(Handle_Adaptor3d_HSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(Handle_Adaptor3d_HSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(Handle_Adaptor3d_HSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Handle_Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Handle_Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Handle_Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Handle_Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Handle_Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Handle_Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_Adaptor3d_HSurface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(Handle_Adaptor3d_HSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(Handle_Adaptor3d_HSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_Adaptor3d_HSurface self) -> GeomAbs_SurfaceType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(Handle_Adaptor3d_HSurface self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Handle_Adaptor3d_HSurface self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(Handle_Adaptor3d_HSurface self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(Handle_Adaptor3d_HSurface self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(Handle_Adaptor3d_HSurface self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(Handle_Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(Handle_Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Handle_Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Handle_Adaptor3d_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(Handle_Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(Handle_Adaptor3d_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_Adaptor3d_HSurface self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_Adaptor3d_HSurface self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(Handle_Adaptor3d_HSurface self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(Handle_Adaptor3d_HSurface self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_Adaptor3d_HSurface self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_Adaptor3d_HSurface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(Handle_Adaptor3d_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_OffsetValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Adaptor3d_HSurface self) -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Adaptor3d_HSurface self)

        Memory deallocator for transient classes


        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Adaptor3d_HSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Adaptor3d_HSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Adaptor3d_HSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Adaptor3d_HSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Adaptor3d_HSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Adaptor3d_HSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Adaptor3d_HSurface self)

        Increments the reference counter of this object


        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Adaptor3d_HSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HSurface_DecrementRefCounter(self, *args)

Handle_Adaptor3d_HSurface_swigregister = _Adaptor3d.Handle_Adaptor3d_HSurface_swigregister
Handle_Adaptor3d_HSurface_swigregister(Handle_Adaptor3d_HSurface)

def Handle_Adaptor3d_HSurface_DownCast(thing):
    return _Adaptor3d.Handle_Adaptor3d_HSurface_DownCast(thing)
Handle_Adaptor3d_HSurface_DownCast = _Adaptor3d.Handle_Adaptor3d_HSurface_DownCast

class Adaptor3d_TopolTool(Standard.Standard_Transient):
    """
    This class provides a default topological tool,
    based on the Umin,Vmin,Umax,Vmax of an HSurface
    from Adaptor3d.
    All methods and fields may be redefined when
    inheriting from this class.
    This class is used to instantiate algorithmes
    as Intersection, outlines,...
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Adaptor3d_TopolTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Adaptor3d_TopolTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Adaptor3d_TopolTool self) -> Adaptor3d_TopolTool
        __init__(Adaptor3d_TopolTool self, Handle_Adaptor3d_HSurface Surface) -> Adaptor3d_TopolTool

        :type Surface: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        this = _Adaptor3d.new_Adaptor3d_TopolTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Initialize(self, *args):
        """
        Initialize(Adaptor3d_TopolTool self)
        Initialize(Adaptor3d_TopolTool self, Handle_Adaptor3d_HSurface S)
        Initialize(Adaptor3d_TopolTool self, Handle_Adaptor2d_HCurve2d Curve)

        :type Curve: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Initialize(self, *args)


    def Init(self, *args):
        """Init(Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Adaptor3d_TopolTool_Init(self, *args)


    def More(self, *args):
        """
        More(Adaptor3d_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_TopolTool_More(self, *args)


    def Value(self, *args):
        """
        Value(Adaptor3d_TopolTool self) -> Handle_Adaptor2d_HCurve2d

        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Value(self, *args)


    def Next(self, *args):
        """Next(Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Adaptor3d_TopolTool_Next(self, *args)


    def InitVertexIterator(self, *args):
        """InitVertexIterator(Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Adaptor3d_TopolTool_InitVertexIterator(self, *args)


    def MoreVertex(self, *args):
        """
        MoreVertex(Adaptor3d_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_TopolTool_MoreVertex(self, *args)


    def Vertex(self, *args):
        """
        Vertex(Adaptor3d_TopolTool self) -> Handle_Adaptor3d_HVertex

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Vertex(self, *args)


    def NextVertex(self, *args):
        """NextVertex(Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Adaptor3d_TopolTool_NextVertex(self, *args)


    def Classify(self, *args):
        """
        Classify(Adaptor3d_TopolTool self, gp_Pnt2d P, Standard_Real const Tol, Standard_Boolean const ReacdreOnPeriodic) -> TopAbs_State

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type ReacdreOnPeriodic: bool
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Classify(self, *args)


    def IsThePointOn(self, *args):
        """
        IsThePointOn(Adaptor3d_TopolTool self, gp_Pnt2d P, Standard_Real const Tol, Standard_Boolean const ReacdreOnPeriodic) -> Standard_Boolean

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type ReacdreOnPeriodic: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_TopolTool_IsThePointOn(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Adaptor3d_TopolTool self, Handle_Adaptor2d_HCurve2d C) -> TopAbs_Orientation
        Orientation(Adaptor3d_TopolTool self, Handle_Adaptor3d_HVertex V) -> TopAbs_Orientation

        Returns the orientation of the vertex V.
        The vertex has been found with an exploration on
        a given arc. The orientation is the orientation
        of the vertex on this arc.

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Orientation(self, *args)


    def Identical(self, *args):
        """
        Identical(Adaptor3d_TopolTool self, Handle_Adaptor3d_HVertex V1, Handle_Adaptor3d_HVertex V2) -> Standard_Boolean

        Returns True if the vertices V1 and V2 are identical.
        This method does not take the orientation of the
        vertices in account.

        :type V1: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :type V2: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Identical(self, *args)


    def Has3d(self, *args):
        """
        Has3d(Adaptor3d_TopolTool self) -> Standard_Boolean

        answers if arcs and vertices may have 3d representations,
        so that we could use Tol3d and Pnt methods.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Has3d(self, *args)


    def Tol3d(self, *args):
        """
        Tol3d(Adaptor3d_TopolTool self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real
        Tol3d(Adaptor3d_TopolTool self, Handle_Adaptor3d_HVertex V) -> Standard_Real

        returns 3d tolerance of the vertex V

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Tol3d(self, *args)


    def Pnt(self, *args):
        """
        Pnt(Adaptor3d_TopolTool self, Handle_Adaptor3d_HVertex V) -> gp_Pnt

        returns 3d point of the vertex V

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Pnt(self, *args)


    def ComputeSamplePoints(self, *args):
        """ComputeSamplePoints(Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Adaptor3d_TopolTool_ComputeSamplePoints(self, *args)


    def NbSamplesU(self, *args):
        """
        NbSamplesU(Adaptor3d_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamplesU(self, *args)


    def NbSamplesV(self, *args):
        """
        NbSamplesV(Adaptor3d_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamplesV(self, *args)


    def NbSamples(self, *args):
        """
        NbSamples(Adaptor3d_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamples(self, *args)


    def UParameters(self, *args):
        """
        UParameters(Adaptor3d_TopolTool self, NCollection_Array1_Standard_Real theArray)

        return the set of U parameters on the surface
        obtained by the method SamplePnts

        :type theArray: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _Adaptor3d.Adaptor3d_TopolTool_UParameters(self, *args)


    def VParameters(self, *args):
        """
        VParameters(Adaptor3d_TopolTool self, NCollection_Array1_Standard_Real theArray)

        return the set of V parameters on the surface
        obtained by the method SamplePnts

        :type theArray: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _Adaptor3d.Adaptor3d_TopolTool_VParameters(self, *args)


    def SamplePoint(self, *args):
        """
        SamplePoint(Adaptor3d_TopolTool self, Standard_Integer const Index, gp_Pnt2d P2d, gp_Pnt P3d)

        :type Index: int
        :type P2d: OCC.wrapper.gp.gp_Pnt2d
        :type P3d: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_TopolTool_SamplePoint(self, *args)


    def DomainIsInfinite(self, *args):
        """
        DomainIsInfinite(Adaptor3d_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_TopolTool_DomainIsInfinite(self, *args)


    def Edge(self, *args):
        """
        Edge(Adaptor3d_TopolTool self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Edge(self, *args)


    def SamplePnts(self, *args):
        """
        SamplePnts(Adaptor3d_TopolTool self, Standard_Real const theDefl, Standard_Integer const theNUmin, Standard_Integer const theNVmin)

        compute the sample-points for the intersections algorithms
        by adaptive algorithm for BSpline surfaces. For other surfaces algorithm
        is the same as in method ComputeSamplePoints(), but only fill arrays of U
        and V sample parameters;
        theDefl is a requred deflection
        theNUmin, theNVmin are minimal nb points for U and V.

        :type theDefl: float
        :type theNUmin: int
        :type theNVmin: int

        """
        return _Adaptor3d.Adaptor3d_TopolTool_SamplePnts(self, *args)


    def BSplSamplePnts(self, *args):
        """
        BSplSamplePnts(Adaptor3d_TopolTool self, Standard_Real const theDefl, Standard_Integer const theNUmin, Standard_Integer const theNVmin)

        compute the sample-points for the intersections algorithms
        by adaptive algorithm for BSpline surfaces  -  is  used  in  SamplePnts
        theDefl is a requred deflection
        theNUmin, theNVmin are minimal nb points for U and V.

        :type theDefl: float
        :type theNUmin: int
        :type theNVmin: int

        """
        return _Adaptor3d.Adaptor3d_TopolTool_BSplSamplePnts(self, *args)


    def IsUniformSampling(self, *args):
        """
        IsUniformSampling(Adaptor3d_TopolTool self) -> Standard_Boolean

        Returns true if provide uniform sampling of points.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_TopolTool_IsUniformSampling(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Adaptor3d_TopolTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Adaptor3d.Adaptor3d_TopolTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Adaptor3d_TopolTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_TopolTool
Adaptor3d_TopolTool_swigregister = _Adaptor3d.Adaptor3d_TopolTool_swigregister
Adaptor3d_TopolTool_swigregister(Adaptor3d_TopolTool)

def Adaptor3d_TopolTool_get_type_name(*args):
    """
    Adaptor3d_TopolTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Adaptor3d.Adaptor3d_TopolTool_get_type_name(*args)

def Adaptor3d_TopolTool_get_type_descriptor(*args):
    """
    Adaptor3d_TopolTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Adaptor3d.Adaptor3d_TopolTool_get_type_descriptor(*args)

class Handle_Adaptor3d_HCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Adaptor3d_HCurve self)

        Nullify the handle


        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Adaptor3d_HCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Adaptor3d_HCurve self, Adaptor3d_HCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Adaptor3d_HCurve self, Handle_Adaptor3d_HCurve theHandle) -> Handle_Adaptor3d_HCurve
        assign(Handle_Adaptor3d_HCurve self, Adaptor3d_HCurve thePtr) -> Handle_Adaptor3d_HCurve
        assign(Handle_Adaptor3d_HCurve self, Handle_Adaptor3d_HCurve theHandle) -> Handle_Adaptor3d_HCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Adaptor3d_HCurve self) -> Adaptor3d_HCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Adaptor3d_HCurve self) -> Adaptor3d_HCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Adaptor3d_HCurve self) -> Adaptor3d_HCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve___ref__(self, *args)


    def __hash__(self):
        return _Adaptor3d.Handle_Adaptor3d_HCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Adaptor3d.Handle_Adaptor3d_HCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Adaptor3d.new_Handle_Adaptor3d_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HCurve_DownCast)
    __swig_destroy__ = _Adaptor3d.delete_Handle_Adaptor3d_HCurve

    def Curve(self, *args):
        """
        Returns a pointer to the Curve inside the HCurve.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _Adaptor3d.Handle_Adaptor3d_HCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_Adaptor3d_HCurve self) -> Adaptor3d_Curve

        Returns a pointer to the Curve inside the HCurve.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_GetCurve(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_Adaptor3d_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_Adaptor3d_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_Adaptor3d_HCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_Adaptor3d_HCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_Adaptor3d_HCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_Adaptor3d_HCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_Adaptor3d_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_Adaptor3d_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_Adaptor3d_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Adaptor3d_HCurve self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_Adaptor3d_HCurve self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_Adaptor3d_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_Adaptor3d_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_Adaptor3d_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_Adaptor3d_HCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_Adaptor3d_HCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_Adaptor3d_HCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_Adaptor3d_HCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_Adaptor3d_HCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_Adaptor3d_HCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_Adaptor3d_HCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_Adaptor3d_HCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_Adaptor3d_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_Adaptor3d_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_Adaptor3d_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_Adaptor3d_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_Adaptor3d_HCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_Adaptor3d_HCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_Adaptor3d_HCurve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_OffsetCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Adaptor3d_HCurve self) -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Adaptor3d_HCurve self)

        Memory deallocator for transient classes


        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Adaptor3d_HCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Adaptor3d_HCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Adaptor3d_HCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Adaptor3d_HCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Adaptor3d_HCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Adaptor3d_HCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Adaptor3d_HCurve self)

        Increments the reference counter of this object


        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Adaptor3d_HCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HCurve_DecrementRefCounter(self, *args)

Handle_Adaptor3d_HCurve_swigregister = _Adaptor3d.Handle_Adaptor3d_HCurve_swigregister
Handle_Adaptor3d_HCurve_swigregister(Handle_Adaptor3d_HCurve)

def Handle_Adaptor3d_HCurve_DownCast(thing):
    return _Adaptor3d.Handle_Adaptor3d_HCurve_DownCast(thing)
Handle_Adaptor3d_HCurve_DownCast = _Adaptor3d.Handle_Adaptor3d_HCurve_DownCast

class Handle_Adaptor3d_HVertex(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Adaptor3d_HVertex self)

        Nullify the handle


        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Adaptor3d_HVertex self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Adaptor3d_HVertex self, Adaptor3d_HVertex thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Adaptor3d_HVertex self, Handle_Adaptor3d_HVertex theHandle) -> Handle_Adaptor3d_HVertex
        assign(Handle_Adaptor3d_HVertex self, Adaptor3d_HVertex thePtr) -> Handle_Adaptor3d_HVertex
        assign(Handle_Adaptor3d_HVertex self, Handle_Adaptor3d_HVertex theHandle) -> Handle_Adaptor3d_HVertex

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Adaptor3d_HVertex self) -> Adaptor3d_HVertex

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Adaptor3d_HVertex self) -> Adaptor3d_HVertex

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Adaptor3d_HVertex self) -> Adaptor3d_HVertex

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex___ref__(self, *args)


    def __hash__(self):
        return _Adaptor3d.Handle_Adaptor3d_HVertex___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Adaptor3d.Handle_Adaptor3d_HVertex___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Adaptor3d.new_Handle_Adaptor3d_HVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HVertex_DownCast)
    __swig_destroy__ = _Adaptor3d.delete_Handle_Adaptor3d_HVertex

    def Value(self, *args):
        """
        Value(Handle_Adaptor3d_HVertex self) -> gp_Pnt2d

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_Value(self, *args)


    def Parameter(self, *args):
        """
        Parameter(Handle_Adaptor3d_HVertex self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_Parameter(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_Adaptor3d_HVertex self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real

        Parametric resolution (2d).

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_Resolution(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_Adaptor3d_HVertex self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_Orientation(self, *args)


    def IsSame(self, *args):
        """
        IsSame(Handle_Adaptor3d_HVertex self, Handle_Adaptor3d_HVertex Other) -> Standard_Boolean

        :type Other: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_IsSame(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Adaptor3d_HVertex self) -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HVertex_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HVertex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Adaptor3d_HVertex self)

        Memory deallocator for transient classes


        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Adaptor3d_HVertex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Adaptor3d_HVertex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Adaptor3d_HVertex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Adaptor3d_HVertex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Adaptor3d_HVertex self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Adaptor3d_HVertex self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Adaptor3d_HVertex self)

        Increments the reference counter of this object


        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Adaptor3d_HVertex self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HVertex_DecrementRefCounter(self, *args)

Handle_Adaptor3d_HVertex_swigregister = _Adaptor3d.Handle_Adaptor3d_HVertex_swigregister
Handle_Adaptor3d_HVertex_swigregister(Handle_Adaptor3d_HVertex)

def Handle_Adaptor3d_HVertex_DownCast(thing):
    return _Adaptor3d.Handle_Adaptor3d_HVertex_DownCast(thing)
Handle_Adaptor3d_HVertex_DownCast = _Adaptor3d.Handle_Adaptor3d_HVertex_DownCast

class Adaptor3d_CurveOnSurface(Adaptor3d_Curve):
    """
    An interface between the services provided by a curve
    lying on a surface from the package Geom and those
    required of the curve by algorithms which use it. The
    curve is defined as a 2D curve from the Geom2d
    package, in the parametric space of the surface.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Adaptor3d_CurveOnSurface self) -> Adaptor3d_CurveOnSurface
        __init__(Adaptor3d_CurveOnSurface self, Handle_Adaptor3d_HSurface S) -> Adaptor3d_CurveOnSurface
        __init__(Adaptor3d_CurveOnSurface self, Handle_Adaptor2d_HCurve2d C, Handle_Adaptor3d_HSurface S) -> Adaptor3d_CurveOnSurface

        Creates a CurveOnSurface from the 2d curve <C> and
        the surface <S>.

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        this = _Adaptor3d.new_Adaptor3d_CurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(Adaptor3d_CurveOnSurface self, Handle_Adaptor3d_HSurface S)
        Load(Adaptor3d_CurveOnSurface self, Handle_Adaptor2d_HCurve2d C)
        Load(Adaptor3d_CurveOnSurface self, Handle_Adaptor2d_HCurve2d C, Handle_Adaptor3d_HSurface S)

        Load both curve and surface.

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Load(self, *args)


    def GetCurve(self, *args):
        """
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        res = _Adaptor3d.Adaptor3d_CurveOnSurface_GetCurve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetSurface(self, *args):
        """
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        res = _Adaptor3d.Adaptor3d_CurveOnSurface_GetSurface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve(self, *args):
        """
        ChangeCurve(Adaptor3d_CurveOnSurface self) -> Handle_Adaptor2d_HCurve2d

        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_ChangeCurve(self, *args)


    def ChangeSurface(self, *args):
        """
        ChangeSurface(Adaptor3d_CurveOnSurface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_ChangeSurface(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(Adaptor3d_CurveOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Adaptor3d_CurveOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Adaptor3d_CurveOnSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Adaptor3d_CurveOnSurface self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals for  continuity
        <S>. May be one if Continuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Adaptor3d_CurveOnSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Adaptor3d_CurveOnSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Adaptor3d_CurveOnSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Adaptor3d_CurveOnSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Adaptor3d_CurveOnSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Period(self, *args)


    def Value(self, *args):
        """
        Value(Adaptor3d_CurveOnSurface self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve.

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Value(self, *args)


    def D0(self, *args):
        """
        D0(Adaptor3d_CurveOnSurface self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U on the curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Adaptor3d_CurveOnSurface self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Adaptor3d_CurveOnSurface self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Adaptor3d_CurveOnSurface self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Adaptor3d_CurveOnSurface self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Adaptor3d_CurveOnSurface self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Adaptor3d_CurveOnSurface self) -> GeomAbs_CurveType

        Returns  the  type of the   curve  in the  current
        interval :   Line,   Circle,   Ellipse, Hyperbola,
        Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Adaptor3d_CurveOnSurface self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Adaptor3d_CurveOnSurface self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Adaptor3d_CurveOnSurface self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Adaptor3d_CurveOnSurface self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Adaptor3d_CurveOnSurface self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Adaptor3d_CurveOnSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Adaptor3d_CurveOnSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Adaptor3d_CurveOnSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Adaptor3d_CurveOnSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Adaptor3d_CurveOnSurface self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Adaptor3d_CurveOnSurface self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_BSpline(self, *args)

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_CurveOnSurface
Adaptor3d_CurveOnSurface_swigregister = _Adaptor3d.Adaptor3d_CurveOnSurface_swigregister
Adaptor3d_CurveOnSurface_swigregister(Adaptor3d_CurveOnSurface)

class Handle_Adaptor3d_HIsoCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Adaptor3d_HIsoCurve self)

        Nullify the handle


        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Adaptor3d_HIsoCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Adaptor3d_HIsoCurve self, Adaptor3d_HIsoCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Adaptor3d_HIsoCurve self, Handle_Adaptor3d_HIsoCurve theHandle) -> Handle_Adaptor3d_HIsoCurve
        assign(Handle_Adaptor3d_HIsoCurve self, Adaptor3d_HIsoCurve thePtr) -> Handle_Adaptor3d_HIsoCurve
        assign(Handle_Adaptor3d_HIsoCurve self, Handle_Adaptor3d_HIsoCurve theHandle) -> Handle_Adaptor3d_HIsoCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Adaptor3d_HIsoCurve self) -> Adaptor3d_HIsoCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Adaptor3d_HIsoCurve self) -> Adaptor3d_HIsoCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Adaptor3d_HIsoCurve self) -> Adaptor3d_HIsoCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve___ref__(self, *args)


    def __hash__(self):
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Adaptor3d.Handle_Adaptor3d_HIsoCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Adaptor3d.new_Handle_Adaptor3d_HIsoCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HIsoCurve_DownCast)
    __swig_destroy__ = _Adaptor3d.delete_Handle_Adaptor3d_HIsoCurve

    def Set(self, *args):
        """
        Set(Handle_Adaptor3d_HIsoCurve self, Adaptor3d_IsoCurve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_Adaptor3d_HIsoCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Handle_Adaptor3d_HIsoCurve self) -> Adaptor3d_IsoCurve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_ChangeCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Adaptor3d_HIsoCurve self) -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_Adaptor3d_HIsoCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_Adaptor3d_HIsoCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_Adaptor3d_HIsoCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_Adaptor3d_HIsoCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_Adaptor3d_HIsoCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_Adaptor3d_HIsoCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_Adaptor3d_HIsoCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_Adaptor3d_HIsoCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_Adaptor3d_HIsoCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Adaptor3d_HIsoCurve self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_Adaptor3d_HIsoCurve self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_Adaptor3d_HIsoCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_Adaptor3d_HIsoCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_Adaptor3d_HIsoCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_Adaptor3d_HIsoCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_Adaptor3d_HIsoCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_Adaptor3d_HIsoCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_Adaptor3d_HIsoCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_Adaptor3d_HIsoCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_Adaptor3d_HIsoCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_Adaptor3d_HIsoCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_Adaptor3d_HIsoCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_Adaptor3d_HIsoCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_Adaptor3d_HIsoCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_Adaptor3d_HIsoCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_Adaptor3d_HIsoCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_Adaptor3d_HIsoCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_Adaptor3d_HIsoCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_Adaptor3d_HIsoCurve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_OffsetCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Adaptor3d_HIsoCurve self)

        Memory deallocator for transient classes


        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Adaptor3d_HIsoCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Adaptor3d_HIsoCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Adaptor3d_HIsoCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Adaptor3d_HIsoCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Adaptor3d_HIsoCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Adaptor3d_HIsoCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Adaptor3d_HIsoCurve self)

        Increments the reference counter of this object


        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Adaptor3d_HIsoCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DecrementRefCounter(self, *args)

Handle_Adaptor3d_HIsoCurve_swigregister = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_swigregister
Handle_Adaptor3d_HIsoCurve_swigregister(Handle_Adaptor3d_HIsoCurve)

def Handle_Adaptor3d_HIsoCurve_DownCast(thing):
    return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DownCast(thing)
Handle_Adaptor3d_HIsoCurve_DownCast = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DownCast

class Adaptor3d_Surface(object):
    """
    Root class for surfaces on which geometric algorithms work.
    An adapted surface is an interface between the
    services provided by a surface and those required of
    the surface by algorithms which use it.
    A derived concrete class is provided:
    GeomAdaptor_Surface for a surface from the Geom package.
    The  Surface class describes  the standard behaviour
    of a surface for generic algorithms.

    The Surface can  be decomposed in intervals of any
    continuity    in  U    and    V using  the  method
    NbIntervals.  A current interval can be set.  Most
    of the methods apply to the current interval.
    Warning: All the methods are virtual and implemented with a
    raise to allow to redefined only the methods realy
    used.

    Polynomial coefficients of BSpline surfaces used for their evaluation are
    cached for better performance. Therefore these evaluations are not
    thread-safe and parallel evaluations need to be prevented.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstUParameter(self, *args):
        """
        FirstUParameter(Adaptor3d_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(Adaptor3d_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(Adaptor3d_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(Adaptor3d_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(Adaptor3d_Surface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Surface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(Adaptor3d_Surface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Surface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(Adaptor3d_Surface self, GeomAbs_Shape const S) -> Standard_Integer

        Returns the number of U intervals for  continuity
        <S>. May be one if UContinuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(Adaptor3d_Surface self, GeomAbs_Shape const S) -> Standard_Integer

        Returns the number of V intervals for  continuity
        <S>. May be one if VContinuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(Adaptor3d_Surface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the U direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Surface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(Adaptor3d_Surface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the V direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Surface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(Adaptor3d_Surface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the U direction
        equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(Adaptor3d_Surface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the V direction  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Adaptor3d_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Surface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Adaptor3d_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Adaptor3d_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Surface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Adaptor3d_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Adaptor3d_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Adaptor3d_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(Adaptor3d_Surface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        Computes the point of parameters U,V on the surface.

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_Surface_Value(self, *args)


    def D0(self, *args):
        """
        D0(Adaptor3d_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        Computes the point of parameters U,V on the surface.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_Surface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Adaptor3d_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        Computes the point  and the first derivatives on
        the surface.
        Raised   if  the continuity  of   the  current
        intervals is not C1.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Surface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Adaptor3d_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        Computes   the point,  the  first  and  second
        derivatives on the surface.
        Raised  if   the   continuity   of the current
        intervals is not C2.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Surface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Adaptor3d_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        Computes the point,  the first, second and third
        derivatives on the surface.
        Raised  if   the   continuity   of the current
        intervals is not C3.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Surface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Adaptor3d_Surface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        Computes the derivative of order Nu in the direction U and Nv
        in the direction V at the point P(U, V).
        Raised if the current U  interval is not not CNu
        and the current V interval is not CNv.
        Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0.

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Surface_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(Adaptor3d_Surface self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric U  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(Adaptor3d_Surface self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric V  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Adaptor3d_Surface self) -> GeomAbs_SurfaceType

        Returns the type of the surface : Plane, Cylinder,
        Cone,      Sphere,        Torus,    BezierSurface,
        BSplineSurface,               SurfaceOfRevolution,
        SurfaceOfExtrusion, OtherSurface

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_Surface_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(Adaptor3d_Surface self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _Adaptor3d.Adaptor3d_Surface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Adaptor3d_Surface self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_Surface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(Adaptor3d_Surface self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _Adaptor3d.Adaptor3d_Surface_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(Adaptor3d_Surface self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_Surface_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(Adaptor3d_Surface self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _Adaptor3d.Adaptor3d_Surface_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Adaptor3d_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Surface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(Adaptor3d_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Adaptor3d_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Surface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(Adaptor3d_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Adaptor3d_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Adaptor3d_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(Adaptor3d_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Surface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(Adaptor3d_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Adaptor3d_Surface self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Adaptor3d_Surface self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(Adaptor3d_Surface self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_Surface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(Adaptor3d_Surface self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _Adaptor3d.Adaptor3d_Surface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Adaptor3d_Surface self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_Surface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Adaptor3d_Surface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(Adaptor3d_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_Surface_OffsetValue(self, *args)


    def __init__(self):
        """
        Root class for surfaces on which geometric algorithms work.
        An adapted surface is an interface between the
        services provided by a surface and those required of
        the surface by algorithms which use it.
        A derived concrete class is provided:
        GeomAdaptor_Surface for a surface from the Geom package.
        The  Surface class describes  the standard behaviour
        of a surface for generic algorithms.

        The Surface can  be decomposed in intervals of any
        continuity    in  U    and    V using  the  method
        NbIntervals.  A current interval can be set.  Most
        of the methods apply to the current interval.
        Warning: All the methods are virtual and implemented with a
        raise to allow to redefined only the methods realy
        used.

        Polynomial coefficients of BSpline surfaces used for their evaluation are
        cached for better performance. Therefore these evaluations are not
        thread-safe and parallel evaluations need to be prevented.
        """
        this = _Adaptor3d.new_Adaptor3d_Surface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_Surface
Adaptor3d_Surface_swigregister = _Adaptor3d.Adaptor3d_Surface_swigregister
Adaptor3d_Surface_swigregister(Adaptor3d_Surface)

class Handle_Adaptor3d_TopolTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Adaptor3d_TopolTool self)

        Nullify the handle


        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Adaptor3d_TopolTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Adaptor3d_TopolTool self, Adaptor3d_TopolTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Adaptor3d_TopolTool self, Handle_Adaptor3d_TopolTool theHandle) -> Handle_Adaptor3d_TopolTool
        assign(Handle_Adaptor3d_TopolTool self, Adaptor3d_TopolTool thePtr) -> Handle_Adaptor3d_TopolTool
        assign(Handle_Adaptor3d_TopolTool self, Handle_Adaptor3d_TopolTool theHandle) -> Handle_Adaptor3d_TopolTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Adaptor3d_TopolTool self) -> Adaptor3d_TopolTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Adaptor3d_TopolTool self) -> Adaptor3d_TopolTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Adaptor3d_TopolTool self) -> Adaptor3d_TopolTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool___ref__(self, *args)


    def __hash__(self):
        return _Adaptor3d.Handle_Adaptor3d_TopolTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Adaptor3d.Handle_Adaptor3d_TopolTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Adaptor3d.new_Handle_Adaptor3d_TopolTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_TopolTool_DownCast)
    __swig_destroy__ = _Adaptor3d.delete_Handle_Adaptor3d_TopolTool

    def Initialize(self, *args):
        """
        Initialize(Handle_Adaptor3d_TopolTool self)
        Initialize(Handle_Adaptor3d_TopolTool self, Handle_Adaptor3d_HSurface S)
        Initialize(Handle_Adaptor3d_TopolTool self, Handle_Adaptor2d_HCurve2d Curve)

        :type Curve: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Initialize(self, *args)


    def Init(self, *args):
        """Init(Handle_Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Init(self, *args)


    def More(self, *args):
        """
        More(Handle_Adaptor3d_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_More(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Adaptor3d_TopolTool self) -> Handle_Adaptor2d_HCurve2d

        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Value(self, *args)


    def Next(self, *args):
        """Next(Handle_Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Next(self, *args)


    def InitVertexIterator(self, *args):
        """InitVertexIterator(Handle_Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_InitVertexIterator(self, *args)


    def MoreVertex(self, *args):
        """
        MoreVertex(Handle_Adaptor3d_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_MoreVertex(self, *args)


    def Vertex(self, *args):
        """
        Vertex(Handle_Adaptor3d_TopolTool self) -> Handle_Adaptor3d_HVertex

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Vertex(self, *args)


    def NextVertex(self, *args):
        """NextVertex(Handle_Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_NextVertex(self, *args)


    def Classify(self, *args):
        """
        Classify(Handle_Adaptor3d_TopolTool self, gp_Pnt2d P, Standard_Real const Tol, Standard_Boolean const ReacdreOnPeriodic) -> TopAbs_State

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type ReacdreOnPeriodic: bool
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Classify(self, *args)


    def IsThePointOn(self, *args):
        """
        IsThePointOn(Handle_Adaptor3d_TopolTool self, gp_Pnt2d P, Standard_Real const Tol, Standard_Boolean const ReacdreOnPeriodic) -> Standard_Boolean

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float
        :type ReacdreOnPeriodic: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_IsThePointOn(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_Adaptor3d_TopolTool self, Handle_Adaptor2d_HCurve2d C) -> TopAbs_Orientation
        Orientation(Handle_Adaptor3d_TopolTool self, Handle_Adaptor3d_HVertex V) -> TopAbs_Orientation

        Returns the orientation of the vertex V.
        The vertex has been found with an exploration on
        a given arc. The orientation is the orientation
        of the vertex on this arc.

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Orientation(self, *args)


    def Identical(self, *args):
        """
        Identical(Handle_Adaptor3d_TopolTool self, Handle_Adaptor3d_HVertex V1, Handle_Adaptor3d_HVertex V2) -> Standard_Boolean

        Returns True if the vertices V1 and V2 are identical.
        This method does not take the orientation of the
        vertices in account.

        :type V1: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :type V2: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Identical(self, *args)


    def Has3d(self, *args):
        """
        Has3d(Handle_Adaptor3d_TopolTool self) -> Standard_Boolean

        answers if arcs and vertices may have 3d representations,
        so that we could use Tol3d and Pnt methods.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Has3d(self, *args)


    def Tol3d(self, *args):
        """
        Tol3d(Handle_Adaptor3d_TopolTool self, Handle_Adaptor2d_HCurve2d C) -> Standard_Real
        Tol3d(Handle_Adaptor3d_TopolTool self, Handle_Adaptor3d_HVertex V) -> Standard_Real

        returns 3d tolerance of the vertex V

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Tol3d(self, *args)


    def Pnt(self, *args):
        """
        Pnt(Handle_Adaptor3d_TopolTool self, Handle_Adaptor3d_HVertex V) -> gp_Pnt

        returns 3d point of the vertex V

        :type V: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HVertex
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Pnt(self, *args)


    def ComputeSamplePoints(self, *args):
        """ComputeSamplePoints(Handle_Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_ComputeSamplePoints(self, *args)


    def NbSamplesU(self, *args):
        """
        NbSamplesU(Handle_Adaptor3d_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_NbSamplesU(self, *args)


    def NbSamplesV(self, *args):
        """
        NbSamplesV(Handle_Adaptor3d_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_NbSamplesV(self, *args)


    def NbSamples(self, *args):
        """
        NbSamples(Handle_Adaptor3d_TopolTool self) -> Standard_Integer

        compute the sample-points for the intersections algorithms

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_NbSamples(self, *args)


    def UParameters(self, *args):
        """
        UParameters(Handle_Adaptor3d_TopolTool self, NCollection_Array1_Standard_Real theArray)

        return the set of U parameters on the surface
        obtained by the method SamplePnts

        :type theArray: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_UParameters(self, *args)


    def VParameters(self, *args):
        """
        VParameters(Handle_Adaptor3d_TopolTool self, NCollection_Array1_Standard_Real theArray)

        return the set of V parameters on the surface
        obtained by the method SamplePnts

        :type theArray: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_VParameters(self, *args)


    def SamplePoint(self, *args):
        """
        SamplePoint(Handle_Adaptor3d_TopolTool self, Standard_Integer const Index, gp_Pnt2d P2d, gp_Pnt P3d)

        :type Index: int
        :type P2d: OCC.wrapper.gp.gp_Pnt2d
        :type P3d: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_SamplePoint(self, *args)


    def DomainIsInfinite(self, *args):
        """
        DomainIsInfinite(Handle_Adaptor3d_TopolTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_DomainIsInfinite(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Adaptor3d_TopolTool self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Edge(self, *args)


    def SamplePnts(self, *args):
        """
        SamplePnts(Handle_Adaptor3d_TopolTool self, Standard_Real const theDefl, Standard_Integer const theNUmin, Standard_Integer const theNVmin)

        compute the sample-points for the intersections algorithms
        by adaptive algorithm for BSpline surfaces. For other surfaces algorithm
        is the same as in method ComputeSamplePoints(), but only fill arrays of U
        and V sample parameters;
        theDefl is a requred deflection
        theNUmin, theNVmin are minimal nb points for U and V.

        :type theDefl: float
        :type theNUmin: int
        :type theNVmin: int

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_SamplePnts(self, *args)


    def BSplSamplePnts(self, *args):
        """
        BSplSamplePnts(Handle_Adaptor3d_TopolTool self, Standard_Real const theDefl, Standard_Integer const theNUmin, Standard_Integer const theNVmin)

        compute the sample-points for the intersections algorithms
        by adaptive algorithm for BSpline surfaces  -  is  used  in  SamplePnts
        theDefl is a requred deflection
        theNUmin, theNVmin are minimal nb points for U and V.

        :type theDefl: float
        :type theNUmin: int
        :type theNVmin: int

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_BSplSamplePnts(self, *args)


    def IsUniformSampling(self, *args):
        """
        IsUniformSampling(Handle_Adaptor3d_TopolTool self) -> Standard_Boolean

        Returns true if provide uniform sampling of points.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_IsUniformSampling(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Adaptor3d_TopolTool self) -> char const *

        :rtype: const char *

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_TopolTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Adaptor3d.Handle_Adaptor3d_TopolTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Adaptor3d_TopolTool self)

        Memory deallocator for transient classes


        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Adaptor3d_TopolTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Adaptor3d_TopolTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Adaptor3d_TopolTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Adaptor3d_TopolTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Adaptor3d_TopolTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Adaptor3d_TopolTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Adaptor3d_TopolTool self)

        Increments the reference counter of this object


        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Adaptor3d_TopolTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Handle_Adaptor3d_TopolTool_DecrementRefCounter(self, *args)

Handle_Adaptor3d_TopolTool_swigregister = _Adaptor3d.Handle_Adaptor3d_TopolTool_swigregister
Handle_Adaptor3d_TopolTool_swigregister(Handle_Adaptor3d_TopolTool)

def Handle_Adaptor3d_TopolTool_DownCast(thing):
    return _Adaptor3d.Handle_Adaptor3d_TopolTool_DownCast(thing)
Handle_Adaptor3d_TopolTool_DownCast = _Adaptor3d.Handle_Adaptor3d_TopolTool_DownCast

class Adaptor3d_InterFunc(math.math_FunctionWithDerivative):
    """
    Used to find the points U(t) = U0 or V(t) = V0 in
    order to determine the  Cn discontinuities of  an
    Adpator_CurveOnSurface  relativly  to    the
    discontinuities of the surface. Used to
    find the roots of the functions
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Adaptor3d_InterFunc self, Handle_Adaptor2d_HCurve2d C, Standard_Real const FixVal, Standard_Integer const Fix) -> Adaptor3d_InterFunc

        build the function  U(t)=FixVal   if Fix =1 or
        V(t)=FixVal if Fix=2

        :type C: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :type FixVal: float
        :type Fix: int

        """
        this = _Adaptor3d.new_Adaptor3d_InterFunc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(Adaptor3d_InterFunc self, Standard_Real const X) -> Standard_Boolean

        computes the value <F>of the function for the variable <X>.
        Returns True if the calculation were successfully done,
        False otherwise.

        :type X: float
        :type F: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_InterFunc_Value(self, *args)


    def Derivative(self, *args):
        """
        Derivative(Adaptor3d_InterFunc self, Standard_Real const X) -> Standard_Boolean

        computes the derivative <D> of the function
        for the variable <X>.
        Returns True if the calculation were successfully done,
        False otherwise.

        :type X: float
        :type D: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_InterFunc_Derivative(self, *args)


    def Values(self, *args):
        """
        Values(Adaptor3d_InterFunc self, Standard_Real const X) -> Standard_Boolean

        computes the value <F> and the derivative <D> of the
        function for the variable <X>.
        Returns True if the calculation were successfully done,
        False otherwise.

        :type X: float
        :type F: float
        :type D: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_InterFunc_Values(self, *args)

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_InterFunc
Adaptor3d_InterFunc_swigregister = _Adaptor3d.Adaptor3d_InterFunc_swigregister
Adaptor3d_InterFunc_swigregister(Adaptor3d_InterFunc)

class Adaptor3d_IsoCurve(Adaptor3d_Curve):
    """
    Defines an isoparametric curve on  a surface.  The
    type  of isoparametric curve  (U  or V) is defined
    with the   enumeration  IsoType from   GeomAbs  if
    NoneIso is given an error is raised.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Adaptor3d_IsoCurve self) -> Adaptor3d_IsoCurve
        __init__(Adaptor3d_IsoCurve self, Handle_Adaptor3d_HSurface S) -> Adaptor3d_IsoCurve
        __init__(Adaptor3d_IsoCurve self, Handle_Adaptor3d_HSurface S, GeomAbs_IsoType const Iso, Standard_Real const Param) -> Adaptor3d_IsoCurve
        __init__(Adaptor3d_IsoCurve self, Handle_Adaptor3d_HSurface S, GeomAbs_IsoType const Iso, Standard_Real const Param, Standard_Real const WFirst, Standard_Real const WLast) -> Adaptor3d_IsoCurve

        Create an IsoCurve curve.  Iso defines the type
        (isoU or isov).  Param defines the value of the
        iso. WFirst,WLast define the bounds of the iso.

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type Iso: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type Param: float
        :type WFirst: float
        :type WLast: float

        """
        this = _Adaptor3d.new_Adaptor3d_IsoCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(Adaptor3d_IsoCurve self, Handle_Adaptor3d_HSurface S)
        Load(Adaptor3d_IsoCurve self, GeomAbs_IsoType const Iso, Standard_Real const Param)
        Load(Adaptor3d_IsoCurve self, GeomAbs_IsoType const Iso, Standard_Real const Param, Standard_Real const WFirst, Standard_Real const WLast)

        Changes the iso on the current surface.

        :type Iso: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type Param: float
        :type WFirst: float
        :type WLast: float

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Load(self, *args)


    def Surface(self, *args):
        """
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        res = _Adaptor3d.Adaptor3d_IsoCurve_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Iso(self, *args):
        """
        Iso(Adaptor3d_IsoCurve self) -> GeomAbs_IsoType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_IsoType

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Iso(self, *args)


    def Parameter(self, *args):
        """
        Parameter(Adaptor3d_IsoCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Parameter(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(Adaptor3d_IsoCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Adaptor3d_IsoCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Adaptor3d_IsoCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Adaptor3d_IsoCurve self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals for  continuity
        <S>. May be one if Continuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Adaptor3d_IsoCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Adaptor3d_IsoCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Adaptor3d_IsoCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Adaptor3d_IsoCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Adaptor3d_IsoCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Adaptor3d_IsoCurve self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve.

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Adaptor3d_IsoCurve self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U on the curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Adaptor3d_IsoCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Adaptor3d_IsoCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Adaptor3d_IsoCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Adaptor3d_IsoCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Adaptor3d_IsoCurve self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Adaptor3d_IsoCurve self) -> GeomAbs_CurveType

        Returns  the  type of the   curve  in the  current
        interval :   Line,   Circle,   Ellipse, Hyperbola,
        Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Adaptor3d_IsoCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Adaptor3d_IsoCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Adaptor3d_IsoCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Adaptor3d_IsoCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Adaptor3d_IsoCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Adaptor3d_IsoCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Adaptor3d_IsoCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Adaptor3d_IsoCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Adaptor3d_IsoCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Adaptor3d_IsoCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Adaptor3d_IsoCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_BSpline(self, *args)

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_IsoCurve
Adaptor3d_IsoCurve_swigregister = _Adaptor3d.Adaptor3d_IsoCurve_swigregister
Adaptor3d_IsoCurve_swigregister(Adaptor3d_IsoCurve)

class Adaptor3d_HSurfaceTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstUParameter(*args):
        """
        FirstUParameter(Handle_Adaptor3d_HSurface S) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstUParameter(*args)

    FirstUParameter = staticmethod(FirstUParameter)

    def FirstVParameter(*args):
        """
        FirstVParameter(Handle_Adaptor3d_HSurface S) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstVParameter(*args)

    FirstVParameter = staticmethod(FirstVParameter)

    def LastUParameter(*args):
        """
        LastUParameter(Handle_Adaptor3d_HSurface S) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_LastUParameter(*args)

    LastUParameter = staticmethod(LastUParameter)

    def LastVParameter(*args):
        """
        LastVParameter(Handle_Adaptor3d_HSurface S) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_LastVParameter(*args)

    LastVParameter = staticmethod(LastVParameter)

    def NbUIntervals(*args):
        """
        NbUIntervals(Handle_Adaptor3d_HSurface S, GeomAbs_Shape const Sh) -> Standard_Integer

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type Sh: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbUIntervals(*args)

    NbUIntervals = staticmethod(NbUIntervals)

    def NbVIntervals(*args):
        """
        NbVIntervals(Handle_Adaptor3d_HSurface S, GeomAbs_Shape const Sh) -> Standard_Integer

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type Sh: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbVIntervals(*args)

    NbVIntervals = staticmethod(NbVIntervals)

    def UIntervals(*args):
        """
        UIntervals(Handle_Adaptor3d_HSurface S, NCollection_Array1_Standard_Real T, GeomAbs_Shape const Sh)

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type Sh: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UIntervals(*args)

    UIntervals = staticmethod(UIntervals)

    def VIntervals(*args):
        """
        VIntervals(Handle_Adaptor3d_HSurface S, NCollection_Array1_Standard_Real T, GeomAbs_Shape const Sh)

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type Sh: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VIntervals(*args)

    VIntervals = staticmethod(VIntervals)

    def UTrim(*args):
        """
        UTrim(Handle_Adaptor3d_HSurface S, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        If <First> >= <Last>

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UTrim(*args)

    UTrim = staticmethod(UTrim)

    def VTrim(*args):
        """
        VTrim(Handle_Adaptor3d_HSurface S, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        If <First> >= <Last>

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VTrim(*args)

    VTrim = staticmethod(VTrim)

    def IsUClosed(*args):
        """
        IsUClosed(Handle_Adaptor3d_HSurface S) -> Standard_Boolean

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUClosed(*args)

    IsUClosed = staticmethod(IsUClosed)

    def IsVClosed(*args):
        """
        IsVClosed(Handle_Adaptor3d_HSurface S) -> Standard_Boolean

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVClosed(*args)

    IsVClosed = staticmethod(IsVClosed)

    def IsUPeriodic(*args):
        """
        IsUPeriodic(Handle_Adaptor3d_HSurface S) -> Standard_Boolean

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUPeriodic(*args)

    IsUPeriodic = staticmethod(IsUPeriodic)

    def UPeriod(*args):
        """
        UPeriod(Handle_Adaptor3d_HSurface S) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UPeriod(*args)

    UPeriod = staticmethod(UPeriod)

    def IsVPeriodic(*args):
        """
        IsVPeriodic(Handle_Adaptor3d_HSurface S) -> Standard_Boolean

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVPeriodic(*args)

    IsVPeriodic = staticmethod(IsVPeriodic)

    def VPeriod(*args):
        """
        VPeriod(Handle_Adaptor3d_HSurface S) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VPeriod(*args)

    VPeriod = staticmethod(VPeriod)

    def Value(*args):
        """
        Value(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v) -> gp_Pnt

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type u: float
        :type v: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Value(*args)

    Value = staticmethod(Value)

    def D0(*args):
        """
        D0(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, gp_Pnt P)

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type u: float
        :type v: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args):
        """
        D1(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, gp_Pnt P, gp_Vec D1u, gp_Vec D1v)

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type u: float
        :type v: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1u: OCC.wrapper.gp.gp_Vec
        :type D1v: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        D2(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type u: float
        :type v: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        D3(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type u: float
        :type v: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args):
        """
        DN(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type u: float
        :type v: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_DN(*args)

    DN = staticmethod(DN)

    def UResolution(*args):
        """
        UResolution(Handle_Adaptor3d_HSurface S, Standard_Real const R3d) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UResolution(*args)

    UResolution = staticmethod(UResolution)

    def VResolution(*args):
        """
        VResolution(Handle_Adaptor3d_HSurface S, Standard_Real const R3d) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VResolution(*args)

    VResolution = staticmethod(VResolution)

    def GetType(*args):
        """
        GetType(Handle_Adaptor3d_HSurface S) -> GeomAbs_SurfaceType

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Plane(*args):
        """
        Plane(Handle_Adaptor3d_HSurface S) -> gp_Pln

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Plane(*args)

    Plane = staticmethod(Plane)

    def Cylinder(*args):
        """
        Cylinder(Handle_Adaptor3d_HSurface S) -> gp_Cylinder

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Cylinder(*args)

    Cylinder = staticmethod(Cylinder)

    def Cone(*args):
        """
        Cone(Handle_Adaptor3d_HSurface S) -> gp_Cone

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Cone(*args)

    Cone = staticmethod(Cone)

    def Torus(*args):
        """
        Torus(Handle_Adaptor3d_HSurface S) -> gp_Torus

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Torus(*args)

    Torus = staticmethod(Torus)

    def Sphere(*args):
        """
        Sphere(Handle_Adaptor3d_HSurface S) -> gp_Sphere

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Sphere(*args)

    Sphere = staticmethod(Sphere)

    def Bezier(*args):
        """
        Bezier(Handle_Adaptor3d_HSurface S) -> Handle_Geom_BezierSurface

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def BSpline(*args):
        """
        BSpline(Handle_Adaptor3d_HSurface S) -> Handle_Geom_BSplineSurface

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def AxeOfRevolution(*args):
        """
        AxeOfRevolution(Handle_Adaptor3d_HSurface S) -> gp_Ax1

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_AxeOfRevolution(*args)

    AxeOfRevolution = staticmethod(AxeOfRevolution)

    def Direction(*args):
        """
        Direction(Handle_Adaptor3d_HSurface S) -> gp_Dir

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Direction(*args)

    Direction = staticmethod(Direction)

    def BasisCurve(*args):
        """
        BasisCurve(Handle_Adaptor3d_HSurface S) -> Handle_Adaptor3d_HCurve

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisCurve(*args)

    BasisCurve = staticmethod(BasisCurve)

    def BasisSurface(*args):
        """
        BasisSurface(Handle_Adaptor3d_HSurface S) -> Handle_Adaptor3d_HSurface

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisSurface(*args)

    BasisSurface = staticmethod(BasisSurface)

    def OffsetValue(*args):
        """
        OffsetValue(Handle_Adaptor3d_HSurface S) -> Standard_Real

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_OffsetValue(*args)

    OffsetValue = staticmethod(OffsetValue)

    def NbSamplesU(*args):
        """
        NbSamplesU(Handle_Adaptor3d_HSurface S) -> Standard_Integer
        NbSamplesU(Handle_Adaptor3d_HSurface S, Standard_Real const u1, Standard_Real const u2) -> Standard_Integer

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type u1: float
        :type u2: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesU(*args)

    NbSamplesU = staticmethod(NbSamplesU)

    def NbSamplesV(*args):
        """
        NbSamplesV(Handle_Adaptor3d_HSurface S) -> Standard_Integer
        NbSamplesV(Handle_Adaptor3d_HSurface S, Standard_Real const v1, Standard_Real const v2) -> Standard_Integer

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type v1: float
        :type v2: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesV(*args)

    NbSamplesV = staticmethod(NbSamplesV)

    def __init__(self):
        this = _Adaptor3d.new_Adaptor3d_HSurfaceTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HSurfaceTool
Adaptor3d_HSurfaceTool_swigregister = _Adaptor3d.Adaptor3d_HSurfaceTool_swigregister
Adaptor3d_HSurfaceTool_swigregister(Adaptor3d_HSurfaceTool)

def Adaptor3d_HSurfaceTool_FirstUParameter(*args):
    """
    Adaptor3d_HSurfaceTool_FirstUParameter(Handle_Adaptor3d_HSurface S) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstUParameter(*args)

def Adaptor3d_HSurfaceTool_FirstVParameter(*args):
    """
    Adaptor3d_HSurfaceTool_FirstVParameter(Handle_Adaptor3d_HSurface S) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstVParameter(*args)

def Adaptor3d_HSurfaceTool_LastUParameter(*args):
    """
    Adaptor3d_HSurfaceTool_LastUParameter(Handle_Adaptor3d_HSurface S) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_LastUParameter(*args)

def Adaptor3d_HSurfaceTool_LastVParameter(*args):
    """
    Adaptor3d_HSurfaceTool_LastVParameter(Handle_Adaptor3d_HSurface S) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_LastVParameter(*args)

def Adaptor3d_HSurfaceTool_NbUIntervals(*args):
    """
    Adaptor3d_HSurfaceTool_NbUIntervals(Handle_Adaptor3d_HSurface S, GeomAbs_Shape const Sh) -> Standard_Integer

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type Sh: OCC.wrapper.GeomAbs.GeomAbs_Shape
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbUIntervals(*args)

def Adaptor3d_HSurfaceTool_NbVIntervals(*args):
    """
    Adaptor3d_HSurfaceTool_NbVIntervals(Handle_Adaptor3d_HSurface S, GeomAbs_Shape const Sh) -> Standard_Integer

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type Sh: OCC.wrapper.GeomAbs.GeomAbs_Shape
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbVIntervals(*args)

def Adaptor3d_HSurfaceTool_UIntervals(*args):
    """
    Adaptor3d_HSurfaceTool_UIntervals(Handle_Adaptor3d_HSurface S, NCollection_Array1_Standard_Real T, GeomAbs_Shape const Sh)

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
    :type Sh: OCC.wrapper.GeomAbs.GeomAbs_Shape

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UIntervals(*args)

def Adaptor3d_HSurfaceTool_VIntervals(*args):
    """
    Adaptor3d_HSurfaceTool_VIntervals(Handle_Adaptor3d_HSurface S, NCollection_Array1_Standard_Real T, GeomAbs_Shape const Sh)

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
    :type Sh: OCC.wrapper.GeomAbs.GeomAbs_Shape

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VIntervals(*args)

def Adaptor3d_HSurfaceTool_UTrim(*args):
    """
    Adaptor3d_HSurfaceTool_UTrim(Handle_Adaptor3d_HSurface S, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

    If <First> >= <Last>

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type First: float
    :type Last: float
    :type Tol: float
    :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UTrim(*args)

def Adaptor3d_HSurfaceTool_VTrim(*args):
    """
    Adaptor3d_HSurfaceTool_VTrim(Handle_Adaptor3d_HSurface S, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

    If <First> >= <Last>

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type First: float
    :type Last: float
    :type Tol: float
    :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VTrim(*args)

def Adaptor3d_HSurfaceTool_IsUClosed(*args):
    """
    Adaptor3d_HSurfaceTool_IsUClosed(Handle_Adaptor3d_HSurface S) -> Standard_Boolean

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUClosed(*args)

def Adaptor3d_HSurfaceTool_IsVClosed(*args):
    """
    Adaptor3d_HSurfaceTool_IsVClosed(Handle_Adaptor3d_HSurface S) -> Standard_Boolean

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVClosed(*args)

def Adaptor3d_HSurfaceTool_IsUPeriodic(*args):
    """
    Adaptor3d_HSurfaceTool_IsUPeriodic(Handle_Adaptor3d_HSurface S) -> Standard_Boolean

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUPeriodic(*args)

def Adaptor3d_HSurfaceTool_UPeriod(*args):
    """
    Adaptor3d_HSurfaceTool_UPeriod(Handle_Adaptor3d_HSurface S) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UPeriod(*args)

def Adaptor3d_HSurfaceTool_IsVPeriodic(*args):
    """
    Adaptor3d_HSurfaceTool_IsVPeriodic(Handle_Adaptor3d_HSurface S) -> Standard_Boolean

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVPeriodic(*args)

def Adaptor3d_HSurfaceTool_VPeriod(*args):
    """
    Adaptor3d_HSurfaceTool_VPeriod(Handle_Adaptor3d_HSurface S) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VPeriod(*args)

def Adaptor3d_HSurfaceTool_Value(*args):
    """
    Adaptor3d_HSurfaceTool_Value(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v) -> gp_Pnt

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type u: float
    :type v: float
    :rtype: OCC.wrapper.gp.gp_Pnt

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Value(*args)

def Adaptor3d_HSurfaceTool_D0(*args):
    """
    Adaptor3d_HSurfaceTool_D0(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, gp_Pnt P)

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type u: float
    :type v: float
    :type P: OCC.wrapper.gp.gp_Pnt

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D0(*args)

def Adaptor3d_HSurfaceTool_D1(*args):
    """
    Adaptor3d_HSurfaceTool_D1(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, gp_Pnt P, gp_Vec D1u, gp_Vec D1v)

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type u: float
    :type v: float
    :type P: OCC.wrapper.gp.gp_Pnt
    :type D1u: OCC.wrapper.gp.gp_Vec
    :type D1v: OCC.wrapper.gp.gp_Vec

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D1(*args)

def Adaptor3d_HSurfaceTool_D2(*args):
    """
    Adaptor3d_HSurfaceTool_D2(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type u: float
    :type v: float
    :type P: OCC.wrapper.gp.gp_Pnt
    :type D1U: OCC.wrapper.gp.gp_Vec
    :type D1V: OCC.wrapper.gp.gp_Vec
    :type D2U: OCC.wrapper.gp.gp_Vec
    :type D2V: OCC.wrapper.gp.gp_Vec
    :type D2UV: OCC.wrapper.gp.gp_Vec

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D2(*args)

def Adaptor3d_HSurfaceTool_D3(*args):
    """
    Adaptor3d_HSurfaceTool_D3(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type u: float
    :type v: float
    :type P: OCC.wrapper.gp.gp_Pnt
    :type D1U: OCC.wrapper.gp.gp_Vec
    :type D1V: OCC.wrapper.gp.gp_Vec
    :type D2U: OCC.wrapper.gp.gp_Vec
    :type D2V: OCC.wrapper.gp.gp_Vec
    :type D2UV: OCC.wrapper.gp.gp_Vec
    :type D3U: OCC.wrapper.gp.gp_Vec
    :type D3V: OCC.wrapper.gp.gp_Vec
    :type D3UUV: OCC.wrapper.gp.gp_Vec
    :type D3UVV: OCC.wrapper.gp.gp_Vec

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D3(*args)

def Adaptor3d_HSurfaceTool_DN(*args):
    """
    Adaptor3d_HSurfaceTool_DN(Handle_Adaptor3d_HSurface S, Standard_Real const u, Standard_Real const v, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type u: float
    :type v: float
    :type Nu: int
    :type Nv: int
    :rtype: OCC.wrapper.gp.gp_Vec

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_DN(*args)

def Adaptor3d_HSurfaceTool_UResolution(*args):
    """
    Adaptor3d_HSurfaceTool_UResolution(Handle_Adaptor3d_HSurface S, Standard_Real const R3d) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type R3d: float
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UResolution(*args)

def Adaptor3d_HSurfaceTool_VResolution(*args):
    """
    Adaptor3d_HSurfaceTool_VResolution(Handle_Adaptor3d_HSurface S, Standard_Real const R3d) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type R3d: float
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VResolution(*args)

def Adaptor3d_HSurfaceTool_GetType(*args):
    """
    Adaptor3d_HSurfaceTool_GetType(Handle_Adaptor3d_HSurface S) -> GeomAbs_SurfaceType

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_GetType(*args)

def Adaptor3d_HSurfaceTool_Plane(*args):
    """
    Adaptor3d_HSurfaceTool_Plane(Handle_Adaptor3d_HSurface S) -> gp_Pln

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.gp.gp_Pln

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Plane(*args)

def Adaptor3d_HSurfaceTool_Cylinder(*args):
    """
    Adaptor3d_HSurfaceTool_Cylinder(Handle_Adaptor3d_HSurface S) -> gp_Cylinder

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.gp.gp_Cylinder

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Cylinder(*args)

def Adaptor3d_HSurfaceTool_Cone(*args):
    """
    Adaptor3d_HSurfaceTool_Cone(Handle_Adaptor3d_HSurface S) -> gp_Cone

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.gp.gp_Cone

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Cone(*args)

def Adaptor3d_HSurfaceTool_Torus(*args):
    """
    Adaptor3d_HSurfaceTool_Torus(Handle_Adaptor3d_HSurface S) -> gp_Torus

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.gp.gp_Torus

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Torus(*args)

def Adaptor3d_HSurfaceTool_Sphere(*args):
    """
    Adaptor3d_HSurfaceTool_Sphere(Handle_Adaptor3d_HSurface S) -> gp_Sphere

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.gp.gp_Sphere

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Sphere(*args)

def Adaptor3d_HSurfaceTool_Bezier(*args):
    """
    Adaptor3d_HSurfaceTool_Bezier(Handle_Adaptor3d_HSurface S) -> Handle_Geom_BezierSurface

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Bezier(*args)

def Adaptor3d_HSurfaceTool_BSpline(*args):
    """
    Adaptor3d_HSurfaceTool_BSpline(Handle_Adaptor3d_HSurface S) -> Handle_Geom_BSplineSurface

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BSpline(*args)

def Adaptor3d_HSurfaceTool_AxeOfRevolution(*args):
    """
    Adaptor3d_HSurfaceTool_AxeOfRevolution(Handle_Adaptor3d_HSurface S) -> gp_Ax1

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.gp.gp_Ax1

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_AxeOfRevolution(*args)

def Adaptor3d_HSurfaceTool_Direction(*args):
    """
    Adaptor3d_HSurfaceTool_Direction(Handle_Adaptor3d_HSurface S) -> gp_Dir

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.gp.gp_Dir

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Direction(*args)

def Adaptor3d_HSurfaceTool_BasisCurve(*args):
    """
    Adaptor3d_HSurfaceTool_BasisCurve(Handle_Adaptor3d_HSurface S) -> Handle_Adaptor3d_HCurve

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisCurve(*args)

def Adaptor3d_HSurfaceTool_BasisSurface(*args):
    """
    Adaptor3d_HSurfaceTool_BasisSurface(Handle_Adaptor3d_HSurface S) -> Handle_Adaptor3d_HSurface

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisSurface(*args)

def Adaptor3d_HSurfaceTool_OffsetValue(*args):
    """
    Adaptor3d_HSurfaceTool_OffsetValue(Handle_Adaptor3d_HSurface S) -> Standard_Real

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_OffsetValue(*args)

def Adaptor3d_HSurfaceTool_NbSamplesU(*args):
    """
    NbSamplesU(Handle_Adaptor3d_HSurface S) -> Standard_Integer
    Adaptor3d_HSurfaceTool_NbSamplesU(Handle_Adaptor3d_HSurface S, Standard_Real const u1, Standard_Real const u2) -> Standard_Integer

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type u1: float
    :type u2: float
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesU(*args)

def Adaptor3d_HSurfaceTool_NbSamplesV(*args):
    """
    NbSamplesV(Handle_Adaptor3d_HSurface S) -> Standard_Integer
    Adaptor3d_HSurfaceTool_NbSamplesV(Handle_Adaptor3d_HSurface S, Standard_Real const v1, Standard_Real const v2) -> Standard_Integer

    :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :type v1: float
    :type v2: float
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesV(*args)



