# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeBuild')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeBuild')
    _ShapeBuild = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeBuild', [dirname(__file__)])
        except ImportError:
            import _ShapeBuild
            return _ShapeBuild
        try:
            _mod = imp.load_module('_ShapeBuild', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeBuild = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeBuild
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeBuild.delete_SwigPyIterator

    def value(self):
        return _ShapeBuild.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ShapeBuild.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ShapeBuild.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ShapeBuild.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ShapeBuild.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ShapeBuild.SwigPyIterator_copy(self)

    def next(self):
        return _ShapeBuild.SwigPyIterator_next(self)

    def __next__(self):
        return _ShapeBuild.SwigPyIterator___next__(self)

    def previous(self):
        return _ShapeBuild.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ShapeBuild.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ShapeBuild.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ShapeBuild.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ShapeBuild.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ShapeBuild.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ShapeBuild.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ShapeBuild.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ShapeBuild.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ShapeBuild.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ShapeBuild.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ShapeBuild.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ShapeBuild.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeBuild.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ShapeBuild.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ShapeBuild.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ShapeBuild.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ShapeBuild.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ShapeBuild.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ShapeBuild.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ShapeBuild.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeBuild.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ShapeBuild.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ShapeBuild.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ShapeBuild.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ShapeBuild.ptr_to_number(item)
ptr_to_number = _ShapeBuild.ptr_to_number

def HashCode(*args):
    return _ShapeBuild.HashCode(*args)
HashCode = _ShapeBuild.HashCode

def ptr_equal(a, b):
    return _ShapeBuild.ptr_equal(a, b)
ptr_equal = _ShapeBuild.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
class ShapeBuild_ReShape(BRepTools.BRepTools_ReShape):
    """
    Rebuilds a Shape by making pre-defined substitutions on some
    of its components

    In a first phase, it records requests to replace or remove
    some individual shapes
    For each shape, the last given request is recorded
    Requests may be applied "Oriented" (i.e. only to an item with
    the SAME orientation) or not (the orientation of replacing
    shape is respectful of that of the original one)

    Then, these requests may be applied to any shape which may
    contain one or more of these individual shapes
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ShapeBuild_ReShape
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ShapeBuild_ReShape(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ShapeBuild_ReShape self) -> ShapeBuild_ReShape

        Returns an empty Reshape


        """
        this = _ShapeBuild.new_ShapeBuild_ReShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Apply(self, *args):
        """
        Apply(ShapeBuild_ReShape self, TopoDS_Shape shape, TopAbs_ShapeEnum const until, Standard_Integer const buildmode) -> TopoDS_Shape
        Apply(ShapeBuild_ReShape self, TopoDS_Shape shape, TopAbs_ShapeEnum const until=TopAbs_SHAPE) -> TopoDS_Shape

        Applies the substitutions requests to a shape.

        <until> gives the level of type until which requests are taken
        into account. For subshapes of the type <until> no rebuild
        and futher exploring are done.

        NOTE: each subshape can be replaced by shape of the same type
        or by shape containing only shapes of that type (for
        example, TopoDS_Edge can be replaced by TopoDS_Edge,
        TopoDS_Wire or TopoDS_Compound containing TopoDS_Edges).
        If incompatible shape type is encountered, it is ignored
        and flag FAIL1 is set in Status.

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type until: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeBuild.ShapeBuild_ReShape_Apply(self, *args)


    def Status(self, *args):
        """
        Status(ShapeBuild_ReShape self, TopoDS_Shape shape, TopoDS_Shape newsh, Standard_Boolean const last) -> Standard_Integer
        Status(ShapeBuild_ReShape self, ShapeExtend_Status const status) -> Standard_Boolean

        Queries the status of last call to Apply(shape,enum)
        OK   : no (sub)shapes replaced or removed
        DONE1: source (starting) shape replaced
        DONE2: source (starting) shape removed
        DONE3: some subshapes replaced
        DONE4: some subshapes removed
        FAIL1: some replacements not done because of bad type of subshape

        :type status: OCC.wrapper.ShapeExtend.ShapeExtend_Status
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.ShapeBuild_ReShape_Status(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ShapeBuild.ShapeBuild_ReShape_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ShapeBuild.ShapeBuild_ReShape_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeBuild.ShapeBuild_ReShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ShapeBuild.delete_ShapeBuild_ReShape
ShapeBuild_ReShape_swigregister = _ShapeBuild.ShapeBuild_ReShape_swigregister
ShapeBuild_ReShape_swigregister(ShapeBuild_ReShape)

def ShapeBuild_ReShape_get_type_name(*args):
    """
    ShapeBuild_ReShape_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ShapeBuild.ShapeBuild_ReShape_get_type_name(*args)

def ShapeBuild_ReShape_get_type_descriptor(*args):
    """
    ShapeBuild_ReShape_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ShapeBuild.ShapeBuild_ReShape_get_type_descriptor(*args)

class ShapeBuild_Vertex(object):
    """Provides low-level functions used for constructing vertices"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CombineVertex(self, *args):
        """
        CombineVertex(ShapeBuild_Vertex self, TopoDS_Vertex V1, TopoDS_Vertex V2, Standard_Real const tolFactor=1.0001) -> TopoDS_Vertex
        CombineVertex(ShapeBuild_Vertex self, gp_Pnt pnt1, gp_Pnt pnt2, Standard_Real const tol1, Standard_Real const tol2, Standard_Real const tolFactor=1.0001) -> TopoDS_Vertex

        The same function as above, except that it accepts two points
        and two tolerances instead of vertices

        :type pnt1: OCC.wrapper.gp.gp_Pnt
        :type pnt2: OCC.wrapper.gp.gp_Pnt
        :type tol1: float
        :type tol2: float
        :type tolFactor: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _ShapeBuild.ShapeBuild_Vertex_CombineVertex(self, *args)


    def __init__(self):
        """Provides low-level functions used for constructing vertices"""
        this = _ShapeBuild.new_ShapeBuild_Vertex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeBuild.delete_ShapeBuild_Vertex
ShapeBuild_Vertex_swigregister = _ShapeBuild.ShapeBuild_Vertex_swigregister
ShapeBuild_Vertex_swigregister(ShapeBuild_Vertex)

class Handle_ShapeBuild_ReShape(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ShapeBuild_ReShape self)

        Nullify the handle


        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ShapeBuild_ReShape self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ShapeBuild_ReShape self, ShapeBuild_ReShape thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ShapeBuild_ReShape self, Handle_ShapeBuild_ReShape theHandle) -> Handle_ShapeBuild_ReShape
        assign(Handle_ShapeBuild_ReShape self, ShapeBuild_ReShape thePtr) -> Handle_ShapeBuild_ReShape
        assign(Handle_ShapeBuild_ReShape self, Handle_ShapeBuild_ReShape theHandle) -> Handle_ShapeBuild_ReShape

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ShapeBuild_ReShape self) -> ShapeBuild_ReShape

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ShapeBuild_ReShape self) -> ShapeBuild_ReShape

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ShapeBuild_ReShape self) -> ShapeBuild_ReShape

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape___ref__(self, *args)


    def __hash__(self):
        return _ShapeBuild.Handle_ShapeBuild_ReShape___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ShapeBuild.Handle_ShapeBuild_ReShape___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ShapeBuild.new_Handle_ShapeBuild_ReShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ShapeBuild.Handle_ShapeBuild_ReShape_DownCast)
    __swig_destroy__ = _ShapeBuild.delete_Handle_ShapeBuild_ReShape

    def Apply(self, *args):
        """
        Apply(Handle_ShapeBuild_ReShape self, TopoDS_Shape shape, TopAbs_ShapeEnum const until, Standard_Integer const buildmode) -> TopoDS_Shape
        Apply(Handle_ShapeBuild_ReShape self, TopoDS_Shape shape, TopAbs_ShapeEnum const until=TopAbs_SHAPE) -> TopoDS_Shape

        Applies the substitutions requests to a shape.

        <until> gives the level of type until which requests are taken
        into account. For subshapes of the type <until> no rebuild
        and futher exploring are done.

        NOTE: each subshape can be replaced by shape of the same type
        or by shape containing only shapes of that type (for
        example, TopoDS_Edge can be replaced by TopoDS_Edge,
        TopoDS_Wire or TopoDS_Compound containing TopoDS_Edges).
        If incompatible shape type is encountered, it is ignored
        and flag FAIL1 is set in Status.

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type until: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_Apply(self, *args)


    def Status(self, *args):
        """
        Status(Handle_ShapeBuild_ReShape self, TopoDS_Shape shape, TopoDS_Shape newsh, Standard_Boolean const last) -> Standard_Integer
        Status(Handle_ShapeBuild_ReShape self, ShapeExtend_Status const status) -> Standard_Boolean

        Queries the status of last call to Apply(shape,enum)
        OK   : no (sub)shapes replaced or removed
        DONE1: source (starting) shape replaced
        DONE2: source (starting) shape removed
        DONE3: some subshapes replaced
        DONE4: some subshapes removed
        FAIL1: some replacements not done because of bad type of subshape

        :type status: OCC.wrapper.ShapeExtend.ShapeExtend_Status
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_Status(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ShapeBuild_ReShape self) -> char const *

        :rtype: const char *

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeBuild.Handle_ShapeBuild_ReShape_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeBuild.Handle_ShapeBuild_ReShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(Handle_ShapeBuild_ReShape self)

        Clears all substitutions requests


        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_Clear(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_ShapeBuild_ReShape self, TopoDS_Shape shape)

        Sets a request to Remove a Shape whatever the orientation

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_Remove(self, *args)


    def Replace(self, *args):
        """
        Replace(Handle_ShapeBuild_ReShape self, TopoDS_Shape shape, TopoDS_Shape newshape)

        Sets a request to Replace a Shape by a new one.

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type newshape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_Replace(self, *args)


    def IsRecorded(self, *args):
        """
        IsRecorded(Handle_ShapeBuild_ReShape self, TopoDS_Shape shape) -> Standard_Boolean

        Tells if a shape is recorded for Replace/Remove

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_IsRecorded(self, *args)


    def Value(self, *args):
        """
        Value(Handle_ShapeBuild_ReShape self, TopoDS_Shape shape) -> TopoDS_Shape

        Returns the new value for an individual shape
        If not recorded, returns the original shape itself
        If to be Removed, returns a Null Shape
        Else, returns the replacing item

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_Value(self, *args)


    def ModeConsiderLocation(self, *args):
        """
        ModeConsiderLocation(Handle_ShapeBuild_ReShape self) -> Standard_Boolean &

        Returns (modifiable) the flag which defines whether Location of shape take into account
        during replacing shapes.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_ModeConsiderLocation(self, *args)


    def CopyVertex(self, *args):
        """
        CopyVertex(Handle_ShapeBuild_ReShape self, TopoDS_Vertex theV, Standard_Real const theTol=-1.0) -> TopoDS_Vertex
        CopyVertex(Handle_ShapeBuild_ReShape self, TopoDS_Vertex theV, gp_Pnt theNewPos, Standard_Real const aTol) -> TopoDS_Vertex

        :type theV: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type theNewPos: OCC.wrapper.gp.gp_Pnt
        :type aTol: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_CopyVertex(self, *args)


    def IsNewShape(self, *args):
        """
        IsNewShape(Handle_ShapeBuild_ReShape self, TopoDS_Shape theShape) -> Standard_Boolean

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_IsNewShape(self, *args)


    def History(self, *args):
        """
        History(Handle_ShapeBuild_ReShape self) -> Handle_BRepTools_History

        Returns the history of the substituted shapes.

        :rtype: OCC.wrapper.BRepTools.Handle_BRepTools_History

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_History(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_ShapeBuild_ReShape self)

        Memory deallocator for transient classes


        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ShapeBuild_ReShape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ShapeBuild_ReShape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ShapeBuild_ReShape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ShapeBuild_ReShape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ShapeBuild_ReShape self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ShapeBuild_ReShape self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ShapeBuild_ReShape self)

        Increments the reference counter of this object


        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ShapeBuild_ReShape self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeBuild.Handle_ShapeBuild_ReShape_DecrementRefCounter(self, *args)

Handle_ShapeBuild_ReShape_swigregister = _ShapeBuild.Handle_ShapeBuild_ReShape_swigregister
Handle_ShapeBuild_ReShape_swigregister(Handle_ShapeBuild_ReShape)

def Handle_ShapeBuild_ReShape_DownCast(thing):
    return _ShapeBuild.Handle_ShapeBuild_ReShape_DownCast(thing)
Handle_ShapeBuild_ReShape_DownCast = _ShapeBuild.Handle_ShapeBuild_ReShape_DownCast

class ShapeBuild_Edge(object):
    """
    This class provides low-level operators for building an edge
    3d curve, copying edge with replaced vertices etc.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CopyReplaceVertices(self, *args):
        """
        CopyReplaceVertices(ShapeBuild_Edge self, TopoDS_Edge edge, TopoDS_Vertex V1, TopoDS_Vertex V2) -> TopoDS_Edge

        Copy edge and replace one or both its vertices to a given
        one(s). Vertex V1 replaces FORWARD vertex, and V2 - REVERSED,
        as they are found by TopoDS_Iterator.
        If V1 or V2 is NULL, the original vertex is taken

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type V1: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type V2: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ShapeBuild.ShapeBuild_Edge_CopyReplaceVertices(self, *args)


    def CopyRanges(self, *args):
        """
        CopyRanges(ShapeBuild_Edge self, TopoDS_Edge toedge, TopoDS_Edge fromedge, Standard_Real const alpha=0, Standard_Real const beta=1)

        Copies ranges for curve3d and all common pcurves from
        edge <fromedge> into edge <toedge>.

        :type toedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type fromedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type alpha: float
        :type beta: float

        """
        return _ShapeBuild.ShapeBuild_Edge_CopyRanges(self, *args)


    def SetRange3d(self, *args):
        """
        SetRange3d(ShapeBuild_Edge self, TopoDS_Edge edge, Standard_Real const first, Standard_Real const last)

        Sets range on 3d curve only.

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type first: float
        :type last: float

        """
        return _ShapeBuild.ShapeBuild_Edge_SetRange3d(self, *args)


    def CopyPCurves(self, *args):
        """
        CopyPCurves(ShapeBuild_Edge self, TopoDS_Edge toedge, TopoDS_Edge fromedge)

        Makes a copy of pcurves from edge <fromedge> into edge
        <toedge>. Pcurves which are already present in <toedge>,
        are replaced by copies, other are copied. Ranges are also
        copied.

        :type toedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type fromedge: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ShapeBuild.ShapeBuild_Edge_CopyPCurves(self, *args)


    def Copy(self, *args):
        """
        Copy(ShapeBuild_Edge self, TopoDS_Edge edge, Standard_Boolean const sharepcurves) -> TopoDS_Edge

        Make a copy of <edge> by call to CopyReplaceVertices()
        (i.e. construct new TEdge with the same pcurves and vertices).
        If <sharepcurves> is False, pcurves are also replaced by
        their copies with help of method CopyPCurves

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type sharepcurves: bool
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ShapeBuild.ShapeBuild_Edge_Copy(self, *args)


    def RemovePCurve(self, *args):
        """
        RemovePCurve(ShapeBuild_Edge self, TopoDS_Edge edge, TopoDS_Face face)
        RemovePCurve(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom_Surface surf)
        RemovePCurve(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom_Surface surf, TopLoc_Location loc)

        Removes the PCurve(s) which could be recorded in an Edge for
        the given Surface, with given Location

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type surf: OCC.wrapper.Geom.Handle_Geom_Surface
        :type loc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _ShapeBuild.ShapeBuild_Edge_RemovePCurve(self, *args)


    def ReplacePCurve(self, *args):
        """
        ReplacePCurve(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom2d_Curve pcurve, TopoDS_Face face)

        Replace the PCurve in an Edge for the given Face
        In case if edge is seam, i.e. has 2 pcurves on that face,
        only pcurve corresponding to the orientation of the edge is
        replaced

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type pcurve: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type face: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _ShapeBuild.ShapeBuild_Edge_ReplacePCurve(self, *args)


    def ReassignPCurve(self, *args):
        """
        ReassignPCurve(ShapeBuild_Edge self, TopoDS_Edge edge, TopoDS_Face old, TopoDS_Face sub) -> Standard_Boolean

        Reassign edge pcurve lying on face <old> to another face <sub>.
        If edge has two pcurves on <old> face, only one of them will be
        reassigned, and other will left alone. Similarly, if edge already
        had a pcurve on face <sub>, it will have two pcurves on it.
        Returns True if succeeded, False if no pcurve lying on <old> found.

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type old: OCC.wrapper.TopoDS.TopoDS_Face
        :type sub: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.ShapeBuild_Edge_ReassignPCurve(self, *args)


    def TransformPCurve(self, *args):
        """
        TransformPCurve(ShapeBuild_Edge self, Handle_Geom2d_Curve pcurve, gp_Trsf2d trans, Standard_Real const uFact) -> Handle_Geom2d_Curve

        Transforms the PCurve with given matrix and affinity U factor.

        :type pcurve: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :type aFirst: float
        :type aLast: float
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _ShapeBuild.ShapeBuild_Edge_TransformPCurve(self, *args)


    def RemoveCurve3d(self, *args):
        """
        RemoveCurve3d(ShapeBuild_Edge self, TopoDS_Edge edge)

        Removes the Curve3D recorded in an Edge

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ShapeBuild.ShapeBuild_Edge_RemoveCurve3d(self, *args)


    def BuildCurve3d(self, *args):
        """
        BuildCurve3d(ShapeBuild_Edge self, TopoDS_Edge edge) -> Standard_Boolean

        Calls BRepTools::BuildCurve3D

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeBuild.ShapeBuild_Edge_BuildCurve3d(self, *args)


    def MakeEdge(self, *args):
        """
        MakeEdge(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom_Curve curve, TopLoc_Location L)
        MakeEdge(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom_Curve curve, TopLoc_Location L, Standard_Real const p1, Standard_Real const p2)
        MakeEdge(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom2d_Curve pcurve, TopoDS_Face face)
        MakeEdge(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom2d_Curve pcurve, TopoDS_Face face, Standard_Real const p1, Standard_Real const p2)
        MakeEdge(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom2d_Curve pcurve, Handle_Geom_Surface S, TopLoc_Location L)
        MakeEdge(ShapeBuild_Edge self, TopoDS_Edge edge, Handle_Geom2d_Curve pcurve, Handle_Geom_Surface S, TopLoc_Location L, Standard_Real const p1, Standard_Real const p2)

        Makes edge with pcurve, surface, location and range [p1, p2]

        :type edge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type pcurve: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type L: OCC.wrapper.TopLoc.TopLoc_Location
        :type p1: float
        :type p2: float

        """
        return _ShapeBuild.ShapeBuild_Edge_MakeEdge(self, *args)


    def __init__(self):
        """
        This class provides low-level operators for building an edge
        3d curve, copying edge with replaced vertices etc.
        """
        this = _ShapeBuild.new_ShapeBuild_Edge()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeBuild.delete_ShapeBuild_Edge
ShapeBuild_Edge_swigregister = _ShapeBuild.ShapeBuild_Edge_swigregister
ShapeBuild_Edge_swigregister(ShapeBuild_Edge)

class ShapeBuild_(object):
    """
    This package provides basic building tools for other packages in ShapeHealing.
    These tools are rather internal for ShapeHealing .
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def PlaneXOY(*args):
        """
        PlaneXOY() -> Handle_Geom_Plane

        Rebuilds a shape with substitution of some components
        Returns a Geom_Surface which is the Plane XOY (Z positive)
        This allows to consider an UV space homologous to a 3D space,
        with this support surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Plane

        """
        return _ShapeBuild.ShapeBuild__PlaneXOY(*args)

    PlaneXOY = staticmethod(PlaneXOY)

    def __init__(self):
        """
        This package provides basic building tools for other packages in ShapeHealing.
        These tools are rather internal for ShapeHealing .
        """
        this = _ShapeBuild.new_ShapeBuild_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeBuild.delete_ShapeBuild_
ShapeBuild__swigregister = _ShapeBuild.ShapeBuild__swigregister
ShapeBuild__swigregister(ShapeBuild_)

def ShapeBuild__PlaneXOY(*args):
    """
    ShapeBuild__PlaneXOY() -> Handle_Geom_Plane

    Rebuilds a shape with substitution of some components
    Returns a Geom_Surface which is the Plane XOY (Z positive)
    This allows to consider an UV space homologous to a 3D space,
    with this support surface

    :rtype: OCC.wrapper.Geom.Handle_Geom_Plane

    """
    return _ShapeBuild.ShapeBuild__PlaneXOY(*args)



