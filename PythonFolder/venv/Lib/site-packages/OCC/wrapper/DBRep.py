# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DBRep')
    _DBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DBRep', [dirname(__file__)])
        except ImportError:
            import _DBRep
            return _DBRep
        try:
            _mod = imp.load_module('_DBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DBRep = swig_import_helper()
    del swig_import_helper
else:
    import _DBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DBRep.delete_SwigPyIterator

    def value(self):
        return _DBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DBRep.SwigPyIterator_copy(self)

    def next(self):
        return _DBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _DBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _DBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DBRep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_DBRep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _DBRep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DBRep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DBRep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _DBRep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _DBRep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _DBRep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DBRep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_DBRep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _DBRep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DBRep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DBRep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _DBRep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _DBRep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _DBRep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _DBRep.ptr_to_number(item)
ptr_to_number = _DBRep.ptr_to_number

def HashCode(*args):
    return _DBRep.HashCode(*args)
HashCode = _DBRep.HashCode

def ptr_equal(a, b):
    return _DBRep.ptr_equal(a, b)
ptr_equal = _DBRep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dHatch
else:
    import Geom2dHatch
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HatchGen
else:
    import HatchGen
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dInt
else:
    import Geom2dInt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurve
else:
    import IntCurve
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Extrema
else:
    import Extrema
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
class DBRep_Edge(Standard.Standard_Transient):
    """Display of an edge. Edge + color."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DBRep_Edge
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DBRep_Edge(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DBRep_Edge self, TopoDS_Edge E, Draw_Color C) -> DBRep_Edge

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type C: OCC.wrapper.Draw.Draw_Color

        """
        this = _DBRep.new_DBRep_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Edge(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _DBRep.DBRep_Edge_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        res = _DBRep.DBRep_Edge_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DBRep.DBRep_Edge_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DBRep.DBRep_Edge_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.DBRep_Edge_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DBRep.delete_DBRep_Edge
DBRep_Edge_swigregister = _DBRep.DBRep_Edge_swigregister
DBRep_Edge_swigregister(DBRep_Edge)

def DBRep_Edge_get_type_name(*args):
    """
    DBRep_Edge_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DBRep.DBRep_Edge_get_type_name(*args)

def DBRep_Edge_get_type_descriptor(*args):
    """
    DBRep_Edge_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DBRep.DBRep_Edge_get_type_descriptor(*args)

class DBRep_HideData(object):
    """
    This  class stores all the informations concerning
    hidden lines on a view.

    * View number
    * Matrix of projection
    * Type of projection, focal
    * Arrays of 3d points

    A drawable shape contains a  list of such  objects
    to store  the  hidden lines  for  each view.   The
    IsSame method is  used  to check if   hidden lines
    must be recompiled.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DBRep_HideData self) -> DBRep_HideData

        This  class stores all the informations concerning
        hidden lines on a view.

        * View number
        * Matrix of projection
        * Type of projection, focal
        * Arrays of 3d points

        A drawable shape contains a  list of such  objects
        to store  the  hidden lines  for  each view.   The
        IsSame method is  used  to check if   hidden lines
        must be recompiled.
        """
        this = _DBRep.new_DBRep_HideData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        """
        Set(DBRep_HideData self, Standard_Integer const ViewId, gp_Trsf TProj, Standard_Real const Focal, TopoDS_Shape S, Standard_Real const ang)

        ViewId is the view number
        TProj the projection
        Focal <= 0 means parallel projection
        Alg : the hidden lines

        :type ViewId: int
        :type TProj: OCC.wrapper.gp.gp_Trsf
        :type Focal: float
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ang: float

        """
        return _DBRep.DBRep_HideData_Set(self, *args)


    def ViewId(self, *args):
        """
        ViewId(DBRep_HideData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.DBRep_HideData_ViewId(self, *args)


    def Angle(self, *args):
        """
        Angle(DBRep_HideData self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DBRep.DBRep_HideData_Angle(self, *args)


    def IsSame(self, *args):
        """
        IsSame(DBRep_HideData self, gp_Trsf TProj, Standard_Real const Focla) -> Standard_Boolean

        Returns True if the projection is the same

        :type TProj: OCC.wrapper.gp.gp_Trsf
        :type Focla: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.DBRep_HideData_IsSame(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DBRep_HideData self, Draw_Display D, Standard_Boolean const withRg1, Standard_Boolean const withRgN, Standard_Boolean const withHid, Draw_Color VisCol, Draw_Color HidCol)

        :type D: OCC.wrapper.Draw.Draw_Display
        :type withRg1: bool
        :type withRgN: bool
        :type withHid: bool
        :type VisCol: OCC.wrapper.Draw.Draw_Color
        :type HidCol: OCC.wrapper.Draw.Draw_Color

        """
        return _DBRep.DBRep_HideData_DrawOn(self, *args)


    def LastPick(self, *args):
        """
        Returns the subshape touched by the last pick.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _DBRep.DBRep_HideData_LastPick(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DBRep.delete_DBRep_HideData
DBRep_HideData_swigregister = _DBRep.DBRep_HideData_swigregister
DBRep_HideData_swigregister(DBRep_HideData)

class DBRep_DrawableShape(Draw.Draw_Drawable3D):
    """
    Drawable structure to display a  shape. Contains a
    list of edges and a list of faces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DBRep_DrawableShape
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DBRep_DrawableShape(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DBRep.DBRep_DrawableShape_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DBRep.DBRep_DrawableShape_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.DBRep_DrawableShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(DBRep_DrawableShape self, TopoDS_Shape C, Draw_Color FreeCol, Draw_Color ConnCol, Draw_Color EdgeCol, Draw_Color IsosCol, Standard_Real const size, Standard_Integer const nbisos, Standard_Integer const discret) -> DBRep_DrawableShape

        :type C: OCC.wrapper.TopoDS.TopoDS_Shape
        :type FreeCol: OCC.wrapper.Draw.Draw_Color
        :type ConnCol: OCC.wrapper.Draw.Draw_Color
        :type EdgeCol: OCC.wrapper.Draw.Draw_Color
        :type IsosCol: OCC.wrapper.Draw.Draw_Color
        :type size: float
        :type nbisos: int
        :type discret: int

        """
        this = _DBRep.new_DBRep_DrawableShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ChangeNbIsos(self, *args):
        """
        ChangeNbIsos(DBRep_DrawableShape self, Standard_Integer const NbIsos)

        Changes the number of isoparametric curves in a shape.

        :type NbIsos: int

        """
        return _DBRep.DBRep_DrawableShape_ChangeNbIsos(self, *args)


    def NbIsos(self, *args):
        """
        NbIsos(DBRep_DrawableShape self) -> Standard_Integer

        Returns the number of isoparametric curves in a shape.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.DBRep_DrawableShape_NbIsos(self, *args)


    def Discret(self, *args):
        """
        Discret(DBRep_DrawableShape self) -> Standard_Integer

        Returns the discretisation value of curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.DBRep_DrawableShape_Discret(self, *args)


    def Shape(self, *args):
        """
        Shape(DBRep_DrawableShape self) -> TopoDS_Shape

        Return const &

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _DBRep.DBRep_DrawableShape_Shape(self, *args)


    def DisplayOrientation(self, *args):
        """
        DisplayOrientation(DBRep_DrawableShape self, Standard_Boolean const D)

        When True  the orientations  of the edges and free
        vertices  are displayed.

        :type D: bool

        """
        return _DBRep.DBRep_DrawableShape_DisplayOrientation(self, *args)


    def DisplayHLR(self, *args):
        """
        DisplayHLR(DBRep_DrawableShape self, Standard_Boolean const withHLR, Standard_Boolean const withRg1, Standard_Boolean const withRgN, Standard_Boolean const withHid, Standard_Real const ang)

        Performs Hidden lines.

        :type withHLR: bool
        :type withRg1: bool
        :type withRgN: bool
        :type withHid: bool
        :type ang: float

        """
        return _DBRep.DBRep_DrawableShape_DisplayHLR(self, *args)


    def DisplayTriangulation(self, *args):
        """
        DisplayTriangulation(DBRep_DrawableShape self, Standard_Boolean const D)
        DisplayTriangulation(DBRep_DrawableShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.DBRep_DrawableShape_DisplayTriangulation(self, *args)


    def DisplayPolygons(self, *args):
        """
        DisplayPolygons(DBRep_DrawableShape self, Standard_Boolean const D)
        DisplayPolygons(DBRep_DrawableShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.DBRep_DrawableShape_DisplayPolygons(self, *args)


    def GetDisplayHLR(self, *args):
        """
        GetDisplayHLR(DBRep_DrawableShape self)

        :type withHLR: bool
        :type withRg1: bool
        :type withRgN: bool
        :type withHid: bool
        :type ang: float

        """
        return _DBRep.DBRep_DrawableShape_GetDisplayHLR(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DBRep_DrawableShape self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DBRep.DBRep_DrawableShape_DrawOn(self, *args)


    def DisplayHiddenLines(self, *args):
        """
        DisplayHiddenLines(DBRep_DrawableShape self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DBRep.DBRep_DrawableShape_DisplayHiddenLines(self, *args)


    def Copy(self, *args):
        """
        Copy(DBRep_DrawableShape self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DBRep.DBRep_DrawableShape_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DBRep_DrawableShape self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DBRep.DBRep_DrawableShape_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DBRep_DrawableShape self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DBRep.DBRep_DrawableShape_Whatis(self, *args)


    def LastPick(*args):
        """
        LastPick(TopoDS_Shape S)

        Returns the subshape touched by the last pick.
        u,v are the parameters of the closest point.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type u: float
        :type v: float

        """
        return _DBRep.DBRep_DrawableShape_LastPick(*args)

    LastPick = staticmethod(LastPick)

    def addMeshNormals(*args):
        """
        addMeshNormals(NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > & theNormals, TopoDS_Face theFace, Standard_Real const theLength) -> Standard_Boolean
        addMeshNormals(NCollection_DataMap< TopoDS_Face,NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > > & theNormals, TopoDS_Shape theShape, Standard_Real const theLength)

        Auxiliary method computing nodal normals for presentation purposes.
        @param theNormals [out] map of computed normals (grouped per Face)
        @param theShape   [in]  input shape which will be exploded into Faces
        @param theLength  [in]  normal length

        :type theNormals: OCC.wrapper.DBRep.NCollection_DataMap_TopoDS_Face_NCollection_Vector_pair_gp_Pnt_gp_Pnt
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theLength: float

        """
        return _DBRep.DBRep_DrawableShape_addMeshNormals(*args)

    addMeshNormals = staticmethod(addMeshNormals)

    def addSurfaceNormals(*args):
        """
        addSurfaceNormals(NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > & theNormals, TopoDS_Face theFace, Standard_Real const theLength, Standard_Integer const theNbAlongU, Standard_Integer const theNbAlongV) -> Standard_Boolean
        addSurfaceNormals(NCollection_DataMap< TopoDS_Face,NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > > & theNormals, TopoDS_Shape theShape, Standard_Real const theLength, Standard_Integer const theNbAlongU, Standard_Integer const theNbAlongV)

        Auxiliary method computing surface normals distributed within the Face for presentation purposes.
        @param theNormals  [out] map of computed normals (grouped per Face)
        @param theShape    [in]  input shape which will be exploded into Faces
        @param theLength   [in]  normal length
        @param theNbAlongU [in]  number along U
        @param theNbAlongV [in]  number along V
        @return FALSE if normals can not be computed

        :type theNormals: OCC.wrapper.DBRep.NCollection_DataMap_TopoDS_Face_NCollection_Vector_pair_gp_Pnt_gp_Pnt
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theLength: float
        :type theNbAlongU: int
        :type theNbAlongV: int

        """
        return _DBRep.DBRep_DrawableShape_addSurfaceNormals(*args)

    addSurfaceNormals = staticmethod(addSurfaceNormals)
    __swig_destroy__ = _DBRep.delete_DBRep_DrawableShape
DBRep_DrawableShape_swigregister = _DBRep.DBRep_DrawableShape_swigregister
DBRep_DrawableShape_swigregister(DBRep_DrawableShape)

def DBRep_DrawableShape_get_type_name(*args):
    """
    DBRep_DrawableShape_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DBRep.DBRep_DrawableShape_get_type_name(*args)

def DBRep_DrawableShape_get_type_descriptor(*args):
    """
    DBRep_DrawableShape_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DBRep.DBRep_DrawableShape_get_type_descriptor(*args)

def DBRep_DrawableShape_LastPick(*args):
    """
    DBRep_DrawableShape_LastPick(TopoDS_Shape S)

    Returns the subshape touched by the last pick.
    u,v are the parameters of the closest point.

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape
    :type u: float
    :type v: float

    """
    return _DBRep.DBRep_DrawableShape_LastPick(*args)

def DBRep_DrawableShape_addMeshNormals(*args):
    """
    addMeshNormals(NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > & theNormals, TopoDS_Face theFace, Standard_Real const theLength) -> Standard_Boolean
    DBRep_DrawableShape_addMeshNormals(NCollection_DataMap< TopoDS_Face,NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > > & theNormals, TopoDS_Shape theShape, Standard_Real const theLength)

    Auxiliary method computing nodal normals for presentation purposes.
    @param theNormals [out] map of computed normals (grouped per Face)
    @param theShape   [in]  input shape which will be exploded into Faces
    @param theLength  [in]  normal length

    :type theNormals: OCC.wrapper.DBRep.NCollection_DataMap_TopoDS_Face_NCollection_Vector_pair_gp_Pnt_gp_Pnt
    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theLength: float

    """
    return _DBRep.DBRep_DrawableShape_addMeshNormals(*args)

def DBRep_DrawableShape_addSurfaceNormals(*args):
    """
    addSurfaceNormals(NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > & theNormals, TopoDS_Face theFace, Standard_Real const theLength, Standard_Integer const theNbAlongU, Standard_Integer const theNbAlongV) -> Standard_Boolean
    DBRep_DrawableShape_addSurfaceNormals(NCollection_DataMap< TopoDS_Face,NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > > & theNormals, TopoDS_Shape theShape, Standard_Real const theLength, Standard_Integer const theNbAlongU, Standard_Integer const theNbAlongV)

    Auxiliary method computing surface normals distributed within the Face for presentation purposes.
    @param theNormals  [out] map of computed normals (grouped per Face)
    @param theShape    [in]  input shape which will be exploded into Faces
    @param theLength   [in]  normal length
    @param theNbAlongU [in]  number along U
    @param theNbAlongV [in]  number along V
    @return FALSE if normals can not be computed

    :type theNormals: OCC.wrapper.DBRep.NCollection_DataMap_TopoDS_Face_NCollection_Vector_pair_gp_Pnt_gp_Pnt
    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theLength: float
    :type theNbAlongU: int
    :type theNbAlongV: int

    """
    return _DBRep.DBRep_DrawableShape_addSurfaceNormals(*args)

class DBRep_Face(Standard.Standard_Transient):
    """Display of a face. Face + Array of iso + color."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DBRep_Face
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DBRep_Face(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DBRep_Face self, TopoDS_Face F, Standard_Integer const N, Draw_Color C) -> DBRep_Face

        N is the number of iso intervals.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type N: int
        :type C: OCC.wrapper.Draw.Draw_Color

        """
        this = _DBRep.new_DBRep_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Face(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DBRep.DBRep_Face_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbIsos(self, *args):
        """
        NbIsos(DBRep_Face self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.DBRep_Face_NbIsos(self, *args)


    def Iso(self, *args):
        """
        Iso(DBRep_Face self, Standard_Integer const I, GeomAbs_IsoType const T, Standard_Real const Par, Standard_Real const T1, Standard_Real const T2)

        :type I: int
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type Par: float
        :type T1: float
        :type T2: float

        """
        return _DBRep.DBRep_Face_Iso(self, *args)


    def GetIso(self, *args):
        """
        GetIso(DBRep_Face self, Standard_Integer const I)

        :type I: int
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type Par: float
        :type T1: float
        :type T2: float

        """
        return _DBRep.DBRep_Face_GetIso(self, *args)


    def Color(self, *args):
        """
        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        res = _DBRep.DBRep_Face_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DBRep.DBRep_Face_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DBRep.DBRep_Face_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.DBRep_Face_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DBRep.delete_DBRep_Face
DBRep_Face_swigregister = _DBRep.DBRep_Face_swigregister
DBRep_Face_swigregister(DBRep_Face)

def DBRep_Face_get_type_name(*args):
    """
    DBRep_Face_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DBRep.DBRep_Face_get_type_name(*args)

def DBRep_Face_get_type_descriptor(*args):
    """
    DBRep_Face_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DBRep.DBRep_Face_get_type_descriptor(*args)

class NCollection_List_Handle_DBRep_Face(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_DBRep_Face self) -> NCollection_List< opencascade::handle< DBRep_Face > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_DBRep_Face self) -> NCollection_List< opencascade::handle< DBRep_Face > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_DBRep_Face self) -> NCollection_List< opencascade::handle< DBRep_Face > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_DBRep_Face self) -> NCollection_List< opencascade::handle< DBRep_Face > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _DBRep.new_NCollection_List_Handle_DBRep_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_DBRep_Face self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_DBRep_Face self, NCollection_List_Handle_DBRep_Face theOther) -> NCollection_List_Handle_DBRep_Face

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_DBRep_Face self, NCollection_List_Handle_DBRep_Face theOther) -> NCollection_List_Handle_DBRep_Face

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_DBRep_Face self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _DBRep.NCollection_List_Handle_DBRep_Face_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _DBRep.NCollection_List_Handle_DBRep_Face_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_DBRep_Face self, Handle_DBRep_Face theItem) -> Handle_DBRep_Face
        Append(NCollection_List_Handle_DBRep_Face self, Handle_DBRep_Face theItem, NCollection_List< opencascade::handle< DBRep_Face > >::Iterator & theIter)
        Append(NCollection_List_Handle_DBRep_Face self, NCollection_List_Handle_DBRep_Face theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_DBRep_Face self, Handle_DBRep_Face theItem) -> Handle_DBRep_Face
        Prepend(NCollection_List_Handle_DBRep_Face self, NCollection_List_Handle_DBRep_Face theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_DBRep_Face self)

        RemoveFirst item


        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_DBRep_Face self, NCollection_List< opencascade::handle< DBRep_Face > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_DBRep_Face self, Handle_DBRep_Face theItem, NCollection_List< opencascade::handle< DBRep_Face > >::Iterator & theIter) -> Handle_DBRep_Face
        InsertBefore(NCollection_List_Handle_DBRep_Face self, NCollection_List_Handle_DBRep_Face theOther, NCollection_List< opencascade::handle< DBRep_Face > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_DBRep_Face self, Handle_DBRep_Face theItem, NCollection_List< opencascade::handle< DBRep_Face > >::Iterator & theIter) -> Handle_DBRep_Face
        InsertAfter(NCollection_List_Handle_DBRep_Face self, NCollection_List_Handle_DBRep_Face theOther, NCollection_List< opencascade::handle< DBRep_Face > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_DBRep_Face self)

        Reverse the list


        """
        return _DBRep.NCollection_List_Handle_DBRep_Face_Reverse(self, *args)


    def __iter__(self):
        return _DBRep.NCollection_List_Handle_DBRep_Face___iter__(self)
    __swig_destroy__ = _DBRep.delete_NCollection_List_Handle_DBRep_Face
NCollection_List_Handle_DBRep_Face_swigregister = _DBRep.NCollection_List_Handle_DBRep_Face_swigregister
NCollection_List_Handle_DBRep_Face_swigregister(NCollection_List_Handle_DBRep_Face)

class NCollection_List_Handle_DBRep_Face_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _DBRep.new_NCollection_List_Handle_DBRep_Face_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DBRep.delete_NCollection_List_Handle_DBRep_Face_IteratorHelper

    def __next__(self):
        return _DBRep.NCollection_List_Handle_DBRep_Face_IteratorHelper___next__(self)
NCollection_List_Handle_DBRep_Face_IteratorHelper_swigregister = _DBRep.NCollection_List_Handle_DBRep_Face_IteratorHelper_swigregister
NCollection_List_Handle_DBRep_Face_IteratorHelper_swigregister(NCollection_List_Handle_DBRep_Face_IteratorHelper)


try:
	DBRep_ListOfFace = NCollection_List_Handle_DBRep_Face
except NameError:
	pass # does not exist, probably ignored

class Handle_DBRep_Edge(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DBRep_Edge self)

        Nullify the handle


        """
        return _DBRep.Handle_DBRep_Edge_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DBRep_Edge self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DBRep.Handle_DBRep_Edge_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DBRep_Edge self, DBRep_Edge thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DBRep.Handle_DBRep_Edge_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DBRep_Edge self, Handle_DBRep_Edge theHandle) -> Handle_DBRep_Edge
        assign(Handle_DBRep_Edge self, DBRep_Edge thePtr) -> Handle_DBRep_Edge
        assign(Handle_DBRep_Edge self, Handle_DBRep_Edge theHandle) -> Handle_DBRep_Edge

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DBRep.Handle_DBRep_Edge_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DBRep_Edge self) -> DBRep_Edge

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DBRep.Handle_DBRep_Edge_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DBRep_Edge self) -> DBRep_Edge

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DBRep.Handle_DBRep_Edge___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DBRep_Edge self) -> DBRep_Edge

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DBRep.Handle_DBRep_Edge___ref__(self, *args)


    def __hash__(self):
        return _DBRep.Handle_DBRep_Edge___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DBRep.Handle_DBRep_Edge___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DBRep.new_Handle_DBRep_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DBRep.Handle_DBRep_Edge_DownCast)
    __swig_destroy__ = _DBRep.delete_Handle_DBRep_Edge

    def Edge(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _DBRep.Handle_DBRep_Edge_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        res = _DBRep.Handle_DBRep_Edge_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_DBRep_Edge self) -> char const *

        :rtype: const char *

        """
        return _DBRep.Handle_DBRep_Edge_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.Handle_DBRep_Edge_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.Handle_DBRep_Edge_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_DBRep_Edge self)

        Memory deallocator for transient classes


        """
        return _DBRep.Handle_DBRep_Edge_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DBRep_Edge self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DBRep_Edge self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_Edge_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DBRep_Edge self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DBRep_Edge self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_Edge_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DBRep_Edge self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DBRep.Handle_DBRep_Edge_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DBRep_Edge self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_Edge_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DBRep_Edge self)

        Increments the reference counter of this object


        """
        return _DBRep.Handle_DBRep_Edge_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DBRep_Edge self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_Edge_DecrementRefCounter(self, *args)

Handle_DBRep_Edge_swigregister = _DBRep.Handle_DBRep_Edge_swigregister
Handle_DBRep_Edge_swigregister(Handle_DBRep_Edge)

def Handle_DBRep_Edge_DownCast(thing):
    return _DBRep.Handle_DBRep_Edge_DownCast(thing)
Handle_DBRep_Edge_DownCast = _DBRep.Handle_DBRep_Edge_DownCast

class NCollection_List_Handle_DBRep_Edge(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_DBRep_Edge self) -> NCollection_List< opencascade::handle< DBRep_Edge > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_DBRep_Edge self) -> NCollection_List< opencascade::handle< DBRep_Edge > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_DBRep_Edge self) -> NCollection_List< opencascade::handle< DBRep_Edge > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_DBRep_Edge self) -> NCollection_List< opencascade::handle< DBRep_Edge > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _DBRep.new_NCollection_List_Handle_DBRep_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_DBRep_Edge self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_DBRep_Edge self, NCollection_List_Handle_DBRep_Edge theOther) -> NCollection_List_Handle_DBRep_Edge

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_DBRep_Edge self, NCollection_List_Handle_DBRep_Edge theOther) -> NCollection_List_Handle_DBRep_Edge

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_DBRep_Edge self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _DBRep.NCollection_List_Handle_DBRep_Edge_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _DBRep.NCollection_List_Handle_DBRep_Edge_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_DBRep_Edge self, Handle_DBRep_Edge theItem) -> Handle_DBRep_Edge
        Append(NCollection_List_Handle_DBRep_Edge self, Handle_DBRep_Edge theItem, NCollection_List< opencascade::handle< DBRep_Edge > >::Iterator & theIter)
        Append(NCollection_List_Handle_DBRep_Edge self, NCollection_List_Handle_DBRep_Edge theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_DBRep_Edge self, Handle_DBRep_Edge theItem) -> Handle_DBRep_Edge
        Prepend(NCollection_List_Handle_DBRep_Edge self, NCollection_List_Handle_DBRep_Edge theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_DBRep_Edge self)

        RemoveFirst item


        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_DBRep_Edge self, NCollection_List< opencascade::handle< DBRep_Edge > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_DBRep_Edge self, Handle_DBRep_Edge theItem, NCollection_List< opencascade::handle< DBRep_Edge > >::Iterator & theIter) -> Handle_DBRep_Edge
        InsertBefore(NCollection_List_Handle_DBRep_Edge self, NCollection_List_Handle_DBRep_Edge theOther, NCollection_List< opencascade::handle< DBRep_Edge > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_DBRep_Edge self, Handle_DBRep_Edge theItem, NCollection_List< opencascade::handle< DBRep_Edge > >::Iterator & theIter) -> Handle_DBRep_Edge
        InsertAfter(NCollection_List_Handle_DBRep_Edge self, NCollection_List_Handle_DBRep_Edge theOther, NCollection_List< opencascade::handle< DBRep_Edge > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_DBRep_Edge self)

        Reverse the list


        """
        return _DBRep.NCollection_List_Handle_DBRep_Edge_Reverse(self, *args)


    def __iter__(self):
        return _DBRep.NCollection_List_Handle_DBRep_Edge___iter__(self)
    __swig_destroy__ = _DBRep.delete_NCollection_List_Handle_DBRep_Edge
NCollection_List_Handle_DBRep_Edge_swigregister = _DBRep.NCollection_List_Handle_DBRep_Edge_swigregister
NCollection_List_Handle_DBRep_Edge_swigregister(NCollection_List_Handle_DBRep_Edge)

class NCollection_List_Handle_DBRep_Edge_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _DBRep.new_NCollection_List_Handle_DBRep_Edge_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DBRep.delete_NCollection_List_Handle_DBRep_Edge_IteratorHelper

    def __next__(self):
        return _DBRep.NCollection_List_Handle_DBRep_Edge_IteratorHelper___next__(self)
NCollection_List_Handle_DBRep_Edge_IteratorHelper_swigregister = _DBRep.NCollection_List_Handle_DBRep_Edge_IteratorHelper_swigregister
NCollection_List_Handle_DBRep_Edge_IteratorHelper_swigregister(NCollection_List_Handle_DBRep_Edge_IteratorHelper)


try:
	DBRep_ListOfEdge = NCollection_List_Handle_DBRep_Edge
except NameError:
	pass # does not exist, probably ignored

class NCollection_List_DBRep_HideData_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _DBRep.new_NCollection_List_DBRep_HideData_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DBRep.delete_NCollection_List_DBRep_HideData_IteratorHelper

    def __next__(self):
        return _DBRep.NCollection_List_DBRep_HideData_IteratorHelper___next__(self)
NCollection_List_DBRep_HideData_IteratorHelper_swigregister = _DBRep.NCollection_List_DBRep_HideData_IteratorHelper_swigregister
NCollection_List_DBRep_HideData_IteratorHelper_swigregister(NCollection_List_DBRep_HideData_IteratorHelper)


try:
	DBRep_ListOfHideData = NCollection_List_DBRep_HideData
except NameError:
	pass # does not exist, probably ignored

class Handle_DBRep_DrawableShape(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DBRep_DrawableShape self)

        Nullify the handle


        """
        return _DBRep.Handle_DBRep_DrawableShape_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DBRep_DrawableShape self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DBRep.Handle_DBRep_DrawableShape_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DBRep_DrawableShape self, DBRep_DrawableShape thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DBRep.Handle_DBRep_DrawableShape_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DBRep_DrawableShape self, Handle_DBRep_DrawableShape theHandle) -> Handle_DBRep_DrawableShape
        assign(Handle_DBRep_DrawableShape self, DBRep_DrawableShape thePtr) -> Handle_DBRep_DrawableShape
        assign(Handle_DBRep_DrawableShape self, Handle_DBRep_DrawableShape theHandle) -> Handle_DBRep_DrawableShape

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DBRep.Handle_DBRep_DrawableShape_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DBRep_DrawableShape self) -> DBRep_DrawableShape

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DBRep.Handle_DBRep_DrawableShape_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DBRep_DrawableShape self) -> DBRep_DrawableShape

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DBRep.Handle_DBRep_DrawableShape___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DBRep_DrawableShape self) -> DBRep_DrawableShape

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DBRep.Handle_DBRep_DrawableShape___ref__(self, *args)


    def __hash__(self):
        return _DBRep.Handle_DBRep_DrawableShape___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DBRep.Handle_DBRep_DrawableShape___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DBRep.new_Handle_DBRep_DrawableShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DBRep.Handle_DBRep_DrawableShape_DownCast)
    __swig_destroy__ = _DBRep.delete_Handle_DBRep_DrawableShape

    def get_type_name(self, *args):
        """
        get_type_name(Handle_DBRep_DrawableShape self) -> char const *

        :rtype: const char *

        """
        return _DBRep.Handle_DBRep_DrawableShape_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.Handle_DBRep_DrawableShape_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.Handle_DBRep_DrawableShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeNbIsos(self, *args):
        """
        ChangeNbIsos(Handle_DBRep_DrawableShape self, Standard_Integer const NbIsos)

        Changes the number of isoparametric curves in a shape.

        :type NbIsos: int

        """
        return _DBRep.Handle_DBRep_DrawableShape_ChangeNbIsos(self, *args)


    def NbIsos(self, *args):
        """
        NbIsos(Handle_DBRep_DrawableShape self) -> Standard_Integer

        Returns the number of isoparametric curves in a shape.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_DrawableShape_NbIsos(self, *args)


    def Discret(self, *args):
        """
        Discret(Handle_DBRep_DrawableShape self) -> Standard_Integer

        Returns the discretisation value of curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_DrawableShape_Discret(self, *args)


    def Shape(self, *args):
        """
        Shape(Handle_DBRep_DrawableShape self) -> TopoDS_Shape

        Return const &

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _DBRep.Handle_DBRep_DrawableShape_Shape(self, *args)


    def DisplayOrientation(self, *args):
        """
        DisplayOrientation(Handle_DBRep_DrawableShape self, Standard_Boolean const D)

        When True  the orientations  of the edges and free
        vertices  are displayed.

        :type D: bool

        """
        return _DBRep.Handle_DBRep_DrawableShape_DisplayOrientation(self, *args)


    def DisplayTriangulation(self, *args):
        """
        DisplayTriangulation(Handle_DBRep_DrawableShape self, Standard_Boolean const D)
        DisplayTriangulation(Handle_DBRep_DrawableShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_DrawableShape_DisplayTriangulation(self, *args)


    def DisplayPolygons(self, *args):
        """
        DisplayPolygons(Handle_DBRep_DrawableShape self, Standard_Boolean const D)
        DisplayPolygons(Handle_DBRep_DrawableShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_DrawableShape_DisplayPolygons(self, *args)


    def DisplayHLR(self, *args):
        """
        DisplayHLR(Handle_DBRep_DrawableShape self, Standard_Boolean const withHLR, Standard_Boolean const withRg1, Standard_Boolean const withRgN, Standard_Boolean const withHid, Standard_Real const ang)

        Performs Hidden lines.

        :type withHLR: bool
        :type withRg1: bool
        :type withRgN: bool
        :type withHid: bool
        :type ang: float

        """
        return _DBRep.Handle_DBRep_DrawableShape_DisplayHLR(self, *args)


    def GetDisplayHLR(self, *args):
        """
        GetDisplayHLR(Handle_DBRep_DrawableShape self)

        :type withHLR: bool
        :type withRg1: bool
        :type withRgN: bool
        :type withHid: bool
        :type ang: float

        """
        return _DBRep.Handle_DBRep_DrawableShape_GetDisplayHLR(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DBRep_DrawableShape self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DBRep.Handle_DBRep_DrawableShape_DrawOn(self, *args)


    def DisplayHiddenLines(self, *args):
        """
        DisplayHiddenLines(Handle_DBRep_DrawableShape self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DBRep.Handle_DBRep_DrawableShape_DisplayHiddenLines(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DBRep_DrawableShape self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DBRep.Handle_DBRep_DrawableShape_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DBRep_DrawableShape self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DBRep.Handle_DBRep_DrawableShape_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DBRep_DrawableShape self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DBRep.Handle_DBRep_DrawableShape_Whatis(self, *args)


    def LastPick(self, *args):
        """
        LastPick(Handle_DBRep_DrawableShape self, TopoDS_Shape S)

        Returns the subshape touched by the last pick.
        u,v are the parameters of the closest point.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type u: float
        :type v: float

        """
        return _DBRep.Handle_DBRep_DrawableShape_LastPick(self, *args)


    def addMeshNormals(self, *args):
        """
        addMeshNormals(Handle_DBRep_DrawableShape self, NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > & theNormals, TopoDS_Face theFace, Standard_Real const theLength) -> Standard_Boolean
        addMeshNormals(Handle_DBRep_DrawableShape self, NCollection_DataMap< TopoDS_Face,NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > > & theNormals, TopoDS_Shape theShape, Standard_Real const theLength)

        Auxiliary method computing nodal normals for presentation purposes.
        @param theNormals [out] map of computed normals (grouped per Face)
        @param theShape   [in]  input shape which will be exploded into Faces
        @param theLength  [in]  normal length

        :type theNormals: OCC.wrapper.DBRep.NCollection_DataMap_TopoDS_Face_NCollection_Vector_pair_gp_Pnt_gp_Pnt
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theLength: float

        """
        return _DBRep.Handle_DBRep_DrawableShape_addMeshNormals(self, *args)


    def addSurfaceNormals(self, *args):
        """
        addSurfaceNormals(Handle_DBRep_DrawableShape self, NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > & theNormals, TopoDS_Face theFace, Standard_Real const theLength, Standard_Integer const theNbAlongU, Standard_Integer const theNbAlongV) -> Standard_Boolean
        addSurfaceNormals(Handle_DBRep_DrawableShape self, NCollection_DataMap< TopoDS_Face,NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > > & theNormals, TopoDS_Shape theShape, Standard_Real const theLength, Standard_Integer const theNbAlongU, Standard_Integer const theNbAlongV)

        Auxiliary method computing surface normals distributed within the Face for presentation purposes.
        @param theNormals  [out] map of computed normals (grouped per Face)
        @param theShape    [in]  input shape which will be exploded into Faces
        @param theLength   [in]  normal length
        @param theNbAlongU [in]  number along U
        @param theNbAlongV [in]  number along V
        @return FALSE if normals can not be computed

        :type theNormals: OCC.wrapper.DBRep.NCollection_DataMap_TopoDS_Face_NCollection_Vector_pair_gp_Pnt_gp_Pnt
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theLength: float
        :type theNbAlongU: int
        :type theNbAlongV: int

        """
        return _DBRep.Handle_DBRep_DrawableShape_addSurfaceNormals(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DBRep_DrawableShape self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_DrawableShape_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DBRep_DrawableShape self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_DrawableShape_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DBRep_DrawableShape self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DBRep.Handle_DBRep_DrawableShape_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DBRep_DrawableShape self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DBRep.Handle_DBRep_DrawableShape_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DBRep_DrawableShape self) -> Standard_Boolean
        Visible(Handle_DBRep_DrawableShape self, Standard_Boolean const V)

        :type V: bool

        """
        return _DBRep.Handle_DBRep_DrawableShape_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DBRep_DrawableShape self) -> Standard_Boolean
        Protected(Handle_DBRep_DrawableShape self, Standard_Boolean const P)

        :type P: bool

        """
        return _DBRep.Handle_DBRep_DrawableShape_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DBRep_DrawableShape self) -> Standard_CString
        Name(Handle_DBRep_DrawableShape self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DBRep.Handle_DBRep_DrawableShape_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DBRep_DrawableShape self)

        Memory deallocator for transient classes


        """
        return _DBRep.Handle_DBRep_DrawableShape_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DBRep_DrawableShape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DBRep_DrawableShape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_DrawableShape_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DBRep_DrawableShape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DBRep_DrawableShape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_DrawableShape_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DBRep_DrawableShape self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DBRep.Handle_DBRep_DrawableShape_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DBRep_DrawableShape self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_DrawableShape_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DBRep_DrawableShape self)

        Increments the reference counter of this object


        """
        return _DBRep.Handle_DBRep_DrawableShape_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DBRep_DrawableShape self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_DrawableShape_DecrementRefCounter(self, *args)

Handle_DBRep_DrawableShape_swigregister = _DBRep.Handle_DBRep_DrawableShape_swigregister
Handle_DBRep_DrawableShape_swigregister(Handle_DBRep_DrawableShape)

def Handle_DBRep_DrawableShape_DownCast(thing):
    return _DBRep.Handle_DBRep_DrawableShape_DownCast(thing)
Handle_DBRep_DrawableShape_DownCast = _DBRep.Handle_DBRep_DrawableShape_DownCast

class DBRep_IsoBuilder(Geom2dHatch.Geom2dHatch_Hatcher):
    """Creation of isoparametric curves."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DBRep_IsoBuilder self, TopoDS_Face TopologicalFace, Standard_Real const Infinite, Standard_Integer const NbIsos) -> DBRep_IsoBuilder

        Creates the builder.

        :type TopologicalFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type Infinite: float
        :type NbIsos: int

        """
        this = _DBRep.new_DBRep_IsoBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NbDomains(self, *args):
        """
        NbDomains(DBRep_IsoBuilder self) -> Standard_Integer

        Returns the total number of domains.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.DBRep_IsoBuilder_NbDomains(self, *args)


    def LoadIsos(self, *args):
        """
        LoadIsos(DBRep_IsoBuilder self, Handle_DBRep_Face Face)

        Loading of the isoparametric curves in the
        Data Structure of a drawable face.

        :type Face: OCC.wrapper.DBRep.Handle_DBRep_Face

        """
        return _DBRep.DBRep_IsoBuilder_LoadIsos(self, *args)

    __swig_destroy__ = _DBRep.delete_DBRep_IsoBuilder
DBRep_IsoBuilder_swigregister = _DBRep.DBRep_IsoBuilder_swigregister
DBRep_IsoBuilder_swigregister(DBRep_IsoBuilder)

class Handle_DBRep_Face(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DBRep_Face self)

        Nullify the handle


        """
        return _DBRep.Handle_DBRep_Face_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DBRep_Face self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DBRep.Handle_DBRep_Face_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DBRep_Face self, DBRep_Face thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DBRep.Handle_DBRep_Face_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DBRep_Face self, Handle_DBRep_Face theHandle) -> Handle_DBRep_Face
        assign(Handle_DBRep_Face self, DBRep_Face thePtr) -> Handle_DBRep_Face
        assign(Handle_DBRep_Face self, Handle_DBRep_Face theHandle) -> Handle_DBRep_Face

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DBRep.Handle_DBRep_Face_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DBRep_Face self) -> DBRep_Face

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DBRep.Handle_DBRep_Face_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DBRep_Face self) -> DBRep_Face

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DBRep.Handle_DBRep_Face___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DBRep_Face self) -> DBRep_Face

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DBRep.Handle_DBRep_Face___ref__(self, *args)


    def __hash__(self):
        return _DBRep.Handle_DBRep_Face___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DBRep.Handle_DBRep_Face___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DBRep.new_Handle_DBRep_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DBRep.Handle_DBRep_Face_DownCast)
    __swig_destroy__ = _DBRep.delete_Handle_DBRep_Face

    def Face(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _DBRep.Handle_DBRep_Face_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbIsos(self, *args):
        """
        NbIsos(Handle_DBRep_Face self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_Face_NbIsos(self, *args)


    def Iso(self, *args):
        """
        Iso(Handle_DBRep_Face self, Standard_Integer const I, GeomAbs_IsoType const T, Standard_Real const Par, Standard_Real const T1, Standard_Real const T2)

        :type I: int
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type Par: float
        :type T1: float
        :type T2: float

        """
        return _DBRep.Handle_DBRep_Face_Iso(self, *args)


    def GetIso(self, *args):
        """
        GetIso(Handle_DBRep_Face self, Standard_Integer const I)

        :type I: int
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type Par: float
        :type T1: float
        :type T2: float

        """
        return _DBRep.Handle_DBRep_Face_GetIso(self, *args)


    def Color(self, *args):
        """
        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        res = _DBRep.Handle_DBRep_Face_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_DBRep_Face self) -> char const *

        :rtype: const char *

        """
        return _DBRep.Handle_DBRep_Face_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.Handle_DBRep_Face_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DBRep.Handle_DBRep_Face_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_DBRep_Face self)

        Memory deallocator for transient classes


        """
        return _DBRep.Handle_DBRep_Face_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DBRep_Face self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DBRep_Face self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_Face_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DBRep_Face self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DBRep_Face self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.Handle_DBRep_Face_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DBRep_Face self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DBRep.Handle_DBRep_Face_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DBRep_Face self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_Face_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DBRep_Face self)

        Increments the reference counter of this object


        """
        return _DBRep.Handle_DBRep_Face_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DBRep_Face self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.Handle_DBRep_Face_DecrementRefCounter(self, *args)

Handle_DBRep_Face_swigregister = _DBRep.Handle_DBRep_Face_swigregister
Handle_DBRep_Face_swigregister(Handle_DBRep_Face)

def Handle_DBRep_Face_DownCast(thing):
    return _DBRep.Handle_DBRep_Face_DownCast(thing)
Handle_DBRep_Face_DownCast = _DBRep.Handle_DBRep_Face_DownCast

class DBRep_(object):
    """
    Used to display BRep objects  using the DrawTrSurf
    package.
    The DrawableShape is a Display object build from a
    Shape.
    Provides methods to manage a directory of named shapes.
    Provides a set of Draw commands for Shapes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Set(*args):
        """
        Set(Standard_CString const Name, TopoDS_Shape S)

        Creation of isoparametric curves.
        Implements ProgressIndicator for DRAW
        Sets  <S> in the  variable  <Name>.  Overwrite the
        variable if already set.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _DBRep.DBRep__Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        Get(Standard_CString & Name, TopAbs_ShapeEnum const Typ=TopAbs_SHAPE, Standard_Boolean const Complain) -> TopoDS_Shape

        Returns the shape in the variable  <Name>. Returns
        a null shape if the variable is not set or  not of
        the given <Typ>.  If <Complain> is  True a message
        is printed on cout if the variable is not set.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type Typ: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type Complain: bool
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _DBRep.DBRep__Get(*args)

    Get = staticmethod(Get)

    def BasicCommands(*args):
        """
        BasicCommands(Draw_Interpretor theCommands)

        Defines the basic commands.

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DBRep.DBRep__BasicCommands(*args)

    BasicCommands = staticmethod(BasicCommands)

    def HLRMode(*args):
        """
        HLRMode() -> Standard_Boolean

        True if HLR, False if wireframe.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.DBRep__HLRMode(*args)

    HLRMode = staticmethod(HLRMode)

    def Rg1Mode(*args):
        """
        Rg1Mode() -> Standard_Boolean

        True if display Rg1Lines.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.DBRep__Rg1Mode(*args)

    Rg1Mode = staticmethod(Rg1Mode)

    def RgNMode(*args):
        """
        RgNMode() -> Standard_Boolean

        True if display RgNLines.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.DBRep__RgNMode(*args)

    RgNMode = staticmethod(RgNMode)

    def HidMode(*args):
        """
        HidMode() -> Standard_Boolean

        True if display HiddenLines.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DBRep.DBRep__HidMode(*args)

    HidMode = staticmethod(HidMode)

    def HLRAngle(*args):
        """
        HLRAngle() -> Standard_Real

        discretisation angle for edges.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DBRep.DBRep__HLRAngle(*args)

    HLRAngle = staticmethod(HLRAngle)

    def NbIsos(*args):
        """
        NbIsos() -> Standard_Integer

        number of iso in U and V

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.DBRep__NbIsos(*args)

    NbIsos = staticmethod(NbIsos)

    def Discretisation(*args):
        """
        Discretisation() -> Standard_Integer

        discretisation number of points for curves
        set progress indicator
        get progress indicator

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DBRep.DBRep__Discretisation(*args)

    Discretisation = staticmethod(Discretisation)

    def __init__(self):
        """
        Used to display BRep objects  using the DrawTrSurf
        package.
        The DrawableShape is a Display object build from a
        Shape.
        Provides methods to manage a directory of named shapes.
        Provides a set of Draw commands for Shapes.
        """
        this = _DBRep.new_DBRep_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DBRep.delete_DBRep_
DBRep__swigregister = _DBRep.DBRep__swigregister
DBRep__swigregister(DBRep_)

def DBRep__Set(*args):
    """
    DBRep__Set(Standard_CString const Name, TopoDS_Shape S)

    Creation of isoparametric curves.
    Implements ProgressIndicator for DRAW
    Sets  <S> in the  variable  <Name>.  Overwrite the
    variable if already set.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type S: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _DBRep.DBRep__Set(*args)

def DBRep__Get(*args):
    """
    DBRep__Get(Standard_CString & Name, TopAbs_ShapeEnum const Typ=TopAbs_SHAPE, Standard_Boolean const Complain) -> TopoDS_Shape

    Returns the shape in the variable  <Name>. Returns
    a null shape if the variable is not set or  not of
    the given <Typ>.  If <Complain> is  True a message
    is printed on cout if the variable is not set.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type Typ: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type Complain: bool
    :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _DBRep.DBRep__Get(*args)

def DBRep__BasicCommands(*args):
    """
    DBRep__BasicCommands(Draw_Interpretor theCommands)

    Defines the basic commands.

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DBRep.DBRep__BasicCommands(*args)

def DBRep__HLRMode(*args):
    """
    DBRep__HLRMode() -> Standard_Boolean

    True if HLR, False if wireframe.

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DBRep.DBRep__HLRMode(*args)

def DBRep__Rg1Mode(*args):
    """
    DBRep__Rg1Mode() -> Standard_Boolean

    True if display Rg1Lines.

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DBRep.DBRep__Rg1Mode(*args)

def DBRep__RgNMode(*args):
    """
    DBRep__RgNMode() -> Standard_Boolean

    True if display RgNLines.

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DBRep.DBRep__RgNMode(*args)

def DBRep__HidMode(*args):
    """
    DBRep__HidMode() -> Standard_Boolean

    True if display HiddenLines.

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DBRep.DBRep__HidMode(*args)

def DBRep__HLRAngle(*args):
    """
    DBRep__HLRAngle() -> Standard_Real

    discretisation angle for edges.

    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _DBRep.DBRep__HLRAngle(*args)

def DBRep__NbIsos(*args):
    """
    DBRep__NbIsos() -> Standard_Integer

    number of iso in U and V

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _DBRep.DBRep__NbIsos(*args)

def DBRep__Discretisation(*args):
    """
    DBRep__Discretisation() -> Standard_Integer

    discretisation number of points for curves
    set progress indicator
    get progress indicator

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _DBRep.DBRep__Discretisation(*args)



