# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlLDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlLDrivers')
    _XmlLDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlLDrivers', [dirname(__file__)])
        except ImportError:
            import _XmlLDrivers
            return _XmlLDrivers
        try:
            _mod = imp.load_module('_XmlLDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlLDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _XmlLDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlLDrivers.delete_SwigPyIterator

    def value(self):
        return _XmlLDrivers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlLDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlLDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlLDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlLDrivers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlLDrivers.SwigPyIterator_copy(self)

    def next(self):
        return _XmlLDrivers.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlLDrivers.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlLDrivers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlLDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlLDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlLDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlLDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlLDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlLDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlLDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlLDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlLDrivers.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlLDrivers.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlLDrivers.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlLDrivers.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlLDrivers.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlLDrivers.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlLDrivers.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlLDrivers.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlLDrivers.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlLDrivers.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlLDrivers.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlLDrivers.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlLDrivers.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlLDrivers.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlLDrivers.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlLDrivers.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlLDrivers.ptr_to_number(item)
ptr_to_number = _XmlLDrivers.ptr_to_number

def HashCode(*args):
    return _XmlLDrivers.HashCode(*args)
HashCode = _XmlLDrivers.HashCode

def ptr_equal(a, b):
    return _XmlLDrivers.ptr_equal(a, b)
ptr_equal = _XmlLDrivers.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlMDF
else:
    import XmlMDF
del _swig_python_version_info
class XmlLDrivers_DocumentRetrievalDriver(PCDM.PCDM_RetrievalDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlLDrivers_DocumentRetrievalDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlLDrivers_DocumentRetrievalDriver(self) 
            return h


    def __init__(self, *args):
        """__init__(XmlLDrivers_DocumentRetrievalDriver self) -> XmlLDrivers_DocumentRetrievalDriver"""
        this = _XmlLDrivers.new_XmlLDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CreateDocument(self, *args):
        """
        CreateDocument(XmlLDrivers_DocumentRetrievalDriver self) -> Handle_CDM_Document

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(XmlLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_CDM_Document theNewDocument, Handle_CDM_Application theApplication)
        Read(XmlLDrivers_DocumentRetrievalDriver self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_Read(self, *args)


    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(XmlLDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_DocumentRetrievalDriver
XmlLDrivers_DocumentRetrievalDriver_swigregister = _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_swigregister
XmlLDrivers_DocumentRetrievalDriver_swigregister(XmlLDrivers_DocumentRetrievalDriver)

def XmlLDrivers_DocumentRetrievalDriver_get_type_name(*args):
    """
    XmlLDrivers_DocumentRetrievalDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_get_type_name(*args)

def XmlLDrivers_DocumentRetrievalDriver_get_type_descriptor(*args):
    """
    XmlLDrivers_DocumentRetrievalDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

class XmlLDrivers_NamespaceDef(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XmlLDrivers_NamespaceDef self) -> XmlLDrivers_NamespaceDef
        __init__(XmlLDrivers_NamespaceDef self, TCollection_AsciiString thePrefix, TCollection_AsciiString theURI) -> XmlLDrivers_NamespaceDef

        :type thePrefix: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theURI: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        this = _XmlLDrivers.new_XmlLDrivers_NamespaceDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Prefix(self, *args):
        """
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlLDrivers.XmlLDrivers_NamespaceDef_Prefix(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def URI(self, *args):
        """
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlLDrivers.XmlLDrivers_NamespaceDef_URI(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_NamespaceDef
XmlLDrivers_NamespaceDef_swigregister = _XmlLDrivers.XmlLDrivers_NamespaceDef_swigregister
XmlLDrivers_NamespaceDef_swigregister(XmlLDrivers_NamespaceDef)

class XmlLDrivers_DocumentStorageDriver(PCDM.PCDM_StorageDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlLDrivers_DocumentStorageDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlLDrivers_DocumentStorageDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlLDrivers_DocumentStorageDriver self, TCollection_ExtendedString theCopyright) -> XmlLDrivers_DocumentStorageDriver

        :type theCopyright: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        this = _XmlLDrivers.new_XmlLDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Write(self, *args):
        """
        Write(XmlLDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, TCollection_ExtendedString theFileName)
        Write(XmlLDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_Write(self, *args)


    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(XmlLDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_DocumentStorageDriver
XmlLDrivers_DocumentStorageDriver_swigregister = _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_swigregister
XmlLDrivers_DocumentStorageDriver_swigregister(XmlLDrivers_DocumentStorageDriver)

def XmlLDrivers_DocumentStorageDriver_get_type_name(*args):
    """
    XmlLDrivers_DocumentStorageDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_get_type_name(*args)

def XmlLDrivers_DocumentStorageDriver_get_type_descriptor(*args):
    """
    XmlLDrivers_DocumentStorageDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_get_type_descriptor(*args)

class Handle_XmlLDrivers_DocumentRetrievalDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlLDrivers_DocumentRetrievalDriver self)

        Nullify the handle


        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlLDrivers_DocumentRetrievalDriver self, XmlLDrivers_DocumentRetrievalDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlLDrivers_DocumentRetrievalDriver self, Handle_XmlLDrivers_DocumentRetrievalDriver theHandle) -> Handle_XmlLDrivers_DocumentRetrievalDriver
        assign(Handle_XmlLDrivers_DocumentRetrievalDriver self, XmlLDrivers_DocumentRetrievalDriver thePtr) -> Handle_XmlLDrivers_DocumentRetrievalDriver
        assign(Handle_XmlLDrivers_DocumentRetrievalDriver self, Handle_XmlLDrivers_DocumentRetrievalDriver theHandle) -> Handle_XmlLDrivers_DocumentRetrievalDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> XmlLDrivers_DocumentRetrievalDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> XmlLDrivers_DocumentRetrievalDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> XmlLDrivers_DocumentRetrievalDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlLDrivers.new_Handle_XmlLDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast)
    __swig_destroy__ = _XmlLDrivers.delete_Handle_XmlLDrivers_DocumentRetrievalDriver

    def CreateDocument(self, *args):
        """
        CreateDocument(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> Handle_CDM_Document

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(Handle_XmlLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_CDM_Document theNewDocument, Handle_CDM_Application theApplication)
        Read(Handle_XmlLDrivers_DocumentRetrievalDriver self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_Read(self, *args)


    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_XmlLDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DocumentVersion(self, *args):
        """
        DocumentVersion(Handle_XmlLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DocumentVersion(self, *args)


    def ReferenceCounter(self, *args):
        """
        ReferenceCounter(Handle_XmlLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_ReferenceCounter(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_XmlLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_GetFormat(self, *args)


    def GetStatus(self, *args):
        """
        GetStatus(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> PCDM_ReaderStatus

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_GetStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XmlLDrivers_DocumentRetrievalDriver self)

        Memory deallocator for transient classes


        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlLDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlLDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlLDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlLDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlLDrivers_DocumentRetrievalDriver self)

        Increments the reference counter of this object


        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlLDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DecrementRefCounter(self, *args)

Handle_XmlLDrivers_DocumentRetrievalDriver_swigregister = _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_swigregister
Handle_XmlLDrivers_DocumentRetrievalDriver_swigregister(Handle_XmlLDrivers_DocumentRetrievalDriver)

def Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast(thing):
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast(thing)
Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast = _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast

class XmlLDrivers_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Factory(*args):
        """
        Factory(Standard_GUID theGUID) -> Handle_Standard_Transient

        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XmlLDrivers.XmlLDrivers__Factory(*args)

    Factory = staticmethod(Factory)

    def CreationDate(*args):
        """
        CreationDate() -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _XmlLDrivers.XmlLDrivers__CreationDate(*args)

    CreationDate = staticmethod(CreationDate)

    def DefineFormat(*args):
        """
        DefineFormat(Handle_TDocStd_Application theApp)

        Defines format "XmlLOcaf" and registers its read and write drivers
        in the specified application

        :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

        """
        return _XmlLDrivers.XmlLDrivers__DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def AttributeDrivers(*args):
        """
        AttributeDrivers(Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlLDrivers.XmlLDrivers__AttributeDrivers(*args)

    AttributeDrivers = staticmethod(AttributeDrivers)

    def StorageVersion(*args):
        """
        StorageVersion() -> int

        :rtype: int

        """
        return _XmlLDrivers.XmlLDrivers__StorageVersion(*args)

    StorageVersion = staticmethod(StorageVersion)

    def SetStorageVersion(*args):
        """
        SetStorageVersion(int const version)

        :type version: const int

        """
        return _XmlLDrivers.XmlLDrivers__SetStorageVersion(*args)

    SetStorageVersion = staticmethod(SetStorageVersion)

    def __init__(self):
        this = _XmlLDrivers.new_XmlLDrivers_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_
XmlLDrivers__swigregister = _XmlLDrivers.XmlLDrivers__swigregister
XmlLDrivers__swigregister(XmlLDrivers_)

def XmlLDrivers__Factory(*args):
    """
    XmlLDrivers__Factory(Standard_GUID theGUID) -> Handle_Standard_Transient

    :type theGUID: OCC.wrapper.Standard.Standard_GUID
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _XmlLDrivers.XmlLDrivers__Factory(*args)

def XmlLDrivers__CreationDate(*args):
    """
    XmlLDrivers__CreationDate() -> TCollection_AsciiString

    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _XmlLDrivers.XmlLDrivers__CreationDate(*args)

def XmlLDrivers__DefineFormat(*args):
    """
    XmlLDrivers__DefineFormat(Handle_TDocStd_Application theApp)

    Defines format "XmlLOcaf" and registers its read and write drivers
    in the specified application

    :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

    """
    return _XmlLDrivers.XmlLDrivers__DefineFormat(*args)

def XmlLDrivers__AttributeDrivers(*args):
    """
    XmlLDrivers__AttributeDrivers(Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

    :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
    :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

    """
    return _XmlLDrivers.XmlLDrivers__AttributeDrivers(*args)

def XmlLDrivers__StorageVersion(*args):
    """
    XmlLDrivers__StorageVersion() -> int

    :rtype: int

    """
    return _XmlLDrivers.XmlLDrivers__StorageVersion(*args)

def XmlLDrivers__SetStorageVersion(*args):
    """
    XmlLDrivers__SetStorageVersion(int const version)

    :type version: const int

    """
    return _XmlLDrivers.XmlLDrivers__SetStorageVersion(*args)

class NCollection_Sequence_XmlLDrivers_NamespaceDef(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> NCollection_Sequence< XmlLDrivers_NamespaceDef >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> NCollection_Sequence< XmlLDrivers_NamespaceDef >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> NCollection_Sequence< XmlLDrivers_NamespaceDef >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> NCollection_Sequence< XmlLDrivers_NamespaceDef >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _XmlLDrivers.new_NCollection_Sequence_XmlLDrivers_NamespaceDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_XmlLDrivers_NamespaceDef self)

        Reverse sequence


        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_XmlLDrivers_NamespaceDef self, NCollection_Sequence_XmlLDrivers_NamespaceDef theOther) -> NCollection_Sequence_XmlLDrivers_NamespaceDef

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_XmlLDrivers_NamespaceDef self, NCollection_Sequence_XmlLDrivers_NamespaceDef theOther) -> NCollection_Sequence_XmlLDrivers_NamespaceDef

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_XmlLDrivers_NamespaceDef self, NCollection_Sequence< XmlLDrivers_NamespaceDef >::Iterator & thePosition)
        Remove(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_XmlLDrivers_NamespaceDef self, XmlLDrivers_NamespaceDef theItem)
        Append(NCollection_Sequence_XmlLDrivers_NamespaceDef self, NCollection_Sequence_XmlLDrivers_NamespaceDef theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_XmlLDrivers_NamespaceDef self, XmlLDrivers_NamespaceDef theItem)
        Prepend(NCollection_Sequence_XmlLDrivers_NamespaceDef self, NCollection_Sequence_XmlLDrivers_NamespaceDef theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theIndex, XmlLDrivers_NamespaceDef theItem)
        InsertBefore(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theIndex, NCollection_Sequence_XmlLDrivers_NamespaceDef theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_XmlLDrivers_NamespaceDef self, NCollection_Sequence< XmlLDrivers_NamespaceDef >::Iterator & thePosition, XmlLDrivers_NamespaceDef theItem)
        InsertAfter(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theIndex, NCollection_Sequence_XmlLDrivers_NamespaceDef theSeq)
        InsertAfter(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theIndex, XmlLDrivers_NamespaceDef theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theIndex, NCollection_Sequence_XmlLDrivers_NamespaceDef theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> XmlLDrivers_NamespaceDef

        First item access

        :rtype: TheItemType &

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_XmlLDrivers_NamespaceDef self) -> XmlLDrivers_NamespaceDef

        Last item access

        :rtype: TheItemType &

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theIndex) -> XmlLDrivers_NamespaceDef

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_XmlLDrivers_NamespaceDef self, Standard_Integer const theIndex, XmlLDrivers_NamespaceDef theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_SetValue(self, *args)


    def __iter__(self):
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef___iter__(self)
    __swig_destroy__ = _XmlLDrivers.delete_NCollection_Sequence_XmlLDrivers_NamespaceDef
NCollection_Sequence_XmlLDrivers_NamespaceDef_swigregister = _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_swigregister
NCollection_Sequence_XmlLDrivers_NamespaceDef_swigregister(NCollection_Sequence_XmlLDrivers_NamespaceDef)

def NCollection_Sequence_XmlLDrivers_NamespaceDef_delNode(*args):
    """
    NCollection_Sequence_XmlLDrivers_NamespaceDef_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_delNode(*args)

class NCollection_Sequence_XmlLDrivers_NamespaceDef_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XmlLDrivers.new_NCollection_Sequence_XmlLDrivers_NamespaceDef_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlLDrivers.delete_NCollection_Sequence_XmlLDrivers_NamespaceDef_IteratorHelper

    def __next__(self):
        return _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_IteratorHelper___next__(self)
NCollection_Sequence_XmlLDrivers_NamespaceDef_IteratorHelper_swigregister = _XmlLDrivers.NCollection_Sequence_XmlLDrivers_NamespaceDef_IteratorHelper_swigregister
NCollection_Sequence_XmlLDrivers_NamespaceDef_IteratorHelper_swigregister(NCollection_Sequence_XmlLDrivers_NamespaceDef_IteratorHelper)


try:
	XmlLDrivers_SequenceOfNamespaceDef = NCollection_Sequence_XmlLDrivers_NamespaceDef
except NameError:
	pass # does not exist, probably ignored

class Handle_XmlLDrivers_DocumentStorageDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlLDrivers_DocumentStorageDriver self)

        Nullify the handle


        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlLDrivers_DocumentStorageDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlLDrivers_DocumentStorageDriver self, XmlLDrivers_DocumentStorageDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_XmlLDrivers_DocumentStorageDriver theHandle) -> Handle_XmlLDrivers_DocumentStorageDriver
        assign(Handle_XmlLDrivers_DocumentStorageDriver self, XmlLDrivers_DocumentStorageDriver thePtr) -> Handle_XmlLDrivers_DocumentStorageDriver
        assign(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_XmlLDrivers_DocumentStorageDriver theHandle) -> Handle_XmlLDrivers_DocumentStorageDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlLDrivers_DocumentStorageDriver self) -> XmlLDrivers_DocumentStorageDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlLDrivers_DocumentStorageDriver self) -> XmlLDrivers_DocumentStorageDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlLDrivers_DocumentStorageDriver self) -> XmlLDrivers_DocumentStorageDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlLDrivers.new_Handle_XmlLDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_DownCast)
    __swig_destroy__ = _XmlLDrivers.delete_Handle_XmlLDrivers_DocumentStorageDriver

    def Write(self, *args):
        """
        Write(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, TCollection_ExtendedString theFileName)
        Write(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_Write(self, *args)


    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlLDrivers_DocumentStorageDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Make(self, *args):
        """
        Make(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument) -> Handle_PCDM_Document
        Make(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument, NCollection_Sequence_Handle_PCDM_Document Documents)

        By default, puts  in the Sequence the  document returns
        by the previous Make method.

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type Documents: OCC.wrapper.PCDM.PCDM_SequenceOfDocument

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_Make(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_XmlLDrivers_DocumentStorageDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_XmlLDrivers_DocumentStorageDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_GetFormat(self, *args)


    def IsError(self, *args):
        """
        IsError(Handle_XmlLDrivers_DocumentStorageDriver self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_IsError(self, *args)


    def SetIsError(self, *args):
        """
        SetIsError(Handle_XmlLDrivers_DocumentStorageDriver self, Standard_Boolean const theIsError)

        :type theIsError: bool

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_SetIsError(self, *args)


    def GetStoreStatus(self, *args):
        """
        GetStoreStatus(Handle_XmlLDrivers_DocumentStorageDriver self) -> PCDM_StoreStatus

        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_GetStoreStatus(self, *args)


    def SetStoreStatus(self, *args):
        """
        SetStoreStatus(Handle_XmlLDrivers_DocumentStorageDriver self, PCDM_StoreStatus const theStoreStatus)

        :type theStoreStatus: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_SetStoreStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XmlLDrivers_DocumentStorageDriver self)

        Memory deallocator for transient classes


        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlLDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlLDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlLDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlLDrivers_DocumentStorageDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlLDrivers_DocumentStorageDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlLDrivers_DocumentStorageDriver self)

        Increments the reference counter of this object


        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlLDrivers_DocumentStorageDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_DecrementRefCounter(self, *args)

Handle_XmlLDrivers_DocumentStorageDriver_swigregister = _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_swigregister
Handle_XmlLDrivers_DocumentStorageDriver_swigregister(Handle_XmlLDrivers_DocumentStorageDriver)

def Handle_XmlLDrivers_DocumentStorageDriver_DownCast(thing):
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_DownCast(thing)
Handle_XmlLDrivers_DocumentStorageDriver_DownCast = _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_DownCast



