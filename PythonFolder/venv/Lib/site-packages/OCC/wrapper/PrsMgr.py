# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PrsMgr')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PrsMgr')
    _PrsMgr = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PrsMgr', [dirname(__file__)])
        except ImportError:
            import _PrsMgr
            return _PrsMgr
        try:
            _mod = imp.load_module('_PrsMgr', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PrsMgr = swig_import_helper()
    del swig_import_helper
else:
    import _PrsMgr
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PrsMgr.delete_SwigPyIterator

    def value(self):
        return _PrsMgr.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PrsMgr.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PrsMgr.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PrsMgr.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PrsMgr.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PrsMgr.SwigPyIterator_copy(self)

    def next(self):
        return _PrsMgr.SwigPyIterator_next(self)

    def __next__(self):
        return _PrsMgr.SwigPyIterator___next__(self)

    def previous(self):
        return _PrsMgr.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PrsMgr.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PrsMgr.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PrsMgr.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PrsMgr.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PrsMgr.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PrsMgr.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PrsMgr.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PrsMgr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _PrsMgr.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_PrsMgr.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _PrsMgr.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _PrsMgr.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PrsMgr.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _PrsMgr.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _PrsMgr.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _PrsMgr.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _PrsMgr.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_PrsMgr.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _PrsMgr.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _PrsMgr.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PrsMgr.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _PrsMgr.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _PrsMgr.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _PrsMgr.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _PrsMgr.ptr_to_number(item)
ptr_to_number = _PrsMgr.ptr_to_number

def HashCode(*args):
    return _PrsMgr.HashCode(*args)
HashCode = _PrsMgr.HashCode

def ptr_equal(a, b):
    return _PrsMgr.ptr_equal(a, b)
ptr_equal = _PrsMgr.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
PrsMgr_TOP_AllView = _PrsMgr.PrsMgr_TOP_AllView
PrsMgr_TOP_ProjectorDependant = _PrsMgr.PrsMgr_TOP_ProjectorDependant
class PrsMgr_PresentationManager(Standard.Standard_Transient):
    """
    A framework to manage 3D displays, graphic entities and their updates.
    Used in the AIS package (Application Interactive Services), to enable the advanced user to define the
    default display mode of a new interactive object which extends the list of signatures and types.
    Definition of new display types is handled by calling the presentation algorithms provided by the StdPrs package.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PrsMgr_PresentationManager
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PrsMgr_PresentationManager(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PrsMgr.PrsMgr_PresentationManager_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PrsMgr.PrsMgr_PresentationManager_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.PrsMgr_PresentationManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(PrsMgr_PresentationManager self, Handle_Graphic3d_StructureManager theStructureManager) -> PrsMgr_PresentationManager

        Creates a framework to manage displays and graphic entities with the 3D view theStructureManager.

        :type theStructureManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager

        """
        this = _PrsMgr.new_PrsMgr_PresentationManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Display(self, *args):
        """
        Display(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0)

        Displays the presentation of the object in the given Presentation manager with the given mode.
        The mode should be enumerated by the object which inherits PresentableObject.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_Display(self, *args)


    def Erase(self, *args):
        """
        Erase(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0)

        erases the presentation of the object in the given
        Presentation manager with the given mode.
        If @theMode is -1, then erases all presentations of the object.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_Erase(self, *args)


    def Clear(self, *args):
        """
        Clear(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0)

        Clears the presentation of the presentable object thePrsObject in this framework with the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_Clear(self, *args)


    def SetVisibility(self, *args):
        """
        SetVisibility(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode, Standard_Boolean const theValue)

        Sets the visibility of presentable object.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theValue: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetVisibility(self, *args)


    def Unhighlight(self, *args):
        """
        Unhighlight(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject)
        Unhighlight(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode)

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_Unhighlight(self, *args)


    def SetDisplayPriority(self, *args):
        """
        SetDisplayPriority(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode, Standard_Integer const theNewPrior)

        Sets the display priority theNewPrior of the
        presentable object thePrsObject in this framework with the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theNewPrior: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetDisplayPriority(self, *args)


    def DisplayPriority(self, *args):
        """
        DisplayPriority(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode) -> Standard_Integer

        Returns the display priority of the presentable object
        thePrsObject in this framework with the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.PrsMgr_PresentationManager_DisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID for all presentations of the object.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        GetZLayer(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject) -> Graphic3d_ZLayerId

        Get Z layer ID assigned to all presentations of the object.
        Method returns -1 value if object has no presentations and is
        impossible to get layer index.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.PrsMgr_PresentationManager_GetZLayer(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0) -> Standard_Boolean

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsDisplayed(self, *args)


    def IsHighlighted(self, *args):
        """
        IsHighlighted(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0) -> Standard_Boolean

        Returns true if the presentation of the presentable
        object thePrsObject in this framework with the display mode theMode is highlighted.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsHighlighted(self, *args)


    def Update(self, *args):
        """
        Update(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0)

        Updates the presentation of the presentable object
        thePrsObject in this framework with the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_Update(self, *args)


    def BeginImmediateDraw(self, *args):
        """
        BeginImmediateDraw(PrsMgr_PresentationManager self)

        Resets the transient list of presentations previously displayed in immediate mode
        and begins accumulation of new list by following AddToImmediateList()/Color()/Highlight() calls.


        """
        return _PrsMgr.PrsMgr_PresentationManager_BeginImmediateDraw(self, *args)


    def ClearImmediateDraw(self, *args):
        """
        ClearImmediateDraw(PrsMgr_PresentationManager self)

        Resets the transient list of presentations previously displayed in immediate mode.


        """
        return _PrsMgr.PrsMgr_PresentationManager_ClearImmediateDraw(self, *args)


    def AddToImmediateList(self, *args):
        """
        AddToImmediateList(PrsMgr_PresentationManager self, Handle_Prs3d_Presentation thePrs)

        Stores thePrs in the transient list of presentations to be displayed in immediate mode.
        Will be taken in account in EndImmediateDraw method.

        :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _PrsMgr.PrsMgr_PresentationManager_AddToImmediateList(self, *args)


    def EndImmediateDraw(self, *args):
        """
        EndImmediateDraw(PrsMgr_PresentationManager self, Handle_V3d_Viewer theViewer)

        Allows rapid drawing of the each view in theViewer by avoiding an update of the whole background.

        :type theViewer: OCC.wrapper.V3d.Handle_V3d_Viewer

        """
        return _PrsMgr.PrsMgr_PresentationManager_EndImmediateDraw(self, *args)


    def RedrawImmediate(self, *args):
        """
        RedrawImmediate(PrsMgr_PresentationManager self, Handle_V3d_Viewer theViewer)

        Clears and redisplays immediate structures of the viewer taking into account its affinity.

        :type theViewer: OCC.wrapper.V3d.Handle_V3d_Viewer

        """
        return _PrsMgr.PrsMgr_PresentationManager_RedrawImmediate(self, *args)


    def IsImmediateModeOn(self, *args):
        """
        IsImmediateModeOn(PrsMgr_PresentationManager self) -> Standard_Boolean

        Returns true if Presentation Manager is accumulating transient list of presentations to be displayed in immediate mode.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsImmediateModeOn(self, *args)


    def Color(self, *args):
        """
        Color(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Handle_Prs3d_Drawer theStyle, Standard_Integer const theMode=0, Handle_PrsMgr_PresentableObject theSelObj=0, Graphic3d_ZLayerId const theImmediateStructLayerId=Graphic3d_ZLayerId_Topmost)

        Highlights the graphic object thePrsObject in the color theColor.
        thePrsObject has the display mode theMode;
        this has the default value of 0, that is, the wireframe display mode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theStyle: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type theMode: int
        :type theSelObj: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theImmediateStructLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.PrsMgr_PresentationManager_Color(self, *args)


    def Connect(self, *args):
        """
        Connect(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Handle_PrsMgr_PresentableObject theOtherObject, Standard_Integer const theMode=0, Standard_Integer const theOtherMode=0)

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theOtherObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theOtherMode: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_Connect(self, *args)


    def Transform(self, *args):
        """
        Transform(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Handle_Geom_Transformation theTransformation, Standard_Integer const theMode=0)

        Sets the transformation theTransformation for the presentable object thePrsObject.
        thePrsObject has the display mode theMode; this has the default value of 0, that is, the wireframe display mode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theTransformation: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theMode: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_Transform(self, *args)


    def StructureManager(self, *args):
        """
        Returns the structure manager.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager

        """
        res = _PrsMgr.PrsMgr_PresentationManager_StructureManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPresentation(self, *args):
        """
        HasPresentation(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0) -> Standard_Boolean

        Returns true if there is a presentation of the
        presentable object thePrsObject in this framework, thePrsObject having the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.PrsMgr_PresentationManager_HasPresentation(self, *args)


    def Presentation(self, *args):
        """
        Presentation(PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0, Standard_Boolean const theToCreate, Handle_PrsMgr_PresentableObject theSelObj=0) -> Handle_PrsMgr_Presentation

        Returns the presentation Presentation of the presentable object thePrsObject in this framework.
        When theToCreate is true - automatically creates presentation for specified mode when not exist.
        Optional argument theSelObj specifies parent decomposed object to inherit its view affinity.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theToCreate: bool
        :type theSelObj: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :rtype: OCC.wrapper.PrsMgr.Handle_PrsMgr_Presentation

        """
        return _PrsMgr.PrsMgr_PresentationManager_Presentation(self, *args)


    def UpdateHighlightTrsf(self, *args):
        """
        UpdateHighlightTrsf(PrsMgr_PresentationManager self, Handle_V3d_Viewer theViewer, Handle_PrsMgr_PresentableObject theObj, Standard_Integer const theMode=0, Handle_PrsMgr_PresentableObject theSelObj=0)

        Allows to apply location transformation to shadow highlight presentation immediately.
        @param theObj defines the base object, it local transformation will be applied to corresponding highlight structure
        @param theMode defines display mode of the base object
        @param theSelObj defines the object produced after decomposition of the base object for local selection

        :type theViewer: OCC.wrapper.V3d.Handle_V3d_Viewer
        :type theObj: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theSelObj: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _PrsMgr.PrsMgr_PresentationManager_UpdateHighlightTrsf(self, *args)

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_PresentationManager
PrsMgr_PresentationManager_swigregister = _PrsMgr.PrsMgr_PresentationManager_swigregister
PrsMgr_PresentationManager_swigregister(PrsMgr_PresentationManager)

def PrsMgr_PresentationManager_get_type_name(*args):
    """
    PrsMgr_PresentationManager_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PrsMgr.PrsMgr_PresentationManager_get_type_name(*args)

def PrsMgr_PresentationManager_get_type_descriptor(*args):
    """
    PrsMgr_PresentationManager_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PrsMgr.PrsMgr_PresentationManager_get_type_descriptor(*args)

class PrsMgr_PresentableObject(Standard.Standard_Transient):
    """
    A framework to supply the Graphic3d
    structure of the object to be presented. On the first
    display request, this structure is created by calling the
    appropriate algorithm and retaining this frameworkfor
    further display.
    This abstract framework is inherited in Application
    Interactive Services (AIS), notably in:
    -   AIS_InteractiveObject
    -   AIS_ConnectedInteractive
    -   AIS_MultipleConnectedInteractive
    -   AIS_Shape
    Consequently, 3D presentation should be handled by
    the relevant daughter classes and their member
    functions in AIS. This is particularly true in the
    creation of new interactive objects.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PrsMgr_PresentableObject
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PrsMgr_PresentableObject(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PrsMgr.PrsMgr_PresentableObject_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PrsMgr.PrsMgr_PresentableObject_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.PrsMgr_PresentableObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Presentations(self, *args):
        """
        Presentations(PrsMgr_PresentableObject self) -> NCollection_Sequence_PrsMgr_ModedPresentation

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_Presentations

        """
        return _PrsMgr.PrsMgr_PresentableObject_Presentations(self, *args)


    def TypeOfPresentation3d(self, *args):
        """
        TypeOfPresentation3d(PrsMgr_PresentableObject self) -> PrsMgr_TypeOfPresentation3d

        Returns information on whether the object accepts display in HLR mode or not.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        return _PrsMgr.PrsMgr_PresentableObject_TypeOfPresentation3d(self, *args)


    def TransformPersistence(self, *args):
        """
        Returns Transformation Persistence defining a special Local Coordinate system where this presentable object is located or NULL handle if not defined.
        Position of the object having Transformation Persistence is mutable and depends on camera position.
        The same applies to a bounding box of the object.
        @sa Graphic3d_TransformPers class description

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _PrsMgr.PrsMgr_PresentableObject_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(PrsMgr_PresentableObject self, Handle_Graphic3d_TransformPers theTrsfPers)
        SetTransformPersistence(PrsMgr_PresentableObject self, Graphic3d_TransModeFlags const theMode, gp_Pnt thePoint)

        Sets up Transform Persistence Mode for this object.
        This function used to lock in object position, rotation and / or zooming relative to camera position.
        Object will be drawn in the origin setted by thePoint parameter (except Graphic3d_TMF_TriedronPers flag
        - see description later). theMode should be:
        -   Graphic3d_TMF_None - no persistence attributes (reset);
        -   Graphic3d_TMF_ZoomPers - object doesn't resize;
        -   Graphic3d_TMF_RotatePers - object doesn't rotate;
        -   Graphic3d_TMF_ZoomRotatePers - object doesn't resize and rotate;
        -   Graphic3d_TMF_RotatePers - object doesn't rotate;
        -   Graphic3d_TMF_TriedronPers - object behaves like trihedron.
        If Graphic3d_TMF_TriedronPers or Graphic3d_TMF_2d persistence mode selected thePoint coordinates X and Y means:
        -   X = 0.0, Y = 0.0 - center of view window;
        -   X > 0.0, Y > 0.0 - right upper corner of view window;
        -   X > 0.0, Y < 0.0 - right lower corner of view window;
        -   X < 0.0, Y > 0.0 - left  upper corner of view window;
        -   X < 0.0, Y < 0.0 - left  lower corner of view window.
        And Z coordinate defines the gap from border of view window (except center position).

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetTransformPersistence(self, *args)


    def GetTransformPersistenceMode(self, *args):
        """
        GetTransformPersistenceMode(PrsMgr_PresentableObject self) -> Graphic3d_TransModeFlags

        Gets  Transform  Persistence Mode  for  this  object

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags

        """
        return _PrsMgr.PrsMgr_PresentableObject_GetTransformPersistenceMode(self, *args)


    def GetTransformPersistencePoint(self, *args):
        """
        GetTransformPersistencePoint(PrsMgr_PresentableObject self) -> gp_Pnt

        Gets  point  of  transform  persistence for  this  object

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _PrsMgr.PrsMgr_PresentableObject_GetTransformPersistencePoint(self, *args)


    def SetTypeOfPresentation(self, *args):
        """
        SetTypeOfPresentation(PrsMgr_PresentableObject self, PrsMgr_TypeOfPresentation3d const aType)

        :type aType: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetTypeOfPresentation(self, *args)


    def SetToUpdate(self, *args):
        """
        SetToUpdate(PrsMgr_PresentableObject self, Standard_Integer const aMode)
        SetToUpdate(PrsMgr_PresentableObject self)

        flags all the Presentations to be Updated.


        """
        return _PrsMgr.PrsMgr_PresentableObject_SetToUpdate(self, *args)


    def ToBeUpdated(self, *args):
        """
        ToBeUpdated(PrsMgr_PresentableObject self, NCollection_List_Standard_Integer ListOfMode)

        gives the list of modes which are flagged "to be updated".

        :type ListOfMode: OCC.wrapper.TColStd.TColStd_ListOfInteger

        """
        return _PrsMgr.PrsMgr_PresentableObject_ToBeUpdated(self, *args)


    def LocalTransformationGeom(self, *args):
        """
        Return the local transformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _PrsMgr.PrsMgr_PresentableObject_LocalTransformationGeom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLocalTransformation(self, *args):
        """
        SetLocalTransformation(PrsMgr_PresentableObject self, gp_Trsf theTrsf)
        SetLocalTransformation(PrsMgr_PresentableObject self, Handle_Geom_Transformation theTrsf)

        Sets local transformation to theTransformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetLocalTransformation(self, *args)


    def HasTransformation(self, *args):
        """
        HasTransformation(PrsMgr_PresentableObject self) -> Standard_Boolean

        Returns true if object has a transformation that is different from the identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.PrsMgr_PresentableObject_HasTransformation(self, *args)


    def TransformationGeom(self, *args):
        """
        Return the transformation taking into account transformation of parent object(s).
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _PrsMgr.PrsMgr_PresentableObject_TransformationGeom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LocalTransformation(self, *args):
        """
        Return the local transformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _PrsMgr.PrsMgr_PresentableObject_LocalTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transformation(self, *args):
        """
        Return the transformation taking into account transformation of parent object(s).
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _PrsMgr.PrsMgr_PresentableObject_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InversedTransformation(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        res = _PrsMgr.PrsMgr_PresentableObject_InversedTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ResetTransformation(self, *args):
        """
        ResetTransformation(PrsMgr_PresentableObject self)

        resets local transformation to identity.


        """
        return _PrsMgr.PrsMgr_PresentableObject_ResetTransformation(self, *args)


    def UpdateTransformation(self, *args):
        """
        UpdateTransformation(PrsMgr_PresentableObject self)
        UpdateTransformation(PrsMgr_PresentableObject self, Handle_Prs3d_Presentation P)

        :type P: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _PrsMgr.PrsMgr_PresentableObject_UpdateTransformation(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(PrsMgr_PresentableObject self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID and update all presentations of the presentable object.
        The layers mechanism allows drawing objects in higher layers in overlay of objects in lower layers.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetZLayer(self, *args)


    def ZLayer(self, *args):
        """
        ZLayer(PrsMgr_PresentableObject self) -> Graphic3d_ZLayerId

        Get ID of Z layer.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.PrsMgr_PresentableObject_ZLayer(self, *args)


    def AddClipPlane(self, *args):
        """
        AddClipPlane(PrsMgr_PresentableObject self, Handle_Graphic3d_ClipPlane thePlane)

        Adds clip plane for graphical clipping for all display mode
        presentations. The composition of clip planes truncates the rendering
        space to convex volume. Please be aware that number of supported
        clip plane is limited. The planes which exceed the limit are ignored.
        Besides of this, some planes can be already set in view where the object
        is shown: the number of these planes should be substracted from limit
        to predict the maximum possible number of object clipping planes.
        @param thePlane [in] the clip plane to be appended to map of clip planes.

        :type thePlane: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _PrsMgr.PrsMgr_PresentableObject_AddClipPlane(self, *args)


    def RemoveClipPlane(self, *args):
        """
        RemoveClipPlane(PrsMgr_PresentableObject self, Handle_Graphic3d_ClipPlane thePlane)

        Removes previously added clip plane.
        @param thePlane [in] the clip plane to be removed from map of clip planes.

        :type thePlane: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _PrsMgr.PrsMgr_PresentableObject_RemoveClipPlane(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(PrsMgr_PresentableObject self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)
        SetClipPlanes(PrsMgr_PresentableObject self, Graphic3d_SequenceOfHClipPlane thePlanes)

        :type thePlanes: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfHClipPlane

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes.
        @return set of previously added clip planes for all display mode presentations.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _PrsMgr.PrsMgr_PresentableObject_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(PrsMgr_PresentableObject self, Standard_Boolean const theIsMutable)

        Sets if the object has mutable nature (content or location will be changed regularly).
        This method should be called before object displaying to take effect.

        :type theIsMutable: bool

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(PrsMgr_PresentableObject self) -> Standard_Boolean

        Returns true if object has mutable nature (content or location are be changed regularly).
        Mutable object will be managed in different way than static onces (another optimizations).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.PrsMgr_PresentableObject_IsMutable(self, *args)


    def AddChild(self, *args):
        """
        AddChild(PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theObject)

        Makes theObject child of current object in scene hierarchy.

        :type theObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _PrsMgr.PrsMgr_PresentableObject_AddChild(self, *args)


    def RemoveChild(self, *args):
        """
        RemoveChild(PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theObject)

        Removes theObject from children of current object in scene hierarchy.

        :type theObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _PrsMgr.PrsMgr_PresentableObject_RemoveChild(self, *args)


    def Children(self, *args):
        """
        Returns children of the current object.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_ListOfPresentableObjects

        """
        res = _PrsMgr.PrsMgr_PresentableObject_Children(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnPresentations(self, *args):
        """
        HasOwnPresentations(PrsMgr_PresentableObject self) -> Standard_Boolean

        Returns true if object should have own presentations.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.PrsMgr_PresentableObject_HasOwnPresentations(self, *args)


    def Parent(self, *args):
        """
        Parent(PrsMgr_PresentableObject self) -> PrsMgr_PresentableObject

        Returns parent of current object in scene hierarchy.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_PresentableObjectPointer

        """
        return _PrsMgr.PrsMgr_PresentableObject_Parent(self, *args)


    def SetAttributes(self, *args):
        """
        SetAttributes(PrsMgr_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the drawing tool theDrawer.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetAttributes(self, *args)


    def Attributes(self, *args):
        """
        Returns the attributes settings.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _PrsMgr.PrsMgr_PresentableObject_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def UnsetAttributes(self, *args):
        """
        UnsetAttributes(PrsMgr_PresentableObject self)

        Clears settings provided by the drawing tool theDrawer.


        """
        return _PrsMgr.PrsMgr_PresentableObject_UnsetAttributes(self, *args)


    def HilightAttributes(self, *args):
        """
        Returns the hilight attributes settings.
        When not NULL, overrides both Prs3d_TypeOfHighlight_LocalSelected and Prs3d_TypeOfHighlight_Selected defined within AIS_InteractiveContext.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _PrsMgr.PrsMgr_PresentableObject_HilightAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHilightAttributes(self, *args):
        """
        SetHilightAttributes(PrsMgr_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the hilight drawing tool theDrawer.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetHilightAttributes(self, *args)


    def DynamicHilightAttributes(self, *args):
        """
        Returns the hilight attributes settings.
        When not NULL, overrides both Prs3d_TypeOfHighlight_LocalDynamic and Prs3d_TypeOfHighlight_Dynamic defined within AIS_InteractiveContext.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _PrsMgr.PrsMgr_PresentableObject_DynamicHilightAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDynamicHilightAttributes(self, *args):
        """
        SetDynamicHilightAttributes(PrsMgr_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the dynamic hilight drawing tool.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetDynamicHilightAttributes(self, *args)


    def UnsetHilightAttributes(self, *args):
        """
        UnsetHilightAttributes(PrsMgr_PresentableObject self)

        Clears settings provided by the hilight drawing tool theDrawer.


        """
        return _PrsMgr.PrsMgr_PresentableObject_UnsetHilightAttributes(self, *args)

PrsMgr_PresentableObject_swigregister = _PrsMgr.PrsMgr_PresentableObject_swigregister
PrsMgr_PresentableObject_swigregister(PrsMgr_PresentableObject)

def PrsMgr_PresentableObject_get_type_name(*args):
    """
    PrsMgr_PresentableObject_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PrsMgr.PrsMgr_PresentableObject_get_type_name(*args)

def PrsMgr_PresentableObject_get_type_descriptor(*args):
    """
    PrsMgr_PresentableObject_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PrsMgr.PrsMgr_PresentableObject_get_type_descriptor(*args)

class PrsMgr_Presentation(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PrsMgr_Presentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PrsMgr_Presentation(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PrsMgr.PrsMgr_Presentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PrsMgr.PrsMgr_Presentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.PrsMgr_Presentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Presentation(self, *args):
        """
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        res = _PrsMgr.PrsMgr_Presentation_Presentation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PresentationManager(self, *args):
        """
        returns the PresentationManager in which the presentation has been created.

        :rtype: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentationManager

        """
        res = _PrsMgr.PrsMgr_Presentation_PresentationManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUpdateStatus(self, *args):
        """
        SetUpdateStatus(PrsMgr_Presentation self, Standard_Boolean const theUpdateStatus)

        :type theUpdateStatus: bool

        """
        return _PrsMgr.PrsMgr_Presentation_SetUpdateStatus(self, *args)


    def MustBeUpdated(self, *args):
        """
        MustBeUpdated(PrsMgr_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.PrsMgr_Presentation_MustBeUpdated(self, *args)

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_Presentation
PrsMgr_Presentation_swigregister = _PrsMgr.PrsMgr_Presentation_swigregister
PrsMgr_Presentation_swigregister(PrsMgr_Presentation)

def PrsMgr_Presentation_get_type_name(*args):
    """
    PrsMgr_Presentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PrsMgr.PrsMgr_Presentation_get_type_name(*args)

def PrsMgr_Presentation_get_type_descriptor(*args):
    """
    PrsMgr_Presentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PrsMgr.PrsMgr_Presentation_get_type_descriptor(*args)

class NCollection_List_Handle_PrsMgr_PresentableObject(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_PrsMgr_PresentableObject self) -> NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_PrsMgr_PresentableObject self) -> NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_PrsMgr_PresentableObject self) -> NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_PrsMgr_PresentableObject self) -> NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _PrsMgr.new_NCollection_List_Handle_PrsMgr_PresentableObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_PrsMgr_PresentableObject self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_PrsMgr_PresentableObject self, NCollection_List_Handle_PrsMgr_PresentableObject theOther) -> NCollection_List_Handle_PrsMgr_PresentableObject

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_PrsMgr_PresentableObject self, NCollection_List_Handle_PrsMgr_PresentableObject theOther) -> NCollection_List_Handle_PrsMgr_PresentableObject

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_PrsMgr_PresentableObject self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theItem) -> Handle_PrsMgr_PresentableObject
        Append(NCollection_List_Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theItem, NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::Iterator & theIter)
        Append(NCollection_List_Handle_PrsMgr_PresentableObject self, NCollection_List_Handle_PrsMgr_PresentableObject theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theItem) -> Handle_PrsMgr_PresentableObject
        Prepend(NCollection_List_Handle_PrsMgr_PresentableObject self, NCollection_List_Handle_PrsMgr_PresentableObject theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_PrsMgr_PresentableObject self)

        RemoveFirst item


        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_PrsMgr_PresentableObject self, NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theItem, NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::Iterator & theIter) -> Handle_PrsMgr_PresentableObject
        InsertBefore(NCollection_List_Handle_PrsMgr_PresentableObject self, NCollection_List_Handle_PrsMgr_PresentableObject theOther, NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theItem, NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::Iterator & theIter) -> Handle_PrsMgr_PresentableObject
        InsertAfter(NCollection_List_Handle_PrsMgr_PresentableObject self, NCollection_List_Handle_PrsMgr_PresentableObject theOther, NCollection_List< opencascade::handle< PrsMgr_PresentableObject > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_PrsMgr_PresentableObject self)

        Reverse the list


        """
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_Reverse(self, *args)


    def __iter__(self):
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject___iter__(self)
    __swig_destroy__ = _PrsMgr.delete_NCollection_List_Handle_PrsMgr_PresentableObject
NCollection_List_Handle_PrsMgr_PresentableObject_swigregister = _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_swigregister
NCollection_List_Handle_PrsMgr_PresentableObject_swigregister(NCollection_List_Handle_PrsMgr_PresentableObject)

class NCollection_List_Handle_PrsMgr_PresentableObject_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _PrsMgr.new_NCollection_List_Handle_PrsMgr_PresentableObject_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PrsMgr.delete_NCollection_List_Handle_PrsMgr_PresentableObject_IteratorHelper

    def __next__(self):
        return _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_IteratorHelper___next__(self)
NCollection_List_Handle_PrsMgr_PresentableObject_IteratorHelper_swigregister = _PrsMgr.NCollection_List_Handle_PrsMgr_PresentableObject_IteratorHelper_swigregister
NCollection_List_Handle_PrsMgr_PresentableObject_IteratorHelper_swigregister(NCollection_List_Handle_PrsMgr_PresentableObject_IteratorHelper)


try:
	PrsMgr_ListOfPresentableObjects = NCollection_List_Handle_PrsMgr_PresentableObject
except NameError:
	pass # does not exist, probably ignored

class PrsMgr_ModedPresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PrsMgr_ModedPresentation self) -> PrsMgr_ModedPresentation
        __init__(PrsMgr_ModedPresentation self, Handle_PrsMgr_Presentation thePrs, Standard_Integer const theMode) -> PrsMgr_ModedPresentation

        :type thePrs: OCC.wrapper.PrsMgr.Handle_PrsMgr_Presentation
        :type theMode: int

        """
        this = _PrsMgr.new_PrsMgr_ModedPresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Presentation(self, *args):
        """
        :rtype: OCC.wrapper.PrsMgr.Handle_PrsMgr_Presentation

        """
        res = _PrsMgr.PrsMgr_ModedPresentation_Presentation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Mode(self, *args):
        """
        Mode(PrsMgr_ModedPresentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.PrsMgr_ModedPresentation_Mode(self, *args)

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_ModedPresentation
PrsMgr_ModedPresentation_swigregister = _PrsMgr.PrsMgr_ModedPresentation_swigregister
PrsMgr_ModedPresentation_swigregister(PrsMgr_ModedPresentation)

class PrsMgr_Prs(Prs3d.Prs3d_Presentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PrsMgr_Prs
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PrsMgr_Prs(self) 
            return h


    def __init__(self, *args):
        """
        __init__(PrsMgr_Prs self, Handle_Graphic3d_StructureManager theStructManager, PrsMgr_Presentation thePresentation, PrsMgr_TypeOfPresentation3d const theTypeOfPresentation3d) -> PrsMgr_Prs

        :type theStructManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :type thePresentation: OCC.wrapper.PrsMgr.PrsMgr_PresentationPointer
        :type theTypeOfPresentation3d: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        this = _PrsMgr.new_PrsMgr_Prs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Compute(self, *args):
        """
        Compute(PrsMgr_Prs self)
        Compute(PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager aProjector) -> Handle_Graphic3d_Structure
        Compute(PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf) -> Handle_Graphic3d_Structure
        Compute(PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager aProjector, Handle_Graphic3d_Structure ComputedStruct)
        Compute(PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf, Handle_Graphic3d_Structure theStructure)

        No Need to return a Structure, just to
        Fill <aStructure>. The Trsf has to be taken in account
        in the computation (Rotation Part....)

        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _PrsMgr.PrsMgr_Prs_Compute(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PrsMgr.PrsMgr_Prs_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PrsMgr.PrsMgr_Prs_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.PrsMgr_Prs_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _PrsMgr.delete_PrsMgr_Prs
PrsMgr_Prs_swigregister = _PrsMgr.PrsMgr_Prs_swigregister
PrsMgr_Prs_swigregister(PrsMgr_Prs)

def PrsMgr_Prs_get_type_name(*args):
    """
    PrsMgr_Prs_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PrsMgr.PrsMgr_Prs_get_type_name(*args)

def PrsMgr_Prs_get_type_descriptor(*args):
    """
    PrsMgr_Prs_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PrsMgr.PrsMgr_Prs_get_type_descriptor(*args)

class Handle_PrsMgr_PresentationManager(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PrsMgr_PresentationManager self)

        Nullify the handle


        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PrsMgr_PresentationManager self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PrsMgr_PresentationManager self, PrsMgr_PresentationManager thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentationManager theHandle) -> Handle_PrsMgr_PresentationManager
        assign(Handle_PrsMgr_PresentationManager self, PrsMgr_PresentationManager thePtr) -> Handle_PrsMgr_PresentationManager
        assign(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentationManager theHandle) -> Handle_PrsMgr_PresentationManager

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PrsMgr_PresentationManager self) -> PrsMgr_PresentationManager

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PrsMgr_PresentationManager self) -> PrsMgr_PresentationManager

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PrsMgr_PresentationManager self) -> PrsMgr_PresentationManager

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager___ref__(self, *args)


    def __hash__(self):
        return _PrsMgr.Handle_PrsMgr_PresentationManager___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PrsMgr.Handle_PrsMgr_PresentationManager___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PrsMgr.new_Handle_PrsMgr_PresentationManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_PresentationManager_DownCast)
    __swig_destroy__ = _PrsMgr.delete_Handle_PrsMgr_PresentationManager

    def get_type_name(self, *args):
        """
        get_type_name(Handle_PrsMgr_PresentationManager self) -> char const *

        :rtype: const char *

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.Handle_PrsMgr_PresentationManager_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.Handle_PrsMgr_PresentationManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Display(self, *args):
        """
        Display(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0)

        Displays the presentation of the object in the given Presentation manager with the given mode.
        The mode should be enumerated by the object which inherits PresentableObject.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Display(self, *args)


    def Erase(self, *args):
        """
        Erase(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0)

        erases the presentation of the object in the given
        Presentation manager with the given mode.
        If @theMode is -1, then erases all presentations of the object.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Erase(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0)

        Clears the presentation of the presentable object thePrsObject in this framework with the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Clear(self, *args)


    def SetVisibility(self, *args):
        """
        SetVisibility(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode, Standard_Boolean const theValue)

        Sets the visibility of presentable object.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theValue: bool

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_SetVisibility(self, *args)


    def Unhighlight(self, *args):
        """
        Unhighlight(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject)
        Unhighlight(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode)

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Unhighlight(self, *args)


    def SetDisplayPriority(self, *args):
        """
        SetDisplayPriority(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode, Standard_Integer const theNewPrior)

        Sets the display priority theNewPrior of the
        presentable object thePrsObject in this framework with the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theNewPrior: int

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_SetDisplayPriority(self, *args)


    def DisplayPriority(self, *args):
        """
        DisplayPriority(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode) -> Standard_Integer

        Returns the display priority of the presentable object
        thePrsObject in this framework with the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_DisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID for all presentations of the object.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        GetZLayer(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject) -> Graphic3d_ZLayerId

        Get Z layer ID assigned to all presentations of the object.
        Method returns -1 value if object has no presentations and is
        impossible to get layer index.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_GetZLayer(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0) -> Standard_Boolean

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_IsDisplayed(self, *args)


    def IsHighlighted(self, *args):
        """
        IsHighlighted(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0) -> Standard_Boolean

        Returns true if the presentation of the presentable
        object thePrsObject in this framework with the display mode theMode is highlighted.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_IsHighlighted(self, *args)


    def Update(self, *args):
        """
        Update(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0)

        Updates the presentation of the presentable object
        thePrsObject in this framework with the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Update(self, *args)


    def BeginImmediateDraw(self, *args):
        """
        BeginImmediateDraw(Handle_PrsMgr_PresentationManager self)

        Resets the transient list of presentations previously displayed in immediate mode
        and begins accumulation of new list by following AddToImmediateList()/Color()/Highlight() calls.


        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_BeginImmediateDraw(self, *args)


    def ClearImmediateDraw(self, *args):
        """
        ClearImmediateDraw(Handle_PrsMgr_PresentationManager self)

        Resets the transient list of presentations previously displayed in immediate mode.


        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_ClearImmediateDraw(self, *args)


    def AddToImmediateList(self, *args):
        """
        AddToImmediateList(Handle_PrsMgr_PresentationManager self, Handle_Prs3d_Presentation thePrs)

        Stores thePrs in the transient list of presentations to be displayed in immediate mode.
        Will be taken in account in EndImmediateDraw method.

        :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_AddToImmediateList(self, *args)


    def EndImmediateDraw(self, *args):
        """
        EndImmediateDraw(Handle_PrsMgr_PresentationManager self, Handle_V3d_Viewer theViewer)

        Allows rapid drawing of the each view in theViewer by avoiding an update of the whole background.

        :type theViewer: OCC.wrapper.V3d.Handle_V3d_Viewer

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_EndImmediateDraw(self, *args)


    def RedrawImmediate(self, *args):
        """
        RedrawImmediate(Handle_PrsMgr_PresentationManager self, Handle_V3d_Viewer theViewer)

        Clears and redisplays immediate structures of the viewer taking into account its affinity.

        :type theViewer: OCC.wrapper.V3d.Handle_V3d_Viewer

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_RedrawImmediate(self, *args)


    def IsImmediateModeOn(self, *args):
        """
        IsImmediateModeOn(Handle_PrsMgr_PresentationManager self) -> Standard_Boolean

        Returns true if Presentation Manager is accumulating transient list of presentations to be displayed in immediate mode.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_IsImmediateModeOn(self, *args)


    def Color(self, *args):
        """
        Color(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Handle_Prs3d_Drawer theStyle, Standard_Integer const theMode=0, Handle_PrsMgr_PresentableObject theSelObj=0, Graphic3d_ZLayerId const theImmediateStructLayerId=Graphic3d_ZLayerId_Topmost)

        Highlights the graphic object thePrsObject in the color theColor.
        thePrsObject has the display mode theMode;
        this has the default value of 0, that is, the wireframe display mode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theStyle: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type theMode: int
        :type theSelObj: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theImmediateStructLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Color(self, *args)


    def Connect(self, *args):
        """
        Connect(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Handle_PrsMgr_PresentableObject theOtherObject, Standard_Integer const theMode=0, Standard_Integer const theOtherMode=0)

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theOtherObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theOtherMode: int

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Connect(self, *args)


    def Transform(self, *args):
        """
        Transform(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Handle_Geom_Transformation theTransformation, Standard_Integer const theMode=0)

        Sets the transformation theTransformation for the presentable object thePrsObject.
        thePrsObject has the display mode theMode; this has the default value of 0, that is, the wireframe display mode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theTransformation: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theMode: int

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Transform(self, *args)


    def StructureManager(self, *args):
        """
        Returns the structure manager.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager

        """
        res = _PrsMgr.Handle_PrsMgr_PresentationManager_StructureManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPresentation(self, *args):
        """
        HasPresentation(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0) -> Standard_Boolean

        Returns true if there is a presentation of the
        presentable object thePrsObject in this framework, thePrsObject having the display mode theMode.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_HasPresentation(self, *args)


    def Presentation(self, *args):
        """
        Presentation(Handle_PrsMgr_PresentationManager self, Handle_PrsMgr_PresentableObject thePrsObject, Standard_Integer const theMode=0, Standard_Boolean const theToCreate, Handle_PrsMgr_PresentableObject theSelObj=0) -> Handle_PrsMgr_Presentation

        Returns the presentation Presentation of the presentable object thePrsObject in this framework.
        When theToCreate is true - automatically creates presentation for specified mode when not exist.
        Optional argument theSelObj specifies parent decomposed object to inherit its view affinity.

        :type thePrsObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theToCreate: bool
        :type theSelObj: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :rtype: OCC.wrapper.PrsMgr.Handle_PrsMgr_Presentation

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Presentation(self, *args)


    def UpdateHighlightTrsf(self, *args):
        """
        UpdateHighlightTrsf(Handle_PrsMgr_PresentationManager self, Handle_V3d_Viewer theViewer, Handle_PrsMgr_PresentableObject theObj, Standard_Integer const theMode=0, Handle_PrsMgr_PresentableObject theSelObj=0)

        Allows to apply location transformation to shadow highlight presentation immediately.
        @param theObj defines the base object, it local transformation will be applied to corresponding highlight structure
        @param theMode defines display mode of the base object
        @param theSelObj defines the object produced after decomposition of the base object for local selection

        :type theViewer: OCC.wrapper.V3d.Handle_V3d_Viewer
        :type theObj: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject
        :type theMode: int
        :type theSelObj: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_UpdateHighlightTrsf(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_PrsMgr_PresentationManager self)

        Memory deallocator for transient classes


        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PrsMgr_PresentationManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PrsMgr_PresentationManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PrsMgr_PresentationManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PrsMgr_PresentationManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PrsMgr_PresentationManager self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PrsMgr_PresentationManager self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PrsMgr_PresentationManager self)

        Increments the reference counter of this object


        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PrsMgr_PresentationManager self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_PresentationManager_DecrementRefCounter(self, *args)

Handle_PrsMgr_PresentationManager_swigregister = _PrsMgr.Handle_PrsMgr_PresentationManager_swigregister
Handle_PrsMgr_PresentationManager_swigregister(Handle_PrsMgr_PresentationManager)

def Handle_PrsMgr_PresentationManager_DownCast(thing):
    return _PrsMgr.Handle_PrsMgr_PresentationManager_DownCast(thing)
Handle_PrsMgr_PresentationManager_DownCast = _PrsMgr.Handle_PrsMgr_PresentationManager_DownCast

class Handle_PrsMgr_Prs(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PrsMgr_Prs self)

        Nullify the handle


        """
        return _PrsMgr.Handle_PrsMgr_Prs_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PrsMgr_Prs self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PrsMgr_Prs self, PrsMgr_Prs thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PrsMgr.Handle_PrsMgr_Prs_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PrsMgr_Prs self, Handle_PrsMgr_Prs theHandle) -> Handle_PrsMgr_Prs
        assign(Handle_PrsMgr_Prs self, PrsMgr_Prs thePtr) -> Handle_PrsMgr_Prs
        assign(Handle_PrsMgr_Prs self, Handle_PrsMgr_Prs theHandle) -> Handle_PrsMgr_Prs

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PrsMgr.Handle_PrsMgr_Prs_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PrsMgr_Prs self) -> PrsMgr_Prs

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PrsMgr.Handle_PrsMgr_Prs_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PrsMgr_Prs self) -> PrsMgr_Prs

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PrsMgr.Handle_PrsMgr_Prs___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PrsMgr_Prs self) -> PrsMgr_Prs

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PrsMgr.Handle_PrsMgr_Prs___ref__(self, *args)


    def __hash__(self):
        return _PrsMgr.Handle_PrsMgr_Prs___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PrsMgr.Handle_PrsMgr_Prs___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PrsMgr.new_Handle_PrsMgr_Prs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_Prs_DownCast)
    __swig_destroy__ = _PrsMgr.delete_Handle_PrsMgr_Prs

    def Compute(self, *args):
        """
        Compute(Handle_PrsMgr_Prs self)
        Compute(Handle_PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager aProjector) -> Handle_Graphic3d_Structure
        Compute(Handle_PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf) -> Handle_Graphic3d_Structure
        Compute(Handle_PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager aProjector, Handle_Graphic3d_Structure ComputedStruct)
        Compute(Handle_PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf, Handle_Graphic3d_Structure theStructure)

        No Need to return a Structure, just to
        Fill <aStructure>. The Trsf has to be taken in account
        in the computation (Rotation Part....)

        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Compute(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PrsMgr_Prs self) -> char const *

        :rtype: const char *

        """
        return _PrsMgr.Handle_PrsMgr_Prs_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.Handle_PrsMgr_Prs_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.Handle_PrsMgr_Prs_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Connect(self, *args):
        """
        Connect(Handle_PrsMgr_Prs self, Handle_Prs3d_Presentation aPresentation)

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Connect(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_PrsMgr_Prs self, Handle_Prs3d_Presentation aPresentation)

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Remove(self, *args)


    def RemoveAll(self, *args):
        """RemoveAll(Handle_PrsMgr_Prs self)"""
        return _PrsMgr.Handle_PrsMgr_Prs_RemoveAll(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_PrsMgr_Prs self, Standard_Boolean const WithDestruction)

        if WithDestruction == Standard_True then
        suppress all the groups of primitives in the structure.
        and it is mandatory to create a new group in <me>.
        if WithDestruction == Standard_False then
        clears all the groups of primitives in the structure.
        and all the groups are conserved and empty.
        They will be erased at the next screen update.
        The structure itself is conserved.
        The transformation and the attributes of <me> are conserved.
        The childs of <me> are conserved.

        :type WithDestruction: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Clear(self, *args)


    def Display(self, *args):
        """
        Display(Handle_PrsMgr_Prs self)

        Displays the structure <me> in all the views of the visualiser.


        """
        return _PrsMgr.Handle_PrsMgr_Prs_Display(self, *args)


    def DisplayPriority(self, *args):
        """
        DisplayPriority(Handle_PrsMgr_Prs self) -> Standard_Integer

        Returns the current display priority for the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_Prs_DisplayPriority(self, *args)


    def Erase(self, *args):
        """
        Erase(Handle_PrsMgr_Prs self)

        Erases the structure <me> in all the views
        of the visualiser.


        """
        return _PrsMgr.Handle_PrsMgr_Prs_Erase(self, *args)


    def Highlight(self, *args):
        """
        Highlight(Handle_PrsMgr_Prs self, Handle_Graphic3d_PresentationAttributes theStyle, Standard_Boolean const theToUpdateMgr)

        Highlights the structure in all the views with the given style
        @param theStyle [in] the style (type of highlighting: box/color, color and opacity)
        @param theToUpdateMgr [in] defines whether related computed structures will be
        highlighted via structure manager or not

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes
        :type theToUpdateMgr: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Highlight(self, *args)


    def CalculateBoundBox(self, *args):
        """
        CalculateBoundBox(Handle_PrsMgr_Prs self)

        Computes axis-aligned bounding box of a structure.


        """
        return _PrsMgr.Handle_PrsMgr_Prs_CalculateBoundBox(self, *args)


    def SetInfiniteState(self, *args):
        """
        SetInfiniteState(Handle_PrsMgr_Prs self, Standard_Boolean const theToSet)

        If <theToSet> is Standard_True then <me> is infinite and
        the MinMaxValues method method return :
        theXMin = theYMin = theZMin = RealFirst().
        theXMax = theYMax = theZMax = RealLast().
        By default, <me> is not infinite but empty.

        :type theToSet: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetInfiniteState(self, *args)


    def SetDisplayPriority(self, *args):
        """
        SetDisplayPriority(Handle_PrsMgr_Prs self, Standard_Integer const Priority)

        Modifies the order of displaying the structure.
        Values are between 0 and 10.
        Structures are drawn according to their display priorities
        in ascending order.
        A structure of priority 10 is displayed the last and appears over the others.
        The default value is 5.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        new priority.
        Raises PriorityDefinitionError if <Priority> is
        greater than 10 or a negative value.

        :type Priority: int

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetDisplayPriority(self, *args)


    def ResetDisplayPriority(self, *args):
        """
        ResetDisplayPriority(Handle_PrsMgr_Prs self)

        Reset the current priority of the structure to the
        previous priority.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        previous priority.


        """
        return _PrsMgr.Handle_PrsMgr_Prs_ResetDisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_PrsMgr_Prs self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID for the structure. The Z layer mechanism
        allows to display structures presented in higher layers in overlay
        of structures in lower layers by switching off z buffer depth
        test between layers

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        GetZLayer(Handle_PrsMgr_Prs self) -> Graphic3d_ZLayerId

        Get Z layer ID of displayed structure. The method
        returns -1 if the structure has no ID (deleted from graphic driver).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.Handle_PrsMgr_Prs_GetZLayer(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_PrsMgr_Prs self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Changes a sequence of clip planes slicing the structure on rendering.
        @param thePlanes [in] the set of clip planes.

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes slicing the structure on rendering.
        @return set of clip planes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _PrsMgr.Handle_PrsMgr_Prs_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVisible(self, *args):
        """
        SetVisible(Handle_PrsMgr_Prs self, Standard_Boolean const AValue)

        Modifies the visibility indicator to Standard_True or
        Standard_False for the structure <me>.
        The default value at the definition of <me> is
        Standard_True.

        :type AValue: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetVisible(self, *args)


    def SetVisual(self, *args):
        """
        SetVisual(Handle_PrsMgr_Prs self, Graphic3d_TypeOfStructure const AVisual)

        Modifies the visualisation mode for the structure <me>.

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetVisual(self, *args)


    def SetZoomLimit(self, *args):
        """
        SetZoomLimit(Handle_PrsMgr_Prs self, Standard_Real const LimitInf, Standard_Real const LimitSup)

        Modifies the minimum and maximum zoom coefficients
        for the structure <me>.
        The default value at the definition of <me> is unlimited.
        Category: Methods to modify the class definition
        Warning: Raises StructureDefinitionError if <LimitInf> is
        greater than <LimitSup> or if <LimitInf> or
        <LimitSup> is a negative value.

        :type LimitInf: float
        :type LimitSup: float

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetZoomLimit(self, *args)


    def SetIsForHighlight(self, *args):
        """
        SetIsForHighlight(Handle_PrsMgr_Prs self, Standard_Boolean const isForHighlight)

        marks the structure <me> representing wired structure needed for
        highlight only so it won't be added to BVH tree.
        Category: Methods to modify the class definition

        :type isForHighlight: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetIsForHighlight(self, *args)


    def UnHighlight(self, *args):
        """
        UnHighlight(Handle_PrsMgr_Prs self)

        Suppresses the highlight for the structure <me>
        in all the views of the visualiser.


        """
        return _PrsMgr.Handle_PrsMgr_Prs_UnHighlight(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Handle_PrsMgr_Prs self)
        ReCompute(Handle_PrsMgr_Prs self, Handle_Graphic3d_DataStructureManager aProjector)

        Forces a new construction of the structure <me>
        if <me> is displayed in <aProjetor> and TOS_COMPUTED.

        :type aProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager

        """
        return _PrsMgr.Handle_PrsMgr_Prs_ReCompute(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns Standard_True if the structure <me> contains
        Polygons, Triangles or Quadrangles.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_ContainsFacet(self, *args)


    def Groups(self, *args):
        """
        Returns the groups sequence included in the structure <me> (internal storage).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfGroup

        """
        res = _PrsMgr.Handle_PrsMgr_Prs_Groups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfGroups(self, *args):
        """
        NumberOfGroups(Handle_PrsMgr_Prs self) -> Standard_Integer

        Returns the current number of groups in the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_Prs_NumberOfGroups(self, *args)


    def NewGroup(self, *args):
        """
        NewGroup(Handle_PrsMgr_Prs self) -> Handle_Graphic3d_Group

        Append new group to this structure.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _PrsMgr.Handle_PrsMgr_Prs_NewGroup(self, *args)


    def HighlightStyle(self, *args):
        """
        Returns the highlight color for the Highlight method
        with the highlight method TOHM_COLOR or TOHM_BOUNDBOX.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes

        """
        res = _PrsMgr.Handle_PrsMgr_Prs_HighlightStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDeleted(self, *args):
        """
        IsDeleted(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is deleted.
        <me> is deleted after the call Remove (me).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsDeleted(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns the display indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsDisplayed(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is empty.
        Warning: A structure is empty if :
        it do not have group or all the groups are empties
        and it do not have descendant or all the descendants
        are empties.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsEmpty(self, *args)


    def IsInfinite(self, *args):
        """
        IsInfinite(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is infinite.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsInfinite(self, *args)


    def IsHighlighted(self, *args):
        """
        IsHighlighted(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns the highlight indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsHighlighted(self, *args)


    def IsTransformed(self, *args):
        """
        IsTransformed(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is transformed.
        <=> The transformation != Identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsTransformed(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns the visibility indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsVisible(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Handle_PrsMgr_Prs self, Standard_Boolean const theToIgnoreInfiniteFlag) -> Bnd_Box

        Returns the coordinates of the boundary box of the structure <me>.
        If <theToIgnoreInfiniteFlag> is TRUE, the method returns actual graphical
        boundaries of the Graphic3d_Group components. Otherwise, the
        method returns boundaries taking into account infinite state
        of the structure. This approach generally used for application
        specific fit operation (e.g. fitting the model into screen,
        not taking into accout infinite helper elements).
        Warning: If the structure <me> is empty then the empty box is returned,
        If the structure <me> is infinite then the whole box is returned.

        :type theToIgnoreInfiniteFlag: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _PrsMgr.Handle_PrsMgr_Prs_MinMaxValues(self, *args)


    def Visual(self, *args):
        """
        Visual(Handle_PrsMgr_Prs self) -> Graphic3d_TypeOfStructure

        Returns the visualisation mode for the structure <me>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Visual(self, *args)


    def AcceptConnection(self, *args):
        """
        AcceptConnection(Handle_PrsMgr_Prs self, Handle_Graphic3d_Structure AStructure1, Handle_Graphic3d_Structure AStructure2, Graphic3d_TypeOfConnection const AType) -> Standard_Boolean

        Returns Standard_True if the connection is possible between
        <AStructure1> and <AStructure2> without a creation
        of a cycle.

        It's not possible to call the method
        AStructure1->Connect (AStructure2, TypeOfConnection)
        if
        - the set of all ancestors of <AStructure1> contains
        <AStructure1> and if the
        TypeOfConnection == TOC_DESCENDANT
        - the set of all descendants of <AStructure1> contains
        <AStructure2> and if the
        TypeOfConnection == TOC_ANCESTOR

        :type AStructure1: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AStructure2: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_AcceptConnection(self, *args)


    def Ancestors(self, *args):
        """
        Ancestors(Handle_PrsMgr_Prs self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures to which <me> is connected.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Ancestors(self, *args)


    def Descendants(self, *args):
        """
        Descendants(Handle_PrsMgr_Prs self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures connected to <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Descendants(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Handle_PrsMgr_Prs self, Handle_Graphic3d_Structure AStructure)

        Suppress the connection between <AStructure> and <me>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Disconnect(self, *args)


    def DisconnectAll(self, *args):
        """
        DisconnectAll(Handle_PrsMgr_Prs self, Graphic3d_TypeOfConnection const AType)

        If Atype is TOC_DESCENDANT then suppress all
        the connections with the child structures of <me>.
        If Atype is TOC_ANCESTOR then suppress all
        the connections with the parent structures of <me>.

        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _PrsMgr.Handle_PrsMgr_Prs_DisconnectAll(self, *args)


    def Network(self, *args):
        """
        Network(Handle_PrsMgr_Prs self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType, Graphic3d_MapOfStructure & ASet)

        Returns <ASet> the group of structures :
        - directly or indirectly connected to <AStructure> if the
        TypeOfConnection == TOC_DESCENDANT
        - to which <AStructure> is directly or indirectly connected
        if the TypeOfConnection == TOC_ANCESTOR

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :type ASet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Network(self, *args)


    def SetOwner(self, *args):
        """
        SetOwner(Handle_PrsMgr_Prs self, Standard_Address const Owner)

        :type Owner: OCC.wrapper.Standard.Standard_Address

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetOwner(self, *args)


    def Owner(self, *args):
        """
        Owner(Handle_PrsMgr_Prs self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Owner(self, *args)


    def SetHLRValidation(self, *args):
        """
        SetHLRValidation(Handle_PrsMgr_Prs self, Standard_Boolean const AFlag)

        :type AFlag: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetHLRValidation(self, *args)


    def HLRValidation(self, *args):
        """
        HLRValidation(Handle_PrsMgr_Prs self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_HLRValidation(self, *args)


    def Transformation(self, *args):
        """
        Return local transformation.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _PrsMgr.Handle_PrsMgr_Prs_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformation(self, *args):
        """
        SetTransformation(Handle_PrsMgr_Prs self, Handle_Geom_Transformation theTrsf)

        Modifies the current local transformation

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetTransformation(self, *args)


    def Transform(self, *args):
        """
        Transform(Handle_PrsMgr_Prs self, Handle_Geom_Transformation theTrsf)

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Transform(self, *args)


    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Handle_PrsMgr_Prs self, Handle_Graphic3d_TransformPers theTrsfPers)

        Modifies the current transform persistence (pan, zoom or rotate)

        :type theTrsfPers: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetTransformPersistence(self, *args)


    def TransformPersistence(self, *args):
        """
        @return transform persistence of the presentable object.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _PrsMgr.Handle_PrsMgr_Prs_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(Handle_PrsMgr_Prs self, Standard_Boolean const theIsMutable)

        Sets if the structure location has mutable nature (content or location will be changed regularly).

        :type theIsMutable: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(Handle_PrsMgr_Prs self) -> Standard_Boolean

        Returns true if structure has mutable nature (content or location are be changed regularly).
        Mutable structure will be managed in different way than static onces.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsMutable(self, *args)


    def ComputeVisual(self, *args):
        """
        ComputeVisual(Handle_PrsMgr_Prs self) -> Graphic3d_TypeOfStructure

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_ComputeVisual(self, *args)


    def GraphicClear(self, *args):
        """
        GraphicClear(Handle_PrsMgr_Prs self, Standard_Boolean const WithDestruction)

        Clears the structure <me>.

        :type WithDestruction: bool

        """
        return _PrsMgr.Handle_PrsMgr_Prs_GraphicClear(self, *args)


    def GraphicConnect(self, *args):
        """
        GraphicConnect(Handle_PrsMgr_Prs self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_GraphicConnect(self, *args)


    def GraphicDisconnect(self, *args):
        """
        GraphicDisconnect(Handle_PrsMgr_Prs self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_GraphicDisconnect(self, *args)


    def GraphicTransform(self, *args):
        """
        GraphicTransform(Handle_PrsMgr_Prs self, Handle_Geom_Transformation theTrsf)

        Internal method which sets new transformation without calling graphic manager callbacks.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _PrsMgr.Handle_PrsMgr_Prs_GraphicTransform(self, *args)


    def Identification(self, *args):
        """
        Identification(Handle_PrsMgr_Prs self) -> Standard_Integer

        Returns the identification number of the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Identification(self, *args)


    def PrintNetwork(self, *args):
        """
        PrintNetwork(Handle_PrsMgr_Prs self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType)

        Prints informations about the network associated
        with the structure <AStructure>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _PrsMgr.Handle_PrsMgr_Prs_PrintNetwork(self, *args)


    def SetComputeVisual(self, *args):
        """
        SetComputeVisual(Handle_PrsMgr_Prs self, Graphic3d_TypeOfStructure const AVisual)

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _PrsMgr.Handle_PrsMgr_Prs_SetComputeVisual(self, *args)


    def Transforms(self, *args):
        """
        Transforms(Handle_PrsMgr_Prs self, gp_Trsf theTrsf, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ)

        Transforms theX, theY, theZ with the transformation theTrsf.

        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNewX: float
        :type theNewY: float
        :type theNewZ: float

        """
        return _PrsMgr.Handle_PrsMgr_Prs_Transforms(self, *args)


    def CStructure(self, *args):
        """
        Returns the low-level structure

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        res = _PrsMgr.Handle_PrsMgr_Prs_CStructure(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_PrsMgr_Prs self)

        Memory deallocator for transient classes


        """
        return _PrsMgr.Handle_PrsMgr_Prs_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PrsMgr_Prs self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PrsMgr_Prs self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PrsMgr_Prs self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PrsMgr_Prs self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Prs_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PrsMgr_Prs self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PrsMgr.Handle_PrsMgr_Prs_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PrsMgr_Prs self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_Prs_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PrsMgr_Prs self)

        Increments the reference counter of this object


        """
        return _PrsMgr.Handle_PrsMgr_Prs_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PrsMgr_Prs self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_Prs_DecrementRefCounter(self, *args)

Handle_PrsMgr_Prs_swigregister = _PrsMgr.Handle_PrsMgr_Prs_swigregister
Handle_PrsMgr_Prs_swigregister(Handle_PrsMgr_Prs)

def Handle_PrsMgr_Prs_DownCast(thing):
    return _PrsMgr.Handle_PrsMgr_Prs_DownCast(thing)
Handle_PrsMgr_Prs_DownCast = _PrsMgr.Handle_PrsMgr_Prs_DownCast

class Handle_PrsMgr_Presentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PrsMgr_Presentation self)

        Nullify the handle


        """
        return _PrsMgr.Handle_PrsMgr_Presentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PrsMgr_Presentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PrsMgr_Presentation self, PrsMgr_Presentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PrsMgr_Presentation self, Handle_PrsMgr_Presentation theHandle) -> Handle_PrsMgr_Presentation
        assign(Handle_PrsMgr_Presentation self, PrsMgr_Presentation thePtr) -> Handle_PrsMgr_Presentation
        assign(Handle_PrsMgr_Presentation self, Handle_PrsMgr_Presentation theHandle) -> Handle_PrsMgr_Presentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PrsMgr_Presentation self) -> PrsMgr_Presentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PrsMgr_Presentation self) -> PrsMgr_Presentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PrsMgr.Handle_PrsMgr_Presentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PrsMgr_Presentation self) -> PrsMgr_Presentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PrsMgr.Handle_PrsMgr_Presentation___ref__(self, *args)


    def __hash__(self):
        return _PrsMgr.Handle_PrsMgr_Presentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PrsMgr.Handle_PrsMgr_Presentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PrsMgr.new_Handle_PrsMgr_Presentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_Presentation_DownCast)
    __swig_destroy__ = _PrsMgr.delete_Handle_PrsMgr_Presentation

    def get_type_name(self, *args):
        """
        get_type_name(Handle_PrsMgr_Presentation self) -> char const *

        :rtype: const char *

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.Handle_PrsMgr_Presentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.Handle_PrsMgr_Presentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Presentation(self, *args):
        """
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        res = _PrsMgr.Handle_PrsMgr_Presentation_Presentation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PresentationManager(self, *args):
        """
        returns the PresentationManager in which the presentation has been created.

        :rtype: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentationManager

        """
        res = _PrsMgr.Handle_PrsMgr_Presentation_PresentationManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUpdateStatus(self, *args):
        """
        SetUpdateStatus(Handle_PrsMgr_Presentation self, Standard_Boolean const theUpdateStatus)

        :type theUpdateStatus: bool

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_SetUpdateStatus(self, *args)


    def MustBeUpdated(self, *args):
        """
        MustBeUpdated(Handle_PrsMgr_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_MustBeUpdated(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_PrsMgr_Presentation self)

        Memory deallocator for transient classes


        """
        return _PrsMgr.Handle_PrsMgr_Presentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PrsMgr_Presentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PrsMgr_Presentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PrsMgr_Presentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PrsMgr_Presentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PrsMgr_Presentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PrsMgr_Presentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PrsMgr_Presentation self)

        Increments the reference counter of this object


        """
        return _PrsMgr.Handle_PrsMgr_Presentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PrsMgr_Presentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_Presentation_DecrementRefCounter(self, *args)

Handle_PrsMgr_Presentation_swigregister = _PrsMgr.Handle_PrsMgr_Presentation_swigregister
Handle_PrsMgr_Presentation_swigregister(Handle_PrsMgr_Presentation)

def Handle_PrsMgr_Presentation_DownCast(thing):
    return _PrsMgr.Handle_PrsMgr_Presentation_DownCast(thing)
Handle_PrsMgr_Presentation_DownCast = _PrsMgr.Handle_PrsMgr_Presentation_DownCast

class Handle_PrsMgr_PresentableObject(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PrsMgr_PresentableObject self)

        Nullify the handle


        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PrsMgr_PresentableObject self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PrsMgr_PresentableObject self, PrsMgr_PresentableObject thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theHandle) -> Handle_PrsMgr_PresentableObject
        assign(Handle_PrsMgr_PresentableObject self, PrsMgr_PresentableObject thePtr) -> Handle_PrsMgr_PresentableObject
        assign(Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theHandle) -> Handle_PrsMgr_PresentableObject

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PrsMgr_PresentableObject self) -> PrsMgr_PresentableObject

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PrsMgr_PresentableObject self) -> PrsMgr_PresentableObject

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PrsMgr_PresentableObject self) -> PrsMgr_PresentableObject

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject___ref__(self, *args)


    def __hash__(self):
        return _PrsMgr.Handle_PrsMgr_PresentableObject___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PrsMgr.Handle_PrsMgr_PresentableObject___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PrsMgr.new_Handle_PrsMgr_PresentableObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_PresentableObject_DownCast)
    __swig_destroy__ = _PrsMgr.delete_Handle_PrsMgr_PresentableObject

    def get_type_name(self, *args):
        """
        get_type_name(Handle_PrsMgr_PresentableObject self) -> char const *

        :rtype: const char *

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Presentations(self, *args):
        """
        Presentations(Handle_PrsMgr_PresentableObject self) -> NCollection_Sequence_PrsMgr_ModedPresentation

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_Presentations

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_Presentations(self, *args)


    def TypeOfPresentation3d(self, *args):
        """
        TypeOfPresentation3d(Handle_PrsMgr_PresentableObject self) -> PrsMgr_TypeOfPresentation3d

        Returns information on whether the object accepts display in HLR mode or not.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_TypeOfPresentation3d(self, *args)


    def TransformPersistence(self, *args):
        """
        Returns Transformation Persistence defining a special Local Coordinate system where this presentable object is located or NULL handle if not defined.
        Position of the object having Transformation Persistence is mutable and depends on camera position.
        The same applies to a bounding box of the object.
        @sa Graphic3d_TransformPers class description

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Handle_PrsMgr_PresentableObject self, Handle_Graphic3d_TransformPers theTrsfPers)
        SetTransformPersistence(Handle_PrsMgr_PresentableObject self, Graphic3d_TransModeFlags const theMode, gp_Pnt thePoint)

        Sets up Transform Persistence Mode for this object.
        This function used to lock in object position, rotation and / or zooming relative to camera position.
        Object will be drawn in the origin setted by thePoint parameter (except Graphic3d_TMF_TriedronPers flag
        - see description later). theMode should be:
        -   Graphic3d_TMF_None - no persistence attributes (reset);
        -   Graphic3d_TMF_ZoomPers - object doesn't resize;
        -   Graphic3d_TMF_RotatePers - object doesn't rotate;
        -   Graphic3d_TMF_ZoomRotatePers - object doesn't resize and rotate;
        -   Graphic3d_TMF_RotatePers - object doesn't rotate;
        -   Graphic3d_TMF_TriedronPers - object behaves like trihedron.
        If Graphic3d_TMF_TriedronPers or Graphic3d_TMF_2d persistence mode selected thePoint coordinates X and Y means:
        -   X = 0.0, Y = 0.0 - center of view window;
        -   X > 0.0, Y > 0.0 - right upper corner of view window;
        -   X > 0.0, Y < 0.0 - right lower corner of view window;
        -   X < 0.0, Y > 0.0 - left  upper corner of view window;
        -   X < 0.0, Y < 0.0 - left  lower corner of view window.
        And Z coordinate defines the gap from border of view window (except center position).

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetTransformPersistence(self, *args)


    def GetTransformPersistenceMode(self, *args):
        """
        GetTransformPersistenceMode(Handle_PrsMgr_PresentableObject self) -> Graphic3d_TransModeFlags

        Gets  Transform  Persistence Mode  for  this  object

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_GetTransformPersistenceMode(self, *args)


    def GetTransformPersistencePoint(self, *args):
        """
        GetTransformPersistencePoint(Handle_PrsMgr_PresentableObject self) -> gp_Pnt

        Gets  point  of  transform  persistence for  this  object

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_GetTransformPersistencePoint(self, *args)


    def SetTypeOfPresentation(self, *args):
        """
        SetTypeOfPresentation(Handle_PrsMgr_PresentableObject self, PrsMgr_TypeOfPresentation3d const aType)

        :type aType: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetTypeOfPresentation(self, *args)


    def SetToUpdate(self, *args):
        """
        SetToUpdate(Handle_PrsMgr_PresentableObject self, Standard_Integer const aMode)
        SetToUpdate(Handle_PrsMgr_PresentableObject self)

        flags all the Presentations to be Updated.


        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetToUpdate(self, *args)


    def ToBeUpdated(self, *args):
        """
        ToBeUpdated(Handle_PrsMgr_PresentableObject self, NCollection_List_Standard_Integer ListOfMode)

        gives the list of modes which are flagged "to be updated".

        :type ListOfMode: OCC.wrapper.TColStd.TColStd_ListOfInteger

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_ToBeUpdated(self, *args)


    def LocalTransformationGeom(self, *args):
        """
        Return the local transformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_LocalTransformationGeom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLocalTransformation(self, *args):
        """
        SetLocalTransformation(Handle_PrsMgr_PresentableObject self, gp_Trsf theTrsf)
        SetLocalTransformation(Handle_PrsMgr_PresentableObject self, Handle_Geom_Transformation theTrsf)

        Sets local transformation to theTransformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetLocalTransformation(self, *args)


    def HasTransformation(self, *args):
        """
        HasTransformation(Handle_PrsMgr_PresentableObject self) -> Standard_Boolean

        Returns true if object has a transformation that is different from the identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_HasTransformation(self, *args)


    def TransformationGeom(self, *args):
        """
        Return the transformation taking into account transformation of parent object(s).
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_TransformationGeom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LocalTransformation(self, *args):
        """
        Return the local transformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_LocalTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transformation(self, *args):
        """
        Return the transformation taking into account transformation of parent object(s).
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InversedTransformation(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_InversedTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ResetTransformation(self, *args):
        """
        ResetTransformation(Handle_PrsMgr_PresentableObject self)

        resets local transformation to identity.


        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_ResetTransformation(self, *args)


    def UpdateTransformation(self, *args):
        """
        UpdateTransformation(Handle_PrsMgr_PresentableObject self)
        UpdateTransformation(Handle_PrsMgr_PresentableObject self, Handle_Prs3d_Presentation P)

        :type P: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_UpdateTransformation(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_PrsMgr_PresentableObject self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID and update all presentations of the presentable object.
        The layers mechanism allows drawing objects in higher layers in overlay of objects in lower layers.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetZLayer(self, *args)


    def ZLayer(self, *args):
        """
        ZLayer(Handle_PrsMgr_PresentableObject self) -> Graphic3d_ZLayerId

        Get ID of Z layer.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_ZLayer(self, *args)


    def AddClipPlane(self, *args):
        """
        AddClipPlane(Handle_PrsMgr_PresentableObject self, Handle_Graphic3d_ClipPlane thePlane)

        Adds clip plane for graphical clipping for all display mode
        presentations. The composition of clip planes truncates the rendering
        space to convex volume. Please be aware that number of supported
        clip plane is limited. The planes which exceed the limit are ignored.
        Besides of this, some planes can be already set in view where the object
        is shown: the number of these planes should be substracted from limit
        to predict the maximum possible number of object clipping planes.
        @param thePlane [in] the clip plane to be appended to map of clip planes.

        :type thePlane: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_AddClipPlane(self, *args)


    def RemoveClipPlane(self, *args):
        """
        RemoveClipPlane(Handle_PrsMgr_PresentableObject self, Handle_Graphic3d_ClipPlane thePlane)

        Removes previously added clip plane.
        @param thePlane [in] the clip plane to be removed from map of clip planes.

        :type thePlane: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_RemoveClipPlane(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_PrsMgr_PresentableObject self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)
        SetClipPlanes(Handle_PrsMgr_PresentableObject self, Graphic3d_SequenceOfHClipPlane thePlanes)

        :type thePlanes: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfHClipPlane

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes.
        @return set of previously added clip planes for all display mode presentations.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(Handle_PrsMgr_PresentableObject self, Standard_Boolean const theIsMutable)

        Sets if the object has mutable nature (content or location will be changed regularly).
        This method should be called before object displaying to take effect.

        :type theIsMutable: bool

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(Handle_PrsMgr_PresentableObject self) -> Standard_Boolean

        Returns true if object has mutable nature (content or location are be changed regularly).
        Mutable object will be managed in different way than static onces (another optimizations).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_IsMutable(self, *args)


    def AddChild(self, *args):
        """
        AddChild(Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theObject)

        Makes theObject child of current object in scene hierarchy.

        :type theObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_AddChild(self, *args)


    def RemoveChild(self, *args):
        """
        RemoveChild(Handle_PrsMgr_PresentableObject self, Handle_PrsMgr_PresentableObject theObject)

        Removes theObject from children of current object in scene hierarchy.

        :type theObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_RemoveChild(self, *args)


    def Children(self, *args):
        """
        Returns children of the current object.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_ListOfPresentableObjects

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_Children(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnPresentations(self, *args):
        """
        HasOwnPresentations(Handle_PrsMgr_PresentableObject self) -> Standard_Boolean

        Returns true if object should have own presentations.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_HasOwnPresentations(self, *args)


    def Parent(self, *args):
        """
        Parent(Handle_PrsMgr_PresentableObject self) -> PrsMgr_PresentableObject

        Returns parent of current object in scene hierarchy.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_PresentableObjectPointer

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_Parent(self, *args)


    def SetAttributes(self, *args):
        """
        SetAttributes(Handle_PrsMgr_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the drawing tool theDrawer.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetAttributes(self, *args)


    def Attributes(self, *args):
        """
        Returns the attributes settings.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def UnsetAttributes(self, *args):
        """
        UnsetAttributes(Handle_PrsMgr_PresentableObject self)

        Clears settings provided by the drawing tool theDrawer.


        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_UnsetAttributes(self, *args)


    def HilightAttributes(self, *args):
        """
        Returns the hilight attributes settings.
        When not NULL, overrides both Prs3d_TypeOfHighlight_LocalSelected and Prs3d_TypeOfHighlight_Selected defined within AIS_InteractiveContext.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_HilightAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHilightAttributes(self, *args):
        """
        SetHilightAttributes(Handle_PrsMgr_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the hilight drawing tool theDrawer.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetHilightAttributes(self, *args)


    def DynamicHilightAttributes(self, *args):
        """
        Returns the hilight attributes settings.
        When not NULL, overrides both Prs3d_TypeOfHighlight_LocalDynamic and Prs3d_TypeOfHighlight_Dynamic defined within AIS_InteractiveContext.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _PrsMgr.Handle_PrsMgr_PresentableObject_DynamicHilightAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDynamicHilightAttributes(self, *args):
        """
        SetDynamicHilightAttributes(Handle_PrsMgr_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the dynamic hilight drawing tool.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_SetDynamicHilightAttributes(self, *args)


    def UnsetHilightAttributes(self, *args):
        """
        UnsetHilightAttributes(Handle_PrsMgr_PresentableObject self)

        Clears settings provided by the hilight drawing tool theDrawer.


        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_UnsetHilightAttributes(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_PrsMgr_PresentableObject self)

        Memory deallocator for transient classes


        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PrsMgr_PresentableObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PrsMgr_PresentableObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PrsMgr_PresentableObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PrsMgr_PresentableObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PrsMgr_PresentableObject self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PrsMgr_PresentableObject self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PrsMgr_PresentableObject self)

        Increments the reference counter of this object


        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PrsMgr_PresentableObject self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.Handle_PrsMgr_PresentableObject_DecrementRefCounter(self, *args)

Handle_PrsMgr_PresentableObject_swigregister = _PrsMgr.Handle_PrsMgr_PresentableObject_swigregister
Handle_PrsMgr_PresentableObject_swigregister(Handle_PrsMgr_PresentableObject)

def Handle_PrsMgr_PresentableObject_DownCast(thing):
    return _PrsMgr.Handle_PrsMgr_PresentableObject_DownCast(thing)
Handle_PrsMgr_PresentableObject_DownCast = _PrsMgr.Handle_PrsMgr_PresentableObject_DownCast

class NCollection_Sequence_PrsMgr_ModedPresentation(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_PrsMgr_ModedPresentation self) -> NCollection_Sequence< PrsMgr_ModedPresentation >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_PrsMgr_ModedPresentation self) -> NCollection_Sequence< PrsMgr_ModedPresentation >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_PrsMgr_ModedPresentation self) -> NCollection_Sequence< PrsMgr_ModedPresentation >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_PrsMgr_ModedPresentation self) -> NCollection_Sequence< PrsMgr_ModedPresentation >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _PrsMgr.new_NCollection_Sequence_PrsMgr_ModedPresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_PrsMgr_ModedPresentation self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_PrsMgr_ModedPresentation self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_PrsMgr_ModedPresentation self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_PrsMgr_ModedPresentation self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_PrsMgr_ModedPresentation self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_PrsMgr_ModedPresentation self)

        Reverse sequence


        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_PrsMgr_ModedPresentation self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_PrsMgr_ModedPresentation self, NCollection_Sequence_PrsMgr_ModedPresentation theOther) -> NCollection_Sequence_PrsMgr_ModedPresentation

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_PrsMgr_ModedPresentation self, NCollection_Sequence_PrsMgr_ModedPresentation theOther) -> NCollection_Sequence_PrsMgr_ModedPresentation

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_PrsMgr_ModedPresentation self, NCollection_Sequence< PrsMgr_ModedPresentation >::Iterator & thePosition)
        Remove(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_PrsMgr_ModedPresentation self, PrsMgr_ModedPresentation theItem)
        Append(NCollection_Sequence_PrsMgr_ModedPresentation self, NCollection_Sequence_PrsMgr_ModedPresentation theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_PrsMgr_ModedPresentation self, PrsMgr_ModedPresentation theItem)
        Prepend(NCollection_Sequence_PrsMgr_ModedPresentation self, NCollection_Sequence_PrsMgr_ModedPresentation theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theIndex, PrsMgr_ModedPresentation theItem)
        InsertBefore(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theIndex, NCollection_Sequence_PrsMgr_ModedPresentation theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_PrsMgr_ModedPresentation self, NCollection_Sequence< PrsMgr_ModedPresentation >::Iterator & thePosition, PrsMgr_ModedPresentation theItem)
        InsertAfter(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theIndex, NCollection_Sequence_PrsMgr_ModedPresentation theSeq)
        InsertAfter(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theIndex, PrsMgr_ModedPresentation theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theIndex, NCollection_Sequence_PrsMgr_ModedPresentation theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_PrsMgr_ModedPresentation self) -> PrsMgr_ModedPresentation

        First item access

        :rtype: TheItemType &

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_PrsMgr_ModedPresentation self) -> PrsMgr_ModedPresentation

        Last item access

        :rtype: TheItemType &

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theIndex) -> PrsMgr_ModedPresentation

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_PrsMgr_ModedPresentation self, Standard_Integer const theIndex, PrsMgr_ModedPresentation theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_SetValue(self, *args)


    def __iter__(self):
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation___iter__(self)
    __swig_destroy__ = _PrsMgr.delete_NCollection_Sequence_PrsMgr_ModedPresentation
NCollection_Sequence_PrsMgr_ModedPresentation_swigregister = _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_swigregister
NCollection_Sequence_PrsMgr_ModedPresentation_swigregister(NCollection_Sequence_PrsMgr_ModedPresentation)

def NCollection_Sequence_PrsMgr_ModedPresentation_delNode(*args):
    """
    NCollection_Sequence_PrsMgr_ModedPresentation_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_delNode(*args)

class NCollection_Sequence_PrsMgr_ModedPresentation_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _PrsMgr.new_NCollection_Sequence_PrsMgr_ModedPresentation_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PrsMgr.delete_NCollection_Sequence_PrsMgr_ModedPresentation_IteratorHelper

    def __next__(self):
        return _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_IteratorHelper___next__(self)
NCollection_Sequence_PrsMgr_ModedPresentation_IteratorHelper_swigregister = _PrsMgr.NCollection_Sequence_PrsMgr_ModedPresentation_IteratorHelper_swigregister
NCollection_Sequence_PrsMgr_ModedPresentation_IteratorHelper_swigregister(NCollection_Sequence_PrsMgr_ModedPresentation_IteratorHelper)


try:
	PrsMgr_Presentations = NCollection_Sequence_PrsMgr_ModedPresentation
except NameError:
	pass # does not exist, probably ignored

class NCollection_List_Handle_Prs3d_Presentation(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_Prs3d_Presentation self) -> NCollection_List< opencascade::handle< Prs3d_Presentation > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_Prs3d_Presentation self) -> NCollection_List< opencascade::handle< Prs3d_Presentation > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_Prs3d_Presentation self) -> NCollection_List< opencascade::handle< Prs3d_Presentation > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_Prs3d_Presentation self) -> NCollection_List< opencascade::handle< Prs3d_Presentation > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _PrsMgr.new_NCollection_List_Handle_Prs3d_Presentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_Prs3d_Presentation self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_Prs3d_Presentation self, NCollection_List_Handle_Prs3d_Presentation theOther) -> NCollection_List_Handle_Prs3d_Presentation

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_Prs3d_Presentation self, NCollection_List_Handle_Prs3d_Presentation theOther) -> NCollection_List_Handle_Prs3d_Presentation

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_Prs3d_Presentation self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation theItem) -> Handle_Prs3d_Presentation
        Append(NCollection_List_Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation theItem, NCollection_List< opencascade::handle< Prs3d_Presentation > >::Iterator & theIter)
        Append(NCollection_List_Handle_Prs3d_Presentation self, NCollection_List_Handle_Prs3d_Presentation theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation theItem) -> Handle_Prs3d_Presentation
        Prepend(NCollection_List_Handle_Prs3d_Presentation self, NCollection_List_Handle_Prs3d_Presentation theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_Prs3d_Presentation self)

        RemoveFirst item


        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_Prs3d_Presentation self, NCollection_List< opencascade::handle< Prs3d_Presentation > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation theItem, NCollection_List< opencascade::handle< Prs3d_Presentation > >::Iterator & theIter) -> Handle_Prs3d_Presentation
        InsertBefore(NCollection_List_Handle_Prs3d_Presentation self, NCollection_List_Handle_Prs3d_Presentation theOther, NCollection_List< opencascade::handle< Prs3d_Presentation > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation theItem, NCollection_List< opencascade::handle< Prs3d_Presentation > >::Iterator & theIter) -> Handle_Prs3d_Presentation
        InsertAfter(NCollection_List_Handle_Prs3d_Presentation self, NCollection_List_Handle_Prs3d_Presentation theOther, NCollection_List< opencascade::handle< Prs3d_Presentation > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_Prs3d_Presentation self)

        Reverse the list


        """
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_Reverse(self, *args)


    def __iter__(self):
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation___iter__(self)
    __swig_destroy__ = _PrsMgr.delete_NCollection_List_Handle_Prs3d_Presentation
NCollection_List_Handle_Prs3d_Presentation_swigregister = _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_swigregister
NCollection_List_Handle_Prs3d_Presentation_swigregister(NCollection_List_Handle_Prs3d_Presentation)

class NCollection_List_Handle_Prs3d_Presentation_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _PrsMgr.new_NCollection_List_Handle_Prs3d_Presentation_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PrsMgr.delete_NCollection_List_Handle_Prs3d_Presentation_IteratorHelper

    def __next__(self):
        return _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_IteratorHelper___next__(self)
NCollection_List_Handle_Prs3d_Presentation_IteratorHelper_swigregister = _PrsMgr.NCollection_List_Handle_Prs3d_Presentation_IteratorHelper_swigregister
NCollection_List_Handle_Prs3d_Presentation_IteratorHelper_swigregister(NCollection_List_Handle_Prs3d_Presentation_IteratorHelper)


try:
	PrsMgr_ListOfPresentations = NCollection_List_Handle_Prs3d_Presentation
except NameError:
	pass # does not exist, probably ignored



