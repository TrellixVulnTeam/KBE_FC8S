# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Select3D')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Select3D')
    _Select3D = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Select3D', [dirname(__file__)])
        except ImportError:
            import _Select3D
            return _Select3D
        try:
            _mod = imp.load_module('_Select3D', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Select3D = swig_import_helper()
    del swig_import_helper
else:
    import _Select3D
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Select3D.delete_SwigPyIterator

    def value(self):
        return _Select3D.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Select3D.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Select3D.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Select3D.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Select3D.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Select3D.SwigPyIterator_copy(self)

    def next(self):
        return _Select3D.SwigPyIterator_next(self)

    def __next__(self):
        return _Select3D.SwigPyIterator___next__(self)

    def previous(self):
        return _Select3D.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Select3D.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Select3D.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Select3D.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Select3D.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Select3D.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Select3D.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Select3D.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Select3D.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Select3D.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Select3D.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Select3D.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Select3D.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Select3D.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Select3D.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Select3D.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Select3D.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Select3D.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Select3D.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Select3D.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Select3D.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Select3D.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Select3D.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Select3D.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Select3D.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Select3D.ptr_to_number(item)
ptr_to_number = _Select3D.ptr_to_number

def HashCode(*args):
    return _Select3D.HashCode(*args)
HashCode = _Select3D.HashCode

def ptr_equal(a, b):
    return _Select3D.ptr_equal(a, b)
ptr_equal = _Select3D.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
Select3D_TOS_INTERIOR = _Select3D.Select3D_TOS_INTERIOR
Select3D_TOS_BOUNDARY = _Select3D.Select3D_TOS_BOUNDARY
class Select3D_SensitiveEntity(SelectBasics.SelectBasics_SensitiveEntity):
    """
    Abstract framework to define 3D sensitive entities.
    As the selection process uses the principle of a
    projection of 3D shapes onto a 2D view where
    nearness to a rectangle determines whether a shape
    is picked or not, all 3D shapes need to be converted
    into 2D ones in order to be selected.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveEntity(self) 
            return h


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveEntity self) -> Handle_Select3D_SensitiveEntity

        Originally this method intended to return sensitive
        entity with new location aLocation, but currently sensitive
        entities do not hold a location, instead HasLocation() and
        Location() methods call corresponding entity owner's methods.
        Thus all entities returned by GetConnected() share the same
        location propagated from corresponding selectable object.
        You must redefine this function for any type of
        sensitive entity which can accept another connected
        sensitive entity.//can be connected to another sensitive entity.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntity_GetConnected(self, *args)


    def Matches(self, *args):
        """
        Matches(Select3D_SensitiveEntity self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether sensitive overlaps current selecting volume.
        Stores minimum depth, distance to center of geometry and
        closest point detected into thePickResult

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveEntity_Matches(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitiveEntity self) -> Standard_Integer

        Returns the number of sub-entities or elements in
        sensitive entity. Is used to determine if entity is
        complex and needs to pre-build BVH at the creation of
        sensitive entity step or is light-weighted so the tree
        can be build on demand with unnoticeable delay

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveEntity_NbSubElements(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveEntity self) -> BVH_Box_Standard_Real_

        Returns bounding box of a sensitive with transformation applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveEntity_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveEntity self) -> gp_Pnt

        Returns center of a sensitive with transformation applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveEntity_CenterOfGeometry(self, *args)


    def BVH(self, *args):
        """
        BVH(Select3D_SensitiveEntity self)

        Builds BVH tree for a sensitive if needed


        """
        return _Select3D.Select3D_SensitiveEntity_BVH(self, *args)


    def Clear(self, *args):
        """
        Clear(Select3D_SensitiveEntity self)

        Clears up all resources and memory


        """
        return _Select3D.Select3D_SensitiveEntity_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Select3D_SensitiveEntity self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveEntity_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Select3D_SensitiveEntity self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Select3D_SensitiveEntity_InvInitLocation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveEntity
Select3D_SensitiveEntity_swigregister = _Select3D.Select3D_SensitiveEntity_swigregister
Select3D_SensitiveEntity_swigregister(Select3D_SensitiveEntity)

def Select3D_SensitiveEntity_get_type_name(*args):
    """
    Select3D_SensitiveEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveEntity_get_type_name(*args)

def Select3D_SensitiveEntity_get_type_descriptor(*args):
    """
    Select3D_SensitiveEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveEntity_get_type_descriptor(*args)

class Select3D_BVHIndexBuffer(Graphic3d.Graphic3d_Buffer):
    """Index buffer for BVH tree."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_BVHIndexBuffer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_BVHIndexBuffer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Select3D_BVHIndexBuffer self, Handle_NCollection_BaseAllocator theAlloc) -> Select3D_BVHIndexBuffer

        Empty constructor.

        :type theAlloc: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        this = _Select3D.new_Select3D_BVHIndexBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasPatches(self, *args):
        """
        HasPatches(Select3D_BVHIndexBuffer self) -> bool

        :rtype: bool

        """
        return _Select3D.Select3D_BVHIndexBuffer_HasPatches(self, *args)


    def Init(self, *args):
        """
        Init(Select3D_BVHIndexBuffer self, Standard_Integer const theNbElems, bool const theHasPatches) -> bool

        Allocates new empty index array

        :type theNbElems: int
        :type theHasPatches: const bool
        :rtype: bool

        """
        return _Select3D.Select3D_BVHIndexBuffer_Init(self, *args)


    def Index(self, *args):
        """
        Index(Select3D_BVHIndexBuffer self, Standard_Integer const theIndex) -> Standard_Integer

        Access index at specified position

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_BVHIndexBuffer_Index(self, *args)


    def PatchSize(self, *args):
        """
        PatchSize(Select3D_BVHIndexBuffer self, Standard_Integer const theIndex) -> Standard_Integer

        Access index at specified position

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_BVHIndexBuffer_PatchSize(self, *args)


    def SetIndex(self, *args):
        """
        SetIndex(Select3D_BVHIndexBuffer self, Standard_Integer const theIndex, Standard_Integer const theValue)
        SetIndex(Select3D_BVHIndexBuffer self, Standard_Integer const theIndex, Standard_Integer const theValue, Standard_Integer const thePatchSize)

        Change index at specified position

        :type theIndex: int
        :type theValue: int
        :type thePatchSize: int

        """
        return _Select3D.Select3D_BVHIndexBuffer_SetIndex(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_BVHIndexBuffer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_BVHIndexBuffer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_BVHIndexBuffer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Select3D.delete_Select3D_BVHIndexBuffer
Select3D_BVHIndexBuffer_swigregister = _Select3D.Select3D_BVHIndexBuffer_swigregister
Select3D_BVHIndexBuffer_swigregister(Select3D_BVHIndexBuffer)

def Select3D_BVHIndexBuffer_get_type_name(*args):
    """
    Select3D_BVHIndexBuffer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_BVHIndexBuffer_get_type_name(*args)

def Select3D_BVHIndexBuffer_get_type_descriptor(*args):
    """
    Select3D_BVHIndexBuffer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_BVHIndexBuffer_get_type_descriptor(*args)

class Select3D_SensitiveSet(Select3D_SensitiveEntity):
    """
    This class is base class for handling overlap detection of complex sensitive
    entities. It provides an interface for building BVH tree for some set of entities.
    Thereby, each iteration of overlap detection is a traverse of BVH tree in fact.
    To use speed-up hierarchical structure in a custom complex sensitive entity, it is
    necessary to make that custom entity a descendant of this class and organize sub-entities
    in some container which allows referencing to elements by index. Note that methods taking
    index as a parameter are used for BVH build and the range of given index is [0; Size() - 1].
    For example of usage see Select3D_SensitiveTriangulation.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveSet
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveSet(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveSet_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveSet_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DefaultBVHBuilder(*args):
        """
        DefaultBVHBuilder() -> Handle_Select3D_BVHBuilder3d

        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Select3D_SensitiveSet_DefaultBVHBuilder(*args)

    DefaultBVHBuilder = staticmethod(DefaultBVHBuilder)

    def SetDefaultBVHBuilder(*args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Select3D_SensitiveSet_SetDefaultBVHBuilder(*args)

    SetDefaultBVHBuilder = staticmethod(SetDefaultBVHBuilder)

    def Size(self, *args):
        """
        Size(Select3D_SensitiveSet self) -> Standard_Integer

        Returns the amount of sub-entities of the complex entity

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveSet_Size(self, *args)


    def Box(self, *args):
        """
        Box(Select3D_SensitiveSet self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of sub-entity with index theIdx in sub-entity list

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveSet_Box(self, *args)


    def Center(self, *args):
        """
        Center(Select3D_SensitiveSet self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Select3D_SensitiveSet_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Select3D_SensitiveSet self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Select3D_SensitiveSet_Swap(self, *args)


    def Matches(self, *args):
        """
        Matches(Select3D_SensitiveSet self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether one or more entities of the set overlap current selecting volume.
        Implements the traverse of BVH tree built for the set

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveSet_Matches(self, *args)


    def BVH(self, *args):
        """
        BVH(Select3D_SensitiveSet self)

        Builds BVH tree for sensitive set.
        Must be called manually to build BVH tree for any sensitive set
        in case if its content was initialized not in a constructor,
        but element by element


        """
        return _Select3D.Select3D_SensitiveSet_BVH(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Select3D_SensitiveSet self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Select3D_SensitiveSet_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Select3D_SensitiveSet self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Select3D_SensitiveSet_MarkDirty(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveSet self) -> BVH_Box_Standard_Real_

        Returns bounding box of the whole set.
        This method should be redefined in Select3D_SensitiveSet descendants

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveSet_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveSet self) -> gp_Pnt

        Returns center of the whole set.
        This method should be redefined in Select3D_SensitiveSet descendants

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveSet_CenterOfGeometry(self, *args)


    def Clear(self, *args):
        """
        Clear(Select3D_SensitiveSet self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Select3D_SensitiveSet_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Select3D_SensitiveSet self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveSet_GetLeafNodeSize(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveSet
Select3D_SensitiveSet_swigregister = _Select3D.Select3D_SensitiveSet_swigregister
Select3D_SensitiveSet_swigregister(Select3D_SensitiveSet)

def Select3D_SensitiveSet_get_type_name(*args):
    """
    Select3D_SensitiveSet_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveSet_get_type_name(*args)

def Select3D_SensitiveSet_get_type_descriptor(*args):
    """
    Select3D_SensitiveSet_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveSet_get_type_descriptor(*args)

def Select3D_SensitiveSet_DefaultBVHBuilder(*args):
    """
    Select3D_SensitiveSet_DefaultBVHBuilder() -> Handle_Select3D_BVHBuilder3d

    Return global instance to default BVH builder.

    :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

    """
    return _Select3D.Select3D_SensitiveSet_DefaultBVHBuilder(*args)

def Select3D_SensitiveSet_SetDefaultBVHBuilder(*args):
    """
    Select3D_SensitiveSet_SetDefaultBVHBuilder(Handle_Select3D_BVHBuilder3d theBuilder)

    Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

    :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

    """
    return _Select3D.Select3D_SensitiveSet_SetDefaultBVHBuilder(*args)

class Select3D_SensitiveTriangulation(Select3D_SensitiveSet):
    """A framework to define selection of a sensitive entity made of a set of triangles."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveTriangulation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveTriangulation(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveTriangulation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveTriangulation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveTriangulation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveTriangulation self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_Poly_Triangulation theTrg, TopLoc_Location theInitLoc, Standard_Boolean const theIsInterior) -> Select3D_SensitiveTriangulation
        __init__(Select3D_SensitiveTriangulation self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_Poly_Triangulation theTrg, TopLoc_Location theInitLoc, Handle_TColStd_HArray1OfInteger theFreeEdges, gp_Pnt theCOG, Standard_Boolean const theIsInterior) -> Select3D_SensitiveTriangulation

        Constructs a sensitive triangulation object defined by
        the owner theOwnerId, the triangulation theTrg,
        the location theInitLoc, the array of free edges
        theFreeEdges, the center of gravity theCOG, and the flag theIsInterior.
        As free edges and the center of gravity do not have
        to be computed later, this syntax reduces computation time.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type theTrg: OCC.wrapper.Poly.Handle_Poly_Triangulation
        :type theInitLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theFreeEdges: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type theCOG: OCC.wrapper.gp.gp_Pnt
        :type theIsInterior: bool

        """
        this = _Select3D.new_Select3D_SensitiveTriangulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitiveTriangulation self) -> Standard_Integer

        Returns the amount of nodes in triangulation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveTriangulation_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveTriangulation self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveTriangulation_GetConnected(self, *args)


    def Triangulation(self, *args):
        """
        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        res = _Select3D.Select3D_SensitiveTriangulation_Triangulation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Size(self, *args):
        """
        Size(Select3D_SensitiveTriangulation self) -> Standard_Integer

        Returns the length of array of triangles or edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveTriangulation_Size(self, *args)


    def Box(self, *args):
        """
        Box(Select3D_SensitiveTriangulation self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of triangle/edge with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveTriangulation_Box(self, *args)


    def Center(self, *args):
        """
        Center(Select3D_SensitiveTriangulation self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of triangle/edge with index theIdx
        in array along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Select3D_SensitiveTriangulation_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Select3D_SensitiveTriangulation self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in array

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Select3D_SensitiveTriangulation_Swap(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveTriangulation self) -> BVH_Box_Standard_Real_

        Returns bounding box of the triangulation. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveTriangulation_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveTriangulation self) -> gp_Pnt

        Returns center of triangulation. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveTriangulation_CenterOfGeometry(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Select3D_SensitiveTriangulation self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveTriangulation_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Select3D_SensitiveTriangulation self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Select3D_SensitiveTriangulation_InvInitLocation(self, *args)


    def GetInitLocation(self, *args):
        """
        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        res = _Select3D.Select3D_SensitiveTriangulation_GetInitLocation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveTriangulation
Select3D_SensitiveTriangulation_swigregister = _Select3D.Select3D_SensitiveTriangulation_swigregister
Select3D_SensitiveTriangulation_swigregister(Select3D_SensitiveTriangulation)

def Select3D_SensitiveTriangulation_get_type_name(*args):
    """
    Select3D_SensitiveTriangulation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveTriangulation_get_type_name(*args)

def Select3D_SensitiveTriangulation_get_type_descriptor(*args):
    """
    Select3D_SensitiveTriangulation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveTriangulation_get_type_descriptor(*args)

class Select3D_InteriorSensitivePointSet(Select3D_SensitiveSet):
    """
    This class handles the selection of arbitrary point set with internal type of sensitivity.
    The main principle is to split the point set given onto planar convex polygons and search
    for the overlap with one or more of them through traverse of BVH tree.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_InteriorSensitivePointSet
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_InteriorSensitivePointSet(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Select3D_InteriorSensitivePointSet self, Handle_SelectBasics_EntityOwner theOwnerId, NCollection_Array1_gp_Pnt thePoints) -> Select3D_InteriorSensitivePointSet

        Splits the given point set thePoints onto planar convex polygons

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type thePoints: OCC.wrapper.TColgp.TColgp_Array1OfPnt

        """
        this = _Select3D.new_Select3D_InteriorSensitivePointSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetPoints(self, *args):
        """
        GetPoints(Select3D_InteriorSensitivePointSet self, Handle_TColgp_HArray1OfPnt theHArrayOfPnt)

        Initializes the given array theHArrayOfPnt by 3d coordinates of vertices of the
        whole point set

        :type theHArrayOfPnt: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_GetPoints(self, *args)


    def Size(self, *args):
        """
        Size(Select3D_InteriorSensitivePointSet self) -> Standard_Integer

        Returns the length of vector of planar convex polygons

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_Size(self, *args)


    def Box(self, *args):
        """
        Box(Select3D_InteriorSensitivePointSet self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of planar convex polygon with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_Box(self, *args)


    def Center(self, *args):
        """
        Center(Select3D_InteriorSensitivePointSet self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of planar convex polygon with index
        theIdx in the vector along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Select3D_InteriorSensitivePointSet self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_Swap(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_InteriorSensitivePointSet self) -> BVH_Box_Standard_Real_

        Returns bounding box of the point set. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_InteriorSensitivePointSet self) -> gp_Pnt

        Returns center of the point set. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_CenterOfGeometry(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_InteriorSensitivePointSet self) -> Standard_Integer

        Returns the amount of points in set

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_NbSubElements(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_InteriorSensitivePointSet_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_InteriorSensitivePointSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Select3D.delete_Select3D_InteriorSensitivePointSet
Select3D_InteriorSensitivePointSet_swigregister = _Select3D.Select3D_InteriorSensitivePointSet_swigregister
Select3D_InteriorSensitivePointSet_swigregister(Select3D_InteriorSensitivePointSet)

def Select3D_InteriorSensitivePointSet_get_type_name(*args):
    """
    Select3D_InteriorSensitivePointSet_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_InteriorSensitivePointSet_get_type_name(*args)

def Select3D_InteriorSensitivePointSet_get_type_descriptor(*args):
    """
    Select3D_InteriorSensitivePointSet_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_InteriorSensitivePointSet_get_type_descriptor(*args)

class Select3D_SensitiveWire(Select3D_SensitiveSet):
    """
    A framework to define selection of a wire owner by an
    elastic wire band.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveWire
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveWire(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveWire self, Handle_SelectBasics_EntityOwner theOwnerId) -> Select3D_SensitiveWire

        Constructs a sensitive wire object defined by the
        owner theOwnerId

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        this = _Select3D.new_Select3D_SensitiveWire(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Add(self, *args):
        """
        Add(Select3D_SensitiveWire self, Handle_Select3D_SensitiveEntity theSensitive)

        Adds the sensitive entity theSensitive to this framework.

        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveWire_Add(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitiveWire self) -> Standard_Integer

        Returns the amount of sub-entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveWire_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveWire self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveWire_GetConnected(self, *args)


    def GetEdges(self, *args):
        """
        returns the sensitive edges stored in this wire

        :rtype: OCC.wrapper.Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity

        """
        res = _Select3D.Select3D_SensitiveWire_GetEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Select3D_SensitiveWire self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets the owner for all entities in wire

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Select3D_SensitiveWire_Set(self, *args)


    def GetLastDetected(self, *args):
        """
        GetLastDetected(Select3D_SensitiveWire self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveWire_GetLastDetected(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveWire self) -> BVH_Box_Standard_Real_

        Returns bounding box of the wire. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveWire_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveWire self) -> gp_Pnt

        Returns center of the wire. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveWire_CenterOfGeometry(self, *args)


    def Size(self, *args):
        """
        Size(Select3D_SensitiveWire self) -> Standard_Integer

        Returns the length of vector of sensitive entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveWire_Size(self, *args)


    def Box(self, *args):
        """
        Box(Select3D_SensitiveWire self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of sensitive entity with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveWire_Box(self, *args)


    def Center(self, *args):
        """
        Center(Select3D_SensitiveWire self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx in
        the vector along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Select3D_SensitiveWire_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Select3D_SensitiveWire self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Select3D_SensitiveWire_Swap(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveWire_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveWire_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveWire_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveWire
Select3D_SensitiveWire_swigregister = _Select3D.Select3D_SensitiveWire_swigregister
Select3D_SensitiveWire_swigregister(Select3D_SensitiveWire)

def Select3D_SensitiveWire_get_type_name(*args):
    """
    Select3D_SensitiveWire_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveWire_get_type_name(*args)

def Select3D_SensitiveWire_get_type_descriptor(*args):
    """
    Select3D_SensitiveWire_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveWire_get_type_descriptor(*args)

class Select3D_SensitiveTriangle(Select3D_SensitiveEntity):
    """
    A framework to define selection of triangles in a view.
    This comes into play in the detection of meshing and triangulation in surfaces.
    In some cases this class can raise Standard_ConstructionError and
    Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveTriangle
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveTriangle(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveTriangle self, Handle_SelectBasics_EntityOwner theOwnerId, gp_Pnt thePnt0, gp_Pnt thePnt1, gp_Pnt thePnt2, Select3D_TypeOfSensitivity const theType=Select3D_TOS_INTERIOR) -> Select3D_SensitiveTriangle

        Constructs a sensitive triangle object defined by the
        owner theOwnerId, the points P1, P2, P3, and the type of sensitivity Sensitivity.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type thePnt0: OCC.wrapper.gp.gp_Pnt
        :type thePnt1: OCC.wrapper.gp.gp_Pnt
        :type thePnt2: OCC.wrapper.gp.gp_Pnt
        :type theType: OCC.wrapper.Select3D.Select3D_TypeOfSensitivity

        """
        this = _Select3D.new_Select3D_SensitiveTriangle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Matches(self, *args):
        """
        Matches(Select3D_SensitiveTriangle self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the triangle overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveTriangle_Matches(self, *args)


    def Points3D(self, *args):
        """
        Points3D(Select3D_SensitiveTriangle self, gp_Pnt thePnt0, gp_Pnt thePnt1, gp_Pnt thePnt2)

        Returns the 3D points P1, P2, P3 used at the time of construction.

        :type thePnt0: OCC.wrapper.gp.gp_Pnt
        :type thePnt1: OCC.wrapper.gp.gp_Pnt
        :type thePnt2: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveTriangle_Points3D(self, *args)


    def Center3D(self, *args):
        """
        Center3D(Select3D_SensitiveTriangle self) -> gp_Pnt

        Returns the center point of the sensitive triangle created at construction time.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveTriangle_Center3D(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveTriangle self) -> Handle_Select3D_SensitiveEntity

        Returns the copy of this

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveTriangle_GetConnected(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveTriangle self) -> BVH_Box_Standard_Real_

        Returns bounding box of the triangle. If location transformation is set, it
        will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveTriangle_BoundingBox(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitiveTriangle self) -> Standard_Integer

        Returns the amount of points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveTriangle_NbSubElements(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveTriangle self) -> gp_Pnt

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveTriangle_CenterOfGeometry(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveTriangle_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveTriangle_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveTriangle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveTriangle
Select3D_SensitiveTriangle_swigregister = _Select3D.Select3D_SensitiveTriangle_swigregister
Select3D_SensitiveTriangle_swigregister(Select3D_SensitiveTriangle)

def Select3D_SensitiveTriangle_get_type_name(*args):
    """
    Select3D_SensitiveTriangle_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveTriangle_get_type_name(*args)

def Select3D_SensitiveTriangle_get_type_descriptor(*args):
    """
    Select3D_SensitiveTriangle_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveTriangle_get_type_descriptor(*args)

class Select3D_SensitivePoint(Select3D_SensitiveEntity):
    """A framework to define sensitive 3D points."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitivePoint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitivePoint(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitivePoint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitivePoint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitivePoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitivePoint self, Handle_SelectBasics_EntityOwner theOwnerId, gp_Pnt thePoint) -> Select3D_SensitivePoint

        Constructs a sensitive point object defined by the
        owner OwnerId and the point Point.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        this = _Select3D.new_Select3D_SensitivePoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitivePoint self) -> Standard_Integer

        Returns the amount of sub-entities in sensitive

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePoint_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitivePoint self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitivePoint_GetConnected(self, *args)


    def Matches(self, *args):
        """
        Matches(Select3D_SensitivePoint self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the point overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitivePoint_Matches(self, *args)


    def Point(self, *args):
        """
        Returns the point used at the time of construction.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Select3D.Select3D_SensitivePoint_Point(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitivePoint self) -> gp_Pnt

        Returns center of point. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitivePoint_CenterOfGeometry(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitivePoint self) -> BVH_Box_Standard_Real_

        Returns bounding box of the point. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitivePoint_BoundingBox(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_SensitivePoint
Select3D_SensitivePoint_swigregister = _Select3D.Select3D_SensitivePoint_swigregister
Select3D_SensitivePoint_swigregister(Select3D_SensitivePoint)

def Select3D_SensitivePoint_get_type_name(*args):
    """
    Select3D_SensitivePoint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitivePoint_get_type_name(*args)

def Select3D_SensitivePoint_get_type_descriptor(*args):
    """
    Select3D_SensitivePoint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitivePoint_get_type_descriptor(*args)

class Select3D_SensitiveBox(Select3D_SensitiveEntity):
    """A framework to define selection by a sensitive box."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveBox
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveBox(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveBox_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveBox_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveBox_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveBox self, Handle_SelectBasics_EntityOwner theOwnerId, Bnd_Box theBox) -> Select3D_SensitiveBox
        __init__(Select3D_SensitiveBox self, Handle_SelectBasics_EntityOwner theOwnerId, Standard_Real const theXMin, Standard_Real const theYMin, Standard_Real const theZMin, Standard_Real const theXMax, Standard_Real const theYMax, Standard_Real const theZMax) -> Select3D_SensitiveBox

        Constructs a sensitive box object defined by the
        owner theOwnerId, and the coordinates theXmin, theYMin, theZMin, theXMax, theYMax, theZMax.
        theXmin, theYMin and theZMin define the minimum point in
        the front lower left hand corner of the box,
        and theXMax, theYMax and theZMax define the maximum
        point in the back upper right hand corner of the box.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type theXMin: float
        :type theYMin: float
        :type theZMin: float
        :type theXMax: float
        :type theYMax: float
        :type theZMax: float

        """
        this = _Select3D.new_Select3D_SensitiveBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitiveBox self) -> Standard_Integer

        Returns the amount of sub-entities in sensitive

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveBox_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveBox self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveBox_GetConnected(self, *args)


    def Matches(self, *args):
        """
        Matches(Select3D_SensitiveBox self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the box overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveBox_Matches(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveBox self) -> gp_Pnt

        Returns center of the box. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveBox_CenterOfGeometry(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveBox self) -> BVH_Box_Standard_Real_

        Returns coordinates of the box. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveBox_BoundingBox(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveBox
Select3D_SensitiveBox_swigregister = _Select3D.Select3D_SensitiveBox_swigregister
Select3D_SensitiveBox_swigregister(Select3D_SensitiveBox)

def Select3D_SensitiveBox_get_type_name(*args):
    """
    Select3D_SensitiveBox_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveBox_get_type_name(*args)

def Select3D_SensitiveBox_get_type_descriptor(*args):
    """
    Select3D_SensitiveBox_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveBox_get_type_descriptor(*args)

class Select3D_SensitivePrimitiveArray(Select3D_SensitiveSet):
    """
    Sensitive for triangulation or point set defined by Primitive Array.
    The primitives can be optionally combined into patches within BVH tree
    to reduce its building time in expense of extra traverse time.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitivePrimitiveArray
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitivePrimitiveArray(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Select3D_SensitivePrimitiveArray self, Handle_SelectBasics_EntityOwner theOwnerId) -> Select3D_SensitivePrimitiveArray

        Constructs an empty sensitive object.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        this = _Select3D.new_Select3D_SensitivePrimitiveArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def PatchSizeMax(self, *args):
        """
        PatchSizeMax(Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return patch size limit (1 by default).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_PatchSizeMax(self, *args)


    def SetPatchSizeMax(self, *args):
        """
        SetPatchSizeMax(Select3D_SensitivePrimitiveArray self, Standard_Integer const thePatchSizeMax)

        Assign patch size limit.
        Should be set before initialization.

        :type thePatchSizeMax: int

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_SetPatchSizeMax(self, *args)


    def PatchDistance(self, *args):
        """
        PatchDistance(Select3D_SensitivePrimitiveArray self) -> float

        Maximum allowed distance between consequential elements in patch (ShortRealLast() by default).
        Has no effect on indexed triangulation.

        :rtype: float

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_PatchDistance(self, *args)


    def SetPatchDistance(self, *args):
        """
        SetPatchDistance(Select3D_SensitivePrimitiveArray self, float const thePatchDistMax)

        Assign patch distance limit.
        Should be set before initialization.

        :type thePatchDistMax: const float

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_SetPatchDistance(self, *args)


    def InitTriangulation(self, *args):
        """
        InitTriangulation(Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, Handle_Graphic3d_IndexBuffer theIndices, TopLoc_Location theInitLoc, Standard_Integer const theIndexLower, Standard_Integer const theIndexUpper, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool
        InitTriangulation(Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, Handle_Graphic3d_IndexBuffer theIndices, TopLoc_Location theInitLoc, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool

        Initialize the sensitive object from triangualtion.
        @param theVerts        attributes array containing Graphic3d_TOA_POS with type Graphic3d_TOD_VEC3 or Graphic3d_TOD_VEC2
        @param theIndices      index array defining triangulation
        @param theInitLoc      location
        @param theToEvalMinMax compute bounding box within initialization
        @param theNbGroups     number of groups to split the vertex array into several parts

        :type theVerts: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer
        :type theIndices: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer
        :type theInitLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theToEvalMinMax: const bool
        :type theNbGroups: int
        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_InitTriangulation(self, *args)


    def InitPoints(self, *args):
        """
        InitPoints(Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, Handle_Graphic3d_IndexBuffer theIndices, TopLoc_Location theInitLoc, Standard_Integer const theIndexLower, Standard_Integer const theIndexUpper, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool
        InitPoints(Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, Handle_Graphic3d_IndexBuffer theIndices, TopLoc_Location theInitLoc, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool
        InitPoints(Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, TopLoc_Location theInitLoc, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool

        Initialize the sensitive object from point set.
        @param theVerts        attributes array containing Graphic3d_TOA_POS with type Graphic3d_TOD_VEC3 or Graphic3d_TOD_VEC2
        @param theInitLoc      location
        @param theToEvalMinMax compute bounding box within initialization
        @param theNbGroups     number of groups to split the vertex array into several parts

        :type theVerts: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer
        :type theInitLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theToEvalMinMax: const bool
        :type theNbGroups: int
        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_InitPoints(self, *args)


    def SetMinMax(self, *args):
        """
        SetMinMax(Select3D_SensitivePrimitiveArray self, double theMinX, double theMinY, double theMinZ, double theMaxX, double theMaxY, double theMaxZ)

        Assign new not transformed bounding box.

        :type theMinX: double
        :type theMinY: double
        :type theMinZ: double
        :type theMaxX: double
        :type theMaxY: double
        :type theMaxZ: double

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_SetMinMax(self, *args)


    def ToDetectElements(self, *args):
        """
        ToDetectElements(Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index of last topmost detected element, TRUE by default.

        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_ToDetectElements(self, *args)


    def SetDetectElements(self, *args):
        """
        SetDetectElements(Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index of last topmost detected element (axis picking).

        :type theToDetect: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_SetDetectElements(self, *args)


    def ToDetectElementMap(self, *args):
        """
        ToDetectElementMap(Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index map of last detected elements, FALSE by default (rectangle selection).

        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_ToDetectElementMap(self, *args)


    def SetDetectElementMap(self, *args):
        """
        SetDetectElementMap(Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index map of last detected elements (rectangle selection).

        :type theToDetect: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_SetDetectElementMap(self, *args)


    def ToDetectNodes(self, *args):
        """
        ToDetectNodes(Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index of last topmost detected node, FALSE by default.

        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_ToDetectNodes(self, *args)


    def SetDetectNodes(self, *args):
        """
        SetDetectNodes(Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index of last topmost detected node (for axis picking).

        :type theToDetect: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_SetDetectNodes(self, *args)


    def ToDetectNodeMap(self, *args):
        """
        ToDetectNodeMap(Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index map of last detected nodes, FALSE by default (rectangle selection).

        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_ToDetectNodeMap(self, *args)


    def SetDetectNodeMap(self, *args):
        """
        SetDetectNodeMap(Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index map of last detected nodes (rectangle selection).

        :type theToDetect: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_SetDetectNodeMap(self, *args)


    def ToDetectEdges(self, *args):
        """
        ToDetectEdges(Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index of last topmost detected edge, FALSE by default.

        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_ToDetectEdges(self, *args)


    def SetDetectEdges(self, *args):
        """
        SetDetectEdges(Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index of last topmost detected edge (axis picking).

        :type theToDetect: bool

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_SetDetectEdges(self, *args)


    def LastDetectedElement(self, *args):
        """
        LastDetectedElement(Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return last topmost detected element or -1 if undefined (axis picking).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_LastDetectedElement(self, *args)


    def LastDetectedElementMap(self, *args):
        """
        Return the index map of last detected elements (rectangle selection).

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HPackedMapOfInteger

        """
        res = _Select3D.Select3D_SensitivePrimitiveArray_LastDetectedElementMap(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LastDetectedNode(self, *args):
        """
        LastDetectedNode(Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return last topmost detected node or -1 if undefined (axis picking).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_LastDetectedNode(self, *args)


    def LastDetectedNodeMap(self, *args):
        """
        Return the index map of last detected nodes (rectangle selection).

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HPackedMapOfInteger

        """
        res = _Select3D.Select3D_SensitivePrimitiveArray_LastDetectedNodeMap(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LastDetectedEdgeNode1(self, *args):
        """
        LastDetectedEdgeNode1(Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return the first node of last topmost detected edge or -1 if undefined (axis picking).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_LastDetectedEdgeNode1(self, *args)


    def LastDetectedEdgeNode2(self, *args):
        """
        LastDetectedEdgeNode2(Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return the second node of last topmost detected edge or -1 if undefined (axis picking).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_LastDetectedEdgeNode2(self, *args)


    def Matches(self, *args):
        """
        Matches(Select3D_SensitivePrimitiveArray self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the sensitive entity is overlapped by current selecting volume.

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_Matches(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitivePrimitiveArray self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_GetConnected(self, *args)


    def Size(self, *args):
        """
        Size(Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Returns the length of array of triangles or edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_Size(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Returns the amount of nodes in triangulation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_NbSubElements(self, *args)


    def Box(self, *args):
        """
        Box(Select3D_SensitivePrimitiveArray self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of triangle/edge with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_Box(self, *args)


    def Center(self, *args):
        """
        Center(Select3D_SensitivePrimitiveArray self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of triangle/edge with index theIdx
        in array along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Select3D_SensitivePrimitiveArray self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in array

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_Swap(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitivePrimitiveArray self) -> BVH_Box_Standard_Real_

        Returns bounding box of the triangulation. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitivePrimitiveArray self) -> gp_Pnt

        Returns center of triangulation. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_CenterOfGeometry(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Select3D_SensitivePrimitiveArray self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Select3D_SensitivePrimitiveArray self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Select3D_SensitivePrimitiveArray self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets the owner for all entities in group

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_Set(self, *args)


    def BVH(self, *args):
        """
        BVH(Select3D_SensitivePrimitiveArray self)

        Builds BVH tree for sensitive set.


        """
        return _Select3D.Select3D_SensitivePrimitiveArray_BVH(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitivePrimitiveArray_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitivePrimitiveArray_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Select3D.delete_Select3D_SensitivePrimitiveArray
Select3D_SensitivePrimitiveArray_swigregister = _Select3D.Select3D_SensitivePrimitiveArray_swigregister
Select3D_SensitivePrimitiveArray_swigregister(Select3D_SensitivePrimitiveArray)

def Select3D_SensitivePrimitiveArray_get_type_name(*args):
    """
    Select3D_SensitivePrimitiveArray_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitivePrimitiveArray_get_type_name(*args)

def Select3D_SensitivePrimitiveArray_get_type_descriptor(*args):
    """
    Select3D_SensitivePrimitiveArray_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitivePrimitiveArray_get_type_descriptor(*args)

class Select3D_SensitivePoly(Select3D_SensitiveSet):
    """
    Sensitive Entity to make a face selectable.
    In some cases this class can raise Standard_ConstructionError and
    Standard_OutOfRange exceptions from its member Select3D_PointData
    myPolyg.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitivePoly
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitivePoly(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitivePoly_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitivePoly_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitivePoly_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitivePoly self, Handle_SelectBasics_EntityOwner theOwnerId, NCollection_Array1_gp_Pnt thePoints, Standard_Boolean const theIsBVHEnabled) -> Select3D_SensitivePoly
        __init__(Select3D_SensitivePoly self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_TColgp_HArray1OfPnt thePoints, Standard_Boolean const theIsBVHEnabled) -> Select3D_SensitivePoly
        __init__(Select3D_SensitivePoly self, Handle_SelectBasics_EntityOwner theOwnerId, Standard_Boolean const theIsBVHEnabled, Standard_Integer const theNbPnts=6) -> Select3D_SensitivePoly

        Constructs the sensitive circle object defined by the
        owner OwnerId, the circle Circle, the Boolean
        FilledCircle and the number of points NbOfPoints.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type theIsBVHEnabled: bool
        :type theNbPnts: int

        """
        this = _Select3D.new_Select3D_SensitivePoly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitivePoly self) -> Standard_Integer

        Returns the amount of segments in poly

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePoly_NbSubElements(self, *args)


    def Points3D(self, *args):
        """
        Points3D(Select3D_SensitivePoly self, Handle_TColgp_HArray1OfPnt theHArrayOfPnt)

        Returns the 3D points of the array used at construction time.

        :type theHArrayOfPnt: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        return _Select3D.Select3D_SensitivePoly_Points3D(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitivePoly self) -> BVH_Box_Standard_Real_

        Returns bounding box of a polygon. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitivePoly_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitivePoly self) -> gp_Pnt

        Returns center of the point set. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitivePoly_CenterOfGeometry(self, *args)


    def Size(self, *args):
        """
        Size(Select3D_SensitivePoly self) -> Standard_Integer

        Returns the amount of segments of the poly

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitivePoly_Size(self, *args)


    def Box(self, *args):
        """
        Box(Select3D_SensitivePoly self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of segment with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitivePoly_Box(self, *args)


    def Center(self, *args):
        """
        Center(Select3D_SensitivePoly self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx in the vector along
        the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Select3D_SensitivePoly_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Select3D_SensitivePoly self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Select3D_SensitivePoly_Swap(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_SensitivePoly
Select3D_SensitivePoly_swigregister = _Select3D.Select3D_SensitivePoly_swigregister
Select3D_SensitivePoly_swigregister(Select3D_SensitivePoly)

def Select3D_SensitivePoly_get_type_name(*args):
    """
    Select3D_SensitivePoly_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitivePoly_get_type_name(*args)

def Select3D_SensitivePoly_get_type_descriptor(*args):
    """
    Select3D_SensitivePoly_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitivePoly_get_type_descriptor(*args)

class Select3D_SensitiveGroup(Select3D_SensitiveSet):
    """
    A framework to define selection of a sensitive group
    by a sensitive entity which is a set of 3D sensitive entities.
    Remark: 2 modes are possible for rectangle selection
    the group is considered selected
    1) when all the entities inside are selected in the rectangle
    2) only one entity inside is selected by the rectangle
    By default the "Match All entities" mode is set.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveGroup
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveGroup(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveGroup_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveGroup_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveGroup self, Handle_SelectBasics_EntityOwner theOwnerId, Standard_Boolean const theIsMustMatchAll) -> Select3D_SensitiveGroup
        __init__(Select3D_SensitiveGroup self, Handle_SelectBasics_EntityOwner theOwnerId, NCollection_Sequence_Handle_Select3D_SensitiveEntity theEntities, Standard_Boolean const theIsMustMatchAll) -> Select3D_SensitiveGroup

        Constructs a sensitive group object defined by the list
        TheList and the entity owner OwnerId. If MatchAll is false, nothing is done.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type theEntities: OCC.wrapper.Select3D.Select3D_EntitySequence
        :type theIsMustMatchAll: bool

        """
        this = _Select3D.new_Select3D_SensitiveGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Entities(self, *args):
        """
        Gets group content

        :rtype: OCC.wrapper.Select3D.Select3D_IndexedMapOfEntity

        """
        res = _Select3D.Select3D_SensitiveGroup_Entities(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SubEntity(self, *args):
        """
        Access entity by index [1, NbSubElements()].

        :type theIndex: int
        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        res = _Select3D.Select3D_SensitiveGroup_SubEntity(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LastDetectedEntity(self, *args):
        """
        LastDetectedEntity(Select3D_SensitiveGroup self) -> Handle_Select3D_SensitiveEntity

        Return last detected entity.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveGroup_LastDetectedEntity(self, *args)


    def LastDetectedEntityIndex(self, *args):
        """
        LastDetectedEntityIndex(Select3D_SensitiveGroup self) -> Standard_Integer

        Return index of last detected entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveGroup_LastDetectedEntityIndex(self, *args)


    def Add(self, *args):
        """
        Add(Select3D_SensitiveGroup self, NCollection_Sequence_Handle_Select3D_SensitiveEntity theEntities)
        Add(Select3D_SensitiveGroup self, Handle_Select3D_SensitiveEntity theSensitive)

        Adds the sensitive entity aSensitive to the non-empty
        sensitive group object created at construction time.

        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveGroup_Add(self, *args)


    def Remove(self, *args):
        """
        Remove(Select3D_SensitiveGroup self, Handle_Select3D_SensitiveEntity theSensitive)

        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveGroup_Remove(self, *args)


    def Clear(self, *args):
        """
        Clear(Select3D_SensitiveGroup self)

        Removes all sensitive entities from the list used at the
        time of construction, or added using the function Add.


        """
        return _Select3D.Select3D_SensitiveGroup_Clear(self, *args)


    def IsIn(self, *args):
        """
        IsIn(Select3D_SensitiveGroup self, Handle_Select3D_SensitiveEntity theSensitive) -> Standard_Boolean

        Returns true if the sensitive entity aSensitive is in
        the list used at the time of construction, or added using the function Add.

        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveGroup_IsIn(self, *args)


    def SetMatchType(self, *args):
        """
        SetMatchType(Select3D_SensitiveGroup self, Standard_Boolean const theIsMustMatchAll)

        Sets the requirement that all sensitive entities in the
        list used at the time of construction, or added using
        the function Add must be matched.

        :type theIsMustMatchAll: bool

        """
        return _Select3D.Select3D_SensitiveGroup_SetMatchType(self, *args)


    def MustMatchAll(self, *args):
        """
        MustMatchAll(Select3D_SensitiveGroup self) -> Standard_Boolean

        Returns true if all sensitive entities in the list used
        at the time of construction, or added using the function Add must be matched.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveGroup_MustMatchAll(self, *args)


    def ToCheckOverlapAll(self, *args):
        """
        ToCheckOverlapAll(Select3D_SensitiveGroup self) -> Standard_Boolean

        Returns TRUE if all sensitive entities should be checked within rectangular/polygonal selection, FALSE by default.
        Can be useful for sensitive entities holding detection results as class property.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveGroup_ToCheckOverlapAll(self, *args)


    def SetCheckOverlapAll(self, *args):
        """
        SetCheckOverlapAll(Select3D_SensitiveGroup self, Standard_Boolean theToCheckAll)

        Returns TRUE if all sensitive entities should be checked within rectangular/polygonal selection, FALSE by default.
        Can be useful for sensitive entities holding detection results as class property.

        :type theToCheckAll: bool

        """
        return _Select3D.Select3D_SensitiveGroup_SetCheckOverlapAll(self, *args)


    def Matches(self, *args):
        """
        Matches(Select3D_SensitiveGroup self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the group overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveGroup_Matches(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitiveGroup self) -> Standard_Integer

        Returns the amount of sub-entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveGroup_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveGroup self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveGroup_GetConnected(self, *args)


    def Set(self, *args):
        """
        Set(Select3D_SensitiveGroup self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets the owner for all entities in group

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Select3D_SensitiveGroup_Set(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveGroup self) -> BVH_Box_Standard_Real_

        Returns bounding box of the group. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveGroup_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveGroup self) -> gp_Pnt

        Returns center of entity set. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveGroup_CenterOfGeometry(self, *args)


    def Box(self, *args):
        """
        Box(Select3D_SensitiveGroup self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of sensitive entity with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveGroup_Box(self, *args)


    def Center(self, *args):
        """
        Center(Select3D_SensitiveGroup self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx in
        the vector along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Select3D_SensitiveGroup_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Select3D_SensitiveGroup self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Select3D_SensitiveGroup_Swap(self, *args)


    def Size(self, *args):
        """
        Size(Select3D_SensitiveGroup self) -> Standard_Integer

        Returns the length of vector of sensitive entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveGroup_Size(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveGroup
Select3D_SensitiveGroup_swigregister = _Select3D.Select3D_SensitiveGroup_swigregister
Select3D_SensitiveGroup_swigregister(Select3D_SensitiveGroup)

def Select3D_SensitiveGroup_get_type_name(*args):
    """
    Select3D_SensitiveGroup_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveGroup_get_type_name(*args)

def Select3D_SensitiveGroup_get_type_descriptor(*args):
    """
    Select3D_SensitiveGroup_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveGroup_get_type_descriptor(*args)

class Select3D_SensitiveCircle(Select3D_SensitivePoly):
    """
    A framework to define sensitive 3D arcs and circles.
    In some cases this class can raise Standard_ConstructionError and
    Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveCircle
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveCircle(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveCircle_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveCircle_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveCircle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveCircle self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_Geom_Circle theCircle, Standard_Boolean const theIsFilled, Standard_Integer const theNbPnts=12) -> Select3D_SensitiveCircle
        __init__(Select3D_SensitiveCircle self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_Geom_Circle theCircle, Standard_Real const theU1, Standard_Real const theU2, Standard_Boolean const theIsFilled, Standard_Integer const theNbPnts=12) -> Select3D_SensitiveCircle
        __init__(Select3D_SensitiveCircle self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_TColgp_HArray1OfPnt thePnts3d, Standard_Boolean const theIsFilled) -> Select3D_SensitiveCircle
        __init__(Select3D_SensitiveCircle self, Handle_SelectBasics_EntityOwner theOwnerId, NCollection_Array1_gp_Pnt thePnts3d, Standard_Boolean const theIsFilled) -> Select3D_SensitiveCircle

        Constructs the sensitive circle object defined by the
        owner theOwnerId, the array of points thePnts3d, and the boolean theIsFilled.
        If the length of thePnts3d is more then 1, the first point of thePnts3d
        must be equal to the last point of thePnts3d.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type thePnts3d: OCC.wrapper.TColgp.TColgp_Array1OfPnt
        :type theIsFilled: bool

        """
        this = _Select3D.new_Select3D_SensitiveCircle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Matches(self, *args):
        """
        Matches(Select3D_SensitiveCircle self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the circle overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveCircle_Matches(self, *args)


    def ArrayBounds(self, *args):
        """
        ArrayBounds(Select3D_SensitiveCircle self)

        :type theLow: int
        :type theUp: int

        """
        return _Select3D.Select3D_SensitiveCircle_ArrayBounds(self, *args)


    def GetPoint3d(self, *args):
        """
        GetPoint3d(Select3D_SensitiveCircle self, Standard_Integer const thePntIdx) -> gp_Pnt

        :type thePntIdx: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveCircle_GetPoint3d(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveCircle self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveCircle_GetConnected(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveCircle self) -> gp_Pnt

        Returns center of the circle. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveCircle_CenterOfGeometry(self, *args)


    def BVH(self, *args):
        """
        BVH(Select3D_SensitiveCircle self)

        Builds BVH tree for a circle's edge segments if needed


        """
        return _Select3D.Select3D_SensitiveCircle_BVH(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveCircle
Select3D_SensitiveCircle_swigregister = _Select3D.Select3D_SensitiveCircle_swigregister
Select3D_SensitiveCircle_swigregister(Select3D_SensitiveCircle)

def Select3D_SensitiveCircle_get_type_name(*args):
    """
    Select3D_SensitiveCircle_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveCircle_get_type_name(*args)

def Select3D_SensitiveCircle_get_type_descriptor(*args):
    """
    Select3D_SensitiveCircle_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveCircle_get_type_descriptor(*args)

class Handle_Select3D_InteriorSensitivePointSet(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_InteriorSensitivePointSet self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_InteriorSensitivePointSet self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_InteriorSensitivePointSet self, Select3D_InteriorSensitivePointSet thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_InteriorSensitivePointSet self, Handle_Select3D_InteriorSensitivePointSet theHandle) -> Handle_Select3D_InteriorSensitivePointSet
        assign(Handle_Select3D_InteriorSensitivePointSet self, Select3D_InteriorSensitivePointSet thePtr) -> Handle_Select3D_InteriorSensitivePointSet
        assign(Handle_Select3D_InteriorSensitivePointSet self, Handle_Select3D_InteriorSensitivePointSet theHandle) -> Handle_Select3D_InteriorSensitivePointSet

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_InteriorSensitivePointSet self) -> Select3D_InteriorSensitivePointSet

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_InteriorSensitivePointSet self) -> Select3D_InteriorSensitivePointSet

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_InteriorSensitivePointSet self) -> Select3D_InteriorSensitivePointSet

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_InteriorSensitivePointSet___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_InteriorSensitivePointSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_InteriorSensitivePointSet_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_InteriorSensitivePointSet

    def GetPoints(self, *args):
        """
        GetPoints(Handle_Select3D_InteriorSensitivePointSet self, Handle_TColgp_HArray1OfPnt theHArrayOfPnt)

        Initializes the given array theHArrayOfPnt by 3d coordinates of vertices of the
        whole point set

        :type theHArrayOfPnt: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_GetPoints(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_InteriorSensitivePointSet self) -> Standard_Integer

        Returns the length of vector of planar convex polygons

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Size(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_InteriorSensitivePointSet self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of planar convex polygon with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_InteriorSensitivePointSet self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of planar convex polygon with index
        theIdx in the vector along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_InteriorSensitivePointSet self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Swap(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_InteriorSensitivePointSet self) -> BVH_Box_Standard_Real_

        Returns bounding box of the point set. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_InteriorSensitivePointSet self) -> gp_Pnt

        Returns center of the point set. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_CenterOfGeometry(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_InteriorSensitivePointSet self) -> Standard_Integer

        Returns the amount of points in set

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_NbSubElements(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_InteriorSensitivePointSet self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_InteriorSensitivePointSet_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_InteriorSensitivePointSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_InteriorSensitivePointSet_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_InteriorSensitivePointSet self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_SetDefaultBVHBuilder(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_InteriorSensitivePointSet self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether one or more entities of the set overlap current selecting volume.
        Implements the traverse of BVH tree built for the set

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Matches(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_InteriorSensitivePointSet self)

        Builds BVH tree for sensitive set.
        Must be called manually to build BVH tree for any sensitive set
        in case if its content was initialized not in a constructor,
        but element by element


        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_BVH(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_InteriorSensitivePointSet self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_InteriorSensitivePointSet self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_MarkDirty(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_InteriorSensitivePointSet self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_InteriorSensitivePointSet self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_GetLeafNodeSize(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_InteriorSensitivePointSet self) -> Handle_Select3D_SensitiveEntity

        Originally this method intended to return sensitive
        entity with new location aLocation, but currently sensitive
        entities do not hold a location, instead HasLocation() and
        Location() methods call corresponding entity owner's methods.
        Thus all entities returned by GetConnected() share the same
        location propagated from corresponding selectable object.
        You must redefine this function for any type of
        sensitive entity which can accept another connected
        sensitive entity.//can be connected to another sensitive entity.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_GetConnected(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_InteriorSensitivePointSet self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_InteriorSensitivePointSet self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_InteriorSensitivePointSet self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_InteriorSensitivePointSet_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_InteriorSensitivePointSet self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_InteriorSensitivePointSet self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_InteriorSensitivePointSet self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_InteriorSensitivePointSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_InteriorSensitivePointSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_InteriorSensitivePointSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_InteriorSensitivePointSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_InteriorSensitivePointSet self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_InteriorSensitivePointSet self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_InteriorSensitivePointSet self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_InteriorSensitivePointSet self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_InteriorSensitivePointSet_DecrementRefCounter(self, *args)

Handle_Select3D_InteriorSensitivePointSet_swigregister = _Select3D.Handle_Select3D_InteriorSensitivePointSet_swigregister
Handle_Select3D_InteriorSensitivePointSet_swigregister(Handle_Select3D_InteriorSensitivePointSet)

def Handle_Select3D_InteriorSensitivePointSet_DownCast(thing):
    return _Select3D.Handle_Select3D_InteriorSensitivePointSet_DownCast(thing)
Handle_Select3D_InteriorSensitivePointSet_DownCast = _Select3D.Handle_Select3D_InteriorSensitivePointSet_DownCast

class Handle_Select3D_BVHIndexBuffer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_BVHIndexBuffer self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_BVHIndexBuffer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_BVHIndexBuffer self, Select3D_BVHIndexBuffer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_BVHIndexBuffer self, Handle_Select3D_BVHIndexBuffer theHandle) -> Handle_Select3D_BVHIndexBuffer
        assign(Handle_Select3D_BVHIndexBuffer self, Select3D_BVHIndexBuffer thePtr) -> Handle_Select3D_BVHIndexBuffer
        assign(Handle_Select3D_BVHIndexBuffer self, Handle_Select3D_BVHIndexBuffer theHandle) -> Handle_Select3D_BVHIndexBuffer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_BVHIndexBuffer self) -> Select3D_BVHIndexBuffer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_BVHIndexBuffer self) -> Select3D_BVHIndexBuffer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_BVHIndexBuffer self) -> Select3D_BVHIndexBuffer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_BVHIndexBuffer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_BVHIndexBuffer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_BVHIndexBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_BVHIndexBuffer_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_BVHIndexBuffer

    def HasPatches(self, *args):
        """
        HasPatches(Handle_Select3D_BVHIndexBuffer self) -> bool

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_HasPatches(self, *args)


    def Init(self, *args):
        """
        Init(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theNbElems, bool const theHasPatches) -> bool

        Allocates new empty index array

        :type theNbElems: int
        :type theHasPatches: const bool
        :rtype: bool

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_Init(self, *args)


    def Index(self, *args):
        """
        Index(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theIndex) -> Standard_Integer

        Access index at specified position

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_Index(self, *args)


    def PatchSize(self, *args):
        """
        PatchSize(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theIndex) -> Standard_Integer

        Access index at specified position

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_PatchSize(self, *args)


    def SetIndex(self, *args):
        """
        SetIndex(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theIndex, Standard_Integer const theValue)
        SetIndex(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theIndex, Standard_Integer const theValue, Standard_Integer const thePatchSize)

        Change index at specified position

        :type theIndex: int
        :type theValue: int
        :type thePatchSize: int

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_SetIndex(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_BVHIndexBuffer self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_BVHIndexBuffer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_BVHIndexBuffer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AttributesArray(self, *args):
        """
        AttributesArray(Handle_Select3D_BVHIndexBuffer self) -> Graphic3d_Attribute const *

        @return array of attributes definitions

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_AttributesArray(self, *args)


    def Attribute(self, *args):
        """
        @return attribute definition

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        res = _Select3D.Handle_Select3D_BVHIndexBuffer_Attribute(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeAttribute(self, *args):
        """
        ChangeAttribute(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theAttribIndex) -> Graphic3d_Attribute &

        @return attribute definition

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_ChangeAttribute(self, *args)


    def AttributeOffset(self, *args):
        """
        AttributeOffset(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theAttribIndex) -> Standard_Integer

        @return data offset to specified attribute

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_AttributeOffset(self, *args)


    def Data(self, *args):
        """
        Data(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theAttribIndex) -> Standard_Byte const
        Data(Handle_Select3D_BVHIndexBuffer self) -> Standard_Byte const *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_Data(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theAttribIndex) -> Standard_Byte
        ChangeData(Handle_Select3D_BVHIndexBuffer self) -> Standard_Byte *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_ChangeData(self, *args)


    def value(self, *args):
        """
        value(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theElem) -> Standard_Byte const *

        Access specified element.

        :type theElem: int
        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_value(self, *args)


    def changeValue(self, *args):
        """
        changeValue(Handle_Select3D_BVHIndexBuffer self, Standard_Integer const theElem) -> Standard_Byte *

        Access specified element.

        :type theElem: int
        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_changeValue(self, *args)


    def release(self, *args):
        """
        release(Handle_Select3D_BVHIndexBuffer self)

        Release buffer.


        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_release(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Select3D_BVHIndexBuffer self) -> bool

        @return true if buffer is not allocated

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_IsEmpty(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_BVHIndexBuffer self) -> Standard_Size

        Return buffer length in bytes.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_Size(self, *args)


    def Allocator(self, *args):
        """
        @return buffer allocator

        :rtype: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        res = _Select3D.Handle_Select3D_BVHIndexBuffer_Allocator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAllocator(self, *args):
        """
        SetAllocator(Handle_Select3D_BVHIndexBuffer self, Handle_NCollection_BaseAllocator theAlloc)

        Assign new buffer allocator with de-allocation of buffer.

        :type theAlloc: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_SetAllocator(self, *args)


    def Allocate(self, *args):
        """
        Allocate(Handle_Select3D_BVHIndexBuffer self, Standard_Size const theSize) -> bool

        Allocate the buffer.
        @param theSize buffer length in bytes

        :type theSize: int
        :rtype: bool

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_Allocate(self, *args)


    def Free(self, *args):
        """
        Free(Handle_Select3D_BVHIndexBuffer self)

        De-allocate buffer.


        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_Free(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_BVHIndexBuffer self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_BVHIndexBuffer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_BVHIndexBuffer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_BVHIndexBuffer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_BVHIndexBuffer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_BVHIndexBuffer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_BVHIndexBuffer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_BVHIndexBuffer self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_BVHIndexBuffer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHIndexBuffer_DecrementRefCounter(self, *args)

Handle_Select3D_BVHIndexBuffer_swigregister = _Select3D.Handle_Select3D_BVHIndexBuffer_swigregister
Handle_Select3D_BVHIndexBuffer_swigregister(Handle_Select3D_BVHIndexBuffer)

def Handle_Select3D_BVHIndexBuffer_DownCast(thing):
    return _Select3D.Handle_Select3D_BVHIndexBuffer_DownCast(thing)
Handle_Select3D_BVHIndexBuffer_DownCast = _Select3D.Handle_Select3D_BVHIndexBuffer_DownCast

class Handle_Select3D_SensitiveBox(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveBox self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveBox_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveBox self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveBox_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveBox self, Select3D_SensitiveBox thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveBox_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveBox self, Handle_Select3D_SensitiveBox theHandle) -> Handle_Select3D_SensitiveBox
        assign(Handle_Select3D_SensitiveBox self, Select3D_SensitiveBox thePtr) -> Handle_Select3D_SensitiveBox
        assign(Handle_Select3D_SensitiveBox self, Handle_Select3D_SensitiveBox theHandle) -> Handle_Select3D_SensitiveBox

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveBox_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveBox self) -> Select3D_SensitiveBox

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveBox_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveBox self) -> Select3D_SensitiveBox

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveBox___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveBox self) -> Select3D_SensitiveBox

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveBox___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveBox___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveBox___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveBox_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveBox

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveBox self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveBox_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveBox_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveBox_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveBox self) -> Standard_Integer

        Returns the amount of sub-entities in sensitive

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveBox_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveBox self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveBox_GetConnected(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveBox self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the box overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveBox_Matches(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveBox self) -> gp_Pnt

        Returns center of the box. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveBox_CenterOfGeometry(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveBox self) -> BVH_Box_Standard_Real_

        Returns coordinates of the box. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveBox_BoundingBox(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveBox self)

        Builds BVH tree for a sensitive if needed


        """
        return _Select3D.Handle_Select3D_SensitiveBox_BVH(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveBox self)

        Clears up all resources and memory


        """
        return _Select3D.Handle_Select3D_SensitiveBox_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveBox self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveBox_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveBox self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveBox_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveBox self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveBox_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveBox_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveBox self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveBox_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveBox self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveBox_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveBox self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveBox_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveBox self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveBox self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveBox_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveBox self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveBox self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveBox_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveBox self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveBox_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveBox self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveBox_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveBox self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveBox_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveBox self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveBox_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveBox_swigregister = _Select3D.Handle_Select3D_SensitiveBox_swigregister
Handle_Select3D_SensitiveBox_swigregister(Handle_Select3D_SensitiveBox)

def Handle_Select3D_SensitiveBox_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveBox_DownCast(thing)
Handle_Select3D_SensitiveBox_DownCast = _Select3D.Handle_Select3D_SensitiveBox_DownCast

class Handle_Select3D_SensitiveTriangulation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveTriangulation self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveTriangulation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveTriangulation self, Select3D_SensitiveTriangulation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveTriangulation self, Handle_Select3D_SensitiveTriangulation theHandle) -> Handle_Select3D_SensitiveTriangulation
        assign(Handle_Select3D_SensitiveTriangulation self, Select3D_SensitiveTriangulation thePtr) -> Handle_Select3D_SensitiveTriangulation
        assign(Handle_Select3D_SensitiveTriangulation self, Handle_Select3D_SensitiveTriangulation theHandle) -> Handle_Select3D_SensitiveTriangulation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveTriangulation self) -> Select3D_SensitiveTriangulation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveTriangulation self) -> Select3D_SensitiveTriangulation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveTriangulation self) -> Select3D_SensitiveTriangulation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveTriangulation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveTriangulation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveTriangulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveTriangulation_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveTriangulation

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveTriangulation self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangulation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangulation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveTriangulation self) -> Standard_Integer

        Returns the amount of nodes in triangulation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveTriangulation self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_GetConnected(self, *args)


    def Triangulation(self, *args):
        """
        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangulation_Triangulation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Size(self, *args):
        """
        Size(Handle_Select3D_SensitiveTriangulation self) -> Standard_Integer

        Returns the length of array of triangles or edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Size(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_SensitiveTriangulation self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of triangle/edge with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_SensitiveTriangulation self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of triangle/edge with index theIdx
        in array along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_SensitiveTriangulation self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in array

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Swap(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveTriangulation self) -> BVH_Box_Standard_Real_

        Returns bounding box of the triangulation. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveTriangulation self) -> gp_Pnt

        Returns center of triangulation. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_CenterOfGeometry(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveTriangulation self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveTriangulation self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_InvInitLocation(self, *args)


    def GetInitLocation(self, *args):
        """
        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangulation_GetInitLocation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangulation_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_SensitiveTriangulation self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_SetDefaultBVHBuilder(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveTriangulation self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether one or more entities of the set overlap current selecting volume.
        Implements the traverse of BVH tree built for the set

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Matches(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveTriangulation self)

        Builds BVH tree for sensitive set.
        Must be called manually to build BVH tree for any sensitive set
        in case if its content was initialized not in a constructor,
        but element by element


        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_BVH(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_SensitiveTriangulation self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_SensitiveTriangulation self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_MarkDirty(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveTriangulation self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_SensitiveTriangulation self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_GetLeafNodeSize(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveTriangulation self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangulation_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveTriangulation self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveTriangulation self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveTriangulation self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveTriangulation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveTriangulation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveTriangulation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveTriangulation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveTriangulation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveTriangulation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveTriangulation self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveTriangulation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangulation_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveTriangulation_swigregister = _Select3D.Handle_Select3D_SensitiveTriangulation_swigregister
Handle_Select3D_SensitiveTriangulation_swigregister(Handle_Select3D_SensitiveTriangulation)

def Handle_Select3D_SensitiveTriangulation_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveTriangulation_DownCast(thing)
Handle_Select3D_SensitiveTriangulation_DownCast = _Select3D.Handle_Select3D_SensitiveTriangulation_DownCast

class Handle_Select3D_SensitivePrimitiveArray(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitivePrimitiveArray self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitivePrimitiveArray self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitivePrimitiveArray self, Select3D_SensitivePrimitiveArray thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitivePrimitiveArray self, Handle_Select3D_SensitivePrimitiveArray theHandle) -> Handle_Select3D_SensitivePrimitiveArray
        assign(Handle_Select3D_SensitivePrimitiveArray self, Select3D_SensitivePrimitiveArray thePtr) -> Handle_Select3D_SensitivePrimitiveArray
        assign(Handle_Select3D_SensitivePrimitiveArray self, Handle_Select3D_SensitivePrimitiveArray theHandle) -> Handle_Select3D_SensitivePrimitiveArray

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitivePrimitiveArray self) -> Select3D_SensitivePrimitiveArray

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitivePrimitiveArray self) -> Select3D_SensitivePrimitiveArray

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitivePrimitiveArray self) -> Select3D_SensitivePrimitiveArray

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitivePrimitiveArray___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitivePrimitiveArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitivePrimitiveArray_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitivePrimitiveArray

    def PatchSizeMax(self, *args):
        """
        PatchSizeMax(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return patch size limit (1 by default).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_PatchSizeMax(self, *args)


    def SetPatchSizeMax(self, *args):
        """
        SetPatchSizeMax(Handle_Select3D_SensitivePrimitiveArray self, Standard_Integer const thePatchSizeMax)

        Assign patch size limit.
        Should be set before initialization.

        :type thePatchSizeMax: int

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetPatchSizeMax(self, *args)


    def PatchDistance(self, *args):
        """
        PatchDistance(Handle_Select3D_SensitivePrimitiveArray self) -> float

        Maximum allowed distance between consequential elements in patch (ShortRealLast() by default).
        Has no effect on indexed triangulation.

        :rtype: float

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_PatchDistance(self, *args)


    def SetPatchDistance(self, *args):
        """
        SetPatchDistance(Handle_Select3D_SensitivePrimitiveArray self, float const thePatchDistMax)

        Assign patch distance limit.
        Should be set before initialization.

        :type thePatchDistMax: const float

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetPatchDistance(self, *args)


    def InitTriangulation(self, *args):
        """
        InitTriangulation(Handle_Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, Handle_Graphic3d_IndexBuffer theIndices, TopLoc_Location theInitLoc, Standard_Integer const theIndexLower, Standard_Integer const theIndexUpper, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool
        InitTriangulation(Handle_Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, Handle_Graphic3d_IndexBuffer theIndices, TopLoc_Location theInitLoc, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool

        Initialize the sensitive object from triangualtion.
        @param theVerts        attributes array containing Graphic3d_TOA_POS with type Graphic3d_TOD_VEC3 or Graphic3d_TOD_VEC2
        @param theIndices      index array defining triangulation
        @param theInitLoc      location
        @param theToEvalMinMax compute bounding box within initialization
        @param theNbGroups     number of groups to split the vertex array into several parts

        :type theVerts: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer
        :type theIndices: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer
        :type theInitLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theToEvalMinMax: const bool
        :type theNbGroups: int
        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_InitTriangulation(self, *args)


    def InitPoints(self, *args):
        """
        InitPoints(Handle_Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, Handle_Graphic3d_IndexBuffer theIndices, TopLoc_Location theInitLoc, Standard_Integer const theIndexLower, Standard_Integer const theIndexUpper, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool
        InitPoints(Handle_Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, Handle_Graphic3d_IndexBuffer theIndices, TopLoc_Location theInitLoc, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool
        InitPoints(Handle_Select3D_SensitivePrimitiveArray self, Handle_Graphic3d_Buffer theVerts, TopLoc_Location theInitLoc, bool const theToEvalMinMax=True, Standard_Integer const theNbGroups=1) -> bool

        Initialize the sensitive object from point set.
        @param theVerts        attributes array containing Graphic3d_TOA_POS with type Graphic3d_TOD_VEC3 or Graphic3d_TOD_VEC2
        @param theInitLoc      location
        @param theToEvalMinMax compute bounding box within initialization
        @param theNbGroups     number of groups to split the vertex array into several parts

        :type theVerts: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer
        :type theInitLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theToEvalMinMax: const bool
        :type theNbGroups: int
        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_InitPoints(self, *args)


    def SetMinMax(self, *args):
        """
        SetMinMax(Handle_Select3D_SensitivePrimitiveArray self, double theMinX, double theMinY, double theMinZ, double theMaxX, double theMaxY, double theMaxZ)

        Assign new not transformed bounding box.

        :type theMinX: double
        :type theMinY: double
        :type theMinZ: double
        :type theMaxX: double
        :type theMaxY: double
        :type theMaxZ: double

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetMinMax(self, *args)


    def ToDetectElements(self, *args):
        """
        ToDetectElements(Handle_Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index of last topmost detected element, TRUE by default.

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_ToDetectElements(self, *args)


    def SetDetectElements(self, *args):
        """
        SetDetectElements(Handle_Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index of last topmost detected element (axis picking).

        :type theToDetect: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetDetectElements(self, *args)


    def ToDetectElementMap(self, *args):
        """
        ToDetectElementMap(Handle_Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index map of last detected elements, FALSE by default (rectangle selection).

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_ToDetectElementMap(self, *args)


    def SetDetectElementMap(self, *args):
        """
        SetDetectElementMap(Handle_Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index map of last detected elements (rectangle selection).

        :type theToDetect: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetDetectElementMap(self, *args)


    def ToDetectNodes(self, *args):
        """
        ToDetectNodes(Handle_Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index of last topmost detected node, FALSE by default.

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_ToDetectNodes(self, *args)


    def SetDetectNodes(self, *args):
        """
        SetDetectNodes(Handle_Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index of last topmost detected node (for axis picking).

        :type theToDetect: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetDetectNodes(self, *args)


    def ToDetectNodeMap(self, *args):
        """
        ToDetectNodeMap(Handle_Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index map of last detected nodes, FALSE by default (rectangle selection).

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_ToDetectNodeMap(self, *args)


    def SetDetectNodeMap(self, *args):
        """
        SetDetectNodeMap(Handle_Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index map of last detected nodes (rectangle selection).

        :type theToDetect: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetDetectNodeMap(self, *args)


    def ToDetectEdges(self, *args):
        """
        ToDetectEdges(Handle_Select3D_SensitivePrimitiveArray self) -> bool

        Return flag to keep index of last topmost detected edge, FALSE by default.

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_ToDetectEdges(self, *args)


    def SetDetectEdges(self, *args):
        """
        SetDetectEdges(Handle_Select3D_SensitivePrimitiveArray self, bool theToDetect)

        Setup keeping of the index of last topmost detected edge (axis picking).

        :type theToDetect: bool

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetDetectEdges(self, *args)


    def LastDetectedElement(self, *args):
        """
        LastDetectedElement(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return last topmost detected element or -1 if undefined (axis picking).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_LastDetectedElement(self, *args)


    def LastDetectedElementMap(self, *args):
        """
        Return the index map of last detected elements (rectangle selection).

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HPackedMapOfInteger

        """
        res = _Select3D.Handle_Select3D_SensitivePrimitiveArray_LastDetectedElementMap(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LastDetectedNode(self, *args):
        """
        LastDetectedNode(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return last topmost detected node or -1 if undefined (axis picking).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_LastDetectedNode(self, *args)


    def LastDetectedNodeMap(self, *args):
        """
        Return the index map of last detected nodes (rectangle selection).

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HPackedMapOfInteger

        """
        res = _Select3D.Handle_Select3D_SensitivePrimitiveArray_LastDetectedNodeMap(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LastDetectedEdgeNode1(self, *args):
        """
        LastDetectedEdgeNode1(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return the first node of last topmost detected edge or -1 if undefined (axis picking).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_LastDetectedEdgeNode1(self, *args)


    def LastDetectedEdgeNode2(self, *args):
        """
        LastDetectedEdgeNode2(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Return the second node of last topmost detected edge or -1 if undefined (axis picking).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_LastDetectedEdgeNode2(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitivePrimitiveArray self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the sensitive entity is overlapped by current selecting volume.

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Matches(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitivePrimitiveArray self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_GetConnected(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Returns the length of array of triangles or edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Size(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Returns the amount of nodes in triangulation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_NbSubElements(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_SensitivePrimitiveArray self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of triangle/edge with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_SensitivePrimitiveArray self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of triangle/edge with index theIdx
        in array along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_SensitivePrimitiveArray self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in array

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Swap(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitivePrimitiveArray self) -> BVH_Box_Standard_Real_

        Returns bounding box of the triangulation. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitivePrimitiveArray self) -> gp_Pnt

        Returns center of triangulation. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_CenterOfGeometry(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitivePrimitiveArray self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitivePrimitiveArray self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets the owner for all entities in group

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Set(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitivePrimitiveArray self)

        Builds BVH tree for sensitive set.


        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_BVH(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitivePrimitiveArray self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitivePrimitiveArray_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitivePrimitiveArray_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_SensitivePrimitiveArray_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_SensitivePrimitiveArray self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetDefaultBVHBuilder(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_SensitivePrimitiveArray self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_SensitivePrimitiveArray self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_MarkDirty(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitivePrimitiveArray self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_GetLeafNodeSize(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitivePrimitiveArray_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitivePrimitiveArray self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitivePrimitiveArray self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitivePrimitiveArray self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitivePrimitiveArray self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitivePrimitiveArray self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitivePrimitiveArray self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitivePrimitiveArray self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePrimitiveArray_DecrementRefCounter(self, *args)

Handle_Select3D_SensitivePrimitiveArray_swigregister = _Select3D.Handle_Select3D_SensitivePrimitiveArray_swigregister
Handle_Select3D_SensitivePrimitiveArray_swigregister(Handle_Select3D_SensitivePrimitiveArray)

def Handle_Select3D_SensitivePrimitiveArray_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitivePrimitiveArray_DownCast(thing)
Handle_Select3D_SensitivePrimitiveArray_DownCast = _Select3D.Handle_Select3D_SensitivePrimitiveArray_DownCast

class Handle_Select3D_SensitivePoint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitivePoint self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitivePoint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitivePoint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePoint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitivePoint self, Select3D_SensitivePoint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitivePoint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitivePoint self, Handle_Select3D_SensitivePoint theHandle) -> Handle_Select3D_SensitivePoint
        assign(Handle_Select3D_SensitivePoint self, Select3D_SensitivePoint thePtr) -> Handle_Select3D_SensitivePoint
        assign(Handle_Select3D_SensitivePoint self, Handle_Select3D_SensitivePoint theHandle) -> Handle_Select3D_SensitivePoint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitivePoint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitivePoint self) -> Select3D_SensitivePoint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitivePoint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitivePoint self) -> Select3D_SensitivePoint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitivePoint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitivePoint self) -> Select3D_SensitivePoint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitivePoint___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitivePoint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitivePoint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitivePoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitivePoint_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitivePoint

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitivePoint self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitivePoint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitivePoint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitivePoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitivePoint self) -> Standard_Integer

        Returns the amount of sub-entities in sensitive

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoint_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitivePoint self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitivePoint_GetConnected(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitivePoint self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the point overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePoint_Matches(self, *args)


    def Point(self, *args):
        """
        Returns the point used at the time of construction.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Select3D.Handle_Select3D_SensitivePoint_Point(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitivePoint self) -> gp_Pnt

        Returns center of point. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitivePoint_CenterOfGeometry(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitivePoint self) -> BVH_Box_Standard_Real_

        Returns bounding box of the point. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitivePoint_BoundingBox(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitivePoint self)

        Builds BVH tree for a sensitive if needed


        """
        return _Select3D.Handle_Select3D_SensitivePoint_BVH(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitivePoint self)

        Clears up all resources and memory


        """
        return _Select3D.Handle_Select3D_SensitivePoint_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitivePoint self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePoint_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitivePoint self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitivePoint_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitivePoint self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitivePoint_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitivePoint_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitivePoint self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoint_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitivePoint self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitivePoint_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitivePoint self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitivePoint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitivePoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitivePoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePoint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitivePoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitivePoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePoint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitivePoint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitivePoint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitivePoint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitivePoint self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitivePoint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitivePoint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoint_DecrementRefCounter(self, *args)

Handle_Select3D_SensitivePoint_swigregister = _Select3D.Handle_Select3D_SensitivePoint_swigregister
Handle_Select3D_SensitivePoint_swigregister(Handle_Select3D_SensitivePoint)

def Handle_Select3D_SensitivePoint_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitivePoint_DownCast(thing)
Handle_Select3D_SensitivePoint_DownCast = _Select3D.Handle_Select3D_SensitivePoint_DownCast

class Handle_Select3D_SensitiveWire(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveWire self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveWire_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveWire self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveWire_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveWire self, Select3D_SensitiveWire thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveWire_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveWire self, Handle_Select3D_SensitiveWire theHandle) -> Handle_Select3D_SensitiveWire
        assign(Handle_Select3D_SensitiveWire self, Select3D_SensitiveWire thePtr) -> Handle_Select3D_SensitiveWire
        assign(Handle_Select3D_SensitiveWire self, Handle_Select3D_SensitiveWire theHandle) -> Handle_Select3D_SensitiveWire

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveWire_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveWire self) -> Select3D_SensitiveWire

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveWire_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveWire self) -> Select3D_SensitiveWire

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveWire___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveWire self) -> Select3D_SensitiveWire

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveWire___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveWire___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveWire___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveWire(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveWire_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveWire

    def Add(self, *args):
        """
        Add(Handle_Select3D_SensitiveWire self, Handle_Select3D_SensitiveEntity theSensitive)

        Adds the sensitive entity theSensitive to this framework.

        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveWire_Add(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveWire self) -> Standard_Integer

        Returns the amount of sub-entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveWire_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveWire self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveWire_GetConnected(self, *args)


    def GetEdges(self, *args):
        """
        returns the sensitive edges stored in this wire

        :rtype: OCC.wrapper.Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity

        """
        res = _Select3D.Handle_Select3D_SensitiveWire_GetEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveWire self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets the owner for all entities in wire

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveWire_Set(self, *args)


    def GetLastDetected(self, *args):
        """
        GetLastDetected(Handle_Select3D_SensitiveWire self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveWire_GetLastDetected(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveWire self) -> BVH_Box_Standard_Real_

        Returns bounding box of the wire. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveWire_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveWire self) -> gp_Pnt

        Returns center of the wire. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveWire_CenterOfGeometry(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_SensitiveWire self) -> Standard_Integer

        Returns the length of vector of sensitive entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveWire_Size(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_SensitiveWire self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of sensitive entity with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveWire_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_SensitiveWire self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx in
        the vector along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_SensitiveWire_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_SensitiveWire self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_SensitiveWire_Swap(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveWire self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveWire_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveWire_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveWire_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_SensitiveWire_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_SensitiveWire self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveWire_SetDefaultBVHBuilder(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveWire self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether one or more entities of the set overlap current selecting volume.
        Implements the traverse of BVH tree built for the set

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveWire_Matches(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveWire self)

        Builds BVH tree for sensitive set.
        Must be called manually to build BVH tree for any sensitive set
        in case if its content was initialized not in a constructor,
        but element by element


        """
        return _Select3D.Handle_Select3D_SensitiveWire_BVH(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_SensitiveWire self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveWire_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_SensitiveWire self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_SensitiveWire_MarkDirty(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveWire self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Handle_Select3D_SensitiveWire_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_SensitiveWire self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveWire_GetLeafNodeSize(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveWire self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveWire_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveWire self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveWire_InvInitLocation(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveWire_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveWire self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveWire_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveWire self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveWire_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveWire self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveWire_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveWire self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveWire self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveWire_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveWire self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveWire self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveWire_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveWire self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveWire_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveWire self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveWire_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveWire self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveWire_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveWire self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveWire_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveWire_swigregister = _Select3D.Handle_Select3D_SensitiveWire_swigregister
Handle_Select3D_SensitiveWire_swigregister(Handle_Select3D_SensitiveWire)

def Handle_Select3D_SensitiveWire_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveWire_DownCast(thing)
Handle_Select3D_SensitiveWire_DownCast = _Select3D.Handle_Select3D_SensitiveWire_DownCast

class Select3D_PointData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Select3D_PointData self, Standard_Integer const theNbPoints) -> Select3D_PointData

        :type theNbPoints: int

        """
        this = _Select3D.new_Select3D_PointData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPnt(self, *args):
        """
        SetPnt(Select3D_PointData self, Standard_Integer const theIndex, Select3D_Pnt const & theValue)
        SetPnt(Select3D_PointData self, Standard_Integer const theIndex, gp_Pnt theValue)

        :type theIndex: int
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_PointData_SetPnt(self, *args)


    def Pnt(self, *args):
        """
        :type theIndex: int
        :rtype: OCC.wrapper.Select3D.Select3D_Pnt

        """
        res = _Select3D.Select3D_PointData_Pnt(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Pnt3d(self, *args):
        """
        Pnt3d(Select3D_PointData self, Standard_Integer const theIndex) -> gp_Pnt

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_PointData_Pnt3d(self, *args)


    def Size(self, *args):
        """
        Size(Select3D_PointData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_PointData_Size(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_PointData
Select3D_PointData_swigregister = _Select3D.Select3D_PointData_swigregister
Select3D_PointData_swigregister(Select3D_PointData)

class NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> NCollection_Array1< opencascade::handle< Select3D_SensitivePrimitiveArray > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> NCollection_Array1< opencascade::handle< Select3D_SensitivePrimitiveArray > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> NCollection_Array1< opencascade::handle< Select3D_SensitivePrimitiveArray > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> NCollection_Array1< opencascade::handle< Select3D_SensitivePrimitiveArray > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _Select3D.new_NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self, Handle_Select3D_SensitivePrimitiveArray theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self, NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray theOther) -> NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self, NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray theOther) -> NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self, NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray theOther) -> NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray
        assign(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self, NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray theOther) -> NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Handle_Select3D_SensitivePrimitiveArray

        @return first element

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self) -> Handle_Select3D_SensitivePrimitiveArray

        @return last element

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self, Standard_Integer const theIndex) -> Handle_Select3D_SensitivePrimitiveArray

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self, Standard_Integer const theIndex, Handle_Select3D_SensitivePrimitiveArray theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_Resize(self, *args)

    __swig_destroy__ = _Select3D.delete_NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray
NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_swigregister = _Select3D.NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_swigregister
NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray_swigregister(NCollection_Array1_Handle_Select3D_SensitivePrimitiveArray)

class Select3D_SensitiveCurve(Select3D_SensitivePoly):
    """
    A framework to define a sensitive 3D curve.
    In some cases this class can raise Standard_ConstructionError and
    Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveCurve(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveCurve self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_Geom_Curve theCurve, Standard_Integer const theNbPnts=17) -> Select3D_SensitiveCurve
        __init__(Select3D_SensitiveCurve self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_TColgp_HArray1OfPnt thePoints) -> Select3D_SensitiveCurve
        __init__(Select3D_SensitiveCurve self, Handle_SelectBasics_EntityOwner theOwnerId, NCollection_Array1_gp_Pnt thePoints) -> Select3D_SensitiveCurve

        Creation of Sensitive Curve from Points.
        Warning : This Method should disappear in the next version...

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type thePoints: OCC.wrapper.TColgp.TColgp_Array1OfPnt

        """
        this = _Select3D.new_Select3D_SensitiveCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveCurve self) -> Handle_Select3D_SensitiveEntity

        Returns the copy of this

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveCurve_GetConnected(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveCurve
Select3D_SensitiveCurve_swigregister = _Select3D.Select3D_SensitiveCurve_swigregister
Select3D_SensitiveCurve_swigregister(Select3D_SensitiveCurve)

def Select3D_SensitiveCurve_get_type_name(*args):
    """
    Select3D_SensitiveCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveCurve_get_type_name(*args)

def Select3D_SensitiveCurve_get_type_descriptor(*args):
    """
    Select3D_SensitiveCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveCurve_get_type_descriptor(*args)

class Select3D_SensitiveSegment(Select3D_SensitiveEntity):
    """
    A framework to define sensitive zones along a segment
    One gives the 3D start and end point
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveSegment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveSegment(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveSegment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveSegment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveSegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveSegment self, Handle_SelectBasics_EntityOwner theOwnerId, gp_Pnt theFirstPnt, gp_Pnt theLastPnt) -> Select3D_SensitiveSegment

        Constructs the sensitive segment object defined by
        the owner theOwnerId, the points theFirstPnt, theLastPnt

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type theFirstPnt: OCC.wrapper.gp.gp_Pnt
        :type theLastPnt: OCC.wrapper.gp.gp_Pnt

        """
        this = _Select3D.new_Select3D_SensitiveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetStartPoint(self, *args):
        """
        SetStartPoint(Select3D_SensitiveSegment self, gp_Pnt thePnt)

        changes the start Point of the Segment;

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveSegment_SetStartPoint(self, *args)


    def SetEndPoint(self, *args):
        """
        SetEndPoint(Select3D_SensitiveSegment self, gp_Pnt thePnt)

        changes the end point of the segment

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveSegment_SetEndPoint(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitiveSegment self) -> Standard_Integer

        Returns the amount of points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveSegment_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveSegment self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveSegment_GetConnected(self, *args)


    def Matches(self, *args):
        """
        Matches(Select3D_SensitiveSegment self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the segment overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveSegment_Matches(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveSegment self) -> gp_Pnt

        Returns center of the segment. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveSegment_CenterOfGeometry(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveSegment self) -> BVH_Box_Standard_Real_

        Returns bounding box of the segment. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveSegment_BoundingBox(self, *args)


    def StartPoint(self, *args):
        """
        gives the 3D start Point of the Segment

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Select3D.Select3D_SensitiveSegment_StartPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EndPoint(self, *args):
        """
        gives the 3D End Point of the Segment

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Select3D.Select3D_SensitiveSegment_EndPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveSegment
Select3D_SensitiveSegment_swigregister = _Select3D.Select3D_SensitiveSegment_swigregister
Select3D_SensitiveSegment_swigregister(Select3D_SensitiveSegment)

def Select3D_SensitiveSegment_get_type_name(*args):
    """
    Select3D_SensitiveSegment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveSegment_get_type_name(*args)

def Select3D_SensitiveSegment_get_type_descriptor(*args):
    """
    Select3D_SensitiveSegment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveSegment_get_type_descriptor(*args)

class Handle_Select3D_SensitiveEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveEntity self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveEntity self, Select3D_SensitiveEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveEntity self, Handle_Select3D_SensitiveEntity theHandle) -> Handle_Select3D_SensitiveEntity
        assign(Handle_Select3D_SensitiveEntity self, Select3D_SensitiveEntity thePtr) -> Handle_Select3D_SensitiveEntity
        assign(Handle_Select3D_SensitiveEntity self, Handle_Select3D_SensitiveEntity theHandle) -> Handle_Select3D_SensitiveEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveEntity self) -> Select3D_SensitiveEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveEntity self) -> Select3D_SensitiveEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveEntity self) -> Select3D_SensitiveEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveEntity___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveEntity_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveEntity

    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveEntity self) -> Handle_Select3D_SensitiveEntity

        Originally this method intended to return sensitive
        entity with new location aLocation, but currently sensitive
        entities do not hold a location, instead HasLocation() and
        Location() methods call corresponding entity owner's methods.
        Thus all entities returned by GetConnected() share the same
        location propagated from corresponding selectable object.
        You must redefine this function for any type of
        sensitive entity which can accept another connected
        sensitive entity.//can be connected to another sensitive entity.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_GetConnected(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveEntity self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether sensitive overlaps current selecting volume.
        Stores minimum depth, distance to center of geometry and
        closest point detected into thePickResult

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_Matches(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Returns the number of sub-entities or elements in
        sensitive entity. Is used to determine if entity is
        complex and needs to pre-build BVH at the creation of
        sensitive entity step or is light-weighted so the tree
        can be build on demand with unnoticeable delay

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_NbSubElements(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveEntity self) -> BVH_Box_Standard_Real_

        Returns bounding box of a sensitive with transformation applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveEntity self) -> gp_Pnt

        Returns center of a sensitive with transformation applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_CenterOfGeometry(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveEntity self)

        Builds BVH tree for a sensitive if needed


        """
        return _Select3D.Handle_Select3D_SensitiveEntity_BVH(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveEntity self)

        Clears up all resources and memory


        """
        return _Select3D.Handle_Select3D_SensitiveEntity_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveEntity self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveEntity self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_InvInitLocation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveEntity self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveEntity self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveEntity_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveEntity self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveEntity self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveEntity self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveEntity_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveEntity_swigregister = _Select3D.Handle_Select3D_SensitiveEntity_swigregister
Handle_Select3D_SensitiveEntity_swigregister(Handle_Select3D_SensitiveEntity)

def Handle_Select3D_SensitiveEntity_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveEntity_DownCast(thing)
Handle_Select3D_SensitiveEntity_DownCast = _Select3D.Handle_Select3D_SensitiveEntity_DownCast


try:
	Select3D_Vec3 = Graphic3d.NCollection_Vec3_Standard_Real
except AttributeError:
	pass # does not exist, probably ignored

class NCollection_Vector_Handle_Select3D_SensitiveEntity(NCollection.NCollection_BaseVector):
    """
    Class NCollection_Vector (dynamic array of objects)

    This class is similar to NCollection_Array1  though the indices always start
    at 0 (in Array1 the first index must be specified)

    The Vector is always created with 0 length. It can be enlarged by two means:
    1. Calling the method Append (val) - then "val" is added to the end of the
    vector (the vector length is incremented)
    2. Calling the method SetValue (i, val)  - if "i" is greater than or equal
    to the current length of the vector,  the vector is enlarged to accomo-
    date this index

    The methods Append and SetValue return  a non-const reference  to the copied
    object  inside  the vector.  This reference  is guaranteed to be valid until
    the vector is destroyed. It can be used to access the vector member directly
    or to pass its address to other data structures.

    The vector iterator remembers the length of the vector  at the moment of the
    creation or initialisation of the iterator.   Therefore the iteration begins
    at index 0  and stops at the index equal to (remembered_length-1).  It is OK
    to enlarge the vector during the iteration.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> NCollection_Vector< opencascade::handle< Select3D_SensitiveEntity > >::iterator

        Returns an iterator pointing to the first element in the vector.

        :rtype: iterator

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> NCollection_Vector< opencascade::handle< Select3D_SensitiveEntity > >::iterator

        Returns an iterator referring to the past-the-end element in the vector.

        :rtype: iterator

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> NCollection_Vector< opencascade::handle< Select3D_SensitiveEntity > >::const_iterator

        Returns a const iterator pointing to the first element in the vector.

        :rtype: const_iterator

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> NCollection_Vector< opencascade::handle< Select3D_SensitiveEntity > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the vector.

        :rtype: const_iterator

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_cend(self, *args)


    def __init__(self, *args):
        """
        Class NCollection_Vector (dynamic array of objects)

        This class is similar to NCollection_Array1  though the indices always start
        at 0 (in Array1 the first index must be specified)

        The Vector is always created with 0 length. It can be enlarged by two means:
        1. Calling the method Append (val) - then "val" is added to the end of the
        vector (the vector length is incremented)
        2. Calling the method SetValue (i, val)  - if "i" is greater than or equal
        to the current length of the vector,  the vector is enlarged to accomo-
        date this index

        The methods Append and SetValue return  a non-const reference  to the copied
        object  inside  the vector.  This reference  is guaranteed to be valid until
        the vector is destroyed. It can be used to access the vector member directly
        or to pass its address to other data structures.

        The vector iterator remembers the length of the vector  at the moment of the
        creation or initialisation of the iterator.   Therefore the iteration begins
        at index 0  and stops at the index equal to (remembered_length-1).  It is OK
        to enlarge the vector during the iteration.
        """
        this = _Select3D.new_NCollection_Vector_Handle_Select3D_SensitiveEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Length(self, *args):
        """
        Length(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Total number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Length(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Total number of items in the vector

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Size(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_IsEmpty(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Vector_Handle_Select3D_SensitiveEntity self, NCollection_Vector_Handle_Select3D_SensitiveEntity theOther, Standard_Boolean const theOwnAllocator)

        Assignment to the collection of the same type

        :type theOther: OCC.wrapper.NCollection.NCollection_Vector
        :type theOwnAllocator: bool

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Vector_Handle_Select3D_SensitiveEntity self, NCollection_Vector_Handle_Select3D_SensitiveEntity theOther) -> NCollection_Vector_Handle_Select3D_SensitiveEntity

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Vector
        :rtype: OCC.wrapper.NCollection.NCollection_Vector

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_assign(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Vector_Handle_Select3D_SensitiveEntity self, Handle_Select3D_SensitiveEntity theValue) -> Handle_Select3D_SensitiveEntity

        Append

        :type theValue: const TheItemType &
        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Append(self, *args)


    def Appended(self, *args):
        """
        Appended(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> Handle_Select3D_SensitiveEntity

        Appends an empty value and returns the reference to it

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Appended(self, *args)


    def Value(self, *args):
        """
        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> Handle_Select3D_SensitiveEntity

        @return first element

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Vector_Handle_Select3D_SensitiveEntity self) -> Handle_Select3D_SensitiveEntity

        @return last element

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_ChangeLast(self, *args)


    def __call__(self, *args):
        """
        Operator() - query the const value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        Operator[] - query the const value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Vector_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex) -> Handle_Select3D_SensitiveEntity

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(NCollection_Vector_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex, Handle_Select3D_SensitiveEntity theValue) -> Handle_Select3D_SensitiveEntity

        SetValue () - set or append a value

        :type theIndex: int
        :type theValue: const TheItemType &
        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_SetValue(self, *args)

    __swig_destroy__ = _Select3D.delete_NCollection_Vector_Handle_Select3D_SensitiveEntity
NCollection_Vector_Handle_Select3D_SensitiveEntity_swigregister = _Select3D.NCollection_Vector_Handle_Select3D_SensitiveEntity_swigregister
NCollection_Vector_Handle_Select3D_SensitiveEntity_swigregister(NCollection_Vector_Handle_Select3D_SensitiveEntity)

class NCollection_Vector_Handle_Select3D_SensitivePoly(NCollection.NCollection_BaseVector):
    """
    Class NCollection_Vector (dynamic array of objects)

    This class is similar to NCollection_Array1  though the indices always start
    at 0 (in Array1 the first index must be specified)

    The Vector is always created with 0 length. It can be enlarged by two means:
    1. Calling the method Append (val) - then "val" is added to the end of the
    vector (the vector length is incremented)
    2. Calling the method SetValue (i, val)  - if "i" is greater than or equal
    to the current length of the vector,  the vector is enlarged to accomo-
    date this index

    The methods Append and SetValue return  a non-const reference  to the copied
    object  inside  the vector.  This reference  is guaranteed to be valid until
    the vector is destroyed. It can be used to access the vector member directly
    or to pass its address to other data structures.

    The vector iterator remembers the length of the vector  at the moment of the
    creation or initialisation of the iterator.   Therefore the iteration begins
    at index 0  and stops at the index equal to (remembered_length-1).  It is OK
    to enlarge the vector during the iteration.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> NCollection_Vector< opencascade::handle< Select3D_SensitivePoly > >::iterator

        Returns an iterator pointing to the first element in the vector.

        :rtype: iterator

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> NCollection_Vector< opencascade::handle< Select3D_SensitivePoly > >::iterator

        Returns an iterator referring to the past-the-end element in the vector.

        :rtype: iterator

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> NCollection_Vector< opencascade::handle< Select3D_SensitivePoly > >::const_iterator

        Returns a const iterator pointing to the first element in the vector.

        :rtype: const_iterator

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> NCollection_Vector< opencascade::handle< Select3D_SensitivePoly > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the vector.

        :rtype: const_iterator

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_cend(self, *args)


    def __init__(self, *args):
        """
        Class NCollection_Vector (dynamic array of objects)

        This class is similar to NCollection_Array1  though the indices always start
        at 0 (in Array1 the first index must be specified)

        The Vector is always created with 0 length. It can be enlarged by two means:
        1. Calling the method Append (val) - then "val" is added to the end of the
        vector (the vector length is incremented)
        2. Calling the method SetValue (i, val)  - if "i" is greater than or equal
        to the current length of the vector,  the vector is enlarged to accomo-
        date this index

        The methods Append and SetValue return  a non-const reference  to the copied
        object  inside  the vector.  This reference  is guaranteed to be valid until
        the vector is destroyed. It can be used to access the vector member directly
        or to pass its address to other data structures.

        The vector iterator remembers the length of the vector  at the moment of the
        creation or initialisation of the iterator.   Therefore the iteration begins
        at index 0  and stops at the index equal to (remembered_length-1).  It is OK
        to enlarge the vector during the iteration.
        """
        this = _Select3D.new_NCollection_Vector_Handle_Select3D_SensitivePoly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Length(self, *args):
        """
        Length(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Total number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Length(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Total number of items in the vector

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Size(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_IsEmpty(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Vector_Handle_Select3D_SensitivePoly self, NCollection_Vector_Handle_Select3D_SensitivePoly theOther, Standard_Boolean const theOwnAllocator)

        Assignment to the collection of the same type

        :type theOther: OCC.wrapper.NCollection.NCollection_Vector
        :type theOwnAllocator: bool

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Vector_Handle_Select3D_SensitivePoly self, NCollection_Vector_Handle_Select3D_SensitivePoly theOther) -> NCollection_Vector_Handle_Select3D_SensitivePoly

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Vector
        :rtype: OCC.wrapper.NCollection.NCollection_Vector

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_assign(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Vector_Handle_Select3D_SensitivePoly self, Handle_Select3D_SensitivePoly theValue) -> Handle_Select3D_SensitivePoly

        Append

        :type theValue: const TheItemType &
        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Append(self, *args)


    def Appended(self, *args):
        """
        Appended(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> Handle_Select3D_SensitivePoly

        Appends an empty value and returns the reference to it

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Appended(self, *args)


    def Value(self, *args):
        """
        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> Handle_Select3D_SensitivePoly

        @return first element

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Vector_Handle_Select3D_SensitivePoly self) -> Handle_Select3D_SensitivePoly

        @return last element

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_ChangeLast(self, *args)


    def __call__(self, *args):
        """
        Operator() - query the const value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        Operator[] - query the const value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Vector_Handle_Select3D_SensitivePoly self, Standard_Integer const theIndex) -> Handle_Select3D_SensitivePoly

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(NCollection_Vector_Handle_Select3D_SensitivePoly self, Standard_Integer const theIndex, Handle_Select3D_SensitivePoly theValue) -> Handle_Select3D_SensitivePoly

        SetValue () - set or append a value

        :type theIndex: int
        :type theValue: const TheItemType &
        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_SetValue(self, *args)

    __swig_destroy__ = _Select3D.delete_NCollection_Vector_Handle_Select3D_SensitivePoly
NCollection_Vector_Handle_Select3D_SensitivePoly_swigregister = _Select3D.NCollection_Vector_Handle_Select3D_SensitivePoly_swigregister
NCollection_Vector_Handle_Select3D_SensitivePoly_swigregister(NCollection_Vector_Handle_Select3D_SensitivePoly)


try:
	Select3D_VectorOfHPoly = NCollection_Vector_Handle_Select3D_SensitivePoly
except NameError:
	pass # does not exist, probably ignored

class Select3D_SensitiveFace(Select3D_SensitiveEntity):
    """
    Sensitive Entity to make a face selectable.
    In some cases this class can raise Standard_ConstructionError and
    Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Select3D_SensitiveFace
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Select3D_SensitiveFace(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Select3D.Select3D_SensitiveFace_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Select3D.Select3D_SensitiveFace_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Select3D_SensitiveFace_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Select3D_SensitiveFace self, Handle_SelectBasics_EntityOwner theOwnerId, NCollection_Array1_gp_Pnt thePoints, Select3D_TypeOfSensitivity const theType) -> Select3D_SensitiveFace
        __init__(Select3D_SensitiveFace self, Handle_SelectBasics_EntityOwner theOwnerId, Handle_TColgp_HArray1OfPnt thePoints, Select3D_TypeOfSensitivity const theType) -> Select3D_SensitiveFace

        Constructs a sensitive face object defined by the
        owner theOwnerId, the array of points thePoints, and
        the sensitivity type theType.
        The array of points is the outer polygon of the geometric face.

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner
        :type thePoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt
        :type theType: OCC.wrapper.Select3D.Select3D_TypeOfSensitivity

        """
        this = _Select3D.new_Select3D_SensitiveFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetPoints(self, *args):
        """
        GetPoints(Select3D_SensitiveFace self, Handle_TColgp_HArray1OfPnt theHArrayOfPnt)

        Initializes the given array theHArrayOfPnt by 3d
        coordinates of vertices of the face

        :type theHArrayOfPnt: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        return _Select3D.Select3D_SensitiveFace_GetPoints(self, *args)


    def Matches(self, *args):
        """
        Matches(Select3D_SensitiveFace self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the face overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Select3D_SensitiveFace_Matches(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Select3D_SensitiveFace self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveFace_GetConnected(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Select3D_SensitiveFace self) -> BVH_Box_Standard_Real_

        Returns bounding box of the face. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Select3D_SensitiveFace_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Select3D_SensitiveFace self) -> gp_Pnt

        Returns center of the face. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Select3D_SensitiveFace_CenterOfGeometry(self, *args)


    def BVH(self, *args):
        """
        BVH(Select3D_SensitiveFace self)

        Builds BVH tree for the face


        """
        return _Select3D.Select3D_SensitiveFace_BVH(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Select3D_SensitiveFace self) -> Standard_Integer

        Returns the amount of sub-entities (points or planar convex polygons)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Select3D_SensitiveFace_NbSubElements(self, *args)

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveFace
Select3D_SensitiveFace_swigregister = _Select3D.Select3D_SensitiveFace_swigregister
Select3D_SensitiveFace_swigregister(Select3D_SensitiveFace)

def Select3D_SensitiveFace_get_type_name(*args):
    """
    Select3D_SensitiveFace_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Select3D.Select3D_SensitiveFace_get_type_name(*args)

def Select3D_SensitiveFace_get_type_descriptor(*args):
    """
    Select3D_SensitiveFace_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Select3D.Select3D_SensitiveFace_get_type_descriptor(*args)

class NCollection_Sequence_Handle_Select3D_SensitiveEntity(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> NCollection_Sequence< opencascade::handle< Select3D_SensitiveEntity > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> NCollection_Sequence< opencascade::handle< Select3D_SensitiveEntity > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> NCollection_Sequence< opencascade::handle< Select3D_SensitiveEntity > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> NCollection_Sequence< opencascade::handle< Select3D_SensitiveEntity > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Select3D.new_NCollection_Sequence_Handle_Select3D_SensitiveEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Select3D_SensitiveEntity self)

        Reverse sequence


        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, NCollection_Sequence_Handle_Select3D_SensitiveEntity theOther) -> NCollection_Sequence_Handle_Select3D_SensitiveEntity

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, NCollection_Sequence_Handle_Select3D_SensitiveEntity theOther) -> NCollection_Sequence_Handle_Select3D_SensitiveEntity

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, NCollection_Sequence< opencascade::handle< Select3D_SensitiveEntity > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Handle_Select3D_SensitiveEntity theItem)
        Append(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, NCollection_Sequence_Handle_Select3D_SensitiveEntity theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Handle_Select3D_SensitiveEntity theItem)
        Prepend(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, NCollection_Sequence_Handle_Select3D_SensitiveEntity theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex, Handle_Select3D_SensitiveEntity theItem)
        InsertBefore(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Select3D_SensitiveEntity theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, NCollection_Sequence< opencascade::handle< Select3D_SensitiveEntity > >::Iterator & thePosition, Handle_Select3D_SensitiveEntity theItem)
        InsertAfter(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Select3D_SensitiveEntity theSeq)
        InsertAfter(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex, Handle_Select3D_SensitiveEntity theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Select3D_SensitiveEntity theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> Handle_Select3D_SensitiveEntity

        First item access

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Select3D_SensitiveEntity self) -> Handle_Select3D_SensitiveEntity

        Last item access

        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex) -> Handle_Select3D_SensitiveEntity

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Select3D_SensitiveEntity self, Standard_Integer const theIndex, Handle_Select3D_SensitiveEntity theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_SetValue(self, *args)


    def __iter__(self):
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity___iter__(self)
    __swig_destroy__ = _Select3D.delete_NCollection_Sequence_Handle_Select3D_SensitiveEntity
NCollection_Sequence_Handle_Select3D_SensitiveEntity_swigregister = _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_swigregister
NCollection_Sequence_Handle_Select3D_SensitiveEntity_swigregister(NCollection_Sequence_Handle_Select3D_SensitiveEntity)

def NCollection_Sequence_Handle_Select3D_SensitiveEntity_delNode(*args):
    """
    NCollection_Sequence_Handle_Select3D_SensitiveEntity_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_delNode(*args)

class NCollection_Sequence_Handle_Select3D_SensitiveEntity_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Select3D.new_NCollection_Sequence_Handle_Select3D_SensitiveEntity_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Select3D.delete_NCollection_Sequence_Handle_Select3D_SensitiveEntity_IteratorHelper

    def __next__(self):
        return _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Select3D_SensitiveEntity_IteratorHelper_swigregister = _Select3D.NCollection_Sequence_Handle_Select3D_SensitiveEntity_IteratorHelper_swigregister
NCollection_Sequence_Handle_Select3D_SensitiveEntity_IteratorHelper_swigregister(NCollection_Sequence_Handle_Select3D_SensitiveEntity_IteratorHelper)


try:
	Select3D_EntitySequence = NCollection_Sequence_Handle_Select3D_SensitiveEntity
except NameError:
	pass # does not exist, probably ignored

class Handle_Select3D_SensitiveTriangle(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveTriangle self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveTriangle self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveTriangle self, Select3D_SensitiveTriangle thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveTriangle self, Handle_Select3D_SensitiveTriangle theHandle) -> Handle_Select3D_SensitiveTriangle
        assign(Handle_Select3D_SensitiveTriangle self, Select3D_SensitiveTriangle thePtr) -> Handle_Select3D_SensitiveTriangle
        assign(Handle_Select3D_SensitiveTriangle self, Handle_Select3D_SensitiveTriangle theHandle) -> Handle_Select3D_SensitiveTriangle

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveTriangle self) -> Select3D_SensitiveTriangle

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveTriangle self) -> Select3D_SensitiveTriangle

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveTriangle self) -> Select3D_SensitiveTriangle

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveTriangle___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveTriangle___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveTriangle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveTriangle_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveTriangle

    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveTriangle self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the triangle overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_Matches(self, *args)


    def Points3D(self, *args):
        """
        Points3D(Handle_Select3D_SensitiveTriangle self, gp_Pnt thePnt0, gp_Pnt thePnt1, gp_Pnt thePnt2)

        Returns the 3D points P1, P2, P3 used at the time of construction.

        :type thePnt0: OCC.wrapper.gp.gp_Pnt
        :type thePnt1: OCC.wrapper.gp.gp_Pnt
        :type thePnt2: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_Points3D(self, *args)


    def Center3D(self, *args):
        """
        Center3D(Handle_Select3D_SensitiveTriangle self) -> gp_Pnt

        Returns the center point of the sensitive triangle created at construction time.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_Center3D(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveTriangle self) -> Handle_Select3D_SensitiveEntity

        Returns the copy of this

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_GetConnected(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveTriangle self) -> BVH_Box_Standard_Real_

        Returns bounding box of the triangle. If location transformation is set, it
        will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_BoundingBox(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveTriangle self) -> Standard_Integer

        Returns the amount of points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_NbSubElements(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveTriangle self) -> gp_Pnt

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_CenterOfGeometry(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveTriangle self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangle_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveTriangle self)

        Builds BVH tree for a sensitive if needed


        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_BVH(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveTriangle self)

        Clears up all resources and memory


        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveTriangle self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveTriangle self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveTriangle self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveTriangle_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveTriangle self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveTriangle self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveTriangle self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveTriangle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveTriangle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveTriangle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveTriangle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveTriangle self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveTriangle self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveTriangle self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveTriangle self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveTriangle_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveTriangle_swigregister = _Select3D.Handle_Select3D_SensitiveTriangle_swigregister
Handle_Select3D_SensitiveTriangle_swigregister(Handle_Select3D_SensitiveTriangle)

def Handle_Select3D_SensitiveTriangle_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveTriangle_DownCast(thing)
Handle_Select3D_SensitiveTriangle_DownCast = _Select3D.Handle_Select3D_SensitiveTriangle_DownCast


try:
	Select3D_BndBox3d = BVH_Box_Standard_Real_
except NameError:
	pass # does not exist, probably ignored

class Handle_Select3D_SensitiveSet(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveSet self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveSet_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveSet self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveSet_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveSet self, Select3D_SensitiveSet thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveSet_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveSet self, Handle_Select3D_SensitiveSet theHandle) -> Handle_Select3D_SensitiveSet
        assign(Handle_Select3D_SensitiveSet self, Select3D_SensitiveSet thePtr) -> Handle_Select3D_SensitiveSet
        assign(Handle_Select3D_SensitiveSet self, Handle_Select3D_SensitiveSet theHandle) -> Handle_Select3D_SensitiveSet

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveSet_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveSet self) -> Select3D_SensitiveSet

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveSet_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveSet self) -> Select3D_SensitiveSet

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveSet___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveSet self) -> Select3D_SensitiveSet

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveSet___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveSet___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveSet___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveSet_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveSet

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveSet self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveSet_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveSet_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_SensitiveSet_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_SensitiveSet self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveSet_SetDefaultBVHBuilder(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_SensitiveSet self) -> Standard_Integer

        Returns the amount of sub-entities of the complex entity

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSet_Size(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_SensitiveSet self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of sub-entity with index theIdx in sub-entity list

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveSet_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_SensitiveSet self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_SensitiveSet_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_SensitiveSet self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_SensitiveSet_Swap(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveSet self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether one or more entities of the set overlap current selecting volume.
        Implements the traverse of BVH tree built for the set

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveSet_Matches(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveSet self)

        Builds BVH tree for sensitive set.
        Must be called manually to build BVH tree for any sensitive set
        in case if its content was initialized not in a constructor,
        but element by element


        """
        return _Select3D.Handle_Select3D_SensitiveSet_BVH(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_SensitiveSet self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveSet_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_SensitiveSet self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_SensitiveSet_MarkDirty(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveSet self) -> BVH_Box_Standard_Real_

        Returns bounding box of the whole set.
        This method should be redefined in Select3D_SensitiveSet descendants

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveSet_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveSet self) -> gp_Pnt

        Returns center of the whole set.
        This method should be redefined in Select3D_SensitiveSet descendants

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveSet_CenterOfGeometry(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveSet self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Handle_Select3D_SensitiveSet_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_SensitiveSet self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSet_GetLeafNodeSize(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveSet self) -> Handle_Select3D_SensitiveEntity

        Originally this method intended to return sensitive
        entity with new location aLocation, but currently sensitive
        entities do not hold a location, instead HasLocation() and
        Location() methods call corresponding entity owner's methods.
        Thus all entities returned by GetConnected() share the same
        location propagated from corresponding selectable object.
        You must redefine this function for any type of
        sensitive entity which can accept another connected
        sensitive entity.//can be connected to another sensitive entity.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveSet_GetConnected(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveSet self) -> Standard_Integer

        Returns the number of sub-entities or elements in
        sensitive entity. Is used to determine if entity is
        complex and needs to pre-build BVH at the creation of
        sensitive entity step or is light-weighted so the tree
        can be build on demand with unnoticeable delay

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSet_NbSubElements(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveSet self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveSet_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveSet self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveSet_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveSet self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveSet_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveSet_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveSet self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSet_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveSet self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveSet_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveSet self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveSet_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveSet_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveSet_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveSet self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveSet_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveSet self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSet_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveSet self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveSet_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveSet self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSet_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveSet_swigregister = _Select3D.Handle_Select3D_SensitiveSet_swigregister
Handle_Select3D_SensitiveSet_swigregister(Handle_Select3D_SensitiveSet)

def Handle_Select3D_SensitiveSet_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveSet_DownCast(thing)
Handle_Select3D_SensitiveSet_DownCast = _Select3D.Handle_Select3D_SensitiveSet_DownCast

class Handle_Select3D_SensitiveCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveCurve self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveCurve self, Select3D_SensitiveCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveCurve self, Handle_Select3D_SensitiveCurve theHandle) -> Handle_Select3D_SensitiveCurve
        assign(Handle_Select3D_SensitiveCurve self, Select3D_SensitiveCurve thePtr) -> Handle_Select3D_SensitiveCurve
        assign(Handle_Select3D_SensitiveCurve self, Handle_Select3D_SensitiveCurve theHandle) -> Handle_Select3D_SensitiveCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveCurve self) -> Select3D_SensitiveCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveCurve self) -> Select3D_SensitiveCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveCurve self) -> Select3D_SensitiveCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveCurve___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveCurve_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveCurve self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveCurve self) -> Handle_Select3D_SensitiveEntity

        Returns the copy of this

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_GetConnected(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveCurve self) -> Standard_Integer

        Returns the amount of segments in poly

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_NbSubElements(self, *args)


    def Points3D(self, *args):
        """
        Points3D(Handle_Select3D_SensitiveCurve self, Handle_TColgp_HArray1OfPnt theHArrayOfPnt)

        Returns the 3D points of the array used at construction time.

        :type theHArrayOfPnt: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Points3D(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveCurve self) -> BVH_Box_Standard_Real_

        Returns bounding box of a polygon. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveCurve self) -> gp_Pnt

        Returns center of the point set. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_CenterOfGeometry(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_SensitiveCurve self) -> Standard_Integer

        Returns the amount of segments of the poly

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Size(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_SensitiveCurve self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of segment with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_SensitiveCurve self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx in the vector along
        the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_SensitiveCurve self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Swap(self, *args)


    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_SensitiveCurve_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_SensitiveCurve self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_SetDefaultBVHBuilder(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveCurve self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether one or more entities of the set overlap current selecting volume.
        Implements the traverse of BVH tree built for the set

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Matches(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveCurve self)

        Builds BVH tree for sensitive set.
        Must be called manually to build BVH tree for any sensitive set
        in case if its content was initialized not in a constructor,
        but element by element


        """
        return _Select3D.Handle_Select3D_SensitiveCurve_BVH(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_SensitiveCurve self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_SensitiveCurve self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_SensitiveCurve_MarkDirty(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveCurve self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_SensitiveCurve self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_GetLeafNodeSize(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveCurve self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveCurve self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveCurve self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveCurve_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveCurve self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveCurve self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveCurve self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveCurve self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCurve_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveCurve_swigregister = _Select3D.Handle_Select3D_SensitiveCurve_swigregister
Handle_Select3D_SensitiveCurve_swigregister(Handle_Select3D_SensitiveCurve)

def Handle_Select3D_SensitiveCurve_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveCurve_DownCast(thing)
Handle_Select3D_SensitiveCurve_DownCast = _Select3D.Handle_Select3D_SensitiveCurve_DownCast

class Handle_Select3D_BVHBuilder3d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_BVHBuilder3d self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_BVHBuilder3d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_BVHBuilder3d self, BVH_Builder< double,3 > * thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_BVHBuilder3d self, Handle_Select3D_BVHBuilder3d theHandle) -> Handle_Select3D_BVHBuilder3d
        assign(Handle_Select3D_BVHBuilder3d self, BVH_Builder< double,3 > const * thePtr) -> Handle_Select3D_BVHBuilder3d
        assign(Handle_Select3D_BVHBuilder3d self, Handle_Select3D_BVHBuilder3d theHandle) -> Handle_Select3D_BVHBuilder3d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_BVHBuilder3d self) -> BVH_Builder< double,3 > *

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_BVHBuilder3d self) -> BVH_Builder< double,3 > *

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_BVHBuilder3d self) -> BVH_Builder< double,3 > &

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_BVHBuilder3d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_BVHBuilder3d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_BVHBuilder3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_BVHBuilder3d_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_BVHBuilder3d

    def Build(self, *args):
        """
        Build(Handle_Select3D_BVHBuilder3d self, BVH_Set< double,3 > * theSet, BVH_Tree< double,3 > * theBVH, BVH_Box_Standard_Real_ theBox)

        Builds BVH using specific algorithm.

        :type theSet: OCC.wrapper.BVH.BVH_Set_T
        :type theBVH: OCC.wrapper.BVH.BVH_Tree_T
        :type theBox: OCC.wrapper.BVH.BVH_Box_T

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_Build(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_BVHBuilder3d self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_BVHBuilder3d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_BVHBuilder3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MaxTreeDepth(self, *args):
        """
        MaxTreeDepth(Handle_Select3D_BVHBuilder3d self) -> Standard_Integer

        Returns the maximum depth of constructed BVH.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_MaxTreeDepth(self, *args)


    def LeafNodeSize(self, *args):
        """
        LeafNodeSize(Handle_Select3D_BVHBuilder3d self) -> Standard_Integer

        Returns the maximum number of sub-elements in the leaf.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_LeafNodeSize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_BVHBuilder3d self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_BVHBuilder3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_BVHBuilder3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_BVHBuilder3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_BVHBuilder3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_BVHBuilder3d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_BVHBuilder3d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_BVHBuilder3d self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_BVHBuilder3d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_BVHBuilder3d_DecrementRefCounter(self, *args)

Handle_Select3D_BVHBuilder3d_swigregister = _Select3D.Handle_Select3D_BVHBuilder3d_swigregister
Handle_Select3D_BVHBuilder3d_swigregister(Handle_Select3D_BVHBuilder3d)

def Handle_Select3D_BVHBuilder3d_DownCast(thing):
    return _Select3D.Handle_Select3D_BVHBuilder3d_DownCast(thing)
Handle_Select3D_BVHBuilder3d_DownCast = _Select3D.Handle_Select3D_BVHBuilder3d_DownCast

class Handle_Select3D_SensitivePoly(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitivePoly self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitivePoly_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitivePoly self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitivePoly_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitivePoly self, Select3D_SensitivePoly thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitivePoly_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitivePoly self, Handle_Select3D_SensitivePoly theHandle) -> Handle_Select3D_SensitivePoly
        assign(Handle_Select3D_SensitivePoly self, Select3D_SensitivePoly thePtr) -> Handle_Select3D_SensitivePoly
        assign(Handle_Select3D_SensitivePoly self, Handle_Select3D_SensitivePoly theHandle) -> Handle_Select3D_SensitivePoly

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitivePoly_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitivePoly self) -> Select3D_SensitivePoly

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitivePoly_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitivePoly self) -> Select3D_SensitivePoly

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitivePoly___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitivePoly self) -> Select3D_SensitivePoly

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitivePoly___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitivePoly___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitivePoly___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitivePoly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitivePoly_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitivePoly

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitivePoly self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitivePoly_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitivePoly_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitivePoly_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Returns the amount of segments in poly

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoly_NbSubElements(self, *args)


    def Points3D(self, *args):
        """
        Points3D(Handle_Select3D_SensitivePoly self, Handle_TColgp_HArray1OfPnt theHArrayOfPnt)

        Returns the 3D points of the array used at construction time.

        :type theHArrayOfPnt: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        return _Select3D.Handle_Select3D_SensitivePoly_Points3D(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitivePoly self) -> BVH_Box_Standard_Real_

        Returns bounding box of a polygon. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitivePoly_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitivePoly self) -> gp_Pnt

        Returns center of the point set. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitivePoly_CenterOfGeometry(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Returns the amount of segments of the poly

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoly_Size(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_SensitivePoly self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of segment with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitivePoly_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_SensitivePoly self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx in the vector along
        the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_SensitivePoly_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_SensitivePoly self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_SensitivePoly_Swap(self, *args)


    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_SensitivePoly_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_SensitivePoly self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitivePoly_SetDefaultBVHBuilder(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitivePoly self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether one or more entities of the set overlap current selecting volume.
        Implements the traverse of BVH tree built for the set

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePoly_Matches(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitivePoly self)

        Builds BVH tree for sensitive set.
        Must be called manually to build BVH tree for any sensitive set
        in case if its content was initialized not in a constructor,
        but element by element


        """
        return _Select3D.Handle_Select3D_SensitivePoly_BVH(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_SensitivePoly self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitivePoly_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_SensitivePoly self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_SensitivePoly_MarkDirty(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitivePoly self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Handle_Select3D_SensitivePoly_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoly_GetLeafNodeSize(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitivePoly self) -> Handle_Select3D_SensitiveEntity

        Originally this method intended to return sensitive
        entity with new location aLocation, but currently sensitive
        entities do not hold a location, instead HasLocation() and
        Location() methods call corresponding entity owner's methods.
        Thus all entities returned by GetConnected() share the same
        location propagated from corresponding selectable object.
        You must redefine this function for any type of
        sensitive entity which can accept another connected
        sensitive entity.//can be connected to another sensitive entity.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitivePoly_GetConnected(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitivePoly self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePoly_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitivePoly self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitivePoly_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitivePoly self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitivePoly_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitivePoly_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitivePoly self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoly_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitivePoly self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitivePoly_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitivePoly self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitivePoly_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitivePoly self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitivePoly self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePoly_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitivePoly self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitivePoly self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitivePoly_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitivePoly self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitivePoly_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoly_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitivePoly self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitivePoly_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitivePoly self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitivePoly_DecrementRefCounter(self, *args)

Handle_Select3D_SensitivePoly_swigregister = _Select3D.Handle_Select3D_SensitivePoly_swigregister
Handle_Select3D_SensitivePoly_swigregister(Handle_Select3D_SensitivePoly)

def Handle_Select3D_SensitivePoly_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitivePoly_DownCast(thing)
Handle_Select3D_SensitivePoly_DownCast = _Select3D.Handle_Select3D_SensitivePoly_DownCast


try:
	Select3D_BVHBuilder3d = BVH_Builder_Standard_Real_
except NameError:
	pass # does not exist, probably ignored

class Handle_Select3D_SensitiveSegment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveSegment self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveSegment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveSegment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveSegment self, Select3D_SensitiveSegment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveSegment self, Handle_Select3D_SensitiveSegment theHandle) -> Handle_Select3D_SensitiveSegment
        assign(Handle_Select3D_SensitiveSegment self, Select3D_SensitiveSegment thePtr) -> Handle_Select3D_SensitiveSegment
        assign(Handle_Select3D_SensitiveSegment self, Handle_Select3D_SensitiveSegment theHandle) -> Handle_Select3D_SensitiveSegment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveSegment self) -> Select3D_SensitiveSegment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveSegment self) -> Select3D_SensitiveSegment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveSegment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveSegment self) -> Select3D_SensitiveSegment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveSegment___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveSegment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveSegment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveSegment_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveSegment

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveSegment self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveSegment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveSegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetStartPoint(self, *args):
        """
        SetStartPoint(Handle_Select3D_SensitiveSegment self, gp_Pnt thePnt)

        changes the start Point of the Segment;

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_SetStartPoint(self, *args)


    def SetEndPoint(self, *args):
        """
        SetEndPoint(Handle_Select3D_SensitiveSegment self, gp_Pnt thePnt)

        changes the end point of the segment

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_SetEndPoint(self, *args)


    def StartPoint(self, *args):
        """
        gives the 3D start Point of the Segment

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Select3D.Handle_Select3D_SensitiveSegment_StartPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EndPoint(self, *args):
        """
        gives the 3D End Point of the Segment

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Select3D.Handle_Select3D_SensitiveSegment_EndPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveSegment self) -> Standard_Integer

        Returns the amount of points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveSegment self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_GetConnected(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveSegment self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the segment overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_Matches(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveSegment self) -> gp_Pnt

        Returns center of the segment. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_CenterOfGeometry(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveSegment self) -> BVH_Box_Standard_Real_

        Returns bounding box of the segment. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_BoundingBox(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveSegment self)

        Builds BVH tree for a sensitive if needed


        """
        return _Select3D.Handle_Select3D_SensitiveSegment_BVH(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveSegment self)

        Clears up all resources and memory


        """
        return _Select3D.Handle_Select3D_SensitiveSegment_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveSegment self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveSegment self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveSegment self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveSegment_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveSegment self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveSegment self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveSegment self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveSegment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveSegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveSegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveSegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveSegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveSegment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveSegment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveSegment self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveSegment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveSegment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveSegment_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveSegment_swigregister = _Select3D.Handle_Select3D_SensitiveSegment_swigregister
Handle_Select3D_SensitiveSegment_swigregister(Handle_Select3D_SensitiveSegment)

def Handle_Select3D_SensitiveSegment_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveSegment_DownCast(thing)
Handle_Select3D_SensitiveSegment_DownCast = _Select3D.Handle_Select3D_SensitiveSegment_DownCast

class Handle_Select3D_SensitiveGroup(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveGroup self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveGroup self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveGroup self, Select3D_SensitiveGroup thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveGroup self, Handle_Select3D_SensitiveGroup theHandle) -> Handle_Select3D_SensitiveGroup
        assign(Handle_Select3D_SensitiveGroup self, Select3D_SensitiveGroup thePtr) -> Handle_Select3D_SensitiveGroup
        assign(Handle_Select3D_SensitiveGroup self, Handle_Select3D_SensitiveGroup theHandle) -> Handle_Select3D_SensitiveGroup

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveGroup self) -> Select3D_SensitiveGroup

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveGroup self) -> Select3D_SensitiveGroup

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveGroup___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveGroup self) -> Select3D_SensitiveGroup

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveGroup___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveGroup___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveGroup___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveGroup_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveGroup

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveGroup self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveGroup_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Entities(self, *args):
        """
        Gets group content

        :rtype: OCC.wrapper.Select3D.Select3D_IndexedMapOfEntity

        """
        res = _Select3D.Handle_Select3D_SensitiveGroup_Entities(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SubEntity(self, *args):
        """
        Access entity by index [1, NbSubElements()].

        :type theIndex: int
        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        res = _Select3D.Handle_Select3D_SensitiveGroup_SubEntity(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LastDetectedEntity(self, *args):
        """
        LastDetectedEntity(Handle_Select3D_SensitiveGroup self) -> Handle_Select3D_SensitiveEntity

        Return last detected entity.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_LastDetectedEntity(self, *args)


    def LastDetectedEntityIndex(self, *args):
        """
        LastDetectedEntityIndex(Handle_Select3D_SensitiveGroup self) -> Standard_Integer

        Return index of last detected entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_LastDetectedEntityIndex(self, *args)


    def Add(self, *args):
        """
        Add(Handle_Select3D_SensitiveGroup self, NCollection_Sequence_Handle_Select3D_SensitiveEntity theEntities)
        Add(Handle_Select3D_SensitiveGroup self, Handle_Select3D_SensitiveEntity theSensitive)

        Adds the sensitive entity aSensitive to the non-empty
        sensitive group object created at construction time.

        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Add(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_Select3D_SensitiveGroup self, Handle_Select3D_SensitiveEntity theSensitive)

        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Remove(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveGroup self)

        Removes all sensitive entities from the list used at the
        time of construction, or added using the function Add.


        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Clear(self, *args)


    def IsIn(self, *args):
        """
        IsIn(Handle_Select3D_SensitiveGroup self, Handle_Select3D_SensitiveEntity theSensitive) -> Standard_Boolean

        Returns true if the sensitive entity aSensitive is in
        the list used at the time of construction, or added using the function Add.

        :type theSensitive: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_IsIn(self, *args)


    def SetMatchType(self, *args):
        """
        SetMatchType(Handle_Select3D_SensitiveGroup self, Standard_Boolean const theIsMustMatchAll)

        Sets the requirement that all sensitive entities in the
        list used at the time of construction, or added using
        the function Add must be matched.

        :type theIsMustMatchAll: bool

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_SetMatchType(self, *args)


    def MustMatchAll(self, *args):
        """
        MustMatchAll(Handle_Select3D_SensitiveGroup self) -> Standard_Boolean

        Returns true if all sensitive entities in the list used
        at the time of construction, or added using the function Add must be matched.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_MustMatchAll(self, *args)


    def ToCheckOverlapAll(self, *args):
        """
        ToCheckOverlapAll(Handle_Select3D_SensitiveGroup self) -> Standard_Boolean

        Returns TRUE if all sensitive entities should be checked within rectangular/polygonal selection, FALSE by default.
        Can be useful for sensitive entities holding detection results as class property.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_ToCheckOverlapAll(self, *args)


    def SetCheckOverlapAll(self, *args):
        """
        SetCheckOverlapAll(Handle_Select3D_SensitiveGroup self, Standard_Boolean theToCheckAll)

        Returns TRUE if all sensitive entities should be checked within rectangular/polygonal selection, FALSE by default.
        Can be useful for sensitive entities holding detection results as class property.

        :type theToCheckAll: bool

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_SetCheckOverlapAll(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveGroup self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the group overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Matches(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveGroup self) -> Standard_Integer

        Returns the amount of sub-entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_NbSubElements(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveGroup self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_GetConnected(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveGroup self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets the owner for all entities in group

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Set(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveGroup self) -> BVH_Box_Standard_Real_

        Returns bounding box of the group. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveGroup self) -> gp_Pnt

        Returns center of entity set. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_CenterOfGeometry(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_SensitiveGroup self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of sensitive entity with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_SensitiveGroup self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx in
        the vector along the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_SensitiveGroup self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Swap(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_SensitiveGroup self) -> Standard_Integer

        Returns the length of vector of sensitive entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Size(self, *args)


    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_SensitiveGroup_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_SensitiveGroup self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_SetDefaultBVHBuilder(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveGroup self)

        Builds BVH tree for sensitive set.
        Must be called manually to build BVH tree for any sensitive set
        in case if its content was initialized not in a constructor,
        but element by element


        """
        return _Select3D.Handle_Select3D_SensitiveGroup_BVH(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_SensitiveGroup self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_SensitiveGroup self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_SensitiveGroup_MarkDirty(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_SensitiveGroup self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_GetLeafNodeSize(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveGroup self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveGroup self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_InvInitLocation(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveGroup_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveGroup self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveGroup self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveGroup self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveGroup_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveGroup self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveGroup self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveGroup self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveGroup_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveGroup self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveGroup_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveGroup_swigregister = _Select3D.Handle_Select3D_SensitiveGroup_swigregister
Handle_Select3D_SensitiveGroup_swigregister(Handle_Select3D_SensitiveGroup)

def Handle_Select3D_SensitiveGroup_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveGroup_DownCast(thing)
Handle_Select3D_SensitiveGroup_DownCast = _Select3D.Handle_Select3D_SensitiveGroup_DownCast

class Handle_Select3D_SensitiveFace(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveFace self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveFace_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveFace self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveFace_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveFace self, Select3D_SensitiveFace thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveFace_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveFace self, Handle_Select3D_SensitiveFace theHandle) -> Handle_Select3D_SensitiveFace
        assign(Handle_Select3D_SensitiveFace self, Select3D_SensitiveFace thePtr) -> Handle_Select3D_SensitiveFace
        assign(Handle_Select3D_SensitiveFace self, Handle_Select3D_SensitiveFace theHandle) -> Handle_Select3D_SensitiveFace

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveFace_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveFace self) -> Select3D_SensitiveFace

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveFace_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveFace self) -> Select3D_SensitiveFace

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveFace___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveFace self) -> Select3D_SensitiveFace

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveFace___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveFace___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveFace___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveFace_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveFace

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveFace self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveFace_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveFace_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveFace_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetPoints(self, *args):
        """
        GetPoints(Handle_Select3D_SensitiveFace self, Handle_TColgp_HArray1OfPnt theHArrayOfPnt)

        Initializes the given array theHArrayOfPnt by 3d
        coordinates of vertices of the face

        :type theHArrayOfPnt: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        return _Select3D.Handle_Select3D_SensitiveFace_GetPoints(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveFace self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the face overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveFace_Matches(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveFace self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveFace_GetConnected(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveFace self) -> BVH_Box_Standard_Real_

        Returns bounding box of the face. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveFace_BoundingBox(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveFace self) -> gp_Pnt

        Returns center of the face. If location transformation
        is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveFace_CenterOfGeometry(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveFace self)

        Builds BVH tree for the face


        """
        return _Select3D.Handle_Select3D_SensitiveFace_BVH(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveFace self) -> Standard_Integer

        Returns the amount of sub-entities (points or planar convex polygons)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveFace_NbSubElements(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveFace self)

        Clears up all resources and memory


        """
        return _Select3D.Handle_Select3D_SensitiveFace_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveFace self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveFace_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveFace self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveFace_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveFace self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveFace_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveFace_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveFace self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveFace_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveFace self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveFace_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveFace self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveFace_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveFace self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveFace self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveFace_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveFace self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveFace self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveFace_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveFace self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveFace_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveFace self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveFace_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveFace self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveFace_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveFace self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveFace_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveFace_swigregister = _Select3D.Handle_Select3D_SensitiveFace_swigregister
Handle_Select3D_SensitiveFace_swigregister(Handle_Select3D_SensitiveFace)

def Handle_Select3D_SensitiveFace_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveFace_DownCast(thing)
Handle_Select3D_SensitiveFace_DownCast = _Select3D.Handle_Select3D_SensitiveFace_DownCast

class Handle_Select3D_SensitiveCircle(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Select3D_SensitiveCircle self)

        Nullify the handle


        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Select3D_SensitiveCircle self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Select3D_SensitiveCircle self, Select3D_SensitiveCircle thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Select3D_SensitiveCircle self, Handle_Select3D_SensitiveCircle theHandle) -> Handle_Select3D_SensitiveCircle
        assign(Handle_Select3D_SensitiveCircle self, Select3D_SensitiveCircle thePtr) -> Handle_Select3D_SensitiveCircle
        assign(Handle_Select3D_SensitiveCircle self, Handle_Select3D_SensitiveCircle theHandle) -> Handle_Select3D_SensitiveCircle

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Select3D_SensitiveCircle self) -> Select3D_SensitiveCircle

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Select3D_SensitiveCircle self) -> Select3D_SensitiveCircle

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Select3D.Handle_Select3D_SensitiveCircle___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Select3D_SensitiveCircle self) -> Select3D_SensitiveCircle

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Select3D.Handle_Select3D_SensitiveCircle___ref__(self, *args)


    def __hash__(self):
        return _Select3D.Handle_Select3D_SensitiveCircle___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Select3D.Handle_Select3D_SensitiveCircle___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Select3D.new_Handle_Select3D_SensitiveCircle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveCircle_DownCast)
    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveCircle

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Select3D_SensitiveCircle self) -> char const *

        :rtype: const char *

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveCircle_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Select3D.Handle_Select3D_SensitiveCircle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Matches(self, *args):
        """
        Matches(Handle_Select3D_SensitiveCircle self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the circle overlaps current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Matches(self, *args)


    def ArrayBounds(self, *args):
        """
        ArrayBounds(Handle_Select3D_SensitiveCircle self)

        :type theLow: int
        :type theUp: int

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_ArrayBounds(self, *args)


    def GetPoint3d(self, *args):
        """
        GetPoint3d(Handle_Select3D_SensitiveCircle self, Standard_Integer const thePntIdx) -> gp_Pnt

        :type thePntIdx: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_GetPoint3d(self, *args)


    def GetConnected(self, *args):
        """
        GetConnected(Handle_Select3D_SensitiveCircle self) -> Handle_Select3D_SensitiveEntity

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_GetConnected(self, *args)


    def CenterOfGeometry(self, *args):
        """
        CenterOfGeometry(Handle_Select3D_SensitiveCircle self) -> gp_Pnt

        Returns center of the circle. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_CenterOfGeometry(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_Select3D_SensitiveCircle self)

        Builds BVH tree for a circle's edge segments if needed


        """
        return _Select3D.Handle_Select3D_SensitiveCircle_BVH(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_Select3D_SensitiveCircle self) -> Standard_Integer

        Returns the amount of segments in poly

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_NbSubElements(self, *args)


    def Points3D(self, *args):
        """
        Points3D(Handle_Select3D_SensitiveCircle self, Handle_TColgp_HArray1OfPnt theHArrayOfPnt)

        Returns the 3D points of the array used at construction time.

        :type theHArrayOfPnt: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Points3D(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Select3D_SensitiveCircle self) -> BVH_Box_Standard_Real_

        Returns bounding box of a polygon. If location
        transformation is set, it will be applied

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_BoundingBox(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Select3D_SensitiveCircle self) -> Standard_Integer

        Returns the amount of segments of the poly

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Size(self, *args)


    def Box(self, *args):
        """
        Box(Handle_Select3D_SensitiveCircle self, Standard_Integer const theIdx) -> BVH_Box_Standard_Real_

        Returns bounding box of segment with index theIdx

        :type theIdx: int
        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Box(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Select3D_SensitiveCircle self, Standard_Integer const theIdx, Standard_Integer const theAxis) -> Standard_Real

        Returns geometry center of sensitive entity index theIdx in the vector along
        the given axis theAxis

        :type theIdx: int
        :type theAxis: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Center(self, *args)


    def Swap(self, *args):
        """
        Swap(Handle_Select3D_SensitiveCircle self, Standard_Integer const theIdx1, Standard_Integer const theIdx2)

        Swaps items with indexes theIdx1 and theIdx2 in the vector

        :type theIdx1: int
        :type theIdx2: int

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Swap(self, *args)


    def DefaultBVHBuilder(self, *args):
        """
        Return global instance to default BVH builder.

        :rtype: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        res = _Select3D.Handle_Select3D_SensitiveCircle_DefaultBVHBuilder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDefaultBVHBuilder(self, *args):
        """
        SetDefaultBVHBuilder(Handle_Select3D_SensitiveCircle self, Handle_Select3D_BVHBuilder3d theBuilder)

        Assign new BVH builder to be used by default for new sensitive sets (assigning is NOT thread-safe!).

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_SetDefaultBVHBuilder(self, *args)


    def SetBuilder(self, *args):
        """
        SetBuilder(Handle_Select3D_SensitiveCircle self, Handle_Select3D_BVHBuilder3d theBuilder)

        Sets the method (builder) used to construct BVH.

        :type theBuilder: OCC.wrapper.Select3D.Handle_Select3D_BVHBuilder3d

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_SetBuilder(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(Handle_Select3D_SensitiveCircle self)

        Marks BVH tree of the set as outdated. It will be rebuild
        at the next call of BVH()


        """
        return _Select3D.Handle_Select3D_SensitiveCircle_MarkDirty(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Select3D_SensitiveCircle self)

        Destroys cross-reference to avoid memory leak


        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Clear(self, *args)


    def GetLeafNodeSize(self, *args):
        """
        GetLeafNodeSize(Handle_Select3D_SensitiveCircle self) -> Standard_Integer

        Returns a number of nodes in 1 BVH leaf

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_GetLeafNodeSize(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_Select3D_SensitiveCircle self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_Select3D_SensitiveCircle self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_InvInitLocation(self, *args)


    def Set(self, *args):
        """
        Set(Handle_Select3D_SensitiveCircle self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _Select3D.Handle_Select3D_SensitiveCircle_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_Select3D_SensitiveCircle self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_Select3D_SensitiveCircle self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_SetSensitivityFactor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Select3D_SensitiveCircle self)

        Memory deallocator for transient classes


        """
        return _Select3D.Handle_Select3D_SensitiveCircle_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Select3D_SensitiveCircle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Select3D_SensitiveCircle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Select3D_SensitiveCircle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Select3D_SensitiveCircle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Select3D_SensitiveCircle self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Select3D_SensitiveCircle self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Select3D_SensitiveCircle self)

        Increments the reference counter of this object


        """
        return _Select3D.Handle_Select3D_SensitiveCircle_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Select3D_SensitiveCircle self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Select3D.Handle_Select3D_SensitiveCircle_DecrementRefCounter(self, *args)

Handle_Select3D_SensitiveCircle_swigregister = _Select3D.Handle_Select3D_SensitiveCircle_swigregister
Handle_Select3D_SensitiveCircle_swigregister(Handle_Select3D_SensitiveCircle)

def Handle_Select3D_SensitiveCircle_DownCast(thing):
    return _Select3D.Handle_Select3D_SensitiveCircle_DownCast(thing)
Handle_Select3D_SensitiveCircle_DownCast = _Select3D.Handle_Select3D_SensitiveCircle_DownCast



