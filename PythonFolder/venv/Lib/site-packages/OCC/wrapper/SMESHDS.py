# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SMESHDS')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SMESHDS')
    _SMESHDS = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SMESHDS', [dirname(__file__)])
        except ImportError:
            import _SMESHDS
            return _SMESHDS
        try:
            _mod = imp.load_module('_SMESHDS', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SMESHDS = swig_import_helper()
    del swig_import_helper
else:
    import _SMESHDS
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SMESHDS.delete_SwigPyIterator

    def value(self):
        return _SMESHDS.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SMESHDS.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SMESHDS.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SMESHDS.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SMESHDS.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SMESHDS.SwigPyIterator_copy(self)

    def next(self):
        return _SMESHDS.SwigPyIterator_next(self)

    def __next__(self):
        return _SMESHDS.SwigPyIterator___next__(self)

    def previous(self):
        return _SMESHDS.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SMESHDS.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SMESHDS.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SMESHDS.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SMESHDS.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SMESHDS.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SMESHDS.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SMESHDS.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SMESHDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SMESHDS.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_SMESHDS.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _SMESHDS.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SMESHDS.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMESHDS.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _SMESHDS.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _SMESHDS.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _SMESHDS.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SMESHDS.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_SMESHDS.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _SMESHDS.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SMESHDS.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMESHDS.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _SMESHDS.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _SMESHDS.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _SMESHDS.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _SMESHDS.ptr_to_number(item)
ptr_to_number = _SMESHDS.ptr_to_number

def HashCode(*args):
    return _SMESHDS.HashCode(*args)
HashCode = _SMESHDS.HashCode

def ptr_equal(a, b):
    return _SMESHDS.ptr_equal(a, b)
ptr_equal = _SMESHDS.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDSAbs
else:
    import SMDSAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMESH
else:
    import SMESH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepMesh
else:
    import BRepMesh
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeAnalysis
else:
    import ShapeAnalysis
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAPI
else:
    import GeomAPI
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Approx
else:
    import Approx
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppCont
else:
    import AppCont
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Extrema
else:
    import Extrema
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MeshVS
else:
    import MeshVS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDS
else:
    import SMDS
del _swig_python_version_info
SMESHDS_AddNode = _SMESHDS.SMESHDS_AddNode
SMESHDS_AddEdge = _SMESHDS.SMESHDS_AddEdge
SMESHDS_AddTriangle = _SMESHDS.SMESHDS_AddTriangle
SMESHDS_AddQuadrangle = _SMESHDS.SMESHDS_AddQuadrangle
SMESHDS_AddPolygon = _SMESHDS.SMESHDS_AddPolygon
SMESHDS_AddTetrahedron = _SMESHDS.SMESHDS_AddTetrahedron
SMESHDS_AddPyramid = _SMESHDS.SMESHDS_AddPyramid
SMESHDS_AddPrism = _SMESHDS.SMESHDS_AddPrism
SMESHDS_AddHexahedron = _SMESHDS.SMESHDS_AddHexahedron
SMESHDS_AddPolyhedron = _SMESHDS.SMESHDS_AddPolyhedron
SMESHDS_RemoveNode = _SMESHDS.SMESHDS_RemoveNode
SMESHDS_RemoveElement = _SMESHDS.SMESHDS_RemoveElement
SMESHDS_MoveNode = _SMESHDS.SMESHDS_MoveNode
SMESHDS_ChangeElementNodes = _SMESHDS.SMESHDS_ChangeElementNodes
SMESHDS_ChangePolyhedronNodes = _SMESHDS.SMESHDS_ChangePolyhedronNodes
SMESHDS_Renumber = _SMESHDS.SMESHDS_Renumber
SMESHDS_ClearAll = _SMESHDS.SMESHDS_ClearAll
SMESHDS_AddQuadEdge = _SMESHDS.SMESHDS_AddQuadEdge
SMESHDS_AddQuadTriangle = _SMESHDS.SMESHDS_AddQuadTriangle
SMESHDS_AddQuadQuadrangle = _SMESHDS.SMESHDS_AddQuadQuadrangle
SMESHDS_AddQuadPolygon = _SMESHDS.SMESHDS_AddQuadPolygon
SMESHDS_AddQuadTetrahedron = _SMESHDS.SMESHDS_AddQuadTetrahedron
SMESHDS_AddQuadPyramid = _SMESHDS.SMESHDS_AddQuadPyramid
SMESHDS_AddQuadPentahedron = _SMESHDS.SMESHDS_AddQuadPentahedron
SMESHDS_AddQuadHexahedron = _SMESHDS.SMESHDS_AddQuadHexahedron
SMESHDS_Add0DElement = _SMESHDS.SMESHDS_Add0DElement
SMESHDS_AddBiQuadTriangle = _SMESHDS.SMESHDS_AddBiQuadTriangle
SMESHDS_AddBiQuadQuadrangle = _SMESHDS.SMESHDS_AddBiQuadQuadrangle
SMESHDS_AddBiQuadPentahedron = _SMESHDS.SMESHDS_AddBiQuadPentahedron
SMESHDS_AddTriQuadHexa = _SMESHDS.SMESHDS_AddTriQuadHexa
SMESHDS_AddHexagonalPrism = _SMESHDS.SMESHDS_AddHexagonalPrism
SMESHDS_AddBall = _SMESHDS.SMESHDS_AddBall
class SMESHDS_GroupBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetMesh(self, *args):
        """
        GetMesh(SMESHDS_GroupBase self) -> SMESHDS_Mesh

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Mesh

        """
        return _SMESHDS.SMESHDS_GroupBase_GetMesh(self, *args)


    def SetType(self, *args):
        """
        SetType(SMESHDS_GroupBase self, SMDSAbs_ElementType theType)

        :type theType: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMESHDS.SMESHDS_GroupBase_SetType(self, *args)


    def GetType(self, *args):
        """
        GetType(SMESHDS_GroupBase self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMESHDS.SMESHDS_GroupBase_GetType(self, *args)


    def SetStoreName(self, *args):
        """
        SetStoreName(SMESHDS_GroupBase self, char const * theName)

        :type theName: const char *

        """
        return _SMESHDS.SMESHDS_GroupBase_SetStoreName(self, *args)


    def GetStoreName(self, *args):
        """
        GetStoreName(SMESHDS_GroupBase self) -> char const *

        :rtype: const char *

        """
        return _SMESHDS.SMESHDS_GroupBase_GetStoreName(self, *args)


    def Extent(self, *args):
        """
        Extent(SMESHDS_GroupBase self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_GroupBase_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(SMESHDS_GroupBase self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_GroupBase_IsEmpty(self, *args)


    def Contains(self, *args):
        """
        Contains(SMESHDS_GroupBase self, int const theID) -> bool
        Contains(SMESHDS_GroupBase self, SMDS_MeshElement elem) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_GroupBase_Contains(self, *args)


    def GetElements(self, *args):
        """
        GetElements(SMESHDS_GroupBase self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMESHDS.SMESHDS_GroupBase_GetElements(self, *args)


    def GetID(self, *args):
        """
        GetID(SMESHDS_GroupBase self) -> int
        GetID(SMESHDS_GroupBase self, int const theIndex) -> int

        :type theIndex: const int
        :rtype: int

        """
        return _SMESHDS.SMESHDS_GroupBase_GetID(self, *args)


    def GetTic(self, *args):
        """
        GetTic(SMESHDS_GroupBase self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_GroupBase_GetTic(self, *args)


    def SetColor(self, *args):
        """
        SetColor(SMESHDS_GroupBase self, Quantity_Color theColor)

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _SMESHDS.SMESHDS_GroupBase_SetColor(self, *args)


    def GetColor(self, *args):
        """
        GetColor(SMESHDS_GroupBase self) -> Quantity_Color

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        return _SMESHDS.SMESHDS_GroupBase_GetColor(self, *args)


    def SetColorGroup(self, *args):
        """
        SetColorGroup(SMESHDS_GroupBase self, int theColorGroup)

        :type theColorGroup: int

        """
        return _SMESHDS.SMESHDS_GroupBase_SetColorGroup(self, *args)


    def GetColorGroup(self, *args):
        """
        GetColorGroup(SMESHDS_GroupBase self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_GroupBase_GetColorGroup(self, *args)


    def SetDefaultColor(*args):
        """
        SetDefaultColor(Quantity_Color theColor)

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _SMESHDS.SMESHDS_GroupBase_SetDefaultColor(*args)

    SetDefaultColor = staticmethod(SetDefaultColor)
    __swig_destroy__ = _SMESHDS.delete_SMESHDS_GroupBase
SMESHDS_GroupBase_swigregister = _SMESHDS.SMESHDS_GroupBase_swigregister
SMESHDS_GroupBase_swigregister(SMESHDS_GroupBase)

def SMESHDS_GroupBase_SetDefaultColor(*args):
    """
    SMESHDS_GroupBase_SetDefaultColor(Quantity_Color theColor)

    :type theColor: OCC.wrapper.Quantity.Quantity_Color

    """
    return _SMESHDS.SMESHDS_GroupBase_SetDefaultColor(*args)

class SMESHDS_SubMesh(SMDS.SMDS_ElementHolder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMESHDS_SubMesh self, SMESHDS_Mesh parent, int index) -> SMESHDS_SubMesh

        :type parent: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :type index: int

        """
        this = _SMESHDS.new_SMESHDS_SubMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsComplexSubmesh(self, *args):
        """
        IsComplexSubmesh(SMESHDS_SubMesh self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_SubMesh_IsComplexSubmesh(self, *args)


    def AddElement(self, *args):
        """
        AddElement(SMESHDS_SubMesh self, SMDS_MeshElement ME)

        :type ME: OCC.wrapper.SMDS.SMDS_MeshElement

        """
        return _SMESHDS.SMESHDS_SubMesh_AddElement(self, *args)


    def RemoveElement(self, *args):
        """
        RemoveElement(SMESHDS_SubMesh self, SMDS_MeshElement ME) -> bool

        :type ME: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_SubMesh_RemoveElement(self, *args)


    def AddNode(self, *args):
        """
        AddNode(SMESHDS_SubMesh self, SMDS_MeshNode ME)

        :type ME: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMESHDS.SMESHDS_SubMesh_AddNode(self, *args)


    def RemoveNode(self, *args):
        """
        RemoveNode(SMESHDS_SubMesh self, SMDS_MeshNode ME) -> bool

        :type ME: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_SubMesh_RemoveNode(self, *args)


    def AddSubMesh(self, *args):
        """
        AddSubMesh(SMESHDS_SubMesh self, SMESHDS_SubMesh theSubMesh)

        :type theSubMesh: OCC.wrapper.SMESHDS.SMESHDS_SubMesh

        """
        return _SMESHDS.SMESHDS_SubMesh_AddSubMesh(self, *args)


    def RemoveSubMesh(self, *args):
        """
        RemoveSubMesh(SMESHDS_SubMesh self, SMESHDS_SubMesh theSubMesh) -> bool

        :type theSubMesh: OCC.wrapper.SMESHDS.SMESHDS_SubMesh
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_SubMesh_RemoveSubMesh(self, *args)


    def RemoveAllSubmeshes(self, *args):
        """RemoveAllSubmeshes(SMESHDS_SubMesh self)"""
        return _SMESHDS.SMESHDS_SubMesh_RemoveAllSubmeshes(self, *args)


    def ContainsSubMesh(self, *args):
        """
        ContainsSubMesh(SMESHDS_SubMesh self, SMESHDS_SubMesh theSubMesh) -> bool

        :type theSubMesh: OCC.wrapper.SMESHDS.SMESHDS_SubMesh
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_SubMesh_ContainsSubMesh(self, *args)


    def NbSubMeshes(self, *args):
        """
        NbSubMeshes(SMESHDS_SubMesh self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_SubMesh_NbSubMeshes(self, *args)


    def GetSubMeshIterator(self, *args):
        """
        GetSubMeshIterator(SMESHDS_SubMesh self) -> SMESHDS_SubMeshIteratorPtr

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_SubMeshIteratorPtr

        """
        return _SMESHDS.SMESHDS_SubMesh_GetSubMeshIterator(self, *args)


    def NbElements(self, *args):
        """
        NbElements(SMESHDS_SubMesh self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_SubMesh_NbElements(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMESHDS_SubMesh self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_SubMesh_NbNodes(self, *args)


    def GetElements(self, *args):
        """
        GetElements(SMESHDS_SubMesh self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMESHDS.SMESHDS_SubMesh_GetElements(self, *args)


    def GetNodes(self, *args):
        """
        GetNodes(SMESHDS_SubMesh self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMESHDS.SMESHDS_SubMesh_GetNodes(self, *args)


    def Contains(self, *args):
        """
        Contains(SMESHDS_SubMesh self, SMDS_MeshElement ME) -> bool

        :type ME: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_SubMesh_Contains(self, *args)


    def IsQuadratic(self, *args):
        """
        IsQuadratic(SMESHDS_SubMesh self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_SubMesh_IsQuadratic(self, *args)


    def Clear(self, *args):
        """Clear(SMESHDS_SubMesh self)"""
        return _SMESHDS.SMESHDS_SubMesh_Clear(self, *args)


    def GetParent(self, *args):
        """
        GetParent(SMESHDS_SubMesh self) -> SMESHDS_Mesh

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Mesh

        """
        return _SMESHDS.SMESHDS_SubMesh_GetParent(self, *args)


    def GetID(self, *args):
        """
        GetID(SMESHDS_SubMesh self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_SubMesh_GetID(self, *args)

    __swig_destroy__ = _SMESHDS.delete_SMESHDS_SubMesh
SMESHDS_SubMesh_swigregister = _SMESHDS.SMESHDS_SubMesh_swigregister
SMESHDS_SubMesh_swigregister(SMESHDS_SubMesh)

class SMESHDS_Hypothesis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PARAM_ALGO = _SMESHDS.SMESHDS_Hypothesis_PARAM_ALGO
    ALGO_0D = _SMESHDS.SMESHDS_Hypothesis_ALGO_0D
    ALGO_1D = _SMESHDS.SMESHDS_Hypothesis_ALGO_1D
    ALGO_2D = _SMESHDS.SMESHDS_Hypothesis_ALGO_2D
    ALGO_3D = _SMESHDS.SMESHDS_Hypothesis_ALGO_3D

    def GetName(self, *args):
        """
        GetName(SMESHDS_Hypothesis self) -> char const *

        :rtype: const char *

        """
        return _SMESHDS.SMESHDS_Hypothesis_GetName(self, *args)


    def GetID(self, *args):
        """
        GetID(SMESHDS_Hypothesis self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Hypothesis_GetID(self, *args)


    def GetType(self, *args):
        """
        GetType(SMESHDS_Hypothesis self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Hypothesis_GetType(self, *args)


    def SaveTo(self, *args):
        """
        SaveTo(SMESHDS_Hypothesis self, std::ostream & save) -> std::ostream &

        :type save: ostream
        :rtype: ostream

        """
        return _SMESHDS.SMESHDS_Hypothesis_SaveTo(self, *args)


    def LoadFrom(self, *args):
        """
        LoadFrom(SMESHDS_Hypothesis self, std::istream & load) -> std::istream &

        :type load: istream
        :rtype: istream

        """
        return _SMESHDS.SMESHDS_Hypothesis_LoadFrom(self, *args)


    def IsSameName(self, *args):
        """
        IsSameName(SMESHDS_Hypothesis self, SMESHDS_Hypothesis other) -> bool

        :type other: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Hypothesis_IsSameName(self, *args)

    def __hash__(self):
        return super().__hash__()

    def __eq__(self, *args):
        """
        __eq__(SMESHDS_Hypothesis self, SMESHDS_Hypothesis other) -> bool

        :type other: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Hypothesis___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(SMESHDS_Hypothesis self, SMESHDS_Hypothesis other) -> bool

        :type other: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Hypothesis___ne__(self, *args)

    __swig_destroy__ = _SMESHDS.delete_SMESHDS_Hypothesis
SMESHDS_Hypothesis_swigregister = _SMESHDS.SMESHDS_Hypothesis_swigregister
SMESHDS_Hypothesis_swigregister(SMESHDS_Hypothesis)

class SMESHDS_Document(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(SMESHDS_Document self) -> SMESHDS_Document"""
        this = _SMESHDS.new_SMESHDS_Document(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NewMesh(self, *args):
        """
        NewMesh(SMESHDS_Document self, bool theIsEmbeddedMode, int MeshID) -> SMESHDS_Mesh

        :type theIsEmbeddedMode: bool
        :type MeshID: int
        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Mesh

        """
        return _SMESHDS.SMESHDS_Document_NewMesh(self, *args)


    def RemoveMesh(self, *args):
        """
        RemoveMesh(SMESHDS_Document self, int MeshID)

        :type MeshID: int

        """
        return _SMESHDS.SMESHDS_Document_RemoveMesh(self, *args)


    def GetMesh(self, *args):
        """
        GetMesh(SMESHDS_Document self, int MeshID) -> SMESHDS_Mesh

        :type MeshID: int
        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Mesh

        """
        return _SMESHDS.SMESHDS_Document_GetMesh(self, *args)


    def AddHypothesis(self, *args):
        """
        AddHypothesis(SMESHDS_Document self, SMESHDS_Hypothesis H)

        :type H: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis

        """
        return _SMESHDS.SMESHDS_Document_AddHypothesis(self, *args)


    def RemoveHypothesis(self, *args):
        """
        RemoveHypothesis(SMESHDS_Document self, int HypID)

        :type HypID: int

        """
        return _SMESHDS.SMESHDS_Document_RemoveHypothesis(self, *args)


    def GetHypothesis(self, *args):
        """
        GetHypothesis(SMESHDS_Document self, int HypID) -> SMESHDS_Hypothesis

        :type HypID: int
        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis

        """
        return _SMESHDS.SMESHDS_Document_GetHypothesis(self, *args)


    def NbMeshes(self, *args):
        """
        NbMeshes(SMESHDS_Document self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Document_NbMeshes(self, *args)


    def NbHypothesis(self, *args):
        """
        NbHypothesis(SMESHDS_Document self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Document_NbHypothesis(self, *args)


    def InitMeshesIterator(self, *args):
        """InitMeshesIterator(SMESHDS_Document self)"""
        return _SMESHDS.SMESHDS_Document_InitMeshesIterator(self, *args)


    def NextMesh(self, *args):
        """
        NextMesh(SMESHDS_Document self) -> SMESHDS_Mesh

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Mesh

        """
        return _SMESHDS.SMESHDS_Document_NextMesh(self, *args)


    def MoreMesh(self, *args):
        """
        MoreMesh(SMESHDS_Document self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Document_MoreMesh(self, *args)


    def InitHypothesisIterator(self, *args):
        """InitHypothesisIterator(SMESHDS_Document self)"""
        return _SMESHDS.SMESHDS_Document_InitHypothesisIterator(self, *args)


    def NextHypothesis(self, *args):
        """
        NextHypothesis(SMESHDS_Document self) -> SMESHDS_Hypothesis

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis

        """
        return _SMESHDS.SMESHDS_Document_NextHypothesis(self, *args)


    def MoreHypothesis(self, *args):
        """
        MoreHypothesis(SMESHDS_Document self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Document_MoreHypothesis(self, *args)

    __swig_destroy__ = _SMESHDS.delete_SMESHDS_Document
SMESHDS_Document_swigregister = _SMESHDS.SMESHDS_Document_swigregister
SMESHDS_Document_swigregister(SMESHDS_Document)

class SMESHDS_Group(SMESHDS_GroupBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMESHDS_Group self, int const theID, SMESHDS_Mesh theMesh, SMDSAbs_ElementType const theType) -> SMESHDS_Group

        :type theID: const int
        :type theMesh: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :type theType: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        this = _SMESHDS.new_SMESHDS_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetType(self, *args):
        """
        SetType(SMESHDS_Group self, SMDSAbs_ElementType theType)

        :type theType: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMESHDS.SMESHDS_Group_SetType(self, *args)


    def Extent(self, *args):
        """
        Extent(SMESHDS_Group self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Group_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(SMESHDS_Group self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Group_IsEmpty(self, *args)


    def Contains(self, *args):
        """
        Contains(SMESHDS_Group self, int const theID) -> bool
        Contains(SMESHDS_Group self, SMDS_MeshElement elem) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Group_Contains(self, *args)


    def GetElements(self, *args):
        """
        GetElements(SMESHDS_Group self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMESHDS.SMESHDS_Group_GetElements(self, *args)


    def GetTic(self, *args):
        """
        GetTic(SMESHDS_Group self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Group_GetTic(self, *args)


    def Add(self, *args):
        """
        Add(SMESHDS_Group self, int const theID) -> bool
        Add(SMESHDS_Group self, SMDS_MeshElement theElem) -> bool

        :type theElem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Group_Add(self, *args)


    def Remove(self, *args):
        """
        Remove(SMESHDS_Group self, int const theID) -> bool

        :type theID: const int
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Group_Remove(self, *args)


    def Clear(self, *args):
        """Clear(SMESHDS_Group self)"""
        return _SMESHDS.SMESHDS_Group_Clear(self, *args)


    def SMDSGroup(self, *args):
        """
        SMDSGroup(SMESHDS_Group self) -> SMDS_MeshGroup

        :rtype: OCC.wrapper.SMDS.SMDS_MeshGroup

        """
        return _SMESHDS.SMESHDS_Group_SMDSGroup(self, *args)

    __swig_destroy__ = _SMESHDS.delete_SMESHDS_Group
SMESHDS_Group_swigregister = _SMESHDS.SMESHDS_Group_swigregister
SMESHDS_Group_swigregister(SMESHDS_Group)

class SMESHDS_Script(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMESHDS_Script self, bool theIsEmbeddedMode) -> SMESHDS_Script

        :type theIsEmbeddedMode: bool

        """
        this = _SMESHDS.new_SMESHDS_Script(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetModified(self, *args):
        """
        SetModified(SMESHDS_Script self, bool theModified)

        :type theModified: bool

        """
        return _SMESHDS.SMESHDS_Script_SetModified(self, *args)


    def IsModified(self, *args):
        """
        IsModified(SMESHDS_Script self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Script_IsModified(self, *args)


    def AddNode(self, *args):
        """
        AddNode(SMESHDS_Script self, int NewNodeID, double x, double y, double z)

        :type NewNodeID: int
        :type x: double
        :type y: double
        :type z: double

        """
        return _SMESHDS.SMESHDS_Script_AddNode(self, *args)


    def Add0DElement(self, *args):
        """
        Add0DElement(SMESHDS_Script self, int New0DElementID, int idnode)

        :type New0DElementID: int
        :type idnode: int

        """
        return _SMESHDS.SMESHDS_Script_Add0DElement(self, *args)


    def AddPolygonalFace(self, *args):
        """
        AddPolygonalFace(SMESHDS_Script self, int const NewFaceID, std::vector< int,std::allocator< int > > const & nodes_ids)

        :type NewFaceID: const int
        :type nodes_ids: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_Script_AddPolygonalFace(self, *args)


    def AddQuadPolygonalFace(self, *args):
        """
        AddQuadPolygonalFace(SMESHDS_Script self, int const NewFaceID, std::vector< int,std::allocator< int > > const & nodes_ids)

        :type NewFaceID: const int
        :type nodes_ids: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_Script_AddQuadPolygonalFace(self, *args)


    def AddPolyhedralVolume(self, *args):
        """
        AddPolyhedralVolume(SMESHDS_Script self, int const NewVolID, std::vector< int,std::allocator< int > > const & nodes_ids, std::vector< int,std::allocator< int > > const & quantities)

        :type NewVolID: const int
        :type nodes_ids: OCC.wrapper.SMESHDS.vector
        :type quantities: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_Script_AddPolyhedralVolume(self, *args)


    def AddBall(self, *args):
        """
        AddBall(SMESHDS_Script self, int NewBallID, int node, double diameter)

        :type NewBallID: int
        :type node: int
        :type diameter: double

        """
        return _SMESHDS.SMESHDS_Script_AddBall(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(SMESHDS_Script self, int NewEdgeID, int idnode1, int idnode2)
        AddEdge(SMESHDS_Script self, int NewEdgeID, int n1, int n2, int n12)

        :type NewEdgeID: int
        :type n1: int
        :type n2: int
        :type n12: int

        """
        return _SMESHDS.SMESHDS_Script_AddEdge(self, *args)


    def AddFace(self, *args):
        """
        AddFace(SMESHDS_Script self, int NewFaceID, int idnode1, int idnode2, int idnode3)
        AddFace(SMESHDS_Script self, int NewFaceID, int idnode1, int idnode2, int idnode3, int idnode4)
        AddFace(SMESHDS_Script self, int NewFaceID, int n1, int n2, int n3, int n12, int n23, int n31)
        AddFace(SMESHDS_Script self, int NewFaceID, int n1, int n2, int n3, int n12, int n23, int n31, int nCenter)
        AddFace(SMESHDS_Script self, int NewFaceID, int n1, int n2, int n3, int n4, int n12, int n23, int n34, int n41)
        AddFace(SMESHDS_Script self, int NewFaceID, int n1, int n2, int n3, int n4, int n12, int n23, int n34, int n41, int nCenter)

        :type NewFaceID: int
        :type n1: int
        :type n2: int
        :type n3: int
        :type n4: int
        :type n12: int
        :type n23: int
        :type n34: int
        :type n41: int
        :type nCenter: int

        """
        return _SMESHDS.SMESHDS_Script_AddFace(self, *args)


    def AddVolume(self, *args):
        """
        AddVolume(SMESHDS_Script self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4)
        AddVolume(SMESHDS_Script self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4, int idnode5)
        AddVolume(SMESHDS_Script self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4, int idnode5, int idnode6)
        AddVolume(SMESHDS_Script self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4, int idnode5, int idnode6, int idnode7, int idnode8)
        AddVolume(SMESHDS_Script self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4, int idnode5, int idnode6, int idnode7, int idnode8, int idnode9, int idnode10, int idnode11, int idnode12)
        AddVolume(SMESHDS_Script self, int NewVolID, int n1, int n2, int n3, int n4, int n12, int n23, int n31, int n14, int n24, int n34)
        AddVolume(SMESHDS_Script self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n12, int n23, int n34, int n41, int n15, int n25, int n35, int n45)
        AddVolume(SMESHDS_Script self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n6, int n12, int n23, int n31, int n45, int n56, int n64, int n14, int n25, int n36)
        AddVolume(SMESHDS_Script self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n6, int n12, int n23, int n31, int n45, int n56, int n64, int n14, int n25, int n36, int n1245, int n2356, int n1346)
        AddVolume(SMESHDS_Script self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n12, int n23, int n34, int n41, int n56, int n67, int n78, int n85, int n15, int n26, int n37, int n48)
        AddVolume(SMESHDS_Script self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n12, int n23, int n34, int n41, int n56, int n67, int n78, int n85, int n15, int n26, int n37, int n48, int n1234, int n1256, int n2367, int n3478, int n1458, int n5678, int nCenter)

        :type NewVolID: int
        :type n1: int
        :type n2: int
        :type n3: int
        :type n4: int
        :type n5: int
        :type n6: int
        :type n7: int
        :type n8: int
        :type n12: int
        :type n23: int
        :type n34: int
        :type n41: int
        :type n56: int
        :type n67: int
        :type n78: int
        :type n85: int
        :type n15: int
        :type n26: int
        :type n37: int
        :type n48: int
        :type n1234: int
        :type n1256: int
        :type n2367: int
        :type n3478: int
        :type n1458: int
        :type n5678: int
        :type nCenter: int

        """
        return _SMESHDS.SMESHDS_Script_AddVolume(self, *args)


    def MoveNode(self, *args):
        """
        MoveNode(SMESHDS_Script self, int NewNodeID, double x, double y, double z)

        :type NewNodeID: int
        :type x: double
        :type y: double
        :type z: double

        """
        return _SMESHDS.SMESHDS_Script_MoveNode(self, *args)


    def RemoveNode(self, *args):
        """
        RemoveNode(SMESHDS_Script self, int NodeID)

        :type NodeID: int

        """
        return _SMESHDS.SMESHDS_Script_RemoveNode(self, *args)


    def RemoveElement(self, *args):
        """
        RemoveElement(SMESHDS_Script self, int ElementID)

        :type ElementID: int

        """
        return _SMESHDS.SMESHDS_Script_RemoveElement(self, *args)


    def ChangeElementNodes(self, *args):
        """
        ChangeElementNodes(SMESHDS_Script self, int ElementID, int [] nodes, int nbnodes)

        :type ElementID: int
        :type nodes: int []
        :type nbnodes: int

        """
        return _SMESHDS.SMESHDS_Script_ChangeElementNodes(self, *args)


    def ChangePolyhedronNodes(self, *args):
        """
        ChangePolyhedronNodes(SMESHDS_Script self, int const ElementID, std::vector< int,std::allocator< int > > const & nodes_ids, std::vector< int,std::allocator< int > > const & quantities)

        :type ElementID: const int
        :type nodes_ids: OCC.wrapper.SMESHDS.vector
        :type quantities: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_Script_ChangePolyhedronNodes(self, *args)


    def Renumber(self, *args):
        """
        Renumber(SMESHDS_Script self, bool const isNodes, int const startID, int const deltaID)

        :type isNodes: const bool
        :type startID: const int
        :type deltaID: const int

        """
        return _SMESHDS.SMESHDS_Script_Renumber(self, *args)


    def ClearMesh(self, *args):
        """ClearMesh(SMESHDS_Script self)"""
        return _SMESHDS.SMESHDS_Script_ClearMesh(self, *args)


    def Clear(self, *args):
        """Clear(SMESHDS_Script self)"""
        return _SMESHDS.SMESHDS_Script_Clear(self, *args)


    def GetCommands(self, *args):
        """
        :rtype: OCC.wrapper.SMESHDS.list_SMESHDS_Command

        """
        res = _SMESHDS.SMESHDS_Script_GetCommands(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _SMESHDS.delete_SMESHDS_Script
SMESHDS_Script_swigregister = _SMESHDS.SMESHDS_Script_swigregister
SMESHDS_Script_swigregister(SMESHDS_Script)

class NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self) -> NCollection_DataMap< TopoDS_Shape,THypList,SMESHDS_Hasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self) -> NCollection_DataMap< TopoDS_Shape,THypList,SMESHDS_Hasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self) -> NCollection_DataMap< TopoDS_Shape,THypList,SMESHDS_Hasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self) -> NCollection_DataMap< TopoDS_Shape,THypList,SMESHDS_Hasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _SMESHDS.new_NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher theOther) -> NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher theOther) -> NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, TopoDS_Shape theKey, std::list< SMESHDS_Hypothesis const *,std::allocator< SMESHDS_Hypothesis const * > > const & theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, TopoDS_Shape theKey, std::list< SMESHDS_Hypothesis const *,std::allocator< SMESHDS_Hypothesis const * > > const & theItem) -> std::list< SMESHDS_Hypothesis const *,std::allocator< SMESHDS_Hypothesis const * > > *

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, TopoDS_Shape theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, TopoDS_Shape theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, TopoDS_Shape theKey) -> std::list< SMESHDS_Hypothesis const *,std::allocator< SMESHDS_Hypothesis const * > > const *

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, TopoDS_Shape theKey) -> std::list< SMESHDS_Hypothesis const *,std::allocator< SMESHDS_Hypothesis const * > > *

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, TopoDS_Shape theKey) -> std::list< SMESHDS_Hypothesis const *,std::allocator< SMESHDS_Hypothesis const * > > &

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_Size(self, *args)


    def __iter__(self):
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher___iter__(self)
    __swig_destroy__ = _SMESHDS.delete_NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher
NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_swigregister = _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_swigregister
NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_swigregister(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher)

class NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _SMESHDS.new_NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMESHDS.delete_NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IteratorHelper

    def __next__(self):
        return _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IteratorHelper___next__(self)
NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IteratorHelper_swigregister = _SMESHDS.NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IteratorHelper_swigregister
NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IteratorHelper_swigregister(NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher_IteratorHelper)


try:
	ShapeToHypothesis = NCollection_DataMap_TopoDS_Shape_THypList_SMESHDS_Hasher
except NameError:
	pass # does not exist, probably ignored

class SMDS_Iterator_SMESHDS_SubMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def more(self, *args):
        """
        more(SMDS_Iterator_SMESHDS_SubMesh self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMESHDS.SMDS_Iterator_SMESHDS_SubMesh_more(self, *args)


    def next(self, *args):
        """
        next(SMDS_Iterator_SMESHDS_SubMesh self) -> SMESHDS_SubMesh

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMESHDS.SMDS_Iterator_SMESHDS_SubMesh_next(self, *args)


    def remove(self, *args):
        """
        remove(SMDS_Iterator_SMESHDS_SubMesh self)

        Delete the current element and step to the next one


        """
        return _SMESHDS.SMDS_Iterator_SMESHDS_SubMesh_remove(self, *args)

    __swig_destroy__ = _SMESHDS.delete_SMDS_Iterator_SMESHDS_SubMesh
SMDS_Iterator_SMESHDS_SubMesh_swigregister = _SMESHDS.SMDS_Iterator_SMESHDS_SubMesh_swigregister
SMDS_Iterator_SMESHDS_SubMesh_swigregister(SMDS_Iterator_SMESHDS_SubMesh)


try:
	SMESHDS_SubMeshIterator = SMDS_Iterator_SMESHDS_SubMesh
except NameError:
	pass # does not exist, probably ignored

class SMESHDS_Command(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMESHDS_Command self, SMESHDS_CommandType const aType) -> SMESHDS_Command

        :type aType: OCC.wrapper.SMESHDS.SMESHDS_CommandType

        """
        this = _SMESHDS.new_SMESHDS_Command(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddNode(self, *args):
        """
        AddNode(SMESHDS_Command self, int NewNodeID, double x, double y, double z)

        :type NewNodeID: int
        :type x: double
        :type y: double
        :type z: double

        """
        return _SMESHDS.SMESHDS_Command_AddNode(self, *args)


    def Add0DElement(self, *args):
        """
        Add0DElement(SMESHDS_Command self, int New0DElementID, int idnode)

        :type New0DElementID: int
        :type idnode: int

        """
        return _SMESHDS.SMESHDS_Command_Add0DElement(self, *args)


    def AddPolygonalFace(self, *args):
        """
        AddPolygonalFace(SMESHDS_Command self, int const ElementID, std::vector< int,std::allocator< int > > const & nodes_ids)

        :type ElementID: const int
        :type nodes_ids: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_Command_AddPolygonalFace(self, *args)


    def AddQuadPolygonalFace(self, *args):
        """
        AddQuadPolygonalFace(SMESHDS_Command self, int const ElementID, std::vector< int,std::allocator< int > > const & nodes_ids)

        :type ElementID: const int
        :type nodes_ids: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_Command_AddQuadPolygonalFace(self, *args)


    def AddPolyhedralVolume(self, *args):
        """
        AddPolyhedralVolume(SMESHDS_Command self, int const ElementID, std::vector< int,std::allocator< int > > const & nodes_ids, std::vector< int,std::allocator< int > > const & quantities)

        :type ElementID: const int
        :type nodes_ids: OCC.wrapper.SMESHDS.vector
        :type quantities: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_Command_AddPolyhedralVolume(self, *args)


    def AddBall(self, *args):
        """
        AddBall(SMESHDS_Command self, int NewBallID, int node, double diameter)

        :type NewBallID: int
        :type node: int
        :type diameter: double

        """
        return _SMESHDS.SMESHDS_Command_AddBall(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(SMESHDS_Command self, int NewEdgeID, int idnode1, int idnode2)
        AddEdge(SMESHDS_Command self, int NewEdgeID, int n1, int n2, int n12)

        :type NewEdgeID: int
        :type n1: int
        :type n2: int
        :type n12: int

        """
        return _SMESHDS.SMESHDS_Command_AddEdge(self, *args)


    def AddFace(self, *args):
        """
        AddFace(SMESHDS_Command self, int NewFaceID, int idnode1, int idnode2, int idnode3)
        AddFace(SMESHDS_Command self, int NewFaceID, int idnode1, int idnode2, int idnode3, int idnode4)
        AddFace(SMESHDS_Command self, int NewFaceID, int n1, int n2, int n3, int n12, int n23, int n31)
        AddFace(SMESHDS_Command self, int NewFaceID, int n1, int n2, int n3, int n12, int n23, int n31, int nCenter)
        AddFace(SMESHDS_Command self, int NewFaceID, int n1, int n2, int n3, int n4, int n12, int n23, int n34, int n41)
        AddFace(SMESHDS_Command self, int NewFaceID, int n1, int n2, int n3, int n4, int n12, int n23, int n34, int n41, int nCenter)

        :type NewFaceID: int
        :type n1: int
        :type n2: int
        :type n3: int
        :type n4: int
        :type n12: int
        :type n23: int
        :type n34: int
        :type n41: int
        :type nCenter: int

        """
        return _SMESHDS.SMESHDS_Command_AddFace(self, *args)


    def AddVolume(self, *args):
        """
        AddVolume(SMESHDS_Command self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4)
        AddVolume(SMESHDS_Command self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4, int idnode5)
        AddVolume(SMESHDS_Command self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4, int idnode5, int idnode6)
        AddVolume(SMESHDS_Command self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4, int idnode5, int idnode6, int idnode7, int idnode8)
        AddVolume(SMESHDS_Command self, int NewVolID, int idnode1, int idnode2, int idnode3, int idnode4, int idnode5, int idnode6, int idnode7, int idnode8, int idnode9, int idnode10, int idnode11, int idnode12)
        AddVolume(SMESHDS_Command self, int NewVolID, int n1, int n2, int n3, int n4, int n12, int n23, int n31, int n14, int n24, int n34)
        AddVolume(SMESHDS_Command self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n12, int n23, int n34, int n41, int n15, int n25, int n35, int n45)
        AddVolume(SMESHDS_Command self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n6, int n12, int n23, int n31, int n45, int n56, int n64, int n14, int n25, int n36)
        AddVolume(SMESHDS_Command self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n6, int n12, int n23, int n31, int n45, int n56, int n64, int n14, int n25, int n36, int n1245, int n2356, int n1346)
        AddVolume(SMESHDS_Command self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n12, int n23, int n34, int n41, int n56, int n67, int n78, int n85, int n15, int n26, int n37, int n48)
        AddVolume(SMESHDS_Command self, int NewVolID, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n12, int n23, int n34, int n41, int n56, int n67, int n78, int n85, int n15, int n26, int n37, int n48, int n1234, int n1256, int n2367, int n3478, int n1458, int n5678, int nCenter)

        :type NewVolID: int
        :type n1: int
        :type n2: int
        :type n3: int
        :type n4: int
        :type n5: int
        :type n6: int
        :type n7: int
        :type n8: int
        :type n12: int
        :type n23: int
        :type n34: int
        :type n41: int
        :type n56: int
        :type n67: int
        :type n78: int
        :type n85: int
        :type n15: int
        :type n26: int
        :type n37: int
        :type n48: int
        :type n1234: int
        :type n1256: int
        :type n2367: int
        :type n3478: int
        :type n1458: int
        :type n5678: int
        :type nCenter: int

        """
        return _SMESHDS.SMESHDS_Command_AddVolume(self, *args)


    def MoveNode(self, *args):
        """
        MoveNode(SMESHDS_Command self, int NewNodeID, double x, double y, double z)

        :type NewNodeID: int
        :type x: double
        :type y: double
        :type z: double

        """
        return _SMESHDS.SMESHDS_Command_MoveNode(self, *args)


    def RemoveNode(self, *args):
        """
        RemoveNode(SMESHDS_Command self, int NodeID)

        :type NodeID: int

        """
        return _SMESHDS.SMESHDS_Command_RemoveNode(self, *args)


    def RemoveElement(self, *args):
        """
        RemoveElement(SMESHDS_Command self, int ElementID)

        :type ElementID: int

        """
        return _SMESHDS.SMESHDS_Command_RemoveElement(self, *args)


    def ChangeElementNodes(self, *args):
        """
        ChangeElementNodes(SMESHDS_Command self, int ElementID, int [] nodes, int nbnodes)

        :type ElementID: int
        :type nodes: int []
        :type nbnodes: int

        """
        return _SMESHDS.SMESHDS_Command_ChangeElementNodes(self, *args)


    def ChangePolyhedronNodes(self, *args):
        """
        ChangePolyhedronNodes(SMESHDS_Command self, int const ElementID, std::vector< int,std::allocator< int > > const & nodes_ids, std::vector< int,std::allocator< int > > const & quantities)

        :type ElementID: const int
        :type nodes_ids: OCC.wrapper.SMESHDS.vector
        :type quantities: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_Command_ChangePolyhedronNodes(self, *args)


    def Renumber(self, *args):
        """
        Renumber(SMESHDS_Command self, bool const isNodes, int const startID, int const deltaID)

        :type isNodes: const bool
        :type startID: const int
        :type deltaID: const int

        """
        return _SMESHDS.SMESHDS_Command_Renumber(self, *args)


    def GetType(self, *args):
        """
        GetType(SMESHDS_Command self) -> SMESHDS_CommandType

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_CommandType

        """
        return _SMESHDS.SMESHDS_Command_GetType(self, *args)


    def GetNumber(self, *args):
        """
        GetNumber(SMESHDS_Command self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Command_GetNumber(self, *args)


    def GetIndexes(self, *args):
        """
        :rtype: OCC.wrapper.SMESHDS.list

        """
        res = _SMESHDS.SMESHDS_Command_GetIndexes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCoords(self, *args):
        """
        :rtype: OCC.wrapper.SMESHDS.list

        """
        res = _SMESHDS.SMESHDS_Command_GetCoords(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _SMESHDS.delete_SMESHDS_Command
SMESHDS_Command_swigregister = _SMESHDS.SMESHDS_Command_swigregister
SMESHDS_Command_swigregister(SMESHDS_Command)

class SMESHDS_GroupOnGeom(SMESHDS_GroupBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMESHDS_GroupOnGeom self, int const theID, SMESHDS_Mesh theMesh, SMDSAbs_ElementType const theType, TopoDS_Shape theShape) -> SMESHDS_GroupOnGeom

        :type theID: const int
        :type theMesh: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :type theType: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _SMESHDS.new_SMESHDS_GroupOnGeom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetShape(self, *args):
        """
        SetShape(SMESHDS_GroupOnGeom self, TopoDS_Shape theShape)

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _SMESHDS.SMESHDS_GroupOnGeom_SetShape(self, *args)


    def GetShape(self, *args):
        """
        GetShape(SMESHDS_GroupOnGeom self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _SMESHDS.SMESHDS_GroupOnGeom_GetShape(self, *args)


    def Contains(self, *args):
        """
        Contains(SMESHDS_GroupOnGeom self, int const theID) -> bool
        Contains(SMESHDS_GroupOnGeom self, SMDS_MeshElement elem) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_GroupOnGeom_Contains(self, *args)


    def GetElements(self, *args):
        """
        GetElements(SMESHDS_GroupOnGeom self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMESHDS.SMESHDS_GroupOnGeom_GetElements(self, *args)


    def GetTic(self, *args):
        """
        GetTic(SMESHDS_GroupOnGeom self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_GroupOnGeom_GetTic(self, *args)

    __swig_destroy__ = _SMESHDS.delete_SMESHDS_GroupOnGeom
SMESHDS_GroupOnGeom_swigregister = _SMESHDS.SMESHDS_GroupOnGeom_swigregister
SMESHDS_GroupOnGeom_swigregister(SMESHDS_GroupOnGeom)

class SMESHDS_Mesh(SMDS.SMDS_Mesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMESHDS_Mesh self, int theMeshID, bool theIsEmbeddedMode) -> SMESHDS_Mesh

        :type theMeshID: int
        :type theIsEmbeddedMode: bool

        """
        this = _SMESHDS.new_SMESHDS_Mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsEmbeddedMode(self, *args):
        """
        IsEmbeddedMode(SMESHDS_Mesh self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_IsEmbeddedMode(self, *args)


    def SetPersistentId(self, *args):
        """
        SetPersistentId(SMESHDS_Mesh self, int id)

        :type id: int

        """
        return _SMESHDS.SMESHDS_Mesh_SetPersistentId(self, *args)


    def GetPersistentId(self, *args):
        """
        GetPersistentId(SMESHDS_Mesh self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Mesh_GetPersistentId(self, *args)


    def ShapeToMesh(self, *args):
        """
        ShapeToMesh(SMESHDS_Mesh self, TopoDS_Shape S)
        ShapeToMesh(SMESHDS_Mesh self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _SMESHDS.SMESHDS_Mesh_ShapeToMesh(self, *args)


    def AddHypothesis(self, *args):
        """
        AddHypothesis(SMESHDS_Mesh self, TopoDS_Shape SS, SMESHDS_Hypothesis H) -> bool

        :type SS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type H: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_AddHypothesis(self, *args)


    def RemoveHypothesis(self, *args):
        """
        RemoveHypothesis(SMESHDS_Mesh self, TopoDS_Shape S, SMESHDS_Hypothesis H) -> bool

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type H: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_RemoveHypothesis(self, *args)


    def AddNodeWithID(self, *args):
        """
        AddNodeWithID(SMESHDS_Mesh self, double x, double y, double z, int ID) -> SMDS_MeshNode

        :type x: double
        :type y: double
        :type z: double
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMESHDS.SMESHDS_Mesh_AddNodeWithID(self, *args)


    def AddNode(self, *args):
        """
        AddNode(SMESHDS_Mesh self, double x, double y, double z) -> SMDS_MeshNode

        :type x: double
        :type y: double
        :type z: double
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMESHDS.SMESHDS_Mesh_AddNode(self, *args)


    def Add0DElementWithID(self, *args):
        """
        Add0DElementWithID(SMESHDS_Mesh self, int nodeID, int ID) -> SMDS_Mesh0DElement
        Add0DElementWithID(SMESHDS_Mesh self, SMDS_MeshNode node, int ID) -> SMDS_Mesh0DElement

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_Mesh0DElement

        """
        return _SMESHDS.SMESHDS_Mesh_Add0DElementWithID(self, *args)


    def Add0DElement(self, *args):
        """
        Add0DElement(SMESHDS_Mesh self, SMDS_MeshNode node) -> SMDS_Mesh0DElement

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_Mesh0DElement

        """
        return _SMESHDS.SMESHDS_Mesh_Add0DElement(self, *args)


    def AddBallWithID(self, *args):
        """
        AddBallWithID(SMESHDS_Mesh self, int n, double diameter, int ID) -> SMDS_BallElement
        AddBallWithID(SMESHDS_Mesh self, SMDS_MeshNode n, double diameter, int ID) -> SMDS_BallElement

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :type diameter: double
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_BallElement

        """
        return _SMESHDS.SMESHDS_Mesh_AddBallWithID(self, *args)


    def AddBall(self, *args):
        """
        AddBall(SMESHDS_Mesh self, SMDS_MeshNode n, double diameter) -> SMDS_BallElement

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :type diameter: double
        :rtype: OCC.wrapper.SMDS.SMDS_BallElement

        """
        return _SMESHDS.SMESHDS_Mesh_AddBall(self, *args)


    def AddEdgeWithID(self, *args):
        """
        AddEdgeWithID(SMESHDS_Mesh self, int n1, int n2, int ID) -> SMDS_MeshEdge
        AddEdgeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, int ID) -> SMDS_MeshEdge
        AddEdgeWithID(SMESHDS_Mesh self, int n1, int n2, int n12, int ID) -> SMDS_MeshEdge
        AddEdgeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n12, int ID) -> SMDS_MeshEdge

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshEdge

        """
        return _SMESHDS.SMESHDS_Mesh_AddEdgeWithID(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2) -> SMDS_MeshEdge
        AddEdge(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n12) -> SMDS_MeshEdge

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshEdge

        """
        return _SMESHDS.SMESHDS_Mesh_AddEdge(self, *args)


    def AddFaceWithID(self, *args):
        """
        AddFaceWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n12, int n23, int n31, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n12, int n23, int n31, int nCenter, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode nCenter, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n12, int n23, int n34, int n41, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n12, int n23, int n34, int n41, int nCenter, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode nCenter, int ID) -> SMDS_MeshFace

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n23: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n34: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n41: OCC.wrapper.SMDS.SMDS_MeshNode
        :type nCenter: OCC.wrapper.SMDS.SMDS_MeshNode
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMESHDS.SMESHDS_Mesh_AddFaceWithID(self, *args)


    def AddFace(self, *args):
        """
        AddFace(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3) -> SMDS_MeshFace
        AddFace(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4) -> SMDS_MeshFace
        AddFace(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31) -> SMDS_MeshFace
        AddFace(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode nCenter) -> SMDS_MeshFace
        AddFace(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41) -> SMDS_MeshFace
        AddFace(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode nCenter) -> SMDS_MeshFace

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n23: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n34: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n41: OCC.wrapper.SMDS.SMDS_MeshNode
        :type nCenter: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMESHDS.SMESHDS_Mesh_AddFace(self, *args)


    def AddVolumeWithID(self, *args):
        """
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10, int n11, int n12, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n9, SMDS_MeshNode n10, SMDS_MeshNode n11, SMDS_MeshNode n12, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n12, int n23, int n31, int n14, int n24, int n34, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n14, SMDS_MeshNode n24, SMDS_MeshNode n34, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n12, int n23, int n34, int n41, int n15, int n25, int n35, int n45, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n15, SMDS_MeshNode n25, SMDS_MeshNode n35, SMDS_MeshNode n45, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n12, int n23, int n31, int n45, int n56, int n64, int n14, int n25, int n36, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n45, SMDS_MeshNode n56, SMDS_MeshNode n64, SMDS_MeshNode n14, SMDS_MeshNode n25, SMDS_MeshNode n36, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n12, int n23, int n31, int n45, int n56, int n64, int n14, int n25, int n36, int n1245, int n2356, int n1346, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n45, SMDS_MeshNode n56, SMDS_MeshNode n64, SMDS_MeshNode n14, SMDS_MeshNode n25, SMDS_MeshNode n36, SMDS_MeshNode n1245, SMDS_MeshNode n2356, SMDS_MeshNode n1346, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n12, int n23, int n34, int n41, int n56, int n67, int n78, int n85, int n15, int n26, int n37, int n48, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n56, SMDS_MeshNode n67, SMDS_MeshNode n78, SMDS_MeshNode n85, SMDS_MeshNode n15, SMDS_MeshNode n26, SMDS_MeshNode n37, SMDS_MeshNode n48, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n12, int n23, int n34, int n41, int n56, int n67, int n78, int n85, int n15, int n26, int n37, int n48, int n1234, int n1256, int n2367, int n3478, int n1458, int n5678, int nCenter, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n56, SMDS_MeshNode n67, SMDS_MeshNode n78, SMDS_MeshNode n85, SMDS_MeshNode n15, SMDS_MeshNode n26, SMDS_MeshNode n37, SMDS_MeshNode n48, SMDS_MeshNode n1234, SMDS_MeshNode n1256, SMDS_MeshNode n2367, SMDS_MeshNode n3478, SMDS_MeshNode n1458, SMDS_MeshNode n5678, SMDS_MeshNode nCenter, int ID) -> SMDS_MeshVolume

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n5: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n6: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n7: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n8: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n23: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n34: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n41: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n56: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n67: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n78: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n85: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n15: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n26: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n37: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n48: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1234: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1256: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2367: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3478: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1458: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n5678: OCC.wrapper.SMDS.SMDS_MeshNode
        :type nCenter: OCC.wrapper.SMDS.SMDS_MeshNode
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMESHDS.SMESHDS_Mesh_AddVolumeWithID(self, *args)


    def AddVolume(self, *args):
        """
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n9, SMDS_MeshNode n10, SMDS_MeshNode n11, SMDS_MeshNode n12) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n14, SMDS_MeshNode n24, SMDS_MeshNode n34) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n15, SMDS_MeshNode n25, SMDS_MeshNode n35, SMDS_MeshNode n45) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n45, SMDS_MeshNode n56, SMDS_MeshNode n64, SMDS_MeshNode n14, SMDS_MeshNode n25, SMDS_MeshNode n36) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n45, SMDS_MeshNode n56, SMDS_MeshNode n64, SMDS_MeshNode n14, SMDS_MeshNode n25, SMDS_MeshNode n36, SMDS_MeshNode n1245, SMDS_MeshNode n2356, SMDS_MeshNode n1346) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n56, SMDS_MeshNode n67, SMDS_MeshNode n78, SMDS_MeshNode n85, SMDS_MeshNode n15, SMDS_MeshNode n26, SMDS_MeshNode n37, SMDS_MeshNode n48) -> SMDS_MeshVolume
        AddVolume(SMESHDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n56, SMDS_MeshNode n67, SMDS_MeshNode n78, SMDS_MeshNode n85, SMDS_MeshNode n15, SMDS_MeshNode n26, SMDS_MeshNode n37, SMDS_MeshNode n48, SMDS_MeshNode n1234, SMDS_MeshNode n1256, SMDS_MeshNode n2367, SMDS_MeshNode n3478, SMDS_MeshNode n1458, SMDS_MeshNode n5678, SMDS_MeshNode nCenter) -> SMDS_MeshVolume

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n5: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n6: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n7: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n8: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n23: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n34: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n41: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n56: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n67: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n78: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n85: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n15: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n26: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n37: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n48: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1234: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1256: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2367: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3478: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1458: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n5678: OCC.wrapper.SMDS.SMDS_MeshNode
        :type nCenter: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMESHDS.SMESHDS_Mesh_AddVolume(self, *args)


    def AddPolygonalFaceWithID(self, *args):
        """
        AddPolygonalFaceWithID(SMESHDS_Mesh self, std::vector< int,std::allocator< int > > const & nodes_ids, int const ID) -> SMDS_MeshFace
        AddPolygonalFaceWithID(SMESHDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, int const ID) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMESHDS.vector_SMDS_MeshNode
        :type ID: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMESHDS.SMESHDS_Mesh_AddPolygonalFaceWithID(self, *args)


    def AddPolygonalFace(self, *args):
        """
        AddPolygonalFace(SMESHDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMESHDS.vector_SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMESHDS.SMESHDS_Mesh_AddPolygonalFace(self, *args)


    def AddQuadPolygonalFaceWithID(self, *args):
        """
        AddQuadPolygonalFaceWithID(SMESHDS_Mesh self, std::vector< int,std::allocator< int > > const & nodes_ids, int const ID) -> SMDS_MeshFace
        AddQuadPolygonalFaceWithID(SMESHDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, int const ID) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMESHDS.vector_SMDS_MeshNode
        :type ID: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMESHDS.SMESHDS_Mesh_AddQuadPolygonalFaceWithID(self, *args)


    def AddQuadPolygonalFace(self, *args):
        """
        AddQuadPolygonalFace(SMESHDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMESHDS.vector_SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMESHDS.SMESHDS_Mesh_AddQuadPolygonalFace(self, *args)


    def AddPolyhedralVolumeWithID(self, *args):
        """
        AddPolyhedralVolumeWithID(SMESHDS_Mesh self, std::vector< int,std::allocator< int > > const & nodes_ids, std::vector< int,std::allocator< int > > const & quantities, int const ID) -> SMDS_MeshVolume
        AddPolyhedralVolumeWithID(SMESHDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, std::vector< int,std::allocator< int > > const & quantities, int const ID) -> SMDS_MeshVolume

        :type nodes: OCC.wrapper.SMESHDS.vector_SMDS_MeshNode
        :type quantities: OCC.wrapper.SMESHDS.vector
        :type ID: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMESHDS.SMESHDS_Mesh_AddPolyhedralVolumeWithID(self, *args)


    def AddPolyhedralVolume(self, *args):
        """
        AddPolyhedralVolume(SMESHDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, std::vector< int,std::allocator< int > > const & quantities) -> SMDS_MeshVolume

        :type nodes: OCC.wrapper.SMESHDS.vector_SMDS_MeshNode
        :type quantities: OCC.wrapper.SMESHDS.vector
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMESHDS.SMESHDS_Mesh_AddPolyhedralVolume(self, *args)


    def MoveNode(self, *args):
        """
        MoveNode(SMESHDS_Mesh self, SMDS_MeshNode arg2, double x, double y, double z)

        :type : OCC.wrapper.SMDS.SMDS_MeshNode
        :type x: double
        :type y: double
        :type z: double

        """
        return _SMESHDS.SMESHDS_Mesh_MoveNode(self, *args)


    def RemoveNode(self, *args):
        """
        RemoveNode(SMESHDS_Mesh self, SMDS_MeshNode arg2)

        :type : OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMESHDS.SMESHDS_Mesh_RemoveNode(self, *args)


    def RemoveElement(self, *args):
        """
        RemoveElement(SMESHDS_Mesh self, SMDS_MeshElement arg2)

        :type : OCC.wrapper.SMDS.SMDS_MeshElement

        """
        return _SMESHDS.SMESHDS_Mesh_RemoveElement(self, *args)


    def RemoveFreeNode(self, *args):
        """
        RemoveFreeNode(SMESHDS_Mesh self, SMDS_MeshNode arg2, SMESHDS_SubMesh arg3, bool fromGroups=True) -> bool

        Remove only the given element/node and only if it is free.
        Methods do not work for meshes with descendants.
        Implemented for fast cleaning of meshes.

        :type : OCC.wrapper.SMDS.SMDS_MeshNode
        :type : OCC.wrapper.SMESHDS.SMESHDS_SubMesh
        :type fromGroups: bool
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_RemoveFreeNode(self, *args)


    def RemoveFreeElement(self, *args):
        """
        RemoveFreeElement(SMESHDS_Mesh self, SMDS_MeshElement arg2, SMESHDS_SubMesh arg3, bool fromGroups=True)

        :type : OCC.wrapper.SMDS.SMDS_MeshElement
        :type : OCC.wrapper.SMESHDS.SMESHDS_SubMesh
        :type fromGroups: bool

        """
        return _SMESHDS.SMESHDS_Mesh_RemoveFreeElement(self, *args)


    def ClearMesh(self, *args):
        """ClearMesh(SMESHDS_Mesh self)"""
        return _SMESHDS.SMESHDS_Mesh_ClearMesh(self, *args)


    def ChangeElementNodes(self, *args):
        """
        ChangeElementNodes(SMESHDS_Mesh self, SMDS_MeshElement elem, SMDS_MeshNode const ** nodes, int const nbnodes) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :type nodes: const SMDS_MeshNode *[]
        :type nbnodes: const int
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_ChangeElementNodes(self, *args)


    def ChangePolygonNodes(self, *args):
        """
        ChangePolygonNodes(SMESHDS_Mesh self, SMDS_MeshElement elem, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > nodes) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :type nodes: OCC.wrapper.SMESHDS.vector_SMDS_MeshNode
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_ChangePolygonNodes(self, *args)


    def ChangePolyhedronNodes(self, *args):
        """
        ChangePolyhedronNodes(SMESHDS_Mesh self, SMDS_MeshElement elem, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > nodes, std::vector< int,std::allocator< int > > quantities) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :type nodes: OCC.wrapper.SMESHDS.vector_SMDS_MeshNode
        :type quantities: OCC.wrapper.SMESHDS.vector
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_ChangePolyhedronNodes(self, *args)


    def ModifyCellNodes(self, *args):
        """
        ModifyCellNodes(SMESHDS_Mesh self, int smdsVolId, std::map< int,int,std::less< int >,std::allocator< std::pair< int const,int > > > localClonedNodeIds) -> bool

        :type smdsVolId: int
        :type localClonedNodeIds: OCC.wrapper.SMESHDS.map
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_ModifyCellNodes(self, *args)


    def Renumber(self, *args):
        """
        Renumber(SMESHDS_Mesh self, bool const isNodes, int const startID=1, int const deltaID=1)

        :type isNodes: const bool
        :type startID: const int
        :type deltaID: const int

        """
        return _SMESHDS.SMESHDS_Mesh_Renumber(self, *args)


    def UnSetNodeOnShape(self, *args):
        """
        UnSetNodeOnShape(SMESHDS_Mesh self, SMDS_MeshNode aNode)

        :type aNode: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMESHDS.SMESHDS_Mesh_UnSetNodeOnShape(self, *args)


    def UnSetMeshElementOnShape(self, *args):
        """
        UnSetMeshElementOnShape(SMESHDS_Mesh self, SMDS_MeshElement anElt, TopoDS_Shape S)

        :type anElt: OCC.wrapper.SMDS.SMDS_MeshElement
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _SMESHDS.SMESHDS_Mesh_UnSetMeshElementOnShape(self, *args)


    def SetNodeInVolume(self, *args):
        """
        SetNodeInVolume(SMESHDS_Mesh self, SMDS_MeshNode aNode, TopoDS_Shell S)
        SetNodeInVolume(SMESHDS_Mesh self, SMDS_MeshNode aNode, TopoDS_Solid S)
        SetNodeInVolume(SMESHDS_Mesh self, SMDS_MeshNode aNode, int Index)

        :type aNode: OCC.wrapper.SMDS.SMDS_MeshNode
        :type Index: int

        """
        return _SMESHDS.SMESHDS_Mesh_SetNodeInVolume(self, *args)


    def SetNodeOnFace(self, *args):
        """
        SetNodeOnFace(SMESHDS_Mesh self, SMDS_MeshNode aNode, TopoDS_Face S, double u=0., double v=0.)
        SetNodeOnFace(SMESHDS_Mesh self, SMDS_MeshNode aNode, int Index, double u=0., double v=0.)

        :type aNode: OCC.wrapper.SMDS.SMDS_MeshNode
        :type Index: int
        :type u: double
        :type v: double

        """
        return _SMESHDS.SMESHDS_Mesh_SetNodeOnFace(self, *args)


    def SetNodeOnEdge(self, *args):
        """
        SetNodeOnEdge(SMESHDS_Mesh self, SMDS_MeshNode aNode, TopoDS_Edge S, double u=0.)
        SetNodeOnEdge(SMESHDS_Mesh self, SMDS_MeshNode aNode, int Index, double u=0.)

        :type aNode: OCC.wrapper.SMDS.SMDS_MeshNode
        :type Index: int
        :type u: double

        """
        return _SMESHDS.SMESHDS_Mesh_SetNodeOnEdge(self, *args)


    def SetNodeOnVertex(self, *args):
        """
        SetNodeOnVertex(SMESHDS_Mesh self, SMDS_MeshNode aNode, TopoDS_Vertex S)
        SetNodeOnVertex(SMESHDS_Mesh self, SMDS_MeshNode aNode, int Index)

        :type aNode: OCC.wrapper.SMDS.SMDS_MeshNode
        :type Index: int

        """
        return _SMESHDS.SMESHDS_Mesh_SetNodeOnVertex(self, *args)


    def SetMeshElementOnShape(self, *args):
        """
        SetMeshElementOnShape(SMESHDS_Mesh self, SMDS_MeshElement anElt, TopoDS_Shape S)
        SetMeshElementOnShape(SMESHDS_Mesh self, SMDS_MeshElement anElt, int Index)

        :type anElt: OCC.wrapper.SMDS.SMDS_MeshElement
        :type Index: int

        """
        return _SMESHDS.SMESHDS_Mesh_SetMeshElementOnShape(self, *args)


    def HasMeshElements(self, *args):
        """
        HasMeshElements(SMESHDS_Mesh self, TopoDS_Shape S) -> bool

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_HasMeshElements(self, *args)


    def MeshElements(self, *args):
        """
        MeshElements(SMESHDS_Mesh self, TopoDS_Shape S) -> SMESHDS_SubMesh
        MeshElements(SMESHDS_Mesh self, int const Index) -> SMESHDS_SubMesh

        :type Index: const int
        :rtype: OCC.wrapper.SMESHDS.SMESHDS_SubMesh

        """
        return _SMESHDS.SMESHDS_Mesh_MeshElements(self, *args)


    def SubMeshIndices(self, *args):
        """
        SubMeshIndices(SMESHDS_Mesh self) -> std::list< int,std::allocator< int > >

        :rtype: OCC.wrapper.SMESHDS.list

        """
        return _SMESHDS.SMESHDS_Mesh_SubMeshIndices(self, *args)


    def SubMeshes(self, *args):
        """
        SubMeshes(SMESHDS_Mesh self) -> SMESHDS_SubMeshIteratorPtr

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_SubMeshIteratorPtr

        """
        return _SMESHDS.SMESHDS_Mesh_SubMeshes(self, *args)


    def HasHypothesis(self, *args):
        """
        HasHypothesis(SMESHDS_Mesh self, TopoDS_Shape S) -> bool

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_HasHypothesis(self, *args)


    def GetHypothesis(self, *args):
        """
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.SMESHDS.list_SMESHDS_Hypothesis

        """
        res = _SMESHDS.SMESHDS_Mesh_GetHypothesis(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsUsedHypothesis(self, *args):
        """
        IsUsedHypothesis(SMESHDS_Mesh self, SMESHDS_Hypothesis H) -> bool

        :type H: OCC.wrapper.SMESHDS.SMESHDS_Hypothesis
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_IsUsedHypothesis(self, *args)


    def GetHypotheses(self, *args):
        """
        :rtype: ShapeToHypothesis

        """
        res = _SMESHDS.SMESHDS_Mesh_GetHypotheses(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetScript(self, *args):
        """
        GetScript(SMESHDS_Mesh self) -> SMESHDS_Script

        :rtype: OCC.wrapper.SMESHDS.SMESHDS_Script

        """
        return _SMESHDS.SMESHDS_Mesh_GetScript(self, *args)


    def ClearScript(self, *args):
        """ClearScript(SMESHDS_Mesh self)"""
        return _SMESHDS.SMESHDS_Mesh_ClearScript(self, *args)


    def ShapeToIndex(self, *args):
        """
        ShapeToIndex(SMESHDS_Mesh self, TopoDS_Shape aShape) -> int

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: int

        """
        return _SMESHDS.SMESHDS_Mesh_ShapeToIndex(self, *args)


    def IndexToShape(self, *args):
        """
        :type ShapeIndex: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _SMESHDS.SMESHDS_Mesh_IndexToShape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MaxShapeIndex(self, *args):
        """
        MaxShapeIndex(SMESHDS_Mesh self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Mesh_MaxShapeIndex(self, *args)


    def MaxSubMeshIndex(self, *args):
        """
        MaxSubMeshIndex(SMESHDS_Mesh self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Mesh_MaxSubMeshIndex(self, *args)


    def NewSubMesh(self, *args):
        """
        NewSubMesh(SMESHDS_Mesh self, int Index) -> SMESHDS_SubMesh

        :type Index: int
        :rtype: OCC.wrapper.SMESHDS.SMESHDS_SubMesh

        """
        return _SMESHDS.SMESHDS_Mesh_NewSubMesh(self, *args)


    def AddCompoundSubmesh(self, *args):
        """
        AddCompoundSubmesh(SMESHDS_Mesh self, TopoDS_Shape S, TopAbs_ShapeEnum type=TopAbs_SHAPE) -> int

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: int

        """
        return _SMESHDS.SMESHDS_Mesh_AddCompoundSubmesh(self, *args)


    def AddGroup(self, *args):
        """
        AddGroup(SMESHDS_Mesh self, SMESHDS_GroupBase theGroup)

        :type theGroup: OCC.wrapper.SMESHDS.SMESHDS_GroupBase

        """
        return _SMESHDS.SMESHDS_Mesh_AddGroup(self, *args)


    def RemoveGroup(self, *args):
        """
        RemoveGroup(SMESHDS_Mesh self, SMESHDS_GroupBase theGroup)

        :type theGroup: OCC.wrapper.SMESHDS.SMESHDS_GroupBase

        """
        return _SMESHDS.SMESHDS_Mesh_RemoveGroup(self, *args)


    def GetNbGroups(self, *args):
        """
        GetNbGroups(SMESHDS_Mesh self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_Mesh_GetNbGroups(self, *args)


    def GetGroups(self, *args):
        """
        :rtype: OCC.wrapper.SMESHDS.set_SMESHDS_GroupBase

        """
        res = _SMESHDS.SMESHDS_Mesh_GetGroups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsGroupOfSubShapes(self, *args):
        """
        IsGroupOfSubShapes(SMESHDS_Mesh self, TopoDS_Shape aSubShape) -> bool

        :type aSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_Mesh_IsGroupOfSubShapes(self, *args)


    def CompactMesh(self, *args):
        """CompactMesh(SMESHDS_Mesh self)"""
        return _SMESHDS.SMESHDS_Mesh_CompactMesh(self, *args)


    def CleanDownWardConnectivity(self, *args):
        """CleanDownWardConnectivity(SMESHDS_Mesh self)"""
        return _SMESHDS.SMESHDS_Mesh_CleanDownWardConnectivity(self, *args)


    def BuildDownWardConnectivity(self, *args):
        """
        BuildDownWardConnectivity(SMESHDS_Mesh self, bool withEdges)

        :type withEdges: bool

        """
        return _SMESHDS.SMESHDS_Mesh_BuildDownWardConnectivity(self, *args)

    __swig_destroy__ = _SMESHDS.delete_SMESHDS_Mesh
SMESHDS_Mesh_swigregister = _SMESHDS.SMESHDS_Mesh_swigregister
SMESHDS_Mesh_swigregister(SMESHDS_Mesh)

class SMESHDS_GroupOnFilter(SMESHDS_GroupBase):
    """rief Groups whose contents is dynamically updated using the filter"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMESHDS_GroupOnFilter self, int const theID, SMESHDS_Mesh theMesh, SMDSAbs_ElementType const theType, SMESH_PredicatePtr const & thePredicate) -> SMESHDS_GroupOnFilter

        :type theID: const int
        :type theMesh: OCC.wrapper.SMESHDS.SMESHDS_Mesh
        :type theType: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
        :type thePredicate: OCC.wrapper.SMESH.SMESH_PredicatePtr

        """
        this = _SMESHDS.new_SMESHDS_GroupOnFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPredicate(self, *args):
        """
        SetPredicate(SMESHDS_GroupOnFilter self, SMESH_PredicatePtr const & thePredicate)

        :type thePredicate: OCC.wrapper.SMESH.SMESH_PredicatePtr

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_SetPredicate(self, *args)


    def GetPredicate(self, *args):
        """
        GetPredicate(SMESHDS_GroupOnFilter self) -> SMESH_PredicatePtr

        :rtype: OCC.wrapper.SMESH.SMESH_PredicatePtr

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_GetPredicate(self, *args)


    def GetMeshInfo(self, *args):
        """
        GetMeshInfo(SMESHDS_GroupOnFilter self) -> std::vector< int,std::allocator< int > >

        :rtype: OCC.wrapper.SMESHDS.vector

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_GetMeshInfo(self, *args)


    def Extent(self, *args):
        """
        Extent(SMESHDS_GroupOnFilter self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(SMESHDS_GroupOnFilter self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_IsEmpty(self, *args)


    def Contains(self, *args):
        """
        Contains(SMESHDS_GroupOnFilter self, int const theID) -> bool
        Contains(SMESHDS_GroupOnFilter self, SMDS_MeshElement elem) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_Contains(self, *args)


    def GetElements(self, *args):
        """
        GetElements(SMESHDS_GroupOnFilter self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_GetElements(self, *args)


    def GetTic(self, *args):
        """
        GetTic(SMESHDS_GroupOnFilter self) -> int

        :rtype: int

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_GetTic(self, *args)


    def IsUpToDate(self, *args):
        """
        IsUpToDate(SMESHDS_GroupOnFilter self) -> bool

        :rtype: bool

        """
        return _SMESHDS.SMESHDS_GroupOnFilter_IsUpToDate(self, *args)

    __swig_destroy__ = _SMESHDS.delete_SMESHDS_GroupOnFilter
SMESHDS_GroupOnFilter_swigregister = _SMESHDS.SMESHDS_GroupOnFilter_swigregister
SMESHDS_GroupOnFilter_swigregister(SMESHDS_GroupOnFilter)



