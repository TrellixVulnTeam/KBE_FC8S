# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StdDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StdDrivers')
    _StdDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StdDrivers', [dirname(__file__)])
        except ImportError:
            import _StdDrivers
            return _StdDrivers
        try:
            _mod = imp.load_module('_StdDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StdDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _StdDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StdDrivers.delete_SwigPyIterator

    def value(self):
        return _StdDrivers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StdDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StdDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StdDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StdDrivers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StdDrivers.SwigPyIterator_copy(self)

    def next(self):
        return _StdDrivers.SwigPyIterator_next(self)

    def __next__(self):
        return _StdDrivers.SwigPyIterator___next__(self)

    def previous(self):
        return _StdDrivers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StdDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StdDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StdDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StdDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StdDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StdDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StdDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StdDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdDrivers.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StdDrivers.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StdDrivers.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdDrivers.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdDrivers.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StdDrivers.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StdDrivers.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StdDrivers.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdDrivers.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StdDrivers.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StdDrivers.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdDrivers.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdDrivers.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StdDrivers.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StdDrivers.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StdDrivers.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StdDrivers.ptr_to_number(item)
ptr_to_number = _StdDrivers.ptr_to_number

def HashCode(*args):
    return _StdDrivers.HashCode(*args)
HashCode = _StdDrivers.HashCode

def ptr_equal(a, b):
    return _StdDrivers.ptr_equal(a, b)
ptr_equal = _StdDrivers.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdLDrivers
else:
    import StdLDrivers
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdObjMgt
else:
    import StdObjMgt
del _swig_python_version_info
class StdDrivers_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Factory(*args):
        """
        Factory(Standard_GUID aGUID) -> Handle_Standard_Transient

        Depending from the ID, returns a list of storage
        or retrieval attribute drivers. Used for plugin

        :type aGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _StdDrivers.StdDrivers__Factory(*args)

    Factory = staticmethod(Factory)

    def DefineFormat(*args):
        """
        DefineFormat(Handle_TDocStd_Application theApp)

        Defines format "MDTV-Standard" and registers its retrieval driver
        in the specified application

        :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

        """
        return _StdDrivers.StdDrivers__DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def BindTypes(*args):
        """
        BindTypes(StdObjMgt_MapOfInstantiators theMap)

        Register types.

        :type theMap: OCC.wrapper.StdObjMgt.StdObjMgt_MapOfInstantiators

        """
        return _StdDrivers.StdDrivers__BindTypes(*args)

    BindTypes = staticmethod(BindTypes)

    def __init__(self):
        this = _StdDrivers.new_StdDrivers_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdDrivers.delete_StdDrivers_
StdDrivers__swigregister = _StdDrivers.StdDrivers__swigregister
StdDrivers__swigregister(StdDrivers_)

def StdDrivers__Factory(*args):
    """
    StdDrivers__Factory(Standard_GUID aGUID) -> Handle_Standard_Transient

    Depending from the ID, returns a list of storage
    or retrieval attribute drivers. Used for plugin

    :type aGUID: OCC.wrapper.Standard.Standard_GUID
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _StdDrivers.StdDrivers__Factory(*args)

def StdDrivers__DefineFormat(*args):
    """
    StdDrivers__DefineFormat(Handle_TDocStd_Application theApp)

    Defines format "MDTV-Standard" and registers its retrieval driver
    in the specified application

    :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

    """
    return _StdDrivers.StdDrivers__DefineFormat(*args)

def StdDrivers__BindTypes(*args):
    """
    StdDrivers__BindTypes(StdObjMgt_MapOfInstantiators theMap)

    Register types.

    :type theMap: OCC.wrapper.StdObjMgt.StdObjMgt_MapOfInstantiators

    """
    return _StdDrivers.StdDrivers__BindTypes(*args)

class StdDrivers_DocumentRetrievalDriver(StdLDrivers.StdLDrivers_DocumentRetrievalDriver):
    """retrieval driver of a Part document"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdDrivers_DocumentRetrievalDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdDrivers_DocumentRetrievalDriver(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdDrivers.StdDrivers_DocumentRetrievalDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdDrivers.StdDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdDrivers.StdDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self):
        """retrieval driver of a Part document"""
        this = _StdDrivers.new_StdDrivers_DocumentRetrievalDriver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _StdDrivers.delete_StdDrivers_DocumentRetrievalDriver
StdDrivers_DocumentRetrievalDriver_swigregister = _StdDrivers.StdDrivers_DocumentRetrievalDriver_swigregister
StdDrivers_DocumentRetrievalDriver_swigregister(StdDrivers_DocumentRetrievalDriver)

def StdDrivers_DocumentRetrievalDriver_get_type_name(*args):
    """
    StdDrivers_DocumentRetrievalDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdDrivers.StdDrivers_DocumentRetrievalDriver_get_type_name(*args)

def StdDrivers_DocumentRetrievalDriver_get_type_descriptor(*args):
    """
    StdDrivers_DocumentRetrievalDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdDrivers.StdDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)



