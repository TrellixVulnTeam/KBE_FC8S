# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESConvGeom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESConvGeom')
    _IGESConvGeom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESConvGeom', [dirname(__file__)])
        except ImportError:
            import _IGESConvGeom
            return _IGESConvGeom
        try:
            _mod = imp.load_module('_IGESConvGeom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESConvGeom = swig_import_helper()
    del swig_import_helper
else:
    import _IGESConvGeom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESConvGeom.delete_SwigPyIterator

    def value(self):
        return _IGESConvGeom.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESConvGeom.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESConvGeom.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESConvGeom.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESConvGeom.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESConvGeom.SwigPyIterator_copy(self)

    def next(self):
        return _IGESConvGeom.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESConvGeom.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESConvGeom.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESConvGeom.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESConvGeom.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESConvGeom.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESConvGeom.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESConvGeom.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESConvGeom.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESConvGeom.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESConvGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESConvGeom.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESConvGeom.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESConvGeom.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESConvGeom.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESConvGeom.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESConvGeom.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESConvGeom.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESConvGeom.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESConvGeom.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESConvGeom.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESConvGeom.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESConvGeom.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESConvGeom.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESConvGeom.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESConvGeom.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESConvGeom.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESConvGeom.ptr_to_number(item)
ptr_to_number = _IGESConvGeom.ptr_to_number

def HashCode(*args):
    return _IGESConvGeom.HashCode(*args)
HashCode = _IGESConvGeom.HashCode

def ptr_equal(a, b):
    return _IGESConvGeom.ptr_equal(a, b)
ptr_equal = _IGESConvGeom.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
class IGESConvGeom_(object):
    """
    This package is intended to gather geometric conversion which
    are not immediate but can be used for several purposes :
    mainly, standard conversion to and from CasCade geometric and
    topologic data, and adaptations of IGES files as required
    (as replacing Spline entities to BSpline equivalents).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SplineCurveFromIGES(*args):
        """
        SplineCurveFromIGES(Handle_IGESGeom_SplineCurve igesent, Standard_Real const epscoef, Standard_Real const epsgeom, Handle_Geom_BSplineCurve result) -> Standard_Integer

        basic tool to build curves from IGESGeom (arrays of points,
        Transformations, evaluation of points in a datum)
        Converts a SplineCurve from IGES to a BSplineCurve from CasCade
        <epscoef> gives tolerance to consider coefficient to be nul
        <epsgeom> gives tolerance to consider poles to be equal
        The returned value is a status with these possible values :
        - 0  OK, done
        - 1  the result is not guaranteed to be C0 (with <epsgeom>)
        - 2  SplineType not processed (allowed : max 3)
        (no result produced)
        - 3  error during creation of control points
        (no result produced)
        - 4  polynomial equation is not correct (no result produced)
        - 5  less than one segment (no result produced)

        :type igesent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :type epscoef: float
        :type epsgeom: float
        :type result: OCC.wrapper.Geom.Handle_Geom_BSplineCurve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESConvGeom.IGESConvGeom__SplineCurveFromIGES(*args)

    SplineCurveFromIGES = staticmethod(SplineCurveFromIGES)

    def IncreaseCurveContinuity(*args):
        """
        IncreaseCurveContinuity(Handle_Geom_BSplineCurve curve, Standard_Real const epsgeom, Standard_Integer const continuity=2) -> Standard_Integer
        IncreaseCurveContinuity(Handle_Geom2d_BSplineCurve curve, Standard_Real const epsgeom, Standard_Integer const continuity=2) -> Standard_Integer

        :type curve: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
        :type epsgeom: float
        :type continuity: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESConvGeom.IGESConvGeom__IncreaseCurveContinuity(*args)

    IncreaseCurveContinuity = staticmethod(IncreaseCurveContinuity)

    def SplineSurfaceFromIGES(*args):
        """
        SplineSurfaceFromIGES(Handle_IGESGeom_SplineSurface igesent, Standard_Real const epscoef, Standard_Real const epsgeom, Handle_Geom_BSplineSurface result) -> Standard_Integer

        Converts a SplineSurface from IGES to a BSplineSurface from CasCade
        <epscoef> gives tolerance to consider coefficient to be nul
        <epsgeom> gives tolerance to consider poles to be equal
        The returned value is a status with these possible values :
        - 0  OK, done
        - 1  the result is not guaranteed to be C0 (with <epsgeom>)
        - 2  degree is not compatible with code boundary type
        (warning) but C0 is OK
        - 3  idem but C0 is not guaranteed (warning)
        - 4  degree has been determined to be nul, either in U or V
        (no result produced)
        - 5  less than one segment in U or V (no result produced)

        :type igesent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :type epscoef: float
        :type epsgeom: float
        :type result: OCC.wrapper.Geom.Handle_Geom_BSplineSurface
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESConvGeom.IGESConvGeom__SplineSurfaceFromIGES(*args)

    SplineSurfaceFromIGES = staticmethod(SplineSurfaceFromIGES)

    def IncreaseSurfaceContinuity(*args):
        """
        IncreaseSurfaceContinuity(Handle_Geom_BSplineSurface surface, Standard_Real const epsgeom, Standard_Integer const continuity=2) -> Standard_Integer

        Tries to increase Surface continuity with tolerance <epsgeom>
        <continuity> is the new desired continuity, can be 1 or 2
        (more than 2 is considered as 2).
        Returns the new maximum continuity obtained on all knots.
        Remark that, for instance with <continuity> = 2, even if not
        all the knots can be passed to C2, all knots which can be are.

        :type surface: OCC.wrapper.Geom.Handle_Geom_BSplineSurface
        :type epsgeom: float
        :type continuity: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESConvGeom.IGESConvGeom__IncreaseSurfaceContinuity(*args)

    IncreaseSurfaceContinuity = staticmethod(IncreaseSurfaceContinuity)

    def __init__(self):
        """
        This package is intended to gather geometric conversion which
        are not immediate but can be used for several purposes :
        mainly, standard conversion to and from CasCade geometric and
        topologic data, and adaptations of IGES files as required
        (as replacing Spline entities to BSpline equivalents).
        """
        this = _IGESConvGeom.new_IGESConvGeom_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESConvGeom.delete_IGESConvGeom_
IGESConvGeom__swigregister = _IGESConvGeom.IGESConvGeom__swigregister
IGESConvGeom__swigregister(IGESConvGeom_)

def IGESConvGeom__SplineCurveFromIGES(*args):
    """
    IGESConvGeom__SplineCurveFromIGES(Handle_IGESGeom_SplineCurve igesent, Standard_Real const epscoef, Standard_Real const epsgeom, Handle_Geom_BSplineCurve result) -> Standard_Integer

    basic tool to build curves from IGESGeom (arrays of points,
    Transformations, evaluation of points in a datum)
    Converts a SplineCurve from IGES to a BSplineCurve from CasCade
    <epscoef> gives tolerance to consider coefficient to be nul
    <epsgeom> gives tolerance to consider poles to be equal
    The returned value is a status with these possible values :
    - 0  OK, done
    - 1  the result is not guaranteed to be C0 (with <epsgeom>)
    - 2  SplineType not processed (allowed : max 3)
    (no result produced)
    - 3  error during creation of control points
    (no result produced)
    - 4  polynomial equation is not correct (no result produced)
    - 5  less than one segment (no result produced)

    :type igesent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
    :type epscoef: float
    :type epsgeom: float
    :type result: OCC.wrapper.Geom.Handle_Geom_BSplineCurve
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESConvGeom.IGESConvGeom__SplineCurveFromIGES(*args)

def IGESConvGeom__IncreaseCurveContinuity(*args):
    """
    IncreaseCurveContinuity(Handle_Geom_BSplineCurve curve, Standard_Real const epsgeom, Standard_Integer const continuity=2) -> Standard_Integer
    IGESConvGeom__IncreaseCurveContinuity(Handle_Geom2d_BSplineCurve curve, Standard_Real const epsgeom, Standard_Integer const continuity=2) -> Standard_Integer

    :type curve: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
    :type epsgeom: float
    :type continuity: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESConvGeom.IGESConvGeom__IncreaseCurveContinuity(*args)

def IGESConvGeom__SplineSurfaceFromIGES(*args):
    """
    IGESConvGeom__SplineSurfaceFromIGES(Handle_IGESGeom_SplineSurface igesent, Standard_Real const epscoef, Standard_Real const epsgeom, Handle_Geom_BSplineSurface result) -> Standard_Integer

    Converts a SplineSurface from IGES to a BSplineSurface from CasCade
    <epscoef> gives tolerance to consider coefficient to be nul
    <epsgeom> gives tolerance to consider poles to be equal
    The returned value is a status with these possible values :
    - 0  OK, done
    - 1  the result is not guaranteed to be C0 (with <epsgeom>)
    - 2  degree is not compatible with code boundary type
    (warning) but C0 is OK
    - 3  idem but C0 is not guaranteed (warning)
    - 4  degree has been determined to be nul, either in U or V
    (no result produced)
    - 5  less than one segment in U or V (no result produced)

    :type igesent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
    :type epscoef: float
    :type epsgeom: float
    :type result: OCC.wrapper.Geom.Handle_Geom_BSplineSurface
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESConvGeom.IGESConvGeom__SplineSurfaceFromIGES(*args)

def IGESConvGeom__IncreaseSurfaceContinuity(*args):
    """
    IGESConvGeom__IncreaseSurfaceContinuity(Handle_Geom_BSplineSurface surface, Standard_Real const epsgeom, Standard_Integer const continuity=2) -> Standard_Integer

    Tries to increase Surface continuity with tolerance <epsgeom>
    <continuity> is the new desired continuity, can be 1 or 2
    (more than 2 is considered as 2).
    Returns the new maximum continuity obtained on all knots.
    Remark that, for instance with <continuity> = 2, even if not
    all the knots can be passed to C2, all knots which can be are.

    :type surface: OCC.wrapper.Geom.Handle_Geom_BSplineSurface
    :type epsgeom: float
    :type continuity: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESConvGeom.IGESConvGeom__IncreaseSurfaceContinuity(*args)

class IGESConvGeom_GeomBuilder(object):
    """
    This class provides some useful basic tools to build IGESGeom
    curves, especially :
    define a curve in a plane in 3D space (ex. Circular or Conic
    arc, or Copious Data defined in 2D)
    make a CopiousData from a list of points/vectors
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESConvGeom_GeomBuilder self) -> IGESConvGeom_GeomBuilder

        Creates a GeomBuilder at initial state.


        """
        this = _IGESConvGeom.new_IGESConvGeom_GeomBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(IGESConvGeom_GeomBuilder self)

        Clears list of Points/Vectors and data about Transformation


        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_Clear(self, *args)


    def AddXY(self, *args):
        """
        AddXY(IGESConvGeom_GeomBuilder self, gp_XY val)

        Adds a XY (Z=0) to the list of points

        :type val: OCC.wrapper.gp.gp_XY

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_AddXY(self, *args)


    def AddXYZ(self, *args):
        """
        AddXYZ(IGESConvGeom_GeomBuilder self, gp_XYZ val)

        Adds a XYZ to the list of points

        :type val: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_AddXYZ(self, *args)


    def AddVec(self, *args):
        """
        AddVec(IGESConvGeom_GeomBuilder self, gp_XYZ val)

        Adds a Vector part to the list of points. It will be used
        for CopiousData, datatype=3, only.
        AddXY and AddXYZ consider a null vector part (0,0,0)
        AddVec adds to the last added XY or XYZ

        :type val: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_AddVec(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(IGESConvGeom_GeomBuilder self) -> Standard_Integer

        Returns the count of already recorded points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_NbPoints(self, *args)


    def Point(self, *args):
        """
        Point(IGESConvGeom_GeomBuilder self, Standard_Integer const num) -> gp_XYZ

        Returns a point given its rank (if added as XY, Z will be 0)

        :type num: int
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_Point(self, *args)


    def MakeCopiousData(self, *args):
        """
        MakeCopiousData(IGESConvGeom_GeomBuilder self, Standard_Integer const datatype, Standard_Boolean const polyline) -> Handle_IGESGeom_CopiousData

        Makes a CopiousData with the list of recorded Points/Vectors
        according to <datatype>, which must be 1,2 or 3
        If <polyline> is given True, the CopiousData is coded as a
        Polyline, but <datatype> must not be 3
        <datatype> = 1 : Common Z is computed as average of all Z
        <datatype> = 1 or 2 : Vectors are ignored

        :type datatype: int
        :type polyline: bool
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_MakeCopiousData(self, *args)


    def Position(self, *args):
        """
        Position(IGESConvGeom_GeomBuilder self) -> gp_Trsf

        Returns the Position in which the method EvalXYZ will
        evaluate a XYZ. It can be regarded as defining a local system.
        It is initially set to Identity

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_Position(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(IGESConvGeom_GeomBuilder self, gp_Trsf pos)
        SetPosition(IGESConvGeom_GeomBuilder self, gp_Ax3 pos)
        SetPosition(IGESConvGeom_GeomBuilder self, gp_Ax2 pos)
        SetPosition(IGESConvGeom_GeomBuilder self, gp_Ax1 pos)

        Sets final position from an Ax1
        (this means that origin point and Z-axis are defined, the
        other axes are defined arbitrarily)

        :type pos: OCC.wrapper.gp.gp_Ax1

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_SetPosition(self, *args)


    def IsIdentity(self, *args):
        """
        IsIdentity(IGESConvGeom_GeomBuilder self) -> Standard_Boolean

        Returns True if the Position is Identity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_IsIdentity(self, *args)


    def IsTranslation(self, *args):
        """
        IsTranslation(IGESConvGeom_GeomBuilder self) -> Standard_Boolean

        Returns True if the Position is a Translation only
        Remark : Identity and ZOnly will answer True

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_IsTranslation(self, *args)


    def IsZOnly(self, *args):
        """
        IsZOnly(IGESConvGeom_GeomBuilder self) -> Standard_Boolean

        Returns True if the Position corresponds to a Z-Displacement,
        i.e. is a Translation only, and only on Z
        Remark : Identity will answer True

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_IsZOnly(self, *args)


    def EvalXYZ(self, *args):
        """
        EvalXYZ(IGESConvGeom_GeomBuilder self, gp_XYZ val)

        Evaluates a XYZ value in the Position already defined.
        Returns the transformed coordinates.
        For a 2D definition, X,Y will then be used to define a XY and
        Z will be regarded as a Z Displacement (can be ignored)

        :type val: OCC.wrapper.gp.gp_XYZ
        :type X: float
        :type Y: float
        :type Z: float

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_EvalXYZ(self, *args)


    def MakeTransformation(self, *args):
        """
        MakeTransformation(IGESConvGeom_GeomBuilder self, Standard_Real const unit=1) -> Handle_IGESGeom_TransformationMatrix

        Returns the IGES Transformation which corresponds to the
        Position. Even if it is an Identity : IsIdentity should be
        tested first.
        <unit> is the unit value in which the model is created :
        it is used to convert translation part

        :type unit: float
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix

        """
        return _IGESConvGeom.IGESConvGeom_GeomBuilder_MakeTransformation(self, *args)

    __swig_destroy__ = _IGESConvGeom.delete_IGESConvGeom_GeomBuilder
IGESConvGeom_GeomBuilder_swigregister = _IGESConvGeom.IGESConvGeom_GeomBuilder_swigregister
IGESConvGeom_GeomBuilder_swigregister(IGESConvGeom_GeomBuilder)



