# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_UnitsAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UnitsAPI')
    _UnitsAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UnitsAPI', [dirname(__file__)])
        except ImportError:
            import _UnitsAPI
            return _UnitsAPI
        try:
            _mod = imp.load_module('_UnitsAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UnitsAPI = swig_import_helper()
    del swig_import_helper
else:
    import _UnitsAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UnitsAPI.delete_SwigPyIterator

    def value(self):
        return _UnitsAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _UnitsAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _UnitsAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _UnitsAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _UnitsAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _UnitsAPI.SwigPyIterator_copy(self)

    def next(self):
        return _UnitsAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _UnitsAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _UnitsAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _UnitsAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _UnitsAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _UnitsAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _UnitsAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _UnitsAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _UnitsAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _UnitsAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _UnitsAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _UnitsAPI.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_UnitsAPI.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _UnitsAPI.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _UnitsAPI.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UnitsAPI.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _UnitsAPI.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _UnitsAPI.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _UnitsAPI.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _UnitsAPI.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_UnitsAPI.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _UnitsAPI.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _UnitsAPI.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UnitsAPI.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _UnitsAPI.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _UnitsAPI.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _UnitsAPI.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _UnitsAPI.ptr_to_number(item)
ptr_to_number = _UnitsAPI.ptr_to_number

def HashCode(*args):
    return _UnitsAPI.HashCode(*args)
HashCode = _UnitsAPI.HashCode

def ptr_equal(a, b):
    return _UnitsAPI.ptr_equal(a, b)
ptr_equal = _UnitsAPI.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Units
else:
    import Units
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
UnitsAPI_DEFAULT = _UnitsAPI.UnitsAPI_DEFAULT
UnitsAPI_SI = _UnitsAPI.UnitsAPI_SI
UnitsAPI_MDTV = _UnitsAPI.UnitsAPI_MDTV
class UnitsAPI_(object):
    """
    The UnitsAPI global functions are used to
    convert a value from any unit into another unit.
    Principles
    Conversion is executed among three unit systems:
    -   the SI System
    -   the user's Local System
    -   the user's Current System.
    The SI System is the standard international unit
    system. It is indicated by SI in the synopses of
    the UnitsAPI functions.
    The MDTV System corresponds to the SI
    international standard but the length unit and all
    its derivatives use millimeters instead of the meters.
    Both systems are proposed by Open CASCADE;
    the SI System is the standard option. By
    selecting one of these two systems, the user
    defines his Local System through the
    SetLocalSystem function. The Local System is
    indicated by LS in the synopses of the UnitsAPI functions.
    The user's Local System units can be modified in
    the working environment. The user defines his
    Current System by modifying its units through
    the SetCurrentUnit function. The Current
    System is indicated by Current in the synopses
    of the UnitsAPI functions.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurrentToLS(*args):
        """
        CurrentToLS(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

        Converts the current unit value to the local system units value.
        Example: CurrentToLS(1.,"LENGTH") returns 1000. if the current length unit
        is meter and LocalSystem is MDTV.

        :type aData: float
        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__CurrentToLS(*args)

    CurrentToLS = staticmethod(CurrentToLS)

    def CurrentToSI(*args):
        """
        CurrentToSI(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

        Converts the current unit value to the SI system units value.
        Example: CurrentToSI(1.,"LENGTH") returns 0.001 if current length unit
        is millimeter.

        :type aData: float
        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__CurrentToSI(*args)

    CurrentToSI = staticmethod(CurrentToSI)

    def CurrentFromLS(*args):
        """
        CurrentFromLS(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

        Converts the local system units value to the current unit value.
        Example: CurrentFromLS(1000.,"LENGTH") returns 1. if current length unit
        is meter and LocalSystem is MDTV.

        :type aData: float
        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__CurrentFromLS(*args)

    CurrentFromLS = staticmethod(CurrentFromLS)

    def CurrentFromSI(*args):
        """
        CurrentFromSI(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

        Converts the SI system units value to the current unit value.
        Example: CurrentFromSI(0.001,"LENGTH") returns 1 if current length unit
        is millimeter.

        :type aData: float
        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__CurrentFromSI(*args)

    CurrentFromSI = staticmethod(CurrentFromSI)

    def AnyToLS(*args):
        """
        AnyToLS(Standard_Real const aData, Standard_CString const aUnit) -> Standard_Real
        AnyToLS(Standard_Real const aData, Standard_CString const aUnit, Handle_Units_Dimensions aDim) -> Standard_Real

        Converts the local unit value to the local system units value.
        and gives the associated dimension of the unit

        :type aData: float
        :type aUnit: OCC.wrapper.Standard.Standard_CString
        :type aDim: OCC.wrapper.Units.Handle_Units_Dimensions
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__AnyToLS(*args)

    AnyToLS = staticmethod(AnyToLS)

    def AnyToSI(*args):
        """
        AnyToSI(Standard_Real const aData, Standard_CString const aUnit) -> Standard_Real
        AnyToSI(Standard_Real const aData, Standard_CString const aUnit, Handle_Units_Dimensions aDim) -> Standard_Real

        Converts the local unit value to the SI system units value.
        and gives the associated dimension of the unit

        :type aData: float
        :type aUnit: OCC.wrapper.Standard.Standard_CString
        :type aDim: OCC.wrapper.Units.Handle_Units_Dimensions
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__AnyToSI(*args)

    AnyToSI = staticmethod(AnyToSI)

    def AnyFromLS(*args):
        """
        AnyFromLS(Standard_Real const aData, Standard_CString const aUnit) -> Standard_Real

        Converts the local system units value to the local unit value.
        Example: AnyFromLS(25.4,"in.") returns 1. if the LocalSystem is MDTV.
        Note: aUnit is also used to identify the type of physical quantity to convert.

        :type aData: float
        :type aUnit: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__AnyFromLS(*args)

    AnyFromLS = staticmethod(AnyFromLS)

    def AnyFromSI(*args):
        """
        AnyFromSI(Standard_Real const aData, Standard_CString const aUnit) -> Standard_Real

        Converts the SI system units value to the local unit value.
        Example: AnyFromSI(0.0254,"in.") returns 0.001
        Note: aUnit is also used to identify the type of physical quantity to convert.

        :type aData: float
        :type aUnit: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__AnyFromSI(*args)

    AnyFromSI = staticmethod(AnyFromSI)

    def CurrentToAny(*args):
        """
        CurrentToAny(Standard_Real const aData, Standard_CString const aQuantity, Standard_CString const aUnit) -> Standard_Real

        Converts the aData value expressed in the
        current unit for the working environment, as
        defined for the physical quantity aQuantity by the
        last call to the SetCurrentUnit function, into the unit aUnit.

        :type aData: float
        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :type aUnit: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__CurrentToAny(*args)

    CurrentToAny = staticmethod(CurrentToAny)

    def CurrentFromAny(*args):
        """
        CurrentFromAny(Standard_Real const aData, Standard_CString const aQuantity, Standard_CString const aUnit) -> Standard_Real

        Converts the aData value expressed in the unit
        aUnit, into the current unit for the working
        environment, as defined for the physical quantity
        aQuantity by the last call to the SetCurrentUnit function.

        :type aData: float
        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :type aUnit: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__CurrentFromAny(*args)

    CurrentFromAny = staticmethod(CurrentFromAny)

    def AnyToAny(*args):
        """
        AnyToAny(Standard_Real const aData, Standard_CString const aUnit1, Standard_CString const aUnit2) -> Standard_Real

        Converts the local unit value to another local unit value.
        Example: AnyToAny(0.0254,"in.","millimeter") returns 1. ;

        :type aData: float
        :type aUnit1: OCC.wrapper.Standard.Standard_CString
        :type aUnit2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__AnyToAny(*args)

    AnyToAny = staticmethod(AnyToAny)

    def LSToSI(*args):
        """
        LSToSI(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

        Converts the local system units value to the SI system unit value.
        Example: LSToSI(1.,"LENGTH") returns 0.001 if the local system
        length unit is millimeter.

        :type aData: float
        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__LSToSI(*args)

    LSToSI = staticmethod(LSToSI)

    def SIToLS(*args):
        """
        SIToLS(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

        Converts the SI system unit value to the local system units value.
        Example: SIToLS(1.,"LENGTH") returns 1000. if the local system
        length unit is millimeter.

        :type aData: float
        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsAPI.UnitsAPI__SIToLS(*args)

    SIToLS = staticmethod(SIToLS)

    def SetLocalSystem(*args):
        """
        SetLocalSystem(UnitsAPI_SystemUnits const aSystemUnit=UnitsAPI_SI)

        Sets the local system units.
        Example: SetLocalSystem(UnitsAPI_MDTV)

        :type aSystemUnit: OCC.wrapper.UnitsAPI.UnitsAPI_SystemUnits

        """
        return _UnitsAPI.UnitsAPI__SetLocalSystem(*args)

    SetLocalSystem = staticmethod(SetLocalSystem)

    def LocalSystem(*args):
        """
        LocalSystem() -> UnitsAPI_SystemUnits

        Returns the current local system units.

        :rtype: OCC.wrapper.UnitsAPI.UnitsAPI_SystemUnits

        """
        return _UnitsAPI.UnitsAPI__LocalSystem(*args)

    LocalSystem = staticmethod(LocalSystem)

    def SetCurrentUnit(*args):
        """
        SetCurrentUnit(Standard_CString const aQuantity, Standard_CString const aUnit)

        Sets the current unit dimension <aUnit> to the unit quantity <aQuantity>.
        Example: SetCurrentUnit("LENGTH","millimeter")

        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :type aUnit: OCC.wrapper.Standard.Standard_CString

        """
        return _UnitsAPI.UnitsAPI__SetCurrentUnit(*args)

    SetCurrentUnit = staticmethod(SetCurrentUnit)

    def CurrentUnit(*args):
        """
        CurrentUnit(Standard_CString const aQuantity) -> Standard_CString

        Returns the current unit dimension <aUnit> from the unit quantity <aQuantity>.

        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _UnitsAPI.UnitsAPI__CurrentUnit(*args)

    CurrentUnit = staticmethod(CurrentUnit)

    def Save(*args):
        """
        Save()

        saves the units in the file .CurrentUnits of the directory pointed by the
        CSF_CurrentUnitsUserDefaults environment variable.


        """
        return _UnitsAPI.UnitsAPI__Save(*args)

    Save = staticmethod(Save)

    def Reload(*args):
        """Reload()"""
        return _UnitsAPI.UnitsAPI__Reload(*args)

    Reload = staticmethod(Reload)

    def Dimensions(*args):
        """
        Dimensions(Standard_CString const aQuantity) -> Handle_Units_Dimensions

        return the dimension associated to the quantity

        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__Dimensions(*args)

    Dimensions = staticmethod(Dimensions)

    def DimensionLess(*args):
        """
        DimensionLess() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionLess(*args)

    DimensionLess = staticmethod(DimensionLess)

    def DimensionMass(*args):
        """
        DimensionMass() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionMass(*args)

    DimensionMass = staticmethod(DimensionMass)

    def DimensionLength(*args):
        """
        DimensionLength() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionLength(*args)

    DimensionLength = staticmethod(DimensionLength)

    def DimensionTime(*args):
        """
        DimensionTime() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionTime(*args)

    DimensionTime = staticmethod(DimensionTime)

    def DimensionElectricCurrent(*args):
        """
        DimensionElectricCurrent() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionElectricCurrent(*args)

    DimensionElectricCurrent = staticmethod(DimensionElectricCurrent)

    def DimensionThermodynamicTemperature(*args):
        """
        DimensionThermodynamicTemperature() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionThermodynamicTemperature(*args)

    DimensionThermodynamicTemperature = staticmethod(DimensionThermodynamicTemperature)

    def DimensionAmountOfSubstance(*args):
        """
        DimensionAmountOfSubstance() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionAmountOfSubstance(*args)

    DimensionAmountOfSubstance = staticmethod(DimensionAmountOfSubstance)

    def DimensionLuminousIntensity(*args):
        """
        DimensionLuminousIntensity() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionLuminousIntensity(*args)

    DimensionLuminousIntensity = staticmethod(DimensionLuminousIntensity)

    def DimensionPlaneAngle(*args):
        """
        DimensionPlaneAngle() -> Handle_Units_Dimensions

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionPlaneAngle(*args)

    DimensionPlaneAngle = staticmethod(DimensionPlaneAngle)

    def DimensionSolidAngle(*args):
        """
        DimensionSolidAngle() -> Handle_Units_Dimensions

        Returns the basic dimensions.

        :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

        """
        return _UnitsAPI.UnitsAPI__DimensionSolidAngle(*args)

    DimensionSolidAngle = staticmethod(DimensionSolidAngle)

    def Check(*args):
        """
        Check(Standard_CString const aQuantity, Standard_CString const aUnit) -> Standard_Boolean

        Checks the coherence between the quantity <aQuantity>
        and the unit <aUnits> in the current system and
        returns FALSE when it's WRONG.

        :type aQuantity: OCC.wrapper.Standard.Standard_CString
        :type aUnit: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _UnitsAPI.UnitsAPI__Check(*args)

    Check = staticmethod(Check)

    def __init__(self):
        """
        The UnitsAPI global functions are used to
        convert a value from any unit into another unit.
        Principles
        Conversion is executed among three unit systems:
        -   the SI System
        -   the user's Local System
        -   the user's Current System.
        The SI System is the standard international unit
        system. It is indicated by SI in the synopses of
        the UnitsAPI functions.
        The MDTV System corresponds to the SI
        international standard but the length unit and all
        its derivatives use millimeters instead of the meters.
        Both systems are proposed by Open CASCADE;
        the SI System is the standard option. By
        selecting one of these two systems, the user
        defines his Local System through the
        SetLocalSystem function. The Local System is
        indicated by LS in the synopses of the UnitsAPI functions.
        The user's Local System units can be modified in
        the working environment. The user defines his
        Current System by modifying its units through
        the SetCurrentUnit function. The Current
        System is indicated by Current in the synopses
        of the UnitsAPI functions.
        """
        this = _UnitsAPI.new_UnitsAPI_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UnitsAPI.delete_UnitsAPI_
UnitsAPI__swigregister = _UnitsAPI.UnitsAPI__swigregister
UnitsAPI__swigregister(UnitsAPI_)

def UnitsAPI__CurrentToLS(*args):
    """
    UnitsAPI__CurrentToLS(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

    Converts the current unit value to the local system units value.
    Example: CurrentToLS(1.,"LENGTH") returns 1000. if the current length unit
    is meter and LocalSystem is MDTV.

    :type aData: float
    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__CurrentToLS(*args)

def UnitsAPI__CurrentToSI(*args):
    """
    UnitsAPI__CurrentToSI(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

    Converts the current unit value to the SI system units value.
    Example: CurrentToSI(1.,"LENGTH") returns 0.001 if current length unit
    is millimeter.

    :type aData: float
    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__CurrentToSI(*args)

def UnitsAPI__CurrentFromLS(*args):
    """
    UnitsAPI__CurrentFromLS(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

    Converts the local system units value to the current unit value.
    Example: CurrentFromLS(1000.,"LENGTH") returns 1. if current length unit
    is meter and LocalSystem is MDTV.

    :type aData: float
    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__CurrentFromLS(*args)

def UnitsAPI__CurrentFromSI(*args):
    """
    UnitsAPI__CurrentFromSI(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

    Converts the SI system units value to the current unit value.
    Example: CurrentFromSI(0.001,"LENGTH") returns 1 if current length unit
    is millimeter.

    :type aData: float
    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__CurrentFromSI(*args)

def UnitsAPI__AnyToLS(*args):
    """
    AnyToLS(Standard_Real const aData, Standard_CString const aUnit) -> Standard_Real
    UnitsAPI__AnyToLS(Standard_Real const aData, Standard_CString const aUnit, Handle_Units_Dimensions aDim) -> Standard_Real

    Converts the local unit value to the local system units value.
    and gives the associated dimension of the unit

    :type aData: float
    :type aUnit: OCC.wrapper.Standard.Standard_CString
    :type aDim: OCC.wrapper.Units.Handle_Units_Dimensions
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__AnyToLS(*args)

def UnitsAPI__AnyToSI(*args):
    """
    AnyToSI(Standard_Real const aData, Standard_CString const aUnit) -> Standard_Real
    UnitsAPI__AnyToSI(Standard_Real const aData, Standard_CString const aUnit, Handle_Units_Dimensions aDim) -> Standard_Real

    Converts the local unit value to the SI system units value.
    and gives the associated dimension of the unit

    :type aData: float
    :type aUnit: OCC.wrapper.Standard.Standard_CString
    :type aDim: OCC.wrapper.Units.Handle_Units_Dimensions
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__AnyToSI(*args)

def UnitsAPI__AnyFromLS(*args):
    """
    UnitsAPI__AnyFromLS(Standard_Real const aData, Standard_CString const aUnit) -> Standard_Real

    Converts the local system units value to the local unit value.
    Example: AnyFromLS(25.4,"in.") returns 1. if the LocalSystem is MDTV.
    Note: aUnit is also used to identify the type of physical quantity to convert.

    :type aData: float
    :type aUnit: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__AnyFromLS(*args)

def UnitsAPI__AnyFromSI(*args):
    """
    UnitsAPI__AnyFromSI(Standard_Real const aData, Standard_CString const aUnit) -> Standard_Real

    Converts the SI system units value to the local unit value.
    Example: AnyFromSI(0.0254,"in.") returns 0.001
    Note: aUnit is also used to identify the type of physical quantity to convert.

    :type aData: float
    :type aUnit: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__AnyFromSI(*args)

def UnitsAPI__CurrentToAny(*args):
    """
    UnitsAPI__CurrentToAny(Standard_Real const aData, Standard_CString const aQuantity, Standard_CString const aUnit) -> Standard_Real

    Converts the aData value expressed in the
    current unit for the working environment, as
    defined for the physical quantity aQuantity by the
    last call to the SetCurrentUnit function, into the unit aUnit.

    :type aData: float
    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :type aUnit: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__CurrentToAny(*args)

def UnitsAPI__CurrentFromAny(*args):
    """
    UnitsAPI__CurrentFromAny(Standard_Real const aData, Standard_CString const aQuantity, Standard_CString const aUnit) -> Standard_Real

    Converts the aData value expressed in the unit
    aUnit, into the current unit for the working
    environment, as defined for the physical quantity
    aQuantity by the last call to the SetCurrentUnit function.

    :type aData: float
    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :type aUnit: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__CurrentFromAny(*args)

def UnitsAPI__AnyToAny(*args):
    """
    UnitsAPI__AnyToAny(Standard_Real const aData, Standard_CString const aUnit1, Standard_CString const aUnit2) -> Standard_Real

    Converts the local unit value to another local unit value.
    Example: AnyToAny(0.0254,"in.","millimeter") returns 1. ;

    :type aData: float
    :type aUnit1: OCC.wrapper.Standard.Standard_CString
    :type aUnit2: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__AnyToAny(*args)

def UnitsAPI__LSToSI(*args):
    """
    UnitsAPI__LSToSI(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

    Converts the local system units value to the SI system unit value.
    Example: LSToSI(1.,"LENGTH") returns 0.001 if the local system
    length unit is millimeter.

    :type aData: float
    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__LSToSI(*args)

def UnitsAPI__SIToLS(*args):
    """
    UnitsAPI__SIToLS(Standard_Real const aData, Standard_CString const aQuantity) -> Standard_Real

    Converts the SI system unit value to the local system units value.
    Example: SIToLS(1.,"LENGTH") returns 1000. if the local system
    length unit is millimeter.

    :type aData: float
    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsAPI.UnitsAPI__SIToLS(*args)

def UnitsAPI__SetLocalSystem(*args):
    """
    UnitsAPI__SetLocalSystem(UnitsAPI_SystemUnits const aSystemUnit=UnitsAPI_SI)

    Sets the local system units.
    Example: SetLocalSystem(UnitsAPI_MDTV)

    :type aSystemUnit: OCC.wrapper.UnitsAPI.UnitsAPI_SystemUnits

    """
    return _UnitsAPI.UnitsAPI__SetLocalSystem(*args)

def UnitsAPI__LocalSystem(*args):
    """
    UnitsAPI__LocalSystem() -> UnitsAPI_SystemUnits

    Returns the current local system units.

    :rtype: OCC.wrapper.UnitsAPI.UnitsAPI_SystemUnits

    """
    return _UnitsAPI.UnitsAPI__LocalSystem(*args)

def UnitsAPI__SetCurrentUnit(*args):
    """
    UnitsAPI__SetCurrentUnit(Standard_CString const aQuantity, Standard_CString const aUnit)

    Sets the current unit dimension <aUnit> to the unit quantity <aQuantity>.
    Example: SetCurrentUnit("LENGTH","millimeter")

    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :type aUnit: OCC.wrapper.Standard.Standard_CString

    """
    return _UnitsAPI.UnitsAPI__SetCurrentUnit(*args)

def UnitsAPI__CurrentUnit(*args):
    """
    UnitsAPI__CurrentUnit(Standard_CString const aQuantity) -> Standard_CString

    Returns the current unit dimension <aUnit> from the unit quantity <aQuantity>.

    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _UnitsAPI.UnitsAPI__CurrentUnit(*args)

def UnitsAPI__Save(*args):
    """
    UnitsAPI__Save()

    saves the units in the file .CurrentUnits of the directory pointed by the
    CSF_CurrentUnitsUserDefaults environment variable.


    """
    return _UnitsAPI.UnitsAPI__Save(*args)

def UnitsAPI__Reload(*args):
    """UnitsAPI__Reload()"""
    return _UnitsAPI.UnitsAPI__Reload(*args)

def UnitsAPI__Dimensions(*args):
    """
    UnitsAPI__Dimensions(Standard_CString const aQuantity) -> Handle_Units_Dimensions

    return the dimension associated to the quantity

    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__Dimensions(*args)

def UnitsAPI__DimensionLess(*args):
    """
    UnitsAPI__DimensionLess() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionLess(*args)

def UnitsAPI__DimensionMass(*args):
    """
    UnitsAPI__DimensionMass() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionMass(*args)

def UnitsAPI__DimensionLength(*args):
    """
    UnitsAPI__DimensionLength() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionLength(*args)

def UnitsAPI__DimensionTime(*args):
    """
    UnitsAPI__DimensionTime() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionTime(*args)

def UnitsAPI__DimensionElectricCurrent(*args):
    """
    UnitsAPI__DimensionElectricCurrent() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionElectricCurrent(*args)

def UnitsAPI__DimensionThermodynamicTemperature(*args):
    """
    UnitsAPI__DimensionThermodynamicTemperature() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionThermodynamicTemperature(*args)

def UnitsAPI__DimensionAmountOfSubstance(*args):
    """
    UnitsAPI__DimensionAmountOfSubstance() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionAmountOfSubstance(*args)

def UnitsAPI__DimensionLuminousIntensity(*args):
    """
    UnitsAPI__DimensionLuminousIntensity() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionLuminousIntensity(*args)

def UnitsAPI__DimensionPlaneAngle(*args):
    """
    UnitsAPI__DimensionPlaneAngle() -> Handle_Units_Dimensions

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionPlaneAngle(*args)

def UnitsAPI__DimensionSolidAngle(*args):
    """
    UnitsAPI__DimensionSolidAngle() -> Handle_Units_Dimensions

    Returns the basic dimensions.

    :rtype: OCC.wrapper.Units.Handle_Units_Dimensions

    """
    return _UnitsAPI.UnitsAPI__DimensionSolidAngle(*args)

def UnitsAPI__Check(*args):
    """
    UnitsAPI__Check(Standard_CString const aQuantity, Standard_CString const aUnit) -> Standard_Boolean

    Checks the coherence between the quantity <aQuantity>
    and the unit <aUnits> in the current system and
    returns FALSE when it's WRONG.

    :type aQuantity: OCC.wrapper.Standard.Standard_CString
    :type aUnit: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _UnitsAPI.UnitsAPI__Check(*args)



