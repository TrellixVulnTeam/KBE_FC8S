# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMDocStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMDocStd')
    _XmlMDocStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMDocStd', [dirname(__file__)])
        except ImportError:
            import _XmlMDocStd
            return _XmlMDocStd
        try:
            _mod = imp.load_module('_XmlMDocStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMDocStd = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMDocStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDocStd.delete_SwigPyIterator

    def value(self):
        return _XmlMDocStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMDocStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMDocStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMDocStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMDocStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMDocStd.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMDocStd.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMDocStd.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMDocStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMDocStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMDocStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMDocStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMDocStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMDocStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMDocStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMDocStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMDocStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMDocStd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlMDocStd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMDocStd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMDocStd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDocStd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlMDocStd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlMDocStd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlMDocStd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMDocStd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlMDocStd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMDocStd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMDocStd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDocStd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlMDocStd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlMDocStd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlMDocStd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlMDocStd.ptr_to_number(item)
ptr_to_number = _XmlMDocStd.ptr_to_number

def HashCode(*args):
    return _XmlMDocStd.HashCode(*args)
HashCode = _XmlMDocStd.HashCode

def ptr_equal(a, b):
    return _XmlMDocStd.ptr_equal(a, b)
ptr_equal = _XmlMDocStd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlMDF
else:
    import XmlMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class XmlMDocStd_XLinkDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDocStd_XLinkDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDocStd_XLinkDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDocStd_XLinkDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDocStd_XLinkDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDocStd.new_XmlMDocStd_XLinkDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDocStd_XLinkDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDocStd.XmlMDocStd_XLinkDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDocStd_XLinkDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDocStd_XLinkDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDocStd.XmlMDocStd_XLinkDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDocStd.XmlMDocStd_XLinkDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDocStd.XmlMDocStd_XLinkDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDocStd.XmlMDocStd_XLinkDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDocStd.delete_XmlMDocStd_XLinkDriver
XmlMDocStd_XLinkDriver_swigregister = _XmlMDocStd.XmlMDocStd_XLinkDriver_swigregister
XmlMDocStd_XLinkDriver_swigregister(XmlMDocStd_XLinkDriver)

def XmlMDocStd_XLinkDriver_get_type_name(*args):
    """
    XmlMDocStd_XLinkDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDocStd.XmlMDocStd_XLinkDriver_get_type_name(*args)

def XmlMDocStd_XLinkDriver_get_type_descriptor(*args):
    """
    XmlMDocStd_XLinkDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDocStd.XmlMDocStd_XLinkDriver_get_type_descriptor(*args)

class XmlMDocStd_(object):
    """Driver for TDocStd_XLink"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger theMessageDriver)

        Adds the attribute drivers to <aDriverTable>.

        :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _XmlMDocStd.XmlMDocStd__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def __init__(self):
        """Driver for TDocStd_XLink"""
        this = _XmlMDocStd.new_XmlMDocStd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDocStd.delete_XmlMDocStd_
XmlMDocStd__swigregister = _XmlMDocStd.XmlMDocStd__swigregister
XmlMDocStd__swigregister(XmlMDocStd_)

def XmlMDocStd__AddDrivers(*args):
    """
    XmlMDocStd__AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger theMessageDriver)

    Adds the attribute drivers to <aDriverTable>.

    :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
    :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _XmlMDocStd.XmlMDocStd__AddDrivers(*args)

class Handle_XmlMDocStd_XLinkDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDocStd_XLinkDriver self)

        Nullify the handle


        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDocStd_XLinkDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDocStd_XLinkDriver self, XmlMDocStd_XLinkDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDocStd_XLinkDriver self, Handle_XmlMDocStd_XLinkDriver theHandle) -> Handle_XmlMDocStd_XLinkDriver
        assign(Handle_XmlMDocStd_XLinkDriver self, XmlMDocStd_XLinkDriver thePtr) -> Handle_XmlMDocStd_XLinkDriver
        assign(Handle_XmlMDocStd_XLinkDriver self, Handle_XmlMDocStd_XLinkDriver theHandle) -> Handle_XmlMDocStd_XLinkDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDocStd_XLinkDriver self) -> XmlMDocStd_XLinkDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDocStd_XLinkDriver self) -> XmlMDocStd_XLinkDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDocStd_XLinkDriver self) -> XmlMDocStd_XLinkDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDocStd.new_Handle_XmlMDocStd_XLinkDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_DownCast)
    __swig_destroy__ = _XmlMDocStd.delete_Handle_XmlMDocStd_XLinkDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDocStd_XLinkDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDocStd_XLinkDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDocStd_XLinkDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDocStd_XLinkDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDocStd_XLinkDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDocStd_XLinkDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDocStd_XLinkDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDocStd_XLinkDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDocStd_XLinkDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDocStd_XLinkDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDocStd_XLinkDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDocStd_XLinkDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDocStd_XLinkDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDocStd_XLinkDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDocStd_XLinkDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_DecrementRefCounter(self, *args)

Handle_XmlMDocStd_XLinkDriver_swigregister = _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_swigregister
Handle_XmlMDocStd_XLinkDriver_swigregister(Handle_XmlMDocStd_XLinkDriver)

def Handle_XmlMDocStd_XLinkDriver_DownCast(thing):
    return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_DownCast(thing)
Handle_XmlMDocStd_XLinkDriver_DownCast = _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_DownCast



