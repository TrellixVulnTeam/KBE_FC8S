# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopAbs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopAbs')
    _TopAbs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopAbs', [dirname(__file__)])
        except ImportError:
            import _TopAbs
            return _TopAbs
        try:
            _mod = imp.load_module('_TopAbs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopAbs = swig_import_helper()
    del swig_import_helper
else:
    import _TopAbs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopAbs.delete_SwigPyIterator

    def value(self):
        return _TopAbs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopAbs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopAbs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopAbs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopAbs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopAbs.SwigPyIterator_copy(self)

    def next(self):
        return _TopAbs.SwigPyIterator_next(self)

    def __next__(self):
        return _TopAbs.SwigPyIterator___next__(self)

    def previous(self):
        return _TopAbs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopAbs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopAbs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopAbs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopAbs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopAbs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopAbs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopAbs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopAbs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopAbs.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TopAbs.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TopAbs.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopAbs.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopAbs.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TopAbs.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TopAbs.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TopAbs.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopAbs.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TopAbs.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TopAbs.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopAbs.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopAbs.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TopAbs.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TopAbs.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TopAbs.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TopAbs.ptr_to_number(item)
ptr_to_number = _TopAbs.ptr_to_number

def HashCode(*args):
    return _TopAbs.HashCode(*args)
HashCode = _TopAbs.HashCode

def ptr_equal(a, b):
    return _TopAbs.ptr_equal(a, b)
ptr_equal = _TopAbs.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
TopAbs_FORWARD = _TopAbs.TopAbs_FORWARD
TopAbs_REVERSED = _TopAbs.TopAbs_REVERSED
TopAbs_INTERNAL = _TopAbs.TopAbs_INTERNAL
TopAbs_EXTERNAL = _TopAbs.TopAbs_EXTERNAL
TopAbs_COMPOUND = _TopAbs.TopAbs_COMPOUND
TopAbs_COMPSOLID = _TopAbs.TopAbs_COMPSOLID
TopAbs_SOLID = _TopAbs.TopAbs_SOLID
TopAbs_SHELL = _TopAbs.TopAbs_SHELL
TopAbs_FACE = _TopAbs.TopAbs_FACE
TopAbs_WIRE = _TopAbs.TopAbs_WIRE
TopAbs_EDGE = _TopAbs.TopAbs_EDGE
TopAbs_VERTEX = _TopAbs.TopAbs_VERTEX
TopAbs_SHAPE = _TopAbs.TopAbs_SHAPE
TopAbs_IN = _TopAbs.TopAbs_IN
TopAbs_OUT = _TopAbs.TopAbs_OUT
TopAbs_ON = _TopAbs.TopAbs_ON
TopAbs_UNKNOWN = _TopAbs.TopAbs_UNKNOWN
class TopAbs_(object):
    """
    This package gives resources for Topology oriented
    applications such as : Topological Data Structure,
    Topological Algorithms.

    It contains :

    * The ShapeEnum   enumeration  to  describe  the
    differents topological shapes.

    * The  Orientation  enumeration to  describe the
    orientation of a topological shape.

    * The  State    enumeration  to  describes  the
    position of a point relative to a Shape.

    * Methods to manage the enumerations.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Compose(*args):
        """
        Compose(TopAbs_Orientation const Or1, TopAbs_Orientation const Or2) -> TopAbs_Orientation

        Compose  the Orientation    <Or1>  and  <Or2>.    This
        composition is not symmetric (if  you switch <Or1> and
        <Or2> the result  is different). It assumes that <Or1>
        is the Orientation of a Shape S1 containing a Shape S2
        of Orientation   Or2.  The result    is the  cumulated
        orientation of S2 in S1.  The composition law is :

        \ Or2     FORWARD  REVERSED INTERNAL EXTERNAL
        Or1       -------------------------------------
        FORWARD   | FORWARD  REVERSED INTERNAL EXTERNAL
        |
        REVERSED  | REVERSED FORWARD  INTERNAL EXTERNAL
        |
        INTERNAL  | INTERNAL INTERNAL INTERNAL INTERNAL
        |
        EXTERNAL  | EXTERNAL EXTERNAL EXTERNAL EXTERNAL
        Note: The top corner in the table is the most important
        for the purposes of Open CASCADE topology and shape sharing.

        :type Or1: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type Or2: OCC.wrapper.TopAbs.TopAbs_Orientation
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _TopAbs.TopAbs__Compose(*args)

    Compose = staticmethod(Compose)

    def Reverse(*args):
        """
        Reverse(TopAbs_Orientation const Or) -> TopAbs_Orientation

        xchanges the interior/exterior status of the two
        sides. This is what happens when the sense of
        direction is reversed. The following rules apply:

        FORWARD          REVERSED
        REVERSED         FORWARD
        INTERNAL         INTERNAL
        EXTERNAL         EXTERNAL

        Reverse exchange the material sides.

        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _TopAbs.TopAbs__Reverse(*args)

    Reverse = staticmethod(Reverse)

    def Complement(*args):
        """
        Complement(TopAbs_Orientation const Or) -> TopAbs_Orientation

        Reverses the interior/exterior status of each side of
        the object. So, to take the complement of an object
        means to reverse the interior/exterior status of its
        boundary, i.e. inside becomes outside.
        The method returns the complementary orientation,
        following the rules in the table below:
        FORWARD          REVERSED
        REVERSED         FORWARD
        INTERNAL         EXTERNAL
        EXTERNAL         INTERNAL

        Complement  complements   the  material  side.  Inside
        becomes outside.

        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _TopAbs.TopAbs__Complement(*args)

    Complement = staticmethod(Complement)

    def Print(*args):
        """
        Print(TopAbs_ShapeEnum const theShapeType, Standard_OStream & theStream) -> Standard_OStream
        Print(TopAbs_Orientation const theOrientation, Standard_OStream & theStream) -> Standard_OStream
        Print(TopAbs_State const St, Standard_OStream & S) -> Standard_OStream &

        Prints the name of the State <St> as a String on
        the Stream <S> and returns <S>.

        :type St: OCC.wrapper.TopAbs.TopAbs_State
        :type S: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TopAbs.TopAbs__Print(*args)

    Print = staticmethod(Print)

    def ShapeTypeToString(*args):
        """
        ShapeTypeToString(TopAbs_ShapeEnum theType) -> Standard_CString

        Returns the string name for a given shape type.
        @param theType shape type
        @return string identifier from the list COMPOUND, COMPSOLID, SOLID, SHELL, FACE, WIRE, EDGE, VERTEX, SHAPE

        :type theType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TopAbs.TopAbs__ShapeTypeToString(*args)

    ShapeTypeToString = staticmethod(ShapeTypeToString)

    def ShapeTypeFromString(*args):
        """
        ShapeTypeFromString(Standard_CString theTypeString) -> TopAbs_ShapeEnum
        ShapeTypeFromString(Standard_CString theTypeString) -> Standard_Boolean

        Determines the shape type from the given string identifier (using case-insensitive comparison).
        @param theTypeString string identifier
        @param theType detected shape type
        @return TRUE if string identifier is known

        :type theTypeString: OCC.wrapper.Standard.Standard_CString
        :type theType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopAbs.TopAbs__ShapeTypeFromString(*args)

    ShapeTypeFromString = staticmethod(ShapeTypeFromString)

    def ShapeOrientationToString(*args):
        """
        ShapeOrientationToString(TopAbs_Orientation theOrientation) -> Standard_CString

        Returns the string name for a given shape orientation.
        @param theOrientation shape orientation
        @return string identifier from the list FORWARD, REVERSED, INTERNAL, EXTERNAL

        :type theOrientation: OCC.wrapper.TopAbs.TopAbs_Orientation
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TopAbs.TopAbs__ShapeOrientationToString(*args)

    ShapeOrientationToString = staticmethod(ShapeOrientationToString)

    def ShapeOrientationFromString(*args):
        """
        ShapeOrientationFromString(Standard_CString const theOrientationString) -> TopAbs_Orientation
        ShapeOrientationFromString(Standard_CString const theOrientationString) -> Standard_Boolean

        Determines the shape orientation from the given string identifier (using case-insensitive comparison).
        @param theOrientationString string identifier
        @param theOrientation detected shape orientation
        @return TRUE if string identifier is known

        :type theOrientationString: OCC.wrapper.Standard.Standard_CString
        :type theOrientation: OCC.wrapper.TopAbs.TopAbs_Orientation
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopAbs.TopAbs__ShapeOrientationFromString(*args)

    ShapeOrientationFromString = staticmethod(ShapeOrientationFromString)

    def __init__(self):
        """
        This package gives resources for Topology oriented
        applications such as : Topological Data Structure,
        Topological Algorithms.

        It contains :

        * The ShapeEnum   enumeration  to  describe  the
        differents topological shapes.

        * The  Orientation  enumeration to  describe the
        orientation of a topological shape.

        * The  State    enumeration  to  describes  the
        position of a point relative to a Shape.

        * Methods to manage the enumerations.
        """
        this = _TopAbs.new_TopAbs_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopAbs.delete_TopAbs_
TopAbs__swigregister = _TopAbs.TopAbs__swigregister
TopAbs__swigregister(TopAbs_)

def TopAbs__Compose(*args):
    """
    TopAbs__Compose(TopAbs_Orientation const Or1, TopAbs_Orientation const Or2) -> TopAbs_Orientation

    Compose  the Orientation    <Or1>  and  <Or2>.    This
    composition is not symmetric (if  you switch <Or1> and
    <Or2> the result  is different). It assumes that <Or1>
    is the Orientation of a Shape S1 containing a Shape S2
    of Orientation   Or2.  The result    is the  cumulated
    orientation of S2 in S1.  The composition law is :

    \ Or2     FORWARD  REVERSED INTERNAL EXTERNAL
    Or1       -------------------------------------
    FORWARD   | FORWARD  REVERSED INTERNAL EXTERNAL
    |
    REVERSED  | REVERSED FORWARD  INTERNAL EXTERNAL
    |
    INTERNAL  | INTERNAL INTERNAL INTERNAL INTERNAL
    |
    EXTERNAL  | EXTERNAL EXTERNAL EXTERNAL EXTERNAL
    Note: The top corner in the table is the most important
    for the purposes of Open CASCADE topology and shape sharing.

    :type Or1: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type Or2: OCC.wrapper.TopAbs.TopAbs_Orientation
    :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

    """
    return _TopAbs.TopAbs__Compose(*args)

def TopAbs__Reverse(*args):
    """
    TopAbs__Reverse(TopAbs_Orientation const Or) -> TopAbs_Orientation

    xchanges the interior/exterior status of the two
    sides. This is what happens when the sense of
    direction is reversed. The following rules apply:

    FORWARD          REVERSED
    REVERSED         FORWARD
    INTERNAL         INTERNAL
    EXTERNAL         EXTERNAL

    Reverse exchange the material sides.

    :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
    :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

    """
    return _TopAbs.TopAbs__Reverse(*args)

def TopAbs__Complement(*args):
    """
    TopAbs__Complement(TopAbs_Orientation const Or) -> TopAbs_Orientation

    Reverses the interior/exterior status of each side of
    the object. So, to take the complement of an object
    means to reverse the interior/exterior status of its
    boundary, i.e. inside becomes outside.
    The method returns the complementary orientation,
    following the rules in the table below:
    FORWARD          REVERSED
    REVERSED         FORWARD
    INTERNAL         EXTERNAL
    EXTERNAL         INTERNAL

    Complement  complements   the  material  side.  Inside
    becomes outside.

    :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
    :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

    """
    return _TopAbs.TopAbs__Complement(*args)

def TopAbs__Print(*args):
    """
    Print(TopAbs_ShapeEnum const theShapeType, Standard_OStream & theStream) -> Standard_OStream
    Print(TopAbs_Orientation const theOrientation, Standard_OStream & theStream) -> Standard_OStream
    TopAbs__Print(TopAbs_State const St, Standard_OStream & S) -> Standard_OStream &

    Prints the name of the State <St> as a String on
    the Stream <S> and returns <S>.

    :type St: OCC.wrapper.TopAbs.TopAbs_State
    :type S: OCC.wrapper.Standard.Standard_OStream
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _TopAbs.TopAbs__Print(*args)

def TopAbs__ShapeTypeToString(*args):
    """
    TopAbs__ShapeTypeToString(TopAbs_ShapeEnum theType) -> Standard_CString

    Returns the string name for a given shape type.
    @param theType shape type
    @return string identifier from the list COMPOUND, COMPSOLID, SOLID, SHELL, FACE, WIRE, EDGE, VERTEX, SHAPE

    :type theType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _TopAbs.TopAbs__ShapeTypeToString(*args)

def TopAbs__ShapeTypeFromString(*args):
    """
    ShapeTypeFromString(Standard_CString theTypeString) -> TopAbs_ShapeEnum
    TopAbs__ShapeTypeFromString(Standard_CString theTypeString) -> Standard_Boolean

    Determines the shape type from the given string identifier (using case-insensitive comparison).
    @param theTypeString string identifier
    @param theType detected shape type
    @return TRUE if string identifier is known

    :type theTypeString: OCC.wrapper.Standard.Standard_CString
    :type theType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopAbs.TopAbs__ShapeTypeFromString(*args)

def TopAbs__ShapeOrientationToString(*args):
    """
    TopAbs__ShapeOrientationToString(TopAbs_Orientation theOrientation) -> Standard_CString

    Returns the string name for a given shape orientation.
    @param theOrientation shape orientation
    @return string identifier from the list FORWARD, REVERSED, INTERNAL, EXTERNAL

    :type theOrientation: OCC.wrapper.TopAbs.TopAbs_Orientation
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _TopAbs.TopAbs__ShapeOrientationToString(*args)

def TopAbs__ShapeOrientationFromString(*args):
    """
    ShapeOrientationFromString(Standard_CString const theOrientationString) -> TopAbs_Orientation
    TopAbs__ShapeOrientationFromString(Standard_CString const theOrientationString) -> Standard_Boolean

    Determines the shape orientation from the given string identifier (using case-insensitive comparison).
    @param theOrientationString string identifier
    @param theOrientation detected shape orientation
    @return TRUE if string identifier is known

    :type theOrientationString: OCC.wrapper.Standard.Standard_CString
    :type theOrientation: OCC.wrapper.TopAbs.TopAbs_Orientation
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopAbs.TopAbs__ShapeOrientationFromString(*args)



