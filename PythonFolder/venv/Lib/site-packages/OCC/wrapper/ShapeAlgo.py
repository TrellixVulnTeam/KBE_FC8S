# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeAlgo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeAlgo')
    _ShapeAlgo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeAlgo', [dirname(__file__)])
        except ImportError:
            import _ShapeAlgo
            return _ShapeAlgo
        try:
            _mod = imp.load_module('_ShapeAlgo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeAlgo = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeAlgo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeAlgo.delete_SwigPyIterator

    def value(self):
        return _ShapeAlgo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ShapeAlgo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ShapeAlgo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ShapeAlgo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ShapeAlgo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ShapeAlgo.SwigPyIterator_copy(self)

    def next(self):
        return _ShapeAlgo.SwigPyIterator_next(self)

    def __next__(self):
        return _ShapeAlgo.SwigPyIterator___next__(self)

    def previous(self):
        return _ShapeAlgo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ShapeAlgo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ShapeAlgo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ShapeAlgo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ShapeAlgo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ShapeAlgo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ShapeAlgo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ShapeAlgo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ShapeAlgo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ShapeAlgo.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ShapeAlgo.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ShapeAlgo.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ShapeAlgo.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeAlgo.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ShapeAlgo.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ShapeAlgo.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ShapeAlgo.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ShapeAlgo.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ShapeAlgo.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ShapeAlgo.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ShapeAlgo.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeAlgo.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ShapeAlgo.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ShapeAlgo.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ShapeAlgo.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ShapeAlgo.ptr_to_number(item)
ptr_to_number = _ShapeAlgo.ptr_to_number

def HashCode(*args):
    return _ShapeAlgo.HashCode(*args)
HashCode = _ShapeAlgo.HashCode

def ptr_equal(a, b):
    return _ShapeAlgo.ptr_equal(a, b)
ptr_equal = _ShapeAlgo.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom2d
else:
    import TColGeom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeAnalysis
else:
    import ShapeAnalysis
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeFix
else:
    import ShapeFix
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeBuild
else:
    import ShapeBuild
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeConstruct
else:
    import ShapeConstruct
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepBuilderAPI
else:
    import BRepBuilderAPI
del _swig_python_version_info
class ShapeAlgo_ToolContainer(Standard.Standard_Transient):
    """Returns tools used by AlgoContainer"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ShapeAlgo_ToolContainer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ShapeAlgo_ToolContainer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ShapeAlgo_ToolContainer self) -> ShapeAlgo_ToolContainer

        Empty constructor


        """
        this = _ShapeAlgo.new_ShapeAlgo_ToolContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def FixShape(self, *args):
        """
        FixShape(ShapeAlgo_ToolContainer self) -> Handle_ShapeFix_Shape

        Returns ShapeFix_Shape

        :rtype: OCC.wrapper.ShapeFix.Handle_ShapeFix_Shape

        """
        return _ShapeAlgo.ShapeAlgo_ToolContainer_FixShape(self, *args)


    def EdgeProjAux(self, *args):
        """
        EdgeProjAux(ShapeAlgo_ToolContainer self) -> Handle_ShapeFix_EdgeProjAux

        Returns ShapeFix_EdgeProjAux

        :rtype: OCC.wrapper.ShapeFix.Handle_ShapeFix_EdgeProjAux

        """
        return _ShapeAlgo.ShapeAlgo_ToolContainer_EdgeProjAux(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ShapeAlgo.ShapeAlgo_ToolContainer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ShapeAlgo.ShapeAlgo_ToolContainer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeAlgo.ShapeAlgo_ToolContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ShapeAlgo.delete_ShapeAlgo_ToolContainer
ShapeAlgo_ToolContainer_swigregister = _ShapeAlgo.ShapeAlgo_ToolContainer_swigregister
ShapeAlgo_ToolContainer_swigregister(ShapeAlgo_ToolContainer)

def ShapeAlgo_ToolContainer_get_type_name(*args):
    """
    ShapeAlgo_ToolContainer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ShapeAlgo.ShapeAlgo_ToolContainer_get_type_name(*args)

def ShapeAlgo_ToolContainer_get_type_descriptor(*args):
    """
    ShapeAlgo_ToolContainer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ShapeAlgo.ShapeAlgo_ToolContainer_get_type_descriptor(*args)

class ShapeAlgo_AlgoContainer(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ShapeAlgo_AlgoContainer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ShapeAlgo_AlgoContainer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ShapeAlgo_AlgoContainer self) -> ShapeAlgo_AlgoContainer

        Empty constructor


        """
        this = _ShapeAlgo.new_ShapeAlgo_AlgoContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetToolContainer(self, *args):
        """
        SetToolContainer(ShapeAlgo_AlgoContainer self, Handle_ShapeAlgo_ToolContainer TC)

        Sets ToolContainer

        :type TC: OCC.wrapper.ShapeAlgo.Handle_ShapeAlgo_ToolContainer

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_SetToolContainer(self, *args)


    def ToolContainer(self, *args):
        """
        ToolContainer(ShapeAlgo_AlgoContainer self) -> Handle_ShapeAlgo_ToolContainer

        Returns ToolContainer

        :rtype: OCC.wrapper.ShapeAlgo.Handle_ShapeAlgo_ToolContainer

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_ToolContainer(self, *args)


    def ConnectNextWire(self, *args):
        """
        ConnectNextWire(ShapeAlgo_AlgoContainer self, Handle_ShapeAnalysis_Wire saw, Handle_ShapeExtend_WireData nextsewd, Standard_Real const maxtol) -> Standard_Boolean

        Finds the best way to connect and connects <nextsewd> to already
        built <sewd> (in <saw>).
        Returns False if <nextsewd> cannot be connected, otherwise - True.
        <maxtol> specifies the maximum tolerance with which <nextsewd> can
        be added.
        <distmin> is used to receive the minimum distance between <nextsewd>
        and <sewd>.
        <revsewd>   is True if <sewd>     has been reversed before connecting.
        <revnextwd> is True if <nextsewd> has been reversed before connecting.
        Uses functionality of ShapeAnalysis_Wire.

        :type saw: OCC.wrapper.ShapeAnalysis.Handle_ShapeAnalysis_Wire
        :type nextsewd: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData
        :type maxtol: float
        :type distmin: float
        :type revsewd: bool
        :type revnextsewd: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_ConnectNextWire(self, *args)


    def ApproxBSplineCurve(self, *args):
        """
        ApproxBSplineCurve(ShapeAlgo_AlgoContainer self, Handle_Geom_BSplineCurve bspline, NCollection_Sequence_Handle_Geom_Curve seq)
        ApproxBSplineCurve(ShapeAlgo_AlgoContainer self, Handle_Geom2d_BSplineCurve bspline, NCollection_Sequence_Handle_Geom2d_Curve seq)

        :type bspline: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
        :type seq: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_ApproxBSplineCurve(self, *args)


    def C0BSplineToSequenceOfC1BSplineCurve(self, *args):
        """
        C0BSplineToSequenceOfC1BSplineCurve(ShapeAlgo_AlgoContainer self, Handle_Geom_BSplineCurve BS, Handle_TColGeom_HSequenceOfBoundedCurve seqBS) -> Standard_Boolean
        C0BSplineToSequenceOfC1BSplineCurve(ShapeAlgo_AlgoContainer self, Handle_Geom2d_BSplineCurve BS, Handle_TColGeom2d_HSequenceOfBoundedCurve seqBS) -> Standard_Boolean

        Converts C0 B-Spline curve into sequence of C1 B-Spline curves.
        Calls ShapeUpgrade::C0BSplineToSequenceOfC1BSplineCurve.

        :type BS: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
        :type seqBS: OCC.wrapper.TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_C0BSplineToSequenceOfC1BSplineCurve(self, *args)


    def C0ShapeToC1Shape(self, *args):
        """
        C0ShapeToC1Shape(ShapeAlgo_AlgoContainer self, TopoDS_Shape shape, Standard_Real const tol) -> TopoDS_Shape

        Converts a shape on C0 geometry into the shape on C1 geometry.

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type tol: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_C0ShapeToC1Shape(self, *args)


    def ConvertSurfaceToBSpline(self, *args):
        """
        ConvertSurfaceToBSpline(ShapeAlgo_AlgoContainer self, Handle_Geom_Surface surf, Standard_Real const UF, Standard_Real const UL, Standard_Real const VF, Standard_Real const VL) -> Handle_Geom_BSplineSurface

        Converts a surface to B-Spline.
        Uses ShapeConstruct.

        :type surf: OCC.wrapper.Geom.Handle_Geom_Surface
        :type UF: float
        :type UL: float
        :type VF: float
        :type VL: float
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_ConvertSurfaceToBSpline(self, *args)


    def HomoWires(self, *args):
        """
        HomoWires(ShapeAlgo_AlgoContainer self, TopoDS_Wire wireIn1, TopoDS_Wire wireIn2, TopoDS_Wire wireOut1, TopoDS_Wire wireOut2, Standard_Boolean const byParam) -> Standard_Boolean

        Return 2 wires with the same number of edges. The both Edges
        number i of these wires have got the same ratio between
        theirs parameter lengths and their wire parameter lengths.

        :type wireIn1: OCC.wrapper.TopoDS.TopoDS_Wire
        :type wireIn2: OCC.wrapper.TopoDS.TopoDS_Wire
        :type wireOut1: OCC.wrapper.TopoDS.TopoDS_Wire
        :type wireOut2: OCC.wrapper.TopoDS.TopoDS_Wire
        :type byParam: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_HomoWires(self, *args)


    def OuterWire(self, *args):
        """
        OuterWire(ShapeAlgo_AlgoContainer self, TopoDS_Face face) -> TopoDS_Wire

        Returns the outer wire on the face <Face>.

        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_OuterWire(self, *args)


    def ConvertToPeriodic(self, *args):
        """
        ConvertToPeriodic(ShapeAlgo_AlgoContainer self, Handle_Geom_Surface surf) -> Handle_Geom_Surface

        Converts surface to periodic form.
        Calls ShapeCustom_Surface.

        :type surf: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_ConvertToPeriodic(self, *args)


    def GetFaceUVBounds(self, *args):
        """
        GetFaceUVBounds(ShapeAlgo_AlgoContainer self, TopoDS_Face F)

        Computes exact UV bounds of all wires on the face

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type Umin: float
        :type Umax: float
        :type Vmin: float
        :type Vmax: float

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_GetFaceUVBounds(self, *args)


    def ConvertCurveToBSpline(self, *args):
        """
        ConvertCurveToBSpline(ShapeAlgo_AlgoContainer self, Handle_Geom_Curve C3D, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol3d, GeomAbs_Shape const Continuity, Standard_Integer const MaxSegments, Standard_Integer const MaxDegree) -> Handle_Geom_BSplineCurve

        Convert Geom_Curve to Geom_BSplineCurve

        :type C3D: OCC.wrapper.Geom.Handle_Geom_Curve
        :type First: float
        :type Last: float
        :type Tol3d: float
        :type Continuity: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type MaxSegments: int
        :type MaxDegree: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_ConvertCurveToBSpline(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ShapeAlgo.ShapeAlgo_AlgoContainer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeAlgo.ShapeAlgo_AlgoContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ShapeAlgo.delete_ShapeAlgo_AlgoContainer
ShapeAlgo_AlgoContainer_swigregister = _ShapeAlgo.ShapeAlgo_AlgoContainer_swigregister
ShapeAlgo_AlgoContainer_swigregister(ShapeAlgo_AlgoContainer)

def ShapeAlgo_AlgoContainer_get_type_name(*args):
    """
    ShapeAlgo_AlgoContainer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ShapeAlgo.ShapeAlgo_AlgoContainer_get_type_name(*args)

def ShapeAlgo_AlgoContainer_get_type_descriptor(*args):
    """
    ShapeAlgo_AlgoContainer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ShapeAlgo.ShapeAlgo_AlgoContainer_get_type_descriptor(*args)

class ShapeAlgo_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Provides initerface to the algorithms from Shape Healing.
        Creates and initializes default AlgoContainer.


        """
        return _ShapeAlgo.ShapeAlgo__Init(*args)

    Init = staticmethod(Init)

    def SetAlgoContainer(*args):
        """
        SetAlgoContainer(Handle_ShapeAlgo_AlgoContainer aContainer)

        Sets default AlgoContainer

        :type aContainer: OCC.wrapper.ShapeAlgo.Handle_ShapeAlgo_AlgoContainer

        """
        return _ShapeAlgo.ShapeAlgo__SetAlgoContainer(*args)

    SetAlgoContainer = staticmethod(SetAlgoContainer)

    def AlgoContainer(*args):
        """
        AlgoContainer() -> Handle_ShapeAlgo_AlgoContainer

        Returns default AlgoContainer

        :rtype: OCC.wrapper.ShapeAlgo.Handle_ShapeAlgo_AlgoContainer

        """
        return _ShapeAlgo.ShapeAlgo__AlgoContainer(*args)

    AlgoContainer = staticmethod(AlgoContainer)

    def __init__(self):
        this = _ShapeAlgo.new_ShapeAlgo_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeAlgo.delete_ShapeAlgo_
ShapeAlgo__swigregister = _ShapeAlgo.ShapeAlgo__swigregister
ShapeAlgo__swigregister(ShapeAlgo_)

def ShapeAlgo__Init(*args):
    """
    ShapeAlgo__Init()

    Provides initerface to the algorithms from Shape Healing.
    Creates and initializes default AlgoContainer.


    """
    return _ShapeAlgo.ShapeAlgo__Init(*args)

def ShapeAlgo__SetAlgoContainer(*args):
    """
    ShapeAlgo__SetAlgoContainer(Handle_ShapeAlgo_AlgoContainer aContainer)

    Sets default AlgoContainer

    :type aContainer: OCC.wrapper.ShapeAlgo.Handle_ShapeAlgo_AlgoContainer

    """
    return _ShapeAlgo.ShapeAlgo__SetAlgoContainer(*args)

def ShapeAlgo__AlgoContainer(*args):
    """
    ShapeAlgo__AlgoContainer() -> Handle_ShapeAlgo_AlgoContainer

    Returns default AlgoContainer

    :rtype: OCC.wrapper.ShapeAlgo.Handle_ShapeAlgo_AlgoContainer

    """
    return _ShapeAlgo.ShapeAlgo__AlgoContainer(*args)

class Handle_ShapeAlgo_ToolContainer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ShapeAlgo_ToolContainer self)

        Nullify the handle


        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ShapeAlgo_ToolContainer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ShapeAlgo_ToolContainer self, ShapeAlgo_ToolContainer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ShapeAlgo_ToolContainer self, Handle_ShapeAlgo_ToolContainer theHandle) -> Handle_ShapeAlgo_ToolContainer
        assign(Handle_ShapeAlgo_ToolContainer self, ShapeAlgo_ToolContainer thePtr) -> Handle_ShapeAlgo_ToolContainer
        assign(Handle_ShapeAlgo_ToolContainer self, Handle_ShapeAlgo_ToolContainer theHandle) -> Handle_ShapeAlgo_ToolContainer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ShapeAlgo_ToolContainer self) -> ShapeAlgo_ToolContainer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ShapeAlgo_ToolContainer self) -> ShapeAlgo_ToolContainer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ShapeAlgo_ToolContainer self) -> ShapeAlgo_ToolContainer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer___ref__(self, *args)


    def __hash__(self):
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ShapeAlgo.new_Handle_ShapeAlgo_ToolContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ShapeAlgo.Handle_ShapeAlgo_ToolContainer_DownCast)
    __swig_destroy__ = _ShapeAlgo.delete_Handle_ShapeAlgo_ToolContainer

    def FixShape(self, *args):
        """
        FixShape(Handle_ShapeAlgo_ToolContainer self) -> Handle_ShapeFix_Shape

        Returns ShapeFix_Shape

        :rtype: OCC.wrapper.ShapeFix.Handle_ShapeFix_Shape

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_FixShape(self, *args)


    def EdgeProjAux(self, *args):
        """
        EdgeProjAux(Handle_ShapeAlgo_ToolContainer self) -> Handle_ShapeFix_EdgeProjAux

        Returns ShapeFix_EdgeProjAux

        :rtype: OCC.wrapper.ShapeFix.Handle_ShapeFix_EdgeProjAux

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_EdgeProjAux(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ShapeAlgo_ToolContainer self) -> char const *

        :rtype: const char *

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_ShapeAlgo_ToolContainer self)

        Memory deallocator for transient classes


        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ShapeAlgo_ToolContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ShapeAlgo_ToolContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ShapeAlgo_ToolContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ShapeAlgo_ToolContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ShapeAlgo_ToolContainer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ShapeAlgo_ToolContainer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ShapeAlgo_ToolContainer self)

        Increments the reference counter of this object


        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ShapeAlgo_ToolContainer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_DecrementRefCounter(self, *args)

Handle_ShapeAlgo_ToolContainer_swigregister = _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_swigregister
Handle_ShapeAlgo_ToolContainer_swigregister(Handle_ShapeAlgo_ToolContainer)

def Handle_ShapeAlgo_ToolContainer_DownCast(thing):
    return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_DownCast(thing)
Handle_ShapeAlgo_ToolContainer_DownCast = _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_DownCast

class Handle_ShapeAlgo_AlgoContainer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ShapeAlgo_AlgoContainer self)

        Nullify the handle


        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ShapeAlgo_AlgoContainer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ShapeAlgo_AlgoContainer self, ShapeAlgo_AlgoContainer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ShapeAlgo_AlgoContainer self, Handle_ShapeAlgo_AlgoContainer theHandle) -> Handle_ShapeAlgo_AlgoContainer
        assign(Handle_ShapeAlgo_AlgoContainer self, ShapeAlgo_AlgoContainer thePtr) -> Handle_ShapeAlgo_AlgoContainer
        assign(Handle_ShapeAlgo_AlgoContainer self, Handle_ShapeAlgo_AlgoContainer theHandle) -> Handle_ShapeAlgo_AlgoContainer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ShapeAlgo_AlgoContainer self) -> ShapeAlgo_AlgoContainer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ShapeAlgo_AlgoContainer self) -> ShapeAlgo_AlgoContainer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ShapeAlgo_AlgoContainer self) -> ShapeAlgo_AlgoContainer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer___ref__(self, *args)


    def __hash__(self):
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ShapeAlgo.new_Handle_ShapeAlgo_AlgoContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_DownCast)
    __swig_destroy__ = _ShapeAlgo.delete_Handle_ShapeAlgo_AlgoContainer

    def SetToolContainer(self, *args):
        """
        SetToolContainer(Handle_ShapeAlgo_AlgoContainer self, Handle_ShapeAlgo_ToolContainer TC)

        Sets ToolContainer

        :type TC: OCC.wrapper.ShapeAlgo.Handle_ShapeAlgo_ToolContainer

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_SetToolContainer(self, *args)


    def ToolContainer(self, *args):
        """
        ToolContainer(Handle_ShapeAlgo_AlgoContainer self) -> Handle_ShapeAlgo_ToolContainer

        Returns ToolContainer

        :rtype: OCC.wrapper.ShapeAlgo.Handle_ShapeAlgo_ToolContainer

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_ToolContainer(self, *args)


    def ConnectNextWire(self, *args):
        """
        ConnectNextWire(Handle_ShapeAlgo_AlgoContainer self, Handle_ShapeAnalysis_Wire saw, Handle_ShapeExtend_WireData nextsewd, Standard_Real const maxtol) -> Standard_Boolean

        Finds the best way to connect and connects <nextsewd> to already
        built <sewd> (in <saw>).
        Returns False if <nextsewd> cannot be connected, otherwise - True.
        <maxtol> specifies the maximum tolerance with which <nextsewd> can
        be added.
        <distmin> is used to receive the minimum distance between <nextsewd>
        and <sewd>.
        <revsewd>   is True if <sewd>     has been reversed before connecting.
        <revnextwd> is True if <nextsewd> has been reversed before connecting.
        Uses functionality of ShapeAnalysis_Wire.

        :type saw: OCC.wrapper.ShapeAnalysis.Handle_ShapeAnalysis_Wire
        :type nextsewd: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData
        :type maxtol: float
        :type distmin: float
        :type revsewd: bool
        :type revnextsewd: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_ConnectNextWire(self, *args)


    def ApproxBSplineCurve(self, *args):
        """
        ApproxBSplineCurve(Handle_ShapeAlgo_AlgoContainer self, Handle_Geom_BSplineCurve bspline, NCollection_Sequence_Handle_Geom_Curve seq)
        ApproxBSplineCurve(Handle_ShapeAlgo_AlgoContainer self, Handle_Geom2d_BSplineCurve bspline, NCollection_Sequence_Handle_Geom2d_Curve seq)

        :type bspline: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
        :type seq: OCC.wrapper.TColGeom2d.TColGeom2d_SequenceOfCurve

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_ApproxBSplineCurve(self, *args)


    def C0BSplineToSequenceOfC1BSplineCurve(self, *args):
        """
        C0BSplineToSequenceOfC1BSplineCurve(Handle_ShapeAlgo_AlgoContainer self, Handle_Geom_BSplineCurve BS, Handle_TColGeom_HSequenceOfBoundedCurve seqBS) -> Standard_Boolean
        C0BSplineToSequenceOfC1BSplineCurve(Handle_ShapeAlgo_AlgoContainer self, Handle_Geom2d_BSplineCurve BS, Handle_TColGeom2d_HSequenceOfBoundedCurve seqBS) -> Standard_Boolean

        Converts C0 B-Spline curve into sequence of C1 B-Spline curves.
        Calls ShapeUpgrade::C0BSplineToSequenceOfC1BSplineCurve.

        :type BS: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
        :type seqBS: OCC.wrapper.TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_C0BSplineToSequenceOfC1BSplineCurve(self, *args)


    def C0ShapeToC1Shape(self, *args):
        """
        C0ShapeToC1Shape(Handle_ShapeAlgo_AlgoContainer self, TopoDS_Shape shape, Standard_Real const tol) -> TopoDS_Shape

        Converts a shape on C0 geometry into the shape on C1 geometry.

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type tol: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_C0ShapeToC1Shape(self, *args)


    def ConvertSurfaceToBSpline(self, *args):
        """
        ConvertSurfaceToBSpline(Handle_ShapeAlgo_AlgoContainer self, Handle_Geom_Surface surf, Standard_Real const UF, Standard_Real const UL, Standard_Real const VF, Standard_Real const VL) -> Handle_Geom_BSplineSurface

        Converts a surface to B-Spline.
        Uses ShapeConstruct.

        :type surf: OCC.wrapper.Geom.Handle_Geom_Surface
        :type UF: float
        :type UL: float
        :type VF: float
        :type VL: float
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_ConvertSurfaceToBSpline(self, *args)


    def HomoWires(self, *args):
        """
        HomoWires(Handle_ShapeAlgo_AlgoContainer self, TopoDS_Wire wireIn1, TopoDS_Wire wireIn2, TopoDS_Wire wireOut1, TopoDS_Wire wireOut2, Standard_Boolean const byParam) -> Standard_Boolean

        Return 2 wires with the same number of edges. The both Edges
        number i of these wires have got the same ratio between
        theirs parameter lengths and their wire parameter lengths.

        :type wireIn1: OCC.wrapper.TopoDS.TopoDS_Wire
        :type wireIn2: OCC.wrapper.TopoDS.TopoDS_Wire
        :type wireOut1: OCC.wrapper.TopoDS.TopoDS_Wire
        :type wireOut2: OCC.wrapper.TopoDS.TopoDS_Wire
        :type byParam: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_HomoWires(self, *args)


    def OuterWire(self, *args):
        """
        OuterWire(Handle_ShapeAlgo_AlgoContainer self, TopoDS_Face face) -> TopoDS_Wire

        Returns the outer wire on the face <Face>.

        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_OuterWire(self, *args)


    def ConvertToPeriodic(self, *args):
        """
        ConvertToPeriodic(Handle_ShapeAlgo_AlgoContainer self, Handle_Geom_Surface surf) -> Handle_Geom_Surface

        Converts surface to periodic form.
        Calls ShapeCustom_Surface.

        :type surf: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_ConvertToPeriodic(self, *args)


    def GetFaceUVBounds(self, *args):
        """
        GetFaceUVBounds(Handle_ShapeAlgo_AlgoContainer self, TopoDS_Face F)

        Computes exact UV bounds of all wires on the face

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type Umin: float
        :type Umax: float
        :type Vmin: float
        :type Vmax: float

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_GetFaceUVBounds(self, *args)


    def ConvertCurveToBSpline(self, *args):
        """
        ConvertCurveToBSpline(Handle_ShapeAlgo_AlgoContainer self, Handle_Geom_Curve C3D, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol3d, GeomAbs_Shape const Continuity, Standard_Integer const MaxSegments, Standard_Integer const MaxDegree) -> Handle_Geom_BSplineCurve

        Convert Geom_Curve to Geom_BSplineCurve

        :type C3D: OCC.wrapper.Geom.Handle_Geom_Curve
        :type First: float
        :type Last: float
        :type Tol3d: float
        :type Continuity: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type MaxSegments: int
        :type MaxDegree: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_ConvertCurveToBSpline(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ShapeAlgo_AlgoContainer self) -> char const *

        :rtype: const char *

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_ShapeAlgo_AlgoContainer self)

        Memory deallocator for transient classes


        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ShapeAlgo_AlgoContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ShapeAlgo_AlgoContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ShapeAlgo_AlgoContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ShapeAlgo_AlgoContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ShapeAlgo_AlgoContainer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ShapeAlgo_AlgoContainer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ShapeAlgo_AlgoContainer self)

        Increments the reference counter of this object


        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ShapeAlgo_AlgoContainer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_DecrementRefCounter(self, *args)

Handle_ShapeAlgo_AlgoContainer_swigregister = _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_swigregister
Handle_ShapeAlgo_AlgoContainer_swigregister(Handle_ShapeAlgo_AlgoContainer)

def Handle_ShapeAlgo_AlgoContainer_DownCast(thing):
    return _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_DownCast(thing)
Handle_ShapeAlgo_AlgoContainer_DownCast = _ShapeAlgo.Handle_ShapeAlgo_AlgoContainer_DownCast



