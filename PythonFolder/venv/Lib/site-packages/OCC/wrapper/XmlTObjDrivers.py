# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlTObjDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlTObjDrivers')
    _XmlTObjDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlTObjDrivers', [dirname(__file__)])
        except ImportError:
            import _XmlTObjDrivers
            return _XmlTObjDrivers
        try:
            _mod = imp.load_module('_XmlTObjDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlTObjDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _XmlTObjDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlTObjDrivers.delete_SwigPyIterator

    def value(self):
        return _XmlTObjDrivers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlTObjDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlTObjDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlTObjDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlTObjDrivers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlTObjDrivers.SwigPyIterator_copy(self)

    def next(self):
        return _XmlTObjDrivers.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlTObjDrivers.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlTObjDrivers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlTObjDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlTObjDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlTObjDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlTObjDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlTObjDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlTObjDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlTObjDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlTObjDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlTObjDrivers.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlTObjDrivers.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlTObjDrivers.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlTObjDrivers.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlTObjDrivers.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlTObjDrivers.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlTObjDrivers.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlTObjDrivers.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlTObjDrivers.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlTObjDrivers.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlTObjDrivers.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlTObjDrivers.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlTObjDrivers.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlTObjDrivers.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlTObjDrivers.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlTObjDrivers.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlTObjDrivers.ptr_to_number(item)
ptr_to_number = _XmlTObjDrivers.ptr_to_number

def HashCode(*args):
    return _XmlTObjDrivers.HashCode(*args)
HashCode = _XmlTObjDrivers.HashCode

def ptr_equal(a, b):
    return _XmlTObjDrivers.ptr_equal(a, b)
ptr_equal = _XmlTObjDrivers.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlMDF
else:
    import XmlMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlLDrivers
else:
    import XmlLDrivers
del _swig_python_version_info
class XmlTObjDrivers_ReferenceDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlTObjDrivers_ReferenceDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlTObjDrivers_ReferenceDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlTObjDrivers_ReferenceDriver self, Handle_Message_Messenger theMessageDriver) -> XmlTObjDrivers_ReferenceDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_ReferenceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlTObjDrivers_ReferenceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlTObjDrivers_ReferenceDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlTObjDrivers_ReferenceDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ReferenceDriver
XmlTObjDrivers_ReferenceDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_swigregister
XmlTObjDrivers_ReferenceDriver_swigregister(XmlTObjDrivers_ReferenceDriver)

def XmlTObjDrivers_ReferenceDriver_get_type_name(*args):
    """
    XmlTObjDrivers_ReferenceDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_get_type_name(*args)

def XmlTObjDrivers_ReferenceDriver_get_type_descriptor(*args):
    """
    XmlTObjDrivers_ReferenceDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_get_type_descriptor(*args)

class XmlTObjDrivers_DocumentStorageDriver(XmlLDrivers.XmlLDrivers_DocumentStorageDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlTObjDrivers_DocumentStorageDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlTObjDrivers_DocumentStorageDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlTObjDrivers_DocumentStorageDriver self, TCollection_ExtendedString theCopyright) -> XmlTObjDrivers_DocumentStorageDriver

        :type theCopyright: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(XmlTObjDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_DocumentStorageDriver
XmlTObjDrivers_DocumentStorageDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_swigregister
XmlTObjDrivers_DocumentStorageDriver_swigregister(XmlTObjDrivers_DocumentStorageDriver)

def XmlTObjDrivers_DocumentStorageDriver_get_type_name(*args):
    """
    XmlTObjDrivers_DocumentStorageDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_get_type_name(*args)

def XmlTObjDrivers_DocumentStorageDriver_get_type_descriptor(*args):
    """
    XmlTObjDrivers_DocumentStorageDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_get_type_descriptor(*args)

class XmlTObjDrivers_ModelDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlTObjDrivers_ModelDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlTObjDrivers_ModelDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlTObjDrivers_ModelDriver self, Handle_Message_Messenger theMessageDriver) -> XmlTObjDrivers_ModelDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_ModelDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlTObjDrivers_ModelDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlTObjDrivers_ModelDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlTObjDrivers_ModelDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ModelDriver
XmlTObjDrivers_ModelDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_swigregister
XmlTObjDrivers_ModelDriver_swigregister(XmlTObjDrivers_ModelDriver)

def XmlTObjDrivers_ModelDriver_get_type_name(*args):
    """
    XmlTObjDrivers_ModelDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_get_type_name(*args)

def XmlTObjDrivers_ModelDriver_get_type_descriptor(*args):
    """
    XmlTObjDrivers_ModelDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_get_type_descriptor(*args)

class XmlTObjDrivers_IntSparseArrayDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlTObjDrivers_IntSparseArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlTObjDrivers_IntSparseArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlTObjDrivers_IntSparseArrayDriver self, Handle_Message_Messenger theMessageDriver) -> XmlTObjDrivers_IntSparseArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_IntSparseArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlTObjDrivers_IntSparseArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlTObjDrivers_IntSparseArrayDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlTObjDrivers_IntSparseArrayDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_IntSparseArrayDriver
XmlTObjDrivers_IntSparseArrayDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_swigregister
XmlTObjDrivers_IntSparseArrayDriver_swigregister(XmlTObjDrivers_IntSparseArrayDriver)

def XmlTObjDrivers_IntSparseArrayDriver_get_type_name(*args):
    """
    XmlTObjDrivers_IntSparseArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_get_type_name(*args)

def XmlTObjDrivers_IntSparseArrayDriver_get_type_descriptor(*args):
    """
    XmlTObjDrivers_IntSparseArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_get_type_descriptor(*args)

class Handle_XmlTObjDrivers_ModelDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlTObjDrivers_ModelDriver self)

        Nullify the handle


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlTObjDrivers_ModelDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlTObjDrivers_ModelDriver self, XmlTObjDrivers_ModelDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlTObjDrivers_ModelDriver self, Handle_XmlTObjDrivers_ModelDriver theHandle) -> Handle_XmlTObjDrivers_ModelDriver
        assign(Handle_XmlTObjDrivers_ModelDriver self, XmlTObjDrivers_ModelDriver thePtr) -> Handle_XmlTObjDrivers_ModelDriver
        assign(Handle_XmlTObjDrivers_ModelDriver self, Handle_XmlTObjDrivers_ModelDriver theHandle) -> Handle_XmlTObjDrivers_ModelDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlTObjDrivers_ModelDriver self) -> XmlTObjDrivers_ModelDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlTObjDrivers_ModelDriver self) -> XmlTObjDrivers_ModelDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlTObjDrivers_ModelDriver self) -> XmlTObjDrivers_ModelDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlTObjDrivers.new_Handle_XmlTObjDrivers_ModelDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DownCast)
    __swig_destroy__ = _XmlTObjDrivers.delete_Handle_XmlTObjDrivers_ModelDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlTObjDrivers_ModelDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlTObjDrivers_ModelDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlTObjDrivers_ModelDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlTObjDrivers_ModelDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlTObjDrivers_ModelDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlTObjDrivers_ModelDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlTObjDrivers_ModelDriver self)

        Memory deallocator for transient classes


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlTObjDrivers_ModelDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlTObjDrivers_ModelDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlTObjDrivers_ModelDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlTObjDrivers_ModelDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlTObjDrivers_ModelDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlTObjDrivers_ModelDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlTObjDrivers_ModelDriver self)

        Increments the reference counter of this object


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlTObjDrivers_ModelDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DecrementRefCounter(self, *args)

Handle_XmlTObjDrivers_ModelDriver_swigregister = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_swigregister
Handle_XmlTObjDrivers_ModelDriver_swigregister(Handle_XmlTObjDrivers_ModelDriver)

def Handle_XmlTObjDrivers_ModelDriver_DownCast(thing):
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DownCast(thing)
Handle_XmlTObjDrivers_ModelDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DownCast

class Handle_XmlTObjDrivers_ReferenceDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlTObjDrivers_ReferenceDriver self)

        Nullify the handle


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlTObjDrivers_ReferenceDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlTObjDrivers_ReferenceDriver self, XmlTObjDrivers_ReferenceDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlTObjDrivers_ReferenceDriver self, Handle_XmlTObjDrivers_ReferenceDriver theHandle) -> Handle_XmlTObjDrivers_ReferenceDriver
        assign(Handle_XmlTObjDrivers_ReferenceDriver self, XmlTObjDrivers_ReferenceDriver thePtr) -> Handle_XmlTObjDrivers_ReferenceDriver
        assign(Handle_XmlTObjDrivers_ReferenceDriver self, Handle_XmlTObjDrivers_ReferenceDriver theHandle) -> Handle_XmlTObjDrivers_ReferenceDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlTObjDrivers_ReferenceDriver self) -> XmlTObjDrivers_ReferenceDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlTObjDrivers_ReferenceDriver self) -> XmlTObjDrivers_ReferenceDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlTObjDrivers_ReferenceDriver self) -> XmlTObjDrivers_ReferenceDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlTObjDrivers.new_Handle_XmlTObjDrivers_ReferenceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DownCast)
    __swig_destroy__ = _XmlTObjDrivers.delete_Handle_XmlTObjDrivers_ReferenceDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlTObjDrivers_ReferenceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlTObjDrivers_ReferenceDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlTObjDrivers_ReferenceDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlTObjDrivers_ReferenceDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlTObjDrivers_ReferenceDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlTObjDrivers_ReferenceDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlTObjDrivers_ReferenceDriver self)

        Memory deallocator for transient classes


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlTObjDrivers_ReferenceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlTObjDrivers_ReferenceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlTObjDrivers_ReferenceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlTObjDrivers_ReferenceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlTObjDrivers_ReferenceDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlTObjDrivers_ReferenceDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlTObjDrivers_ReferenceDriver self)

        Increments the reference counter of this object


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlTObjDrivers_ReferenceDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DecrementRefCounter(self, *args)

Handle_XmlTObjDrivers_ReferenceDriver_swigregister = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_swigregister
Handle_XmlTObjDrivers_ReferenceDriver_swigregister(Handle_XmlTObjDrivers_ReferenceDriver)

def Handle_XmlTObjDrivers_ReferenceDriver_DownCast(thing):
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DownCast(thing)
Handle_XmlTObjDrivers_ReferenceDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DownCast

class XmlTObjDrivers_XYZDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlTObjDrivers_XYZDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlTObjDrivers_XYZDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlTObjDrivers_XYZDriver self, Handle_Message_Messenger theMessageDriver) -> XmlTObjDrivers_XYZDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_XYZDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlTObjDrivers_XYZDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlTObjDrivers_XYZDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlTObjDrivers_XYZDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_XYZDriver
XmlTObjDrivers_XYZDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_swigregister
XmlTObjDrivers_XYZDriver_swigregister(XmlTObjDrivers_XYZDriver)

def XmlTObjDrivers_XYZDriver_get_type_name(*args):
    """
    XmlTObjDrivers_XYZDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_get_type_name(*args)

def XmlTObjDrivers_XYZDriver_get_type_descriptor(*args):
    """
    XmlTObjDrivers_XYZDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_get_type_descriptor(*args)

class XmlTObjDrivers_DocumentRetrievalDriver(XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlTObjDrivers_DocumentRetrievalDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlTObjDrivers_DocumentRetrievalDriver(self) 
            return h


    def __init__(self, *args):
        """__init__(XmlTObjDrivers_DocumentRetrievalDriver self) -> XmlTObjDrivers_DocumentRetrievalDriver"""
        this = _XmlTObjDrivers.new_XmlTObjDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(XmlTObjDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_DocumentRetrievalDriver
XmlTObjDrivers_DocumentRetrievalDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_swigregister
XmlTObjDrivers_DocumentRetrievalDriver_swigregister(XmlTObjDrivers_DocumentRetrievalDriver)

def XmlTObjDrivers_DocumentRetrievalDriver_get_type_name(*args):
    """
    XmlTObjDrivers_DocumentRetrievalDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_get_type_name(*args)

def XmlTObjDrivers_DocumentRetrievalDriver_get_type_descriptor(*args):
    """
    XmlTObjDrivers_DocumentRetrievalDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

class XmlTObjDrivers_(object):
    """Class for registering storage/retrieval drivers for TObj XML persistence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Factory(*args):
        """
        Factory(Standard_GUID aGUID) -> Handle_Standard_Transient

        Returns a driver corresponding to <aGUID>. Used for plugin.

        :type aGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XmlTObjDrivers.XmlTObjDrivers__Factory(*args)

    Factory = staticmethod(Factory)

    def DefineFormat(*args):
        """
        DefineFormat(Handle_TDocStd_Application theApp)

        Defines format "TObjXml" and registers its read and write drivers
        in the specified application

        :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

        """
        return _XmlTObjDrivers.XmlTObjDrivers__DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def AddDrivers(*args):
        """
        AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger anMsgDrv)

        :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
        :type anMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _XmlTObjDrivers.XmlTObjDrivers__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def __init__(self):
        """Class for registering storage/retrieval drivers for TObj XML persistence"""
        this = _XmlTObjDrivers.new_XmlTObjDrivers_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_
XmlTObjDrivers__swigregister = _XmlTObjDrivers.XmlTObjDrivers__swigregister
XmlTObjDrivers__swigregister(XmlTObjDrivers_)

def XmlTObjDrivers__Factory(*args):
    """
    XmlTObjDrivers__Factory(Standard_GUID aGUID) -> Handle_Standard_Transient

    Returns a driver corresponding to <aGUID>. Used for plugin.

    :type aGUID: OCC.wrapper.Standard.Standard_GUID
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _XmlTObjDrivers.XmlTObjDrivers__Factory(*args)

def XmlTObjDrivers__DefineFormat(*args):
    """
    XmlTObjDrivers__DefineFormat(Handle_TDocStd_Application theApp)

    Defines format "TObjXml" and registers its read and write drivers
    in the specified application

    :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

    """
    return _XmlTObjDrivers.XmlTObjDrivers__DefineFormat(*args)

def XmlTObjDrivers__AddDrivers(*args):
    """
    XmlTObjDrivers__AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger anMsgDrv)

    :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
    :type anMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _XmlTObjDrivers.XmlTObjDrivers__AddDrivers(*args)

class Handle_XmlTObjDrivers_DocumentRetrievalDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlTObjDrivers_DocumentRetrievalDriver self)

        Nullify the handle


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, XmlTObjDrivers_DocumentRetrievalDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, Handle_XmlTObjDrivers_DocumentRetrievalDriver theHandle) -> Handle_XmlTObjDrivers_DocumentRetrievalDriver
        assign(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, XmlTObjDrivers_DocumentRetrievalDriver thePtr) -> Handle_XmlTObjDrivers_DocumentRetrievalDriver
        assign(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, Handle_XmlTObjDrivers_DocumentRetrievalDriver theHandle) -> Handle_XmlTObjDrivers_DocumentRetrievalDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> XmlTObjDrivers_DocumentRetrievalDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> XmlTObjDrivers_DocumentRetrievalDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> XmlTObjDrivers_DocumentRetrievalDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlTObjDrivers.new_Handle_XmlTObjDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast)
    __swig_destroy__ = _XmlTObjDrivers.delete_Handle_XmlTObjDrivers_DocumentRetrievalDriver

    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CreateDocument(self, *args):
        """
        CreateDocument(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> Handle_CDM_Document

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_CDM_Document theNewDocument, Handle_CDM_Application theApplication)
        Read(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_Read(self, *args)


    def DocumentVersion(self, *args):
        """
        DocumentVersion(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DocumentVersion(self, *args)


    def ReferenceCounter(self, *args):
        """
        ReferenceCounter(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_ReferenceCounter(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_GetFormat(self, *args)


    def GetStatus(self, *args):
        """
        GetStatus(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> PCDM_ReaderStatus

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_GetStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XmlTObjDrivers_DocumentRetrievalDriver self)

        Memory deallocator for transient classes


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlTObjDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlTObjDrivers_DocumentRetrievalDriver self)

        Increments the reference counter of this object


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlTObjDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DecrementRefCounter(self, *args)

Handle_XmlTObjDrivers_DocumentRetrievalDriver_swigregister = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_swigregister
Handle_XmlTObjDrivers_DocumentRetrievalDriver_swigregister(Handle_XmlTObjDrivers_DocumentRetrievalDriver)

def Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast(thing):
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast(thing)
Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast

class Handle_XmlTObjDrivers_XYZDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlTObjDrivers_XYZDriver self)

        Nullify the handle


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlTObjDrivers_XYZDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlTObjDrivers_XYZDriver self, XmlTObjDrivers_XYZDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlTObjDrivers_XYZDriver self, Handle_XmlTObjDrivers_XYZDriver theHandle) -> Handle_XmlTObjDrivers_XYZDriver
        assign(Handle_XmlTObjDrivers_XYZDriver self, XmlTObjDrivers_XYZDriver thePtr) -> Handle_XmlTObjDrivers_XYZDriver
        assign(Handle_XmlTObjDrivers_XYZDriver self, Handle_XmlTObjDrivers_XYZDriver theHandle) -> Handle_XmlTObjDrivers_XYZDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlTObjDrivers_XYZDriver self) -> XmlTObjDrivers_XYZDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlTObjDrivers_XYZDriver self) -> XmlTObjDrivers_XYZDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlTObjDrivers_XYZDriver self) -> XmlTObjDrivers_XYZDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlTObjDrivers.new_Handle_XmlTObjDrivers_XYZDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DownCast)
    __swig_destroy__ = _XmlTObjDrivers.delete_Handle_XmlTObjDrivers_XYZDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlTObjDrivers_XYZDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlTObjDrivers_XYZDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlTObjDrivers_XYZDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlTObjDrivers_XYZDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlTObjDrivers_XYZDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlTObjDrivers_XYZDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlTObjDrivers_XYZDriver self)

        Memory deallocator for transient classes


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlTObjDrivers_XYZDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlTObjDrivers_XYZDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlTObjDrivers_XYZDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlTObjDrivers_XYZDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlTObjDrivers_XYZDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlTObjDrivers_XYZDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlTObjDrivers_XYZDriver self)

        Increments the reference counter of this object


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlTObjDrivers_XYZDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DecrementRefCounter(self, *args)

Handle_XmlTObjDrivers_XYZDriver_swigregister = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_swigregister
Handle_XmlTObjDrivers_XYZDriver_swigregister(Handle_XmlTObjDrivers_XYZDriver)

def Handle_XmlTObjDrivers_XYZDriver_DownCast(thing):
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DownCast(thing)
Handle_XmlTObjDrivers_XYZDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DownCast

class XmlTObjDrivers_ObjectDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlTObjDrivers_ObjectDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlTObjDrivers_ObjectDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlTObjDrivers_ObjectDriver self, Handle_Message_Messenger theMessageDriver) -> XmlTObjDrivers_ObjectDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_ObjectDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlTObjDrivers_ObjectDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlTObjDrivers_ObjectDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlTObjDrivers_ObjectDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ObjectDriver
XmlTObjDrivers_ObjectDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_swigregister
XmlTObjDrivers_ObjectDriver_swigregister(XmlTObjDrivers_ObjectDriver)

def XmlTObjDrivers_ObjectDriver_get_type_name(*args):
    """
    XmlTObjDrivers_ObjectDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_get_type_name(*args)

def XmlTObjDrivers_ObjectDriver_get_type_descriptor(*args):
    """
    XmlTObjDrivers_ObjectDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_get_type_descriptor(*args)

class Handle_XmlTObjDrivers_ObjectDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlTObjDrivers_ObjectDriver self)

        Nullify the handle


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlTObjDrivers_ObjectDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlTObjDrivers_ObjectDriver self, XmlTObjDrivers_ObjectDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlTObjDrivers_ObjectDriver self, Handle_XmlTObjDrivers_ObjectDriver theHandle) -> Handle_XmlTObjDrivers_ObjectDriver
        assign(Handle_XmlTObjDrivers_ObjectDriver self, XmlTObjDrivers_ObjectDriver thePtr) -> Handle_XmlTObjDrivers_ObjectDriver
        assign(Handle_XmlTObjDrivers_ObjectDriver self, Handle_XmlTObjDrivers_ObjectDriver theHandle) -> Handle_XmlTObjDrivers_ObjectDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlTObjDrivers_ObjectDriver self) -> XmlTObjDrivers_ObjectDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlTObjDrivers_ObjectDriver self) -> XmlTObjDrivers_ObjectDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlTObjDrivers_ObjectDriver self) -> XmlTObjDrivers_ObjectDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlTObjDrivers.new_Handle_XmlTObjDrivers_ObjectDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DownCast)
    __swig_destroy__ = _XmlTObjDrivers.delete_Handle_XmlTObjDrivers_ObjectDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlTObjDrivers_ObjectDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlTObjDrivers_ObjectDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlTObjDrivers_ObjectDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlTObjDrivers_ObjectDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlTObjDrivers_ObjectDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlTObjDrivers_ObjectDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlTObjDrivers_ObjectDriver self)

        Memory deallocator for transient classes


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlTObjDrivers_ObjectDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlTObjDrivers_ObjectDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlTObjDrivers_ObjectDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlTObjDrivers_ObjectDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlTObjDrivers_ObjectDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlTObjDrivers_ObjectDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlTObjDrivers_ObjectDriver self)

        Increments the reference counter of this object


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlTObjDrivers_ObjectDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DecrementRefCounter(self, *args)

Handle_XmlTObjDrivers_ObjectDriver_swigregister = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_swigregister
Handle_XmlTObjDrivers_ObjectDriver_swigregister(Handle_XmlTObjDrivers_ObjectDriver)

def Handle_XmlTObjDrivers_ObjectDriver_DownCast(thing):
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DownCast(thing)
Handle_XmlTObjDrivers_ObjectDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DownCast

class Handle_XmlTObjDrivers_DocumentStorageDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlTObjDrivers_DocumentStorageDriver self)

        Nullify the handle


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlTObjDrivers_DocumentStorageDriver self, XmlTObjDrivers_DocumentStorageDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_XmlTObjDrivers_DocumentStorageDriver theHandle) -> Handle_XmlTObjDrivers_DocumentStorageDriver
        assign(Handle_XmlTObjDrivers_DocumentStorageDriver self, XmlTObjDrivers_DocumentStorageDriver thePtr) -> Handle_XmlTObjDrivers_DocumentStorageDriver
        assign(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_XmlTObjDrivers_DocumentStorageDriver theHandle) -> Handle_XmlTObjDrivers_DocumentStorageDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> XmlTObjDrivers_DocumentStorageDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> XmlTObjDrivers_DocumentStorageDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> XmlTObjDrivers_DocumentStorageDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlTObjDrivers.new_Handle_XmlTObjDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast)
    __swig_destroy__ = _XmlTObjDrivers.delete_Handle_XmlTObjDrivers_DocumentStorageDriver

    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Write(self, *args):
        """
        Write(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, TCollection_ExtendedString theFileName)
        Write(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_Write(self, *args)


    def Make(self, *args):
        """
        Make(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument) -> Handle_PCDM_Document
        Make(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument, NCollection_Sequence_Handle_PCDM_Document Documents)

        By default, puts  in the Sequence the  document returns
        by the previous Make method.

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type Documents: OCC.wrapper.PCDM.PCDM_SequenceOfDocument

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_Make(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_XmlTObjDrivers_DocumentStorageDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_GetFormat(self, *args)


    def IsError(self, *args):
        """
        IsError(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IsError(self, *args)


    def SetIsError(self, *args):
        """
        SetIsError(Handle_XmlTObjDrivers_DocumentStorageDriver self, Standard_Boolean const theIsError)

        :type theIsError: bool

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_SetIsError(self, *args)


    def GetStoreStatus(self, *args):
        """
        GetStoreStatus(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> PCDM_StoreStatus

        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_GetStoreStatus(self, *args)


    def SetStoreStatus(self, *args):
        """
        SetStoreStatus(Handle_XmlTObjDrivers_DocumentStorageDriver self, PCDM_StoreStatus const theStoreStatus)

        :type theStoreStatus: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_SetStoreStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XmlTObjDrivers_DocumentStorageDriver self)

        Memory deallocator for transient classes


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlTObjDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlTObjDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlTObjDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlTObjDrivers_DocumentStorageDriver self)

        Increments the reference counter of this object


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlTObjDrivers_DocumentStorageDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DecrementRefCounter(self, *args)

Handle_XmlTObjDrivers_DocumentStorageDriver_swigregister = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_swigregister
Handle_XmlTObjDrivers_DocumentStorageDriver_swigregister(Handle_XmlTObjDrivers_DocumentStorageDriver)

def Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast(thing):
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast(thing)
Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast

class Handle_XmlTObjDrivers_IntSparseArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlTObjDrivers_IntSparseArrayDriver self)

        Nullify the handle


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlTObjDrivers_IntSparseArrayDriver self, XmlTObjDrivers_IntSparseArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlTObjDrivers_IntSparseArrayDriver self, Handle_XmlTObjDrivers_IntSparseArrayDriver theHandle) -> Handle_XmlTObjDrivers_IntSparseArrayDriver
        assign(Handle_XmlTObjDrivers_IntSparseArrayDriver self, XmlTObjDrivers_IntSparseArrayDriver thePtr) -> Handle_XmlTObjDrivers_IntSparseArrayDriver
        assign(Handle_XmlTObjDrivers_IntSparseArrayDriver self, Handle_XmlTObjDrivers_IntSparseArrayDriver theHandle) -> Handle_XmlTObjDrivers_IntSparseArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> XmlTObjDrivers_IntSparseArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> XmlTObjDrivers_IntSparseArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> XmlTObjDrivers_IntSparseArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlTObjDrivers.new_Handle_XmlTObjDrivers_IntSparseArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast)
    __swig_destroy__ = _XmlTObjDrivers.delete_Handle_XmlTObjDrivers_IntSparseArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlTObjDrivers_IntSparseArrayDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlTObjDrivers_IntSparseArrayDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlTObjDrivers_IntSparseArrayDriver self)

        Memory deallocator for transient classes


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlTObjDrivers_IntSparseArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlTObjDrivers_IntSparseArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlTObjDrivers_IntSparseArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlTObjDrivers_IntSparseArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlTObjDrivers_IntSparseArrayDriver self)

        Increments the reference counter of this object


        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlTObjDrivers_IntSparseArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DecrementRefCounter(self, *args)

Handle_XmlTObjDrivers_IntSparseArrayDriver_swigregister = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_swigregister
Handle_XmlTObjDrivers_IntSparseArrayDriver_swigregister(Handle_XmlTObjDrivers_IntSparseArrayDriver)

def Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast(thing):
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast(thing)
Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast



