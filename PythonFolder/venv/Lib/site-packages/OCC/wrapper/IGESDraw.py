# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESDraw')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESDraw')
    _IGESDraw = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESDraw', [dirname(__file__)])
        except ImportError:
            import _IGESDraw
            return _IGESDraw
        try:
            _mod = imp.load_module('_IGESDraw', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESDraw = swig_import_helper()
    del swig_import_helper
else:
    import _IGESDraw
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESDraw.delete_SwigPyIterator

    def value(self):
        return _IGESDraw.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESDraw.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESDraw.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESDraw.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESDraw.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESDraw.SwigPyIterator_copy(self)

    def next(self):
        return _IGESDraw.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESDraw.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESDraw.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESDraw.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESDraw.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESDraw.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESDraw.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESDraw.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESDraw.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESDraw.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESDraw.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESDraw.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESDraw.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESDraw.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESDraw.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDraw.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESDraw.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESDraw.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESDraw.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESDraw.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESDraw.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESDraw.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESDraw.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDraw.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESDraw.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESDraw.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESDraw.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESDraw.ptr_to_number(item)
ptr_to_number = _IGESDraw.ptr_to_number

def HashCode(*args):
    return _IGESDraw.HashCode(*args)
HashCode = _IGESDraw.HashCode

def ptr_equal(a, b):
    return _IGESDraw.ptr_equal(a, b)
ptr_equal = _IGESDraw.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESDimen
else:
    import IGESDimen
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGraph
else:
    import IGESGraph
del _swig_python_version_info
class IGESDraw_PerspectiveView(IGESData.IGESData_ViewKindEntity):
    """
    defines IGESPerspectiveView, Type <410> Form <1>
    in package IGESDraw

    Supports a perspective view.
    Any geometric projection is defined by a view plane
    and the projectors that pass through the view plane.
    Projectors can be visualized as rays of light that
    form an image by passing through the viewed object
    and striking the view plane.
    The projectors are defined via a point called the
    Centre-of-Projection or the eye-point.
    A perspective view is formed by all projectors that
    emanate from the Centre-of-Projection and pass
    through the view plane.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_PerspectiveView
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_PerspectiveView(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_PerspectiveView self) -> IGESDraw_PerspectiveView

        defines IGESPerspectiveView, Type <410> Form <1>
        in package IGESDraw

        Supports a perspective view.
        Any geometric projection is defined by a view plane
        and the projectors that pass through the view plane.
        Projectors can be visualized as rays of light that
        form an image by passing through the viewed object
        and striking the view plane.
        The projectors are defined via a point called the
        Centre-of-Projection or the eye-point.
        A perspective view is formed by all projectors that
        emanate from the Centre-of-Projection and pass
        through the view plane.
        """
        this = _IGESDraw.new_IGESDraw_PerspectiveView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_PerspectiveView self, Standard_Integer const aViewNumber, Standard_Real const aScaleFactor, gp_XYZ aViewNormalVector, gp_XYZ aViewReferencePoint, gp_XYZ aCenterOfProjection, gp_XYZ aViewUpVector, Standard_Real const aViewPlaneDistance, gp_XY aTopLeft, gp_XY aBottomRight, Standard_Integer const aDepthClip, Standard_Real const aBackPlaneDistance, Standard_Real const aFrontPlaneDistance)

        This method is used to set the fields of the class
        PerspectiveView
        - aViewNumber         : The desired view
        - aScaleFactor        : Scale factor
        - aViewNormalVector   : View plane normal vector (model space)
        - aViewReferencePoint : View reference point     (model space)
        - aCenterOfProjection : Center Of Projection     (model space)
        - aViewUpVector       : View up vector           (model space)
        - aViewPlaneDistance  : View plane distance      (model space)
        - aTopLeft            : Top-left point of clipping window
        - aBottomRight        : Bottom-right point of clipping window
        - aDepthClip          : Depth clipping indicator
        - aBackPlaneDistance  : Distance of back clipping plane
        - aFrontPlaneDistance : Distance of front clipping plane

        :type aViewNumber: int
        :type aScaleFactor: float
        :type aViewNormalVector: OCC.wrapper.gp.gp_XYZ
        :type aViewReferencePoint: OCC.wrapper.gp.gp_XYZ
        :type aCenterOfProjection: OCC.wrapper.gp.gp_XYZ
        :type aViewUpVector: OCC.wrapper.gp.gp_XYZ
        :type aViewPlaneDistance: float
        :type aTopLeft: OCC.wrapper.gp.gp_XY
        :type aBottomRight: OCC.wrapper.gp.gp_XY
        :type aDepthClip: int
        :type aBackPlaneDistance: float
        :type aFrontPlaneDistance: float

        """
        return _IGESDraw.IGESDraw_PerspectiveView_Init(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns True (for a single view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_PerspectiveView_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(IGESDraw_PerspectiveView self) -> Standard_Integer

        Returns 1 (single view)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_PerspectiveView_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESDraw_PerspectiveView self, Standard_Integer const num) -> Handle_IGESData_ViewKindEntity

        For a single view, returns <me> whatever <num>

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ViewItem(self, *args)


    def ViewNumber(self, *args):
        """
        ViewNumber(IGESDraw_PerspectiveView self) -> Standard_Integer

        returns the view number associated with <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ViewNumber(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(IGESDraw_PerspectiveView self) -> Standard_Real

        returns the scale factor associated with <me>

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ScaleFactor(self, *args)


    def ViewNormalVector(self, *args):
        """
        ViewNormalVector(IGESDraw_PerspectiveView self) -> gp_Vec

        returns the View plane normal vector (model space)

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ViewNormalVector(self, *args)


    def ViewReferencePoint(self, *args):
        """
        ViewReferencePoint(IGESDraw_PerspectiveView self) -> gp_Pnt

        returns the View reference point (model space)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ViewReferencePoint(self, *args)


    def CenterOfProjection(self, *args):
        """
        CenterOfProjection(IGESDraw_PerspectiveView self) -> gp_Pnt

        returns the Center Of Projection (model space)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_PerspectiveView_CenterOfProjection(self, *args)


    def ViewUpVector(self, *args):
        """
        ViewUpVector(IGESDraw_PerspectiveView self) -> gp_Vec

        returns the View up vector (model space)

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ViewUpVector(self, *args)


    def ViewPlaneDistance(self, *args):
        """
        ViewPlaneDistance(IGESDraw_PerspectiveView self) -> Standard_Real

        returns the View plane distance (model space)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ViewPlaneDistance(self, *args)


    def TopLeft(self, *args):
        """
        TopLeft(IGESDraw_PerspectiveView self) -> gp_Pnt2d

        returns the top left point of the clipping window

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDraw.IGESDraw_PerspectiveView_TopLeft(self, *args)


    def BottomRight(self, *args):
        """
        BottomRight(IGESDraw_PerspectiveView self) -> gp_Pnt2d

        returns the bottom right point of the clipping window

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDraw.IGESDraw_PerspectiveView_BottomRight(self, *args)


    def DepthClip(self, *args):
        """
        DepthClip(IGESDraw_PerspectiveView self) -> Standard_Integer

        returns the Depth clipping indicator
        0 = No depth clipping
        1 = Back clipping plane ON
        2 = Front clipping plane ON
        3 = Back and front clipping planes ON

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_PerspectiveView_DepthClip(self, *args)


    def BackPlaneDistance(self, *args):
        """
        BackPlaneDistance(IGESDraw_PerspectiveView self) -> Standard_Real

        returns the View coordinate denoting the location of
        the back clipping plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_PerspectiveView_BackPlaneDistance(self, *args)


    def FrontPlaneDistance(self, *args):
        """
        FrontPlaneDistance(IGESDraw_PerspectiveView self) -> Standard_Real

        returns the View coordinate denoting the location of
        the front clipping plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_PerspectiveView_FrontPlaneDistance(self, *args)


    def ViewMatrix(self, *args):
        """
        ViewMatrix(IGESDraw_PerspectiveView self) -> Handle_IGESData_TransfEntity

        returns the Transformation Matrix

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ViewMatrix(self, *args)


    def ModelToView(self, *args):
        """
        ModelToView(IGESDraw_PerspectiveView self, gp_XYZ coords) -> gp_XYZ

        returns XYX from the Model space to the View space by
        applying the View Matrix

        :type coords: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.IGESDraw_PerspectiveView_ModelToView(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_PerspectiveView_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_PerspectiveView_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_PerspectiveView_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_PerspectiveView
IGESDraw_PerspectiveView_swigregister = _IGESDraw.IGESDraw_PerspectiveView_swigregister
IGESDraw_PerspectiveView_swigregister(IGESDraw_PerspectiveView)

def IGESDraw_PerspectiveView_get_type_name(*args):
    """
    IGESDraw_PerspectiveView_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_PerspectiveView_get_type_name(*args)

def IGESDraw_PerspectiveView_get_type_descriptor(*args):
    """
    IGESDraw_PerspectiveView_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_PerspectiveView_get_type_descriptor(*args)

class IGESDraw_HArray1OfConnectPoint(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_HArray1OfConnectPoint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_HArray1OfConnectPoint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_HArray1OfConnectPoint self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESDraw_HArray1OfConnectPoint
        __init__(IGESDraw_HArray1OfConnectPoint self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESDraw_ConnectPoint theValue) -> IGESDraw_HArray1OfConnectPoint
        __init__(IGESDraw_HArray1OfConnectPoint self, NCollection_Array1_Handle_IGESDraw_ConnectPoint theOther) -> IGESDraw_HArray1OfConnectPoint

        :type theOther: OCC.wrapper.IGESDraw.IGESDraw_Array1OfConnectPoint

        """
        this = _IGESDraw.new_IGESDraw_HArray1OfConnectPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDraw.IGESDraw_Array1OfConnectPoint

        """
        res = _IGESDraw.IGESDraw_HArray1OfConnectPoint_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESDraw_HArray1OfConnectPoint self) -> NCollection_Array1_Handle_IGESDraw_ConnectPoint

        :rtype: OCC.wrapper.IGESDraw.IGESDraw_Array1OfConnectPoint

        """
        return _IGESDraw.IGESDraw_HArray1OfConnectPoint_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_HArray1OfConnectPoint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_HArray1OfConnectPoint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_HArray1OfConnectPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_HArray1OfConnectPoint
IGESDraw_HArray1OfConnectPoint_swigregister = _IGESDraw.IGESDraw_HArray1OfConnectPoint_swigregister
IGESDraw_HArray1OfConnectPoint_swigregister(IGESDraw_HArray1OfConnectPoint)

def IGESDraw_HArray1OfConnectPoint_get_type_name(*args):
    """
    IGESDraw_HArray1OfConnectPoint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_HArray1OfConnectPoint_get_type_name(*args)

def IGESDraw_HArray1OfConnectPoint_get_type_descriptor(*args):
    """
    IGESDraw_HArray1OfConnectPoint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_HArray1OfConnectPoint_get_type_descriptor(*args)

class IGESDraw_Drawing(IGESData.IGESData_IGESEntity):
    """
    defines IGESDrawing, Type <404> Form <0>
    in package IGESDraw

    Specifies a drawing as a collection of annotation entities
    defined in drawing space, and views which together
    constitute a single representation of a part
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_Drawing
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_Drawing(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_Drawing self) -> IGESDraw_Drawing

        defines IGESDrawing, Type <404> Form <0>
        in package IGESDraw

        Specifies a drawing as a collection of annotation entities
        defined in drawing space, and views which together
        constitute a single representation of a part
        """
        this = _IGESDraw.new_IGESDraw_Drawing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_Drawing self, Handle_IGESDraw_HArray1OfViewKindEntity allViews, Handle_TColgp_HArray1OfXY allViewOrigins, Handle_IGESData_HArray1OfIGESEntity allAnnotations)

        This method is used to set the fields of the class
        Drawing
        - allViews       : Pointers to DEs of View entities
        - allViewOrigins : Origin coordinates of transformed Views
        - allAnnotations : Pointers to DEs of Annotation entities
        raises exception if Lengths of allViews and allViewOrigins are
        not same.

        :type allViews: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allViewOrigins: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY
        :type allAnnotations: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.IGESDraw_Drawing_Init(self, *args)


    def NbViews(self, *args):
        """
        NbViews(IGESDraw_Drawing self) -> Standard_Integer

        returns the number of view pointers in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_Drawing_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESDraw_Drawing self, Standard_Integer const ViewIndex) -> Handle_IGESData_ViewKindEntity

        returns the ViewKindEntity indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbViews().

        :type ViewIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.IGESDraw_Drawing_ViewItem(self, *args)


    def ViewOrigin(self, *args):
        """
        ViewOrigin(IGESDraw_Drawing self, Standard_Integer const TViewIndex) -> gp_Pnt2d

        returns the Drawing space coordinates of the origin of the
        Transformed view indicated by TViewIndex
        raises an exception if TViewIndex <= 0 or TViewIndex > NbViews().

        :type TViewIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDraw.IGESDraw_Drawing_ViewOrigin(self, *args)


    def NbAnnotations(self, *args):
        """
        NbAnnotations(IGESDraw_Drawing self) -> Standard_Integer

        returns the number of Annotation entities in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_Drawing_NbAnnotations(self, *args)


    def Annotation(self, *args):
        """
        Annotation(IGESDraw_Drawing self, Standard_Integer const AnnotationIndex) -> Handle_IGESData_IGESEntity

        returns the Annotation entity in this Drawing, indicated by the
        AnnotationIndex
        raises an exception if AnnotationIndex <= 0 or
        AnnotationIndex > NbAnnotations().

        :type AnnotationIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_Drawing_Annotation(self, *args)


    def ViewToDrawing(self, *args):
        """
        ViewToDrawing(IGESDraw_Drawing self, Standard_Integer const NumView, gp_XYZ ViewCoords) -> gp_XY

        :type NumView: int
        :type ViewCoords: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.gp.gp_XY

        """
        return _IGESDraw.IGESDraw_Drawing_ViewToDrawing(self, *args)


    def DrawingUnit(self, *args):
        """
        DrawingUnit(IGESDraw_Drawing self) -> Standard_Boolean

        Returns the Drawing Unit Value if it is specified (by a
        specific property entity)
        If not specified, returns False, and val as zero :
        unit to consider is then the model unit in GlobalSection

        :type value: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_Drawing_DrawingUnit(self, *args)


    def DrawingSize(self, *args):
        """
        DrawingSize(IGESDraw_Drawing self) -> Standard_Boolean

        Returns the Drawing Size if it is specified (by a
        specific property entity)
        If not specified, returns False, and X,Y as zero :
        unit to consider is then the model unit in GlobalSection

        :type X: float
        :type Y: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_Drawing_DrawingSize(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_Drawing_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_Drawing_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_Drawing_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_Drawing
IGESDraw_Drawing_swigregister = _IGESDraw.IGESDraw_Drawing_swigregister
IGESDraw_Drawing_swigregister(IGESDraw_Drawing)

def IGESDraw_Drawing_get_type_name(*args):
    """
    IGESDraw_Drawing_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_Drawing_get_type_name(*args)

def IGESDraw_Drawing_get_type_descriptor(*args):
    """
    IGESDraw_Drawing_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_Drawing_get_type_descriptor(*args)

class IGESDraw_NetworkSubfigureDef(IGESData.IGESData_IGESEntity):
    """
    defines IGESNetworkSubfigureDef,
    Type <320> Form Number <0> in package IGESDraw

    This class differs from the ordinary subfigure definition
    in that it defines a specialized subfigure, one whose
    instances may participate in networks.

    The Number of associated(child) Connect Point Entities
    in the Network Subfigure Instance must match the number
    in the Network Subfigure Definition, their order must
    be identical, and any unused points of connection in
    the instance must be indicated by a null(zero) pointer.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_NetworkSubfigureDef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_NetworkSubfigureDef(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_NetworkSubfigureDef self) -> IGESDraw_NetworkSubfigureDef

        defines IGESNetworkSubfigureDef,
        Type <320> Form Number <0> in package IGESDraw

        This class differs from the ordinary subfigure definition
        in that it defines a specialized subfigure, one whose
        instances may participate in networks.

        The Number of associated(child) Connect Point Entities
        in the Network Subfigure Instance must match the number
        in the Network Subfigure Definition, their order must
        be identical, and any unused points of connection in
        the instance must be indicated by a null(zero) pointer.
        """
        this = _IGESDraw.new_IGESDraw_NetworkSubfigureDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_NetworkSubfigureDef self, Standard_Integer const aDepth, Handle_TCollection_HAsciiString aName, Handle_IGESData_HArray1OfIGESEntity allEntities, Standard_Integer const aTypeFlag, Handle_TCollection_HAsciiString aDesignator, Handle_IGESGraph_TextDisplayTemplate aTemplate, Handle_IGESDraw_HArray1OfConnectPoint allPointEntities)

        This method is used to set fields of the class
        NetworkSubfigureDef
        - aDepth           : Depth of Subfigure
        (indicating the amount of nesting)
        - aName            : Subfigure Name
        - allEntities      : Associated subfigures Entities exclusive
        of primary reference designator and
        Control Points.
        - aTypeFlag        : Type flag determines which Entity
        belongs in which design
        (Logical design or Physical design)
        - aDesignator      : Designator HAsciiString and its Template
        - allPointEntities : Associated Connect Point Entities

        :type aDepth: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type aTypeFlag: int
        :type aDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aTemplate: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type allPointEntities: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_Init(self, *args)


    def Depth(self, *args):
        """
        Depth(IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        returns Depth of Subfigure(indication the amount of nesting)
        Note : The Depth is inclusive of both Network Subfigure Definition
        Entity and the Ordinary Subfigure Definition Entity.
        Thus, the two may be nested.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_Depth(self, *args)


    def Name(self, *args):
        """
        Name(IGESDraw_NetworkSubfigureDef self) -> Handle_TCollection_HAsciiString

        returns the Subfigure Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_Name(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        returns Number of Associated(child) entries in subfigure exclusive
        of primary reference designator and Control Points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_NbEntities(self, *args)


    def Entity(self, *args):
        """
        Entity(IGESDraw_NetworkSubfigureDef self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th IGESEntity in subfigure exclusive of primary
        reference designator and Control Points
        raises exception if Index  <=0 or Index > NbEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_Entity(self, *args)


    def TypeFlag(self, *args):
        """
        TypeFlag(IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        return value = 0 : Not Specified
        = 1 : Logical  design
        = 2 : Physical design

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_TypeFlag(self, *args)


    def Designator(self, *args):
        """
        Designator(IGESDraw_NetworkSubfigureDef self) -> Handle_TCollection_HAsciiString

        returns Primary Reference Designator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_Designator(self, *args)


    def HasDesignatorTemplate(self, *args):
        """
        HasDesignatorTemplate(IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        returns True if Text Display Template is specified for
        primary designator else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_HasDesignatorTemplate(self, *args)


    def DesignatorTemplate(self, *args):
        """
        DesignatorTemplate(IGESDraw_NetworkSubfigureDef self) -> Handle_IGESGraph_TextDisplayTemplate

        if Text Display Template specified then return TextDisplayTemplate
        else return NULL Handle

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_DesignatorTemplate(self, *args)


    def NbPointEntities(self, *args):
        """
        NbPointEntities(IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        returns the Number Of Associated(child) Connect Point Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_NbPointEntities(self, *args)


    def HasPointEntity(self, *args):
        """
        HasPointEntity(IGESDraw_NetworkSubfigureDef self, Standard_Integer const Index) -> Standard_Boolean

        returns True is Index'th Associated Connect Point Entity is present
        else returns False
        raises exception if Index is out of bound

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_HasPointEntity(self, *args)


    def PointEntity(self, *args):
        """
        PointEntity(IGESDraw_NetworkSubfigureDef self, Standard_Integer const Index) -> Handle_IGESDraw_ConnectPoint

        returns the Index'th Associated Connect Point Entity
        raises exception if Index <= 0 or Index > NbPointEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_PointEntity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_NetworkSubfigureDef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_NetworkSubfigureDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_NetworkSubfigureDef
IGESDraw_NetworkSubfigureDef_swigregister = _IGESDraw.IGESDraw_NetworkSubfigureDef_swigregister
IGESDraw_NetworkSubfigureDef_swigregister(IGESDraw_NetworkSubfigureDef)

def IGESDraw_NetworkSubfigureDef_get_type_name(*args):
    """
    IGESDraw_NetworkSubfigureDef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_NetworkSubfigureDef_get_type_name(*args)

def IGESDraw_NetworkSubfigureDef_get_type_descriptor(*args):
    """
    IGESDraw_NetworkSubfigureDef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_NetworkSubfigureDef_get_type_descriptor(*args)

class IGESDraw_View(IGESData.IGESData_ViewKindEntity):
    """
    defines IGES View Entity, Type <410> Form <0>
    in package IGESDraw

    Used to define a framework for specifying a viewing
    orientation of an object in three dimensional model
    space (X,Y,Z). The framework is also used to support
    the projection of all or part of model space onto a
    view volume.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_View
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_View(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_View self) -> IGESDraw_View

        defines IGES View Entity, Type <410> Form <0>
        in package IGESDraw

        Used to define a framework for specifying a viewing
        orientation of an object in three dimensional model
        space (X,Y,Z). The framework is also used to support
        the projection of all or part of model space onto a
        view volume.
        """
        this = _IGESDraw.new_IGESDraw_View(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_View self, Standard_Integer const aViewNum, Standard_Real const aScale, Handle_IGESGeom_Plane aLeftPlane, Handle_IGESGeom_Plane aTopPlane, Handle_IGESGeom_Plane aRightPlane, Handle_IGESGeom_Plane aBottomPlane, Handle_IGESGeom_Plane aBackPlane, Handle_IGESGeom_Plane aFrontPlane)

        This method is used to set fields of the class View
        - aViewNum     : View number
        - aScale       : Scale factor
        - aLeftPlane   : Left   plane of view volume
        - aTopPlane    : Top    plane of view volume
        - aRightPlane  : Right  plane of view volume
        - aBottomPlane : Bottom plane of view volume
        - aBackPlane   : Back   plane of view volume
        - aFrontPlane  : Front  plane of view volume

        :type aViewNum: int
        :type aScale: float
        :type aLeftPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aTopPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aRightPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aBottomPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aBackPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aFrontPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.IGESDraw_View_Init(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(IGESDraw_View self) -> Standard_Boolean

        Returns True (for a single view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_View_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(IGESDraw_View self) -> Standard_Integer

        Returns 1 (single view)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_View_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESDraw_View self, Standard_Integer const num) -> Handle_IGESData_ViewKindEntity

        For a single view, returns <me> whatever <num>

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.IGESDraw_View_ViewItem(self, *args)


    def ViewNumber(self, *args):
        """
        ViewNumber(IGESDraw_View self) -> Standard_Integer

        returns integer number identifying view orientation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_View_ViewNumber(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(IGESDraw_View self) -> Standard_Real

        returns the scale factor(Default = 1.0)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_View_ScaleFactor(self, *args)


    def HasLeftPlane(self, *args):
        """
        HasLeftPlane(IGESDraw_View self) -> Standard_Boolean

        returns False if left side of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_View_HasLeftPlane(self, *args)


    def LeftPlane(self, *args):
        """
        LeftPlane(IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the left side of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.IGESDraw_View_LeftPlane(self, *args)


    def HasTopPlane(self, *args):
        """
        HasTopPlane(IGESDraw_View self) -> Standard_Boolean

        returns False if top of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_View_HasTopPlane(self, *args)


    def TopPlane(self, *args):
        """
        TopPlane(IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the top of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.IGESDraw_View_TopPlane(self, *args)


    def HasRightPlane(self, *args):
        """
        HasRightPlane(IGESDraw_View self) -> Standard_Boolean

        returns False if right side of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_View_HasRightPlane(self, *args)


    def RightPlane(self, *args):
        """
        RightPlane(IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the right side of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.IGESDraw_View_RightPlane(self, *args)


    def HasBottomPlane(self, *args):
        """
        HasBottomPlane(IGESDraw_View self) -> Standard_Boolean

        returns False if bottom of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_View_HasBottomPlane(self, *args)


    def BottomPlane(self, *args):
        """
        BottomPlane(IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the bottom of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.IGESDraw_View_BottomPlane(self, *args)


    def HasBackPlane(self, *args):
        """
        HasBackPlane(IGESDraw_View self) -> Standard_Boolean

        returns False if back of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_View_HasBackPlane(self, *args)


    def BackPlane(self, *args):
        """
        BackPlane(IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the back of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.IGESDraw_View_BackPlane(self, *args)


    def HasFrontPlane(self, *args):
        """
        HasFrontPlane(IGESDraw_View self) -> Standard_Boolean

        returns False if front of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_View_HasFrontPlane(self, *args)


    def FrontPlane(self, *args):
        """
        FrontPlane(IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the front of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.IGESDraw_View_FrontPlane(self, *args)


    def ViewMatrix(self, *args):
        """
        ViewMatrix(IGESDraw_View self) -> Handle_IGESData_TransfEntity

        returns the Transformation Matrix

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.IGESDraw_View_ViewMatrix(self, *args)


    def ModelToView(self, *args):
        """
        ModelToView(IGESDraw_View self, gp_XYZ coords) -> gp_XYZ

        returns XYZ from the Model space to the View space by
        applying the View Matrix

        :type coords: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.IGESDraw_View_ModelToView(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_View_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_View_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_View_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_View
IGESDraw_View_swigregister = _IGESDraw.IGESDraw_View_swigregister
IGESDraw_View_swigregister(IGESDraw_View)

def IGESDraw_View_get_type_name(*args):
    """
    IGESDraw_View_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_View_get_type_name(*args)

def IGESDraw_View_get_type_descriptor(*args):
    """
    IGESDraw_View_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_View_get_type_descriptor(*args)

class IGESDraw_SegmentedViewsVisible(IGESData.IGESData_ViewKindEntity):
    """
    defines IGESSegmentedViewsVisible, Type <402> Form <19>
    in package IGESDraw

    Permits the association of display parameters with the
    segments of curves in a given view
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_SegmentedViewsVisible
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_SegmentedViewsVisible(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_SegmentedViewsVisible self) -> IGESDraw_SegmentedViewsVisible

        defines IGESSegmentedViewsVisible, Type <402> Form <19>
        in package IGESDraw

        Permits the association of display parameters with the
        segments of curves in a given view
        """
        this = _IGESDraw.new_IGESDraw_SegmentedViewsVisible(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_SegmentedViewsVisible self, Handle_IGESDraw_HArray1OfViewKindEntity allViews, Handle_TColStd_HArray1OfReal allBreakpointParameters, Handle_TColStd_HArray1OfInteger allDisplayFlags, Handle_TColStd_HArray1OfInteger allColorValues, Handle_IGESGraph_HArray1OfColor allColorDefinitions, Handle_TColStd_HArray1OfInteger allLineFontValues, Handle_IGESBasic_HArray1OfLineFontEntity allLineFontDefinitions, Handle_TColStd_HArray1OfInteger allLineWeights)

        This method is used to set the fields of the class
        SegmentedViewsVisible
        - allViews                : Pointers to View Entities
        - allBreakpointParameters : Parameters of breakpoints
        - allDisplayFlags         : Display flags
        - allColorValues          : Color Values
        - allColorDefinitions     : Color Definitions
        - allLineFontValues       : LineFont values
        - allLineFontDefinitions  : LineFont Definitions
        - allLineWeights          : Line weights
        raises exception if Lengths of allViews, allBreakpointParameters,
        allDisplayFlags, allColorValues, allColorDefinitions,
        allLineFontValues, allLineFontDefinitions and allLineWeights
        are not same.

        :type allViews: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allBreakpointParameters: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allDisplayFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allColorValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allColorDefinitions: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfColor
        :type allLineFontValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allLineFontDefinitions: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity
        :type allLineWeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_Init(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns False (for a complex view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Returns the count of Views referenced by <me> (inherited)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_NbViews(self, *args)


    def NbSegmentBlocks(self, *args):
        """
        NbSegmentBlocks(IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        returns the number of view/segment blocks in <me>
        Similar to NbViews but has a more general significance

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_NbSegmentBlocks(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESDraw_SegmentedViewsVisible self, Standard_Integer const ViewIndex) -> Handle_IGESData_ViewKindEntity

        returns the View entity indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or
        ViewIndex > NbSegmentBlocks()

        :type ViewIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_ViewItem(self, *args)


    def BreakpointParameter(self, *args):
        """
        BreakpointParameter(IGESDraw_SegmentedViewsVisible self, Standard_Integer const BreakpointIndex) -> Standard_Real

        returns the parameter of the breakpoint indicated by
        BreakpointIndex
        raises an exception if BreakpointIndex <= 0 or
        BreakpointIndex > NbSegmentBlocks().

        :type BreakpointIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_BreakpointParameter(self, *args)


    def DisplayFlag(self, *args):
        """
        DisplayFlag(IGESDraw_SegmentedViewsVisible self, Standard_Integer const FlagIndex) -> Standard_Integer

        returns the Display flag indicated by FlagIndex
        raises an exception if FlagIndex <= 0 or
        FlagIndex > NbSegmentBlocks().

        :type FlagIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_DisplayFlag(self, *args)


    def IsColorDefinition(self, *args):
        """
        IsColorDefinition(IGESDraw_SegmentedViewsVisible self, Standard_Integer const ColorIndex) -> Standard_Boolean

        returns True if the ColorIndex'th value of the
        "theColorDefinitions" field of <me> is a pointer
        raises an exception if ColorIndex <= 0 or
        ColorIndex > NbSegmentBlocks().

        :type ColorIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_IsColorDefinition(self, *args)


    def ColorValue(self, *args):
        """
        ColorValue(IGESDraw_SegmentedViewsVisible self, Standard_Integer const ColorIndex) -> Standard_Integer

        returns the Color value indicated by ColorIndex
        raises an exception if ColorIndex <= 0 or
        ColorIndex > NbSegmentBlocks().

        :type ColorIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_ColorValue(self, *args)


    def ColorDefinition(self, *args):
        """
        ColorDefinition(IGESDraw_SegmentedViewsVisible self, Standard_Integer const ColorIndex) -> Handle_IGESGraph_Color

        returns the Color definition entity indicated by ColorIndex
        raises an exception if ColorIndex <= 0 or
        ColorIndex > NbSegmentBlocks().

        :type ColorIndex: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_ColorDefinition(self, *args)


    def IsFontDefinition(self, *args):
        """
        IsFontDefinition(IGESDraw_SegmentedViewsVisible self, Standard_Integer const FontIndex) -> Standard_Boolean

        returns True if the FontIndex'th value of the
        "theLineFontDefinitions" field of <me> is a pointer
        raises an exception if FontIndex <= 0 or
        FontIndex > NbSegmentBlocks().

        :type FontIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_IsFontDefinition(self, *args)


    def LineFontValue(self, *args):
        """
        LineFontValue(IGESDraw_SegmentedViewsVisible self, Standard_Integer const FontIndex) -> Standard_Integer

        returns the LineFont value indicated by FontIndex
        raises an exception if FontIndex <= 0 or
        FontIndex > NbSegmentBlocks().

        :type FontIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_LineFontValue(self, *args)


    def LineFontDefinition(self, *args):
        """
        LineFontDefinition(IGESDraw_SegmentedViewsVisible self, Standard_Integer const FontIndex) -> Handle_IGESData_LineFontEntity

        returns the LineFont definition entity indicated by FontIndex
        raises an exception if FontIndex <= 0 or
        FontIndex > NbSegmentBlocks().

        :type FontIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_LineFontDefinition(self, *args)


    def LineWeightItem(self, *args):
        """
        LineWeightItem(IGESDraw_SegmentedViewsVisible self, Standard_Integer const WeightIndex) -> Standard_Integer

        returns the LineWeight value indicated by WeightIndex
        raises an exception if WeightIndex <= 0 or
        WeightIndex > NbSegmentBlocks().

        :type WeightIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_LineWeightItem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_SegmentedViewsVisible_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_SegmentedViewsVisible_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_SegmentedViewsVisible
IGESDraw_SegmentedViewsVisible_swigregister = _IGESDraw.IGESDraw_SegmentedViewsVisible_swigregister
IGESDraw_SegmentedViewsVisible_swigregister(IGESDraw_SegmentedViewsVisible)

def IGESDraw_SegmentedViewsVisible_get_type_name(*args):
    """
    IGESDraw_SegmentedViewsVisible_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_SegmentedViewsVisible_get_type_name(*args)

def IGESDraw_SegmentedViewsVisible_get_type_descriptor(*args):
    """
    IGESDraw_SegmentedViewsVisible_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_SegmentedViewsVisible_get_type_descriptor(*args)

class IGESDraw_LabelDisplay(IGESData.IGESData_LabelDisplayEntity):
    """
    defines IGESLabelDisplay, Type <402> Form <5>
    in package IGESDraw

    Permits one or more displays for the
    entity labels of an entity
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_LabelDisplay
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_LabelDisplay(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_LabelDisplay self) -> IGESDraw_LabelDisplay

        defines IGESLabelDisplay, Type <402> Form <5>
        in package IGESDraw

        Permits one or more displays for the
        entity labels of an entity
        """
        this = _IGESDraw.new_IGESDraw_LabelDisplay(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_LabelDisplay self, Handle_IGESDraw_HArray1OfViewKindEntity allViews, Handle_TColgp_HArray1OfXYZ allTextLocations, Handle_IGESDimen_HArray1OfLeaderArrow allLeaderEntities, Handle_TColStd_HArray1OfInteger allLabelLevels, Handle_IGESData_HArray1OfIGESEntity allDisplayedEntities)

        This method is used to set the fields of the class
        LabelDisplay
        - allViews             : Pointers to View Entities
        - allTextLocations     : Coordinates of text locations in the views
        - allLeaderEntities    : Pointers to Leader Entities in the views
        - allLabelLevels       : Entity label level numbers in the views
        - allDisplayedEntities : Pointers to the entities being displayed
        raises exception if Lengths of allViews, allTextLocations,
        allLeaderEntities, allLabelLevels and allDisplayedEntities are
        not same.

        :type allViews: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allTextLocations: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ
        :type allLeaderEntities: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow
        :type allLabelLevels: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allDisplayedEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.IGESDraw_LabelDisplay_Init(self, *args)


    def NbLabels(self, *args):
        """
        NbLabels(IGESDraw_LabelDisplay self) -> Standard_Integer

        returns the number of label placements in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_LabelDisplay_NbLabels(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> Handle_IGESData_ViewKindEntity

        returns the View entity indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.IGESDraw_LabelDisplay_ViewItem(self, *args)


    def TextLocation(self, *args):
        """
        TextLocation(IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> gp_Pnt

        returns the 3d-Point coordinates of the text location, in the
        view indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_LabelDisplay_TextLocation(self, *args)


    def LeaderEntity(self, *args):
        """
        LeaderEntity(IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> Handle_IGESDimen_LeaderArrow

        returns the Leader entity in the view indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDraw.IGESDraw_LabelDisplay_LeaderEntity(self, *args)


    def LabelLevel(self, *args):
        """
        LabelLevel(IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> Standard_Integer

        returns the Entity label level number in the view indicated
        by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_LabelDisplay_LabelLevel(self, *args)


    def DisplayedEntity(self, *args):
        """
        DisplayedEntity(IGESDraw_LabelDisplay self, Standard_Integer const EntityIndex) -> Handle_IGESData_IGESEntity

        returns the entity indicated by EntityIndex
        raises an exception if EntityIndex <= 0 or EntityIndex > NbLabels().

        :type EntityIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_LabelDisplay_DisplayedEntity(self, *args)


    def TransformedTextLocation(self, *args):
        """
        TransformedTextLocation(IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> gp_Pnt

        returns the transformed 3d-Point coordinates of the text
        location, in the view indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_LabelDisplay_TransformedTextLocation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_LabelDisplay_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_LabelDisplay_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_LabelDisplay_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_LabelDisplay
IGESDraw_LabelDisplay_swigregister = _IGESDraw.IGESDraw_LabelDisplay_swigregister
IGESDraw_LabelDisplay_swigregister(IGESDraw_LabelDisplay)

def IGESDraw_LabelDisplay_get_type_name(*args):
    """
    IGESDraw_LabelDisplay_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_LabelDisplay_get_type_name(*args)

def IGESDraw_LabelDisplay_get_type_descriptor(*args):
    """
    IGESDraw_LabelDisplay_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_LabelDisplay_get_type_descriptor(*args)

class IGESDraw_RectArraySubfigure(IGESData.IGESData_IGESEntity):
    """
    Defines IGES Rectangular Array Subfigure Instance Entity,
    Type <412> Form Number <0> in package IGESDraw
    Used to produce copies of object called the base entity,
    arranging them in equally spaced rows and columns
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_RectArraySubfigure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_RectArraySubfigure(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_RectArraySubfigure self) -> IGESDraw_RectArraySubfigure

        Defines IGES Rectangular Array Subfigure Instance Entity,
        Type <412> Form Number <0> in package IGESDraw
        Used to produce copies of object called the base entity,
        arranging them in equally spaced rows and columns
        """
        this = _IGESDraw.new_IGESDraw_RectArraySubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_RectArraySubfigure self, Handle_IGESData_IGESEntity aBase, Standard_Real const aScale, gp_XYZ aCorner, Standard_Integer const nbCols, Standard_Integer const nbRows, Standard_Real const hDisp, Standard_Real const vtDisp, Standard_Real const rotationAngle, Standard_Integer const doDont, Handle_TColStd_HArray1OfInteger allNumPos)

        This method is used to set the fields of the class
        RectArraySubfigure
        - aBase         : a base entity which is replicated
        - aScale        : Scale Factor
        - aCorner       : lower left hand corner for the entire array
        - nbCols        : Number of columns of the array
        - nbRows        : Number of rows of the array
        - hDisp         : Column separations
        - vtDisp        : Row separation
        - rotationAngle : Rotation angle specified in radians
        - allDont       : DO-DON'T flag to control which portion
        to display
        - allNumPos     : List of positions to be or not to be
        displayed

        :type aBase: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aScale: float
        :type aCorner: OCC.wrapper.gp.gp_XYZ
        :type nbCols: int
        :type nbRows: int
        :type hDisp: float
        :type vtDisp: float
        :type rotationAngle: float
        :type doDont: int
        :type allNumPos: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_Init(self, *args)


    def BaseEntity(self, *args):
        """
        BaseEntity(IGESDraw_RectArraySubfigure self) -> Handle_IGESData_IGESEntity

        returns the base entity, copies of which are produced

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_BaseEntity(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(IGESDraw_RectArraySubfigure self) -> Standard_Real

        returns the scale factor

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_ScaleFactor(self, *args)


    def LowerLeftCorner(self, *args):
        """
        LowerLeftCorner(IGESDraw_RectArraySubfigure self) -> gp_Pnt

        returns coordinates of lower left hand corner for the entire array

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_LowerLeftCorner(self, *args)


    def TransformedLowerLeftCorner(self, *args):
        """
        TransformedLowerLeftCorner(IGESDraw_RectArraySubfigure self) -> gp_Pnt

        returns Transformed coordinates of lower left corner for the array

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_TransformedLowerLeftCorner(self, *args)


    def NbColumns(self, *args):
        """
        NbColumns(IGESDraw_RectArraySubfigure self) -> Standard_Integer

        returns number of columns in the array

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_NbColumns(self, *args)


    def NbRows(self, *args):
        """
        NbRows(IGESDraw_RectArraySubfigure self) -> Standard_Integer

        returns number of rows in the array

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_NbRows(self, *args)


    def ColumnSeparation(self, *args):
        """
        ColumnSeparation(IGESDraw_RectArraySubfigure self) -> Standard_Real

        returns horizontal distance between columns

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_ColumnSeparation(self, *args)


    def RowSeparation(self, *args):
        """
        RowSeparation(IGESDraw_RectArraySubfigure self) -> Standard_Real

        returns vertical distance between rows

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_RowSeparation(self, *args)


    def RotationAngle(self, *args):
        """
        RotationAngle(IGESDraw_RectArraySubfigure self) -> Standard_Real

        returns rotation angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_RotationAngle(self, *args)


    def DisplayFlag(self, *args):
        """
        DisplayFlag(IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        returns True if (ListCount = 0) i.e., all elements to be displayed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_DisplayFlag(self, *args)


    def ListCount(self, *args):
        """
        ListCount(IGESDraw_RectArraySubfigure self) -> Standard_Integer

        returns 0 if all replicated entities to be displayed

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_ListCount(self, *args)


    def DoDontFlag(self, *args):
        """
        DoDontFlag(IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        returns 0 if half or fewer of the elements of  the array are defined
        1 if half or more of the elements are defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_DoDontFlag(self, *args)


    def PositionNum(self, *args):
        """
        PositionNum(IGESDraw_RectArraySubfigure self, Standard_Integer const Index) -> Standard_Boolean

        returns whether Index is to be processed (DO)
        or not to be processed(DON'T)
        if (ListCount = 0) return theDoDontFlag

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_PositionNum(self, *args)


    def ListPosition(self, *args):
        """
        ListPosition(IGESDraw_RectArraySubfigure self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th value position
        raises exception if Index <= 0 or Index > ListCount()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_ListPosition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_RectArraySubfigure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_RectArraySubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_RectArraySubfigure
IGESDraw_RectArraySubfigure_swigregister = _IGESDraw.IGESDraw_RectArraySubfigure_swigregister
IGESDraw_RectArraySubfigure_swigregister(IGESDraw_RectArraySubfigure)

def IGESDraw_RectArraySubfigure_get_type_name(*args):
    """
    IGESDraw_RectArraySubfigure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_RectArraySubfigure_get_type_name(*args)

def IGESDraw_RectArraySubfigure_get_type_descriptor(*args):
    """
    IGESDraw_RectArraySubfigure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_RectArraySubfigure_get_type_descriptor(*args)

class IGESDraw_GeneralModule(IGESData.IGESData_GeneralModule):
    """
    Definition of General Services for IGESDraw (specific part)
    This Services comprise : Shared & Implied Lists, Copy, Check
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_GeneralModule self) -> IGESDraw_GeneralModule

        Creates a GeneralModule from IGESDraw and puts it into GeneralLib


        """
        this = _IGESDraw.new_IGESDraw_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_GeneralModule_OwnSharedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by an IGESEntity <ent> (in
        addition to Associativities). Redefined for ViewsVisible ...

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_GeneralModule_OwnImpliedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_GeneralModule_OwnCopyCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        redefined for ViewsVisible ... (takes only the implied ref.s
        which have also been copied)

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_GeneralModule_OwnRenewCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Clears parameters with can cause looping structures :
        redefined for ViewsVisible ... (clears the implied ref.s)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_GeneralModule_OwnDeleteCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Planar : Auxiliary
        Subfigures and ConnectPoint : Structure
        others : Drawing

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_GeneralModule
IGESDraw_GeneralModule_swigregister = _IGESDraw.IGESDraw_GeneralModule_swigregister
IGESDraw_GeneralModule_swigregister(IGESDraw_GeneralModule)

def IGESDraw_GeneralModule_get_type_name(*args):
    """
    IGESDraw_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_GeneralModule_get_type_name(*args)

def IGESDraw_GeneralModule_get_type_descriptor(*args):
    """
    IGESDraw_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_GeneralModule_get_type_descriptor(*args)

class IGESDraw_Planar(IGESData.IGESData_IGESEntity):
    """
    defines IGESPlanar, Type <402> Form <16>
    in package IGESDraw

    Indicates that a collection of entities is coplanar.The
    entities may be geometric, annotative, and/or structural.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_Planar
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_Planar(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_Planar self) -> IGESDraw_Planar

        defines IGESPlanar, Type <402> Form <16>
        in package IGESDraw

        Indicates that a collection of entities is coplanar.The
        entities may be geometric, annotative, and/or structural.
        """
        this = _IGESDraw.new_IGESDraw_Planar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_Planar self, Standard_Integer const nbMats, Handle_IGESGeom_TransformationMatrix aTransformationMatrix, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class Planar
        - nbMats                : Number of Transformation matrices
        - aTransformationMatrix : Pointer to the Transformation matrix
        - allEntities           : Pointers to the entities specified

        :type nbMats: int
        :type aTransformationMatrix: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.IGESDraw_Planar_Init(self, *args)


    def NbMatrices(self, *args):
        """
        NbMatrices(IGESDraw_Planar self) -> Standard_Integer

        returns the number of Transformation matrices in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_Planar_NbMatrices(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(IGESDraw_Planar self) -> Standard_Integer

        returns the number of Entities in the plane pointed to by this
        associativity

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_Planar_NbEntities(self, *args)


    def IsIdentityMatrix(self, *args):
        """
        IsIdentityMatrix(IGESDraw_Planar self) -> Standard_Boolean

        returns True if TransformationMatrix is Identity Matrix,
        i.e:- No Matrix defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_Planar_IsIdentityMatrix(self, *args)


    def TransformMatrix(self, *args):
        """
        TransformMatrix(IGESDraw_Planar self) -> Handle_IGESGeom_TransformationMatrix

        returns the Transformation matrix moving data from the XY plane
        into space or zero

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix

        """
        return _IGESDraw.IGESDraw_Planar_TransformMatrix(self, *args)


    def Entity(self, *args):
        """
        Entity(IGESDraw_Planar self, Standard_Integer const EntityIndex) -> Handle_IGESData_IGESEntity

        returns the Entity on the specified plane, indicated by EntityIndex
        raises an exception if EntityIndex <= 0 or
        EntityIndex > NbEntities()

        :type EntityIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_Planar_Entity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_Planar_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_Planar_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_Planar_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_Planar
IGESDraw_Planar_swigregister = _IGESDraw.IGESDraw_Planar_swigregister
IGESDraw_Planar_swigregister(IGESDraw_Planar)

def IGESDraw_Planar_get_type_name(*args):
    """
    IGESDraw_Planar_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_Planar_get_type_name(*args)

def IGESDraw_Planar_get_type_descriptor(*args):
    """
    IGESDraw_Planar_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_Planar_get_type_descriptor(*args)

class IGESDraw_ConnectPoint(IGESData.IGESData_IGESEntity):
    """
    defines IGESConnectPoint, Type <132> Form Number <0>
    in package IGESDraw

    Connect Point Entity describes a point of connection for
    zero, one or more entities. Its referenced from Composite
    curve, or Network Subfigure Definition/Instance, or Flow
    Associative Instance, or it may stand alone.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_ConnectPoint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_ConnectPoint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_ConnectPoint self) -> IGESDraw_ConnectPoint

        defines IGESConnectPoint, Type <132> Form Number <0>
        in package IGESDraw

        Connect Point Entity describes a point of connection for
        zero, one or more entities. Its referenced from Composite
        curve, or Network Subfigure Definition/Instance, or Flow
        Associative Instance, or it may stand alone.
        """
        this = _IGESDraw.new_IGESDraw_ConnectPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_ConnectPoint self, gp_XYZ aPoint, Handle_IGESData_IGESEntity aDisplaySymbol, Standard_Integer const aTypeFlag, Standard_Integer const aFunctionFlag, Handle_TCollection_HAsciiString aFunctionIdentifier, Handle_IGESGraph_TextDisplayTemplate anIdentifierTemplate, Handle_TCollection_HAsciiString aFunctionName, Handle_IGESGraph_TextDisplayTemplate aFunctionTemplate, Standard_Integer const aPointIdentifier, Standard_Integer const aFunctionCode, Standard_Integer const aSwapFlag, Handle_IGESData_IGESEntity anOwnerSubfigure)

        This method is used to set the fields of the class
        ConnectPoint
        - aPoint               : A Coordinate point
        - aDisplaySymbol       : Display symbol Geometry
        - aTypeFlag            : Type of the connection
        - aFunctionFlag        : Function flag for the connection
        - aFunctionIdentifier  : Connection Point Function Identifier
        - anIdentifierTemplate : Connection Point Function Template
        - aFunctionName        : Connection Point Function Name
        - aFunctionTemplate    : Connection Point Function Template
        - aPointIdentifier     : Unique Connect Point Identifier
        - aFunctionCode        : Connect Point Function Code
        - aSwapFlag            : Connect Point Swap Flag
        - anOwnerSubfigure     : Pointer to the "Owner" Entity

        :type aPoint: OCC.wrapper.gp.gp_XYZ
        :type aDisplaySymbol: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aTypeFlag: int
        :type aFunctionFlag: int
        :type aFunctionIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anIdentifierTemplate: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type aFunctionName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aFunctionTemplate: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type aPointIdentifier: int
        :type aFunctionCode: int
        :type aSwapFlag: int
        :type anOwnerSubfigure: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_ConnectPoint_Init(self, *args)


    def Point(self, *args):
        """
        Point(IGESDraw_ConnectPoint self) -> gp_Pnt

        returns the coordinate of the connection point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_ConnectPoint_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(IGESDraw_ConnectPoint self) -> gp_Pnt

        returns the Transformed coordinate of the connection point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_ConnectPoint_TransformedPoint(self, *args)


    def HasDisplaySymbol(self, *args):
        """
        HasDisplaySymbol(IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if Display symbol is specified
        else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ConnectPoint_HasDisplaySymbol(self, *args)


    def DisplaySymbol(self, *args):
        """
        DisplaySymbol(IGESDraw_ConnectPoint self) -> Handle_IGESData_IGESEntity

        if display symbol specified returns display symbol geometric entity
        else returns NULL Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_ConnectPoint_DisplaySymbol(self, *args)


    def TypeFlag(self, *args):
        """
        TypeFlag(IGESDraw_ConnectPoint self) -> Standard_Integer

        return value specifies a particular type of connection :
        Type Flag = 0   : Not Specified(default)
        1   : Nonspecific logical  point of connection
        2   : Nonspecific physical point of connection
        101 : Logical component pin
        102 : Logical part connector
        103 : Logical offpage connector
        104 : Logical global signal connector
        201 : Physical PWA surface mount pin
        202 : Physical PWA blind pin
        203 : Physical PWA thru-pin
        5001-9999 : Implementor defined.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ConnectPoint_TypeFlag(self, *args)


    def FunctionFlag(self, *args):
        """
        FunctionFlag(IGESDraw_ConnectPoint self) -> Standard_Integer

        returns Function Code that specifies a particular function for the
        ECO576 connection :
        e.g.,        Function Flag = 0 : Unspecified(default)
        = 1 : Electrical Signal
        = 2 : Fluid flow Signal

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ConnectPoint_FunctionFlag(self, *args)


    def FunctionIdentifier(self, *args):
        """
        FunctionIdentifier(IGESDraw_ConnectPoint self) -> Handle_TCollection_HAsciiString

        return HAsciiString identifying Pin Number or Nozzle Label etc.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.IGESDraw_ConnectPoint_FunctionIdentifier(self, *args)


    def HasIdentifierTemplate(self, *args):
        """
        HasIdentifierTemplate(IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if Text Display Template is specified for Identifier
        else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ConnectPoint_HasIdentifierTemplate(self, *args)


    def IdentifierTemplate(self, *args):
        """
        IdentifierTemplate(IGESDraw_ConnectPoint self) -> Handle_IGESGraph_TextDisplayTemplate

        if Text Display Template for the Function Identifier is defined,
        returns TestDisplayTemplate
        else returns NULL Handle

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDraw.IGESDraw_ConnectPoint_IdentifierTemplate(self, *args)


    def FunctionName(self, *args):
        """
        FunctionName(IGESDraw_ConnectPoint self) -> Handle_TCollection_HAsciiString

        returns Connection Point Function Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.IGESDraw_ConnectPoint_FunctionName(self, *args)


    def HasFunctionTemplate(self, *args):
        """
        HasFunctionTemplate(IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if Text Display Template is specified for Function Name
        else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ConnectPoint_HasFunctionTemplate(self, *args)


    def FunctionTemplate(self, *args):
        """
        FunctionTemplate(IGESDraw_ConnectPoint self) -> Handle_IGESGraph_TextDisplayTemplate

        if Text Display Template for the Function Name is defined,
        returns TestDisplayTemplate
        else returns NULL Handle

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDraw.IGESDraw_ConnectPoint_FunctionTemplate(self, *args)


    def PointIdentifier(self, *args):
        """
        PointIdentifier(IGESDraw_ConnectPoint self) -> Standard_Integer

        returns the Unique Connect Point Identifier

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ConnectPoint_PointIdentifier(self, *args)


    def FunctionCode(self, *args):
        """
        FunctionCode(IGESDraw_ConnectPoint self) -> Standard_Integer

        returns the Connect Point Function Code

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ConnectPoint_FunctionCode(self, *args)


    def SwapFlag(self, *args):
        """
        SwapFlag(IGESDraw_ConnectPoint self) -> Standard_Boolean

        return value = 0 : Connect point may be swapped(default)
        = 1 : Connect point may not be swapped

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ConnectPoint_SwapFlag(self, *args)


    def HasOwnerSubfigure(self, *args):
        """
        HasOwnerSubfigure(IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if Network Subfigure Instance/Definition Entity
        is specified
        else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ConnectPoint_HasOwnerSubfigure(self, *args)


    def OwnerSubfigure(self, *args):
        """
        OwnerSubfigure(IGESDraw_ConnectPoint self) -> Handle_IGESData_IGESEntity

        returns "owner" Network Subfigure Instance Entity,
        or Network Subfigure Definition Entity, or NULL Handle.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_ConnectPoint_OwnerSubfigure(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_ConnectPoint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_ConnectPoint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_ConnectPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ConnectPoint
IGESDraw_ConnectPoint_swigregister = _IGESDraw.IGESDraw_ConnectPoint_swigregister
IGESDraw_ConnectPoint_swigregister(IGESDraw_ConnectPoint)

def IGESDraw_ConnectPoint_get_type_name(*args):
    """
    IGESDraw_ConnectPoint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_ConnectPoint_get_type_name(*args)

def IGESDraw_ConnectPoint_get_type_descriptor(*args):
    """
    IGESDraw_ConnectPoint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_ConnectPoint_get_type_descriptor(*args)

class IGESDraw_ToolView(object):
    """
    Tool to work on a View. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolView self) -> IGESDraw_ToolView

        Returns a ToolView, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolView self, Handle_IGESDraw_View ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_View
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolView_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolView self, Handle_IGESDraw_View ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_View
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolView_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolView self, Handle_IGESDraw_View ent, Interface_EntityIterator iter)

        Lists the Entities shared by a View <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_View
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolView_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolView self, Handle_IGESDraw_View ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_View
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolView_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolView self, Handle_IGESDraw_View ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_View
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolView_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolView self, Handle_IGESDraw_View entfrom, Handle_IGESDraw_View entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_View
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_View
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolView_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolView self, Handle_IGESDraw_View ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_View
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolView_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolView
IGESDraw_ToolView_swigregister = _IGESDraw.IGESDraw_ToolView_swigregister
IGESDraw_ToolView_swigregister(IGESDraw_ToolView)

class IGESDraw_ViewsVisible(IGESData.IGESData_ViewKindEntity):
    """
    Defines IGESViewsVisible, Type <402>, Form <3>
    in package IGESDraw

    If an entity is to be displayed in more than one views,
    this class instance is used, which contains the Visible
    views and the associated entity Displays.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_ViewsVisible
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_ViewsVisible(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_ViewsVisible self) -> IGESDraw_ViewsVisible

        Defines IGESViewsVisible, Type <402>, Form <3>
        in package IGESDraw

        If an entity is to be displayed in more than one views,
        this class instance is used, which contains the Visible
        views and the associated entity Displays.
        """
        this = _IGESDraw.new_IGESDraw_ViewsVisible(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_ViewsVisible self, Handle_IGESDraw_HArray1OfViewKindEntity allViewEntities, Handle_IGESData_HArray1OfIGESEntity allDisplayEntity)

        This method is used to set the fields of the class
        ViewsVisible
        - allViewEntities  : All View kind entities
        - allDisplayEntity : All entities whose display is specified

        :type allViewEntities: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allDisplayEntity: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisible_Init(self, *args)


    def InitImplied(self, *args):
        """
        InitImplied(IGESDraw_ViewsVisible self, Handle_IGESData_HArray1OfIGESEntity allDisplayEntity)

        Changes only the list of Displayed Entities (Null allowed)

        :type allDisplayEntity: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisible_InitImplied(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns False (for a complex view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ViewsVisible_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(IGESDraw_ViewsVisible self) -> Standard_Integer

        returns the Number of views visible

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ViewsVisible_NbViews(self, *args)


    def NbDisplayedEntities(self, *args):
        """
        NbDisplayedEntities(IGESDraw_ViewsVisible self) -> Standard_Integer

        returns the number of entities displayed in the Views or zero if
        no Entities specified in these Views

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ViewsVisible_NbDisplayedEntities(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESDraw_ViewsVisible self, Standard_Integer const Index) -> Handle_IGESData_ViewKindEntity

        returns the Index'th ViewKindEntity Entity
        raises exception if Index  <= 0 or Index > NbViewsVisible()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisible_ViewItem(self, *args)


    def DisplayedEntity(self, *args):
        """
        DisplayedEntity(IGESDraw_ViewsVisible self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th entity whose display is being specified by
        this associativity instance
        raises exception if Index  <= 0 or Index > NbEntityDisplayed()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisible_DisplayedEntity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_ViewsVisible_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_ViewsVisible_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_ViewsVisible_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ViewsVisible
IGESDraw_ViewsVisible_swigregister = _IGESDraw.IGESDraw_ViewsVisible_swigregister
IGESDraw_ViewsVisible_swigregister(IGESDraw_ViewsVisible)

def IGESDraw_ViewsVisible_get_type_name(*args):
    """
    IGESDraw_ViewsVisible_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_ViewsVisible_get_type_name(*args)

def IGESDraw_ViewsVisible_get_type_descriptor(*args):
    """
    IGESDraw_ViewsVisible_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_ViewsVisible_get_type_descriptor(*args)

class Handle_IGESDraw_RectArraySubfigure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_RectArraySubfigure self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_RectArraySubfigure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_RectArraySubfigure self, IGESDraw_RectArraySubfigure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure theHandle) -> Handle_IGESDraw_RectArraySubfigure
        assign(Handle_IGESDraw_RectArraySubfigure self, IGESDraw_RectArraySubfigure thePtr) -> Handle_IGESDraw_RectArraySubfigure
        assign(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure theHandle) -> Handle_IGESDraw_RectArraySubfigure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_RectArraySubfigure self) -> IGESDraw_RectArraySubfigure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_RectArraySubfigure self) -> IGESDraw_RectArraySubfigure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_RectArraySubfigure self) -> IGESDraw_RectArraySubfigure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_RectArraySubfigure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_RectArraySubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_RectArraySubfigure_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_RectArraySubfigure

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_IGESEntity aBase, Standard_Real const aScale, gp_XYZ aCorner, Standard_Integer const nbCols, Standard_Integer const nbRows, Standard_Real const hDisp, Standard_Real const vtDisp, Standard_Real const rotationAngle, Standard_Integer const doDont, Handle_TColStd_HArray1OfInteger allNumPos)

        This method is used to set the fields of the class
        RectArraySubfigure
        - aBase         : a base entity which is replicated
        - aScale        : Scale Factor
        - aCorner       : lower left hand corner for the entire array
        - nbCols        : Number of columns of the array
        - nbRows        : Number of rows of the array
        - hDisp         : Column separations
        - vtDisp        : Row separation
        - rotationAngle : Rotation angle specified in radians
        - allDont       : DO-DON'T flag to control which portion
        to display
        - allNumPos     : List of positions to be or not to be
        displayed

        :type aBase: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aScale: float
        :type aCorner: OCC.wrapper.gp.gp_XYZ
        :type nbCols: int
        :type nbRows: int
        :type hDisp: float
        :type vtDisp: float
        :type rotationAngle: float
        :type doDont: int
        :type allNumPos: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Init(self, *args)


    def BaseEntity(self, *args):
        """
        BaseEntity(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_IGESEntity

        returns the base entity, copies of which are produced

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_BaseEntity(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Real

        returns the scale factor

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_ScaleFactor(self, *args)


    def LowerLeftCorner(self, *args):
        """
        LowerLeftCorner(Handle_IGESDraw_RectArraySubfigure self) -> gp_Pnt

        returns coordinates of lower left hand corner for the entire array

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_LowerLeftCorner(self, *args)


    def TransformedLowerLeftCorner(self, *args):
        """
        TransformedLowerLeftCorner(Handle_IGESDraw_RectArraySubfigure self) -> gp_Pnt

        returns Transformed coordinates of lower left corner for the array

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_TransformedLowerLeftCorner(self, *args)


    def NbColumns(self, *args):
        """
        NbColumns(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        returns number of columns in the array

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_NbColumns(self, *args)


    def NbRows(self, *args):
        """
        NbRows(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        returns number of rows in the array

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_NbRows(self, *args)


    def ColumnSeparation(self, *args):
        """
        ColumnSeparation(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Real

        returns horizontal distance between columns

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_ColumnSeparation(self, *args)


    def RowSeparation(self, *args):
        """
        RowSeparation(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Real

        returns vertical distance between rows

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_RowSeparation(self, *args)


    def RotationAngle(self, *args):
        """
        RotationAngle(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Real

        returns rotation angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_RotationAngle(self, *args)


    def DisplayFlag(self, *args):
        """
        DisplayFlag(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        returns True if (ListCount = 0) i.e., all elements to be displayed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DisplayFlag(self, *args)


    def ListCount(self, *args):
        """
        ListCount(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        returns 0 if all replicated entities to be displayed

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_ListCount(self, *args)


    def DoDontFlag(self, *args):
        """
        DoDontFlag(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        returns 0 if half or fewer of the elements of  the array are defined
        1 if half or more of the elements are defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DoDontFlag(self, *args)


    def PositionNum(self, *args):
        """
        PositionNum(Handle_IGESDraw_RectArraySubfigure self, Standard_Integer const Index) -> Standard_Boolean

        returns whether Index is to be processed (DO)
        or not to be processed(DON'T)
        if (ListCount = 0) return theDoDontFlag

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_PositionNum(self, *args)


    def ListPosition(self, *args):
        """
        ListPosition(Handle_IGESDraw_RectArraySubfigure self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th value position
        raises exception if Index <= 0 or Index > ListCount()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_ListPosition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_RectArraySubfigure self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_RectArraySubfigure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_RectArraySubfigure self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_RectArraySubfigure self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_RectArraySubfigure self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_RectArraySubfigure self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_RectArraySubfigure self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_RectArraySubfigure self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_RectArraySubfigure self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_RectArraySubfigure self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_RectArraySubfigure self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_RectArraySubfigure self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_RectArraySubfigure self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_RectArraySubfigure self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_RectArraySubfigure self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_RectArraySubfigure self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_RectArraySubfigure self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_RectArraySubfigure self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_RectArraySubfigure self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_RectArraySubfigure self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_RectArraySubfigure self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_RectArraySubfigure self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_RectArraySubfigure self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_RectArraySubfigure self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_RectArraySubfigure self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_RectArraySubfigure self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_RectArraySubfigure self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_RectArraySubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_RectArraySubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_RectArraySubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_RectArraySubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_RectArraySubfigure self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_RectArraySubfigure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DecrementRefCounter(self, *args)

Handle_IGESDraw_RectArraySubfigure_swigregister = _IGESDraw.Handle_IGESDraw_RectArraySubfigure_swigregister
Handle_IGESDraw_RectArraySubfigure_swigregister(Handle_IGESDraw_RectArraySubfigure)

def Handle_IGESDraw_RectArraySubfigure_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DownCast(thing)
Handle_IGESDraw_RectArraySubfigure_DownCast = _IGESDraw.Handle_IGESDraw_RectArraySubfigure_DownCast

class IGESDraw_ReadWriteModule(IGESData.IGESData_ReadWriteModule):
    """
    Defines Draw File Access Module for IGESDraw (specific parts)
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_ReadWriteModule self) -> IGESDraw_ReadWriteModule

        Creates a ReadWriteModule & puts it into ReaderLib & WriterLib


        """
        this = _IGESDraw.new_IGESDraw_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseIGES(self, *args):
        """
        CaseIGES(IGESDraw_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESDraw

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESDraw

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ReadWriteModule
IGESDraw_ReadWriteModule_swigregister = _IGESDraw.IGESDraw_ReadWriteModule_swigregister
IGESDraw_ReadWriteModule_swigregister(IGESDraw_ReadWriteModule)

def IGESDraw_ReadWriteModule_get_type_name(*args):
    """
    IGESDraw_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_ReadWriteModule_get_type_name(*args)

def IGESDraw_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESDraw_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_ReadWriteModule_get_type_descriptor(*args)

class IGESDraw_(object):
    """
    This package contains the group of classes necessary for
    Structure Entities implied in Drawings and Structured
    Graphics (Sets for drawing, Drawings and Views).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares dynamic data (Protocol, Modules) for this package


        """
        return _IGESDraw.IGESDraw__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESDraw_Protocol

        Returns the Protocol for this Package

        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_Protocol

        """
        return _IGESDraw.IGESDraw__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """
        This package contains the group of classes necessary for
        Structure Entities implied in Drawings and Structured
        Graphics (Sets for drawing, Drawings and Views).
        """
        this = _IGESDraw.new_IGESDraw_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDraw.delete_IGESDraw_
IGESDraw__swigregister = _IGESDraw.IGESDraw__swigregister
IGESDraw__swigregister(IGESDraw_)

def IGESDraw__Init(*args):
    """
    IGESDraw__Init()

    Prepares dynamic data (Protocol, Modules) for this package


    """
    return _IGESDraw.IGESDraw__Init(*args)

def IGESDraw__Protocol(*args):
    """
    IGESDraw__Protocol() -> Handle_IGESDraw_Protocol

    Returns the Protocol for this Package

    :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_Protocol

    """
    return _IGESDraw.IGESDraw__Protocol(*args)

class IGESDraw_ToolViewsVisibleWithAttr(object):
    """
    Tool to work on a ViewsVisibleWithAttr. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolViewsVisibleWithAttr self) -> IGESDraw_ToolViewsVisibleWithAttr

        Returns a ToolViewsVisibleWithAttr, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolViewsVisibleWithAttr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ViewsVisibleWithAttr <ent>, from
        its specific (own) parameters shared not implied, i.e. all but
        the Displayed Entities

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_OwnShared(self, *args)


    def OwnImplied(self, *args):
        """
        OwnImplied(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ViewsVisible <ent>, from
        its specific (own) implied parameters : the Displayed Entities

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_OwnImplied(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr entfrom, Handle_IGESDraw_ViewsVisibleWithAttr entto, Interface_CopyTool TC)

        Copies Specific Parameters shared not implied, i.e. all but
        the Displayed Entities

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_OwnCopy(self, *args)


    def OwnRenew(self, *args):
        """
        OwnRenew(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr entfrom, Handle_IGESDraw_ViewsVisibleWithAttr entto, Interface_CopyTool TC)

        Copies Specific implied Parameters : the Displayed Entities
        which have already been copied

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_OwnRenew(self, *args)


    def OwnWhenDelete(self, *args):
        """
        OwnWhenDelete(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent)

        Clears specific implied parameters, which cause looping
        structures; required for deletion

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_OwnWhenDelete(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDraw_ToolViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a ViewsVisibleWithAttr
        (all displayed entities must refer to <ent> in directory part,
        else the list is cleared)

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_OwnCorrect(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolViewsVisibleWithAttr
IGESDraw_ToolViewsVisibleWithAttr_swigregister = _IGESDraw.IGESDraw_ToolViewsVisibleWithAttr_swigregister
IGESDraw_ToolViewsVisibleWithAttr_swigregister(IGESDraw_ToolViewsVisibleWithAttr)

class IGESDraw_Protocol(IGESData.IGESData_Protocol):
    """Description of Protocol for IGESDraw"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_Protocol self) -> IGESDraw_Protocol

        Description of Protocol for IGESDraw
        """
        this = _IGESDraw.new_IGESDraw_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESDraw_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESDimen)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESDraw_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDraw.IGESDraw_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESDraw_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_Protocol_TypeNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_Protocol
IGESDraw_Protocol_swigregister = _IGESDraw.IGESDraw_Protocol_swigregister
IGESDraw_Protocol_swigregister(IGESDraw_Protocol)

def IGESDraw_Protocol_get_type_name(*args):
    """
    IGESDraw_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_Protocol_get_type_name(*args)

def IGESDraw_Protocol_get_type_descriptor(*args):
    """
    IGESDraw_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_Protocol_get_type_descriptor(*args)

class IGESDraw_HArray1OfViewKindEntity(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_HArray1OfViewKindEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_HArray1OfViewKindEntity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_HArray1OfViewKindEntity self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESDraw_HArray1OfViewKindEntity
        __init__(IGESDraw_HArray1OfViewKindEntity self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESData_ViewKindEntity theValue) -> IGESDraw_HArray1OfViewKindEntity
        __init__(IGESDraw_HArray1OfViewKindEntity self, NCollection_Array1_Handle_IGESData_ViewKindEntity theOther) -> IGESDraw_HArray1OfViewKindEntity

        :type theOther: OCC.wrapper.IGESDraw.IGESDraw_Array1OfViewKindEntity

        """
        this = _IGESDraw.new_IGESDraw_HArray1OfViewKindEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDraw.IGESDraw_Array1OfViewKindEntity

        """
        res = _IGESDraw.IGESDraw_HArray1OfViewKindEntity_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESDraw_HArray1OfViewKindEntity self) -> NCollection_Array1_Handle_IGESData_ViewKindEntity

        :rtype: OCC.wrapper.IGESDraw.IGESDraw_Array1OfViewKindEntity

        """
        return _IGESDraw.IGESDraw_HArray1OfViewKindEntity_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_HArray1OfViewKindEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_HArray1OfViewKindEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_HArray1OfViewKindEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_HArray1OfViewKindEntity
IGESDraw_HArray1OfViewKindEntity_swigregister = _IGESDraw.IGESDraw_HArray1OfViewKindEntity_swigregister
IGESDraw_HArray1OfViewKindEntity_swigregister(IGESDraw_HArray1OfViewKindEntity)

def IGESDraw_HArray1OfViewKindEntity_get_type_name(*args):
    """
    IGESDraw_HArray1OfViewKindEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_HArray1OfViewKindEntity_get_type_name(*args)

def IGESDraw_HArray1OfViewKindEntity_get_type_descriptor(*args):
    """
    IGESDraw_HArray1OfViewKindEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_HArray1OfViewKindEntity_get_type_descriptor(*args)

class Handle_IGESDraw_Drawing(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_Drawing self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_Drawing self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_Drawing self, IGESDraw_Drawing thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_Drawing self, Handle_IGESDraw_Drawing theHandle) -> Handle_IGESDraw_Drawing
        assign(Handle_IGESDraw_Drawing self, IGESDraw_Drawing thePtr) -> Handle_IGESDraw_Drawing
        assign(Handle_IGESDraw_Drawing self, Handle_IGESDraw_Drawing theHandle) -> Handle_IGESDraw_Drawing

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_Drawing self) -> IGESDraw_Drawing

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_Drawing self) -> IGESDraw_Drawing

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_Drawing___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_Drawing self) -> IGESDraw_Drawing

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_Drawing___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_Drawing___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_Drawing___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_Drawing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_Drawing_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_Drawing

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_Drawing self, Handle_IGESDraw_HArray1OfViewKindEntity allViews, Handle_TColgp_HArray1OfXY allViewOrigins, Handle_IGESData_HArray1OfIGESEntity allAnnotations)

        This method is used to set the fields of the class
        Drawing
        - allViews       : Pointers to DEs of View entities
        - allViewOrigins : Origin coordinates of transformed Views
        - allAnnotations : Pointers to DEs of Annotation entities
        raises exception if Lengths of allViews and allViewOrigins are
        not same.

        :type allViews: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allViewOrigins: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY
        :type allAnnotations: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Init(self, *args)


    def NbViews(self, *args):
        """
        NbViews(Handle_IGESDraw_Drawing self) -> Standard_Integer

        returns the number of view pointers in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESDraw_Drawing self, Standard_Integer const ViewIndex) -> Handle_IGESData_ViewKindEntity

        returns the ViewKindEntity indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbViews().

        :type ViewIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_ViewItem(self, *args)


    def ViewOrigin(self, *args):
        """
        ViewOrigin(Handle_IGESDraw_Drawing self, Standard_Integer const TViewIndex) -> gp_Pnt2d

        returns the Drawing space coordinates of the origin of the
        Transformed view indicated by TViewIndex
        raises an exception if TViewIndex <= 0 or TViewIndex > NbViews().

        :type TViewIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_ViewOrigin(self, *args)


    def NbAnnotations(self, *args):
        """
        NbAnnotations(Handle_IGESDraw_Drawing self) -> Standard_Integer

        returns the number of Annotation entities in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_NbAnnotations(self, *args)


    def Annotation(self, *args):
        """
        Annotation(Handle_IGESDraw_Drawing self, Standard_Integer const AnnotationIndex) -> Handle_IGESData_IGESEntity

        returns the Annotation entity in this Drawing, indicated by the
        AnnotationIndex
        raises an exception if AnnotationIndex <= 0 or
        AnnotationIndex > NbAnnotations().

        :type AnnotationIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Annotation(self, *args)


    def ViewToDrawing(self, *args):
        """
        ViewToDrawing(Handle_IGESDraw_Drawing self, Standard_Integer const NumView, gp_XYZ ViewCoords) -> gp_XY

        :type NumView: int
        :type ViewCoords: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.gp.gp_XY

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_ViewToDrawing(self, *args)


    def DrawingUnit(self, *args):
        """
        DrawingUnit(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns the Drawing Unit Value if it is specified (by a
        specific property entity)
        If not specified, returns False, and val as zero :
        unit to consider is then the model unit in GlobalSection

        :type value: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_DrawingUnit(self, *args)


    def DrawingSize(self, *args):
        """
        DrawingSize(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns the Drawing Size if it is specified (by a
        specific property entity)
        If not specified, returns False, and X,Y as zero :
        unit to consider is then the model unit in GlobalSection

        :type X: float
        :type Y: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_DrawingSize(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_Drawing self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_Drawing_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_Drawing_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_Drawing self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_Drawing self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_Drawing self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_Drawing self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_Drawing self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_Drawing self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_Drawing self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_Drawing self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_Drawing self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_Drawing self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_Drawing self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_Drawing self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_Drawing self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_Drawing self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_Drawing self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_Drawing self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_Drawing self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_Drawing self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_Drawing self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_Drawing self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_Drawing self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_Drawing self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_Drawing self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_Drawing self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_Drawing self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_Drawing self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_Drawing self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_Drawing self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_Drawing self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_Drawing self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_Drawing self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_Drawing self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_Drawing self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_Drawing self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_Drawing self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_Drawing self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_Drawing self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_Drawing self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_Drawing self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_Drawing self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_Drawing self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_Drawing self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_Drawing self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_Drawing self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_Drawing self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_Drawing self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_Drawing self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_Drawing self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_Drawing self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_Drawing self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_Drawing self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_Drawing_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_Drawing self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_Drawing self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_Drawing self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_Drawing self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_Drawing self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_Drawing self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_Drawing_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_Drawing self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Drawing_DecrementRefCounter(self, *args)

Handle_IGESDraw_Drawing_swigregister = _IGESDraw.Handle_IGESDraw_Drawing_swigregister
Handle_IGESDraw_Drawing_swigregister(Handle_IGESDraw_Drawing)

def Handle_IGESDraw_Drawing_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_Drawing_DownCast(thing)
Handle_IGESDraw_Drawing_DownCast = _IGESDraw.Handle_IGESDraw_Drawing_DownCast

class IGESDraw_ToolPlanar(object):
    """
    Tool to work on a Planar. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolPlanar self) -> IGESDraw_ToolPlanar

        Returns a ToolPlanar, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolPlanar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolPlanar self, Handle_IGESDraw_Planar ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolPlanar_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolPlanar self, Handle_IGESDraw_Planar ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolPlanar_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolPlanar self, Handle_IGESDraw_Planar ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Planar <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolPlanar_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDraw_ToolPlanar self, Handle_IGESDraw_Planar ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Planar
        (NbMatrices forced to 1)

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ToolPlanar_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolPlanar self, Handle_IGESDraw_Planar ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolPlanar_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolPlanar self, Handle_IGESDraw_Planar ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolPlanar_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolPlanar self, Handle_IGESDraw_Planar entfrom, Handle_IGESDraw_Planar entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolPlanar_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolPlanar self, Handle_IGESDraw_Planar ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Planar
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolPlanar_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolPlanar
IGESDraw_ToolPlanar_swigregister = _IGESDraw.IGESDraw_ToolPlanar_swigregister
IGESDraw_ToolPlanar_swigregister(IGESDraw_ToolPlanar)

class IGESDraw_SpecificModule(IGESData.IGESData_SpecificModule):
    """
    Defines Services attached to IGES Entities :
    Dump & OwnCorrect, for IGESDraw
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_SpecificModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_SpecificModule self) -> IGESDraw_SpecificModule

        Creates a SpecificModule from IGESDraw & puts it into SpecificLib


        """
        this = _IGESDraw.new_IGESDraw_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESDraw

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDraw_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Corrections on Entities which support
        them (Planar)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_SpecificModule
IGESDraw_SpecificModule_swigregister = _IGESDraw.IGESDraw_SpecificModule_swigregister
IGESDraw_SpecificModule_swigregister(IGESDraw_SpecificModule)

def IGESDraw_SpecificModule_get_type_name(*args):
    """
    IGESDraw_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_SpecificModule_get_type_name(*args)

def IGESDraw_SpecificModule_get_type_descriptor(*args):
    """
    IGESDraw_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_SpecificModule_get_type_descriptor(*args)

class IGESDraw_DrawingWithRotation(IGESData.IGESData_IGESEntity):
    """
    defines IGESDrawingWithRotation, Type <404> Form <1>
    in package IGESDraw

    Permits rotation, in addition to transformation and
    scaling, between the view and drawing coordinate systems
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_DrawingWithRotation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_DrawingWithRotation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_DrawingWithRotation self) -> IGESDraw_DrawingWithRotation

        defines IGESDrawingWithRotation, Type <404> Form <1>
        in package IGESDraw

        Permits rotation, in addition to transformation and
        scaling, between the view and drawing coordinate systems
        """
        this = _IGESDraw.new_IGESDraw_DrawingWithRotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_DrawingWithRotation self, Handle_IGESDraw_HArray1OfViewKindEntity allViews, Handle_TColgp_HArray1OfXY allViewOrigins, Handle_TColStd_HArray1OfReal allOrientationAngles, Handle_IGESData_HArray1OfIGESEntity allAnnotations)

        This method is used to set the fields of the class
        DrawingWithRotation
        - allViews             : Pointers to View entities
        - allViewOrigins       : Origin coords of transformed views
        - allOrientationAngles : Orientation angles of transformed views
        - allAnnotations       : Pointers to Annotation entities
        raises exception if Lengths of allViews, allViewOrigins and
        allOrientationAngles are not same.

        :type allViews: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allViewOrigins: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY
        :type allOrientationAngles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allAnnotations: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_Init(self, *args)


    def NbViews(self, *args):
        """
        NbViews(IGESDraw_DrawingWithRotation self) -> Standard_Integer

        returns the number of view pointers in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESDraw_DrawingWithRotation self, Standard_Integer const Index) -> Handle_IGESData_ViewKindEntity

        returns the View entity indicated by Index
        raises an exception if Index <= 0 or Index > NbViews().

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_ViewItem(self, *args)


    def ViewOrigin(self, *args):
        """
        ViewOrigin(IGESDraw_DrawingWithRotation self, Standard_Integer const Index) -> gp_Pnt2d

        returns the Drawing space coordinates of the origin of the
        Transformed view indicated by Index
        raises an exception if Index <= 0 or Index > NbViews().

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_ViewOrigin(self, *args)


    def OrientationAngle(self, *args):
        """
        OrientationAngle(IGESDraw_DrawingWithRotation self, Standard_Integer const Index) -> Standard_Real

        returns the Orientation angle for the Transformed view
        indicated by Index
        raises an exception if Index <= 0 or Index > NbViews().

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_OrientationAngle(self, *args)


    def NbAnnotations(self, *args):
        """
        NbAnnotations(IGESDraw_DrawingWithRotation self) -> Standard_Integer

        returns the number of Annotation entities in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_NbAnnotations(self, *args)


    def Annotation(self, *args):
        """
        Annotation(IGESDraw_DrawingWithRotation self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Annotation entity in this Drawing, indicated by Index
        raises an exception if Index <= 0 or Index > NbAnnotations().

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_Annotation(self, *args)


    def ViewToDrawing(self, *args):
        """
        ViewToDrawing(IGESDraw_DrawingWithRotation self, Standard_Integer const NumView, gp_XYZ ViewCoords) -> gp_XY

        :type NumView: int
        :type ViewCoords: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.gp.gp_XY

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_ViewToDrawing(self, *args)


    def DrawingUnit(self, *args):
        """
        DrawingUnit(IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns the Drawing Unit Value if it is specified (by a
        specific property entity)
        If not specified, returns False, and val as zero :
        unit to consider is then the model unit in GlobalSection

        :type value: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_DrawingUnit(self, *args)


    def DrawingSize(self, *args):
        """
        DrawingSize(IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns the Drawing Size if it is specified (by a
        specific property entity)
        If not specified, returns False, and X,Y as zero :
        unit to consider is then the model unit in GlobalSection

        :type X: float
        :type Y: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_DrawingSize(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_DrawingWithRotation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_DrawingWithRotation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_DrawingWithRotation
IGESDraw_DrawingWithRotation_swigregister = _IGESDraw.IGESDraw_DrawingWithRotation_swigregister
IGESDraw_DrawingWithRotation_swigregister(IGESDraw_DrawingWithRotation)

def IGESDraw_DrawingWithRotation_get_type_name(*args):
    """
    IGESDraw_DrawingWithRotation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_DrawingWithRotation_get_type_name(*args)

def IGESDraw_DrawingWithRotation_get_type_descriptor(*args):
    """
    IGESDraw_DrawingWithRotation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_DrawingWithRotation_get_type_descriptor(*args)

class IGESDraw_ToolDrawingWithRotation(object):
    """
    Tool to work on a DrawingWithRotation. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolDrawingWithRotation self) -> IGESDraw_ToolDrawingWithRotation

        Returns a ToolDrawingWithRotation, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolDrawingWithRotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolDrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolDrawingWithRotation_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolDrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolDrawingWithRotation_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolDrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DrawingWithRotation <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolDrawingWithRotation_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDraw_ToolDrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a DrawingWithRotation
        (Null Views are removed from list)

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ToolDrawingWithRotation_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolDrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolDrawingWithRotation_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolDrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolDrawingWithRotation_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolDrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation entfrom, Handle_IGESDraw_DrawingWithRotation entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolDrawingWithRotation_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolDrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_DrawingWithRotation
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolDrawingWithRotation_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolDrawingWithRotation
IGESDraw_ToolDrawingWithRotation_swigregister = _IGESDraw.IGESDraw_ToolDrawingWithRotation_swigregister
IGESDraw_ToolDrawingWithRotation_swigregister(IGESDraw_ToolDrawingWithRotation)

class Handle_IGESDraw_View(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_View self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_View_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_View self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_View_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_View self, IGESDraw_View thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_View_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_View self, Handle_IGESDraw_View theHandle) -> Handle_IGESDraw_View
        assign(Handle_IGESDraw_View self, IGESDraw_View thePtr) -> Handle_IGESDraw_View
        assign(Handle_IGESDraw_View self, Handle_IGESDraw_View theHandle) -> Handle_IGESDraw_View

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_View_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_View self) -> IGESDraw_View

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_View_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_View self) -> IGESDraw_View

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_View___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_View self) -> IGESDraw_View

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_View___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_View___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_View___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_View(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_View_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_View

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_View self, Standard_Integer const aViewNum, Standard_Real const aScale, Handle_IGESGeom_Plane aLeftPlane, Handle_IGESGeom_Plane aTopPlane, Handle_IGESGeom_Plane aRightPlane, Handle_IGESGeom_Plane aBottomPlane, Handle_IGESGeom_Plane aBackPlane, Handle_IGESGeom_Plane aFrontPlane)

        This method is used to set fields of the class View
        - aViewNum     : View number
        - aScale       : Scale factor
        - aLeftPlane   : Left   plane of view volume
        - aTopPlane    : Top    plane of view volume
        - aRightPlane  : Right  plane of view volume
        - aBottomPlane : Bottom plane of view volume
        - aBackPlane   : Back   plane of view volume
        - aFrontPlane  : Front  plane of view volume

        :type aViewNum: int
        :type aScale: float
        :type aLeftPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aTopPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aRightPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aBottomPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aBackPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type aFrontPlane: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.Handle_IGESDraw_View_Init(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(Handle_IGESDraw_View self) -> Standard_Boolean

        Returns True (for a single view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(Handle_IGESDraw_View self) -> Standard_Integer

        Returns 1 (single view)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESDraw_View self, Standard_Integer const num) -> Handle_IGESData_ViewKindEntity

        For a single view, returns <me> whatever <num>

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_ViewItem(self, *args)


    def ViewNumber(self, *args):
        """
        ViewNumber(Handle_IGESDraw_View self) -> Standard_Integer

        returns integer number identifying view orientation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_ViewNumber(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(Handle_IGESDraw_View self) -> Standard_Real

        returns the scale factor(Default = 1.0)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_View_ScaleFactor(self, *args)


    def HasLeftPlane(self, *args):
        """
        HasLeftPlane(Handle_IGESDraw_View self) -> Standard_Boolean

        returns False if left side of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasLeftPlane(self, *args)


    def LeftPlane(self, *args):
        """
        LeftPlane(Handle_IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the left side of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.Handle_IGESDraw_View_LeftPlane(self, *args)


    def HasTopPlane(self, *args):
        """
        HasTopPlane(Handle_IGESDraw_View self) -> Standard_Boolean

        returns False if top of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasTopPlane(self, *args)


    def TopPlane(self, *args):
        """
        TopPlane(Handle_IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the top of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.Handle_IGESDraw_View_TopPlane(self, *args)


    def HasRightPlane(self, *args):
        """
        HasRightPlane(Handle_IGESDraw_View self) -> Standard_Boolean

        returns False if right side of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasRightPlane(self, *args)


    def RightPlane(self, *args):
        """
        RightPlane(Handle_IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the right side of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.Handle_IGESDraw_View_RightPlane(self, *args)


    def HasBottomPlane(self, *args):
        """
        HasBottomPlane(Handle_IGESDraw_View self) -> Standard_Boolean

        returns False if bottom of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasBottomPlane(self, *args)


    def BottomPlane(self, *args):
        """
        BottomPlane(Handle_IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the bottom of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.Handle_IGESDraw_View_BottomPlane(self, *args)


    def HasBackPlane(self, *args):
        """
        HasBackPlane(Handle_IGESDraw_View self) -> Standard_Boolean

        returns False if back of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasBackPlane(self, *args)


    def BackPlane(self, *args):
        """
        BackPlane(Handle_IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the back of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.Handle_IGESDraw_View_BackPlane(self, *args)


    def HasFrontPlane(self, *args):
        """
        HasFrontPlane(Handle_IGESDraw_View self) -> Standard_Boolean

        returns False if front of view volume is not present

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasFrontPlane(self, *args)


    def FrontPlane(self, *args):
        """
        FrontPlane(Handle_IGESDraw_View self) -> Handle_IGESGeom_Plane

        returns the front of view volume, or null handle

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane

        """
        return _IGESDraw.Handle_IGESDraw_View_FrontPlane(self, *args)


    def ViewMatrix(self, *args):
        """
        ViewMatrix(Handle_IGESDraw_View self) -> Handle_IGESData_TransfEntity

        returns the Transformation Matrix

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_ViewMatrix(self, *args)


    def ModelToView(self, *args):
        """
        ModelToView(Handle_IGESDraw_View self, gp_XYZ coords) -> gp_XYZ

        returns XYZ from the Model space to the View space by
        applying the View Matrix

        :type coords: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.Handle_IGESDraw_View_ModelToView(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_View self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_View_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_View_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_View_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_View self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_View_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_View self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_View self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_View self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_View self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_View self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_View self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_View_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_View self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_View self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_View self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_View_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_View self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_View self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_View self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_View_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_View self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_View self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_View self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_View self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_View self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_View self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_View self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_View self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_View self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_View self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_View self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_View self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_View self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_View_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_View self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_View_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_View self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_View self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_View self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_View self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_View self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_View_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_View self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_View self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_View self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_View self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_View self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_View self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_View_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_View self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_View_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_View self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_View_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_View self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_View_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_View self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_View_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_View self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_View_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_View self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_View self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_View self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_View_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_View self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_View_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_View self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_View_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_View self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_View self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_View_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_View self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_View self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_View self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_View_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_View self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_View self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_View self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_View self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_View self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_View self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_View self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_View_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_View self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_View self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_View self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_View self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_View_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_View self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_View_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_View self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_View_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_View self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_View self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_View self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_View self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_View_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_View self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_View_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_View self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_View self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_View_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_View self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_View_DecrementRefCounter(self, *args)

Handle_IGESDraw_View_swigregister = _IGESDraw.Handle_IGESDraw_View_swigregister
Handle_IGESDraw_View_swigregister(Handle_IGESDraw_View)

def Handle_IGESDraw_View_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_View_DownCast(thing)
Handle_IGESDraw_View_DownCast = _IGESDraw.Handle_IGESDraw_View_DownCast

class Handle_IGESDraw_PerspectiveView(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_PerspectiveView self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_PerspectiveView self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_PerspectiveView self, IGESDraw_PerspectiveView thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_PerspectiveView self, Handle_IGESDraw_PerspectiveView theHandle) -> Handle_IGESDraw_PerspectiveView
        assign(Handle_IGESDraw_PerspectiveView self, IGESDraw_PerspectiveView thePtr) -> Handle_IGESDraw_PerspectiveView
        assign(Handle_IGESDraw_PerspectiveView self, Handle_IGESDraw_PerspectiveView theHandle) -> Handle_IGESDraw_PerspectiveView

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_PerspectiveView self) -> IGESDraw_PerspectiveView

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_PerspectiveView self) -> IGESDraw_PerspectiveView

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_PerspectiveView self) -> IGESDraw_PerspectiveView

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_PerspectiveView___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_PerspectiveView___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_PerspectiveView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_PerspectiveView_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_PerspectiveView

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_PerspectiveView self, Standard_Integer const aViewNumber, Standard_Real const aScaleFactor, gp_XYZ aViewNormalVector, gp_XYZ aViewReferencePoint, gp_XYZ aCenterOfProjection, gp_XYZ aViewUpVector, Standard_Real const aViewPlaneDistance, gp_XY aTopLeft, gp_XY aBottomRight, Standard_Integer const aDepthClip, Standard_Real const aBackPlaneDistance, Standard_Real const aFrontPlaneDistance)

        This method is used to set the fields of the class
        PerspectiveView
        - aViewNumber         : The desired view
        - aScaleFactor        : Scale factor
        - aViewNormalVector   : View plane normal vector (model space)
        - aViewReferencePoint : View reference point     (model space)
        - aCenterOfProjection : Center Of Projection     (model space)
        - aViewUpVector       : View up vector           (model space)
        - aViewPlaneDistance  : View plane distance      (model space)
        - aTopLeft            : Top-left point of clipping window
        - aBottomRight        : Bottom-right point of clipping window
        - aDepthClip          : Depth clipping indicator
        - aBackPlaneDistance  : Distance of back clipping plane
        - aFrontPlaneDistance : Distance of front clipping plane

        :type aViewNumber: int
        :type aScaleFactor: float
        :type aViewNormalVector: OCC.wrapper.gp.gp_XYZ
        :type aViewReferencePoint: OCC.wrapper.gp.gp_XYZ
        :type aCenterOfProjection: OCC.wrapper.gp.gp_XYZ
        :type aViewUpVector: OCC.wrapper.gp.gp_XYZ
        :type aViewPlaneDistance: float
        :type aTopLeft: OCC.wrapper.gp.gp_XY
        :type aBottomRight: OCC.wrapper.gp.gp_XY
        :type aDepthClip: int
        :type aBackPlaneDistance: float
        :type aFrontPlaneDistance: float

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Init(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns True (for a single view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Returns 1 (single view)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESDraw_PerspectiveView self, Standard_Integer const num) -> Handle_IGESData_ViewKindEntity

        For a single view, returns <me> whatever <num>

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ViewItem(self, *args)


    def ViewNumber(self, *args):
        """
        ViewNumber(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        returns the view number associated with <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ViewNumber(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(Handle_IGESDraw_PerspectiveView self) -> Standard_Real

        returns the scale factor associated with <me>

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ScaleFactor(self, *args)


    def ViewNormalVector(self, *args):
        """
        ViewNormalVector(Handle_IGESDraw_PerspectiveView self) -> gp_Vec

        returns the View plane normal vector (model space)

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ViewNormalVector(self, *args)


    def ViewReferencePoint(self, *args):
        """
        ViewReferencePoint(Handle_IGESDraw_PerspectiveView self) -> gp_Pnt

        returns the View reference point (model space)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ViewReferencePoint(self, *args)


    def CenterOfProjection(self, *args):
        """
        CenterOfProjection(Handle_IGESDraw_PerspectiveView self) -> gp_Pnt

        returns the Center Of Projection (model space)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_CenterOfProjection(self, *args)


    def ViewUpVector(self, *args):
        """
        ViewUpVector(Handle_IGESDraw_PerspectiveView self) -> gp_Vec

        returns the View up vector (model space)

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ViewUpVector(self, *args)


    def ViewPlaneDistance(self, *args):
        """
        ViewPlaneDistance(Handle_IGESDraw_PerspectiveView self) -> Standard_Real

        returns the View plane distance (model space)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ViewPlaneDistance(self, *args)


    def TopLeft(self, *args):
        """
        TopLeft(Handle_IGESDraw_PerspectiveView self) -> gp_Pnt2d

        returns the top left point of the clipping window

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_TopLeft(self, *args)


    def BottomRight(self, *args):
        """
        BottomRight(Handle_IGESDraw_PerspectiveView self) -> gp_Pnt2d

        returns the bottom right point of the clipping window

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_BottomRight(self, *args)


    def DepthClip(self, *args):
        """
        DepthClip(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        returns the Depth clipping indicator
        0 = No depth clipping
        1 = Back clipping plane ON
        2 = Front clipping plane ON
        3 = Back and front clipping planes ON

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_DepthClip(self, *args)


    def BackPlaneDistance(self, *args):
        """
        BackPlaneDistance(Handle_IGESDraw_PerspectiveView self) -> Standard_Real

        returns the View coordinate denoting the location of
        the back clipping plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_BackPlaneDistance(self, *args)


    def FrontPlaneDistance(self, *args):
        """
        FrontPlaneDistance(Handle_IGESDraw_PerspectiveView self) -> Standard_Real

        returns the View coordinate denoting the location of
        the front clipping plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_FrontPlaneDistance(self, *args)


    def ViewMatrix(self, *args):
        """
        ViewMatrix(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_TransfEntity

        returns the Transformation Matrix

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ViewMatrix(self, *args)


    def ModelToView(self, *args):
        """
        ModelToView(Handle_IGESDraw_PerspectiveView self, gp_XYZ coords) -> gp_XYZ

        returns XYX from the Model space to the View space by
        applying the View Matrix

        :type coords: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ModelToView(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_PerspectiveView self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_PerspectiveView_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_PerspectiveView_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_PerspectiveView self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_PerspectiveView self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_PerspectiveView self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_PerspectiveView self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_PerspectiveView self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_PerspectiveView self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_PerspectiveView self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_PerspectiveView self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_PerspectiveView self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_PerspectiveView self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_PerspectiveView self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_PerspectiveView self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_PerspectiveView self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_PerspectiveView self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_PerspectiveView self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_PerspectiveView self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_PerspectiveView self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_PerspectiveView self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_PerspectiveView self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_PerspectiveView self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_PerspectiveView self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_PerspectiveView self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_PerspectiveView self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_PerspectiveView self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_PerspectiveView self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_PerspectiveView self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_PerspectiveView self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_PerspectiveView self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_PerspectiveView self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_PerspectiveView self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_PerspectiveView self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_PerspectiveView self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_PerspectiveView self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_PerspectiveView self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_PerspectiveView_DecrementRefCounter(self, *args)

Handle_IGESDraw_PerspectiveView_swigregister = _IGESDraw.Handle_IGESDraw_PerspectiveView_swigregister
Handle_IGESDraw_PerspectiveView_swigregister(Handle_IGESDraw_PerspectiveView)

def Handle_IGESDraw_PerspectiveView_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_PerspectiveView_DownCast(thing)
Handle_IGESDraw_PerspectiveView_DownCast = _IGESDraw.Handle_IGESDraw_PerspectiveView_DownCast

class Handle_IGESDraw_NetworkSubfigureDef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_NetworkSubfigureDef self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_NetworkSubfigureDef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_NetworkSubfigureDef self, IGESDraw_NetworkSubfigureDef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef theHandle) -> Handle_IGESDraw_NetworkSubfigureDef
        assign(Handle_IGESDraw_NetworkSubfigureDef self, IGESDraw_NetworkSubfigureDef thePtr) -> Handle_IGESDraw_NetworkSubfigureDef
        assign(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef theHandle) -> Handle_IGESDraw_NetworkSubfigureDef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_NetworkSubfigureDef self) -> IGESDraw_NetworkSubfigureDef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_NetworkSubfigureDef self) -> IGESDraw_NetworkSubfigureDef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_NetworkSubfigureDef self) -> IGESDraw_NetworkSubfigureDef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_NetworkSubfigureDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_NetworkSubfigureDef

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_NetworkSubfigureDef self, Standard_Integer const aDepth, Handle_TCollection_HAsciiString aName, Handle_IGESData_HArray1OfIGESEntity allEntities, Standard_Integer const aTypeFlag, Handle_TCollection_HAsciiString aDesignator, Handle_IGESGraph_TextDisplayTemplate aTemplate, Handle_IGESDraw_HArray1OfConnectPoint allPointEntities)

        This method is used to set fields of the class
        NetworkSubfigureDef
        - aDepth           : Depth of Subfigure
        (indicating the amount of nesting)
        - aName            : Subfigure Name
        - allEntities      : Associated subfigures Entities exclusive
        of primary reference designator and
        Control Points.
        - aTypeFlag        : Type flag determines which Entity
        belongs in which design
        (Logical design or Physical design)
        - aDesignator      : Designator HAsciiString and its Template
        - allPointEntities : Associated Connect Point Entities

        :type aDepth: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type aTypeFlag: int
        :type aDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aTemplate: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type allPointEntities: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Init(self, *args)


    def Depth(self, *args):
        """
        Depth(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        returns Depth of Subfigure(indication the amount of nesting)
        Note : The Depth is inclusive of both Network Subfigure Definition
        Entity and the Ordinary Subfigure Definition Entity.
        Thus, the two may be nested.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Depth(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_TCollection_HAsciiString

        returns the Subfigure Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Name(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        returns Number of Associated(child) entries in subfigure exclusive
        of primary reference designator and Control Points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_NbEntities(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESDraw_NetworkSubfigureDef self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th IGESEntity in subfigure exclusive of primary
        reference designator and Control Points
        raises exception if Index  <=0 or Index > NbEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Entity(self, *args)


    def TypeFlag(self, *args):
        """
        TypeFlag(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        return value = 0 : Not Specified
        = 1 : Logical  design
        = 2 : Physical design

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_TypeFlag(self, *args)


    def Designator(self, *args):
        """
        Designator(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_TCollection_HAsciiString

        returns Primary Reference Designator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Designator(self, *args)


    def HasDesignatorTemplate(self, *args):
        """
        HasDesignatorTemplate(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        returns True if Text Display Template is specified for
        primary designator else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasDesignatorTemplate(self, *args)


    def DesignatorTemplate(self, *args):
        """
        DesignatorTemplate(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESGraph_TextDisplayTemplate

        if Text Display Template specified then return TextDisplayTemplate
        else return NULL Handle

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DesignatorTemplate(self, *args)


    def NbPointEntities(self, *args):
        """
        NbPointEntities(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        returns the Number Of Associated(child) Connect Point Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_NbPointEntities(self, *args)


    def HasPointEntity(self, *args):
        """
        HasPointEntity(Handle_IGESDraw_NetworkSubfigureDef self, Standard_Integer const Index) -> Standard_Boolean

        returns True is Index'th Associated Connect Point Entity is present
        else returns False
        raises exception if Index is out of bound

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasPointEntity(self, *args)


    def PointEntity(self, *args):
        """
        PointEntity(Handle_IGESDraw_NetworkSubfigureDef self, Standard_Integer const Index) -> Handle_IGESDraw_ConnectPoint

        returns the Index'th Associated Connect Point Entity
        raises exception if Index <= 0 or Index > NbPointEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_PointEntity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_NetworkSubfigureDef self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_NetworkSubfigureDef self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_NetworkSubfigureDef self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_NetworkSubfigureDef self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_NetworkSubfigureDef self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_NetworkSubfigureDef self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_NetworkSubfigureDef self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_NetworkSubfigureDef self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_NetworkSubfigureDef self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_NetworkSubfigureDef self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_NetworkSubfigureDef self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_NetworkSubfigureDef self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_NetworkSubfigureDef self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_NetworkSubfigureDef self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_NetworkSubfigureDef self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_NetworkSubfigureDef self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_NetworkSubfigureDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_NetworkSubfigureDef self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_NetworkSubfigureDef self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_NetworkSubfigureDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_NetworkSubfigureDef self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_NetworkSubfigureDef self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_NetworkSubfigureDef self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_NetworkSubfigureDef self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_NetworkSubfigureDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_NetworkSubfigureDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_NetworkSubfigureDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_NetworkSubfigureDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_NetworkSubfigureDef self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_NetworkSubfigureDef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DecrementRefCounter(self, *args)

Handle_IGESDraw_NetworkSubfigureDef_swigregister = _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_swigregister
Handle_IGESDraw_NetworkSubfigureDef_swigregister(Handle_IGESDraw_NetworkSubfigureDef)

def Handle_IGESDraw_NetworkSubfigureDef_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DownCast(thing)
Handle_IGESDraw_NetworkSubfigureDef_DownCast = _IGESDraw.Handle_IGESDraw_NetworkSubfigureDef_DownCast

class Handle_IGESDraw_SegmentedViewsVisible(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_SegmentedViewsVisible self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_SegmentedViewsVisible self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_SegmentedViewsVisible self, IGESDraw_SegmentedViewsVisible thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible theHandle) -> Handle_IGESDraw_SegmentedViewsVisible
        assign(Handle_IGESDraw_SegmentedViewsVisible self, IGESDraw_SegmentedViewsVisible thePtr) -> Handle_IGESDraw_SegmentedViewsVisible
        assign(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible theHandle) -> Handle_IGESDraw_SegmentedViewsVisible

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_SegmentedViewsVisible self) -> IGESDraw_SegmentedViewsVisible

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_SegmentedViewsVisible self) -> IGESDraw_SegmentedViewsVisible

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_SegmentedViewsVisible self) -> IGESDraw_SegmentedViewsVisible

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_SegmentedViewsVisible(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_SegmentedViewsVisible

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESDraw_HArray1OfViewKindEntity allViews, Handle_TColStd_HArray1OfReal allBreakpointParameters, Handle_TColStd_HArray1OfInteger allDisplayFlags, Handle_TColStd_HArray1OfInteger allColorValues, Handle_IGESGraph_HArray1OfColor allColorDefinitions, Handle_TColStd_HArray1OfInteger allLineFontValues, Handle_IGESBasic_HArray1OfLineFontEntity allLineFontDefinitions, Handle_TColStd_HArray1OfInteger allLineWeights)

        This method is used to set the fields of the class
        SegmentedViewsVisible
        - allViews                : Pointers to View Entities
        - allBreakpointParameters : Parameters of breakpoints
        - allDisplayFlags         : Display flags
        - allColorValues          : Color Values
        - allColorDefinitions     : Color Definitions
        - allLineFontValues       : LineFont values
        - allLineFontDefinitions  : LineFont Definitions
        - allLineWeights          : Line weights
        raises exception if Lengths of allViews, allBreakpointParameters,
        allDisplayFlags, allColorValues, allColorDefinitions,
        allLineFontValues, allLineFontDefinitions and allLineWeights
        are not same.

        :type allViews: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allBreakpointParameters: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allDisplayFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allColorValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allColorDefinitions: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfColor
        :type allLineFontValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allLineFontDefinitions: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity
        :type allLineWeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Init(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns False (for a complex view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Returns the count of Views referenced by <me> (inherited)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_NbViews(self, *args)


    def NbSegmentBlocks(self, *args):
        """
        NbSegmentBlocks(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        returns the number of view/segment blocks in <me>
        Similar to NbViews but has a more general significance

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_NbSegmentBlocks(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const ViewIndex) -> Handle_IGESData_ViewKindEntity

        returns the View entity indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or
        ViewIndex > NbSegmentBlocks()

        :type ViewIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_ViewItem(self, *args)


    def BreakpointParameter(self, *args):
        """
        BreakpointParameter(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const BreakpointIndex) -> Standard_Real

        returns the parameter of the breakpoint indicated by
        BreakpointIndex
        raises an exception if BreakpointIndex <= 0 or
        BreakpointIndex > NbSegmentBlocks().

        :type BreakpointIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_BreakpointParameter(self, *args)


    def DisplayFlag(self, *args):
        """
        DisplayFlag(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const FlagIndex) -> Standard_Integer

        returns the Display flag indicated by FlagIndex
        raises an exception if FlagIndex <= 0 or
        FlagIndex > NbSegmentBlocks().

        :type FlagIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DisplayFlag(self, *args)


    def IsColorDefinition(self, *args):
        """
        IsColorDefinition(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const ColorIndex) -> Standard_Boolean

        returns True if the ColorIndex'th value of the
        "theColorDefinitions" field of <me> is a pointer
        raises an exception if ColorIndex <= 0 or
        ColorIndex > NbSegmentBlocks().

        :type ColorIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_IsColorDefinition(self, *args)


    def ColorValue(self, *args):
        """
        ColorValue(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const ColorIndex) -> Standard_Integer

        returns the Color value indicated by ColorIndex
        raises an exception if ColorIndex <= 0 or
        ColorIndex > NbSegmentBlocks().

        :type ColorIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_ColorValue(self, *args)


    def ColorDefinition(self, *args):
        """
        ColorDefinition(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const ColorIndex) -> Handle_IGESGraph_Color

        returns the Color definition entity indicated by ColorIndex
        raises an exception if ColorIndex <= 0 or
        ColorIndex > NbSegmentBlocks().

        :type ColorIndex: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_ColorDefinition(self, *args)


    def IsFontDefinition(self, *args):
        """
        IsFontDefinition(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const FontIndex) -> Standard_Boolean

        returns True if the FontIndex'th value of the
        "theLineFontDefinitions" field of <me> is a pointer
        raises an exception if FontIndex <= 0 or
        FontIndex > NbSegmentBlocks().

        :type FontIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_IsFontDefinition(self, *args)


    def LineFontValue(self, *args):
        """
        LineFontValue(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const FontIndex) -> Standard_Integer

        returns the LineFont value indicated by FontIndex
        raises an exception if FontIndex <= 0 or
        FontIndex > NbSegmentBlocks().

        :type FontIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_LineFontValue(self, *args)


    def LineFontDefinition(self, *args):
        """
        LineFontDefinition(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const FontIndex) -> Handle_IGESData_LineFontEntity

        returns the LineFont definition entity indicated by FontIndex
        raises an exception if FontIndex <= 0 or
        FontIndex > NbSegmentBlocks().

        :type FontIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_LineFontDefinition(self, *args)


    def LineWeightItem(self, *args):
        """
        LineWeightItem(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const WeightIndex) -> Standard_Integer

        returns the LineWeight value indicated by WeightIndex
        raises an exception if WeightIndex <= 0 or
        WeightIndex > NbSegmentBlocks().

        :type WeightIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_LineWeightItem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_SegmentedViewsVisible self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_SegmentedViewsVisible self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_SegmentedViewsVisible self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_SegmentedViewsVisible self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_SegmentedViewsVisible self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_SegmentedViewsVisible self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_SegmentedViewsVisible self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_SegmentedViewsVisible self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_SegmentedViewsVisible self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_SegmentedViewsVisible self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_SegmentedViewsVisible self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_SegmentedViewsVisible self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_SegmentedViewsVisible self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_SegmentedViewsVisible self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_SegmentedViewsVisible self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_SegmentedViewsVisible self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_SegmentedViewsVisible self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_SegmentedViewsVisible self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_SegmentedViewsVisible self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_SegmentedViewsVisible self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_SegmentedViewsVisible self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_SegmentedViewsVisible self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_SegmentedViewsVisible self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_SegmentedViewsVisible self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_SegmentedViewsVisible self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_SegmentedViewsVisible self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_SegmentedViewsVisible self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DecrementRefCounter(self, *args)

Handle_IGESDraw_SegmentedViewsVisible_swigregister = _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_swigregister
Handle_IGESDraw_SegmentedViewsVisible_swigregister(Handle_IGESDraw_SegmentedViewsVisible)

def Handle_IGESDraw_SegmentedViewsVisible_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DownCast(thing)
Handle_IGESDraw_SegmentedViewsVisible_DownCast = _IGESDraw.Handle_IGESDraw_SegmentedViewsVisible_DownCast

class IGESDraw_ToolNetworkSubfigure(object):
    """
    Tool to work on a NetworkSubfigure. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolNetworkSubfigure self) -> IGESDraw_ToolNetworkSubfigure

        Returns a ToolNetworkSubfigure, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolNetworkSubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolNetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigure
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigure_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolNetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigure
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigure_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolNetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure ent, Interface_EntityIterator iter)

        Lists the Entities shared by a NetworkSubfigure <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigure
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigure_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolNetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigure
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigure_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolNetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigure
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigure_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolNetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure entfrom, Handle_IGESDraw_NetworkSubfigure entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigure
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigure
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigure_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolNetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigure
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigure_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolNetworkSubfigure
IGESDraw_ToolNetworkSubfigure_swigregister = _IGESDraw.IGESDraw_ToolNetworkSubfigure_swigregister
IGESDraw_ToolNetworkSubfigure_swigregister(IGESDraw_ToolNetworkSubfigure)

class NCollection_Array1_Handle_IGESData_ViewKindEntity(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> NCollection_Array1< opencascade::handle< IGESData_ViewKindEntity > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> NCollection_Array1< opencascade::handle< IGESData_ViewKindEntity > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> NCollection_Array1< opencascade::handle< IGESData_ViewKindEntity > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> NCollection_Array1< opencascade::handle< IGESData_ViewKindEntity > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESDraw.new_NCollection_Array1_Handle_IGESData_ViewKindEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESData_ViewKindEntity self, Handle_IGESData_ViewKindEntity theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESData_ViewKindEntity self, NCollection_Array1_Handle_IGESData_ViewKindEntity theOther) -> NCollection_Array1_Handle_IGESData_ViewKindEntity

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESData_ViewKindEntity self, NCollection_Array1_Handle_IGESData_ViewKindEntity theOther) -> NCollection_Array1_Handle_IGESData_ViewKindEntity

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESData_ViewKindEntity self, NCollection_Array1_Handle_IGESData_ViewKindEntity theOther) -> NCollection_Array1_Handle_IGESData_ViewKindEntity
        assign(NCollection_Array1_Handle_IGESData_ViewKindEntity self, NCollection_Array1_Handle_IGESData_ViewKindEntity theOther) -> NCollection_Array1_Handle_IGESData_ViewKindEntity

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_ViewKindEntity

        @return first element

        :rtype: TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESData_ViewKindEntity self) -> Handle_IGESData_ViewKindEntity

        @return last element

        :rtype: TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESData_ViewKindEntity self, Standard_Integer const theIndex) -> Handle_IGESData_ViewKindEntity

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESData_ViewKindEntity self, Standard_Integer const theIndex, Handle_IGESData_ViewKindEntity theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESData_ViewKindEntity self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_Resize(self, *args)

    __swig_destroy__ = _IGESDraw.delete_NCollection_Array1_Handle_IGESData_ViewKindEntity
NCollection_Array1_Handle_IGESData_ViewKindEntity_swigregister = _IGESDraw.NCollection_Array1_Handle_IGESData_ViewKindEntity_swigregister
NCollection_Array1_Handle_IGESData_ViewKindEntity_swigregister(NCollection_Array1_Handle_IGESData_ViewKindEntity)


try:
	IGESDraw_Array1OfViewKindEntity = NCollection_Array1_Handle_IGESData_ViewKindEntity
except NameError:
	pass # does not exist, probably ignored

class IGESDraw_ViewsVisibleWithAttr(IGESData.IGESData_ViewKindEntity):
    """
    defines IGESViewsVisibleWithAttr, Type <402>, Form <4>
    in package IGESDraw

    This class is extension of Class ViewsVisible.  It is used
    for those entities that are visible in multiple views, but
    must have a different line font, color number, or
    line weight in each view.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_ViewsVisibleWithAttr
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_ViewsVisibleWithAttr(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_ViewsVisibleWithAttr self) -> IGESDraw_ViewsVisibleWithAttr

        defines IGESViewsVisibleWithAttr, Type <402>, Form <4>
        in package IGESDraw

        This class is extension of Class ViewsVisible.  It is used
        for those entities that are visible in multiple views, but
        must have a different line font, color number, or
        line weight in each view.
        """
        this = _IGESDraw.new_IGESDraw_ViewsVisibleWithAttr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_ViewsVisibleWithAttr self, Handle_IGESDraw_HArray1OfViewKindEntity allViewEntities, Handle_TColStd_HArray1OfInteger allLineFonts, Handle_IGESBasic_HArray1OfLineFontEntity allLineDefinitions, Handle_TColStd_HArray1OfInteger allColorValues, Handle_IGESGraph_HArray1OfColor allColorDefinitions, Handle_TColStd_HArray1OfInteger allLineWeights, Handle_IGESData_HArray1OfIGESEntity allDisplayEntities)

        This method is used to set fields of the class
        ViewsVisibleWithAttr
        - allViewEntities     : All View kind entities
        - allLineFonts        : All Line Font values or zero(0)
        - allLineDefinitions  : Line Font Definition
        (if Line Font value = 0)
        - allColorValues      : All Color values
        - allColorDefinitions : All Color Definition Entities
        - allLineWeights      : All Line Weight values
        - allDisplayEntities  : Entities which are member of
        this associativity
        raises exception if Lengths of allViewEntities, allLineFonts,
        allColorValues,allColorDefinitions, allLineWeights are not same

        :type allViewEntities: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allLineFonts: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allLineDefinitions: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity
        :type allColorValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allColorDefinitions: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfColor
        :type allLineWeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allDisplayEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_Init(self, *args)


    def InitImplied(self, *args):
        """
        InitImplied(IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_HArray1OfIGESEntity allDisplayEntity)

        Changes only the list of Displayed Entities (Null allowed)

        :type allDisplayEntity: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_InitImplied(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns False (for a complex view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        returns the number of Views containing the view visible, line font,
        color number, and line weight information

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_NbViews(self, *args)


    def NbDisplayedEntities(self, *args):
        """
        NbDisplayedEntities(IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        returns the number of entities which have this particular set of
        display characteristic, or zero if no Entities specified

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_NbDisplayedEntities(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Handle_IGESData_ViewKindEntity

        returns the Index'th ViewKindEntity entity
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_ViewItem(self, *args)


    def LineFontValue(self, *args):
        """
        LineFontValue(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th Line font value or zero
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_LineFontValue(self, *args)


    def IsFontDefinition(self, *args):
        """
        IsFontDefinition(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Boolean

        returns True if the Index'th Line Font Definition is specified
        else returns False
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_IsFontDefinition(self, *args)


    def FontDefinition(self, *args):
        """
        FontDefinition(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Handle_IGESData_LineFontEntity

        returns the Index'th Line Font Definition Entity or NULL(0)
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_FontDefinition(self, *args)


    def ColorValue(self, *args):
        """
        ColorValue(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th Color number value
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_ColorValue(self, *args)


    def IsColorDefinition(self, *args):
        """
        IsColorDefinition(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Boolean

        returns True if Index'th Color Definition is specified
        else returns False
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_IsColorDefinition(self, *args)


    def ColorDefinition(self, *args):
        """
        ColorDefinition(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Handle_IGESGraph_Color

        returns the Index'th Color Definition Entity
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_ColorDefinition(self, *args)


    def LineWeightItem(self, *args):
        """
        LineWeightItem(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th Color Line Weight
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_LineWeightItem(self, *args)


    def DisplayedEntity(self, *args):
        """
        DisplayedEntity(IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Index'th Display entity with this particular characteristics
        raises exception if Index  <= 0 or Index > NbEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_DisplayedEntity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_ViewsVisibleWithAttr_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ViewsVisibleWithAttr
IGESDraw_ViewsVisibleWithAttr_swigregister = _IGESDraw.IGESDraw_ViewsVisibleWithAttr_swigregister
IGESDraw_ViewsVisibleWithAttr_swigregister(IGESDraw_ViewsVisibleWithAttr)

def IGESDraw_ViewsVisibleWithAttr_get_type_name(*args):
    """
    IGESDraw_ViewsVisibleWithAttr_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_get_type_name(*args)

def IGESDraw_ViewsVisibleWithAttr_get_type_descriptor(*args):
    """
    IGESDraw_ViewsVisibleWithAttr_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_ViewsVisibleWithAttr_get_type_descriptor(*args)

class IGESDraw_ToolCircArraySubfigure(object):
    """
    Tool to work on a CircArraySubfigure. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolCircArraySubfigure self) -> IGESDraw_ToolCircArraySubfigure

        Returns a ToolCircArraySubfigure, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolCircArraySubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolCircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_CircArraySubfigure
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolCircArraySubfigure_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolCircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_CircArraySubfigure
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolCircArraySubfigure_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolCircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure ent, Interface_EntityIterator iter)

        Lists the Entities shared by a CircArraySubfigure <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_CircArraySubfigure
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolCircArraySubfigure_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolCircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_CircArraySubfigure
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolCircArraySubfigure_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolCircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_CircArraySubfigure
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolCircArraySubfigure_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolCircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure entfrom, Handle_IGESDraw_CircArraySubfigure entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_CircArraySubfigure
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_CircArraySubfigure
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolCircArraySubfigure_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolCircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_CircArraySubfigure
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolCircArraySubfigure_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolCircArraySubfigure
IGESDraw_ToolCircArraySubfigure_swigregister = _IGESDraw.IGESDraw_ToolCircArraySubfigure_swigregister
IGESDraw_ToolCircArraySubfigure_swigregister(IGESDraw_ToolCircArraySubfigure)

class Handle_IGESDraw_HArray1OfConnectPoint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_HArray1OfConnectPoint self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_HArray1OfConnectPoint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_HArray1OfConnectPoint self, IGESDraw_HArray1OfConnectPoint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_HArray1OfConnectPoint self, Handle_IGESDraw_HArray1OfConnectPoint theHandle) -> Handle_IGESDraw_HArray1OfConnectPoint
        assign(Handle_IGESDraw_HArray1OfConnectPoint self, IGESDraw_HArray1OfConnectPoint thePtr) -> Handle_IGESDraw_HArray1OfConnectPoint
        assign(Handle_IGESDraw_HArray1OfConnectPoint self, Handle_IGESDraw_HArray1OfConnectPoint theHandle) -> Handle_IGESDraw_HArray1OfConnectPoint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_HArray1OfConnectPoint self) -> IGESDraw_HArray1OfConnectPoint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_HArray1OfConnectPoint self) -> IGESDraw_HArray1OfConnectPoint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_HArray1OfConnectPoint self) -> IGESDraw_HArray1OfConnectPoint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_HArray1OfConnectPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_HArray1OfConnectPoint

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDraw.IGESDraw_Array1OfConnectPoint

        """
        res = _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESDraw_HArray1OfConnectPoint self) -> NCollection_Array1_Handle_IGESDraw_ConnectPoint

        :rtype: OCC.wrapper.IGESDraw.IGESDraw_Array1OfConnectPoint

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_HArray1OfConnectPoint self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_HArray1OfConnectPoint self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_HArray1OfConnectPoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_HArray1OfConnectPoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_HArray1OfConnectPoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_HArray1OfConnectPoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_HArray1OfConnectPoint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_HArray1OfConnectPoint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_HArray1OfConnectPoint self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_HArray1OfConnectPoint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_DecrementRefCounter(self, *args)

Handle_IGESDraw_HArray1OfConnectPoint_swigregister = _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_swigregister
Handle_IGESDraw_HArray1OfConnectPoint_swigregister(Handle_IGESDraw_HArray1OfConnectPoint)

def Handle_IGESDraw_HArray1OfConnectPoint_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_DownCast(thing)
Handle_IGESDraw_HArray1OfConnectPoint_DownCast = _IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint_DownCast

class Handle_IGESDraw_HArray1OfViewKindEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_HArray1OfViewKindEntity self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_HArray1OfViewKindEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_HArray1OfViewKindEntity self, IGESDraw_HArray1OfViewKindEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_HArray1OfViewKindEntity self, Handle_IGESDraw_HArray1OfViewKindEntity theHandle) -> Handle_IGESDraw_HArray1OfViewKindEntity
        assign(Handle_IGESDraw_HArray1OfViewKindEntity self, IGESDraw_HArray1OfViewKindEntity thePtr) -> Handle_IGESDraw_HArray1OfViewKindEntity
        assign(Handle_IGESDraw_HArray1OfViewKindEntity self, Handle_IGESDraw_HArray1OfViewKindEntity theHandle) -> Handle_IGESDraw_HArray1OfViewKindEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_HArray1OfViewKindEntity self) -> IGESDraw_HArray1OfViewKindEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_HArray1OfViewKindEntity self) -> IGESDraw_HArray1OfViewKindEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_HArray1OfViewKindEntity self) -> IGESDraw_HArray1OfViewKindEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_HArray1OfViewKindEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_HArray1OfViewKindEntity

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDraw.IGESDraw_Array1OfViewKindEntity

        """
        res = _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESDraw_HArray1OfViewKindEntity self) -> NCollection_Array1_Handle_IGESData_ViewKindEntity

        :rtype: OCC.wrapper.IGESDraw.IGESDraw_Array1OfViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_HArray1OfViewKindEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_HArray1OfViewKindEntity self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_HArray1OfViewKindEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_HArray1OfViewKindEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_HArray1OfViewKindEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_HArray1OfViewKindEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_HArray1OfViewKindEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_HArray1OfViewKindEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_HArray1OfViewKindEntity self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_HArray1OfViewKindEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_DecrementRefCounter(self, *args)

Handle_IGESDraw_HArray1OfViewKindEntity_swigregister = _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_swigregister
Handle_IGESDraw_HArray1OfViewKindEntity_swigregister(Handle_IGESDraw_HArray1OfViewKindEntity)

def Handle_IGESDraw_HArray1OfViewKindEntity_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_DownCast(thing)
Handle_IGESDraw_HArray1OfViewKindEntity_DownCast = _IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity_DownCast

class Handle_IGESDraw_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_SpecificModule self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_SpecificModule self, IGESDraw_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_SpecificModule self, Handle_IGESDraw_SpecificModule theHandle) -> Handle_IGESDraw_SpecificModule
        assign(Handle_IGESDraw_SpecificModule self, IGESDraw_SpecificModule thePtr) -> Handle_IGESDraw_SpecificModule
        assign(Handle_IGESDraw_SpecificModule self, Handle_IGESDraw_SpecificModule theHandle) -> Handle_IGESDraw_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_SpecificModule self) -> IGESDraw_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_SpecificModule self) -> IGESDraw_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_SpecificModule self) -> IGESDraw_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_SpecificModule_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESDraw_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESDraw

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESDraw_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Corrections on Entities which support
        them (Planar)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESDraw_SpecificModule_swigregister = _IGESDraw.Handle_IGESDraw_SpecificModule_swigregister
Handle_IGESDraw_SpecificModule_swigregister(Handle_IGESDraw_SpecificModule)

def Handle_IGESDraw_SpecificModule_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_SpecificModule_DownCast(thing)
Handle_IGESDraw_SpecificModule_DownCast = _IGESDraw.Handle_IGESDraw_SpecificModule_DownCast

class IGESDraw_NetworkSubfigure(IGESData.IGESData_IGESEntity):
    """
    defines IGES Network Subfigure Instance Entity,
    Type <420> Form Number <0> in package IGESDraw

    Used to specify each instance of Network Subfigure
    Definition Entity (Type 320, Form 0).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_NetworkSubfigure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_NetworkSubfigure(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_NetworkSubfigure self) -> IGESDraw_NetworkSubfigure

        defines IGES Network Subfigure Instance Entity,
        Type <420> Form Number <0> in package IGESDraw

        Used to specify each instance of Network Subfigure
        Definition Entity (Type 320, Form 0).
        """
        this = _IGESDraw.new_IGESDraw_NetworkSubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_NetworkSubfigure self, Handle_IGESDraw_NetworkSubfigureDef aDefinition, gp_XYZ aTranslation, gp_XYZ aScaleFactor, Standard_Integer const aTypeFlag, Handle_TCollection_HAsciiString aDesignator, Handle_IGESGraph_TextDisplayTemplate aTemplate, Handle_IGESDraw_HArray1OfConnectPoint allConnectPoints)

        This method is used to set the fields of the class
        NetworkSubfigure
        - aDefinition      : Network Subfigure Definition Entity
        - aTranslation     : Translation data relative to the model
        space or the definition space
        - aScaleFactor     : Scale factors in the definition space
        - aTypeFlag        : Type flag
        - aDesignator      : Primary reference designator
        - aTemplate        : Primary reference designator Text
        display Template Entity
        - allConnectPoints : Associated Connect Point Entities

        :type aDefinition: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type aTranslation: OCC.wrapper.gp.gp_XYZ
        :type aScaleFactor: OCC.wrapper.gp.gp_XYZ
        :type aTypeFlag: int
        :type aDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aTemplate: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type allConnectPoints: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_Init(self, *args)


    def SubfigureDefinition(self, *args):
        """
        SubfigureDefinition(IGESDraw_NetworkSubfigure self) -> Handle_IGESDraw_NetworkSubfigureDef

        returns Network Subfigure Definition Entity specified by this entity

        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_SubfigureDefinition(self, *args)


    def Translation(self, *args):
        """
        Translation(IGESDraw_NetworkSubfigure self) -> gp_XYZ

        returns Translation Data relative to either model space or to
        the definition space of a referring entity

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_Translation(self, *args)


    def TransformedTranslation(self, *args):
        """
        TransformedTranslation(IGESDraw_NetworkSubfigure self) -> gp_XYZ

        returns the Transformed Translation Data relative to either model
        space or to the definition space of a referring entity

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_TransformedTranslation(self, *args)


    def ScaleFactors(self, *args):
        """
        ScaleFactors(IGESDraw_NetworkSubfigure self) -> gp_XYZ

        returns Scale factor in definition space(x, y, z axes)

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_ScaleFactors(self, *args)


    def TypeFlag(self, *args):
        """
        TypeFlag(IGESDraw_NetworkSubfigure self) -> Standard_Integer

        returns Type Flag which implements the distinction between Logical
        design and Physical design data,and is required if both are present.
        Type Flag = 0 : Not specified (default)
        = 1 : Logical
        = 2 : Physical

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_TypeFlag(self, *args)


    def ReferenceDesignator(self, *args):
        """
        ReferenceDesignator(IGESDraw_NetworkSubfigure self) -> Handle_TCollection_HAsciiString

        returns the primary reference designator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_ReferenceDesignator(self, *args)


    def HasDesignatorTemplate(self, *args):
        """
        HasDesignatorTemplate(IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        returns True if Text Display Template Entity is specified,
        else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_HasDesignatorTemplate(self, *args)


    def DesignatorTemplate(self, *args):
        """
        DesignatorTemplate(IGESDraw_NetworkSubfigure self) -> Handle_IGESGraph_TextDisplayTemplate

        returns primary reference designator Text Display Template Entity,
        or null. If null, no Text Display Template Entity specified

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_DesignatorTemplate(self, *args)


    def NbConnectPoints(self, *args):
        """
        NbConnectPoints(IGESDraw_NetworkSubfigure self) -> Standard_Integer

        returns the number of associated Connect Point Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_NbConnectPoints(self, *args)


    def ConnectPoint(self, *args):
        """
        ConnectPoint(IGESDraw_NetworkSubfigure self, Standard_Integer const Index) -> Handle_IGESDraw_ConnectPoint

        returns the Index'th  associated Connect point Entity
        raises exception if Index <= 0 or Index > NbConnectPoints()

        :type Index: int
        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_ConnectPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_NetworkSubfigure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_NetworkSubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_NetworkSubfigure
IGESDraw_NetworkSubfigure_swigregister = _IGESDraw.IGESDraw_NetworkSubfigure_swigregister
IGESDraw_NetworkSubfigure_swigregister(IGESDraw_NetworkSubfigure)

def IGESDraw_NetworkSubfigure_get_type_name(*args):
    """
    IGESDraw_NetworkSubfigure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_NetworkSubfigure_get_type_name(*args)

def IGESDraw_NetworkSubfigure_get_type_descriptor(*args):
    """
    IGESDraw_NetworkSubfigure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_NetworkSubfigure_get_type_descriptor(*args)

class Handle_IGESDraw_ViewsVisibleWithAttr(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_ViewsVisibleWithAttr self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_ViewsVisibleWithAttr self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_ViewsVisibleWithAttr self, IGESDraw_ViewsVisibleWithAttr thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr theHandle) -> Handle_IGESDraw_ViewsVisibleWithAttr
        assign(Handle_IGESDraw_ViewsVisibleWithAttr self, IGESDraw_ViewsVisibleWithAttr thePtr) -> Handle_IGESDraw_ViewsVisibleWithAttr
        assign(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESDraw_ViewsVisibleWithAttr theHandle) -> Handle_IGESDraw_ViewsVisibleWithAttr

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_ViewsVisibleWithAttr self) -> IGESDraw_ViewsVisibleWithAttr

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_ViewsVisibleWithAttr self) -> IGESDraw_ViewsVisibleWithAttr

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_ViewsVisibleWithAttr self) -> IGESDraw_ViewsVisibleWithAttr

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_ViewsVisibleWithAttr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_ViewsVisibleWithAttr

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESDraw_HArray1OfViewKindEntity allViewEntities, Handle_TColStd_HArray1OfInteger allLineFonts, Handle_IGESBasic_HArray1OfLineFontEntity allLineDefinitions, Handle_TColStd_HArray1OfInteger allColorValues, Handle_IGESGraph_HArray1OfColor allColorDefinitions, Handle_TColStd_HArray1OfInteger allLineWeights, Handle_IGESData_HArray1OfIGESEntity allDisplayEntities)

        This method is used to set fields of the class
        ViewsVisibleWithAttr
        - allViewEntities     : All View kind entities
        - allLineFonts        : All Line Font values or zero(0)
        - allLineDefinitions  : Line Font Definition
        (if Line Font value = 0)
        - allColorValues      : All Color values
        - allColorDefinitions : All Color Definition Entities
        - allLineWeights      : All Line Weight values
        - allDisplayEntities  : Entities which are member of
        this associativity
        raises exception if Lengths of allViewEntities, allLineFonts,
        allColorValues,allColorDefinitions, allLineWeights are not same

        :type allViewEntities: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allLineFonts: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allLineDefinitions: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity
        :type allColorValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allColorDefinitions: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfColor
        :type allLineWeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allDisplayEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Init(self, *args)


    def InitImplied(self, *args):
        """
        InitImplied(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_HArray1OfIGESEntity allDisplayEntity)

        Changes only the list of Displayed Entities (Null allowed)

        :type allDisplayEntity: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitImplied(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns False (for a complex view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        returns the number of Views containing the view visible, line font,
        color number, and line weight information

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_NbViews(self, *args)


    def NbDisplayedEntities(self, *args):
        """
        NbDisplayedEntities(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        returns the number of entities which have this particular set of
        display characteristic, or zero if no Entities specified

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_NbDisplayedEntities(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Handle_IGESData_ViewKindEntity

        returns the Index'th ViewKindEntity entity
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_ViewItem(self, *args)


    def LineFontValue(self, *args):
        """
        LineFontValue(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th Line font value or zero
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_LineFontValue(self, *args)


    def IsFontDefinition(self, *args):
        """
        IsFontDefinition(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Boolean

        returns True if the Index'th Line Font Definition is specified
        else returns False
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_IsFontDefinition(self, *args)


    def FontDefinition(self, *args):
        """
        FontDefinition(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Handle_IGESData_LineFontEntity

        returns the Index'th Line Font Definition Entity or NULL(0)
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_FontDefinition(self, *args)


    def ColorValue(self, *args):
        """
        ColorValue(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th Color number value
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_ColorValue(self, *args)


    def IsColorDefinition(self, *args):
        """
        IsColorDefinition(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Boolean

        returns True if Index'th Color Definition is specified
        else returns False
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_IsColorDefinition(self, *args)


    def ColorDefinition(self, *args):
        """
        ColorDefinition(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Handle_IGESGraph_Color

        returns the Index'th Color Definition Entity
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_ColorDefinition(self, *args)


    def LineWeightItem(self, *args):
        """
        LineWeightItem(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th Color Line Weight
        raises exception if Index <= 0 or Index > NbViews()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_LineWeightItem(self, *args)


    def DisplayedEntity(self, *args):
        """
        DisplayedEntity(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Index'th Display entity with this particular characteristics
        raises exception if Index  <= 0 or Index > NbEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DisplayedEntity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_ViewsVisibleWithAttr self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_ViewsVisibleWithAttr self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_ViewsVisibleWithAttr self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_ViewsVisibleWithAttr self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_ViewsVisibleWithAttr self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_ViewsVisibleWithAttr self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_ViewsVisibleWithAttr self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_ViewsVisibleWithAttr self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_ViewsVisibleWithAttr self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_ViewsVisibleWithAttr self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_ViewsVisibleWithAttr self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_ViewsVisibleWithAttr self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_ViewsVisibleWithAttr self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_ViewsVisibleWithAttr self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DecrementRefCounter(self, *args)

Handle_IGESDraw_ViewsVisibleWithAttr_swigregister = _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_swigregister
Handle_IGESDraw_ViewsVisibleWithAttr_swigregister(Handle_IGESDraw_ViewsVisibleWithAttr)

def Handle_IGESDraw_ViewsVisibleWithAttr_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DownCast(thing)
Handle_IGESDraw_ViewsVisibleWithAttr_DownCast = _IGESDraw.Handle_IGESDraw_ViewsVisibleWithAttr_DownCast

class Handle_IGESDraw_LabelDisplay(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_LabelDisplay self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_LabelDisplay self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_LabelDisplay self, IGESDraw_LabelDisplay thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_LabelDisplay self, Handle_IGESDraw_LabelDisplay theHandle) -> Handle_IGESDraw_LabelDisplay
        assign(Handle_IGESDraw_LabelDisplay self, IGESDraw_LabelDisplay thePtr) -> Handle_IGESDraw_LabelDisplay
        assign(Handle_IGESDraw_LabelDisplay self, Handle_IGESDraw_LabelDisplay theHandle) -> Handle_IGESDraw_LabelDisplay

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_LabelDisplay self) -> IGESDraw_LabelDisplay

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_LabelDisplay self) -> IGESDraw_LabelDisplay

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_LabelDisplay self) -> IGESDraw_LabelDisplay

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_LabelDisplay___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_LabelDisplay___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_LabelDisplay(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_LabelDisplay_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_LabelDisplay

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_LabelDisplay self, Handle_IGESDraw_HArray1OfViewKindEntity allViews, Handle_TColgp_HArray1OfXYZ allTextLocations, Handle_IGESDimen_HArray1OfLeaderArrow allLeaderEntities, Handle_TColStd_HArray1OfInteger allLabelLevels, Handle_IGESData_HArray1OfIGESEntity allDisplayedEntities)

        This method is used to set the fields of the class
        LabelDisplay
        - allViews             : Pointers to View Entities
        - allTextLocations     : Coordinates of text locations in the views
        - allLeaderEntities    : Pointers to Leader Entities in the views
        - allLabelLevels       : Entity label level numbers in the views
        - allDisplayedEntities : Pointers to the entities being displayed
        raises exception if Lengths of allViews, allTextLocations,
        allLeaderEntities, allLabelLevels and allDisplayedEntities are
        not same.

        :type allViews: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allTextLocations: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ
        :type allLeaderEntities: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow
        :type allLabelLevels: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allDisplayedEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Init(self, *args)


    def NbLabels(self, *args):
        """
        NbLabels(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        returns the number of label placements in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_NbLabels(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> Handle_IGESData_ViewKindEntity

        returns the View entity indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_ViewItem(self, *args)


    def TextLocation(self, *args):
        """
        TextLocation(Handle_IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> gp_Pnt

        returns the 3d-Point coordinates of the text location, in the
        view indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_TextLocation(self, *args)


    def LeaderEntity(self, *args):
        """
        LeaderEntity(Handle_IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> Handle_IGESDimen_LeaderArrow

        returns the Leader entity in the view indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_LeaderEntity(self, *args)


    def LabelLevel(self, *args):
        """
        LabelLevel(Handle_IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> Standard_Integer

        returns the Entity label level number in the view indicated
        by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_LabelLevel(self, *args)


    def DisplayedEntity(self, *args):
        """
        DisplayedEntity(Handle_IGESDraw_LabelDisplay self, Standard_Integer const EntityIndex) -> Handle_IGESData_IGESEntity

        returns the entity indicated by EntityIndex
        raises an exception if EntityIndex <= 0 or EntityIndex > NbLabels().

        :type EntityIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_DisplayedEntity(self, *args)


    def TransformedTextLocation(self, *args):
        """
        TransformedTextLocation(Handle_IGESDraw_LabelDisplay self, Standard_Integer const ViewIndex) -> gp_Pnt

        returns the transformed 3d-Point coordinates of the text
        location, in the view indicated by ViewIndex
        raises an exception if ViewIndex <= 0 or ViewIndex > NbLabels().

        :type ViewIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_TransformedTextLocation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_LabelDisplay self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_LabelDisplay_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_LabelDisplay_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_LabelDisplay self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_LabelDisplay self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_LabelDisplay self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_LabelDisplay self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_LabelDisplay self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_LabelDisplay self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_LabelDisplay self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_LabelDisplay self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_LabelDisplay self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_LabelDisplay self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_LabelDisplay self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_LabelDisplay self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_LabelDisplay self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_LabelDisplay self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_LabelDisplay self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_LabelDisplay self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_LabelDisplay self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_LabelDisplay self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_LabelDisplay self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_LabelDisplay self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_LabelDisplay self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_LabelDisplay self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_LabelDisplay self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_LabelDisplay self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_LabelDisplay self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_LabelDisplay self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_LabelDisplay self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_LabelDisplay self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_LabelDisplay self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_LabelDisplay self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_LabelDisplay self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_LabelDisplay self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_LabelDisplay self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_LabelDisplay self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_LabelDisplay_DecrementRefCounter(self, *args)

Handle_IGESDraw_LabelDisplay_swigregister = _IGESDraw.Handle_IGESDraw_LabelDisplay_swigregister
Handle_IGESDraw_LabelDisplay_swigregister(Handle_IGESDraw_LabelDisplay)

def Handle_IGESDraw_LabelDisplay_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_LabelDisplay_DownCast(thing)
Handle_IGESDraw_LabelDisplay_DownCast = _IGESDraw.Handle_IGESDraw_LabelDisplay_DownCast

class IGESDraw_CircArraySubfigure(IGESData.IGESData_IGESEntity):
    """
    Defines IGES Circular Array Subfigure Instance Entity,
    Type <414> Form Number <0> in package IGESDraw

    Used to produce copies of object called the base entity,
    arranging them around the edge of an imaginary circle
    whose center and radius are specified
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDraw_CircArraySubfigure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDraw_CircArraySubfigure(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDraw_CircArraySubfigure self) -> IGESDraw_CircArraySubfigure

        Defines IGES Circular Array Subfigure Instance Entity,
        Type <414> Form Number <0> in package IGESDraw

        Used to produce copies of object called the base entity,
        arranging them around the edge of an imaginary circle
        whose center and radius are specified
        """
        this = _IGESDraw.new_IGESDraw_CircArraySubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDraw_CircArraySubfigure self, Handle_IGESData_IGESEntity aBase, Standard_Integer const aNumLocs, gp_XYZ aCenter, Standard_Real const aRadius, Standard_Real const aStAngle, Standard_Real const aDelAngle, Standard_Integer const aFlag, Handle_TColStd_HArray1OfInteger allNumPos)

        This method is used to set the fields of the class
        CircArraySubfigure
        - aBase     : Base entity
        - aNumLocs  : Total number of possible instance locations
        - aCenter   : Coordinates of Center of imaginary circle
        - aRadius   : Radius of imaginary circle
        - aStAngle  : Start angle in radians
        - aDelAngle : Delta angle in radians
        - aFlag     : DO-DON'T flag to control which portion to
        display
        - allNumPos : All position to be or not to be processed

        :type aBase: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aNumLocs: int
        :type aCenter: OCC.wrapper.gp.gp_XYZ
        :type aRadius: float
        :type aStAngle: float
        :type aDelAngle: float
        :type aFlag: int
        :type allNumPos: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_Init(self, *args)


    def BaseEntity(self, *args):
        """
        BaseEntity(IGESDraw_CircArraySubfigure self) -> Handle_IGESData_IGESEntity

        returns the base entity, copies of which are produced

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_BaseEntity(self, *args)


    def NbLocations(self, *args):
        """
        NbLocations(IGESDraw_CircArraySubfigure self) -> Standard_Integer

        returns total number of possible instance locations

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_NbLocations(self, *args)


    def CenterPoint(self, *args):
        """
        CenterPoint(IGESDraw_CircArraySubfigure self) -> gp_Pnt

        returns the center of the imaginary circle

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_CenterPoint(self, *args)


    def TransformedCenterPoint(self, *args):
        """
        TransformedCenterPoint(IGESDraw_CircArraySubfigure self) -> gp_Pnt

        returns the Transformed center of the imaginary circle

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_TransformedCenterPoint(self, *args)


    def CircleRadius(self, *args):
        """
        CircleRadius(IGESDraw_CircArraySubfigure self) -> Standard_Real

        returns the radius of the imaginary circle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_CircleRadius(self, *args)


    def StartAngle(self, *args):
        """
        StartAngle(IGESDraw_CircArraySubfigure self) -> Standard_Real

        returns the start angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_StartAngle(self, *args)


    def DeltaAngle(self, *args):
        """
        DeltaAngle(IGESDraw_CircArraySubfigure self) -> Standard_Real

        returns the delta angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_DeltaAngle(self, *args)


    def ListCount(self, *args):
        """
        ListCount(IGESDraw_CircArraySubfigure self) -> Standard_Integer

        returns 0 if all elements to be displayed

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_ListCount(self, *args)


    def DisplayFlag(self, *args):
        """
        DisplayFlag(IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        returns True if (ListCount = 0) all elements are to be displayed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_DisplayFlag(self, *args)


    def DoDontFlag(self, *args):
        """
        DoDontFlag(IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        returns 0 if half or fewer of the elements of  the array are defined
        1 if half or more of the elements are defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_DoDontFlag(self, *args)


    def PositionNum(self, *args):
        """
        PositionNum(IGESDraw_CircArraySubfigure self, Standard_Integer const Index) -> Standard_Boolean

        returns whether Index is to be processed (DO)
        or not to be processed(DON'T)
        if (ListCount = 0) return theDoDontFlag
        raises exception if Index <= 0 or Index > ListCount().

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_PositionNum(self, *args)


    def ListPosition(self, *args):
        """
        ListPosition(IGESDraw_CircArraySubfigure self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th value position
        raises exception if Index <= 0 or Index > ListCount().

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_ListPosition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.IGESDraw_CircArraySubfigure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.IGESDraw_CircArraySubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDraw.delete_IGESDraw_CircArraySubfigure
IGESDraw_CircArraySubfigure_swigregister = _IGESDraw.IGESDraw_CircArraySubfigure_swigregister
IGESDraw_CircArraySubfigure_swigregister(IGESDraw_CircArraySubfigure)

def IGESDraw_CircArraySubfigure_get_type_name(*args):
    """
    IGESDraw_CircArraySubfigure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDraw.IGESDraw_CircArraySubfigure_get_type_name(*args)

def IGESDraw_CircArraySubfigure_get_type_descriptor(*args):
    """
    IGESDraw_CircArraySubfigure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDraw.IGESDraw_CircArraySubfigure_get_type_descriptor(*args)

class Handle_IGESDraw_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_Protocol self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_Protocol self, IGESDraw_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_Protocol self, Handle_IGESDraw_Protocol theHandle) -> Handle_IGESDraw_Protocol
        assign(Handle_IGESDraw_Protocol self, IGESDraw_Protocol thePtr) -> Handle_IGESDraw_Protocol
        assign(Handle_IGESDraw_Protocol self, Handle_IGESDraw_Protocol theHandle) -> Handle_IGESDraw_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_Protocol self) -> IGESDraw_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_Protocol self) -> IGESDraw_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_Protocol self) -> IGESDraw_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_Protocol_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESDraw_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESDimen)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESDraw_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_TypeNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewModel(self, *args):
        """
        NewModel(Handle_IGESDraw_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESDraw_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESDraw_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESDraw_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESDraw_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESDraw_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESDraw_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESDraw.Handle_IGESDraw_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESDraw_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESDraw_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESDraw_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESDraw_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESDraw_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Protocol_DecrementRefCounter(self, *args)

Handle_IGESDraw_Protocol_swigregister = _IGESDraw.Handle_IGESDraw_Protocol_swigregister
Handle_IGESDraw_Protocol_swigregister(Handle_IGESDraw_Protocol)

def Handle_IGESDraw_Protocol_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_Protocol_DownCast(thing)
Handle_IGESDraw_Protocol_DownCast = _IGESDraw.Handle_IGESDraw_Protocol_DownCast

class IGESDraw_ToolNetworkSubfigureDef(object):
    """
    Tool to work on a NetworkSubfigureDef. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolNetworkSubfigureDef self) -> IGESDraw_ToolNetworkSubfigureDef

        Returns a ToolNetworkSubfigureDef, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolNetworkSubfigureDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolNetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigureDef_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolNetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigureDef_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolNetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef ent, Interface_EntityIterator iter)

        Lists the Entities shared by a NetworkSubfigureDef <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigureDef_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolNetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigureDef_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolNetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigureDef_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolNetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef entfrom, Handle_IGESDraw_NetworkSubfigureDef entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigureDef_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolNetworkSubfigureDef self, Handle_IGESDraw_NetworkSubfigureDef ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolNetworkSubfigureDef_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolNetworkSubfigureDef
IGESDraw_ToolNetworkSubfigureDef_swigregister = _IGESDraw.IGESDraw_ToolNetworkSubfigureDef_swigregister
IGESDraw_ToolNetworkSubfigureDef_swigregister(IGESDraw_ToolNetworkSubfigureDef)

class IGESDraw_ToolSegmentedViewsVisible(object):
    """
    Tool to work on a SegmentedViewsVisible. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolSegmentedViewsVisible self) -> IGESDraw_ToolSegmentedViewsVisible

        Returns a ToolSegmentedViewsVisible, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolSegmentedViewsVisible(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolSegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_SegmentedViewsVisible
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolSegmentedViewsVisible_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolSegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_SegmentedViewsVisible
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolSegmentedViewsVisible_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolSegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SegmentedViewsVisible <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_SegmentedViewsVisible
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolSegmentedViewsVisible_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolSegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_SegmentedViewsVisible
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolSegmentedViewsVisible_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolSegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_SegmentedViewsVisible
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolSegmentedViewsVisible_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolSegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible entfrom, Handle_IGESDraw_SegmentedViewsVisible entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_SegmentedViewsVisible
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_SegmentedViewsVisible
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolSegmentedViewsVisible_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolSegmentedViewsVisible self, Handle_IGESDraw_SegmentedViewsVisible ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_SegmentedViewsVisible
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolSegmentedViewsVisible_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolSegmentedViewsVisible
IGESDraw_ToolSegmentedViewsVisible_swigregister = _IGESDraw.IGESDraw_ToolSegmentedViewsVisible_swigregister
IGESDraw_ToolSegmentedViewsVisible_swigregister(IGESDraw_ToolSegmentedViewsVisible)

class IGESDraw_ToolViewsVisible(object):
    """
    Tool to work on a ViewsVisible. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolViewsVisible self) -> IGESDraw_ToolViewsVisible

        Returns a ToolViewsVisible, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolViewsVisible(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ViewsVisible <ent>, from
        its specific (own) parameters shared not implied (the Views)

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_OwnShared(self, *args)


    def OwnImplied(self, *args):
        """
        OwnImplied(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ViewsVisible <ent>, from
        its specific (own) implied parameters : the Displayed Entities

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_OwnImplied(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible entfrom, Handle_IGESDraw_ViewsVisible entto, Interface_CopyTool TC)

        Copies Specific Parameters shared not implied, i.e. all but
        the Displayed Entities

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_OwnCopy(self, *args)


    def OwnRenew(self, *args):
        """
        OwnRenew(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible entfrom, Handle_IGESDraw_ViewsVisible entto, Interface_CopyTool TC)

        Copies Specific implied Parameters : the Displayed Entities
        which have already been copied

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_OwnRenew(self, *args)


    def OwnWhenDelete(self, *args):
        """
        OwnWhenDelete(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent)

        Clears specific implied parameters, which cause looping
        structures; required for deletion

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_OwnWhenDelete(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDraw_ToolViewsVisible self, Handle_IGESDraw_ViewsVisible ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a ViewsVisible
        (all displayed entities must refer to <ent> in directory part,
        else the list is cleared)

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ViewsVisible
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ToolViewsVisible_OwnCorrect(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolViewsVisible
IGESDraw_ToolViewsVisible_swigregister = _IGESDraw.IGESDraw_ToolViewsVisible_swigregister
IGESDraw_ToolViewsVisible_swigregister(IGESDraw_ToolViewsVisible)

class Handle_IGESDraw_NetworkSubfigure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_NetworkSubfigure self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_NetworkSubfigure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_NetworkSubfigure self, IGESDraw_NetworkSubfigure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure theHandle) -> Handle_IGESDraw_NetworkSubfigure
        assign(Handle_IGESDraw_NetworkSubfigure self, IGESDraw_NetworkSubfigure thePtr) -> Handle_IGESDraw_NetworkSubfigure
        assign(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESDraw_NetworkSubfigure theHandle) -> Handle_IGESDraw_NetworkSubfigure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_NetworkSubfigure self) -> IGESDraw_NetworkSubfigure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_NetworkSubfigure self) -> IGESDraw_NetworkSubfigure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_NetworkSubfigure self) -> IGESDraw_NetworkSubfigure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_NetworkSubfigure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_NetworkSubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_NetworkSubfigure_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_NetworkSubfigure

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESDraw_NetworkSubfigureDef aDefinition, gp_XYZ aTranslation, gp_XYZ aScaleFactor, Standard_Integer const aTypeFlag, Handle_TCollection_HAsciiString aDesignator, Handle_IGESGraph_TextDisplayTemplate aTemplate, Handle_IGESDraw_HArray1OfConnectPoint allConnectPoints)

        This method is used to set the fields of the class
        NetworkSubfigure
        - aDefinition      : Network Subfigure Definition Entity
        - aTranslation     : Translation data relative to the model
        space or the definition space
        - aScaleFactor     : Scale factors in the definition space
        - aTypeFlag        : Type flag
        - aDesignator      : Primary reference designator
        - aTemplate        : Primary reference designator Text
        display Template Entity
        - allConnectPoints : Associated Connect Point Entities

        :type aDefinition: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef
        :type aTranslation: OCC.wrapper.gp.gp_XYZ
        :type aScaleFactor: OCC.wrapper.gp.gp_XYZ
        :type aTypeFlag: int
        :type aDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aTemplate: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type allConnectPoints: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Init(self, *args)


    def SubfigureDefinition(self, *args):
        """
        SubfigureDefinition(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESDraw_NetworkSubfigureDef

        returns Network Subfigure Definition Entity specified by this entity

        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_NetworkSubfigureDef

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_SubfigureDefinition(self, *args)


    def Translation(self, *args):
        """
        Translation(Handle_IGESDraw_NetworkSubfigure self) -> gp_XYZ

        returns Translation Data relative to either model space or to
        the definition space of a referring entity

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Translation(self, *args)


    def TransformedTranslation(self, *args):
        """
        TransformedTranslation(Handle_IGESDraw_NetworkSubfigure self) -> gp_XYZ

        returns the Transformed Translation Data relative to either model
        space or to the definition space of a referring entity

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_TransformedTranslation(self, *args)


    def ScaleFactors(self, *args):
        """
        ScaleFactors(Handle_IGESDraw_NetworkSubfigure self) -> gp_XYZ

        returns Scale factor in definition space(x, y, z axes)

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_ScaleFactors(self, *args)


    def TypeFlag(self, *args):
        """
        TypeFlag(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        returns Type Flag which implements the distinction between Logical
        design and Physical design data,and is required if both are present.
        Type Flag = 0 : Not specified (default)
        = 1 : Logical
        = 2 : Physical

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_TypeFlag(self, *args)


    def ReferenceDesignator(self, *args):
        """
        ReferenceDesignator(Handle_IGESDraw_NetworkSubfigure self) -> Handle_TCollection_HAsciiString

        returns the primary reference designator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_ReferenceDesignator(self, *args)


    def HasDesignatorTemplate(self, *args):
        """
        HasDesignatorTemplate(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        returns True if Text Display Template Entity is specified,
        else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HasDesignatorTemplate(self, *args)


    def DesignatorTemplate(self, *args):
        """
        DesignatorTemplate(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESGraph_TextDisplayTemplate

        returns primary reference designator Text Display Template Entity,
        or null. If null, no Text Display Template Entity specified

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DesignatorTemplate(self, *args)


    def NbConnectPoints(self, *args):
        """
        NbConnectPoints(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        returns the number of associated Connect Point Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_NbConnectPoints(self, *args)


    def ConnectPoint(self, *args):
        """
        ConnectPoint(Handle_IGESDraw_NetworkSubfigure self, Standard_Integer const Index) -> Handle_IGESDraw_ConnectPoint

        returns the Index'th  associated Connect point Entity
        raises exception if Index <= 0 or Index > NbConnectPoints()

        :type Index: int
        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_ConnectPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_NetworkSubfigure self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_NetworkSubfigure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_NetworkSubfigure self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_NetworkSubfigure self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_NetworkSubfigure self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_NetworkSubfigure self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_NetworkSubfigure self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_NetworkSubfigure self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_NetworkSubfigure self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_NetworkSubfigure self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_NetworkSubfigure self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_NetworkSubfigure self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_NetworkSubfigure self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_NetworkSubfigure self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_NetworkSubfigure self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_NetworkSubfigure self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_NetworkSubfigure self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_NetworkSubfigure self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_NetworkSubfigure self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_NetworkSubfigure self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_NetworkSubfigure self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_NetworkSubfigure self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_NetworkSubfigure self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_NetworkSubfigure self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_NetworkSubfigure self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_NetworkSubfigure self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_NetworkSubfigure self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_NetworkSubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_NetworkSubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_NetworkSubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_NetworkSubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_NetworkSubfigure self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_NetworkSubfigure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DecrementRefCounter(self, *args)

Handle_IGESDraw_NetworkSubfigure_swigregister = _IGESDraw.Handle_IGESDraw_NetworkSubfigure_swigregister
Handle_IGESDraw_NetworkSubfigure_swigregister(Handle_IGESDraw_NetworkSubfigure)

def Handle_IGESDraw_NetworkSubfigure_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DownCast(thing)
Handle_IGESDraw_NetworkSubfigure_DownCast = _IGESDraw.Handle_IGESDraw_NetworkSubfigure_DownCast

class Handle_IGESDraw_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_GeneralModule self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_GeneralModule self, IGESDraw_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_GeneralModule self, Handle_IGESDraw_GeneralModule theHandle) -> Handle_IGESDraw_GeneralModule
        assign(Handle_IGESDraw_GeneralModule self, IGESDraw_GeneralModule thePtr) -> Handle_IGESDraw_GeneralModule
        assign(Handle_IGESDraw_GeneralModule self, Handle_IGESDraw_GeneralModule theHandle) -> Handle_IGESDraw_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_GeneralModule self) -> IGESDraw_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_GeneralModule self) -> IGESDraw_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_GeneralModule self) -> IGESDraw_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_GeneralModule_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_GeneralModule

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_OwnSharedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by an IGESEntity <ent> (in
        addition to Associativities). Redefined for ViewsVisible ...

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_OwnImpliedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_OwnCopyCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        redefined for ViewsVisible ... (takes only the implied ref.s
        which have also been copied)

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_OwnRenewCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Clears parameters with can cause looping structures :
        redefined for ViewsVisible ... (clears the implied ref.s)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_OwnDeleteCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Planar : Auxiliary
        Subfigures and ConnectPoint : Structure
        others : Drawing

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_ListImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_RenewImpliedCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_WhenDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESDraw_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESDraw_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESDraw_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESDraw_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_NewCopiedCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESDraw_GeneralModule_swigregister = _IGESDraw.Handle_IGESDraw_GeneralModule_swigregister
Handle_IGESDraw_GeneralModule_swigregister(Handle_IGESDraw_GeneralModule)

def Handle_IGESDraw_GeneralModule_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_GeneralModule_DownCast(thing)
Handle_IGESDraw_GeneralModule_DownCast = _IGESDraw.Handle_IGESDraw_GeneralModule_DownCast

class IGESDraw_ToolLabelDisplay(object):
    """
    Tool to work on a LabelDisplay. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolLabelDisplay self) -> IGESDraw_ToolLabelDisplay

        Returns a ToolLabelDisplay, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolLabelDisplay(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolLabelDisplay self, Handle_IGESDraw_LabelDisplay ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_LabelDisplay
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolLabelDisplay_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolLabelDisplay self, Handle_IGESDraw_LabelDisplay ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_LabelDisplay
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolLabelDisplay_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolLabelDisplay self, Handle_IGESDraw_LabelDisplay ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LabelDisplay <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_LabelDisplay
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolLabelDisplay_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolLabelDisplay self, Handle_IGESDraw_LabelDisplay ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_LabelDisplay
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolLabelDisplay_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolLabelDisplay self, Handle_IGESDraw_LabelDisplay ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_LabelDisplay
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolLabelDisplay_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolLabelDisplay self, Handle_IGESDraw_LabelDisplay entfrom, Handle_IGESDraw_LabelDisplay entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_LabelDisplay
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_LabelDisplay
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolLabelDisplay_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolLabelDisplay self, Handle_IGESDraw_LabelDisplay ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_LabelDisplay
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolLabelDisplay_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolLabelDisplay
IGESDraw_ToolLabelDisplay_swigregister = _IGESDraw.IGESDraw_ToolLabelDisplay_swigregister
IGESDraw_ToolLabelDisplay_swigregister(IGESDraw_ToolLabelDisplay)

class IGESDraw_ToolRectArraySubfigure(object):
    """
    Tool to work on a RectArraySubfigure. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolRectArraySubfigure self) -> IGESDraw_ToolRectArraySubfigure

        Returns a ToolRectArraySubfigure, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolRectArraySubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolRectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_RectArraySubfigure
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolRectArraySubfigure_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolRectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_RectArraySubfigure
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolRectArraySubfigure_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolRectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure ent, Interface_EntityIterator iter)

        Lists the Entities shared by a RectArraySubfigure <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_RectArraySubfigure
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolRectArraySubfigure_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolRectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_RectArraySubfigure
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolRectArraySubfigure_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolRectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_RectArraySubfigure
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolRectArraySubfigure_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolRectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure entfrom, Handle_IGESDraw_RectArraySubfigure entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_RectArraySubfigure
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_RectArraySubfigure
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolRectArraySubfigure_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolRectArraySubfigure self, Handle_IGESDraw_RectArraySubfigure ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_RectArraySubfigure
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolRectArraySubfigure_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolRectArraySubfigure
IGESDraw_ToolRectArraySubfigure_swigregister = _IGESDraw.IGESDraw_ToolRectArraySubfigure_swigregister
IGESDraw_ToolRectArraySubfigure_swigregister(IGESDraw_ToolRectArraySubfigure)

class Handle_IGESDraw_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_ReadWriteModule self, IGESDraw_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_ReadWriteModule self, Handle_IGESDraw_ReadWriteModule theHandle) -> Handle_IGESDraw_ReadWriteModule
        assign(Handle_IGESDraw_ReadWriteModule self, IGESDraw_ReadWriteModule thePtr) -> Handle_IGESDraw_ReadWriteModule
        assign(Handle_IGESDraw_ReadWriteModule self, Handle_IGESDraw_ReadWriteModule theHandle) -> Handle_IGESDraw_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_ReadWriteModule self) -> IGESDraw_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_ReadWriteModule self) -> IGESDraw_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_ReadWriteModule self) -> IGESDraw_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_ReadWriteModule

    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESDraw_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESDraw

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESDraw_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESDraw

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESDraw_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESDraw_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_CaseNum(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESDraw_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_IGESDraw_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESDraw_ReadWriteModule_swigregister = _IGESDraw.Handle_IGESDraw_ReadWriteModule_swigregister
Handle_IGESDraw_ReadWriteModule_swigregister(Handle_IGESDraw_ReadWriteModule)

def Handle_IGESDraw_ReadWriteModule_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_ReadWriteModule_DownCast(thing)
Handle_IGESDraw_ReadWriteModule_DownCast = _IGESDraw.Handle_IGESDraw_ReadWriteModule_DownCast

class IGESDraw_ToolDrawing(object):
    """
    Tool to work on a Drawing. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolDrawing self) -> IGESDraw_ToolDrawing

        Returns a ToolDrawing, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolDrawing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolDrawing self, Handle_IGESDraw_Drawing ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolDrawing_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolDrawing self, Handle_IGESDraw_Drawing ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolDrawing_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolDrawing self, Handle_IGESDraw_Drawing ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Drawing <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolDrawing_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDraw_ToolDrawing self, Handle_IGESDraw_Drawing ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Drawing
        (Null Views are removed from list)

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.IGESDraw_ToolDrawing_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolDrawing self, Handle_IGESDraw_Drawing ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolDrawing_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolDrawing self, Handle_IGESDraw_Drawing ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolDrawing_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolDrawing self, Handle_IGESDraw_Drawing entfrom, Handle_IGESDraw_Drawing entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolDrawing_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolDrawing self, Handle_IGESDraw_Drawing ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_Drawing
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolDrawing_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolDrawing
IGESDraw_ToolDrawing_swigregister = _IGESDraw.IGESDraw_ToolDrawing_swigregister
IGESDraw_ToolDrawing_swigregister(IGESDraw_ToolDrawing)

class Handle_IGESDraw_ViewsVisible(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_ViewsVisible self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_ViewsVisible self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_ViewsVisible self, IGESDraw_ViewsVisible thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_ViewsVisible self, Handle_IGESDraw_ViewsVisible theHandle) -> Handle_IGESDraw_ViewsVisible
        assign(Handle_IGESDraw_ViewsVisible self, IGESDraw_ViewsVisible thePtr) -> Handle_IGESDraw_ViewsVisible
        assign(Handle_IGESDraw_ViewsVisible self, Handle_IGESDraw_ViewsVisible theHandle) -> Handle_IGESDraw_ViewsVisible

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_ViewsVisible self) -> IGESDraw_ViewsVisible

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_ViewsVisible self) -> IGESDraw_ViewsVisible

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_ViewsVisible self) -> IGESDraw_ViewsVisible

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_ViewsVisible___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_ViewsVisible___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_ViewsVisible(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_ViewsVisible_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_ViewsVisible

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_ViewsVisible self, Handle_IGESDraw_HArray1OfViewKindEntity allViewEntities, Handle_IGESData_HArray1OfIGESEntity allDisplayEntity)

        This method is used to set the fields of the class
        ViewsVisible
        - allViewEntities  : All View kind entities
        - allDisplayEntity : All entities whose display is specified

        :type allViewEntities: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allDisplayEntity: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Init(self, *args)


    def InitImplied(self, *args):
        """
        InitImplied(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_HArray1OfIGESEntity allDisplayEntity)

        Changes only the list of Displayed Entities (Null allowed)

        :type allDisplayEntity: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitImplied(self, *args)


    def IsSingle(self, *args):
        """
        IsSingle(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns False (for a complex view)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_IsSingle(self, *args)


    def NbViews(self, *args):
        """
        NbViews(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        returns the Number of views visible

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_NbViews(self, *args)


    def NbDisplayedEntities(self, *args):
        """
        NbDisplayedEntities(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        returns the number of entities displayed in the Views or zero if
        no Entities specified in these Views

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_NbDisplayedEntities(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESDraw_ViewsVisible self, Standard_Integer const Index) -> Handle_IGESData_ViewKindEntity

        returns the Index'th ViewKindEntity Entity
        raises exception if Index  <= 0 or Index > NbViewsVisible()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_ViewItem(self, *args)


    def DisplayedEntity(self, *args):
        """
        DisplayedEntity(Handle_IGESDraw_ViewsVisible self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th entity whose display is being specified by
        this associativity instance
        raises exception if Index  <= 0 or Index > NbEntityDisplayed()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_DisplayedEntity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_ViewsVisible self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_ViewsVisible_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_ViewsVisible_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_ViewsVisible self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_ViewsVisible self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_ViewsVisible self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_ViewsVisible self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_ViewsVisible self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_ViewsVisible self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_ViewsVisible self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_ViewsVisible self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_ViewsVisible self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_ViewsVisible self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_ViewsVisible self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_ViewsVisible self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_ViewsVisible self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_ViewsVisible self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_ViewsVisible self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_ViewsVisible self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_ViewsVisible self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_ViewsVisible self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_ViewsVisible self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_ViewsVisible self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_ViewsVisible self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_ViewsVisible self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_ViewsVisible self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_ViewsVisible self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_ViewsVisible self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_ViewsVisible self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_ViewsVisible self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_ViewsVisible self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_ViewsVisible self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_ViewsVisible self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_ViewsVisible self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_ViewsVisible self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_ViewsVisible self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_ViewsVisible self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ViewsVisible_DecrementRefCounter(self, *args)

Handle_IGESDraw_ViewsVisible_swigregister = _IGESDraw.Handle_IGESDraw_ViewsVisible_swigregister
Handle_IGESDraw_ViewsVisible_swigregister(Handle_IGESDraw_ViewsVisible)

def Handle_IGESDraw_ViewsVisible_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_ViewsVisible_DownCast(thing)
Handle_IGESDraw_ViewsVisible_DownCast = _IGESDraw.Handle_IGESDraw_ViewsVisible_DownCast

class Handle_IGESDraw_CircArraySubfigure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_CircArraySubfigure self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_CircArraySubfigure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_CircArraySubfigure self, IGESDraw_CircArraySubfigure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure theHandle) -> Handle_IGESDraw_CircArraySubfigure
        assign(Handle_IGESDraw_CircArraySubfigure self, IGESDraw_CircArraySubfigure thePtr) -> Handle_IGESDraw_CircArraySubfigure
        assign(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESDraw_CircArraySubfigure theHandle) -> Handle_IGESDraw_CircArraySubfigure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_CircArraySubfigure self) -> IGESDraw_CircArraySubfigure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_CircArraySubfigure self) -> IGESDraw_CircArraySubfigure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_CircArraySubfigure self) -> IGESDraw_CircArraySubfigure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_CircArraySubfigure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_CircArraySubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_CircArraySubfigure_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_CircArraySubfigure

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_IGESEntity aBase, Standard_Integer const aNumLocs, gp_XYZ aCenter, Standard_Real const aRadius, Standard_Real const aStAngle, Standard_Real const aDelAngle, Standard_Integer const aFlag, Handle_TColStd_HArray1OfInteger allNumPos)

        This method is used to set the fields of the class
        CircArraySubfigure
        - aBase     : Base entity
        - aNumLocs  : Total number of possible instance locations
        - aCenter   : Coordinates of Center of imaginary circle
        - aRadius   : Radius of imaginary circle
        - aStAngle  : Start angle in radians
        - aDelAngle : Delta angle in radians
        - aFlag     : DO-DON'T flag to control which portion to
        display
        - allNumPos : All position to be or not to be processed

        :type aBase: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aNumLocs: int
        :type aCenter: OCC.wrapper.gp.gp_XYZ
        :type aRadius: float
        :type aStAngle: float
        :type aDelAngle: float
        :type aFlag: int
        :type allNumPos: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Init(self, *args)


    def BaseEntity(self, *args):
        """
        BaseEntity(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_IGESEntity

        returns the base entity, copies of which are produced

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_BaseEntity(self, *args)


    def NbLocations(self, *args):
        """
        NbLocations(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        returns total number of possible instance locations

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_NbLocations(self, *args)


    def CenterPoint(self, *args):
        """
        CenterPoint(Handle_IGESDraw_CircArraySubfigure self) -> gp_Pnt

        returns the center of the imaginary circle

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_CenterPoint(self, *args)


    def TransformedCenterPoint(self, *args):
        """
        TransformedCenterPoint(Handle_IGESDraw_CircArraySubfigure self) -> gp_Pnt

        returns the Transformed center of the imaginary circle

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_TransformedCenterPoint(self, *args)


    def CircleRadius(self, *args):
        """
        CircleRadius(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Real

        returns the radius of the imaginary circle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_CircleRadius(self, *args)


    def StartAngle(self, *args):
        """
        StartAngle(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Real

        returns the start angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_StartAngle(self, *args)


    def DeltaAngle(self, *args):
        """
        DeltaAngle(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Real

        returns the delta angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DeltaAngle(self, *args)


    def ListCount(self, *args):
        """
        ListCount(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        returns 0 if all elements to be displayed

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_ListCount(self, *args)


    def DisplayFlag(self, *args):
        """
        DisplayFlag(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        returns True if (ListCount = 0) all elements are to be displayed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DisplayFlag(self, *args)


    def DoDontFlag(self, *args):
        """
        DoDontFlag(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        returns 0 if half or fewer of the elements of  the array are defined
        1 if half or more of the elements are defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DoDontFlag(self, *args)


    def PositionNum(self, *args):
        """
        PositionNum(Handle_IGESDraw_CircArraySubfigure self, Standard_Integer const Index) -> Standard_Boolean

        returns whether Index is to be processed (DO)
        or not to be processed(DON'T)
        if (ListCount = 0) return theDoDontFlag
        raises exception if Index <= 0 or Index > ListCount().

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_PositionNum(self, *args)


    def ListPosition(self, *args):
        """
        ListPosition(Handle_IGESDraw_CircArraySubfigure self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th value position
        raises exception if Index <= 0 or Index > ListCount().

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_ListPosition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_CircArraySubfigure self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_CircArraySubfigure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_CircArraySubfigure self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_CircArraySubfigure self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_CircArraySubfigure self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_CircArraySubfigure self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_CircArraySubfigure self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_CircArraySubfigure self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_CircArraySubfigure self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_CircArraySubfigure self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_CircArraySubfigure self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_CircArraySubfigure self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_CircArraySubfigure self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_CircArraySubfigure self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_CircArraySubfigure self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_CircArraySubfigure self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_CircArraySubfigure self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_CircArraySubfigure self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_CircArraySubfigure self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_CircArraySubfigure self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_CircArraySubfigure self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_CircArraySubfigure self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_CircArraySubfigure self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_CircArraySubfigure self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_CircArraySubfigure self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_CircArraySubfigure self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_CircArraySubfigure self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_CircArraySubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_CircArraySubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_CircArraySubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_CircArraySubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_CircArraySubfigure self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_CircArraySubfigure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DecrementRefCounter(self, *args)

Handle_IGESDraw_CircArraySubfigure_swigregister = _IGESDraw.Handle_IGESDraw_CircArraySubfigure_swigregister
Handle_IGESDraw_CircArraySubfigure_swigregister(Handle_IGESDraw_CircArraySubfigure)

def Handle_IGESDraw_CircArraySubfigure_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DownCast(thing)
Handle_IGESDraw_CircArraySubfigure_DownCast = _IGESDraw.Handle_IGESDraw_CircArraySubfigure_DownCast

class NCollection_Array1_Handle_IGESDraw_ConnectPoint(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> NCollection_Array1< opencascade::handle< IGESDraw_ConnectPoint > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> NCollection_Array1< opencascade::handle< IGESDraw_ConnectPoint > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> NCollection_Array1< opencascade::handle< IGESDraw_ConnectPoint > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> NCollection_Array1< opencascade::handle< IGESDraw_ConnectPoint > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESDraw.new_NCollection_Array1_Handle_IGESDraw_ConnectPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESDraw_ConnectPoint self, Handle_IGESDraw_ConnectPoint theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESDraw_ConnectPoint self, NCollection_Array1_Handle_IGESDraw_ConnectPoint theOther) -> NCollection_Array1_Handle_IGESDraw_ConnectPoint

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESDraw_ConnectPoint self, NCollection_Array1_Handle_IGESDraw_ConnectPoint theOther) -> NCollection_Array1_Handle_IGESDraw_ConnectPoint

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESDraw_ConnectPoint self, NCollection_Array1_Handle_IGESDraw_ConnectPoint theOther) -> NCollection_Array1_Handle_IGESDraw_ConnectPoint
        assign(NCollection_Array1_Handle_IGESDraw_ConnectPoint self, NCollection_Array1_Handle_IGESDraw_ConnectPoint theOther) -> NCollection_Array1_Handle_IGESDraw_ConnectPoint

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Handle_IGESDraw_ConnectPoint

        @return first element

        :rtype: TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESDraw_ConnectPoint self) -> Handle_IGESDraw_ConnectPoint

        @return last element

        :rtype: TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESDraw_ConnectPoint self, Standard_Integer const theIndex) -> Handle_IGESDraw_ConnectPoint

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESDraw_ConnectPoint self, Standard_Integer const theIndex, Handle_IGESDraw_ConnectPoint theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESDraw_ConnectPoint self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_Resize(self, *args)

    __swig_destroy__ = _IGESDraw.delete_NCollection_Array1_Handle_IGESDraw_ConnectPoint
NCollection_Array1_Handle_IGESDraw_ConnectPoint_swigregister = _IGESDraw.NCollection_Array1_Handle_IGESDraw_ConnectPoint_swigregister
NCollection_Array1_Handle_IGESDraw_ConnectPoint_swigregister(NCollection_Array1_Handle_IGESDraw_ConnectPoint)


try:
	IGESDraw_Array1OfConnectPoint = NCollection_Array1_Handle_IGESDraw_ConnectPoint
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESDraw_Planar(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_Planar self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_Planar_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_Planar self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_Planar_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_Planar self, IGESDraw_Planar thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_Planar_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_Planar self, Handle_IGESDraw_Planar theHandle) -> Handle_IGESDraw_Planar
        assign(Handle_IGESDraw_Planar self, IGESDraw_Planar thePtr) -> Handle_IGESDraw_Planar
        assign(Handle_IGESDraw_Planar self, Handle_IGESDraw_Planar theHandle) -> Handle_IGESDraw_Planar

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_Planar_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_Planar self) -> IGESDraw_Planar

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_Planar_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_Planar self) -> IGESDraw_Planar

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_Planar___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_Planar self) -> IGESDraw_Planar

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_Planar___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_Planar___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_Planar___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_Planar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_Planar_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_Planar

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_Planar self, Standard_Integer const nbMats, Handle_IGESGeom_TransformationMatrix aTransformationMatrix, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class Planar
        - nbMats                : Number of Transformation matrices
        - aTransformationMatrix : Pointer to the Transformation matrix
        - allEntities           : Pointers to the entities specified

        :type nbMats: int
        :type aTransformationMatrix: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Init(self, *args)


    def NbMatrices(self, *args):
        """
        NbMatrices(Handle_IGESDraw_Planar self) -> Standard_Integer

        returns the number of Transformation matrices in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_NbMatrices(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESDraw_Planar self) -> Standard_Integer

        returns the number of Entities in the plane pointed to by this
        associativity

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_NbEntities(self, *args)


    def IsIdentityMatrix(self, *args):
        """
        IsIdentityMatrix(Handle_IGESDraw_Planar self) -> Standard_Boolean

        returns True if TransformationMatrix is Identity Matrix,
        i.e:- No Matrix defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_IsIdentityMatrix(self, *args)


    def TransformMatrix(self, *args):
        """
        TransformMatrix(Handle_IGESDraw_Planar self) -> Handle_IGESGeom_TransformationMatrix

        returns the Transformation matrix moving data from the XY plane
        into space or zero

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix

        """
        return _IGESDraw.Handle_IGESDraw_Planar_TransformMatrix(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESDraw_Planar self, Standard_Integer const EntityIndex) -> Handle_IGESData_IGESEntity

        returns the Entity on the specified plane, indicated by EntityIndex
        raises an exception if EntityIndex <= 0 or
        EntityIndex > NbEntities()

        :type EntityIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Entity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_Planar self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_Planar_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_Planar_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_Planar_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_Planar self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_Planar_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_Planar self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_Planar self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_Planar self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_Planar self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_Planar self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_Planar self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_Planar_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_Planar self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_Planar self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_Planar self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_Planar_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_Planar self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_Planar self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_Planar self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_Planar_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_Planar self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_Planar self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_Planar self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_Planar self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_Planar self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_Planar self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_Planar self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_Planar self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_Planar self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_Planar self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_Planar self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_Planar self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_Planar self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_Planar_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_Planar self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_Planar_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_Planar self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_Planar self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_Planar self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_Planar self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_Planar self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_Planar_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_Planar self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_Planar self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_Planar self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_Planar self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_Planar self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_Planar self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_Planar_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_Planar self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_Planar_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_Planar self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_Planar_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_Planar self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_Planar_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_Planar self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_Planar_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_Planar self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_Planar_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_Planar self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_Planar self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_Planar self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_Planar self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_Planar_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_Planar self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_Planar_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_Planar self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_Planar self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_Planar_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_Planar self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_Planar self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_Planar self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_Planar self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_Planar self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_Planar self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_Planar self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_Planar self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_Planar self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_Planar self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_Planar_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_Planar self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_Planar self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_Planar self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_Planar self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_Planar_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_Planar self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_Planar_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_Planar self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_Planar_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_Planar self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_Planar self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_Planar self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_Planar self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_Planar_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_Planar self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_Planar_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_Planar self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_Planar self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_Planar_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_Planar self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_Planar_DecrementRefCounter(self, *args)

Handle_IGESDraw_Planar_swigregister = _IGESDraw.Handle_IGESDraw_Planar_swigregister
Handle_IGESDraw_Planar_swigregister(Handle_IGESDraw_Planar)

def Handle_IGESDraw_Planar_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_Planar_DownCast(thing)
Handle_IGESDraw_Planar_DownCast = _IGESDraw.Handle_IGESDraw_Planar_DownCast

class IGESDraw_ToolPerspectiveView(object):
    """
    Tool to work on a PerspectiveView. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolPerspectiveView self) -> IGESDraw_ToolPerspectiveView

        Returns a ToolPerspectiveView, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolPerspectiveView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolPerspectiveView self, Handle_IGESDraw_PerspectiveView ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_PerspectiveView
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolPerspectiveView_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolPerspectiveView self, Handle_IGESDraw_PerspectiveView ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_PerspectiveView
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolPerspectiveView_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolPerspectiveView self, Handle_IGESDraw_PerspectiveView ent, Interface_EntityIterator iter)

        Lists the Entities shared by a PerspectiveView <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_PerspectiveView
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolPerspectiveView_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolPerspectiveView self, Handle_IGESDraw_PerspectiveView ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_PerspectiveView
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolPerspectiveView_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolPerspectiveView self, Handle_IGESDraw_PerspectiveView ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_PerspectiveView
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolPerspectiveView_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolPerspectiveView self, Handle_IGESDraw_PerspectiveView entfrom, Handle_IGESDraw_PerspectiveView entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_PerspectiveView
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_PerspectiveView
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolPerspectiveView_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolPerspectiveView self, Handle_IGESDraw_PerspectiveView ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_PerspectiveView
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolPerspectiveView_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolPerspectiveView
IGESDraw_ToolPerspectiveView_swigregister = _IGESDraw.IGESDraw_ToolPerspectiveView_swigregister
IGESDraw_ToolPerspectiveView_swigregister(IGESDraw_ToolPerspectiveView)

class IGESDraw_ToolConnectPoint(object):
    """
    Tool to work on a ConnectPoint. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDraw_ToolConnectPoint self) -> IGESDraw_ToolConnectPoint

        Returns a ToolConnectPoint, ready to work


        """
        this = _IGESDraw.new_IGESDraw_ToolConnectPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDraw_ToolConnectPoint self, Handle_IGESDraw_ConnectPoint ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDraw.IGESDraw_ToolConnectPoint_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDraw_ToolConnectPoint self, Handle_IGESDraw_ConnectPoint ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDraw.IGESDraw_ToolConnectPoint_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDraw_ToolConnectPoint self, Handle_IGESDraw_ConnectPoint ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ConnectPoint <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.IGESDraw_ToolConnectPoint_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDraw_ToolConnectPoint self, Handle_IGESDraw_ConnectPoint ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDraw.IGESDraw_ToolConnectPoint_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDraw_ToolConnectPoint self, Handle_IGESDraw_ConnectPoint ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDraw.IGESDraw_ToolConnectPoint_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDraw_ToolConnectPoint self, Handle_IGESDraw_ConnectPoint entfrom, Handle_IGESDraw_ConnectPoint entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint
        :type entto: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDraw.IGESDraw_ToolConnectPoint_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDraw_ToolConnectPoint self, Handle_IGESDraw_ConnectPoint ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDraw.IGESDraw_ToolConnectPoint_OwnDump(self, *args)

    __swig_destroy__ = _IGESDraw.delete_IGESDraw_ToolConnectPoint
IGESDraw_ToolConnectPoint_swigregister = _IGESDraw.IGESDraw_ToolConnectPoint_swigregister
IGESDraw_ToolConnectPoint_swigregister(IGESDraw_ToolConnectPoint)

class Handle_IGESDraw_ConnectPoint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_ConnectPoint self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_ConnectPoint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_ConnectPoint self, IGESDraw_ConnectPoint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_ConnectPoint self, Handle_IGESDraw_ConnectPoint theHandle) -> Handle_IGESDraw_ConnectPoint
        assign(Handle_IGESDraw_ConnectPoint self, IGESDraw_ConnectPoint thePtr) -> Handle_IGESDraw_ConnectPoint
        assign(Handle_IGESDraw_ConnectPoint self, Handle_IGESDraw_ConnectPoint theHandle) -> Handle_IGESDraw_ConnectPoint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_ConnectPoint self) -> IGESDraw_ConnectPoint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_ConnectPoint self) -> IGESDraw_ConnectPoint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_ConnectPoint self) -> IGESDraw_ConnectPoint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_ConnectPoint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_ConnectPoint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_ConnectPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_ConnectPoint_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_ConnectPoint

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_ConnectPoint self, gp_XYZ aPoint, Handle_IGESData_IGESEntity aDisplaySymbol, Standard_Integer const aTypeFlag, Standard_Integer const aFunctionFlag, Handle_TCollection_HAsciiString aFunctionIdentifier, Handle_IGESGraph_TextDisplayTemplate anIdentifierTemplate, Handle_TCollection_HAsciiString aFunctionName, Handle_IGESGraph_TextDisplayTemplate aFunctionTemplate, Standard_Integer const aPointIdentifier, Standard_Integer const aFunctionCode, Standard_Integer const aSwapFlag, Handle_IGESData_IGESEntity anOwnerSubfigure)

        This method is used to set the fields of the class
        ConnectPoint
        - aPoint               : A Coordinate point
        - aDisplaySymbol       : Display symbol Geometry
        - aTypeFlag            : Type of the connection
        - aFunctionFlag        : Function flag for the connection
        - aFunctionIdentifier  : Connection Point Function Identifier
        - anIdentifierTemplate : Connection Point Function Template
        - aFunctionName        : Connection Point Function Name
        - aFunctionTemplate    : Connection Point Function Template
        - aPointIdentifier     : Unique Connect Point Identifier
        - aFunctionCode        : Connect Point Function Code
        - aSwapFlag            : Connect Point Swap Flag
        - anOwnerSubfigure     : Pointer to the "Owner" Entity

        :type aPoint: OCC.wrapper.gp.gp_XYZ
        :type aDisplaySymbol: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aTypeFlag: int
        :type aFunctionFlag: int
        :type aFunctionIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anIdentifierTemplate: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type aFunctionName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aFunctionTemplate: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type aPointIdentifier: int
        :type aFunctionCode: int
        :type aSwapFlag: int
        :type anOwnerSubfigure: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Init(self, *args)


    def Point(self, *args):
        """
        Point(Handle_IGESDraw_ConnectPoint self) -> gp_Pnt

        returns the coordinate of the connection point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(Handle_IGESDraw_ConnectPoint self) -> gp_Pnt

        returns the Transformed coordinate of the connection point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_TransformedPoint(self, *args)


    def HasDisplaySymbol(self, *args):
        """
        HasDisplaySymbol(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if Display symbol is specified
        else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasDisplaySymbol(self, *args)


    def DisplaySymbol(self, *args):
        """
        DisplaySymbol(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_IGESEntity

        if display symbol specified returns display symbol geometric entity
        else returns NULL Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_DisplaySymbol(self, *args)


    def TypeFlag(self, *args):
        """
        TypeFlag(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        return value specifies a particular type of connection :
        Type Flag = 0   : Not Specified(default)
        1   : Nonspecific logical  point of connection
        2   : Nonspecific physical point of connection
        101 : Logical component pin
        102 : Logical part connector
        103 : Logical offpage connector
        104 : Logical global signal connector
        201 : Physical PWA surface mount pin
        202 : Physical PWA blind pin
        203 : Physical PWA thru-pin
        5001-9999 : Implementor defined.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_TypeFlag(self, *args)


    def FunctionFlag(self, *args):
        """
        FunctionFlag(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        returns Function Code that specifies a particular function for the
        ECO576 connection :
        e.g.,        Function Flag = 0 : Unspecified(default)
        = 1 : Electrical Signal
        = 2 : Fluid flow Signal

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_FunctionFlag(self, *args)


    def FunctionIdentifier(self, *args):
        """
        FunctionIdentifier(Handle_IGESDraw_ConnectPoint self) -> Handle_TCollection_HAsciiString

        return HAsciiString identifying Pin Number or Nozzle Label etc.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_FunctionIdentifier(self, *args)


    def HasIdentifierTemplate(self, *args):
        """
        HasIdentifierTemplate(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if Text Display Template is specified for Identifier
        else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasIdentifierTemplate(self, *args)


    def IdentifierTemplate(self, *args):
        """
        IdentifierTemplate(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESGraph_TextDisplayTemplate

        if Text Display Template for the Function Identifier is defined,
        returns TestDisplayTemplate
        else returns NULL Handle

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_IdentifierTemplate(self, *args)


    def FunctionName(self, *args):
        """
        FunctionName(Handle_IGESDraw_ConnectPoint self) -> Handle_TCollection_HAsciiString

        returns Connection Point Function Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_FunctionName(self, *args)


    def HasFunctionTemplate(self, *args):
        """
        HasFunctionTemplate(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if Text Display Template is specified for Function Name
        else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasFunctionTemplate(self, *args)


    def FunctionTemplate(self, *args):
        """
        FunctionTemplate(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESGraph_TextDisplayTemplate

        if Text Display Template for the Function Name is defined,
        returns TestDisplayTemplate
        else returns NULL Handle

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_FunctionTemplate(self, *args)


    def PointIdentifier(self, *args):
        """
        PointIdentifier(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        returns the Unique Connect Point Identifier

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_PointIdentifier(self, *args)


    def FunctionCode(self, *args):
        """
        FunctionCode(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        returns the Connect Point Function Code

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_FunctionCode(self, *args)


    def SwapFlag(self, *args):
        """
        SwapFlag(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        return value = 0 : Connect point may be swapped(default)
        = 1 : Connect point may not be swapped

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_SwapFlag(self, *args)


    def HasOwnerSubfigure(self, *args):
        """
        HasOwnerSubfigure(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if Network Subfigure Instance/Definition Entity
        is specified
        else returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasOwnerSubfigure(self, *args)


    def OwnerSubfigure(self, *args):
        """
        OwnerSubfigure(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_IGESEntity

        returns "owner" Network Subfigure Instance Entity,
        or Network Subfigure Definition Entity, or NULL Handle.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_OwnerSubfigure(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_ConnectPoint self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_ConnectPoint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_ConnectPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_ConnectPoint self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_ConnectPoint self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_ConnectPoint self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_ConnectPoint self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_ConnectPoint self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_ConnectPoint self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_ConnectPoint self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_ConnectPoint self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_ConnectPoint self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_ConnectPoint self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_ConnectPoint self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_ConnectPoint self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_ConnectPoint self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_ConnectPoint self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_ConnectPoint self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_ConnectPoint self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_ConnectPoint self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_ConnectPoint self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_ConnectPoint self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_ConnectPoint self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_ConnectPoint self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_ConnectPoint self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_ConnectPoint self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_ConnectPoint self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_ConnectPoint self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_ConnectPoint self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_ConnectPoint self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_ConnectPoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_ConnectPoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_ConnectPoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_ConnectPoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_ConnectPoint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_ConnectPoint self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_ConnectPoint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_ConnectPoint_DecrementRefCounter(self, *args)

Handle_IGESDraw_ConnectPoint_swigregister = _IGESDraw.Handle_IGESDraw_ConnectPoint_swigregister
Handle_IGESDraw_ConnectPoint_swigregister(Handle_IGESDraw_ConnectPoint)

def Handle_IGESDraw_ConnectPoint_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_ConnectPoint_DownCast(thing)
Handle_IGESDraw_ConnectPoint_DownCast = _IGESDraw.Handle_IGESDraw_ConnectPoint_DownCast

class Handle_IGESDraw_DrawingWithRotation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDraw_DrawingWithRotation self)

        Nullify the handle


        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDraw_DrawingWithRotation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDraw_DrawingWithRotation self, IGESDraw_DrawingWithRotation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation theHandle) -> Handle_IGESDraw_DrawingWithRotation
        assign(Handle_IGESDraw_DrawingWithRotation self, IGESDraw_DrawingWithRotation thePtr) -> Handle_IGESDraw_DrawingWithRotation
        assign(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESDraw_DrawingWithRotation theHandle) -> Handle_IGESDraw_DrawingWithRotation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDraw_DrawingWithRotation self) -> IGESDraw_DrawingWithRotation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDraw_DrawingWithRotation self) -> IGESDraw_DrawingWithRotation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDraw_DrawingWithRotation self) -> IGESDraw_DrawingWithRotation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation___ref__(self, *args)


    def __hash__(self):
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDraw.Handle_IGESDraw_DrawingWithRotation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDraw.new_Handle_IGESDraw_DrawingWithRotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDraw.Handle_IGESDraw_DrawingWithRotation_DownCast)
    __swig_destroy__ = _IGESDraw.delete_Handle_IGESDraw_DrawingWithRotation

    def Init(self, *args):
        """
        Init(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESDraw_HArray1OfViewKindEntity allViews, Handle_TColgp_HArray1OfXY allViewOrigins, Handle_TColStd_HArray1OfReal allOrientationAngles, Handle_IGESData_HArray1OfIGESEntity allAnnotations)

        This method is used to set the fields of the class
        DrawingWithRotation
        - allViews             : Pointers to View entities
        - allViewOrigins       : Origin coords of transformed views
        - allOrientationAngles : Orientation angles of transformed views
        - allAnnotations       : Pointers to Annotation entities
        raises exception if Lengths of allViews, allViewOrigins and
        allOrientationAngles are not same.

        :type allViews: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfViewKindEntity
        :type allViewOrigins: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY
        :type allOrientationAngles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allAnnotations: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Init(self, *args)


    def NbViews(self, *args):
        """
        NbViews(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        returns the number of view pointers in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_NbViews(self, *args)


    def ViewItem(self, *args):
        """
        ViewItem(Handle_IGESDraw_DrawingWithRotation self, Standard_Integer const Index) -> Handle_IGESData_ViewKindEntity

        returns the View entity indicated by Index
        raises an exception if Index <= 0 or Index > NbViews().

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_ViewItem(self, *args)


    def ViewOrigin(self, *args):
        """
        ViewOrigin(Handle_IGESDraw_DrawingWithRotation self, Standard_Integer const Index) -> gp_Pnt2d

        returns the Drawing space coordinates of the origin of the
        Transformed view indicated by Index
        raises an exception if Index <= 0 or Index > NbViews().

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_ViewOrigin(self, *args)


    def OrientationAngle(self, *args):
        """
        OrientationAngle(Handle_IGESDraw_DrawingWithRotation self, Standard_Integer const Index) -> Standard_Real

        returns the Orientation angle for the Transformed view
        indicated by Index
        raises an exception if Index <= 0 or Index > NbViews().

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_OrientationAngle(self, *args)


    def NbAnnotations(self, *args):
        """
        NbAnnotations(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        returns the number of Annotation entities in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_NbAnnotations(self, *args)


    def Annotation(self, *args):
        """
        Annotation(Handle_IGESDraw_DrawingWithRotation self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Annotation entity in this Drawing, indicated by Index
        raises an exception if Index <= 0 or Index > NbAnnotations().

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Annotation(self, *args)


    def ViewToDrawing(self, *args):
        """
        ViewToDrawing(Handle_IGESDraw_DrawingWithRotation self, Standard_Integer const NumView, gp_XYZ ViewCoords) -> gp_XY

        :type NumView: int
        :type ViewCoords: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.gp.gp_XY

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_ViewToDrawing(self, *args)


    def DrawingUnit(self, *args):
        """
        DrawingUnit(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns the Drawing Unit Value if it is specified (by a
        specific property entity)
        If not specified, returns False, and val as zero :
        unit to consider is then the model unit in GlobalSection

        :type value: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DrawingUnit(self, *args)


    def DrawingSize(self, *args):
        """
        DrawingSize(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns the Drawing Size if it is specified (by a
        specific property entity)
        If not specified, returns False, and X,Y as zero :
        unit to consider is then the model unit in GlobalSection

        :type X: float
        :type Y: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DrawingSize(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDraw_DrawingWithRotation self) -> char const *

        :rtype: const char *

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_DrawingWithRotation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDraw_DrawingWithRotation self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDraw_DrawingWithRotation self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDraw_DrawingWithRotation self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDraw_DrawingWithRotation self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDraw_DrawingWithRotation self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDraw_DrawingWithRotation self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDraw_DrawingWithRotation self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDraw_DrawingWithRotation self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDraw_DrawingWithRotation self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDraw_DrawingWithRotation self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDraw_DrawingWithRotation self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDraw_DrawingWithRotation self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDraw_DrawingWithRotation self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDraw_DrawingWithRotation self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDraw_DrawingWithRotation self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDraw_DrawingWithRotation self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDraw_DrawingWithRotation self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDraw_DrawingWithRotation self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDraw_DrawingWithRotation self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDraw_DrawingWithRotation self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDraw_DrawingWithRotation self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDraw_DrawingWithRotation self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDraw_DrawingWithRotation self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDraw_DrawingWithRotation self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDraw_DrawingWithRotation self)

        Memory deallocator for transient classes


        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDraw_DrawingWithRotation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDraw_DrawingWithRotation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDraw_DrawingWithRotation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDraw_DrawingWithRotation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDraw_DrawingWithRotation self)

        Increments the reference counter of this object


        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDraw_DrawingWithRotation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DecrementRefCounter(self, *args)

Handle_IGESDraw_DrawingWithRotation_swigregister = _IGESDraw.Handle_IGESDraw_DrawingWithRotation_swigregister
Handle_IGESDraw_DrawingWithRotation_swigregister(Handle_IGESDraw_DrawingWithRotation)

def Handle_IGESDraw_DrawingWithRotation_DownCast(thing):
    return _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DownCast(thing)
Handle_IGESDraw_DrawingWithRotation_DownCast = _IGESDraw.Handle_IGESDraw_DrawingWithRotation_DownCast



