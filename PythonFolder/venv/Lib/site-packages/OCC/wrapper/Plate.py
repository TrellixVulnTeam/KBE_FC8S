# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Plate')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Plate')
    _Plate = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Plate', [dirname(__file__)])
        except ImportError:
            import _Plate
            return _Plate
        try:
            _mod = imp.load_module('_Plate', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Plate = swig_import_helper()
    del swig_import_helper
else:
    import _Plate
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Plate.delete_SwigPyIterator

    def value(self):
        return _Plate.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Plate.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Plate.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Plate.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Plate.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Plate.SwigPyIterator_copy(self)

    def next(self):
        return _Plate.SwigPyIterator_next(self)

    def __next__(self):
        return _Plate.SwigPyIterator___next__(self)

    def previous(self):
        return _Plate.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Plate.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Plate.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Plate.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Plate.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Plate.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Plate.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Plate.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Plate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Plate.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Plate.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Plate.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Plate.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plate.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Plate.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Plate.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Plate.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Plate.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Plate.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Plate.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Plate.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plate.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Plate.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Plate.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Plate.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Plate.ptr_to_number(item)
ptr_to_number = _Plate.ptr_to_number

def HashCode(*args):
    return _Plate.HashCode(*args)
HashCode = _Plate.HashCode

def ptr_equal(a, b):
    return _Plate.ptr_equal(a, b)
ptr_equal = _Plate.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class Plate_HArray1OfPinpointConstraint(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Plate_HArray1OfPinpointConstraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Plate_HArray1OfPinpointConstraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Plate_HArray1OfPinpointConstraint self, Standard_Integer const theLower, Standard_Integer const theUpper) -> Plate_HArray1OfPinpointConstraint
        __init__(Plate_HArray1OfPinpointConstraint self, Standard_Integer const theLower, Standard_Integer const theUpper, Plate_PinpointConstraint theValue) -> Plate_HArray1OfPinpointConstraint
        __init__(Plate_HArray1OfPinpointConstraint self, NCollection_Array1_Plate_PinpointConstraint theOther) -> Plate_HArray1OfPinpointConstraint

        :type theOther: OCC.wrapper.Plate.Plate_Array1OfPinpointConstraint

        """
        this = _Plate.new_Plate_HArray1OfPinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_Array1OfPinpointConstraint

        """
        res = _Plate.Plate_HArray1OfPinpointConstraint_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Plate_HArray1OfPinpointConstraint self) -> NCollection_Array1_Plate_PinpointConstraint

        :rtype: OCC.wrapper.Plate.Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Plate.Plate_HArray1OfPinpointConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_HArray1OfPinpointConstraint
Plate_HArray1OfPinpointConstraint_swigregister = _Plate.Plate_HArray1OfPinpointConstraint_swigregister
Plate_HArray1OfPinpointConstraint_swigregister(Plate_HArray1OfPinpointConstraint)

def Plate_HArray1OfPinpointConstraint_get_type_name(*args):
    """
    Plate_HArray1OfPinpointConstraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Plate.Plate_HArray1OfPinpointConstraint_get_type_name(*args)

def Plate_HArray1OfPinpointConstraint_get_type_descriptor(*args):
    """
    Plate_HArray1OfPinpointConstraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Plate.Plate_HArray1OfPinpointConstraint_get_type_descriptor(*args)

class Plate_LinearScalarConstraint(object):
    """
    define on or several constraints  as linear combination of
    the X,Y and Z components of a set of PinPointConstraint
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_LinearScalarConstraint self) -> Plate_LinearScalarConstraint
        __init__(Plate_LinearScalarConstraint self, Plate_PinpointConstraint thePPC1, gp_XYZ theCoeff) -> Plate_LinearScalarConstraint
        __init__(Plate_LinearScalarConstraint self, NCollection_Array1_Plate_PinpointConstraint thePPC, NCollection_Array1_gp_XYZ theCoeff) -> Plate_LinearScalarConstraint
        __init__(Plate_LinearScalarConstraint self, NCollection_Array1_Plate_PinpointConstraint thePPC, NCollection_Array2_gp_XYZ theCoeff) -> Plate_LinearScalarConstraint
        __init__(Plate_LinearScalarConstraint self, Standard_Integer const ColLen, Standard_Integer const RowLen) -> Plate_LinearScalarConstraint

        :type ColLen: int
        :type RowLen: int

        """
        this = _Plate.new_Plate_LinearScalarConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetPPC(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_Array1OfPinpointConstraint

        """
        res = _Plate.Plate_LinearScalarConstraint_GetPPC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Coeff(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXYZ

        """
        res = _Plate.Plate_LinearScalarConstraint_Coeff(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPPC(self, *args):
        """
        SetPPC(Plate_LinearScalarConstraint self, Standard_Integer const Index, Plate_PinpointConstraint Value)

        Sets   the PinPointConstraint of   index Index to
        Value raise if Index is greater than the length of
        PPC or the Row length of coeff or lower  than 1

        :type Index: int
        :type Value: OCC.wrapper.Plate.Plate_PinpointConstraint

        """
        return _Plate.Plate_LinearScalarConstraint_SetPPC(self, *args)


    def SetCoeff(self, *args):
        """
        SetCoeff(Plate_LinearScalarConstraint self, Standard_Integer const Row, Standard_Integer const Col, gp_XYZ Value)

        Sets the coeff  of index (Row,Col)  to Value
        raise if  Row (respectively Col)  is greater than the
        Row (respectively Column) length of coeff

        :type Row: int
        :type Col: int
        :type Value: OCC.wrapper.gp.gp_XYZ

        """
        return _Plate.Plate_LinearScalarConstraint_SetCoeff(self, *args)

    __swig_destroy__ = _Plate.delete_Plate_LinearScalarConstraint
Plate_LinearScalarConstraint_swigregister = _Plate.Plate_LinearScalarConstraint_swigregister
Plate_LinearScalarConstraint_swigregister(Plate_LinearScalarConstraint)

class Plate_PinpointConstraint(object):
    """define a constraint on the Plate"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_PinpointConstraint self) -> Plate_PinpointConstraint
        __init__(Plate_PinpointConstraint self, gp_XY point2d, gp_XYZ ImposedValue, Standard_Integer const iu=0, Standard_Integer const iv=0) -> Plate_PinpointConstraint

        :type point2d: OCC.wrapper.gp.gp_XY
        :type ImposedValue: OCC.wrapper.gp.gp_XYZ
        :type iu: int
        :type iv: int

        """
        this = _Plate.new_Plate_PinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Pnt2d(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _Plate.Plate_PinpointConstraint_Pnt2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Idu(self, *args):
        """
        Idu(Plate_PinpointConstraint self) -> Standard_Integer const &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.Plate_PinpointConstraint_Idu(self, *args)


    def Idv(self, *args):
        """
        Idv(Plate_PinpointConstraint self) -> Standard_Integer const &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.Plate_PinpointConstraint_Idv(self, *args)


    def Value(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _Plate.Plate_PinpointConstraint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_PinpointConstraint
Plate_PinpointConstraint_swigregister = _Plate.Plate_PinpointConstraint_swigregister
Plate_PinpointConstraint_swigregister(Plate_PinpointConstraint)

class Handle_Plate_HArray1OfPinpointConstraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Plate_HArray1OfPinpointConstraint self)

        Nullify the handle


        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Plate_HArray1OfPinpointConstraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Plate_HArray1OfPinpointConstraint self, Plate_HArray1OfPinpointConstraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Plate_HArray1OfPinpointConstraint self, Handle_Plate_HArray1OfPinpointConstraint theHandle) -> Handle_Plate_HArray1OfPinpointConstraint
        assign(Handle_Plate_HArray1OfPinpointConstraint self, Plate_HArray1OfPinpointConstraint thePtr) -> Handle_Plate_HArray1OfPinpointConstraint
        assign(Handle_Plate_HArray1OfPinpointConstraint self, Handle_Plate_HArray1OfPinpointConstraint theHandle) -> Handle_Plate_HArray1OfPinpointConstraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Plate_HArray1OfPinpointConstraint self) -> Plate_HArray1OfPinpointConstraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Plate_HArray1OfPinpointConstraint self) -> Plate_HArray1OfPinpointConstraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Plate_HArray1OfPinpointConstraint self) -> Plate_HArray1OfPinpointConstraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint___ref__(self, *args)


    def __hash__(self):
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Plate.Handle_Plate_HArray1OfPinpointConstraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Plate.new_Handle_Plate_HArray1OfPinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast)
    __swig_destroy__ = _Plate.delete_Handle_Plate_HArray1OfPinpointConstraint

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_Array1OfPinpointConstraint

        """
        res = _Plate.Handle_Plate_HArray1OfPinpointConstraint_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_Plate_HArray1OfPinpointConstraint self) -> NCollection_Array1_Plate_PinpointConstraint

        :rtype: OCC.wrapper.Plate.Plate_Array1OfPinpointConstraint

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Plate_HArray1OfPinpointConstraint self) -> char const *

        :rtype: const char *

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Plate.Handle_Plate_HArray1OfPinpointConstraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Plate.Handle_Plate_HArray1OfPinpointConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Plate_HArray1OfPinpointConstraint self)

        Memory deallocator for transient classes


        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Plate_HArray1OfPinpointConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Plate_HArray1OfPinpointConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Plate_HArray1OfPinpointConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Plate_HArray1OfPinpointConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Plate_HArray1OfPinpointConstraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Plate_HArray1OfPinpointConstraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Plate_HArray1OfPinpointConstraint self)

        Increments the reference counter of this object


        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Plate_HArray1OfPinpointConstraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.Handle_Plate_HArray1OfPinpointConstraint_DecrementRefCounter(self, *args)

Handle_Plate_HArray1OfPinpointConstraint_swigregister = _Plate.Handle_Plate_HArray1OfPinpointConstraint_swigregister
Handle_Plate_HArray1OfPinpointConstraint_swigregister(Handle_Plate_HArray1OfPinpointConstraint)

def Handle_Plate_HArray1OfPinpointConstraint_DownCast(thing):
    return _Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast(thing)
Handle_Plate_HArray1OfPinpointConstraint_DownCast = _Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast

class Plate_LineConstraint(object):
    """constraint a point to belong to a straight line"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_LineConstraint self, gp_XY point2d, gp_Lin lin, Standard_Integer const iu=0, Standard_Integer const iv=0) -> Plate_LineConstraint

        :type point2d: OCC.wrapper.gp.gp_XY
        :type lin: OCC.wrapper.gp.gp_Lin
        :type iu: int
        :type iv: int

        """
        this = _Plate.new_Plate_LineConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LSC(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_LinearScalarConstraint

        """
        res = _Plate.Plate_LineConstraint_LSC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_LineConstraint
Plate_LineConstraint_swigregister = _Plate.Plate_LineConstraint_swigregister
Plate_LineConstraint_swigregister(Plate_LineConstraint)

class Plate_D2(object):
    """
    define an order 2 derivatives of a 3d valued
    function of a 2d variable
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_D2 self, gp_XYZ duu, gp_XYZ duv, gp_XYZ dvv) -> Plate_D2
        __init__(Plate_D2 self, Plate_D2 ref) -> Plate_D2

        :type ref: OCC.wrapper.Plate.Plate_D2

        """
        this = _Plate.new_Plate_D2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plate.delete_Plate_D2
Plate_D2_swigregister = _Plate.Plate_D2_swigregister
Plate_D2_swigregister(Plate_D2)

class Plate_FreeGtoCConstraint(object):
    """
    define a G1, G2 or G3 constraint on the Plate using weaker
    constraint than GtoCConstraint
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_FreeGtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T, Standard_Real const IncrementalLoad=1.0, Standard_Integer const orientation=0) -> Plate_FreeGtoCConstraint
        __init__(Plate_FreeGtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T, Plate_D2 D2S, Plate_D2 D2T, Standard_Real const IncrementalLoad=1.0, Standard_Integer const orientation=0) -> Plate_FreeGtoCConstraint
        __init__(Plate_FreeGtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T, Plate_D2 D2S, Plate_D2 D2T, Plate_D3 D3S, Plate_D3 D3T, Standard_Real const IncrementalLoad=1.0, Standard_Integer const orientation=0) -> Plate_FreeGtoCConstraint

        :type point2d: OCC.wrapper.gp.gp_XY
        :type D1S: OCC.wrapper.Plate.Plate_D1
        :type D1T: OCC.wrapper.Plate.Plate_D1
        :type D2S: OCC.wrapper.Plate.Plate_D2
        :type D2T: OCC.wrapper.Plate.Plate_D2
        :type D3S: OCC.wrapper.Plate.Plate_D3
        :type D3T: OCC.wrapper.Plate.Plate_D3
        :type IncrementalLoad: float
        :type orientation: int

        """
        this = _Plate.new_Plate_FreeGtoCConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nb_PPC(self, *args):
        """
        nb_PPC(Plate_FreeGtoCConstraint self) -> Standard_Integer const &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.Plate_FreeGtoCConstraint_nb_PPC(self, *args)


    def GetPPC(self, *args):
        """
        :type Index: int
        :rtype: OCC.wrapper.Plate.Plate_PinpointConstraint

        """
        res = _Plate.Plate_FreeGtoCConstraint_GetPPC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def nb_LSC(self, *args):
        """
        nb_LSC(Plate_FreeGtoCConstraint self) -> Standard_Integer const &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.Plate_FreeGtoCConstraint_nb_LSC(self, *args)


    def LSC(self, *args):
        """
        :type Index: int
        :rtype: OCC.wrapper.Plate.Plate_LinearScalarConstraint

        """
        res = _Plate.Plate_FreeGtoCConstraint_LSC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_FreeGtoCConstraint
Plate_FreeGtoCConstraint_swigregister = _Plate.Plate_FreeGtoCConstraint_swigregister
Plate_FreeGtoCConstraint_swigregister(Plate_FreeGtoCConstraint)

class NCollection_Sequence_Plate_LinearScalarConstraint(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Plate_LinearScalarConstraint self) -> NCollection_Sequence< Plate_LinearScalarConstraint >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Plate_LinearScalarConstraint self) -> NCollection_Sequence< Plate_LinearScalarConstraint >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Plate_LinearScalarConstraint self) -> NCollection_Sequence< Plate_LinearScalarConstraint >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Plate_LinearScalarConstraint self) -> NCollection_Sequence< Plate_LinearScalarConstraint >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Plate.new_NCollection_Sequence_Plate_LinearScalarConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Plate_LinearScalarConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Plate_LinearScalarConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Plate_LinearScalarConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Plate_LinearScalarConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Plate_LinearScalarConstraint self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Plate_LinearScalarConstraint self)

        Reverse sequence


        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Plate_LinearScalarConstraint self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Plate_LinearScalarConstraint self, NCollection_Sequence_Plate_LinearScalarConstraint theOther) -> NCollection_Sequence_Plate_LinearScalarConstraint

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Plate_LinearScalarConstraint self, NCollection_Sequence_Plate_LinearScalarConstraint theOther) -> NCollection_Sequence_Plate_LinearScalarConstraint

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Plate_LinearScalarConstraint self, NCollection_Sequence< Plate_LinearScalarConstraint >::Iterator & thePosition)
        Remove(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Plate_LinearScalarConstraint self, Plate_LinearScalarConstraint theItem)
        Append(NCollection_Sequence_Plate_LinearScalarConstraint self, NCollection_Sequence_Plate_LinearScalarConstraint theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Plate_LinearScalarConstraint self, Plate_LinearScalarConstraint theItem)
        Prepend(NCollection_Sequence_Plate_LinearScalarConstraint self, NCollection_Sequence_Plate_LinearScalarConstraint theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theIndex, Plate_LinearScalarConstraint theItem)
        InsertBefore(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_LinearScalarConstraint theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Plate_LinearScalarConstraint self, NCollection_Sequence< Plate_LinearScalarConstraint >::Iterator & thePosition, Plate_LinearScalarConstraint theItem)
        InsertAfter(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_LinearScalarConstraint theSeq)
        InsertAfter(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theIndex, Plate_LinearScalarConstraint theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_LinearScalarConstraint theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Plate_LinearScalarConstraint self) -> Plate_LinearScalarConstraint

        First item access

        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Plate_LinearScalarConstraint self) -> Plate_LinearScalarConstraint

        Last item access

        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theIndex) -> Plate_LinearScalarConstraint

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_LinearScalarConstraint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Plate_LinearScalarConstraint self, Standard_Integer const theIndex, Plate_LinearScalarConstraint theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_SetValue(self, *args)


    def __iter__(self):
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint___iter__(self)
    __swig_destroy__ = _Plate.delete_NCollection_Sequence_Plate_LinearScalarConstraint
NCollection_Sequence_Plate_LinearScalarConstraint_swigregister = _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_swigregister
NCollection_Sequence_Plate_LinearScalarConstraint_swigregister(NCollection_Sequence_Plate_LinearScalarConstraint)

def NCollection_Sequence_Plate_LinearScalarConstraint_delNode(*args):
    """
    NCollection_Sequence_Plate_LinearScalarConstraint_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_delNode(*args)

class NCollection_Sequence_Plate_LinearScalarConstraint_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Plate.new_NCollection_Sequence_Plate_LinearScalarConstraint_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plate.delete_NCollection_Sequence_Plate_LinearScalarConstraint_IteratorHelper

    def __next__(self):
        return _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_IteratorHelper___next__(self)
NCollection_Sequence_Plate_LinearScalarConstraint_IteratorHelper_swigregister = _Plate.NCollection_Sequence_Plate_LinearScalarConstraint_IteratorHelper_swigregister
NCollection_Sequence_Plate_LinearScalarConstraint_IteratorHelper_swigregister(NCollection_Sequence_Plate_LinearScalarConstraint_IteratorHelper)


try:
	Plate_SequenceOfLinearScalarConstraint = NCollection_Sequence_Plate_LinearScalarConstraint
except NameError:
	pass # does not exist, probably ignored

class Plate_LinearXYZConstraint(object):
    """
    define on or several constraints as linear combination of
    PinPointConstraint unlike the LinearScalarConstraint, usage
    of this kind of constraint preserve the X,Y and Z uncoupling.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_LinearXYZConstraint self) -> Plate_LinearXYZConstraint
        __init__(Plate_LinearXYZConstraint self, NCollection_Array1_Plate_PinpointConstraint thePPC, NCollection_Array1_Standard_Real theCoeff) -> Plate_LinearXYZConstraint
        __init__(Plate_LinearXYZConstraint self, NCollection_Array1_Plate_PinpointConstraint thePPC, NCollection_Array2_Standard_Real theCoeff) -> Plate_LinearXYZConstraint
        __init__(Plate_LinearXYZConstraint self, Standard_Integer const ColLen, Standard_Integer const RowLen) -> Plate_LinearXYZConstraint

        :type ColLen: int
        :type RowLen: int

        """
        this = _Plate.new_Plate_LinearXYZConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetPPC(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_Array1OfPinpointConstraint

        """
        res = _Plate.Plate_LinearXYZConstraint_GetPPC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Coeff(self, *args):
        """
        :rtype: OCC.wrapper.TColStd.TColStd_Array2OfReal

        """
        res = _Plate.Plate_LinearXYZConstraint_Coeff(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPPC(self, *args):
        """
        SetPPC(Plate_LinearXYZConstraint self, Standard_Integer const Index, Plate_PinpointConstraint Value)

        Sets   the PinPointConstraint of   index Index to
        Value raise if Index is greater than the length of
        PPC or the Row length of coeff or lower  than 1

        :type Index: int
        :type Value: OCC.wrapper.Plate.Plate_PinpointConstraint

        """
        return _Plate.Plate_LinearXYZConstraint_SetPPC(self, *args)


    def SetCoeff(self, *args):
        """
        SetCoeff(Plate_LinearXYZConstraint self, Standard_Integer const Row, Standard_Integer const Col, Standard_Real const Value)

        Sets the coeff  of index (Row,Col)  to Value
        raise if  Row (respectively Col)  is greater than the
        Row (respectively Column) length of coeff

        :type Row: int
        :type Col: int
        :type Value: float

        """
        return _Plate.Plate_LinearXYZConstraint_SetCoeff(self, *args)

    __swig_destroy__ = _Plate.delete_Plate_LinearXYZConstraint
Plate_LinearXYZConstraint_swigregister = _Plate.Plate_LinearXYZConstraint_swigregister
Plate_LinearXYZConstraint_swigregister(Plate_LinearXYZConstraint)

class NCollection_Sequence_Plate_LinearXYZConstraint(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Plate_LinearXYZConstraint self) -> NCollection_Sequence< Plate_LinearXYZConstraint >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Plate_LinearXYZConstraint self) -> NCollection_Sequence< Plate_LinearXYZConstraint >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Plate_LinearXYZConstraint self) -> NCollection_Sequence< Plate_LinearXYZConstraint >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Plate_LinearXYZConstraint self) -> NCollection_Sequence< Plate_LinearXYZConstraint >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Plate.new_NCollection_Sequence_Plate_LinearXYZConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Plate_LinearXYZConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Plate_LinearXYZConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Plate_LinearXYZConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Plate_LinearXYZConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Plate_LinearXYZConstraint self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Plate_LinearXYZConstraint self)

        Reverse sequence


        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Plate_LinearXYZConstraint self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Plate_LinearXYZConstraint self, NCollection_Sequence_Plate_LinearXYZConstraint theOther) -> NCollection_Sequence_Plate_LinearXYZConstraint

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Plate_LinearXYZConstraint self, NCollection_Sequence_Plate_LinearXYZConstraint theOther) -> NCollection_Sequence_Plate_LinearXYZConstraint

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Plate_LinearXYZConstraint self, NCollection_Sequence< Plate_LinearXYZConstraint >::Iterator & thePosition)
        Remove(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Plate_LinearXYZConstraint self, Plate_LinearXYZConstraint theItem)
        Append(NCollection_Sequence_Plate_LinearXYZConstraint self, NCollection_Sequence_Plate_LinearXYZConstraint theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Plate_LinearXYZConstraint self, Plate_LinearXYZConstraint theItem)
        Prepend(NCollection_Sequence_Plate_LinearXYZConstraint self, NCollection_Sequence_Plate_LinearXYZConstraint theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theIndex, Plate_LinearXYZConstraint theItem)
        InsertBefore(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_LinearXYZConstraint theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Plate_LinearXYZConstraint self, NCollection_Sequence< Plate_LinearXYZConstraint >::Iterator & thePosition, Plate_LinearXYZConstraint theItem)
        InsertAfter(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_LinearXYZConstraint theSeq)
        InsertAfter(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theIndex, Plate_LinearXYZConstraint theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_LinearXYZConstraint theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Plate_LinearXYZConstraint self) -> Plate_LinearXYZConstraint

        First item access

        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Plate_LinearXYZConstraint self) -> Plate_LinearXYZConstraint

        Last item access

        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theIndex) -> Plate_LinearXYZConstraint

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_LinearXYZConstraint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Plate_LinearXYZConstraint self, Standard_Integer const theIndex, Plate_LinearXYZConstraint theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_SetValue(self, *args)


    def __iter__(self):
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint___iter__(self)
    __swig_destroy__ = _Plate.delete_NCollection_Sequence_Plate_LinearXYZConstraint
NCollection_Sequence_Plate_LinearXYZConstraint_swigregister = _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_swigregister
NCollection_Sequence_Plate_LinearXYZConstraint_swigregister(NCollection_Sequence_Plate_LinearXYZConstraint)

def NCollection_Sequence_Plate_LinearXYZConstraint_delNode(*args):
    """
    NCollection_Sequence_Plate_LinearXYZConstraint_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_delNode(*args)

class NCollection_Sequence_Plate_LinearXYZConstraint_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Plate.new_NCollection_Sequence_Plate_LinearXYZConstraint_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plate.delete_NCollection_Sequence_Plate_LinearXYZConstraint_IteratorHelper

    def __next__(self):
        return _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_IteratorHelper___next__(self)
NCollection_Sequence_Plate_LinearXYZConstraint_IteratorHelper_swigregister = _Plate.NCollection_Sequence_Plate_LinearXYZConstraint_IteratorHelper_swigregister
NCollection_Sequence_Plate_LinearXYZConstraint_IteratorHelper_swigregister(NCollection_Sequence_Plate_LinearXYZConstraint_IteratorHelper)


try:
	Plate_SequenceOfLinearXYZConstraint = NCollection_Sequence_Plate_LinearXYZConstraint
except NameError:
	pass # does not exist, probably ignored

class Plate_GtoCConstraint(object):
    """define a G1, G2  or G3 constraint on the Plate"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_GtoCConstraint self, Plate_GtoCConstraint ref) -> Plate_GtoCConstraint
        __init__(Plate_GtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T) -> Plate_GtoCConstraint
        __init__(Plate_GtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T, gp_XYZ nP) -> Plate_GtoCConstraint
        __init__(Plate_GtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T, Plate_D2 D2S, Plate_D2 D2T) -> Plate_GtoCConstraint
        __init__(Plate_GtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T, Plate_D2 D2S, Plate_D2 D2T, gp_XYZ nP) -> Plate_GtoCConstraint
        __init__(Plate_GtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T, Plate_D2 D2S, Plate_D2 D2T, Plate_D3 D3S, Plate_D3 D3T) -> Plate_GtoCConstraint
        __init__(Plate_GtoCConstraint self, gp_XY point2d, Plate_D1 D1S, Plate_D1 D1T, Plate_D2 D2S, Plate_D2 D2T, Plate_D3 D3S, Plate_D3 D3T, gp_XYZ nP) -> Plate_GtoCConstraint

        :type point2d: OCC.wrapper.gp.gp_XY
        :type D1S: OCC.wrapper.Plate.Plate_D1
        :type D1T: OCC.wrapper.Plate.Plate_D1
        :type D2S: OCC.wrapper.Plate.Plate_D2
        :type D2T: OCC.wrapper.Plate.Plate_D2
        :type D3S: OCC.wrapper.Plate.Plate_D3
        :type D3T: OCC.wrapper.Plate.Plate_D3
        :type nP: OCC.wrapper.gp.gp_XYZ

        """
        this = _Plate.new_Plate_GtoCConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nb_PPC(self, *args):
        """
        nb_PPC(Plate_GtoCConstraint self) -> Standard_Integer const &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.Plate_GtoCConstraint_nb_PPC(self, *args)


    def GetPPC(self, *args):
        """
        :type Index: int
        :rtype: OCC.wrapper.Plate.Plate_PinpointConstraint

        """
        res = _Plate.Plate_GtoCConstraint_GetPPC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def D1SurfInit(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _Plate.Plate_GtoCConstraint_D1SurfInit(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_GtoCConstraint
Plate_GtoCConstraint_swigregister = _Plate.Plate_GtoCConstraint_swigregister
Plate_GtoCConstraint_swigregister(Plate_GtoCConstraint)

class Plate_SampledCurveConstraint(object):
    """define m PinPointConstraint driven by m unknown"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_SampledCurveConstraint self, NCollection_Sequence_Plate_PinpointConstraint SOPPC, Standard_Integer const n) -> Plate_SampledCurveConstraint

        :type SOPPC: OCC.wrapper.Plate.Plate_SequenceOfPinpointConstraint
        :type n: int

        """
        this = _Plate.new_Plate_SampledCurveConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LXYZC(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_LinearXYZConstraint

        """
        res = _Plate.Plate_SampledCurveConstraint_LXYZC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_SampledCurveConstraint
Plate_SampledCurveConstraint_swigregister = _Plate.Plate_SampledCurveConstraint_swigregister
Plate_SampledCurveConstraint_swigregister(Plate_SampledCurveConstraint)

class NCollection_Sequence_Plate_PinpointConstraint(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Plate_PinpointConstraint self) -> NCollection_Sequence< Plate_PinpointConstraint >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Plate_PinpointConstraint self) -> NCollection_Sequence< Plate_PinpointConstraint >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Plate_PinpointConstraint self) -> NCollection_Sequence< Plate_PinpointConstraint >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Plate_PinpointConstraint self) -> NCollection_Sequence< Plate_PinpointConstraint >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Plate.new_NCollection_Sequence_Plate_PinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Plate_PinpointConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Plate_PinpointConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Plate_PinpointConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Plate_PinpointConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Plate_PinpointConstraint self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Plate_PinpointConstraint self)

        Reverse sequence


        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Plate_PinpointConstraint self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Plate_PinpointConstraint self, NCollection_Sequence_Plate_PinpointConstraint theOther) -> NCollection_Sequence_Plate_PinpointConstraint

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Plate_PinpointConstraint self, NCollection_Sequence_Plate_PinpointConstraint theOther) -> NCollection_Sequence_Plate_PinpointConstraint

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Plate_PinpointConstraint self, NCollection_Sequence< Plate_PinpointConstraint >::Iterator & thePosition)
        Remove(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Plate_PinpointConstraint self, Plate_PinpointConstraint theItem)
        Append(NCollection_Sequence_Plate_PinpointConstraint self, NCollection_Sequence_Plate_PinpointConstraint theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Plate_PinpointConstraint self, Plate_PinpointConstraint theItem)
        Prepend(NCollection_Sequence_Plate_PinpointConstraint self, NCollection_Sequence_Plate_PinpointConstraint theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theIndex, Plate_PinpointConstraint theItem)
        InsertBefore(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_PinpointConstraint theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Plate_PinpointConstraint self, NCollection_Sequence< Plate_PinpointConstraint >::Iterator & thePosition, Plate_PinpointConstraint theItem)
        InsertAfter(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_PinpointConstraint theSeq)
        InsertAfter(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theIndex, Plate_PinpointConstraint theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Plate_PinpointConstraint theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_PinpointConstraint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Plate_PinpointConstraint self) -> Plate_PinpointConstraint

        First item access

        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_PinpointConstraint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Plate_PinpointConstraint self) -> Plate_PinpointConstraint

        Last item access

        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_PinpointConstraint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theIndex) -> Plate_PinpointConstraint

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Sequence_Plate_PinpointConstraint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Plate_PinpointConstraint self, Standard_Integer const theIndex, Plate_PinpointConstraint theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_SetValue(self, *args)


    def __iter__(self):
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint___iter__(self)
    __swig_destroy__ = _Plate.delete_NCollection_Sequence_Plate_PinpointConstraint
NCollection_Sequence_Plate_PinpointConstraint_swigregister = _Plate.NCollection_Sequence_Plate_PinpointConstraint_swigregister
NCollection_Sequence_Plate_PinpointConstraint_swigregister(NCollection_Sequence_Plate_PinpointConstraint)

def NCollection_Sequence_Plate_PinpointConstraint_delNode(*args):
    """
    NCollection_Sequence_Plate_PinpointConstraint_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Plate.NCollection_Sequence_Plate_PinpointConstraint_delNode(*args)

class NCollection_Sequence_Plate_PinpointConstraint_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Plate.new_NCollection_Sequence_Plate_PinpointConstraint_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plate.delete_NCollection_Sequence_Plate_PinpointConstraint_IteratorHelper

    def __next__(self):
        return _Plate.NCollection_Sequence_Plate_PinpointConstraint_IteratorHelper___next__(self)
NCollection_Sequence_Plate_PinpointConstraint_IteratorHelper_swigregister = _Plate.NCollection_Sequence_Plate_PinpointConstraint_IteratorHelper_swigregister
NCollection_Sequence_Plate_PinpointConstraint_IteratorHelper_swigregister(NCollection_Sequence_Plate_PinpointConstraint_IteratorHelper)


try:
	Plate_SequenceOfPinpointConstraint = NCollection_Sequence_Plate_PinpointConstraint
except NameError:
	pass # does not exist, probably ignored

class Plate_GlobalTranslationConstraint(object):
    """force a set of UV points to translate without deformation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_GlobalTranslationConstraint self, NCollection_Sequence_gp_XY SOfXY) -> Plate_GlobalTranslationConstraint

        :type SOfXY: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        this = _Plate.new_Plate_GlobalTranslationConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LXYZC(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_LinearXYZConstraint

        """
        res = _Plate.Plate_GlobalTranslationConstraint_LXYZC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_GlobalTranslationConstraint
Plate_GlobalTranslationConstraint_swigregister = _Plate.Plate_GlobalTranslationConstraint_swigregister
Plate_GlobalTranslationConstraint_swigregister(Plate_GlobalTranslationConstraint)

class Plate_D3(object):
    """
    define an order 3 derivatives of a 3d valued
    function of a 2d variable
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_D3 self, gp_XYZ duuu, gp_XYZ duuv, gp_XYZ duvv, gp_XYZ dvvv) -> Plate_D3
        __init__(Plate_D3 self, Plate_D3 ref) -> Plate_D3

        :type ref: OCC.wrapper.Plate.Plate_D3

        """
        this = _Plate.new_Plate_D3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plate.delete_Plate_D3
Plate_D3_swigregister = _Plate.Plate_D3_swigregister
Plate_D3_swigregister(Plate_D3)

class Plate_PlaneConstraint(object):
    """constraint a point to belong to a Plane"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_PlaneConstraint self, gp_XY point2d, gp_Pln pln, Standard_Integer const iu=0, Standard_Integer const iv=0) -> Plate_PlaneConstraint

        :type point2d: OCC.wrapper.gp.gp_XY
        :type pln: OCC.wrapper.gp.gp_Pln
        :type iu: int
        :type iv: int

        """
        this = _Plate.new_Plate_PlaneConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LSC(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_LinearScalarConstraint

        """
        res = _Plate.Plate_PlaneConstraint_LSC(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_PlaneConstraint
Plate_PlaneConstraint_swigregister = _Plate.Plate_PlaneConstraint_swigregister
Plate_PlaneConstraint_swigregister(Plate_PlaneConstraint)

class NCollection_Array1_Plate_PinpointConstraint(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Plate_PinpointConstraint self) -> NCollection_Array1< Plate_PinpointConstraint >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Plate_PinpointConstraint self) -> NCollection_Array1< Plate_PinpointConstraint >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Plate_PinpointConstraint self) -> NCollection_Array1< Plate_PinpointConstraint >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Plate_PinpointConstraint self) -> NCollection_Array1< Plate_PinpointConstraint >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _Plate.new_NCollection_Array1_Plate_PinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Plate_PinpointConstraint self, Plate_PinpointConstraint theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Plate_PinpointConstraint self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Plate_PinpointConstraint self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Plate_PinpointConstraint self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Plate_PinpointConstraint self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Plate_PinpointConstraint self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Plate_PinpointConstraint self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Plate_PinpointConstraint self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Plate_PinpointConstraint self, NCollection_Array1_Plate_PinpointConstraint theOther) -> NCollection_Array1_Plate_PinpointConstraint

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Plate_PinpointConstraint self, NCollection_Array1_Plate_PinpointConstraint theOther) -> NCollection_Array1_Plate_PinpointConstraint

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Plate_PinpointConstraint self, NCollection_Array1_Plate_PinpointConstraint theOther) -> NCollection_Array1_Plate_PinpointConstraint
        assign(NCollection_Array1_Plate_PinpointConstraint self, NCollection_Array1_Plate_PinpointConstraint theOther) -> NCollection_Array1_Plate_PinpointConstraint

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Array1_Plate_PinpointConstraint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Plate_PinpointConstraint self) -> Plate_PinpointConstraint

        @return first element

        :rtype: TheItemType &

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Array1_Plate_PinpointConstraint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Plate_PinpointConstraint self) -> Plate_PinpointConstraint

        @return last element

        :rtype: TheItemType &

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Array1_Plate_PinpointConstraint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Plate_PinpointConstraint self, Standard_Integer const theIndex) -> Plate_PinpointConstraint

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Array1_Plate_PinpointConstraint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Plate.NCollection_Array1_Plate_PinpointConstraint_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Plate_PinpointConstraint self, Standard_Integer const theIndex, Plate_PinpointConstraint theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Plate_PinpointConstraint self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _Plate.NCollection_Array1_Plate_PinpointConstraint_Resize(self, *args)

    __swig_destroy__ = _Plate.delete_NCollection_Array1_Plate_PinpointConstraint
NCollection_Array1_Plate_PinpointConstraint_swigregister = _Plate.NCollection_Array1_Plate_PinpointConstraint_swigregister
NCollection_Array1_Plate_PinpointConstraint_swigregister(NCollection_Array1_Plate_PinpointConstraint)


try:
	Plate_Array1OfPinpointConstraint = NCollection_Array1_Plate_PinpointConstraint
except NameError:
	pass # does not exist, probably ignored

class Plate_Plate(object):
    """
    This class implement a variationnal spline algorithm able
    to define a two variable function satisfying some constraints
    and minimizing an energy like criterion.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_Plate self) -> Plate_Plate
        __init__(Plate_Plate self, Plate_Plate Ref) -> Plate_Plate

        :type Ref: OCC.wrapper.Plate.Plate_Plate

        """
        this = _Plate.new_Plate_Plate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Copy(self, *args):
        """
        Copy(Plate_Plate self, Plate_Plate Ref) -> Plate_Plate

        :type Ref: OCC.wrapper.Plate.Plate_Plate
        :rtype: OCC.wrapper.Plate.Plate_Plate

        """
        return _Plate.Plate_Plate_Copy(self, *args)


    def assign(self, *args):
        """
        assign(Plate_Plate self, Plate_Plate Ref) -> Plate_Plate

        :type Ref: OCC.wrapper.Plate.Plate_Plate
        :rtype: OCC.wrapper.Plate.Plate_Plate

        """
        return _Plate.Plate_Plate_assign(self, *args)


    def Load(self, *args):
        """
        Load(Plate_Plate self, Plate_PinpointConstraint PConst)
        Load(Plate_Plate self, Plate_LinearXYZConstraint LXYZConst)
        Load(Plate_Plate self, Plate_LinearScalarConstraint LScalarConst)
        Load(Plate_Plate self, Plate_GlobalTranslationConstraint GTConst)
        Load(Plate_Plate self, Plate_LineConstraint LConst)
        Load(Plate_Plate self, Plate_PlaneConstraint PConst)
        Load(Plate_Plate self, Plate_SampledCurveConstraint SCConst)
        Load(Plate_Plate self, Plate_GtoCConstraint GtoCConst)
        Load(Plate_Plate self, Plate_FreeGtoCConstraint FGtoCConst)

        :type FGtoCConst: OCC.wrapper.Plate.Plate_FreeGtoCConstraint

        """
        return _Plate.Plate_Plate_Load(self, *args)


    def SolveTI(self, *args):
        """
        SolveTI(Plate_Plate self, Standard_Integer const ord=4, Standard_Real const anisotropie=1.0)

        :type ord: int
        :type anisotropie: float

        """
        return _Plate.Plate_Plate_SolveTI(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Plate_Plate self) -> Standard_Boolean

        returns True if all has been correctly done.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plate.Plate_Plate_IsDone(self, *args)


    def destroy(self, *args):
        """destroy(Plate_Plate self)"""
        return _Plate.Plate_Plate_destroy(self, *args)


    def Init(self, *args):
        """
        Init(Plate_Plate self)

        reset the Plate in the initial state
        ( same as after Create())


        """
        return _Plate.Plate_Plate_Init(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(Plate_Plate self, gp_XY point2d) -> gp_XYZ

        :type point2d: OCC.wrapper.gp.gp_XY
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _Plate.Plate_Plate_Evaluate(self, *args)


    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(Plate_Plate self, gp_XY point2d, Standard_Integer const iu, Standard_Integer const iv) -> gp_XYZ

        :type point2d: OCC.wrapper.gp.gp_XY
        :type iu: int
        :type iv: int
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _Plate.Plate_Plate_EvaluateDerivative(self, *args)


    def CoefPol(self, *args):
        """
        CoefPol(Plate_Plate self, Handle_TColgp_HArray2OfXYZ Coefs)

        :type Coefs: OCC.wrapper.TColgp.Handle_TColgp_HArray2OfXYZ

        """
        return _Plate.Plate_Plate_CoefPol(self, *args)


    def SetPolynomialPartOnly(self, *args):
        """
        SetPolynomialPartOnly(Plate_Plate self, Standard_Boolean const PPOnly)

        :type PPOnly: bool

        """
        return _Plate.Plate_Plate_SetPolynomialPartOnly(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Plate_Plate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plate.Plate_Plate_Continuity(self, *args)


    def UVBox(self, *args):
        """
        UVBox(Plate_Plate self)

        :type UMin: float
        :type UMax: float
        :type VMin: float
        :type VMax: float

        """
        return _Plate.Plate_Plate_UVBox(self, *args)


    def UVConstraints(self, *args):
        """
        UVConstraints(Plate_Plate self, NCollection_Sequence_gp_XY Seq)

        :type Seq: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        return _Plate.Plate_Plate_UVConstraints(self, *args)

    __swig_destroy__ = _Plate.delete_Plate_Plate
Plate_Plate_swigregister = _Plate.Plate_Plate_swigregister
Plate_Plate_swigregister(Plate_Plate)

class Plate_D1(object):
    """
    define an order 1 derivatives of a 3d valued
    function of a 2d variable
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Plate_D1 self, gp_XYZ du, gp_XYZ dv) -> Plate_D1
        __init__(Plate_D1 self, Plate_D1 ref) -> Plate_D1

        :type ref: OCC.wrapper.Plate.Plate_D1

        """
        this = _Plate.new_Plate_D1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DU(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _Plate.Plate_D1_DU(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _Plate.Plate_D1_DV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plate.delete_Plate_D1
Plate_D1_swigregister = _Plate.Plate_D1_swigregister
Plate_D1_swigregister(Plate_D1)



