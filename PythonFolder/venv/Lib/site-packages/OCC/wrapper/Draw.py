# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Draw')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Draw')
    _Draw = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Draw', [dirname(__file__)])
        except ImportError:
            import _Draw
            return _Draw
        try:
            _mod = imp.load_module('_Draw', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Draw = swig_import_helper()
    del swig_import_helper
else:
    import _Draw
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Draw.delete_SwigPyIterator

    def value(self):
        return _Draw.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Draw.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Draw.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Draw.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Draw.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Draw.SwigPyIterator_copy(self)

    def next(self):
        return _Draw.SwigPyIterator_next(self)

    def __next__(self):
        return _Draw.SwigPyIterator___next__(self)

    def previous(self):
        return _Draw.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Draw.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Draw.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Draw.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Draw.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Draw.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Draw.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Draw.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Draw.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Draw.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Draw.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Draw.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Draw.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Draw.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Draw.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Draw.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Draw.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Draw.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Draw.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Draw.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Draw.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Draw.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Draw.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Draw.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Draw.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Draw.ptr_to_number(item)
ptr_to_number = _Draw.ptr_to_number

def HashCode(*args):
    return _Draw.HashCode(*args)
HashCode = _Draw.HashCode

def ptr_equal(a, b):
    return _Draw.ptr_equal(a, b)
ptr_equal = _Draw.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
Draw_blanc = _Draw.Draw_blanc
Draw_rouge = _Draw.Draw_rouge
Draw_vert = _Draw.Draw_vert
Draw_bleu = _Draw.Draw_bleu
Draw_cyan = _Draw.Draw_cyan
Draw_or = _Draw.Draw_or
Draw_magenta = _Draw.Draw_magenta
Draw_marron = _Draw.Draw_marron
Draw_orange = _Draw.Draw_orange
Draw_rose = _Draw.Draw_rose
Draw_saumon = _Draw.Draw_saumon
Draw_violet = _Draw.Draw_violet
Draw_jaune = _Draw.Draw_jaune
Draw_kaki = _Draw.Draw_kaki
Draw_corail = _Draw.Draw_corail
Draw_Square = _Draw.Draw_Square
Draw_Losange = _Draw.Draw_Losange
Draw_X = _Draw.Draw_X
Draw_Plus = _Draw.Draw_Plus
Draw_Circle = _Draw.Draw_Circle
Draw_CircleZoom = _Draw.Draw_CircleZoom
STOP_CONSOLE = _Draw.STOP_CONSOLE
WAIT_CONSOLE_COMMAND = _Draw.WAIT_CONSOLE_COMMAND
HAS_CONSOLE_COMMAND = _Draw.HAS_CONSOLE_COMMAND
class Draw_Drawable3D(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Drawable3D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Drawable3D(self) 
            return h


    def DrawOn(self, *args):
        """
        DrawOn(Draw_Drawable3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Drawable3D_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Draw_Drawable3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Drawable3D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Draw_Drawable3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Draw_Drawable3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Draw_Drawable3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Draw_Drawable3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Draw_Drawable3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw_Drawable3D_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Draw_Drawable3D self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Drawable3D_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Draw_Drawable3D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Draw_Drawable3D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Draw_Drawable3D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Draw_Drawable3D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Draw_Drawable3D self) -> Standard_Boolean
        Visible(Draw_Drawable3D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Draw_Drawable3D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Draw_Drawable3D self) -> Standard_Boolean
        Protected(Draw_Drawable3D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Draw_Drawable3D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Draw_Drawable3D self) -> Standard_CString
        Name(Draw_Drawable3D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Draw_Drawable3D_Name(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Drawable3D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Drawable3D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Drawable3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Drawable3D
Draw_Drawable3D_swigregister = _Draw.Draw_Drawable3D_swigregister
Draw_Drawable3D_swigregister(Draw_Drawable3D)

def Draw_Drawable3D_get_type_name(*args):
    """
    Draw_Drawable3D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Drawable3D_get_type_name(*args)

def Draw_Drawable3D_get_type_descriptor(*args):
    """
    Draw_Drawable3D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Drawable3D_get_type_descriptor(*args)

class Draw_Drawable2D(Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Drawable2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Drawable2D(self) 
            return h


    def Is3D(self, *args):
        """
        Is3D(Draw_Drawable2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Drawable2D_Is3D(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Drawable2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Drawable2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Drawable2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Drawable2D
Draw_Drawable2D_swigregister = _Draw.Draw_Drawable2D_swigregister
Draw_Drawable2D_swigregister(Draw_Drawable2D)

def Draw_Drawable2D_get_type_name(*args):
    """
    Draw_Drawable2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Drawable2D_get_type_name(*args)

def Draw_Drawable2D_get_type_descriptor(*args):
    """
    Draw_Drawable2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Drawable2D_get_type_descriptor(*args)

class Draw_Chronometer(Draw_Drawable3D):
    """Class to store chronometer variables."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Chronometer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Chronometer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Chronometer self) -> Draw_Chronometer

        Class to store chronometer variables.
        """
        this = _Draw.new_Draw_Chronometer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Timer(self, *args):
        """
        Timer(Draw_Chronometer self) -> OSD_Timer

        :rtype: OCC.wrapper.OSD.OSD_Timer

        """
        return _Draw.Draw_Chronometer_Timer(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Draw_Chronometer self, Draw_Display dis)

        Does nothhing,

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Chronometer_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Draw_Chronometer self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Draw_Chronometer_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Draw_Chronometer self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Draw_Chronometer_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Draw_Chronometer self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw_Chronometer_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Chronometer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Chronometer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Chronometer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Chronometer
Draw_Chronometer_swigregister = _Draw.Draw_Chronometer_swigregister
Draw_Chronometer_swigregister(Draw_Chronometer)

def Draw_Chronometer_get_type_name(*args):
    """
    Draw_Chronometer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Chronometer_get_type_name(*args)

def Draw_Chronometer_get_type_descriptor(*args):
    """
    Draw_Chronometer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Chronometer_get_type_descriptor(*args)

class Draw_Axis2D(Draw_Drawable2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Axis2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Axis2D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Axis2D self, Draw_Color col, Standard_Integer const Size=5) -> Draw_Axis2D
        __init__(Draw_Axis2D self, gp_Pnt2d p, Draw_Color col, Standard_Integer const Size=5) -> Draw_Axis2D
        __init__(Draw_Axis2D self, gp_Ax22d A, Draw_Color col, Standard_Integer const Size=5) -> Draw_Axis2D

        :type A: OCC.wrapper.gp.gp_Ax22d
        :type col: OCC.wrapper.Draw.Draw_Color
        :type Size: int

        """
        this = _Draw.new_Draw_Axis2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(Draw_Axis2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Axis2D_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Axis2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Axis2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Axis2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Axis2D
Draw_Axis2D_swigregister = _Draw.Draw_Axis2D_swigregister
Draw_Axis2D_swigregister(Draw_Axis2D)

def Draw_Axis2D_get_type_name(*args):
    """
    Draw_Axis2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Axis2D_get_type_name(*args)

def Draw_Axis2D_get_type_descriptor(*args):
    """
    Draw_Axis2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Axis2D_get_type_descriptor(*args)

class Draw_Box(Draw_Drawable3D):
    """a 3d box"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Box
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Box(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Box self, Bnd_OBB theOBB, Draw_Color theColor) -> Draw_Box

        Constructor

        :type theOBB: OCC.wrapper.Bnd.Bnd_OBB
        :type theColor: OCC.wrapper.Draw.Draw_Color

        """
        this = _Draw.new_Draw_Box(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(Draw_Box self, Draw_Display theDis)

        Draws myOBB

        :type theDis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Box_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Box_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Box_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Box_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Box
Draw_Box_swigregister = _Draw.Draw_Box_swigregister
Draw_Box_swigregister(Draw_Box)

def Draw_Box_get_type_name(*args):
    """
    Draw_Box_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Box_get_type_name(*args)

def Draw_Box_get_type_descriptor(*args):
    """
    Draw_Box_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Box_get_type_descriptor(*args)

class Draw_Number(Draw_Drawable3D):
    """To store nummbers in variables."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Number
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Number(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Number self, Standard_Real const V) -> Draw_Number

        :type V: float

        """
        this = _Draw.new_Draw_Number(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Value(Draw_Number self) -> Standard_Real
        Value(Draw_Number self, Standard_Real const V)

        :type V: float

        """
        return _Draw.Draw_Number_Value(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Draw_Number self, Draw_Display dis)

        Does nothhing,

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Number_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Draw_Number self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Draw_Number_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Draw_Number self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Draw_Number_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Draw_Number self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw_Number_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Number_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Number_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Number_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Number
Draw_Number_swigregister = _Draw.Draw_Number_swigregister
Draw_Number_swigregister(Draw_Number)

def Draw_Number_get_type_name(*args):
    """
    Draw_Number_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Number_get_type_name(*args)

def Draw_Number_get_type_descriptor(*args):
    """
    Draw_Number_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Number_get_type_descriptor(*args)

class Draw_Text2D(Draw_Drawable2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Text2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Text2D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Text2D self, gp_Pnt2d p, Standard_CString const T, Draw_Color col) -> Draw_Text2D
        __init__(Draw_Text2D self, gp_Pnt2d p, Standard_CString const T, Draw_Color col, Standard_Integer const moveX, Standard_Integer const moveY) -> Draw_Text2D

        :type p: OCC.wrapper.gp.gp_Pnt2d
        :type T: OCC.wrapper.Standard.Standard_CString
        :type col: OCC.wrapper.Draw.Draw_Color
        :type moveX: int
        :type moveY: int

        """
        this = _Draw.new_Draw_Text2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetPnt2d(self, *args):
        """
        SetPnt2d(Draw_Text2D self, gp_Pnt2d p)

        :type p: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Draw.Draw_Text2D_SetPnt2d(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Draw_Text2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Text2D_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Text2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Text2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Text2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Text2D
Draw_Text2D_swigregister = _Draw.Draw_Text2D_swigregister
Draw_Text2D_swigregister(Draw_Text2D)

def Draw_Text2D_get_type_name(*args):
    """
    Draw_Text2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Text2D_get_type_name(*args)

def Draw_Text2D_get_type_descriptor(*args):
    """
    Draw_Text2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Text2D_get_type_descriptor(*args)

class Draw_Printer(Message.Message_Printer):
    """
    Implementation of Printer class with output
    (Message_Messenge) directed to Draw_Interpretor
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Printer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Printer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Printer self, Draw_Interpretor theTcl) -> Draw_Printer

        Creates a printer connected to the interpretor.

        :type theTcl: OCC.wrapper.Draw.Draw_Interpretor

        """
        this = _Draw.new_Draw_Printer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Send(self, *args):
        """
        Send(Draw_Printer self, TCollection_ExtendedString theString, Message_Gravity const theGravity, Standard_Boolean const putEndl)
        Send(Draw_Printer self, Standard_CString const theString, Message_Gravity const theGravity, Standard_Boolean const putEndl)
        Send(Draw_Printer self, TCollection_AsciiString theString, Message_Gravity const theGravity, Standard_Boolean const putEndl)

        Send a string message with specified trace level.
        The parameter putEndl specified whether end-of-line
        should be added to the end of the message.
        Default implementation calls first method Send().

        :type theString: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theGravity: OCC.wrapper.Message.Message_Gravity
        :type putEndl: bool

        """
        return _Draw.Draw_Printer_Send(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Printer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Printer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Printer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Printer
Draw_Printer_swigregister = _Draw.Draw_Printer_swigregister
Draw_Printer_swigregister(Draw_Printer)

def Draw_Printer_get_type_name(*args):
    """
    Draw_Printer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Printer_get_type_name(*args)

def Draw_Printer_get_type_descriptor(*args):
    """
    Draw_Printer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Printer_get_type_descriptor(*args)

class Draw_Segment2D(Draw_Drawable2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Segment2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Segment2D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Segment2D self, gp_Pnt2d p1, gp_Pnt2d p2, Draw_Color col) -> Draw_Segment2D

        :type p1: OCC.wrapper.gp.gp_Pnt2d
        :type p2: OCC.wrapper.gp.gp_Pnt2d
        :type col: OCC.wrapper.Draw.Draw_Color

        """
        this = _Draw.new_Draw_Segment2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(Draw_Segment2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Segment2D_DrawOn(self, *args)


    def First(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        res = _Draw.Draw_Segment2D_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        res = _Draw.Draw_Segment2D_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Dump(self, *args):
        """
        Dump(Draw_Segment2D self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Draw_Segment2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Draw_Segment2D self, Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw_Segment2D_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Segment2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Segment2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Segment2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Segment2D
Draw_Segment2D_swigregister = _Draw.Draw_Segment2D_swigregister
Draw_Segment2D_swigregister(Draw_Segment2D)

def Draw_Segment2D_get_type_name(*args):
    """
    Draw_Segment2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Segment2D_get_type_name(*args)

def Draw_Segment2D_get_type_descriptor(*args):
    """
    Draw_Segment2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Segment2D_get_type_descriptor(*args)

class Draw_ProgressIndicator(Message.Message_ProgressIndicator):
    """
    Implements ProgressIndicator (interface provided by Message)
    for DRAW, with possibility to output to TCL window
    and/or trace file
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_ProgressIndicator
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_ProgressIndicator(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_ProgressIndicator self, Draw_Interpretor di, Standard_Real theUpdateThreshold=1.) -> Draw_ProgressIndicator

        Creates a progress indicator and remembers pointer to Draw_Interpretor

        @param theUpdateThreshold defines minimal progress (in percents) between
        updates of the indicator (non-forced updates of the progress bar will be
        disabled until that progress is reached since last update).

        :type di: OCC.wrapper.Draw.Draw_Interpretor
        :type theUpdateThreshold: float

        """
        this = _Draw.new_Draw_ProgressIndicator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetTextMode(self, *args):
        """
        SetTextMode(Draw_ProgressIndicator self, Standard_Boolean const theTextMode)

        Sets text output mode (on/off)

        :type theTextMode: bool

        """
        return _Draw.Draw_ProgressIndicator_SetTextMode(self, *args)


    def GetTextMode(self, *args):
        """
        GetTextMode(Draw_ProgressIndicator self) -> Standard_Boolean

        Gets text output mode (on/off)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_ProgressIndicator_GetTextMode(self, *args)


    def SetGraphMode(self, *args):
        """
        SetGraphMode(Draw_ProgressIndicator self, Standard_Boolean const theGraphMode)

        Sets graphical output mode (on/off)

        :type theGraphMode: bool

        """
        return _Draw.Draw_ProgressIndicator_SetGraphMode(self, *args)


    def GetGraphMode(self, *args):
        """
        GetGraphMode(Draw_ProgressIndicator self) -> Standard_Boolean

        Gets graphical output mode (on/off)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_ProgressIndicator_GetGraphMode(self, *args)


    def Reset(self, *args):
        """
        Reset(Draw_ProgressIndicator self)

        Clears/erases opened TCL windows if any
        and sets myBreak to False


        """
        return _Draw.Draw_ProgressIndicator_Reset(self, *args)


    def Show(self, *args):
        """
        Show(Draw_ProgressIndicator self, Standard_Boolean const force) -> Standard_Boolean

        Defines method Show of Progress Indicator

        :type force: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_ProgressIndicator_Show(self, *args)


    def UserBreak(self, *args):
        """
        UserBreak(Draw_ProgressIndicator self) -> Standard_Boolean

        Redefines method UserBreak of Progress Indicator

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_ProgressIndicator_UserBreak(self, *args)


    def DefaultTextMode(*args):
        """
        DefaultTextMode() -> Standard_Boolean &

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_ProgressIndicator_DefaultTextMode(*args)

    DefaultTextMode = staticmethod(DefaultTextMode)

    def DefaultGraphMode(*args):
        """
        DefaultGraphMode() -> Standard_Boolean &

        Get/Set default values for output modes

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_ProgressIndicator_DefaultGraphMode(*args)

    DefaultGraphMode = staticmethod(DefaultGraphMode)

    def StopIndicator(*args):
        """
        StopIndicator() -> Standard_Address &

        Internal method for implementation of UserBreak mechanism;
        note that it uses static variable and thus not thread-safe! 

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _Draw.Draw_ProgressIndicator_StopIndicator(*args)

    StopIndicator = staticmethod(StopIndicator)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_ProgressIndicator_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_ProgressIndicator_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_ProgressIndicator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_ProgressIndicator
Draw_ProgressIndicator_swigregister = _Draw.Draw_ProgressIndicator_swigregister
Draw_ProgressIndicator_swigregister(Draw_ProgressIndicator)

def Draw_ProgressIndicator_DefaultTextMode(*args):
    """
    Draw_ProgressIndicator_DefaultTextMode() -> Standard_Boolean &

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Draw.Draw_ProgressIndicator_DefaultTextMode(*args)

def Draw_ProgressIndicator_DefaultGraphMode(*args):
    """
    Draw_ProgressIndicator_DefaultGraphMode() -> Standard_Boolean &

    Get/Set default values for output modes

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Draw.Draw_ProgressIndicator_DefaultGraphMode(*args)

def Draw_ProgressIndicator_StopIndicator(*args):
    """
    Draw_ProgressIndicator_StopIndicator() -> Standard_Address &

    Internal method for implementation of UserBreak mechanism;
    note that it uses static variable and thus not thread-safe! 

    :rtype: OCC.wrapper.Standard.Standard_Address

    """
    return _Draw.Draw_ProgressIndicator_StopIndicator(*args)

def Draw_ProgressIndicator_get_type_name(*args):
    """
    Draw_ProgressIndicator_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_ProgressIndicator_get_type_name(*args)

def Draw_ProgressIndicator_get_type_descriptor(*args):
    """
    Draw_ProgressIndicator_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_ProgressIndicator_get_type_descriptor(*args)

class Draw_Circle2D(Draw_Drawable2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Circle2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Circle2D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Circle2D self, gp_Circ2d C, Standard_Real const A1, Standard_Real const A2, Draw_Color col) -> Draw_Circle2D

        :type C: OCC.wrapper.gp.gp_Circ2d
        :type A1: float
        :type A2: float
        :type col: OCC.wrapper.Draw.Draw_Color

        """
        this = _Draw.new_Draw_Circle2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(Draw_Circle2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Circle2D_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Circle2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Circle2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Circle2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Circle2D
Draw_Circle2D_swigregister = _Draw.Draw_Circle2D_swigregister
Draw_Circle2D_swigregister(Draw_Circle2D)

def Draw_Circle2D_get_type_name(*args):
    """
    Draw_Circle2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Circle2D_get_type_name(*args)

def Draw_Circle2D_get_type_descriptor(*args):
    """
    Draw_Circle2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Circle2D_get_type_descriptor(*args)

class Draw_Axis3D(Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Axis3D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Axis3D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Axis3D self, Draw_Color col, Standard_Integer const Size=5) -> Draw_Axis3D
        __init__(Draw_Axis3D self, gp_Pnt p, Draw_Color col, Standard_Integer const Size=5) -> Draw_Axis3D
        __init__(Draw_Axis3D self, gp_Ax3 A, Draw_Color col, Standard_Integer const Size=5) -> Draw_Axis3D

        :type A: OCC.wrapper.gp.gp_Ax3
        :type col: OCC.wrapper.Draw.Draw_Color
        :type Size: int

        """
        this = _Draw.new_Draw_Axis3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(Draw_Axis3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Axis3D_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Axis3D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Axis3D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Axis3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Axis3D
Draw_Axis3D_swigregister = _Draw.Draw_Axis3D_swigregister
Draw_Axis3D_swigregister(Draw_Axis3D)

def Draw_Axis3D_get_type_name(*args):
    """
    Draw_Axis3D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Axis3D_get_type_name(*args)

def Draw_Axis3D_get_type_descriptor(*args):
    """
    Draw_Axis3D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Axis3D_get_type_descriptor(*args)

class Draw_Viewer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(Draw_Viewer self) -> Draw_Viewer"""
        this = _Draw.new_Draw_Viewer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DefineColor(self, *args):
        """
        DefineColor(Draw_Viewer self, Standard_Integer const i, char const * colname) -> Standard_Boolean

        :type i: int
        :type colname: const char *
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Viewer_DefineColor(self, *args)


    def MakeView(self, *args):
        """
        MakeView(Draw_Viewer self, Standard_Integer const id, char const * typ, Standard_Integer const X, Standard_Integer const Y, Standard_Integer const W, Standard_Integer const H)
        MakeView(Draw_Viewer self, Standard_Integer const id, char const * typ, Standard_Integer const X, Standard_Integer const Y, Standard_Integer const W, Standard_Integer const H, HWND win, Standard_Boolean const useBuffer)
        MakeView(Draw_Viewer self, Standard_Integer const id, char const * typ, char const * window)

        :type id: int
        :type typ: const char *
        :type window: const char *

        """
        return _Draw.Draw_Viewer_MakeView(self, *args)


    def SetTitle(self, *args):
        """
        SetTitle(Draw_Viewer self, Standard_Integer const id, char const * name)

        :type id: int
        :type name: const char *

        """
        return _Draw.Draw_Viewer_SetTitle(self, *args)


    def ResetView(self, *args):
        """
        ResetView(Draw_Viewer self, Standard_Integer const id)

        :type id: int

        """
        return _Draw.Draw_Viewer_ResetView(self, *args)


    def SetZoom(self, *args):
        """
        SetZoom(Draw_Viewer self, Standard_Integer const id, Standard_Real const z)

        :type id: int
        :type z: float

        """
        return _Draw.Draw_Viewer_SetZoom(self, *args)


    def RotateView(self, *args):
        """
        RotateView(Draw_Viewer self, Standard_Integer const id, gp_Dir2d arg3, Standard_Real const arg4)
        RotateView(Draw_Viewer self, Standard_Integer const id, gp_Pnt arg3, gp_Dir arg4, Standard_Real const arg5)

        :type id: int
        :type : OCC.wrapper.gp.gp_Pnt
        :type : OCC.wrapper.gp.gp_Dir
        :type : float

        """
        return _Draw.Draw_Viewer_RotateView(self, *args)


    def SetFocal(self, *args):
        """
        SetFocal(Draw_Viewer self, Standard_Integer const id, Standard_Real const FocalDist)

        :type id: int
        :type FocalDist: float

        """
        return _Draw.Draw_Viewer_SetFocal(self, *args)


    def GetType(self, *args):
        """
        GetType(Draw_Viewer self, Standard_Integer const id) -> char *

        :type id: int
        :rtype: char *

        """
        return _Draw.Draw_Viewer_GetType(self, *args)


    def Zoom(self, *args):
        """
        Zoom(Draw_Viewer self, Standard_Integer const id) -> Standard_Real

        :type id: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Draw_Viewer_Zoom(self, *args)


    def Focal(self, *args):
        """
        Focal(Draw_Viewer self, Standard_Integer const id) -> Standard_Real

        :type id: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Draw_Viewer_Focal(self, *args)


    def SetTrsf(self, *args):
        """
        SetTrsf(Draw_Viewer self, Standard_Integer const id, gp_Trsf T)

        :type id: int
        :type T: OCC.wrapper.gp.gp_Trsf

        """
        return _Draw.Draw_Viewer_SetTrsf(self, *args)


    def GetTrsf(self, *args):
        """
        GetTrsf(Draw_Viewer self, Standard_Integer const id, gp_Trsf T)

        :type id: int
        :type T: OCC.wrapper.gp.gp_Trsf

        """
        return _Draw.Draw_Viewer_GetTrsf(self, *args)


    def GetPosSize(self, *args):
        """
        GetPosSize(Draw_Viewer self, Standard_Integer const id)

        :type id: int
        :type X: int
        :type Y: int
        :type W: int
        :type H: int

        """
        return _Draw.Draw_Viewer_GetPosSize(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Draw_Viewer self, Standard_Integer const id) -> Standard_Boolean

        :type id: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Viewer_Is3D(self, *args)


    def GetFrame(self, *args):
        """
        GetFrame(Draw_Viewer self, Standard_Integer const id)

        :type id: int
        :type xmin: int
        :type ymin: int
        :type xmax: int
        :type ymax: int

        """
        return _Draw.Draw_Viewer_GetFrame(self, *args)


    def FitView(self, *args):
        """
        FitView(Draw_Viewer self, Standard_Integer const id, Standard_Integer const frame)

        :type id: int
        :type frame: int

        """
        return _Draw.Draw_Viewer_FitView(self, *args)


    def PanView(self, *args):
        """
        PanView(Draw_Viewer self, Standard_Integer const id, Standard_Integer const DX, Standard_Integer const DY)

        :type id: int
        :type DX: int
        :type DY: int

        """
        return _Draw.Draw_Viewer_PanView(self, *args)


    def SetPan(self, *args):
        """
        SetPan(Draw_Viewer self, Standard_Integer const id, Standard_Integer const DX, Standard_Integer const DY)

        :type id: int
        :type DX: int
        :type DY: int

        """
        return _Draw.Draw_Viewer_SetPan(self, *args)


    def GetPan(self, *args):
        """
        GetPan(Draw_Viewer self, Standard_Integer const id)

        :type id: int
        :type DX: int
        :type DY: int

        """
        return _Draw.Draw_Viewer_GetPan(self, *args)


    def HasView(self, *args):
        """
        HasView(Draw_Viewer self, Standard_Integer const id) -> Standard_Boolean

        :type id: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Viewer_HasView(self, *args)


    def DisplayView(self, *args):
        """
        DisplayView(Draw_Viewer self, Standard_Integer const id)

        :type id: int

        """
        return _Draw.Draw_Viewer_DisplayView(self, *args)


    def HideView(self, *args):
        """
        HideView(Draw_Viewer self, Standard_Integer const id)

        :type id: int

        """
        return _Draw.Draw_Viewer_HideView(self, *args)


    def ClearView(self, *args):
        """
        ClearView(Draw_Viewer self, Standard_Integer const id)

        :type id: int

        """
        return _Draw.Draw_Viewer_ClearView(self, *args)


    def RemoveView(self, *args):
        """
        RemoveView(Draw_Viewer self, Standard_Integer const id)

        :type id: int

        """
        return _Draw.Draw_Viewer_RemoveView(self, *args)


    def RepaintView(self, *args):
        """
        RepaintView(Draw_Viewer self, Standard_Integer const id)

        :type id: int

        """
        return _Draw.Draw_Viewer_RepaintView(self, *args)


    def ConfigView(self, *args):
        """
        ConfigView(Draw_Viewer self, Standard_Integer const id)

        :type id: int

        """
        return _Draw.Draw_Viewer_ConfigView(self, *args)


    def PostScriptView(self, *args):
        """
        PostScriptView(Draw_Viewer self, Standard_Integer const id, Standard_Integer const VXmin, Standard_Integer const VYmin, Standard_Integer const VXmax, Standard_Integer const VYmax, Standard_Integer const PXmin, Standard_Integer const PYmin, Standard_Integer const PXmax, Standard_Integer const PYmax, std::ostream & sortie)

        :type id: int
        :type VXmin: int
        :type VYmin: int
        :type VXmax: int
        :type VYmax: int
        :type PXmin: int
        :type PYmin: int
        :type PXmax: int
        :type PYmax: int
        :type sortie: ostream

        """
        return _Draw.Draw_Viewer_PostScriptView(self, *args)


    def PostColor(self, *args):
        """
        PostColor(Draw_Viewer self, Standard_Integer const icol, Standard_Integer const width, Standard_Real const gray)

        :type icol: int
        :type width: int
        :type gray: float

        """
        return _Draw.Draw_Viewer_PostColor(self, *args)


    def SaveView(self, *args):
        """
        SaveView(Draw_Viewer self, Standard_Integer const id, char const * filename) -> Standard_Boolean

        :type id: int
        :type filename: const char *
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Viewer_SaveView(self, *args)


    def RepaintAll(self, *args):
        """RepaintAll(Draw_Viewer self)"""
        return _Draw.Draw_Viewer_RepaintAll(self, *args)


    def Repaint2D(self, *args):
        """Repaint2D(Draw_Viewer self)"""
        return _Draw.Draw_Viewer_Repaint2D(self, *args)


    def Repaint3D(self, *args):
        """Repaint3D(Draw_Viewer self)"""
        return _Draw.Draw_Viewer_Repaint3D(self, *args)


    def DeleteView(self, *args):
        """
        DeleteView(Draw_Viewer self, Standard_Integer const id)

        :type id: int

        """
        return _Draw.Draw_Viewer_DeleteView(self, *args)


    def Clear(self, *args):
        """Clear(Draw_Viewer self)"""
        return _Draw.Draw_Viewer_Clear(self, *args)


    def Clear2D(self, *args):
        """Clear2D(Draw_Viewer self)"""
        return _Draw.Draw_Viewer_Clear2D(self, *args)


    def Clear3D(self, *args):
        """Clear3D(Draw_Viewer self)"""
        return _Draw.Draw_Viewer_Clear3D(self, *args)


    def Flush(self, *args):
        """Flush(Draw_Viewer self)"""
        return _Draw.Draw_Viewer_Flush(self, *args)


    def DrawOnView(self, *args):
        """
        DrawOnView(Draw_Viewer self, Standard_Integer const id, Handle_Draw_Drawable3D D)

        :type id: int
        :type D: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Draw_Viewer_DrawOnView(self, *args)


    def HighlightOnView(self, *args):
        """
        HighlightOnView(Draw_Viewer self, Standard_Integer const id, Handle_Draw_Drawable3D D, Draw_ColorKind const C=Draw_blanc)

        :type id: int
        :type D: OCC.wrapper.Draw.Handle_Draw_Drawable3D
        :type C: OCC.wrapper.Draw.Draw_ColorKind

        """
        return _Draw.Draw_Viewer_HighlightOnView(self, *args)


    def AddDrawable(self, *args):
        """
        AddDrawable(Draw_Viewer self, Handle_Draw_Drawable3D D)

        :type D: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Draw_Viewer_AddDrawable(self, *args)


    def RemoveDrawable(self, *args):
        """
        RemoveDrawable(Draw_Viewer self, Handle_Draw_Drawable3D D)

        :type D: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Draw_Viewer_RemoveDrawable(self, *args)


    def MakeDisplay(self, *args):
        """
        MakeDisplay(Draw_Viewer self, Standard_Integer const id) -> Draw_Display

        :type id: int
        :rtype: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Viewer_MakeDisplay(self, *args)


    def Select(self, *args):
        """
        Select(Draw_Viewer self, Standard_Boolean waitclick)

        :type id: int
        :type X: int
        :type Y: int
        :type Button: int
        :type waitclick: bool

        """
        return _Draw.Draw_Viewer_Select(self, *args)


    def Pick(self, *args):
        """
        Pick(Draw_Viewer self, Standard_Integer const id, Standard_Integer const X, Standard_Integer const Y, Standard_Integer const Prec, Handle_Draw_Drawable3D D, Standard_Integer const First=0) -> Standard_Integer

        :type id: int
        :type X: int
        :type Y: int
        :type Prec: int
        :type D: OCC.wrapper.Draw.Handle_Draw_Drawable3D
        :type First: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Draw_Viewer_Pick(self, *args)


    def LastPick(self, *args):
        """
        LastPick(Draw_Viewer self, gp_Pnt P1, gp_Pnt P2)

        :type P1: OCC.wrapper.gp.gp_Pnt
        :type P2: OCC.wrapper.gp.gp_Pnt
        :type Param: float

        """
        return _Draw.Draw_Viewer_LastPick(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Draw_Viewer self, Handle_Draw_Drawable3D arg2) -> Draw_Viewer

        :type : OCC.wrapper.Draw.Handle_Draw_Drawable3D
        :rtype: OCC.wrapper.Draw.Draw_Viewer

        """
        return _Draw.Draw_Viewer___lshift__(self, *args)


    def GetDrawables(self, *args):
        """
        :rtype: OCC.wrapper.Draw.Draw_SequenceOfDrawable3D

        """
        res = _Draw.Draw_Viewer_GetDrawables(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Viewer
Draw_Viewer_swigregister = _Draw.Draw_Viewer_swigregister
Draw_Viewer_swigregister(Draw_Viewer)

class Draw_Marker2D(Draw_Drawable2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Marker2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Marker2D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Marker2D self, gp_Pnt2d P, Draw_MarkerShape const T, Draw_Color C, Standard_Integer const Size=5) -> Draw_Marker2D
        __init__(Draw_Marker2D self, gp_Pnt2d P, Draw_MarkerShape const T, Draw_Color C, Standard_Real const RSize) -> Draw_Marker2D

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type T: OCC.wrapper.Draw.Draw_MarkerShape
        :type C: OCC.wrapper.Draw.Draw_Color
        :type RSize: float

        """
        this = _Draw.new_Draw_Marker2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ChangePos(self, *args):
        """
        ChangePos(Draw_Marker2D self) -> gp_Pnt2d

        myPos field

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Draw.Draw_Marker2D_ChangePos(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Draw_Marker2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Marker2D_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Draw_Marker2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs always false

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Marker2D_PickReject(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Marker2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Marker2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Marker2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Marker2D
Draw_Marker2D_swigregister = _Draw.Draw_Marker2D_swigregister
Draw_Marker2D_swigregister(Draw_Marker2D)

def Draw_Marker2D_get_type_name(*args):
    """
    Draw_Marker2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Marker2D_get_type_name(*args)

def Draw_Marker2D_get_type_descriptor(*args):
    """
    Draw_Marker2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Marker2D_get_type_descriptor(*args)

class Handle_Draw_Axis2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Axis2D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Axis2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Axis2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Axis2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Axis2D self, Draw_Axis2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Axis2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Axis2D self, Handle_Draw_Axis2D theHandle) -> Handle_Draw_Axis2D
        assign(Handle_Draw_Axis2D self, Draw_Axis2D thePtr) -> Handle_Draw_Axis2D
        assign(Handle_Draw_Axis2D self, Handle_Draw_Axis2D theHandle) -> Handle_Draw_Axis2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Axis2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Axis2D self) -> Draw_Axis2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Axis2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Axis2D self) -> Draw_Axis2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Axis2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Axis2D self) -> Draw_Axis2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Axis2D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Axis2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Axis2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Axis2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Axis2D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Axis2D

    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Axis2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Axis2D_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Axis2D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Axis2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Axis2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Axis2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Axis2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Axis2D_Is3D(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Axis2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Axis2D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Axis2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Axis2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Axis2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Axis2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Axis2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Axis2D_Whatis(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Axis2D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Axis2D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Axis2D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Axis2D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Axis2D self) -> Standard_Boolean
        Visible(Handle_Draw_Axis2D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Axis2D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Axis2D self) -> Standard_Boolean
        Protected(Handle_Draw_Axis2D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Axis2D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Axis2D self) -> Standard_CString
        Name(Handle_Draw_Axis2D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Axis2D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Axis2D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Axis2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Axis2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Axis2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Axis2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Axis2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Axis2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Axis2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Axis2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Axis2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Axis2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Axis2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Axis2D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Axis2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Axis2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Axis2D_DecrementRefCounter(self, *args)

Handle_Draw_Axis2D_swigregister = _Draw.Handle_Draw_Axis2D_swigregister
Handle_Draw_Axis2D_swigregister(Handle_Draw_Axis2D)

def Handle_Draw_Axis2D_DownCast(thing):
    return _Draw.Handle_Draw_Axis2D_DownCast(thing)
Handle_Draw_Axis2D_DownCast = _Draw.Handle_Draw_Axis2D_DownCast

class Draw_Text3D(Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Text3D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Text3D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Text3D self, gp_Pnt p, Standard_CString const T, Draw_Color col) -> Draw_Text3D
        __init__(Draw_Text3D self, gp_Pnt p, Standard_CString const T, Draw_Color col, Standard_Real const moveX, Standard_Real const moveY) -> Draw_Text3D

        :type p: OCC.wrapper.gp.gp_Pnt
        :type T: OCC.wrapper.Standard.Standard_CString
        :type col: OCC.wrapper.Draw.Draw_Color
        :type moveX: float
        :type moveY: float

        """
        this = _Draw.new_Draw_Text3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetPnt(self, *args):
        """
        SetPnt(Draw_Text3D self, gp_Pnt p)

        :type p: OCC.wrapper.gp.gp_Pnt

        """
        return _Draw.Draw_Text3D_SetPnt(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Draw_Text3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Text3D_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Text3D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Text3D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Text3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Text3D
Draw_Text3D_swigregister = _Draw.Draw_Text3D_swigregister
Draw_Text3D_swigregister(Draw_Text3D)

def Draw_Text3D_get_type_name(*args):
    """
    Draw_Text3D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Text3D_get_type_name(*args)

def Draw_Text3D_get_type_descriptor(*args):
    """
    Draw_Text3D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Text3D_get_type_descriptor(*args)

class DrawWindow(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddCallbackBeforeTerminate(*args):
        """
        AddCallbackBeforeTerminate(DrawWindow::FCallbackBeforeTerminate theCB)

        This method registers a callback function that will be called just before exit.
        This is usefull especially for Windows platform, on which Draw is normally 
        self-terminated instead of exiting.

        :type theCB: FCallbackBeforeTerminate

        """
        return _Draw.DrawWindow_AddCallbackBeforeTerminate(*args)

    AddCallbackBeforeTerminate = staticmethod(AddCallbackBeforeTerminate)

    def RemoveCallbackBeforeTerminate(*args):
        """
        RemoveCallbackBeforeTerminate(DrawWindow::FCallbackBeforeTerminate theCB)

        Just in case method for un-registering a callback previously registered by
        AddCallbackBeforeTerminate()

        :type theCB: FCallbackBeforeTerminate

        """
        return _Draw.DrawWindow_RemoveCallbackBeforeTerminate(*args)

    RemoveCallbackBeforeTerminate = staticmethod(RemoveCallbackBeforeTerminate)

    def __init__(self, *args):
        """
        __init__(DrawWindow self) -> DrawWindow
        __init__(DrawWindow self, char const * arg2, Standard_Integer arg3, Standard_Integer arg4, Standard_Integer arg5, Standard_Integer arg6) -> DrawWindow
        __init__(DrawWindow self, char const * arg2, Standard_Integer arg3, Standard_Integer arg4, Standard_Integer arg5, Standard_Integer arg6, HWND arg7) -> DrawWindow

        :type : const char *
        :type : int
        :type : int
        :type : int
        :type : int
        :type : HWND

        """
        this = _Draw.new_DrawWindow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(DrawWindow self, Standard_Integer arg2, Standard_Integer arg3, Standard_Integer arg4, Standard_Integer arg5)

        :type : int
        :type : int
        :type : int
        :type : int

        """
        return _Draw.DrawWindow_Init(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(DrawWindow self, Standard_Integer arg2, Standard_Integer arg3)

        :type : int
        :type : int

        """
        return _Draw.DrawWindow_SetPosition(self, *args)


    def SetDimension(self, *args):
        """
        SetDimension(DrawWindow self, Standard_Integer arg2, Standard_Integer arg3)

        :type : int
        :type : int

        """
        return _Draw.DrawWindow_SetDimension(self, *args)


    def GetPosition(self, *args):
        """
        GetPosition(DrawWindow self)

        :type : int
        :type : int

        """
        return _Draw.DrawWindow_GetPosition(self, *args)


    def HeightWin(self, *args):
        """
        HeightWin(DrawWindow self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.DrawWindow_HeightWin(self, *args)


    def WidthWin(self, *args):
        """
        WidthWin(DrawWindow self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.DrawWindow_WidthWin(self, *args)


    def SetTitle(self, *args):
        """
        SetTitle(DrawWindow self, TCollection_AsciiString arg2)

        :type : OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Draw.DrawWindow_SetTitle(self, *args)


    def GetTitle(self, *args):
        """
        GetTitle(DrawWindow self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Draw.DrawWindow_GetTitle(self, *args)


    def DisplayWindow(self, *args):
        """DisplayWindow(DrawWindow self)"""
        return _Draw.DrawWindow_DisplayWindow(self, *args)


    def Hide(self, *args):
        """Hide(DrawWindow self)"""
        return _Draw.DrawWindow_Hide(self, *args)


    def Destroy(self, *args):
        """Destroy(DrawWindow self)"""
        return _Draw.DrawWindow_Destroy(self, *args)


    def Clear(self, *args):
        """Clear(DrawWindow self)"""
        return _Draw.DrawWindow_Clear(self, *args)


    def Flush(*args):
        """Flush()"""
        return _Draw.DrawWindow_Flush(*args)

    Flush = staticmethod(Flush)

    def Save(self, *args):
        """
        Save(DrawWindow self, char const * theFileName) -> Standard_Boolean

        :type theFileName: const char *
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.DrawWindow_Save(self, *args)


    def DrawString(self, *args):
        """
        DrawString(DrawWindow self, int arg2, int arg3, char * arg4)

        :type : int
        :type : int
        :type : char *

        """
        return _Draw.DrawWindow_DrawString(self, *args)


    def DrawSegments(self, *args):
        """
        DrawSegments(DrawWindow self, Segment arg2, int arg3)

        :type : OCC.wrapper.Draw.Segment
        :type : int

        """
        return _Draw.DrawWindow_DrawSegments(self, *args)


    def InitBuffer(self, *args):
        """InitBuffer(DrawWindow self)"""
        return _Draw.DrawWindow_InitBuffer(self, *args)


    def Redraw(self, *args):
        """Redraw(DrawWindow self)"""
        return _Draw.DrawWindow_Redraw(self, *args)


    def SetColor(self, *args):
        """
        SetColor(DrawWindow self, Standard_Integer arg2)

        :type : int

        """
        return _Draw.DrawWindow_SetColor(self, *args)


    def SetMode(self, *args):
        """
        SetMode(DrawWindow self, int arg2)

        :type : int

        """
        return _Draw.DrawWindow_SetMode(self, *args)


    def DefineColor(*args):
        """
        DefineColor(Standard_Integer const arg1, char const * arg2) -> Standard_Boolean

        :type : int
        :type : const char *
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.DrawWindow_DefineColor(*args)

    DefineColor = staticmethod(DefineColor)

    def WExpose(self, *args):
        """WExpose(DrawWindow self)"""
        return _Draw.DrawWindow_WExpose(self, *args)


    def WButtonPress(self, *args):
        """
        WButtonPress(DrawWindow self, Standard_Integer const arg2, Standard_Integer const arg3, Standard_Integer const & arg4)

        :type : int
        :type : int
        :type : int

        """
        return _Draw.DrawWindow_WButtonPress(self, *args)


    def WButtonRelease(self, *args):
        """
        WButtonRelease(DrawWindow self, Standard_Integer const arg2, Standard_Integer const arg3, Standard_Integer const & arg4)

        :type : int
        :type : int
        :type : int

        """
        return _Draw.DrawWindow_WButtonRelease(self, *args)


    def WMotionNotify(self, *args):
        """
        WMotionNotify(DrawWindow self, Standard_Integer const arg2, Standard_Integer const arg3)

        :type : int
        :type : int

        """
        return _Draw.DrawWindow_WMotionNotify(self, *args)


    def WConfigureNotify(self, *args):
        """
        WConfigureNotify(DrawWindow self, Standard_Integer const arg2, Standard_Integer const arg3, Standard_Integer const arg4, Standard_Integer const arg5)

        :type : int
        :type : int
        :type : int
        :type : int

        """
        return _Draw.DrawWindow_WConfigureNotify(self, *args)


    def WUnmapNotify(self, *args):
        """WUnmapNotify(DrawWindow self)"""
        return _Draw.DrawWindow_WUnmapNotify(self, *args)


    def DrawProc(*args):
        """
        DrawProc(HWND arg1, UINT arg2, WPARAM arg3, LPARAM arg4) -> LRESULT

        :type : HWND
        :type : UINT
        :type : WPARAM
        :type : LPARAM
        :rtype: LRESULT

        """
        return _Draw.DrawWindow_DrawProc(*args)

    DrawProc = staticmethod(DrawProc)
    __swig_destroy__ = _Draw.delete_DrawWindow
DrawWindow_swigregister = _Draw.DrawWindow_swigregister
DrawWindow_swigregister(DrawWindow)

def DrawWindow_AddCallbackBeforeTerminate(*args):
    """
    DrawWindow_AddCallbackBeforeTerminate(DrawWindow::FCallbackBeforeTerminate theCB)

    This method registers a callback function that will be called just before exit.
    This is usefull especially for Windows platform, on which Draw is normally 
    self-terminated instead of exiting.

    :type theCB: FCallbackBeforeTerminate

    """
    return _Draw.DrawWindow_AddCallbackBeforeTerminate(*args)

def DrawWindow_RemoveCallbackBeforeTerminate(*args):
    """
    DrawWindow_RemoveCallbackBeforeTerminate(DrawWindow::FCallbackBeforeTerminate theCB)

    Just in case method for un-registering a callback previously registered by
    AddCallbackBeforeTerminate()

    :type theCB: FCallbackBeforeTerminate

    """
    return _Draw.DrawWindow_RemoveCallbackBeforeTerminate(*args)

def DrawWindow_Flush(*args):
    """DrawWindow_Flush()"""
    return _Draw.DrawWindow_Flush(*args)

def DrawWindow_DefineColor(*args):
    """
    DrawWindow_DefineColor(Standard_Integer const arg2, char const * arg3) -> Standard_Boolean

    :type : int
    :type : const char *
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Draw.DrawWindow_DefineColor(*args)

def DrawWindow_DrawProc(*args):
    """
    DrawWindow_DrawProc(HWND arg2, UINT arg3, WPARAM arg4, LPARAM arg5) -> LRESULT

    :type : HWND
    :type : UINT
    :type : WPARAM
    :type : LPARAM
    :rtype: LRESULT

    """
    return _Draw.DrawWindow_DrawProc(*args)

class Handle_Draw_Chronometer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Chronometer self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Chronometer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Chronometer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Chronometer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Chronometer self, Draw_Chronometer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Chronometer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Chronometer self, Handle_Draw_Chronometer theHandle) -> Handle_Draw_Chronometer
        assign(Handle_Draw_Chronometer self, Draw_Chronometer thePtr) -> Handle_Draw_Chronometer
        assign(Handle_Draw_Chronometer self, Handle_Draw_Chronometer theHandle) -> Handle_Draw_Chronometer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Chronometer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Chronometer self) -> Draw_Chronometer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Chronometer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Chronometer self) -> Draw_Chronometer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Chronometer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Chronometer self) -> Draw_Chronometer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Chronometer___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Chronometer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Chronometer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Chronometer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Chronometer_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Chronometer

    def Timer(self, *args):
        """
        Timer(Handle_Draw_Chronometer self) -> OSD_Timer

        :rtype: OCC.wrapper.OSD.OSD_Timer

        """
        return _Draw.Handle_Draw_Chronometer_Timer(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Chronometer self, Draw_Display dis)

        Does nothhing,

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Chronometer_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Chronometer self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Chronometer_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Chronometer self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Chronometer_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Chronometer self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Chronometer_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Chronometer self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Chronometer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Chronometer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Chronometer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Chronometer self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Chronometer_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Chronometer self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Chronometer_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Chronometer self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Chronometer_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Chronometer self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Chronometer_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Chronometer self) -> Standard_Boolean
        Visible(Handle_Draw_Chronometer self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Chronometer_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Chronometer self) -> Standard_Boolean
        Protected(Handle_Draw_Chronometer self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Chronometer_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Chronometer self) -> Standard_CString
        Name(Handle_Draw_Chronometer self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Chronometer_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Chronometer self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Chronometer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Chronometer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Chronometer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Chronometer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Chronometer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Chronometer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Chronometer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Chronometer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Chronometer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Chronometer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Chronometer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Chronometer self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Chronometer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Chronometer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Chronometer_DecrementRefCounter(self, *args)

Handle_Draw_Chronometer_swigregister = _Draw.Handle_Draw_Chronometer_swigregister
Handle_Draw_Chronometer_swigregister(Handle_Draw_Chronometer)

def Handle_Draw_Chronometer_DownCast(thing):
    return _Draw.Handle_Draw_Chronometer_DownCast(thing)
Handle_Draw_Chronometer_DownCast = _Draw.Handle_Draw_Chronometer_DownCast

class Handle_Draw_Text2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Text2D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Text2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Text2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Text2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Text2D self, Draw_Text2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Text2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Text2D self, Handle_Draw_Text2D theHandle) -> Handle_Draw_Text2D
        assign(Handle_Draw_Text2D self, Draw_Text2D thePtr) -> Handle_Draw_Text2D
        assign(Handle_Draw_Text2D self, Handle_Draw_Text2D theHandle) -> Handle_Draw_Text2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Text2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Text2D self) -> Draw_Text2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Text2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Text2D self) -> Draw_Text2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Text2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Text2D self) -> Draw_Text2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Text2D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Text2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Text2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Text2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Text2D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Text2D

    def SetPnt2d(self, *args):
        """
        SetPnt2d(Handle_Draw_Text2D self, gp_Pnt2d p)

        :type p: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Draw.Handle_Draw_Text2D_SetPnt2d(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Text2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Text2D_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Text2D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Text2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Text2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Text2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Text2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Text2D_Is3D(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Text2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Text2D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Text2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Text2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Text2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Text2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Text2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Text2D_Whatis(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Text2D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Text2D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Text2D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Text2D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Text2D self) -> Standard_Boolean
        Visible(Handle_Draw_Text2D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Text2D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Text2D self) -> Standard_Boolean
        Protected(Handle_Draw_Text2D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Text2D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Text2D self) -> Standard_CString
        Name(Handle_Draw_Text2D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Text2D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Text2D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Text2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Text2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Text2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Text2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Text2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Text2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Text2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Text2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Text2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Text2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Text2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Text2D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Text2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Text2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Text2D_DecrementRefCounter(self, *args)

Handle_Draw_Text2D_swigregister = _Draw.Handle_Draw_Text2D_swigregister
Handle_Draw_Text2D_swigregister(Handle_Draw_Text2D)

def Handle_Draw_Text2D_DownCast(thing):
    return _Draw.Handle_Draw_Text2D_DownCast(thing)
Handle_Draw_Text2D_DownCast = _Draw.Handle_Draw_Text2D_DownCast

class Handle_Draw_Axis3D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Axis3D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Axis3D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Axis3D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Axis3D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Axis3D self, Draw_Axis3D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Axis3D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Axis3D self, Handle_Draw_Axis3D theHandle) -> Handle_Draw_Axis3D
        assign(Handle_Draw_Axis3D self, Draw_Axis3D thePtr) -> Handle_Draw_Axis3D
        assign(Handle_Draw_Axis3D self, Handle_Draw_Axis3D theHandle) -> Handle_Draw_Axis3D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Axis3D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Axis3D self) -> Draw_Axis3D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Axis3D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Axis3D self) -> Draw_Axis3D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Axis3D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Axis3D self) -> Draw_Axis3D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Axis3D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Axis3D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Axis3D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Axis3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Axis3D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Axis3D

    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Axis3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Axis3D_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Axis3D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Axis3D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Axis3D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Axis3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Axis3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Axis3D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Axis3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Axis3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Axis3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Axis3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Axis3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Axis3D_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Axis3D self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Axis3D_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Axis3D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Axis3D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Axis3D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Axis3D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Axis3D self) -> Standard_Boolean
        Visible(Handle_Draw_Axis3D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Axis3D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Axis3D self) -> Standard_Boolean
        Protected(Handle_Draw_Axis3D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Axis3D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Axis3D self) -> Standard_CString
        Name(Handle_Draw_Axis3D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Axis3D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Axis3D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Axis3D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Axis3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Axis3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Axis3D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Axis3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Axis3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Axis3D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Axis3D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Axis3D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Axis3D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Axis3D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Axis3D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Axis3D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Axis3D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Axis3D_DecrementRefCounter(self, *args)

Handle_Draw_Axis3D_swigregister = _Draw.Handle_Draw_Axis3D_swigregister
Handle_Draw_Axis3D_swigregister(Handle_Draw_Axis3D)

def Handle_Draw_Axis3D_DownCast(thing):
    return _Draw.Handle_Draw_Axis3D_DownCast(thing)
Handle_Draw_Axis3D_DownCast = _Draw.Handle_Draw_Axis3D_DownCast

class Draw_(object):
    """MAQUETTE DESSIN MODELISATION"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Load(*args):
        """
        Load(Draw_Interpretor theDI, TCollection_AsciiString theKey, TCollection_AsciiString theResourceFileName, TCollection_AsciiString theDefaultsDirectory, TCollection_AsciiString theUserDefaultsDirectory, Standard_Boolean const Verbose)

        :type theDI: OCC.wrapper.Draw.Draw_Interpretor
        :type theKey: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theResourceFileName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theDefaultsDirectory: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theUserDefaultsDirectory: OCC.wrapper.TCollection.TCollection_AsciiString
        :type Verbose: bool

        """
        return _Draw.Draw__Load(*args)

    Load = staticmethod(Load)

    def GetInterpretor(*args):
        """
        GetInterpretor() -> Draw_Interpretor

        Returns main DRAW interpretor.

        :rtype: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw__GetInterpretor(*args)

    GetInterpretor = staticmethod(GetInterpretor)

    def Get(*args):
        """
        Get(Standard_CString & Name, Standard_Boolean const Complain) -> Handle_Draw_Drawable3D
        Get(Standard_CString const Name) -> Standard_Boolean

        Gets a   numeric  variable. Returns  True   if the
        variable exist.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw__Get(*args)

    Get = staticmethod(Get)

    def Set(*args):
        """
        Set(Standard_CString const Name, Handle_Draw_Drawable3D D, Standard_Boolean const Disp)
        Set(Standard_CString const Name, Handle_Draw_Drawable3D D)
        Set(Standard_CString const Name, Standard_Real const val)
        Set(Standard_CString const Name, Standard_CString const val)

        Sets a TCL sting variable

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Draw__Set(*args)

    Set = staticmethod(Set)

    def Atof(*args):
        """
        Atof(Standard_CString const Name) -> Standard_Real

        Converts numeric expression, that can involve DRAW
        variables, to real value.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Draw__Atof(*args)

    Atof = staticmethod(Atof)

    def Atoi(*args):
        """
        Atoi(Standard_CString const Name) -> Standard_Integer

        Converts numeric expression, that can involve DRAW
        variables, to integer value.
        Implemented as cast of Atof() to integer.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Draw__Atoi(*args)

    Atoi = staticmethod(Atoi)

    def LastPick(*args):
        """
        LastPick()

        Returns last graphic selection description.

        :type view: int
        :type X: int
        :type Y: int
        :type button: int

        """
        return _Draw.Draw__LastPick(*args)

    LastPick = staticmethod(LastPick)

    def Repaint(*args):
        """
        Repaint()

        Asks to repaint the screen after the current command.


        """
        return _Draw.Draw__Repaint(*args)

    Repaint = staticmethod(Repaint)

    def SetProgressBar(*args):
        """
        SetProgressBar(Handle_Draw_ProgressIndicator thePI)

        sets progress indicator

        :type thePI: OCC.wrapper.Draw.Handle_Draw_ProgressIndicator

        """
        return _Draw.Draw__SetProgressBar(*args)

    SetProgressBar = staticmethod(SetProgressBar)

    def GetProgressBar(*args):
        """
        GetProgressBar() -> Handle_Draw_ProgressIndicator

        gets progress indicator

        :rtype: OCC.wrapper.Draw.Handle_Draw_ProgressIndicator

        """
        return _Draw.Draw__GetProgressBar(*args)

    GetProgressBar = staticmethod(GetProgressBar)

    def Commands(*args):
        """
        Commands(Draw_Interpretor I)

        Defines all Draw commands

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw__Commands(*args)

    Commands = staticmethod(Commands)

    def BasicCommands(*args):
        """
        BasicCommands(Draw_Interpretor I)

        Defines Draw basic commands

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw__BasicCommands(*args)

    BasicCommands = staticmethod(BasicCommands)

    def VariableCommands(*args):
        """
        VariableCommands(Draw_Interpretor I)

        Defines Draw variables handling commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw__VariableCommands(*args)

    VariableCommands = staticmethod(VariableCommands)

    def GraphicCommands(*args):
        """
        GraphicCommands(Draw_Interpretor I)

        Defines Draw variables handling commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw__GraphicCommands(*args)

    GraphicCommands = staticmethod(GraphicCommands)

    def PloadCommands(*args):
        """
        PloadCommands(Draw_Interpretor I)

        Defines Loads Draw plugins commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw__PloadCommands(*args)

    PloadCommands = staticmethod(PloadCommands)

    def UnitCommands(*args):
        """
        UnitCommands(Draw_Interpretor I)

        Defines Draw unit commands

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw__UnitCommands(*args)

    UnitCommands = staticmethod(UnitCommands)

    def __init__(self):
        """MAQUETTE DESSIN MODELISATION"""
        this = _Draw.new_Draw_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Draw.delete_Draw_
Draw__swigregister = _Draw.Draw__swigregister
Draw__swigregister(Draw_)

def Draw__Load(*args):
    """
    Draw__Load(Draw_Interpretor theDI, TCollection_AsciiString theKey, TCollection_AsciiString theResourceFileName, TCollection_AsciiString theDefaultsDirectory, TCollection_AsciiString theUserDefaultsDirectory, Standard_Boolean const Verbose)

    :type theDI: OCC.wrapper.Draw.Draw_Interpretor
    :type theKey: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theResourceFileName: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theDefaultsDirectory: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theUserDefaultsDirectory: OCC.wrapper.TCollection.TCollection_AsciiString
    :type Verbose: bool

    """
    return _Draw.Draw__Load(*args)

def Draw__GetInterpretor(*args):
    """
    Draw__GetInterpretor() -> Draw_Interpretor

    Returns main DRAW interpretor.

    :rtype: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _Draw.Draw__GetInterpretor(*args)

def Draw__Get(*args):
    """
    Get(Standard_CString & Name, Standard_Boolean const Complain) -> Handle_Draw_Drawable3D
    Draw__Get(Standard_CString const Name) -> Standard_Boolean

    Gets a   numeric  variable. Returns  True   if the
    variable exist.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type val: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Draw.Draw__Get(*args)

def Draw__Set(*args):
    """
    Set(Standard_CString const Name, Handle_Draw_Drawable3D D, Standard_Boolean const Disp)
    Set(Standard_CString const Name, Handle_Draw_Drawable3D D)
    Set(Standard_CString const Name, Standard_Real const val)
    Draw__Set(Standard_CString const Name, Standard_CString const val)

    Sets a TCL sting variable

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type val: OCC.wrapper.Standard.Standard_CString

    """
    return _Draw.Draw__Set(*args)

def Draw__Atof(*args):
    """
    Draw__Atof(Standard_CString const Name) -> Standard_Real

    Converts numeric expression, that can involve DRAW
    variables, to real value.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Draw.Draw__Atof(*args)

def Draw__Atoi(*args):
    """
    Draw__Atoi(Standard_CString const Name) -> Standard_Integer

    Converts numeric expression, that can involve DRAW
    variables, to integer value.
    Implemented as cast of Atof() to integer.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Draw.Draw__Atoi(*args)

def Draw__LastPick(*args):
    """
    Draw__LastPick()

    Returns last graphic selection description.

    :type view: int
    :type X: int
    :type Y: int
    :type button: int

    """
    return _Draw.Draw__LastPick(*args)

def Draw__Repaint(*args):
    """
    Draw__Repaint()

    Asks to repaint the screen after the current command.


    """
    return _Draw.Draw__Repaint(*args)

def Draw__SetProgressBar(*args):
    """
    Draw__SetProgressBar(Handle_Draw_ProgressIndicator thePI)

    sets progress indicator

    :type thePI: OCC.wrapper.Draw.Handle_Draw_ProgressIndicator

    """
    return _Draw.Draw__SetProgressBar(*args)

def Draw__GetProgressBar(*args):
    """
    Draw__GetProgressBar() -> Handle_Draw_ProgressIndicator

    gets progress indicator

    :rtype: OCC.wrapper.Draw.Handle_Draw_ProgressIndicator

    """
    return _Draw.Draw__GetProgressBar(*args)

def Draw__Commands(*args):
    """
    Draw__Commands(Draw_Interpretor I)

    Defines all Draw commands

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _Draw.Draw__Commands(*args)

def Draw__BasicCommands(*args):
    """
    Draw__BasicCommands(Draw_Interpretor I)

    Defines Draw basic commands

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _Draw.Draw__BasicCommands(*args)

def Draw__VariableCommands(*args):
    """
    Draw__VariableCommands(Draw_Interpretor I)

    Defines Draw variables handling commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _Draw.Draw__VariableCommands(*args)

def Draw__GraphicCommands(*args):
    """
    Draw__GraphicCommands(Draw_Interpretor I)

    Defines Draw variables handling commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _Draw.Draw__GraphicCommands(*args)

def Draw__PloadCommands(*args):
    """
    Draw__PloadCommands(Draw_Interpretor I)

    Defines Loads Draw plugins commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _Draw.Draw__PloadCommands(*args)

def Draw__UnitCommands(*args):
    """
    Draw__UnitCommands(Draw_Interpretor I)

    Defines Draw unit commands

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _Draw.Draw__UnitCommands(*args)

class Draw_Segment3D(Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Segment3D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Segment3D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Segment3D self, gp_Pnt p1, gp_Pnt p2, Draw_Color col) -> Draw_Segment3D

        :type p1: OCC.wrapper.gp.gp_Pnt
        :type p2: OCC.wrapper.gp.gp_Pnt
        :type col: OCC.wrapper.Draw.Draw_Color

        """
        this = _Draw.new_Draw_Segment3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(Draw_Segment3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Segment3D_DrawOn(self, *args)


    def First(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Draw.Draw_Segment3D_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Draw.Draw_Segment3D_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Segment3D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Segment3D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Segment3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Segment3D
Draw_Segment3D_swigregister = _Draw.Draw_Segment3D_swigregister
Draw_Segment3D_swigregister(Draw_Segment3D)

def Draw_Segment3D_get_type_name(*args):
    """
    Draw_Segment3D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Segment3D_get_type_name(*args)

def Draw_Segment3D_get_type_descriptor(*args):
    """
    Draw_Segment3D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Segment3D_get_type_descriptor(*args)

class Handle_Draw_Text3D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Text3D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Text3D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Text3D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Text3D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Text3D self, Draw_Text3D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Text3D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Text3D self, Handle_Draw_Text3D theHandle) -> Handle_Draw_Text3D
        assign(Handle_Draw_Text3D self, Draw_Text3D thePtr) -> Handle_Draw_Text3D
        assign(Handle_Draw_Text3D self, Handle_Draw_Text3D theHandle) -> Handle_Draw_Text3D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Text3D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Text3D self) -> Draw_Text3D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Text3D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Text3D self) -> Draw_Text3D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Text3D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Text3D self) -> Draw_Text3D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Text3D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Text3D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Text3D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Text3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Text3D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Text3D

    def SetPnt(self, *args):
        """
        SetPnt(Handle_Draw_Text3D self, gp_Pnt p)

        :type p: OCC.wrapper.gp.gp_Pnt

        """
        return _Draw.Handle_Draw_Text3D_SetPnt(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Text3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Text3D_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Text3D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Text3D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Text3D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Text3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Text3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Text3D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Text3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Text3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Text3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Text3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Text3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Text3D_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Text3D self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Text3D_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Text3D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Text3D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Text3D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Text3D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Text3D self) -> Standard_Boolean
        Visible(Handle_Draw_Text3D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Text3D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Text3D self) -> Standard_Boolean
        Protected(Handle_Draw_Text3D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Text3D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Text3D self) -> Standard_CString
        Name(Handle_Draw_Text3D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Text3D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Text3D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Text3D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Text3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Text3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Text3D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Text3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Text3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Text3D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Text3D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Text3D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Text3D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Text3D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Text3D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Text3D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Text3D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Text3D_DecrementRefCounter(self, *args)

Handle_Draw_Text3D_swigregister = _Draw.Handle_Draw_Text3D_swigregister
Handle_Draw_Text3D_swigregister(Handle_Draw_Text3D)

def Handle_Draw_Text3D_DownCast(thing):
    return _Draw.Handle_Draw_Text3D_DownCast(thing)
Handle_Draw_Text3D_DownCast = _Draw.Handle_Draw_Text3D_DownCast

class Handle_Draw_Box(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Box self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Box_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Box self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Box_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Box self, Draw_Box thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Box_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Box self, Handle_Draw_Box theHandle) -> Handle_Draw_Box
        assign(Handle_Draw_Box self, Draw_Box thePtr) -> Handle_Draw_Box
        assign(Handle_Draw_Box self, Handle_Draw_Box theHandle) -> Handle_Draw_Box

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Box_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Box self) -> Draw_Box

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Box_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Box self) -> Draw_Box

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Box___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Box self) -> Draw_Box

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Box___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Box___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Box___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Box(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Box_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Box

    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Box self, Draw_Display theDis)

        Draws myOBB

        :type theDis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Box_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Box self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Box_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Box_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Box_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Box self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Box_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Box self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Box_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Box self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Box_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Box self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Box_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Box self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Box_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Box self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Box_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Box self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Box_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Box self) -> Standard_Boolean
        Visible(Handle_Draw_Box self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Box_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Box self) -> Standard_Boolean
        Protected(Handle_Draw_Box self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Box_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Box self) -> Standard_CString
        Name(Handle_Draw_Box self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Box_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Box self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Box_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Box self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Box self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Box_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Box self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Box self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Box_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Box self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Box_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Box self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Box_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Box self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Box_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Box self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Box_DecrementRefCounter(self, *args)

Handle_Draw_Box_swigregister = _Draw.Handle_Draw_Box_swigregister
Handle_Draw_Box_swigregister(Handle_Draw_Box)

def Handle_Draw_Box_DownCast(thing):
    return _Draw.Handle_Draw_Box_DownCast(thing)
Handle_Draw_Box_DownCast = _Draw.Handle_Draw_Box_DownCast

class Handle_Draw_Marker2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Marker2D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Marker2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Marker2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Marker2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Marker2D self, Draw_Marker2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Marker2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Marker2D self, Handle_Draw_Marker2D theHandle) -> Handle_Draw_Marker2D
        assign(Handle_Draw_Marker2D self, Draw_Marker2D thePtr) -> Handle_Draw_Marker2D
        assign(Handle_Draw_Marker2D self, Handle_Draw_Marker2D theHandle) -> Handle_Draw_Marker2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Marker2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Marker2D self) -> Draw_Marker2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Marker2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Marker2D self) -> Draw_Marker2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Marker2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Marker2D self) -> Draw_Marker2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Marker2D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Marker2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Marker2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Marker2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Marker2D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Marker2D

    def ChangePos(self, *args):
        """
        ChangePos(Handle_Draw_Marker2D self) -> gp_Pnt2d

        myPos field

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Draw.Handle_Draw_Marker2D_ChangePos(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Marker2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Marker2D_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Marker2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs always false

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Marker2D_PickReject(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Marker2D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Marker2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Marker2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Marker2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Marker2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Marker2D_Is3D(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Marker2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Marker2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Marker2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Marker2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Marker2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Marker2D_Whatis(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Marker2D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Marker2D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Marker2D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Marker2D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Marker2D self) -> Standard_Boolean
        Visible(Handle_Draw_Marker2D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Marker2D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Marker2D self) -> Standard_Boolean
        Protected(Handle_Draw_Marker2D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Marker2D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Marker2D self) -> Standard_CString
        Name(Handle_Draw_Marker2D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Marker2D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Marker2D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Marker2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Marker2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Marker2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Marker2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Marker2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Marker2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Marker2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Marker2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Marker2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Marker2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Marker2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Marker2D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Marker2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Marker2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Marker2D_DecrementRefCounter(self, *args)

Handle_Draw_Marker2D_swigregister = _Draw.Handle_Draw_Marker2D_swigregister
Handle_Draw_Marker2D_swigregister(Handle_Draw_Marker2D)

def Handle_Draw_Marker2D_DownCast(thing):
    return _Draw.Handle_Draw_Marker2D_DownCast(thing)
Handle_Draw_Marker2D_DownCast = _Draw.Handle_Draw_Marker2D_DownCast

class Handle_Draw_Number(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Number self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Number_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Number self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Number_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Number self, Draw_Number thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Number_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Number self, Handle_Draw_Number theHandle) -> Handle_Draw_Number
        assign(Handle_Draw_Number self, Draw_Number thePtr) -> Handle_Draw_Number
        assign(Handle_Draw_Number self, Handle_Draw_Number theHandle) -> Handle_Draw_Number

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Number_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Number self) -> Draw_Number

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Number_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Number self) -> Draw_Number

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Number___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Number self) -> Draw_Number

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Number___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Number___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Number___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Number(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Number_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Number

    def Value(self, *args):
        """
        Value(Handle_Draw_Number self) -> Standard_Real
        Value(Handle_Draw_Number self, Standard_Real const V)

        :type V: float

        """
        return _Draw.Handle_Draw_Number_Value(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Number self, Draw_Display dis)

        Does nothhing,

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Number_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Number self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Number_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Number self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Number_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Number self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Number_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Number self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Number_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Number_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Number_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Number self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Number_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Number self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Number_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Number self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Number_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Number self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Number_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Number self) -> Standard_Boolean
        Visible(Handle_Draw_Number self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Number_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Number self) -> Standard_Boolean
        Protected(Handle_Draw_Number self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Number_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Number self) -> Standard_CString
        Name(Handle_Draw_Number self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Number_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Number self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Number_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Number self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Number self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Number_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Number self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Number self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Number_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Number self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Number_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Number self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Number_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Number self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Number_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Number self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Number_DecrementRefCounter(self, *args)

Handle_Draw_Number_swigregister = _Draw.Handle_Draw_Number_swigregister
Handle_Draw_Number_swigregister(Handle_Draw_Number)

def Handle_Draw_Number_DownCast(thing):
    return _Draw.Handle_Draw_Number_DownCast(thing)
Handle_Draw_Number_DownCast = _Draw.Handle_Draw_Number_DownCast

class Handle_Draw_ProgressIndicator(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_ProgressIndicator self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_ProgressIndicator_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_ProgressIndicator self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_ProgressIndicator_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_ProgressIndicator self, Draw_ProgressIndicator thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_ProgressIndicator_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_ProgressIndicator self, Handle_Draw_ProgressIndicator theHandle) -> Handle_Draw_ProgressIndicator
        assign(Handle_Draw_ProgressIndicator self, Draw_ProgressIndicator thePtr) -> Handle_Draw_ProgressIndicator
        assign(Handle_Draw_ProgressIndicator self, Handle_Draw_ProgressIndicator theHandle) -> Handle_Draw_ProgressIndicator

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_ProgressIndicator_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_ProgressIndicator self) -> Draw_ProgressIndicator

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_ProgressIndicator_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_ProgressIndicator self) -> Draw_ProgressIndicator

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_ProgressIndicator___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_ProgressIndicator self) -> Draw_ProgressIndicator

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_ProgressIndicator___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_ProgressIndicator___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_ProgressIndicator___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_ProgressIndicator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_ProgressIndicator_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_ProgressIndicator

    def SetTextMode(self, *args):
        """
        SetTextMode(Handle_Draw_ProgressIndicator self, Standard_Boolean const theTextMode)

        Sets text output mode (on/off)

        :type theTextMode: bool

        """
        return _Draw.Handle_Draw_ProgressIndicator_SetTextMode(self, *args)


    def GetTextMode(self, *args):
        """
        GetTextMode(Handle_Draw_ProgressIndicator self) -> Standard_Boolean

        Gets text output mode (on/off)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_GetTextMode(self, *args)


    def SetGraphMode(self, *args):
        """
        SetGraphMode(Handle_Draw_ProgressIndicator self, Standard_Boolean const theGraphMode)

        Sets graphical output mode (on/off)

        :type theGraphMode: bool

        """
        return _Draw.Handle_Draw_ProgressIndicator_SetGraphMode(self, *args)


    def GetGraphMode(self, *args):
        """
        GetGraphMode(Handle_Draw_ProgressIndicator self) -> Standard_Boolean

        Gets graphical output mode (on/off)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_GetGraphMode(self, *args)


    def Reset(self, *args):
        """
        Reset(Handle_Draw_ProgressIndicator self)

        Clears/erases opened TCL windows if any
        and sets myBreak to False


        """
        return _Draw.Handle_Draw_ProgressIndicator_Reset(self, *args)


    def Show(self, *args):
        """
        Show(Handle_Draw_ProgressIndicator self, Standard_Boolean const force) -> Standard_Boolean

        Defines method Show of Progress Indicator

        :type force: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_Show(self, *args)


    def UserBreak(self, *args):
        """
        UserBreak(Handle_Draw_ProgressIndicator self) -> Standard_Boolean

        Redefines method UserBreak of Progress Indicator

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_UserBreak(self, *args)


    def DefaultTextMode(self, *args):
        """
        DefaultTextMode(Handle_Draw_ProgressIndicator self) -> Standard_Boolean &

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_DefaultTextMode(self, *args)


    def DefaultGraphMode(self, *args):
        """
        DefaultGraphMode(Handle_Draw_ProgressIndicator self) -> Standard_Boolean &

        Get/Set default values for output modes

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_DefaultGraphMode(self, *args)


    def StopIndicator(self, *args):
        """
        StopIndicator(Handle_Draw_ProgressIndicator self) -> Standard_Address &

        Internal method for implementation of UserBreak mechanism;
        note that it uses static variable and thus not thread-safe! 

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _Draw.Handle_Draw_ProgressIndicator_StopIndicator(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_ProgressIndicator self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_ProgressIndicator_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_ProgressIndicator_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_ProgressIndicator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_Draw_ProgressIndicator self, Standard_CString const name)
        SetName(Handle_Draw_ProgressIndicator self, Handle_TCollection_HAsciiString name)

        Set (optional) name for scale

        :type name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _Draw.Handle_Draw_ProgressIndicator_SetName(self, *args)


    def SetRange(self, *args):
        """
        SetRange(Handle_Draw_ProgressIndicator self, Standard_Real const min, Standard_Real const max)

        Set range for current scale

        :type min: float
        :type max: float

        """
        return _Draw.Handle_Draw_ProgressIndicator_SetRange(self, *args)


    def SetStep(self, *args):
        """
        SetStep(Handle_Draw_ProgressIndicator self, Standard_Real const step)

        Set step for current scale

        :type step: float

        """
        return _Draw.Handle_Draw_ProgressIndicator_SetStep(self, *args)


    def SetInfinite(self, *args):
        """
        SetInfinite(Handle_Draw_ProgressIndicator self, Standard_Boolean const isInf)

        Set or drop infinite mode for the current scale

        :type isInf: bool

        """
        return _Draw.Handle_Draw_ProgressIndicator_SetInfinite(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Handle_Draw_ProgressIndicator self, Standard_CString const name, Standard_Real const min, Standard_Real const max, Standard_Real const step, Standard_Boolean const isInf)
        SetScale(Handle_Draw_ProgressIndicator self, Standard_Real const min, Standard_Real const max, Standard_Real const step, Standard_Boolean const isInf)

        Set all parameters for current scale

        :type min: float
        :type max: float
        :type step: float
        :type isInf: bool

        """
        return _Draw.Handle_Draw_ProgressIndicator_SetScale(self, *args)


    def GetScale(self, *args):
        """
        GetScale(Handle_Draw_ProgressIndicator self)

        Returns all parameters for current scale

        :type min: float
        :type max: float
        :type step: float
        :type isInf: bool

        """
        return _Draw.Handle_Draw_ProgressIndicator_GetScale(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_Draw_ProgressIndicator self, Standard_Real const val)

        :type val: float

        """
        return _Draw.Handle_Draw_ProgressIndicator_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_Draw_ProgressIndicator self) -> Standard_Real

        Set and get progress value at current scale
        If the value to be set is more than currently set one, or out
        of range for the current scale, it is limited by that range

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Handle_Draw_ProgressIndicator_GetValue(self, *args)


    def Increment(self, *args):
        """
        Increment(Handle_Draw_ProgressIndicator self)
        Increment(Handle_Draw_ProgressIndicator self, Standard_Real const step)

        Increment the progress value by the default of specified step

        :type step: float

        """
        return _Draw.Handle_Draw_ProgressIndicator_Increment(self, *args)


    def NewScope(self, *args):
        """
        NewScope(Handle_Draw_ProgressIndicator self, Standard_CString const name=None) -> Standard_Boolean
        NewScope(Handle_Draw_ProgressIndicator self, Handle_TCollection_HAsciiString name) -> Standard_Boolean
        NewScope(Handle_Draw_ProgressIndicator self, Standard_Real const span, Standard_CString const name=None) -> Standard_Boolean
        NewScope(Handle_Draw_ProgressIndicator self, Standard_Real const span, Handle_TCollection_HAsciiString name) -> Standard_Boolean

        Creates new scope on a part of a current scale from current
        position with span either equal to default step, or specified
        The scale for the new scope will have specified name and
        ranged from 0 to 100 with step 1
        Returns False if something is wrong in arguments or in current
        position of progress indicator; scope is opened anyway

        :type span: float
        :type name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_NewScope(self, *args)


    def EndScope(self, *args):
        """
        EndScope(Handle_Draw_ProgressIndicator self) -> Standard_Boolean

        Close the current scope and thus return to previous scale
        Updates position to be at the end of the closing scope
        Returns False if no scope is opened

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_EndScope(self, *args)


    def NextScope(self, *args):
        """
        NextScope(Handle_Draw_ProgressIndicator self, Standard_CString const name=None) -> Standard_Boolean
        NextScope(Handle_Draw_ProgressIndicator self, Standard_Real const span, Standard_CString const name=None) -> Standard_Boolean

        Optimized version of { return EndScope() && NewScope(); }

        :type span: float
        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_NextScope(self, *args)


    def GetPosition(self, *args):
        """
        GetPosition(Handle_Draw_ProgressIndicator self) -> Standard_Real

        Returns total progress position on the basic scale
        ranged from 0. to 1.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Handle_Draw_ProgressIndicator_GetPosition(self, *args)


    def GetNbScopes(self, *args):
        """
        GetNbScopes(Handle_Draw_ProgressIndicator self) -> Standard_Integer

        Returns current number of opened scopes
        This number is always >=1 as top-level scale is always present

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_ProgressIndicator_GetNbScopes(self, *args)


    def GetScope(self, *args):
        """
        Returns data for scale of index-th scope
        The first scope is current one, the last is the top-level one

        :type index: int
        :rtype: OCC.wrapper.Message.Message_ProgressScale

        """
        res = _Draw.Handle_Draw_ProgressIndicator_GetScope(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Draw_ProgressIndicator self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_ProgressIndicator_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_ProgressIndicator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_ProgressIndicator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_ProgressIndicator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_ProgressIndicator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_ProgressIndicator_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_ProgressIndicator self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_ProgressIndicator_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_ProgressIndicator self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_ProgressIndicator_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_ProgressIndicator self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_ProgressIndicator_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_ProgressIndicator self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_ProgressIndicator_DecrementRefCounter(self, *args)

Handle_Draw_ProgressIndicator_swigregister = _Draw.Handle_Draw_ProgressIndicator_swigregister
Handle_Draw_ProgressIndicator_swigregister(Handle_Draw_ProgressIndicator)

def Handle_Draw_ProgressIndicator_DownCast(thing):
    return _Draw.Handle_Draw_ProgressIndicator_DownCast(thing)
Handle_Draw_ProgressIndicator_DownCast = _Draw.Handle_Draw_ProgressIndicator_DownCast

class Handle_Draw_Drawable3D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Drawable3D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Drawable3D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Drawable3D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Drawable3D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Drawable3D self, Draw_Drawable3D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Drawable3D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Drawable3D self, Handle_Draw_Drawable3D theHandle) -> Handle_Draw_Drawable3D
        assign(Handle_Draw_Drawable3D self, Draw_Drawable3D thePtr) -> Handle_Draw_Drawable3D
        assign(Handle_Draw_Drawable3D self, Handle_Draw_Drawable3D theHandle) -> Handle_Draw_Drawable3D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Drawable3D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Drawable3D self) -> Draw_Drawable3D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Drawable3D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Drawable3D self) -> Draw_Drawable3D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Drawable3D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Drawable3D self) -> Draw_Drawable3D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Drawable3D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Drawable3D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Drawable3D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Drawable3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Drawable3D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Drawable3D

    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Drawable3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Drawable3D_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Drawable3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Drawable3D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Drawable3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Drawable3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Drawable3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Drawable3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Drawable3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Drawable3D_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Drawable3D self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Drawable3D_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Drawable3D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Drawable3D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Drawable3D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Drawable3D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Drawable3D self) -> Standard_Boolean
        Visible(Handle_Draw_Drawable3D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Drawable3D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Drawable3D self) -> Standard_Boolean
        Protected(Handle_Draw_Drawable3D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Drawable3D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Drawable3D self) -> Standard_CString
        Name(Handle_Draw_Drawable3D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Drawable3D_Name(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Drawable3D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Drawable3D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Drawable3D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Drawable3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Draw_Drawable3D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Drawable3D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Drawable3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Drawable3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Drawable3D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Drawable3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Drawable3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Drawable3D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Drawable3D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Drawable3D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Drawable3D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Drawable3D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Drawable3D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Drawable3D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Drawable3D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Drawable3D_DecrementRefCounter(self, *args)

Handle_Draw_Drawable3D_swigregister = _Draw.Handle_Draw_Drawable3D_swigregister
Handle_Draw_Drawable3D_swigregister(Handle_Draw_Drawable3D)

def Handle_Draw_Drawable3D_DownCast(thing):
    return _Draw.Handle_Draw_Drawable3D_DownCast(thing)
Handle_Draw_Drawable3D_DownCast = _Draw.Handle_Draw_Drawable3D_DownCast

class Handle_Draw_Segment3D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Segment3D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Segment3D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Segment3D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Segment3D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Segment3D self, Draw_Segment3D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Segment3D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Segment3D self, Handle_Draw_Segment3D theHandle) -> Handle_Draw_Segment3D
        assign(Handle_Draw_Segment3D self, Draw_Segment3D thePtr) -> Handle_Draw_Segment3D
        assign(Handle_Draw_Segment3D self, Handle_Draw_Segment3D theHandle) -> Handle_Draw_Segment3D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Segment3D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Segment3D self) -> Draw_Segment3D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Segment3D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Segment3D self) -> Draw_Segment3D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Segment3D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Segment3D self) -> Draw_Segment3D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Segment3D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Segment3D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Segment3D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Segment3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Segment3D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Segment3D

    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Segment3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Segment3D_DrawOn(self, *args)


    def First(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Draw.Handle_Draw_Segment3D_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Draw.Handle_Draw_Segment3D_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Segment3D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Segment3D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Segment3D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Segment3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Segment3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Segment3D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Segment3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Segment3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Segment3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Segment3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Segment3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Segment3D_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Segment3D self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Segment3D_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Segment3D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Segment3D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Segment3D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Segment3D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Segment3D self) -> Standard_Boolean
        Visible(Handle_Draw_Segment3D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Segment3D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Segment3D self) -> Standard_Boolean
        Protected(Handle_Draw_Segment3D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Segment3D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Segment3D self) -> Standard_CString
        Name(Handle_Draw_Segment3D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Segment3D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Segment3D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Segment3D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Segment3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Segment3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Segment3D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Segment3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Segment3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Segment3D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Segment3D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Segment3D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Segment3D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Segment3D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Segment3D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Segment3D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Segment3D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Segment3D_DecrementRefCounter(self, *args)

Handle_Draw_Segment3D_swigregister = _Draw.Handle_Draw_Segment3D_swigregister
Handle_Draw_Segment3D_swigregister(Handle_Draw_Segment3D)

def Handle_Draw_Segment3D_DownCast(thing):
    return _Draw.Handle_Draw_Segment3D_DownCast(thing)
Handle_Draw_Segment3D_DownCast = _Draw.Handle_Draw_Segment3D_DownCast

class Draw_Grid(Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Grid
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Grid(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Grid self) -> Draw_Grid

        Creates a grid.


        """
        this = _Draw.new_Draw_Grid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Steps(self, *args):
        """
        Steps(Draw_Grid self, Standard_Real const StepX, Standard_Real const StepY, Standard_Real const StepZ)

        Sets the steps along the X, Y & Z axis.

        :type StepX: float
        :type StepY: float
        :type StepZ: float

        """
        return _Draw.Draw_Grid_Steps(self, *args)


    def StepX(self, *args):
        """
        StepX(Draw_Grid self) -> Standard_Real

        Returns the step along the X axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Draw_Grid_StepX(self, *args)


    def StepY(self, *args):
        """
        StepY(Draw_Grid self) -> Standard_Real

        Returns the step along the Y axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Draw_Grid_StepY(self, *args)


    def StepZ(self, *args):
        """
        StepZ(Draw_Grid self) -> Standard_Real

        Returns the step along the Z axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Draw_Grid_StepZ(self, *args)


    def IsActive(self, *args):
        """
        IsActive(Draw_Grid self) -> Standard_Boolean

        Returns if the grid is active or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Grid_IsActive(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Draw_Grid self, Draw_Display Out)

        Displays the grid.

        :type Out: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Grid_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Grid_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Grid_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Grid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Grid
Draw_Grid_swigregister = _Draw.Draw_Grid_swigregister
Draw_Grid_swigregister(Draw_Grid)

def Draw_Grid_get_type_name(*args):
    """
    Draw_Grid_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Grid_get_type_name(*args)

def Draw_Grid_get_type_descriptor(*args):
    """
    Draw_Grid_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Grid_get_type_descriptor(*args)

class Draw_Marker3D(Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Marker3D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Marker3D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Marker3D self, gp_Pnt P, Draw_MarkerShape const T, Draw_Color C, Standard_Integer const ISize=5) -> Draw_Marker3D
        __init__(Draw_Marker3D self, gp_Pnt P, Draw_MarkerShape const T, Draw_Color C, Standard_Real const RSize) -> Draw_Marker3D

        :type P: OCC.wrapper.gp.gp_Pnt
        :type T: OCC.wrapper.Draw.Draw_MarkerShape
        :type C: OCC.wrapper.Draw.Draw_Color
        :type RSize: float

        """
        this = _Draw.new_Draw_Marker3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ChangePos(self, *args):
        """
        ChangePos(Draw_Marker3D self) -> gp_Pnt

        myPos field

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Draw.Draw_Marker3D_ChangePos(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Draw_Marker3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Marker3D_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Draw_Marker3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs always false

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Marker3D_PickReject(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Marker3D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Marker3D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Marker3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Marker3D
Draw_Marker3D_swigregister = _Draw.Draw_Marker3D_swigregister
Draw_Marker3D_swigregister(Draw_Marker3D)

def Draw_Marker3D_get_type_name(*args):
    """
    Draw_Marker3D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Marker3D_get_type_name(*args)

def Draw_Marker3D_get_type_descriptor(*args):
    """
    Draw_Marker3D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Marker3D_get_type_descriptor(*args)

class Draw_Circle3D(Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Circle3D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Circle3D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Circle3D self, gp_Circ C, Standard_Real const A1, Standard_Real const A2, Draw_Color col) -> Draw_Circle3D

        :type C: OCC.wrapper.gp.gp_Circ
        :type A1: float
        :type A2: float
        :type col: OCC.wrapper.Draw.Draw_Color

        """
        this = _Draw.new_Draw_Circle3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(Draw_Circle3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Draw_Circle3D_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Circle3D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Circle3D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Circle3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Circle3D
Draw_Circle3D_swigregister = _Draw.Draw_Circle3D_swigregister
Draw_Circle3D_swigregister(Draw_Circle3D)

def Draw_Circle3D_get_type_name(*args):
    """
    Draw_Circle3D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Circle3D_get_type_name(*args)

def Draw_Circle3D_get_type_descriptor(*args):
    """
    Draw_Circle3D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Circle3D_get_type_descriptor(*args)

class NCollection_Sequence_Handle_Draw_Drawable3D(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Draw_Drawable3D self) -> NCollection_Sequence< opencascade::handle< Draw_Drawable3D > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Draw_Drawable3D self) -> NCollection_Sequence< opencascade::handle< Draw_Drawable3D > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Draw_Drawable3D self) -> NCollection_Sequence< opencascade::handle< Draw_Drawable3D > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Draw_Drawable3D self) -> NCollection_Sequence< opencascade::handle< Draw_Drawable3D > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Draw.new_NCollection_Sequence_Handle_Draw_Drawable3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Draw_Drawable3D self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Draw_Drawable3D self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Draw_Drawable3D self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Draw_Drawable3D self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Draw_Drawable3D self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Draw_Drawable3D self)

        Reverse sequence


        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Draw_Drawable3D self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Draw_Drawable3D self, NCollection_Sequence_Handle_Draw_Drawable3D theOther) -> NCollection_Sequence_Handle_Draw_Drawable3D

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Draw_Drawable3D self, NCollection_Sequence_Handle_Draw_Drawable3D theOther) -> NCollection_Sequence_Handle_Draw_Drawable3D

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Draw_Drawable3D self, NCollection_Sequence< opencascade::handle< Draw_Drawable3D > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Draw_Drawable3D self, Handle_Draw_Drawable3D theItem)
        Append(NCollection_Sequence_Handle_Draw_Drawable3D self, NCollection_Sequence_Handle_Draw_Drawable3D theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Draw_Drawable3D self, Handle_Draw_Drawable3D theItem)
        Prepend(NCollection_Sequence_Handle_Draw_Drawable3D self, NCollection_Sequence_Handle_Draw_Drawable3D theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theIndex, Handle_Draw_Drawable3D theItem)
        InsertBefore(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Draw_Drawable3D theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Draw_Drawable3D self, NCollection_Sequence< opencascade::handle< Draw_Drawable3D > >::Iterator & thePosition, Handle_Draw_Drawable3D theItem)
        InsertAfter(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Draw_Drawable3D theSeq)
        InsertAfter(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theIndex, Handle_Draw_Drawable3D theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Draw_Drawable3D theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Draw_Drawable3D self) -> Handle_Draw_Drawable3D

        First item access

        :rtype: TheItemType &

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Draw_Drawable3D self) -> Handle_Draw_Drawable3D

        Last item access

        :rtype: TheItemType &

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theIndex) -> Handle_Draw_Drawable3D

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Draw.NCollection_Sequence_Handle_Draw_Drawable3D___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Draw_Drawable3D self, Standard_Integer const theIndex, Handle_Draw_Drawable3D theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_SetValue(self, *args)


    def __iter__(self):
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D___iter__(self)
    __swig_destroy__ = _Draw.delete_NCollection_Sequence_Handle_Draw_Drawable3D
NCollection_Sequence_Handle_Draw_Drawable3D_swigregister = _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_swigregister
NCollection_Sequence_Handle_Draw_Drawable3D_swigregister(NCollection_Sequence_Handle_Draw_Drawable3D)

def NCollection_Sequence_Handle_Draw_Drawable3D_delNode(*args):
    """
    NCollection_Sequence_Handle_Draw_Drawable3D_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_delNode(*args)

class NCollection_Sequence_Handle_Draw_Drawable3D_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Draw.new_NCollection_Sequence_Handle_Draw_Drawable3D_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Draw.delete_NCollection_Sequence_Handle_Draw_Drawable3D_IteratorHelper

    def __next__(self):
        return _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Draw_Drawable3D_IteratorHelper_swigregister = _Draw.NCollection_Sequence_Handle_Draw_Drawable3D_IteratorHelper_swigregister
NCollection_Sequence_Handle_Draw_Drawable3D_IteratorHelper_swigregister(NCollection_Sequence_Handle_Draw_Drawable3D_IteratorHelper)


try:
	Draw_SequenceOfDrawable3D = NCollection_Sequence_Handle_Draw_Drawable3D
except NameError:
	pass # does not exist, probably ignored

class Segment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(Segment self) -> Segment"""
        this = _Draw.new_Segment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Draw.delete_Segment
Segment_swigregister = _Draw.Segment_swigregister
Segment_swigregister(Segment)

class Draw_Color(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Draw_Color self) -> Draw_Color
        __init__(Draw_Color self, Draw_ColorKind const c) -> Draw_Color

        :type c: OCC.wrapper.Draw.Draw_ColorKind

        """
        this = _Draw.new_Draw_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ID(self, *args):
        """
        ID(Draw_Color self) -> Draw_ColorKind

        :rtype: OCC.wrapper.Draw.Draw_ColorKind

        """
        return _Draw.Draw_Color_ID(self, *args)

    __swig_destroy__ = _Draw.delete_Draw_Color
Draw_Color_swigregister = _Draw.Draw_Color_swigregister
Draw_Color_swigregister(Draw_Color)

class Handle_Draw_Grid(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Grid self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Grid_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Grid self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Grid_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Grid self, Draw_Grid thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Grid_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Grid self, Handle_Draw_Grid theHandle) -> Handle_Draw_Grid
        assign(Handle_Draw_Grid self, Draw_Grid thePtr) -> Handle_Draw_Grid
        assign(Handle_Draw_Grid self, Handle_Draw_Grid theHandle) -> Handle_Draw_Grid

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Grid_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Grid self) -> Draw_Grid

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Grid_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Grid self) -> Draw_Grid

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Grid___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Grid self) -> Draw_Grid

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Grid___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Grid___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Grid___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Grid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Grid_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Grid

    def Steps(self, *args):
        """
        Steps(Handle_Draw_Grid self, Standard_Real const StepX, Standard_Real const StepY, Standard_Real const StepZ)

        Sets the steps along the X, Y & Z axis.

        :type StepX: float
        :type StepY: float
        :type StepZ: float

        """
        return _Draw.Handle_Draw_Grid_Steps(self, *args)


    def StepX(self, *args):
        """
        StepX(Handle_Draw_Grid self) -> Standard_Real

        Returns the step along the X axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Handle_Draw_Grid_StepX(self, *args)


    def StepY(self, *args):
        """
        StepY(Handle_Draw_Grid self) -> Standard_Real

        Returns the step along the Y axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Handle_Draw_Grid_StepY(self, *args)


    def StepZ(self, *args):
        """
        StepZ(Handle_Draw_Grid self) -> Standard_Real

        Returns the step along the Z axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Handle_Draw_Grid_StepZ(self, *args)


    def IsActive(self, *args):
        """
        IsActive(Handle_Draw_Grid self) -> Standard_Boolean

        Returns if the grid is active or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Grid_IsActive(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Grid self, Draw_Display Out)

        Displays the grid.

        :type Out: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Grid_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Grid self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Grid_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Grid_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Grid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Grid self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Grid_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Grid self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Grid_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Grid self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Grid_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Grid self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Grid_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Grid self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Grid_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Grid self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Grid_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Grid self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Grid_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Grid self) -> Standard_Boolean
        Visible(Handle_Draw_Grid self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Grid_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Grid self) -> Standard_Boolean
        Protected(Handle_Draw_Grid self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Grid_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Grid self) -> Standard_CString
        Name(Handle_Draw_Grid self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Grid_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Grid self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Grid_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Grid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Grid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Grid_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Grid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Grid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Grid_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Grid self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Grid_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Grid self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Grid_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Grid self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Grid_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Grid self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Grid_DecrementRefCounter(self, *args)

Handle_Draw_Grid_swigregister = _Draw.Handle_Draw_Grid_swigregister
Handle_Draw_Grid_swigregister(Handle_Draw_Grid)

def Handle_Draw_Grid_DownCast(thing):
    return _Draw.Handle_Draw_Grid_DownCast(thing)
Handle_Draw_Grid_DownCast = _Draw.Handle_Draw_Grid_DownCast

class Handle_Draw_Printer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Printer self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Printer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Printer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Printer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Printer self, Draw_Printer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Printer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Printer self, Handle_Draw_Printer theHandle) -> Handle_Draw_Printer
        assign(Handle_Draw_Printer self, Draw_Printer thePtr) -> Handle_Draw_Printer
        assign(Handle_Draw_Printer self, Handle_Draw_Printer theHandle) -> Handle_Draw_Printer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Printer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Printer self) -> Draw_Printer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Printer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Printer self) -> Draw_Printer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Printer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Printer self) -> Draw_Printer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Printer___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Printer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Printer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Printer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Printer_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Printer

    def Send(self, *args):
        """
        Send(Handle_Draw_Printer self, TCollection_ExtendedString theString, Message_Gravity const theGravity, Standard_Boolean const putEndl)
        Send(Handle_Draw_Printer self, Standard_CString const theString, Message_Gravity const theGravity, Standard_Boolean const putEndl)
        Send(Handle_Draw_Printer self, TCollection_AsciiString theString, Message_Gravity const theGravity, Standard_Boolean const putEndl)

        Send a string message with specified trace level.
        The parameter putEndl specified whether end-of-line
        should be added to the end of the message.
        Default implementation calls first method Send().

        :type theString: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theGravity: OCC.wrapper.Message.Message_Gravity
        :type putEndl: bool

        """
        return _Draw.Handle_Draw_Printer_Send(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Printer self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Printer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Printer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Printer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetTraceLevel(self, *args):
        """
        GetTraceLevel(Handle_Draw_Printer self) -> Message_Gravity

        Return trace level used for filtering messages;
        messages with lover gravity will be ignored.

        :rtype: OCC.wrapper.Message.Message_Gravity

        """
        return _Draw.Handle_Draw_Printer_GetTraceLevel(self, *args)


    def SetTraceLevel(self, *args):
        """
        SetTraceLevel(Handle_Draw_Printer self, Message_Gravity const theTraceLevel)

        Set trace level used for filtering messages.
        By default, trace level is Message_Info, so that all messages are output

        :type theTraceLevel: OCC.wrapper.Message.Message_Gravity

        """
        return _Draw.Handle_Draw_Printer_SetTraceLevel(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Printer self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Printer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Printer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Printer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Printer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Printer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Printer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Printer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Printer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Printer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Printer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Printer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Printer self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Printer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Printer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Printer_DecrementRefCounter(self, *args)

Handle_Draw_Printer_swigregister = _Draw.Handle_Draw_Printer_swigregister
Handle_Draw_Printer_swigregister(Handle_Draw_Printer)

def Handle_Draw_Printer_DownCast(thing):
    return _Draw.Handle_Draw_Printer_DownCast(thing)
Handle_Draw_Printer_DownCast = _Draw.Handle_Draw_Printer_DownCast

class Handle_Draw_Circle3D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Circle3D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Circle3D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Circle3D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Circle3D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Circle3D self, Draw_Circle3D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Circle3D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Circle3D self, Handle_Draw_Circle3D theHandle) -> Handle_Draw_Circle3D
        assign(Handle_Draw_Circle3D self, Draw_Circle3D thePtr) -> Handle_Draw_Circle3D
        assign(Handle_Draw_Circle3D self, Handle_Draw_Circle3D theHandle) -> Handle_Draw_Circle3D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Circle3D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Circle3D self) -> Draw_Circle3D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Circle3D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Circle3D self) -> Draw_Circle3D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Circle3D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Circle3D self) -> Draw_Circle3D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Circle3D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Circle3D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Circle3D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Circle3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Circle3D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Circle3D

    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Circle3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Circle3D_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Circle3D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Circle3D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Circle3D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Circle3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Circle3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Circle3D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Circle3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Circle3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Circle3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Circle3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Circle3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Circle3D_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Circle3D self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Circle3D_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Circle3D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Circle3D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Circle3D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Circle3D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Circle3D self) -> Standard_Boolean
        Visible(Handle_Draw_Circle3D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Circle3D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Circle3D self) -> Standard_Boolean
        Protected(Handle_Draw_Circle3D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Circle3D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Circle3D self) -> Standard_CString
        Name(Handle_Draw_Circle3D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Circle3D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Circle3D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Circle3D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Circle3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Circle3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Circle3D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Circle3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Circle3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Circle3D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Circle3D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Circle3D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Circle3D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Circle3D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Circle3D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Circle3D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Circle3D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Circle3D_DecrementRefCounter(self, *args)

Handle_Draw_Circle3D_swigregister = _Draw.Handle_Draw_Circle3D_swigregister
Handle_Draw_Circle3D_swigregister(Handle_Draw_Circle3D)

def Handle_Draw_Circle3D_DownCast(thing):
    return _Draw.Handle_Draw_Circle3D_DownCast(thing)
Handle_Draw_Circle3D_DownCast = _Draw.Handle_Draw_Circle3D_DownCast

class Handle_Draw_Segment2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Segment2D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Segment2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Segment2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Segment2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Segment2D self, Draw_Segment2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Segment2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Segment2D self, Handle_Draw_Segment2D theHandle) -> Handle_Draw_Segment2D
        assign(Handle_Draw_Segment2D self, Draw_Segment2D thePtr) -> Handle_Draw_Segment2D
        assign(Handle_Draw_Segment2D self, Handle_Draw_Segment2D theHandle) -> Handle_Draw_Segment2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Segment2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Segment2D self) -> Draw_Segment2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Segment2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Segment2D self) -> Draw_Segment2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Segment2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Segment2D self) -> Draw_Segment2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Segment2D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Segment2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Segment2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Segment2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Segment2D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Segment2D

    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Segment2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Segment2D_DrawOn(self, *args)


    def First(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        res = _Draw.Handle_Draw_Segment2D_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        res = _Draw.Handle_Draw_Segment2D_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Dump(self, *args):
        """
        Dump(Handle_Draw_Segment2D self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Segment2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Segment2D self, Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Segment2D_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Segment2D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Segment2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Segment2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Segment2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Segment2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Segment2D_Is3D(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Segment2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Segment2D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Segment2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Segment2D_Copy(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Segment2D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Segment2D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Segment2D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Segment2D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Segment2D self) -> Standard_Boolean
        Visible(Handle_Draw_Segment2D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Segment2D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Segment2D self) -> Standard_Boolean
        Protected(Handle_Draw_Segment2D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Segment2D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Segment2D self) -> Standard_CString
        Name(Handle_Draw_Segment2D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Segment2D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Segment2D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Segment2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Segment2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Segment2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Segment2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Segment2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Segment2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Segment2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Segment2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Segment2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Segment2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Segment2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Segment2D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Segment2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Segment2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Segment2D_DecrementRefCounter(self, *args)

Handle_Draw_Segment2D_swigregister = _Draw.Handle_Draw_Segment2D_swigregister
Handle_Draw_Segment2D_swigregister(Handle_Draw_Segment2D)

def Handle_Draw_Segment2D_DownCast(thing):
    return _Draw.Handle_Draw_Segment2D_DownCast(thing)
Handle_Draw_Segment2D_DownCast = _Draw.Handle_Draw_Segment2D_DownCast

class Draw_Failure(Standard.Standard_Failure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Draw_Failure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Draw_Failure(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Draw_Failure self) -> Draw_Failure
        __init__(Draw_Failure self, Standard_CString const theMessage) -> Draw_Failure

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Draw.new_Draw_Failure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Draw_Failure

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Draw.Handle_Draw_Failure

        """
        return _Draw.Draw_Failure_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Draw.Draw_Failure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Draw.Draw_Failure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Draw_Failure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Draw.delete_Draw_Failure
Draw_Failure_swigregister = _Draw.Draw_Failure_swigregister
Draw_Failure_swigregister(Draw_Failure)

def Draw_Failure_NewInstance(*args):
    """
    Draw_Failure_NewInstance(Standard_CString const theMessage) -> Handle_Draw_Failure

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Draw.Handle_Draw_Failure

    """
    return _Draw.Draw_Failure_NewInstance(*args)

def Draw_Failure_get_type_name(*args):
    """
    Draw_Failure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Draw.Draw_Failure_get_type_name(*args)

def Draw_Failure_get_type_descriptor(*args):
    """
    Draw_Failure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Draw.Draw_Failure_get_type_descriptor(*args)

class Draw_Interpretor(object):
    """Provides an encapsulation of the TCL interpretor to define Draw commands."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        Init(Draw_Interpretor self)

        Initialize TCL interpretor


        """
        return _Draw.Draw_Interpretor_Init(self, *args)


    def Add(self, *args):
        """
        Add(Draw_Interpretor self, Standard_CString theCommandName, Standard_CString theHelp, Draw_Interpretor::CommandFunction theFunction, Standard_CString theGroup)
        Add(Draw_Interpretor self, Standard_CString theCommandName, Standard_CString theHelp, Standard_CString theFileName, Draw_Interpretor::CommandFunction theFunction, Standard_CString theGroup)

        Creates a new command with name <theCommandName>, help string <theHelp> in group <theGroup>.
        @theFunction callback implementation
        @theFileName the name of the file that contains the implementation of the command

        :type theCommandName: OCC.wrapper.Standard.Standard_CString
        :type theHelp: OCC.wrapper.Standard.Standard_CString
        :type theFileName: OCC.wrapper.Standard.Standard_CString
        :type theFunction: CommandFunction
        :type theGroup: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Draw_Interpretor_Add(self, *args)


    def Remove(self, *args):
        """
        Remove(Draw_Interpretor self, Standard_CString const theCommandName) -> Standard_Boolean

        Removes <theCommandName>, returns true if success (the command existed).

        :type theCommandName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Interpretor_Remove(self, *args)


    def Result(self, *args):
        """
        Result(Draw_Interpretor self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Draw_Interpretor_Result(self, *args)


    def Reset(self, *args):
        """
        Reset(Draw_Interpretor self)

        Resets the result to empty string


        """
        return _Draw.Draw_Interpretor_Reset(self, *args)


    def Append(self, *args):
        """
        Append(Draw_Interpretor self, Standard_CString const theResult) -> Draw_Interpretor
        Append(Draw_Interpretor self, TCollection_AsciiString theResult) -> Draw_Interpretor
        Append(Draw_Interpretor self, TCollection_ExtendedString theResult) -> Draw_Interpretor
        Append(Draw_Interpretor self, Standard_Integer const theResult) -> Draw_Interpretor
        Append(Draw_Interpretor self, Standard_Real const theResult) -> Draw_Interpretor
        Append(Draw_Interpretor self, Standard_SStream const & theResult) -> Draw_Interpretor

        Appends to the result

        :type theResult: OCC.wrapper.Standard.Standard_SStream
        :rtype: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw_Interpretor_Append(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Draw_Interpretor self, Standard_CString const theResult) -> Draw_Interpretor
        __lshift__(Draw_Interpretor self, TCollection_AsciiString theResult) -> Draw_Interpretor
        __lshift__(Draw_Interpretor self, TCollection_ExtendedString theResult) -> Draw_Interpretor
        __lshift__(Draw_Interpretor self, Standard_Integer const theResult) -> Draw_Interpretor
        __lshift__(Draw_Interpretor self, Standard_Real const theResult) -> Draw_Interpretor
        __lshift__(Draw_Interpretor self, Standard_SStream const & theResult) -> Draw_Interpretor

        :type theResult: OCC.wrapper.Standard.Standard_SStream
        :rtype: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Draw_Interpretor___lshift__(self, *args)


    def AppendElement(self, *args):
        """
        AppendElement(Draw_Interpretor self, Standard_CString const theResult)

        Appends to the result the string as a list element

        :type theResult: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Draw_Interpretor_AppendElement(self, *args)


    def Eval(self, *args):
        """
        Eval(Draw_Interpretor self, Standard_CString const theScript) -> Standard_Integer

        Eval the script and returns OK = 0, ERROR = 1

        :type theScript: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Draw_Interpretor_Eval(self, *args)


    def RecordAndEval(self, *args):
        """
        RecordAndEval(Draw_Interpretor self, Standard_CString const theScript, Standard_Integer const theFlags=0) -> Standard_Integer

        Eval the script and returns OK = 0, ERROR = 1
        Store the script in the history record.

        :type theScript: OCC.wrapper.Standard.Standard_CString
        :type theFlags: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Draw_Interpretor_RecordAndEval(self, *args)


    def EvalFile(self, *args):
        """
        EvalFile(Draw_Interpretor self, Standard_CString const theFileName) -> Standard_Integer

        Eval the content on the file and returns status

        :type theFileName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Draw_Interpretor_EvalFile(self, *args)


    def PrintHelp(self, *args):
        """
        PrintHelp(Draw_Interpretor self, Standard_CString const theCommandName) -> Standard_Integer

        Eval the script "help command_name"

        :type theCommandName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Draw_Interpretor_PrintHelp(self, *args)


    def Complete(*args):
        """
        Complete(Standard_CString const theScript) -> Standard_Boolean

        Returns True if the script is complete, no pending closing braces. (})

        :type theScript: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Interpretor_Complete(*args)

    Complete = staticmethod(Complete)

    def __init__(self, *args):
        """
        __init__(Draw_Interpretor self) -> Draw_Interpretor
        __init__(Draw_Interpretor self, Draw_PInterp const & theInterp) -> Draw_Interpretor

        :type theInterp: OCC.wrapper.Draw.Draw_PInterp

        """
        this = _Draw.new_Draw_Interpretor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        """
        Set(Draw_Interpretor self, Draw_PInterp const & theInterp)

        :type theInterp: OCC.wrapper.Draw.Draw_PInterp

        """
        return _Draw.Draw_Interpretor_Set(self, *args)


    def Interp(self, *args):
        """
        Interp(Draw_Interpretor self) -> Draw_PInterp

        :rtype: OCC.wrapper.Draw.Draw_PInterp

        """
        return _Draw.Draw_Interpretor_Interp(self, *args)


    def SetDoLog(self, *args):
        """
        SetDoLog(Draw_Interpretor self, Standard_Boolean const theDoLog)

        Enables or disables logging of all commands and their results

        :type theDoLog: bool

        """
        return _Draw.Draw_Interpretor_SetDoLog(self, *args)


    def SetDoEcho(self, *args):
        """
        SetDoEcho(Draw_Interpretor self, Standard_Boolean const theDoEcho)

        Enables or disables eachoing of all commands and their results to cout

        :type theDoEcho: bool

        """
        return _Draw.Draw_Interpretor_SetDoEcho(self, *args)


    def GetDoLog(self, *args):
        """
        GetDoLog(Draw_Interpretor self) -> Standard_Boolean

        Returns true if logging of commands is enabled

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Interpretor_GetDoLog(self, *args)


    def GetDoEcho(self, *args):
        """
        GetDoEcho(Draw_Interpretor self) -> Standard_Boolean

        Returns true if echoing of commands is enabled

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Interpretor_GetDoEcho(self, *args)


    def Log(self, *args):
        """
        Log(Draw_Interpretor self) -> Standard_SStream &

        Returns log stream

        :rtype: OCC.wrapper.Standard.Standard_SStream

        """
        return _Draw.Draw_Interpretor_Log(self, *args)

    __swig_destroy__ = _Draw.delete_Draw_Interpretor
Draw_Interpretor_swigregister = _Draw.Draw_Interpretor_swigregister
Draw_Interpretor_swigregister(Draw_Interpretor)

def Draw_Interpretor_Complete(*args):
    """
    Draw_Interpretor_Complete(Standard_CString const theScript) -> Standard_Boolean

    Returns True if the script is complete, no pending closing braces. (})

    :type theScript: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Draw.Draw_Interpretor_Complete(*args)

class Handle_Draw_Circle2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Circle2D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Circle2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Circle2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Circle2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Circle2D self, Draw_Circle2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Circle2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Circle2D self, Handle_Draw_Circle2D theHandle) -> Handle_Draw_Circle2D
        assign(Handle_Draw_Circle2D self, Draw_Circle2D thePtr) -> Handle_Draw_Circle2D
        assign(Handle_Draw_Circle2D self, Handle_Draw_Circle2D theHandle) -> Handle_Draw_Circle2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Circle2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Circle2D self) -> Draw_Circle2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Circle2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Circle2D self) -> Draw_Circle2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Circle2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Circle2D self) -> Draw_Circle2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Circle2D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Circle2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Circle2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Circle2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Circle2D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Circle2D

    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Circle2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Circle2D_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Circle2D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Circle2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Circle2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Circle2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Circle2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Circle2D_Is3D(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Circle2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Circle2D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Circle2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Circle2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Circle2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Circle2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Circle2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Circle2D_Whatis(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Circle2D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Circle2D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Circle2D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Circle2D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Circle2D self) -> Standard_Boolean
        Visible(Handle_Draw_Circle2D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Circle2D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Circle2D self) -> Standard_Boolean
        Protected(Handle_Draw_Circle2D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Circle2D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Circle2D self) -> Standard_CString
        Name(Handle_Draw_Circle2D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Circle2D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Circle2D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Circle2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Circle2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Circle2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Circle2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Circle2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Circle2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Circle2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Circle2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Circle2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Circle2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Circle2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Circle2D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Circle2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Circle2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Circle2D_DecrementRefCounter(self, *args)

Handle_Draw_Circle2D_swigregister = _Draw.Handle_Draw_Circle2D_swigregister
Handle_Draw_Circle2D_swigregister(Handle_Draw_Circle2D)

def Handle_Draw_Circle2D_DownCast(thing):
    return _Draw.Handle_Draw_Circle2D_DownCast(thing)
Handle_Draw_Circle2D_DownCast = _Draw.Handle_Draw_Circle2D_DownCast

class Handle_Draw_Marker3D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Marker3D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Marker3D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Marker3D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Marker3D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Marker3D self, Draw_Marker3D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Marker3D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Marker3D self, Handle_Draw_Marker3D theHandle) -> Handle_Draw_Marker3D
        assign(Handle_Draw_Marker3D self, Draw_Marker3D thePtr) -> Handle_Draw_Marker3D
        assign(Handle_Draw_Marker3D self, Handle_Draw_Marker3D theHandle) -> Handle_Draw_Marker3D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Marker3D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Marker3D self) -> Draw_Marker3D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Marker3D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Marker3D self) -> Draw_Marker3D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Marker3D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Marker3D self) -> Draw_Marker3D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Marker3D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Marker3D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Marker3D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Marker3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Marker3D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Marker3D

    def ChangePos(self, *args):
        """
        ChangePos(Handle_Draw_Marker3D self) -> gp_Pnt

        myPos field

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Draw.Handle_Draw_Marker3D_ChangePos(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Marker3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Marker3D_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Marker3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs always false

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Marker3D_PickReject(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Marker3D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Marker3D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Marker3D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Marker3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Copy(self, *args):
        """
        Copy(Handle_Draw_Marker3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Marker3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Marker3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Marker3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Marker3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Marker3D_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Marker3D self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Marker3D_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Marker3D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Marker3D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Marker3D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Marker3D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Marker3D self) -> Standard_Boolean
        Visible(Handle_Draw_Marker3D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Marker3D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Marker3D self) -> Standard_Boolean
        Protected(Handle_Draw_Marker3D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Marker3D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Marker3D self) -> Standard_CString
        Name(Handle_Draw_Marker3D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Marker3D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Marker3D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Marker3D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Marker3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Marker3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Marker3D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Marker3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Marker3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Marker3D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Marker3D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Marker3D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Marker3D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Marker3D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Marker3D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Marker3D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Marker3D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Marker3D_DecrementRefCounter(self, *args)

Handle_Draw_Marker3D_swigregister = _Draw.Handle_Draw_Marker3D_swigregister
Handle_Draw_Marker3D_swigregister(Handle_Draw_Marker3D)

def Handle_Draw_Marker3D_DownCast(thing):
    return _Draw.Handle_Draw_Marker3D_DownCast(thing)
Handle_Draw_Marker3D_DownCast = _Draw.Handle_Draw_Marker3D_DownCast

class Handle_Draw_Failure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Failure self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Failure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Failure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Failure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Failure self, Draw_Failure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Failure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Failure self, Handle_Draw_Failure theHandle) -> Handle_Draw_Failure
        assign(Handle_Draw_Failure self, Draw_Failure thePtr) -> Handle_Draw_Failure
        assign(Handle_Draw_Failure self, Handle_Draw_Failure theHandle) -> Handle_Draw_Failure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Failure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Failure self) -> Draw_Failure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Failure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Failure self) -> Draw_Failure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Failure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Failure self) -> Draw_Failure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Failure___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Failure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Failure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Failure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Failure_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Failure

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Draw_Failure self, Standard_CString const theMessage) -> Handle_Draw_Failure

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Draw.Handle_Draw_Failure

        """
        return _Draw.Handle_Draw_Failure_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Failure self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Failure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Failure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Failure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Draw_Failure self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Failure_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Draw_Failure self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Failure_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Draw_Failure self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Failure_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Draw_Failure self)
        Reraise(Handle_Draw_Failure self, Standard_CString const aMessage)
        Reraise(Handle_Draw_Failure self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Draw.Handle_Draw_Failure_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Draw_Failure self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Draw.Handle_Draw_Failure_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Draw_Failure self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Draw.Handle_Draw_Failure_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Failure self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Failure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Failure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Failure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Failure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Failure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Failure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Failure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Failure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Failure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Failure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Failure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Failure self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Failure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Failure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Failure_DecrementRefCounter(self, *args)

Handle_Draw_Failure_swigregister = _Draw.Handle_Draw_Failure_swigregister
Handle_Draw_Failure_swigregister(Handle_Draw_Failure)

def Handle_Draw_Failure_DownCast(thing):
    return _Draw.Handle_Draw_Failure_DownCast(thing)
Handle_Draw_Failure_DownCast = _Draw.Handle_Draw_Failure_DownCast

class NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString(NCollection.NCollection_BaseMap):
    """
    Purpose:     An indexed map is used to  store  keys and to bind
    an index to them.  Each new key stored in  the map
    gets an index.  Index are incremented  as keys are
    stored in the map. A key can be found by the index
    and an index by the  key. No key  but the last can
    be removed so the indices are in the range 1..Extent.
    See  the  class   Map   from NCollection   for   a
    discussion about the number of buckets.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def cbegin(self, *args):
        """
        cbegin(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self) -> NCollection_IndexedMap< TCollection_AsciiString,TCollection_AsciiString >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self) -> NCollection_IndexedMap< TCollection_AsciiString,TCollection_AsciiString >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     An indexed map is used to  store  keys and to bind
        an index to them.  Each new key stored in  the map
        gets an index.  Index are incremented  as keys are
        stored in the map. A key can be found by the index
        and an index by the  key. No key  but the last can
        be removed so the indices are in the range 1..Extent.
        See  the  class   Map   from NCollection   for   a
        discussion about the number of buckets.
        """
        this = _Draw.new_NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedMap

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString theOther) -> NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString

        Assign.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedMap
        :rtype: OCC.wrapper.NCollection.NCollection_IndexedMap

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString theOther) -> NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedMap
        :rtype: OCC.wrapper.NCollection.NCollection_IndexedMap

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, Standard_Integer const theExtent)

        ReSize

        :type theExtent: int

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_ReSize(self, *args)


    def Add(self, *args):
        """
        Add(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey1) -> Standard_Integer

        Add

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_Add(self, *args)


    def Contains(self, *args):
        """
        Contains(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey1) -> Standard_Boolean

        Contains

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_Contains(self, *args)


    def Substitute(self, *args):
        """
        Substitute(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, Standard_Integer const theIndex, TCollection_AsciiString theKey1)

        Substitute

        :type theIndex: int
        :type theKey1: const TheKeyType &

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_Substitute(self, *args)


    def Swap(self, *args):
        """
        Swap(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, Standard_Integer const theIndex1, Standard_Integer const theIndex2)

        Swaps two elements with the given indices.

        :type theIndex1: int
        :type theIndex2: int

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_Swap(self, *args)


    def RemoveLast(self, *args):
        """
        RemoveLast(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self)

        RemoveLast


        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_RemoveLast(self, *args)


    def RemoveFromIndex(self, *args):
        """
        RemoveFromIndex(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, Standard_Integer const theIndex)

        Remove the key of the given index.
        Caution! The index of the last key can be changed.

        :type theIndex: int

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_RemoveFromIndex(self, *args)


    def RemoveKey(self, *args):
        """
        RemoveKey(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey1) -> Standard_Boolean

        Remove the given key.
        Caution! The index of the last key can be changed.

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_RemoveKey(self, *args)


    def FindKey(self, *args):
        """
        FindKey

        :type theIndex: int
        :rtype: const TheKeyType &

        """
        res = _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_FindKey(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator ()

        :type theIndex: int
        :rtype: const TheKeyType &

        """
        res = _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FindIndex(self, *args):
        """
        FindIndex(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey1) -> Standard_Integer

        FindIndex

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_FindIndex(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_Size(self, *args)


    def __iter__(self):
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString___iter__(self)
    __swig_destroy__ = _Draw.delete_NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString
NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_swigregister = _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_swigregister
NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_swigregister(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString)

class NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Draw.new_NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Draw.delete_NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper

    def __next__(self):
        return _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper___next__(self)
NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper_swigregister = _Draw.NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper_swigregister
NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper_swigregister(NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper)


try:
	Draw_MapOfAsciiString = NCollection_IndexedMap_TCollection_AsciiString_TCollection_AsciiString
except NameError:
	pass # does not exist, probably ignored

class Draw_Display(object):
    """
    Use to  draw in a 3d or a 2d view.

    * The  3d methods draw in the 3d  system,  in a 2d
    view the drawing is projected on X,Y.

    * The 2d methods draw in the projection plane.

    * To draw in screen coordinates the length must be
    divided by the zoom.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Draw_Display self) -> Draw_Display

        Use to  draw in a 3d or a 2d view.

        * The  3d methods draw in the 3d  system,  in a 2d
        view the drawing is projected on X,Y.

        * The 2d methods draw in the projection plane.

        * To draw in screen coordinates the length must be
        divided by the zoom.
        """
        this = _Draw.new_Draw_Display(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetColor(self, *args):
        """
        SetColor(Draw_Display self, Draw_Color col)

        Following drawings will use this color.

        :type col: OCC.wrapper.Draw.Draw_Color

        """
        return _Draw.Draw_Display_SetColor(self, *args)


    def SetMode(self, *args):
        """
        SetMode(Draw_Display self, Standard_Integer const M)

        Set the drawing mode, 3 = copy, 6 = xor

        :type M: int

        """
        return _Draw.Draw_Display_SetMode(self, *args)


    def Flush(self, *args):
        """Flush(Draw_Display self)"""
        return _Draw.Draw_Display_Flush(self, *args)


    def MoveTo(self, *args):
        """
        MoveTo(Draw_Display self, gp_Pnt pt)
        MoveTo(Draw_Display self, gp_Pnt2d pt)

        :type pt: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Draw.Draw_Display_MoveTo(self, *args)


    def DrawTo(self, *args):
        """
        DrawTo(Draw_Display self, gp_Pnt pt)
        DrawTo(Draw_Display self, gp_Pnt2d pt)

        :type pt: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Draw.Draw_Display_DrawTo(self, *args)


    def Draw_(self, *args):
        """
        Draw_(Draw_Display self, gp_Pnt p1, gp_Pnt p2)
        Draw_(Draw_Display self, gp_Pnt2d p1, gp_Pnt2d p2)
        Draw_(Draw_Display self, gp_Circ C, Standard_Real const A1, Standard_Real const A2, Standard_Boolean const ModifyWithZoom)
        Draw_(Draw_Display self, gp_Circ2d C, Standard_Real const A1, Standard_Real const A2, Standard_Boolean const ModifyWithZoom)

        Draw  a 2D circle  <C>  from angle   <A1> to <A2>
        (Radians). if ModifyWithZoom  = 0,  then
        rayon of circle is convert to Integer.

        :type C: OCC.wrapper.gp.gp_Circ2d
        :type A1: float
        :type A2: float
        :type ModifyWithZoom: bool

        """
        return _Draw.Draw_Display_Draw_(self, *args)


    def DrawMarker(self, *args):
        """
        DrawMarker(Draw_Display self, gp_Pnt pt, Draw_MarkerShape const S, Standard_Integer const Size=5)
        DrawMarker(Draw_Display self, gp_Pnt2d pt, Draw_MarkerShape const S, Standard_Integer const Size=5)
        DrawMarker(Draw_Display self, gp_Pnt pt, Draw_MarkerShape const S, Standard_Real const Size)
        DrawMarker(Draw_Display self, gp_Pnt2d pt, Draw_MarkerShape const S, Standard_Real const Size)

        :type pt: OCC.wrapper.gp.gp_Pnt2d
        :type S: OCC.wrapper.Draw.Draw_MarkerShape
        :type Size: float

        """
        return _Draw.Draw_Display_DrawMarker(self, *args)


    def DrawString(self, *args):
        """
        DrawString(Draw_Display self, gp_Pnt pt, Standard_CString const S)
        DrawString(Draw_Display self, gp_Pnt2d pt, Standard_CString const S)
        DrawString(Draw_Display self, gp_Pnt pt, Standard_CString const S, Standard_Real const moveX, Standard_Real const moveY)
        DrawString(Draw_Display self, gp_Pnt2d pt, Standard_CString const S, Standard_Real const moveX, Standard_Real const moveY)

        :type pt: OCC.wrapper.gp.gp_Pnt2d
        :type S: OCC.wrapper.Standard.Standard_CString
        :type moveX: float
        :type moveY: float

        """
        return _Draw.Draw_Display_DrawString(self, *args)


    def Project(self, *args):
        """
        Project(Draw_Display self, gp_Pnt pt) -> gp_Pnt2d
        Project(Draw_Display self, gp_Pnt pt, gp_Pnt2d pt2d)

        Returns the 2D projection of a 3D point.

        :type pt: OCC.wrapper.gp.gp_Pnt
        :type pt2d: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Draw.Draw_Display_Project(self, *args)


    def Zoom(self, *args):
        """
        Zoom(Draw_Display self) -> Standard_Real

        Returns the current Zoom value.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Draw.Draw_Display_Zoom(self, *args)


    def ViewId(self, *args):
        """
        ViewId(Draw_Display self) -> Standard_Integer

        Returns the   identifier  of the  view   where the
        display is drawing.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Draw_Display_ViewId(self, *args)


    def HasPicked(self, *args):
        """
        HasPicked(Draw_Display self) -> Standard_Boolean

        Returs  True  if  the  last   drawing   operations
        generated  a pick hit.  When HasPicked is True the
        Drawing should be resumed.

        This function is used to shorten the  drawing when
        picking and to save the picked sub-parts.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Draw_Display_HasPicked(self, *args)

    __swig_destroy__ = _Draw.delete_Draw_Display
Draw_Display_swigregister = _Draw.Draw_Display_swigregister
Draw_Display_swigregister(Draw_Display)

class Handle_Draw_Drawable2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Draw_Drawable2D self)

        Nullify the handle


        """
        return _Draw.Handle_Draw_Drawable2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Draw_Drawable2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Draw.Handle_Draw_Drawable2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Draw_Drawable2D self, Draw_Drawable2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Draw.Handle_Draw_Drawable2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Draw_Drawable2D self, Handle_Draw_Drawable2D theHandle) -> Handle_Draw_Drawable2D
        assign(Handle_Draw_Drawable2D self, Draw_Drawable2D thePtr) -> Handle_Draw_Drawable2D
        assign(Handle_Draw_Drawable2D self, Handle_Draw_Drawable2D theHandle) -> Handle_Draw_Drawable2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Draw.Handle_Draw_Drawable2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Draw_Drawable2D self) -> Draw_Drawable2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Draw.Handle_Draw_Drawable2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Draw_Drawable2D self) -> Draw_Drawable2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Draw.Handle_Draw_Drawable2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Draw_Drawable2D self) -> Draw_Drawable2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Draw.Handle_Draw_Drawable2D___ref__(self, *args)


    def __hash__(self):
        return _Draw.Handle_Draw_Drawable2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Draw.Handle_Draw_Drawable2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Draw.new_Handle_Draw_Drawable2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Draw.Handle_Draw_Drawable2D_DownCast)
    __swig_destroy__ = _Draw.delete_Handle_Draw_Drawable2D

    def Is3D(self, *args):
        """
        Is3D(Handle_Draw_Drawable2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Drawable2D_Is3D(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Draw_Drawable2D self) -> char const *

        :rtype: const char *

        """
        return _Draw.Handle_Draw_Drawable2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Drawable2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Draw.Handle_Draw_Drawable2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(Handle_Draw_Drawable2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _Draw.Handle_Draw_Drawable2D_DrawOn(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_Draw_Drawable2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Drawable2D_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Draw_Drawable2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _Draw.Handle_Draw_Drawable2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_Draw_Drawable2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _Draw.Handle_Draw_Drawable2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_Draw_Drawable2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _Draw.Handle_Draw_Drawable2D_Whatis(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_Draw_Drawable2D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Drawable2D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_Draw_Drawable2D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _Draw.Handle_Draw_Drawable2D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_Draw_Drawable2D self) -> Standard_Boolean
        Visible(Handle_Draw_Drawable2D self, Standard_Boolean const V)

        :type V: bool

        """
        return _Draw.Handle_Draw_Drawable2D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_Draw_Drawable2D self) -> Standard_Boolean
        Protected(Handle_Draw_Drawable2D self, Standard_Boolean const P)

        :type P: bool

        """
        return _Draw.Handle_Draw_Drawable2D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Draw_Drawable2D self) -> Standard_CString
        Name(Handle_Draw_Drawable2D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _Draw.Handle_Draw_Drawable2D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Draw_Drawable2D self)

        Memory deallocator for transient classes


        """
        return _Draw.Handle_Draw_Drawable2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Draw_Drawable2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Draw_Drawable2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Drawable2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Draw_Drawable2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Draw_Drawable2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Draw.Handle_Draw_Drawable2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Draw_Drawable2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Draw.Handle_Draw_Drawable2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Draw_Drawable2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Drawable2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Draw_Drawable2D self)

        Increments the reference counter of this object


        """
        return _Draw.Handle_Draw_Drawable2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Draw_Drawable2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Draw.Handle_Draw_Drawable2D_DecrementRefCounter(self, *args)

Handle_Draw_Drawable2D_swigregister = _Draw.Handle_Draw_Drawable2D_swigregister
Handle_Draw_Drawable2D_swigregister(Handle_Draw_Drawable2D)

def Handle_Draw_Drawable2D_DownCast(thing):
    return _Draw.Handle_Draw_Drawable2D_DownCast(thing)
Handle_Draw_Drawable2D_DownCast = _Draw.Handle_Draw_Drawable2D_DownCast



