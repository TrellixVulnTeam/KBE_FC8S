# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StdFail')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StdFail')
    _StdFail = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StdFail', [dirname(__file__)])
        except ImportError:
            import _StdFail
            return _StdFail
        try:
            _mod = imp.load_module('_StdFail', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StdFail = swig_import_helper()
    del swig_import_helper
else:
    import _StdFail
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StdFail.delete_SwigPyIterator

    def value(self):
        return _StdFail.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StdFail.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StdFail.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StdFail.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StdFail.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StdFail.SwigPyIterator_copy(self)

    def next(self):
        return _StdFail.SwigPyIterator_next(self)

    def __next__(self):
        return _StdFail.SwigPyIterator___next__(self)

    def previous(self):
        return _StdFail.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StdFail.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StdFail.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StdFail.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StdFail.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StdFail.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StdFail.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StdFail.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StdFail.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdFail.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StdFail.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StdFail.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdFail.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdFail.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StdFail.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StdFail.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StdFail.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdFail.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StdFail.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StdFail.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdFail.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdFail.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StdFail.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StdFail.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StdFail.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StdFail.ptr_to_number(item)
ptr_to_number = _StdFail.ptr_to_number

def HashCode(*args):
    return _StdFail.HashCode(*args)
HashCode = _StdFail.HashCode

def ptr_equal(a, b):
    return _StdFail.ptr_equal(a, b)
ptr_equal = _StdFail.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
class StdFail_Undefined(Standard.Standard_Failure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdFail_Undefined
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdFail_Undefined(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdFail_Undefined self) -> StdFail_Undefined
        __init__(StdFail_Undefined self, Standard_CString const theMessage) -> StdFail_Undefined

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _StdFail.new_StdFail_Undefined(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_StdFail_Undefined

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_Undefined

        """
        return _StdFail.StdFail_Undefined_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdFail.StdFail_Undefined_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdFail.StdFail_Undefined_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.StdFail_Undefined_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdFail.delete_StdFail_Undefined
StdFail_Undefined_swigregister = _StdFail.StdFail_Undefined_swigregister
StdFail_Undefined_swigregister(StdFail_Undefined)

def StdFail_Undefined_NewInstance(*args):
    """
    StdFail_Undefined_NewInstance(Standard_CString const theMessage) -> Handle_StdFail_Undefined

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.StdFail.Handle_StdFail_Undefined

    """
    return _StdFail.StdFail_Undefined_NewInstance(*args)

def StdFail_Undefined_get_type_name(*args):
    """
    StdFail_Undefined_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdFail.StdFail_Undefined_get_type_name(*args)

def StdFail_Undefined_get_type_descriptor(*args):
    """
    StdFail_Undefined_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdFail.StdFail_Undefined_get_type_descriptor(*args)

class StdFail_UndefinedDerivative(Standard.Standard_DomainError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdFail_UndefinedDerivative
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdFail_UndefinedDerivative(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdFail_UndefinedDerivative self) -> StdFail_UndefinedDerivative
        __init__(StdFail_UndefinedDerivative self, Standard_CString const theMessage) -> StdFail_UndefinedDerivative

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _StdFail.new_StdFail_UndefinedDerivative(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_StdFail_UndefinedDerivative

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_UndefinedDerivative

        """
        return _StdFail.StdFail_UndefinedDerivative_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdFail.StdFail_UndefinedDerivative_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdFail.StdFail_UndefinedDerivative_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.StdFail_UndefinedDerivative_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdFail.delete_StdFail_UndefinedDerivative
StdFail_UndefinedDerivative_swigregister = _StdFail.StdFail_UndefinedDerivative_swigregister
StdFail_UndefinedDerivative_swigregister(StdFail_UndefinedDerivative)

def StdFail_UndefinedDerivative_NewInstance(*args):
    """
    StdFail_UndefinedDerivative_NewInstance(Standard_CString const theMessage) -> Handle_StdFail_UndefinedDerivative

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.StdFail.Handle_StdFail_UndefinedDerivative

    """
    return _StdFail.StdFail_UndefinedDerivative_NewInstance(*args)

def StdFail_UndefinedDerivative_get_type_name(*args):
    """
    StdFail_UndefinedDerivative_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdFail.StdFail_UndefinedDerivative_get_type_name(*args)

def StdFail_UndefinedDerivative_get_type_descriptor(*args):
    """
    StdFail_UndefinedDerivative_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdFail.StdFail_UndefinedDerivative_get_type_descriptor(*args)

class StdFail_UndefinedValue(Standard.Standard_DomainError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdFail_UndefinedValue
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdFail_UndefinedValue(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdFail_UndefinedValue self) -> StdFail_UndefinedValue
        __init__(StdFail_UndefinedValue self, Standard_CString const theMessage) -> StdFail_UndefinedValue

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _StdFail.new_StdFail_UndefinedValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_StdFail_UndefinedValue

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_UndefinedValue

        """
        return _StdFail.StdFail_UndefinedValue_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdFail.StdFail_UndefinedValue_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdFail.StdFail_UndefinedValue_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.StdFail_UndefinedValue_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdFail.delete_StdFail_UndefinedValue
StdFail_UndefinedValue_swigregister = _StdFail.StdFail_UndefinedValue_swigregister
StdFail_UndefinedValue_swigregister(StdFail_UndefinedValue)

def StdFail_UndefinedValue_NewInstance(*args):
    """
    StdFail_UndefinedValue_NewInstance(Standard_CString const theMessage) -> Handle_StdFail_UndefinedValue

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.StdFail.Handle_StdFail_UndefinedValue

    """
    return _StdFail.StdFail_UndefinedValue_NewInstance(*args)

def StdFail_UndefinedValue_get_type_name(*args):
    """
    StdFail_UndefinedValue_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdFail.StdFail_UndefinedValue_get_type_name(*args)

def StdFail_UndefinedValue_get_type_descriptor(*args):
    """
    StdFail_UndefinedValue_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdFail.StdFail_UndefinedValue_get_type_descriptor(*args)

class Handle_StdFail_Undefined(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdFail_Undefined self)

        Nullify the handle


        """
        return _StdFail.Handle_StdFail_Undefined_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdFail_Undefined self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdFail.Handle_StdFail_Undefined_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdFail_Undefined self, StdFail_Undefined thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdFail.Handle_StdFail_Undefined_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdFail_Undefined self, Handle_StdFail_Undefined theHandle) -> Handle_StdFail_Undefined
        assign(Handle_StdFail_Undefined self, StdFail_Undefined thePtr) -> Handle_StdFail_Undefined
        assign(Handle_StdFail_Undefined self, Handle_StdFail_Undefined theHandle) -> Handle_StdFail_Undefined

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdFail.Handle_StdFail_Undefined_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdFail_Undefined self) -> StdFail_Undefined

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_Undefined_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdFail_Undefined self) -> StdFail_Undefined

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_Undefined___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdFail_Undefined self) -> StdFail_Undefined

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdFail.Handle_StdFail_Undefined___ref__(self, *args)


    def __hash__(self):
        return _StdFail.Handle_StdFail_Undefined___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdFail.Handle_StdFail_Undefined___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdFail.new_Handle_StdFail_Undefined(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdFail.Handle_StdFail_Undefined_DownCast)
    __swig_destroy__ = _StdFail.delete_Handle_StdFail_Undefined

    def NewInstance(self, *args):
        """
        NewInstance(Handle_StdFail_Undefined self, Standard_CString const theMessage) -> Handle_StdFail_Undefined

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_Undefined

        """
        return _StdFail.Handle_StdFail_Undefined_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdFail_Undefined self) -> char const *

        :rtype: const char *

        """
        return _StdFail.Handle_StdFail_Undefined_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_Undefined_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_Undefined_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_StdFail_Undefined self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _StdFail.Handle_StdFail_Undefined_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_StdFail_Undefined self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_Undefined_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_StdFail_Undefined self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_Undefined_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_StdFail_Undefined self)
        Reraise(Handle_StdFail_Undefined self, Standard_CString const aMessage)
        Reraise(Handle_StdFail_Undefined self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _StdFail.Handle_StdFail_Undefined_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_StdFail_Undefined self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _StdFail.Handle_StdFail_Undefined_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_StdFail_Undefined self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _StdFail.Handle_StdFail_Undefined_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StdFail_Undefined self)

        Memory deallocator for transient classes


        """
        return _StdFail.Handle_StdFail_Undefined_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdFail_Undefined self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdFail_Undefined self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_Undefined_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdFail_Undefined self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdFail_Undefined self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_Undefined_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdFail_Undefined self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdFail.Handle_StdFail_Undefined_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdFail_Undefined self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_Undefined_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdFail_Undefined self)

        Increments the reference counter of this object


        """
        return _StdFail.Handle_StdFail_Undefined_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdFail_Undefined self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_Undefined_DecrementRefCounter(self, *args)

Handle_StdFail_Undefined_swigregister = _StdFail.Handle_StdFail_Undefined_swigregister
Handle_StdFail_Undefined_swigregister(Handle_StdFail_Undefined)

def Handle_StdFail_Undefined_DownCast(thing):
    return _StdFail.Handle_StdFail_Undefined_DownCast(thing)
Handle_StdFail_Undefined_DownCast = _StdFail.Handle_StdFail_Undefined_DownCast

class StdFail_NotDone(Standard.Standard_Failure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdFail_NotDone
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdFail_NotDone(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdFail_NotDone self) -> StdFail_NotDone
        __init__(StdFail_NotDone self, Standard_CString const theMessage) -> StdFail_NotDone

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _StdFail.new_StdFail_NotDone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_StdFail_NotDone

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_NotDone

        """
        return _StdFail.StdFail_NotDone_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdFail.StdFail_NotDone_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdFail.StdFail_NotDone_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.StdFail_NotDone_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdFail.delete_StdFail_NotDone
StdFail_NotDone_swigregister = _StdFail.StdFail_NotDone_swigregister
StdFail_NotDone_swigregister(StdFail_NotDone)

def StdFail_NotDone_NewInstance(*args):
    """
    StdFail_NotDone_NewInstance(Standard_CString const theMessage) -> Handle_StdFail_NotDone

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.StdFail.Handle_StdFail_NotDone

    """
    return _StdFail.StdFail_NotDone_NewInstance(*args)

def StdFail_NotDone_get_type_name(*args):
    """
    StdFail_NotDone_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdFail.StdFail_NotDone_get_type_name(*args)

def StdFail_NotDone_get_type_descriptor(*args):
    """
    StdFail_NotDone_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdFail.StdFail_NotDone_get_type_descriptor(*args)

class StdFail_InfiniteSolutions(Standard.Standard_Failure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdFail_InfiniteSolutions
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdFail_InfiniteSolutions(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdFail_InfiniteSolutions self) -> StdFail_InfiniteSolutions
        __init__(StdFail_InfiniteSolutions self, Standard_CString const theMessage) -> StdFail_InfiniteSolutions

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _StdFail.new_StdFail_InfiniteSolutions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_StdFail_InfiniteSolutions

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_InfiniteSolutions

        """
        return _StdFail.StdFail_InfiniteSolutions_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdFail.StdFail_InfiniteSolutions_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdFail.StdFail_InfiniteSolutions_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.StdFail_InfiniteSolutions_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdFail.delete_StdFail_InfiniteSolutions
StdFail_InfiniteSolutions_swigregister = _StdFail.StdFail_InfiniteSolutions_swigregister
StdFail_InfiniteSolutions_swigregister(StdFail_InfiniteSolutions)

def StdFail_InfiniteSolutions_NewInstance(*args):
    """
    StdFail_InfiniteSolutions_NewInstance(Standard_CString const theMessage) -> Handle_StdFail_InfiniteSolutions

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.StdFail.Handle_StdFail_InfiniteSolutions

    """
    return _StdFail.StdFail_InfiniteSolutions_NewInstance(*args)

def StdFail_InfiniteSolutions_get_type_name(*args):
    """
    StdFail_InfiniteSolutions_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdFail.StdFail_InfiniteSolutions_get_type_name(*args)

def StdFail_InfiniteSolutions_get_type_descriptor(*args):
    """
    StdFail_InfiniteSolutions_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdFail.StdFail_InfiniteSolutions_get_type_descriptor(*args)

class Handle_StdFail_NotDone(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdFail_NotDone self)

        Nullify the handle


        """
        return _StdFail.Handle_StdFail_NotDone_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdFail_NotDone self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdFail.Handle_StdFail_NotDone_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdFail_NotDone self, StdFail_NotDone thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdFail.Handle_StdFail_NotDone_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdFail_NotDone self, Handle_StdFail_NotDone theHandle) -> Handle_StdFail_NotDone
        assign(Handle_StdFail_NotDone self, StdFail_NotDone thePtr) -> Handle_StdFail_NotDone
        assign(Handle_StdFail_NotDone self, Handle_StdFail_NotDone theHandle) -> Handle_StdFail_NotDone

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdFail.Handle_StdFail_NotDone_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdFail_NotDone self) -> StdFail_NotDone

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_NotDone_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdFail_NotDone self) -> StdFail_NotDone

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_NotDone___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdFail_NotDone self) -> StdFail_NotDone

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdFail.Handle_StdFail_NotDone___ref__(self, *args)


    def __hash__(self):
        return _StdFail.Handle_StdFail_NotDone___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdFail.Handle_StdFail_NotDone___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdFail.new_Handle_StdFail_NotDone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdFail.Handle_StdFail_NotDone_DownCast)
    __swig_destroy__ = _StdFail.delete_Handle_StdFail_NotDone

    def NewInstance(self, *args):
        """
        NewInstance(Handle_StdFail_NotDone self, Standard_CString const theMessage) -> Handle_StdFail_NotDone

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_NotDone

        """
        return _StdFail.Handle_StdFail_NotDone_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdFail_NotDone self) -> char const *

        :rtype: const char *

        """
        return _StdFail.Handle_StdFail_NotDone_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_NotDone_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_NotDone_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_StdFail_NotDone self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _StdFail.Handle_StdFail_NotDone_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_StdFail_NotDone self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_NotDone_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_StdFail_NotDone self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_NotDone_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_StdFail_NotDone self)
        Reraise(Handle_StdFail_NotDone self, Standard_CString const aMessage)
        Reraise(Handle_StdFail_NotDone self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _StdFail.Handle_StdFail_NotDone_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_StdFail_NotDone self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _StdFail.Handle_StdFail_NotDone_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_StdFail_NotDone self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _StdFail.Handle_StdFail_NotDone_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StdFail_NotDone self)

        Memory deallocator for transient classes


        """
        return _StdFail.Handle_StdFail_NotDone_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdFail_NotDone self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdFail_NotDone self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_NotDone_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdFail_NotDone self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdFail_NotDone self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_NotDone_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdFail_NotDone self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdFail.Handle_StdFail_NotDone_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdFail_NotDone self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_NotDone_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdFail_NotDone self)

        Increments the reference counter of this object


        """
        return _StdFail.Handle_StdFail_NotDone_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdFail_NotDone self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_NotDone_DecrementRefCounter(self, *args)

Handle_StdFail_NotDone_swigregister = _StdFail.Handle_StdFail_NotDone_swigregister
Handle_StdFail_NotDone_swigregister(Handle_StdFail_NotDone)

def Handle_StdFail_NotDone_DownCast(thing):
    return _StdFail.Handle_StdFail_NotDone_DownCast(thing)
Handle_StdFail_NotDone_DownCast = _StdFail.Handle_StdFail_NotDone_DownCast

class Handle_StdFail_InfiniteSolutions(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdFail_InfiniteSolutions self)

        Nullify the handle


        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdFail_InfiniteSolutions self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdFail_InfiniteSolutions self, StdFail_InfiniteSolutions thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdFail_InfiniteSolutions self, Handle_StdFail_InfiniteSolutions theHandle) -> Handle_StdFail_InfiniteSolutions
        assign(Handle_StdFail_InfiniteSolutions self, StdFail_InfiniteSolutions thePtr) -> Handle_StdFail_InfiniteSolutions
        assign(Handle_StdFail_InfiniteSolutions self, Handle_StdFail_InfiniteSolutions theHandle) -> Handle_StdFail_InfiniteSolutions

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdFail_InfiniteSolutions self) -> StdFail_InfiniteSolutions

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdFail_InfiniteSolutions self) -> StdFail_InfiniteSolutions

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdFail_InfiniteSolutions self) -> StdFail_InfiniteSolutions

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions___ref__(self, *args)


    def __hash__(self):
        return _StdFail.Handle_StdFail_InfiniteSolutions___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdFail.Handle_StdFail_InfiniteSolutions___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdFail.new_Handle_StdFail_InfiniteSolutions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdFail.Handle_StdFail_InfiniteSolutions_DownCast)
    __swig_destroy__ = _StdFail.delete_Handle_StdFail_InfiniteSolutions

    def NewInstance(self, *args):
        """
        NewInstance(Handle_StdFail_InfiniteSolutions self, Standard_CString const theMessage) -> Handle_StdFail_InfiniteSolutions

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_InfiniteSolutions

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdFail_InfiniteSolutions self) -> char const *

        :rtype: const char *

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_InfiniteSolutions_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_InfiniteSolutions_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_StdFail_InfiniteSolutions self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_StdFail_InfiniteSolutions self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_StdFail_InfiniteSolutions self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_StdFail_InfiniteSolutions self)
        Reraise(Handle_StdFail_InfiniteSolutions self, Standard_CString const aMessage)
        Reraise(Handle_StdFail_InfiniteSolutions self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_StdFail_InfiniteSolutions self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_StdFail_InfiniteSolutions self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StdFail_InfiniteSolutions self)

        Memory deallocator for transient classes


        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdFail_InfiniteSolutions self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdFail_InfiniteSolutions self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdFail_InfiniteSolutions self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdFail_InfiniteSolutions self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdFail_InfiniteSolutions self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdFail_InfiniteSolutions self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdFail_InfiniteSolutions self)

        Increments the reference counter of this object


        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdFail_InfiniteSolutions self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_InfiniteSolutions_DecrementRefCounter(self, *args)

Handle_StdFail_InfiniteSolutions_swigregister = _StdFail.Handle_StdFail_InfiniteSolutions_swigregister
Handle_StdFail_InfiniteSolutions_swigregister(Handle_StdFail_InfiniteSolutions)

def Handle_StdFail_InfiniteSolutions_DownCast(thing):
    return _StdFail.Handle_StdFail_InfiniteSolutions_DownCast(thing)
Handle_StdFail_InfiniteSolutions_DownCast = _StdFail.Handle_StdFail_InfiniteSolutions_DownCast

class Handle_StdFail_UndefinedDerivative(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdFail_UndefinedDerivative self)

        Nullify the handle


        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdFail_UndefinedDerivative self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdFail_UndefinedDerivative self, StdFail_UndefinedDerivative thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdFail_UndefinedDerivative self, Handle_StdFail_UndefinedDerivative theHandle) -> Handle_StdFail_UndefinedDerivative
        assign(Handle_StdFail_UndefinedDerivative self, StdFail_UndefinedDerivative thePtr) -> Handle_StdFail_UndefinedDerivative
        assign(Handle_StdFail_UndefinedDerivative self, Handle_StdFail_UndefinedDerivative theHandle) -> Handle_StdFail_UndefinedDerivative

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdFail_UndefinedDerivative self) -> StdFail_UndefinedDerivative

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdFail_UndefinedDerivative self) -> StdFail_UndefinedDerivative

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdFail_UndefinedDerivative self) -> StdFail_UndefinedDerivative

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative___ref__(self, *args)


    def __hash__(self):
        return _StdFail.Handle_StdFail_UndefinedDerivative___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdFail.Handle_StdFail_UndefinedDerivative___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdFail.new_Handle_StdFail_UndefinedDerivative(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdFail.Handle_StdFail_UndefinedDerivative_DownCast)
    __swig_destroy__ = _StdFail.delete_Handle_StdFail_UndefinedDerivative

    def NewInstance(self, *args):
        """
        NewInstance(Handle_StdFail_UndefinedDerivative self, Standard_CString const theMessage) -> Handle_StdFail_UndefinedDerivative

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_UndefinedDerivative

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdFail_UndefinedDerivative self) -> char const *

        :rtype: const char *

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_UndefinedDerivative_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_UndefinedDerivative_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_StdFail_UndefinedDerivative self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_StdFail_UndefinedDerivative self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_StdFail_UndefinedDerivative self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_StdFail_UndefinedDerivative self)
        Reraise(Handle_StdFail_UndefinedDerivative self, Standard_CString const aMessage)
        Reraise(Handle_StdFail_UndefinedDerivative self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_StdFail_UndefinedDerivative self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_StdFail_UndefinedDerivative self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StdFail_UndefinedDerivative self)

        Memory deallocator for transient classes


        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdFail_UndefinedDerivative self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdFail_UndefinedDerivative self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdFail_UndefinedDerivative self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdFail_UndefinedDerivative self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdFail_UndefinedDerivative self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdFail_UndefinedDerivative self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdFail_UndefinedDerivative self)

        Increments the reference counter of this object


        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdFail_UndefinedDerivative self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_UndefinedDerivative_DecrementRefCounter(self, *args)

Handle_StdFail_UndefinedDerivative_swigregister = _StdFail.Handle_StdFail_UndefinedDerivative_swigregister
Handle_StdFail_UndefinedDerivative_swigregister(Handle_StdFail_UndefinedDerivative)

def Handle_StdFail_UndefinedDerivative_DownCast(thing):
    return _StdFail.Handle_StdFail_UndefinedDerivative_DownCast(thing)
Handle_StdFail_UndefinedDerivative_DownCast = _StdFail.Handle_StdFail_UndefinedDerivative_DownCast

class Handle_StdFail_UndefinedValue(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdFail_UndefinedValue self)

        Nullify the handle


        """
        return _StdFail.Handle_StdFail_UndefinedValue_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdFail_UndefinedValue self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdFail.Handle_StdFail_UndefinedValue_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdFail_UndefinedValue self, StdFail_UndefinedValue thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdFail.Handle_StdFail_UndefinedValue_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdFail_UndefinedValue self, Handle_StdFail_UndefinedValue theHandle) -> Handle_StdFail_UndefinedValue
        assign(Handle_StdFail_UndefinedValue self, StdFail_UndefinedValue thePtr) -> Handle_StdFail_UndefinedValue
        assign(Handle_StdFail_UndefinedValue self, Handle_StdFail_UndefinedValue theHandle) -> Handle_StdFail_UndefinedValue

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdFail.Handle_StdFail_UndefinedValue_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdFail_UndefinedValue self) -> StdFail_UndefinedValue

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_UndefinedValue_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdFail_UndefinedValue self) -> StdFail_UndefinedValue

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdFail.Handle_StdFail_UndefinedValue___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdFail_UndefinedValue self) -> StdFail_UndefinedValue

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdFail.Handle_StdFail_UndefinedValue___ref__(self, *args)


    def __hash__(self):
        return _StdFail.Handle_StdFail_UndefinedValue___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdFail.Handle_StdFail_UndefinedValue___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdFail.new_Handle_StdFail_UndefinedValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdFail.Handle_StdFail_UndefinedValue_DownCast)
    __swig_destroy__ = _StdFail.delete_Handle_StdFail_UndefinedValue

    def NewInstance(self, *args):
        """
        NewInstance(Handle_StdFail_UndefinedValue self, Standard_CString const theMessage) -> Handle_StdFail_UndefinedValue

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.StdFail.Handle_StdFail_UndefinedValue

        """
        return _StdFail.Handle_StdFail_UndefinedValue_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdFail_UndefinedValue self) -> char const *

        :rtype: const char *

        """
        return _StdFail.Handle_StdFail_UndefinedValue_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_UndefinedValue_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdFail.Handle_StdFail_UndefinedValue_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_StdFail_UndefinedValue self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _StdFail.Handle_StdFail_UndefinedValue_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_StdFail_UndefinedValue self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_UndefinedValue_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_StdFail_UndefinedValue self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _StdFail.Handle_StdFail_UndefinedValue_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_StdFail_UndefinedValue self)
        Reraise(Handle_StdFail_UndefinedValue self, Standard_CString const aMessage)
        Reraise(Handle_StdFail_UndefinedValue self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _StdFail.Handle_StdFail_UndefinedValue_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_StdFail_UndefinedValue self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _StdFail.Handle_StdFail_UndefinedValue_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_StdFail_UndefinedValue self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _StdFail.Handle_StdFail_UndefinedValue_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StdFail_UndefinedValue self)

        Memory deallocator for transient classes


        """
        return _StdFail.Handle_StdFail_UndefinedValue_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdFail_UndefinedValue self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdFail_UndefinedValue self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_UndefinedValue_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdFail_UndefinedValue self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdFail_UndefinedValue self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdFail.Handle_StdFail_UndefinedValue_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdFail_UndefinedValue self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdFail.Handle_StdFail_UndefinedValue_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdFail_UndefinedValue self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_UndefinedValue_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdFail_UndefinedValue self)

        Increments the reference counter of this object


        """
        return _StdFail.Handle_StdFail_UndefinedValue_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdFail_UndefinedValue self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdFail.Handle_StdFail_UndefinedValue_DecrementRefCounter(self, *args)

Handle_StdFail_UndefinedValue_swigregister = _StdFail.Handle_StdFail_UndefinedValue_swigregister
Handle_StdFail_UndefinedValue_swigregister(Handle_StdFail_UndefinedValue)

def Handle_StdFail_UndefinedValue_DownCast(thing):
    return _StdFail.Handle_StdFail_UndefinedValue_DownCast(thing)
Handle_StdFail_UndefinedValue_DownCast = _StdFail.Handle_StdFail_UndefinedValue_DownCast



