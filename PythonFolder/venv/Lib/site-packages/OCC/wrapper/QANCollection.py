# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_QANCollection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_QANCollection')
    _QANCollection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_QANCollection', [dirname(__file__)])
        except ImportError:
            import _QANCollection
            return _QANCollection
        try:
            _mod = imp.load_module('_QANCollection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _QANCollection = swig_import_helper()
    del swig_import_helper
else:
    import _QANCollection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QANCollection.delete_SwigPyIterator

    def value(self):
        return _QANCollection.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _QANCollection.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _QANCollection.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _QANCollection.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _QANCollection.SwigPyIterator_equal(self, x)

    def copy(self):
        return _QANCollection.SwigPyIterator_copy(self)

    def next(self):
        return _QANCollection.SwigPyIterator_next(self)

    def __next__(self):
        return _QANCollection.SwigPyIterator___next__(self)

    def previous(self):
        return _QANCollection.SwigPyIterator_previous(self)

    def advance(self, n):
        return _QANCollection.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _QANCollection.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _QANCollection.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _QANCollection.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _QANCollection.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _QANCollection.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _QANCollection.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _QANCollection.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _QANCollection.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_QANCollection.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _QANCollection.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _QANCollection.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QANCollection.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _QANCollection.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _QANCollection.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _QANCollection.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _QANCollection.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_QANCollection.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _QANCollection.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _QANCollection.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QANCollection.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _QANCollection.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _QANCollection.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _QANCollection.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _QANCollection.ptr_to_number(item)
ptr_to_number = _QANCollection.ptr_to_number

def HashCode(*args):
    return _QANCollection.HashCode(*args)
HashCode = _QANCollection.HashCode

def ptr_equal(a, b):
    return _QANCollection.ptr_equal(a, b)
ptr_equal = _QANCollection.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info

try:
	TColStd_MapIntegerHasher = TColStd.NCollection_DefaultHasher_Standard_Integer
except AttributeError:
	pass # does not exist, probably ignored

class NCollection_List_gp_Pnt_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _QANCollection.new_NCollection_List_gp_Pnt_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QANCollection.delete_NCollection_List_gp_Pnt_IteratorHelper

    def __next__(self):
        return _QANCollection.NCollection_List_gp_Pnt_IteratorHelper___next__(self)
NCollection_List_gp_Pnt_IteratorHelper_swigregister = _QANCollection.NCollection_List_gp_Pnt_IteratorHelper_swigregister
NCollection_List_gp_Pnt_IteratorHelper_swigregister(NCollection_List_gp_Pnt_IteratorHelper)


try:
	QANCollection_ListOfPnt = NCollection_List_gp_Pnt
except NameError:
	pass # does not exist, probably ignored


try:
	TColStd_MapRealHasher = TColStd.NCollection_DefaultHasher_Standard_Real
except AttributeError:
	pass # does not exist, probably ignored

class NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     An indexed map is used  to store keys and to  bind
    an index to them.  Each  new key stored in the map
    gets an index.  Index are  incremented as keys are
    stored in the map. A key can be found by the index
    and an index by the key.  No  key but the last can
    be  removed so the  indices   are in the range 1..
    Extent.  An Item is stored with each key.

    This   class is   similar  to  IndexedMap     from
    NCollection  with the Item as  a new feature. Note
    the important difference on  the operator  ().  In
    the IndexedMap this operator returns  the Key.  In
    the IndexedDataMap this operator returns the Item.

    See  the  class   Map   from NCollection   for   a
    discussion about the number of buckets.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> NCollection_IndexedDataMap< Standard_Real,gp_Pnt,TColStd_MapRealHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> NCollection_IndexedDataMap< Standard_Real,gp_Pnt,TColStd_MapRealHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> NCollection_IndexedDataMap< Standard_Real,gp_Pnt,TColStd_MapRealHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> NCollection_IndexedDataMap< Standard_Real,gp_Pnt,TColStd_MapRealHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     An indexed map is used  to store keys and to  bind
        an index to them.  Each  new key stored in the map
        gets an index.  Index are  incremented as keys are
        stored in the map. A key can be found by the index
        and an index by the key.  No  key but the last can
        be  removed so the  indices   are in the range 1..
        Extent.  An Item is stored with each key.

        This   class is   similar  to  IndexedMap     from
        NCollection  with the Item as  a new feature. Note
        the important difference on  the operator  ().  In
        the IndexedMap this operator returns  the Key.  In
        the IndexedDataMap this operator returns the Item.

        See  the  class   Map   from NCollection   for   a
        discussion about the number of buckets.
        """
        this = _QANCollection.new_NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher theOther) -> NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap
        :rtype: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher theOther) -> NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap
        :rtype: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_ReSize(self, *args)


    def Add(self, *args):
        """
        Add(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey1, gp_Pnt theItem) -> Standard_Integer

        Returns the Index of already bound Key or appends new Key with specified Item value.
        @param theKey1 Key to search (and to bind, if it was not bound already)
        @param theItem Item value to set for newly bound Key; ignored if Key was already bound
        @return index of Key

        :type theKey1: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Add(self, *args)


    def Contains(self, *args):
        """
        Contains(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey1) -> Standard_Boolean

        Contains

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Contains(self, *args)


    def Substitute(self, *args):
        """
        Substitute(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Standard_Integer const theIndex, double const & theKey1, gp_Pnt theItem)

        Substitute

        :type theIndex: int
        :type theKey1: const TheKeyType &
        :type theItem: const TheItemType &

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Substitute(self, *args)


    def Swap(self, *args):
        """
        Swap(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Standard_Integer const theIndex1, Standard_Integer const theIndex2)

        Swaps two elements with the given indices.

        :type theIndex1: int
        :type theIndex2: int

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Swap(self, *args)


    def RemoveLast(self, *args):
        """
        RemoveLast(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self)

        RemoveLast


        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_RemoveLast(self, *args)


    def RemoveFromIndex(self, *args):
        """
        RemoveFromIndex(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Standard_Integer const theIndex)

        Remove the key of the given index.
        Caution! The index of the last key can be changed.

        :type theIndex: int

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_RemoveFromIndex(self, *args)


    def RemoveKey(self, *args):
        """
        RemoveKey(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey1)

        Remove the given key.
        Caution! The index of the last key can be changed.

        :type theKey1: const TheKeyType &

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_RemoveKey(self, *args)


    def FindKey(self, *args):
        """
        FindKey

        :type theIndex: int
        :rtype: const TheKeyType &

        """
        res = _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_FindKey(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FindFromIndex(self, *args):
        """
        FindFromIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_FindFromIndex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFromIndex(self, *args):
        """
        ChangeFromIndex(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Standard_Integer const theIndex) -> gp_Pnt

        ChangeFromIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_ChangeFromIndex(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FindIndex(self, *args):
        """
        FindIndex(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey1) -> Standard_Integer

        FindIndex

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_FindIndex(self, *args)


    def ChangeFromKey(self, *args):
        """
        ChangeFromKey(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey1) -> gp_Pnt

        ChangeFromKey

        :type theKey1: const TheKeyType &
        :rtype: TheItemType &

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_ChangeFromKey(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey1) -> gp_Pnt

        Seek returns pointer to Item by Key. Returns
        NULL if Key was not found.

        :type theKey1: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Seek(self, *args)


    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey1) -> gp_Pnt

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL if Key was not found.

        :type theKey1: const TheKeyType &
        :rtype: TheItemType *

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_ChangeSeek(self, *args)


    def FindFromKey(self, *args):
        """
        FindFromKey

        :type theKey1: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_FindFromKey(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Size(self, *args)


    def __iter__(self):
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher___iter__(self)
    __swig_destroy__ = _QANCollection.delete_NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher
NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_swigregister = _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_swigregister
NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_swigregister(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher)

class NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _QANCollection.new_NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QANCollection.delete_NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper

    def __next__(self):
        return _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper___next__(self)
NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper_swigregister = _QANCollection.NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper_swigregister
NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper_swigregister(NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper)


try:
	QANCollection_IndexedDataMapOfRealPnt = NCollection_IndexedDataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher
except NameError:
	pass # does not exist, probably ignored

class QANCollection_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Commands(*args):
        """
        Commands(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QANCollection.QANCollection__Commands(*args)

    Commands = staticmethod(Commands)

    def CommandsTest(*args):
        """
        CommandsTest(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QANCollection.QANCollection__CommandsTest(*args)

    CommandsTest = staticmethod(CommandsTest)

    def CommandsPerf(*args):
        """
        CommandsPerf(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QANCollection.QANCollection__CommandsPerf(*args)

    CommandsPerf = staticmethod(CommandsPerf)

    def CommandsAlloc(*args):
        """
        CommandsAlloc(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QANCollection.QANCollection__CommandsAlloc(*args)

    CommandsAlloc = staticmethod(CommandsAlloc)

    def CommandsStl(*args):
        """
        CommandsStl(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QANCollection.QANCollection__CommandsStl(*args)

    CommandsStl = staticmethod(CommandsStl)

    def CommandsHandle(*args):
        """
        CommandsHandle(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QANCollection.QANCollection__CommandsHandle(*args)

    CommandsHandle = staticmethod(CommandsHandle)

    def __init__(self):
        this = _QANCollection.new_QANCollection_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QANCollection.delete_QANCollection_
QANCollection__swigregister = _QANCollection.QANCollection__swigregister
QANCollection__swigregister(QANCollection_)

def QANCollection__Commands(*args):
    """
    QANCollection__Commands(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QANCollection.QANCollection__Commands(*args)

def QANCollection__CommandsTest(*args):
    """
    QANCollection__CommandsTest(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QANCollection.QANCollection__CommandsTest(*args)

def QANCollection__CommandsPerf(*args):
    """
    QANCollection__CommandsPerf(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QANCollection.QANCollection__CommandsPerf(*args)

def QANCollection__CommandsAlloc(*args):
    """
    QANCollection__CommandsAlloc(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QANCollection.QANCollection__CommandsAlloc(*args)

def QANCollection__CommandsStl(*args):
    """
    QANCollection__CommandsStl(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QANCollection.QANCollection__CommandsStl(*args)

def QANCollection__CommandsHandle(*args):
    """
    QANCollection__CommandsHandle(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QANCollection.QANCollection__CommandsHandle(*args)

class NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DoubleMap  is used to  bind  pairs (Key1,Key2)
    and retrieve them in linear time.

    See Map from NCollection for a discussion about the number
    of buckets
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:     The DoubleMap  is used to  bind  pairs (Key1,Key2)
        and retrieve them in linear time.

        See Map from NCollection for a discussion about the number
        of buckets
        """
        this = _QANCollection.new_NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DoubleMap

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher theOther) -> NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DoubleMap
        :rtype: OCC.wrapper.NCollection.NCollection_DoubleMap

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher theOther) -> NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DoubleMap
        :rtype: OCC.wrapper.NCollection.NCollection_DoubleMap

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, double const & theKey1, int const & theKey2)

        Bind

        :type theKey1: const TheKey1Type &
        :type theKey2: const TheKey2Type &

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_Bind(self, *args)


    def AreBound(self, *args):
        """
        AreBound(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, double const & theKey1, int const & theKey2) -> Standard_Boolean

        * AreBound

        :type theKey1: const TheKey1Type &
        :type theKey2: const TheKey2Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_AreBound(self, *args)


    def IsBound1(self, *args):
        """
        IsBound1(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, double const & theKey1) -> Standard_Boolean

        IsBound1

        :type theKey1: const TheKey1Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_IsBound1(self, *args)


    def IsBound2(self, *args):
        """
        IsBound2(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, int const & theKey2) -> Standard_Boolean

        IsBound2

        :type theKey2: const TheKey2Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_IsBound2(self, *args)


    def UnBind1(self, *args):
        """
        UnBind1(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, double const & theKey1) -> Standard_Boolean

        UnBind1

        :type theKey1: const TheKey1Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_UnBind1(self, *args)


    def UnBind2(self, *args):
        """
        UnBind2(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, int const & theKey2) -> Standard_Boolean

        UnBind2

        :type theKey2: const TheKey2Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_UnBind2(self, *args)


    def Find1(self, *args):
        """
        Find1

        :type theKey1: const TheKey1Type &
        :rtype: const TheKey2Type &

        """
        res = _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_Find1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Find2(self, *args):
        """
        Find2

        :type theKey2: const TheKey2Type &
        :rtype: const TheKey1Type &

        """
        res = _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_Find2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_Size(self, *args)

    __swig_destroy__ = _QANCollection.delete_NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher
NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_swigregister = _QANCollection.NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_swigregister
NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher_swigregister(NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher)


try:
	QANCollection_DoubleMapOfRealInteger = NCollection_DoubleMap_Standard_Real_Standard_Integer_TColStd_MapRealHasher_TColStd_MapIntegerHasher
except NameError:
	pass # does not exist, probably ignored

class NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> NCollection_DataMap< Standard_Real,gp_Pnt,TColStd_MapRealHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> NCollection_DataMap< Standard_Real,gp_Pnt,TColStd_MapRealHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> NCollection_DataMap< Standard_Real,gp_Pnt,TColStd_MapRealHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> NCollection_DataMap< Standard_Real,gp_Pnt,TColStd_MapRealHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _QANCollection.new_NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher theOther) -> NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher theOther) -> NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey, gp_Pnt theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey, gp_Pnt theItem) -> gp_Pnt

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey) -> gp_Pnt

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey) -> gp_Pnt

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, double const & theKey) -> gp_Pnt

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_Size(self, *args)


    def __iter__(self):
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher___iter__(self)
    __swig_destroy__ = _QANCollection.delete_NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher
NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_swigregister = _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_swigregister
NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_swigregister(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher)

class NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _QANCollection.new_NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QANCollection.delete_NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper

    def __next__(self):
        return _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper___next__(self)
NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper_swigregister = _QANCollection.NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper_swigregister
NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper_swigregister(NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher_IteratorHelper)


try:
	QANCollection_DataMapOfRealPnt = NCollection_DataMap_Standard_Real_gp_Pnt_TColStd_MapRealHasher
except NameError:
	pass # does not exist, probably ignored



