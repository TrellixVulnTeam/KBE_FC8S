# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MAT2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MAT2d')
    _MAT2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MAT2d', [dirname(__file__)])
        except ImportError:
            import _MAT2d
            return _MAT2d
        try:
            _mod = imp.load_module('_MAT2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MAT2d = swig_import_helper()
    del swig_import_helper
else:
    import _MAT2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MAT2d.delete_SwigPyIterator

    def value(self):
        return _MAT2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MAT2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MAT2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MAT2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MAT2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MAT2d.SwigPyIterator_copy(self)

    def next(self):
        return _MAT2d.SwigPyIterator_next(self)

    def __next__(self):
        return _MAT2d.SwigPyIterator___next__(self)

    def previous(self):
        return _MAT2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MAT2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MAT2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MAT2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MAT2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MAT2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MAT2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MAT2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _MAT2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _MAT2d.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_MAT2d.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _MAT2d.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _MAT2d.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _MAT2d.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _MAT2d.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _MAT2d.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _MAT2d.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_MAT2d.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _MAT2d.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _MAT2d.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _MAT2d.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _MAT2d.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _MAT2d.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _MAT2d.ptr_to_number(item)
ptr_to_number = _MAT2d.ptr_to_number

def HashCode(*args):
    return _MAT2d.HashCode(*args)
HashCode = _MAT2d.HashCode

def ptr_equal(a, b):
    return _MAT2d.ptr_equal(a, b)
ptr_equal = _MAT2d.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom2d
else:
    import TColGeom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bisector
else:
    import Bisector
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GccInt
else:
    import GccInt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MAT
else:
    import MAT
del _swig_python_version_info
class MAT2d_Connexion(Standard.Standard_Transient):
    """
    A Connexion links two lines of items  in a set
    of  lines. It s contains two  points and their paramatric
    definitions on the lines.
    The items can be points or curves.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_MAT2d_Connexion
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_MAT2d_Connexion(self) 
            return h


    def __init__(self, *args):
        """
        __init__(MAT2d_Connexion self) -> MAT2d_Connexion
        __init__(MAT2d_Connexion self, Standard_Integer const LineA, Standard_Integer const LineB, Standard_Integer const ItemA, Standard_Integer const ItemB, Standard_Real const Distance, Standard_Real const ParameterOnA, Standard_Real const ParameterOnB, gp_Pnt2d PointA, gp_Pnt2d PointB) -> MAT2d_Connexion

        :type LineA: int
        :type LineB: int
        :type ItemA: int
        :type ItemB: int
        :type Distance: float
        :type ParameterOnA: float
        :type ParameterOnB: float
        :type PointA: OCC.wrapper.gp.gp_Pnt2d
        :type PointB: OCC.wrapper.gp.gp_Pnt2d

        """
        this = _MAT2d.new_MAT2d_Connexion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IndexFirstLine(self, *args):
        """
        IndexFirstLine(MAT2d_Connexion self) -> Standard_Integer
        IndexFirstLine(MAT2d_Connexion self, Standard_Integer const anIndex)

        :type anIndex: int

        """
        return _MAT2d.MAT2d_Connexion_IndexFirstLine(self, *args)


    def IndexSecondLine(self, *args):
        """
        IndexSecondLine(MAT2d_Connexion self) -> Standard_Integer
        IndexSecondLine(MAT2d_Connexion self, Standard_Integer const anIndex)

        :type anIndex: int

        """
        return _MAT2d.MAT2d_Connexion_IndexSecondLine(self, *args)


    def IndexItemOnFirst(self, *args):
        """
        IndexItemOnFirst(MAT2d_Connexion self) -> Standard_Integer
        IndexItemOnFirst(MAT2d_Connexion self, Standard_Integer const anIndex)

        :type anIndex: int

        """
        return _MAT2d.MAT2d_Connexion_IndexItemOnFirst(self, *args)


    def IndexItemOnSecond(self, *args):
        """
        IndexItemOnSecond(MAT2d_Connexion self) -> Standard_Integer
        IndexItemOnSecond(MAT2d_Connexion self, Standard_Integer const anIndex)

        :type anIndex: int

        """
        return _MAT2d.MAT2d_Connexion_IndexItemOnSecond(self, *args)


    def ParameterOnFirst(self, *args):
        """
        ParameterOnFirst(MAT2d_Connexion self) -> Standard_Real
        ParameterOnFirst(MAT2d_Connexion self, Standard_Real const aParameter)

        :type aParameter: float

        """
        return _MAT2d.MAT2d_Connexion_ParameterOnFirst(self, *args)


    def ParameterOnSecond(self, *args):
        """
        ParameterOnSecond(MAT2d_Connexion self) -> Standard_Real
        ParameterOnSecond(MAT2d_Connexion self, Standard_Real const aParameter)

        :type aParameter: float

        """
        return _MAT2d.MAT2d_Connexion_ParameterOnSecond(self, *args)


    def PointOnFirst(self, *args):
        """
        PointOnFirst(MAT2d_Connexion self) -> gp_Pnt2d
        PointOnFirst(MAT2d_Connexion self, gp_Pnt2d aPoint)

        :type aPoint: OCC.wrapper.gp.gp_Pnt2d

        """
        return _MAT2d.MAT2d_Connexion_PointOnFirst(self, *args)


    def PointOnSecond(self, *args):
        """
        PointOnSecond(MAT2d_Connexion self) -> gp_Pnt2d
        PointOnSecond(MAT2d_Connexion self, gp_Pnt2d aPoint)

        :type aPoint: OCC.wrapper.gp.gp_Pnt2d

        """
        return _MAT2d.MAT2d_Connexion_PointOnSecond(self, *args)


    def Distance(self, *args):
        """
        Distance(MAT2d_Connexion self) -> Standard_Real
        Distance(MAT2d_Connexion self, Standard_Real const aDistance)

        :type aDistance: float

        """
        return _MAT2d.MAT2d_Connexion_Distance(self, *args)


    def Reverse(self, *args):
        """
        Reverse(MAT2d_Connexion self) -> Handle_MAT2d_Connexion

        Returns the reverse connexion of <me>.
        the firstpoint  is the secondpoint.
        the secondpoint is the firstpoint.

        :rtype: OCC.wrapper.MAT2d.Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_Connexion_Reverse(self, *args)


    def IsAfter(self, *args):
        """
        IsAfter(MAT2d_Connexion self, Handle_MAT2d_Connexion aConnexion, Standard_Real const aSense) -> Standard_Boolean

        Returns <True> if my firstPoint is on the same line
        than the firstpoint of <aConnexion> and my firstpoint
        is after the firstpoint of <aConnexion> on the line.
        <aSense> = 1 if <aConnexion> is on the Left of its
        firstline, else <aSense> = -1.

        :type aConnexion: OCC.wrapper.MAT2d.Handle_MAT2d_Connexion
        :type aSense: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_Connexion_IsAfter(self, *args)


    def Dump(self, *args):
        """
        Dump(MAT2d_Connexion self, Standard_Integer const Deep=0, Standard_Integer const Offset=0)

        Print <me>.

        :type Deep: int
        :type Offset: int

        """
        return _MAT2d.MAT2d_Connexion_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _MAT2d.MAT2d_Connexion_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _MAT2d.MAT2d_Connexion_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _MAT2d.MAT2d_Connexion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _MAT2d.delete_MAT2d_Connexion
MAT2d_Connexion_swigregister = _MAT2d.MAT2d_Connexion_swigregister
MAT2d_Connexion_swigregister(MAT2d_Connexion)

def MAT2d_Connexion_get_type_name(*args):
    """
    MAT2d_Connexion_get_type_name() -> char const *

    :rtype: const char *

    """
    return _MAT2d.MAT2d_Connexion_get_type_name(*args)

def MAT2d_Connexion_get_type_descriptor(*args):
    """
    MAT2d_Connexion_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _MAT2d.MAT2d_Connexion_get_type_descriptor(*args)

class MAT2d_Circuit(Standard.Standard_Transient):
    """
    Constructs a circuit on a set of lines.
    EquiCircuit gives a Circuit passing by all the lines
    in a set and all the connexions of the minipath associated.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_MAT2d_Circuit
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_MAT2d_Circuit(self) 
            return h


    def __init__(self, *args):
        """
        __init__(MAT2d_Circuit self, GeomAbs_JoinType const aJoinType=GeomAbs_Arc, Standard_Boolean const IsOpenResult) -> MAT2d_Circuit

        :type aJoinType: OCC.wrapper.GeomAbs.GeomAbs_JoinType
        :type IsOpenResult: bool

        """
        this = _MAT2d.new_MAT2d_Circuit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Perform(self, *args):
        """
        Perform(MAT2d_Circuit self, NCollection_Sequence_TColGeom2d_SequenceOfGeometry aFigure, NCollection_Sequence_Standard_Boolean IsClosed, Standard_Integer const IndRefLine, Standard_Boolean const Trigo)

        :type aFigure: OCC.wrapper.MAT2d.MAT2d_SequenceOfSequenceOfGeometry
        :type IsClosed: OCC.wrapper.TColStd.TColStd_SequenceOfBoolean
        :type IndRefLine: int
        :type Trigo: bool

        """
        return _MAT2d.MAT2d_Circuit_Perform(self, *args)


    def NumberOfItems(self, *args):
        """
        NumberOfItems(MAT2d_Circuit self) -> Standard_Integer

        Returns the Number of Items .

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_Circuit_NumberOfItems(self, *args)


    def Value(self, *args):
        """
        Value(MAT2d_Circuit self, Standard_Integer const Index) -> Handle_Geom2d_Geometry

        Returns the item at position <Index> in <me>.

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Geometry

        """
        return _MAT2d.MAT2d_Circuit_Value(self, *args)


    def LineLength(self, *args):
        """
        LineLength(MAT2d_Circuit self, Standard_Integer const IndexLine) -> Standard_Integer

        Returns the number of items on the line <IndexLine>.

        :type IndexLine: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_Circuit_LineLength(self, *args)


    def RefToEqui(self, *args):
        """
        Returns the set of index of the items in <me>corresponding
        to the curve <IndCurve> on the line <IndLine> from the
        initial figure.

        :type IndLine: int
        :type IndCurve: int
        :rtype: OCC.wrapper.TColStd.TColStd_SequenceOfInteger

        """
        res = _MAT2d.MAT2d_Circuit_RefToEqui(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Connexion(self, *args):
        """
        Connexion(MAT2d_Circuit self, Standard_Integer const Index) -> Handle_MAT2d_Connexion

        Returns the Connexion on the item <Index> in me.

        :type Index: int
        :rtype: OCC.wrapper.MAT2d.Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_Circuit_Connexion(self, *args)


    def ConnexionOn(self, *args):
        """
        ConnexionOn(MAT2d_Circuit self, Standard_Integer const Index) -> Standard_Boolean

        Returns <True> is there is a connexion on the item <Index>
        in <me>.

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_Circuit_ConnexionOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _MAT2d.MAT2d_Circuit_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _MAT2d.MAT2d_Circuit_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _MAT2d.MAT2d_Circuit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _MAT2d.delete_MAT2d_Circuit
MAT2d_Circuit_swigregister = _MAT2d.MAT2d_Circuit_swigregister
MAT2d_Circuit_swigregister(MAT2d_Circuit)

def MAT2d_Circuit_get_type_name(*args):
    """
    MAT2d_Circuit_get_type_name() -> char const *

    :rtype: const char *

    """
    return _MAT2d.MAT2d_Circuit_get_type_name(*args)

def MAT2d_Circuit_get_type_descriptor(*args):
    """
    MAT2d_Circuit_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _MAT2d.MAT2d_Circuit_get_type_descriptor(*args)

class MAT2d_MapBiIntHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        HashCode(MAT2d_BiInt Key1, Standard_Integer const Upper) -> Standard_Integer

        :type Key1: OCC.wrapper.MAT2d.MAT2d_BiInt
        :type Upper: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_MapBiIntHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        IsEqual(MAT2d_BiInt Key1, MAT2d_BiInt Key2) -> Standard_Boolean

        :type Key1: OCC.wrapper.MAT2d.MAT2d_BiInt
        :type Key2: OCC.wrapper.MAT2d.MAT2d_BiInt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_MapBiIntHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        this = _MAT2d.new_MAT2d_MapBiIntHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_MAT2d_MapBiIntHasher
MAT2d_MapBiIntHasher_swigregister = _MAT2d.MAT2d_MapBiIntHasher_swigregister
MAT2d_MapBiIntHasher_swigregister(MAT2d_MapBiIntHasher)

def MAT2d_MapBiIntHasher_HashCode(*args):
    """
    MAT2d_MapBiIntHasher_HashCode(MAT2d_BiInt Key1, Standard_Integer const Upper) -> Standard_Integer

    :type Key1: OCC.wrapper.MAT2d.MAT2d_BiInt
    :type Upper: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _MAT2d.MAT2d_MapBiIntHasher_HashCode(*args)

def MAT2d_MapBiIntHasher_IsEqual(*args):
    """
    MAT2d_MapBiIntHasher_IsEqual(MAT2d_BiInt Key1, MAT2d_BiInt Key2) -> Standard_Boolean

    :type Key1: OCC.wrapper.MAT2d.MAT2d_BiInt
    :type Key2: OCC.wrapper.MAT2d.MAT2d_BiInt
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _MAT2d.MAT2d_MapBiIntHasher_IsEqual(*args)

class MAT2d_BiInt(object):
    """BiInt is a set of two integers."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(MAT2d_BiInt self, Standard_Integer const I1, Standard_Integer const I2) -> MAT2d_BiInt

        :type I1: int
        :type I2: int

        """
        this = _MAT2d.new_MAT2d_BiInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FirstIndex(self, *args):
        """
        FirstIndex(MAT2d_BiInt self) -> Standard_Integer
        FirstIndex(MAT2d_BiInt self, Standard_Integer const I1)

        :type I1: int

        """
        return _MAT2d.MAT2d_BiInt_FirstIndex(self, *args)


    def SecondIndex(self, *args):
        """
        SecondIndex(MAT2d_BiInt self) -> Standard_Integer
        SecondIndex(MAT2d_BiInt self, Standard_Integer const I2)

        :type I2: int

        """
        return _MAT2d.MAT2d_BiInt_SecondIndex(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(MAT2d_BiInt self, MAT2d_BiInt B) -> Standard_Boolean

        :type B: OCC.wrapper.MAT2d.MAT2d_BiInt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_BiInt_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(MAT2d_BiInt self, MAT2d_BiInt B) -> Standard_Boolean

        :type B: OCC.wrapper.MAT2d.MAT2d_BiInt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_BiInt___eq__(self, *args)

    __swig_destroy__ = _MAT2d.delete_MAT2d_BiInt
MAT2d_BiInt_swigregister = _MAT2d.MAT2d_BiInt_swigregister
MAT2d_BiInt_swigregister(MAT2d_BiInt)

class NCollection_Sequence_TColGeom2d_SequenceOfCurve(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> NCollection_Sequence< TColGeom2d_SequenceOfCurve >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> NCollection_Sequence< TColGeom2d_SequenceOfCurve >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> NCollection_Sequence< TColGeom2d_SequenceOfCurve >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> NCollection_Sequence< TColGeom2d_SequenceOfCurve >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _MAT2d.new_NCollection_Sequence_TColGeom2d_SequenceOfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_TColGeom2d_SequenceOfCurve self)

        Reverse sequence


        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, NCollection_Sequence_TColGeom2d_SequenceOfCurve theOther) -> NCollection_Sequence_TColGeom2d_SequenceOfCurve

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, NCollection_Sequence_TColGeom2d_SequenceOfCurve theOther) -> NCollection_Sequence_TColGeom2d_SequenceOfCurve

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, NCollection_Sequence< TColGeom2d_SequenceOfCurve >::Iterator & thePosition)
        Remove(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, NCollection_Sequence_Handle_Geom2d_Curve theItem)
        Append(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, NCollection_Sequence_TColGeom2d_SequenceOfCurve theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, NCollection_Sequence_Handle_Geom2d_Curve theItem)
        Prepend(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, NCollection_Sequence_TColGeom2d_SequenceOfCurve theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Curve theItem)
        InsertBefore(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theIndex, NCollection_Sequence_TColGeom2d_SequenceOfCurve theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, NCollection_Sequence< TColGeom2d_SequenceOfCurve >::Iterator & thePosition, NCollection_Sequence_Handle_Geom2d_Curve theItem)
        InsertAfter(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theIndex, NCollection_Sequence_TColGeom2d_SequenceOfCurve theSeq)
        InsertAfter(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Curve theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theIndex, NCollection_Sequence_TColGeom2d_SequenceOfCurve theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> NCollection_Sequence_Handle_Geom2d_Curve

        First item access

        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_TColGeom2d_SequenceOfCurve self) -> NCollection_Sequence_Handle_Geom2d_Curve

        Last item access

        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theIndex) -> NCollection_Sequence_Handle_Geom2d_Curve

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_TColGeom2d_SequenceOfCurve self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Curve theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_SetValue(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_Sequence_TColGeom2d_SequenceOfCurve
NCollection_Sequence_TColGeom2d_SequenceOfCurve_swigregister = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_swigregister
NCollection_Sequence_TColGeom2d_SequenceOfCurve_swigregister(NCollection_Sequence_TColGeom2d_SequenceOfCurve)

def NCollection_Sequence_TColGeom2d_SequenceOfCurve_delNode(*args):
    """
    NCollection_Sequence_TColGeom2d_SequenceOfCurve_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_delNode(*args)

class NCollection_Sequence_TColGeom2d_SequenceOfCurve_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_Sequence_TColGeom2d_SequenceOfCurve_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_Sequence_TColGeom2d_SequenceOfCurve_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_IteratorHelper___next__(self)
NCollection_Sequence_TColGeom2d_SequenceOfCurve_IteratorHelper_swigregister = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfCurve_IteratorHelper_swigregister
NCollection_Sequence_TColGeom2d_SequenceOfCurve_IteratorHelper_swigregister(NCollection_Sequence_TColGeom2d_SequenceOfCurve_IteratorHelper)


try:
	MAT2d_SequenceOfSequenceOfCurve = NCollection_Sequence_TColGeom2d_SequenceOfCurve
except NameError:
	pass # does not exist, probably ignored

class Handle_MAT2d_Connexion(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_MAT2d_Connexion self)

        Nullify the handle


        """
        return _MAT2d.Handle_MAT2d_Connexion_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_MAT2d_Connexion self) -> bool

        Check for being null

        :rtype: bool

        """
        return _MAT2d.Handle_MAT2d_Connexion_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_MAT2d_Connexion self, MAT2d_Connexion thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _MAT2d.Handle_MAT2d_Connexion_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_MAT2d_Connexion self, Handle_MAT2d_Connexion theHandle) -> Handle_MAT2d_Connexion
        assign(Handle_MAT2d_Connexion self, MAT2d_Connexion thePtr) -> Handle_MAT2d_Connexion
        assign(Handle_MAT2d_Connexion self, Handle_MAT2d_Connexion theHandle) -> Handle_MAT2d_Connexion

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _MAT2d.Handle_MAT2d_Connexion_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_MAT2d_Connexion self) -> MAT2d_Connexion

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _MAT2d.Handle_MAT2d_Connexion_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_MAT2d_Connexion self) -> MAT2d_Connexion

        Member access operator (note non-const)

        :rtype: T *

        """
        return _MAT2d.Handle_MAT2d_Connexion___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_MAT2d_Connexion self) -> MAT2d_Connexion

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _MAT2d.Handle_MAT2d_Connexion___ref__(self, *args)


    def __hash__(self):
        return _MAT2d.Handle_MAT2d_Connexion___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _MAT2d.Handle_MAT2d_Connexion___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _MAT2d.new_Handle_MAT2d_Connexion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_Connexion_DownCast)
    __swig_destroy__ = _MAT2d.delete_Handle_MAT2d_Connexion

    def IndexFirstLine(self, *args):
        """
        IndexFirstLine(Handle_MAT2d_Connexion self) -> Standard_Integer
        IndexFirstLine(Handle_MAT2d_Connexion self, Standard_Integer const anIndex)

        :type anIndex: int

        """
        return _MAT2d.Handle_MAT2d_Connexion_IndexFirstLine(self, *args)


    def IndexSecondLine(self, *args):
        """
        IndexSecondLine(Handle_MAT2d_Connexion self) -> Standard_Integer
        IndexSecondLine(Handle_MAT2d_Connexion self, Standard_Integer const anIndex)

        :type anIndex: int

        """
        return _MAT2d.Handle_MAT2d_Connexion_IndexSecondLine(self, *args)


    def IndexItemOnFirst(self, *args):
        """
        IndexItemOnFirst(Handle_MAT2d_Connexion self) -> Standard_Integer
        IndexItemOnFirst(Handle_MAT2d_Connexion self, Standard_Integer const anIndex)

        :type anIndex: int

        """
        return _MAT2d.Handle_MAT2d_Connexion_IndexItemOnFirst(self, *args)


    def IndexItemOnSecond(self, *args):
        """
        IndexItemOnSecond(Handle_MAT2d_Connexion self) -> Standard_Integer
        IndexItemOnSecond(Handle_MAT2d_Connexion self, Standard_Integer const anIndex)

        :type anIndex: int

        """
        return _MAT2d.Handle_MAT2d_Connexion_IndexItemOnSecond(self, *args)


    def ParameterOnFirst(self, *args):
        """
        ParameterOnFirst(Handle_MAT2d_Connexion self) -> Standard_Real
        ParameterOnFirst(Handle_MAT2d_Connexion self, Standard_Real const aParameter)

        :type aParameter: float

        """
        return _MAT2d.Handle_MAT2d_Connexion_ParameterOnFirst(self, *args)


    def ParameterOnSecond(self, *args):
        """
        ParameterOnSecond(Handle_MAT2d_Connexion self) -> Standard_Real
        ParameterOnSecond(Handle_MAT2d_Connexion self, Standard_Real const aParameter)

        :type aParameter: float

        """
        return _MAT2d.Handle_MAT2d_Connexion_ParameterOnSecond(self, *args)


    def PointOnFirst(self, *args):
        """
        PointOnFirst(Handle_MAT2d_Connexion self) -> gp_Pnt2d
        PointOnFirst(Handle_MAT2d_Connexion self, gp_Pnt2d aPoint)

        :type aPoint: OCC.wrapper.gp.gp_Pnt2d

        """
        return _MAT2d.Handle_MAT2d_Connexion_PointOnFirst(self, *args)


    def PointOnSecond(self, *args):
        """
        PointOnSecond(Handle_MAT2d_Connexion self) -> gp_Pnt2d
        PointOnSecond(Handle_MAT2d_Connexion self, gp_Pnt2d aPoint)

        :type aPoint: OCC.wrapper.gp.gp_Pnt2d

        """
        return _MAT2d.Handle_MAT2d_Connexion_PointOnSecond(self, *args)


    def Distance(self, *args):
        """
        Distance(Handle_MAT2d_Connexion self) -> Standard_Real
        Distance(Handle_MAT2d_Connexion self, Standard_Real const aDistance)

        :type aDistance: float

        """
        return _MAT2d.Handle_MAT2d_Connexion_Distance(self, *args)


    def Reverse(self, *args):
        """
        Reverse(Handle_MAT2d_Connexion self) -> Handle_MAT2d_Connexion

        Returns the reverse connexion of <me>.
        the firstpoint  is the secondpoint.
        the secondpoint is the firstpoint.

        :rtype: OCC.wrapper.MAT2d.Handle_MAT2d_Connexion

        """
        return _MAT2d.Handle_MAT2d_Connexion_Reverse(self, *args)


    def IsAfter(self, *args):
        """
        IsAfter(Handle_MAT2d_Connexion self, Handle_MAT2d_Connexion aConnexion, Standard_Real const aSense) -> Standard_Boolean

        Returns <True> if my firstPoint is on the same line
        than the firstpoint of <aConnexion> and my firstpoint
        is after the firstpoint of <aConnexion> on the line.
        <aSense> = 1 if <aConnexion> is on the Left of its
        firstline, else <aSense> = -1.

        :type aConnexion: OCC.wrapper.MAT2d.Handle_MAT2d_Connexion
        :type aSense: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.Handle_MAT2d_Connexion_IsAfter(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_MAT2d_Connexion self, Standard_Integer const Deep=0, Standard_Integer const Offset=0)

        Print <me>.

        :type Deep: int
        :type Offset: int

        """
        return _MAT2d.Handle_MAT2d_Connexion_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_MAT2d_Connexion self) -> char const *

        :rtype: const char *

        """
        return _MAT2d.Handle_MAT2d_Connexion_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _MAT2d.Handle_MAT2d_Connexion_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _MAT2d.Handle_MAT2d_Connexion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_MAT2d_Connexion self)

        Memory deallocator for transient classes


        """
        return _MAT2d.Handle_MAT2d_Connexion_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_MAT2d_Connexion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_MAT2d_Connexion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.Handle_MAT2d_Connexion_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_MAT2d_Connexion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_MAT2d_Connexion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.Handle_MAT2d_Connexion_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_MAT2d_Connexion self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _MAT2d.Handle_MAT2d_Connexion_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_MAT2d_Connexion self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.Handle_MAT2d_Connexion_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_MAT2d_Connexion self)

        Increments the reference counter of this object


        """
        return _MAT2d.Handle_MAT2d_Connexion_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_MAT2d_Connexion self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.Handle_MAT2d_Connexion_DecrementRefCounter(self, *args)

Handle_MAT2d_Connexion_swigregister = _MAT2d.Handle_MAT2d_Connexion_swigregister
Handle_MAT2d_Connexion_swigregister(Handle_MAT2d_Connexion)

def Handle_MAT2d_Connexion_DownCast(thing):
    return _MAT2d.Handle_MAT2d_Connexion_DownCast(thing)
Handle_MAT2d_Connexion_DownCast = _MAT2d.Handle_MAT2d_Connexion_DownCast


try:
	TColStd_SequenceOfInteger = TColStd.NCollection_Sequence_Standard_Integer
except AttributeError:
	pass # does not exist, probably ignored

class NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,Bisector_Bisec,TColStd_MapIntegerHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,Bisector_Bisec,TColStd_MapIntegerHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,Bisector_Bisec,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,Bisector_Bisec,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, int const & theKey, Bisector_Bisec theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, int const & theKey, Bisector_Bisec theItem) -> Bisector_Bisec

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, int const & theKey) -> Bisector_Bisec

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, int const & theKey) -> Bisector_Bisec

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, int const & theKey) -> Bisector_Bisec

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_Size(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher
NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_swigregister
NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_swigregister(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher)

class NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IteratorHelper___next__(self)
NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IteratorHelper_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IteratorHelper_swigregister
NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IteratorHelper_swigregister(NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher_IteratorHelper)


try:
	MAT2d_DataMapOfIntegerBisec = NCollection_DataMap_Standard_Integer_Bisector_Bisec_TColStd_MapIntegerHasher
except NameError:
	pass # does not exist, probably ignored

class NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,opencascade::handle< MAT2d_Connexion >,TColStd_MapIntegerHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,opencascade::handle< MAT2d_Connexion >,TColStd_MapIntegerHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,opencascade::handle< MAT2d_Connexion >,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,opencascade::handle< MAT2d_Connexion >,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, int const & theKey, Handle_MAT2d_Connexion theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, int const & theKey, Handle_MAT2d_Connexion theItem) -> Handle_MAT2d_Connexion

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, int const & theKey) -> Handle_MAT2d_Connexion

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, int const & theKey) -> Handle_MAT2d_Connexion

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, int const & theKey) -> Handle_MAT2d_Connexion

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_Size(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher
NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_swigregister
NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_swigregister(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher)

class NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IteratorHelper___next__(self)
NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IteratorHelper_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IteratorHelper_swigregister
NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IteratorHelper_swigregister(NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher_IteratorHelper)


try:
	MAT2d_DataMapOfIntegerConnexion = NCollection_DataMap_Standard_Integer_Handle_MAT2d_Connexion_TColStd_MapIntegerHasher
except NameError:
	pass # does not exist, probably ignored

class MAT2d_CutCurve(object):
    """
    Cuts a curve at the extremas of curvature
    and at the inflections. Constructs a trimmed
    Curve for each interval.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(MAT2d_CutCurve self) -> MAT2d_CutCurve
        __init__(MAT2d_CutCurve self, Handle_Geom2d_Curve C) -> MAT2d_CutCurve

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        this = _MAT2d.new_MAT2d_CutCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(MAT2d_CutCurve self, Handle_Geom2d_Curve C)

        Cuts a curve at the extremas of curvature
        and at the inflections.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _MAT2d.MAT2d_CutCurve_Perform(self, *args)


    def UnModified(self, *args):
        """
        UnModified(MAT2d_CutCurve self) -> Standard_Boolean

        Returns True if the curve is not cut.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_CutCurve_UnModified(self, *args)


    def NbCurves(self, *args):
        """
        NbCurves(MAT2d_CutCurve self) -> Standard_Integer

        Returns the number of curves.
        it's allways greatest than 2.

        raises if the Curve is UnModified;

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_CutCurve_NbCurves(self, *args)


    def Value(self, *args):
        """
        Value(MAT2d_CutCurve self, Standard_Integer const Index) -> Handle_Geom2d_TrimmedCurve

        Returns the Indexth curve.
        raises if Index not in the range [1,NbCurves()]

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_TrimmedCurve

        """
        return _MAT2d.MAT2d_CutCurve_Value(self, *args)

    __swig_destroy__ = _MAT2d.delete_MAT2d_CutCurve
MAT2d_CutCurve_swigregister = _MAT2d.MAT2d_CutCurve_swigregister
MAT2d_CutCurve_swigregister(MAT2d_CutCurve)

class NCollection_Sequence_TColGeom2d_SequenceOfGeometry(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> NCollection_Sequence< TColGeom2d_SequenceOfGeometry >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> NCollection_Sequence< TColGeom2d_SequenceOfGeometry >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> NCollection_Sequence< TColGeom2d_SequenceOfGeometry >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> NCollection_Sequence< TColGeom2d_SequenceOfGeometry >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _MAT2d.new_NCollection_Sequence_TColGeom2d_SequenceOfGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self)

        Reverse sequence


        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, NCollection_Sequence_TColGeom2d_SequenceOfGeometry theOther) -> NCollection_Sequence_TColGeom2d_SequenceOfGeometry

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, NCollection_Sequence_TColGeom2d_SequenceOfGeometry theOther) -> NCollection_Sequence_TColGeom2d_SequenceOfGeometry

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, NCollection_Sequence< TColGeom2d_SequenceOfGeometry >::Iterator & thePosition)
        Remove(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, NCollection_Sequence_Handle_Geom2d_Geometry theItem)
        Append(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, NCollection_Sequence_TColGeom2d_SequenceOfGeometry theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, NCollection_Sequence_Handle_Geom2d_Geometry theItem)
        Prepend(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, NCollection_Sequence_TColGeom2d_SequenceOfGeometry theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Geometry theItem)
        InsertBefore(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theIndex, NCollection_Sequence_TColGeom2d_SequenceOfGeometry theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, NCollection_Sequence< TColGeom2d_SequenceOfGeometry >::Iterator & thePosition, NCollection_Sequence_Handle_Geom2d_Geometry theItem)
        InsertAfter(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theIndex, NCollection_Sequence_TColGeom2d_SequenceOfGeometry theSeq)
        InsertAfter(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Geometry theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theIndex, NCollection_Sequence_TColGeom2d_SequenceOfGeometry theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> NCollection_Sequence_Handle_Geom2d_Geometry

        First item access

        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self) -> NCollection_Sequence_Handle_Geom2d_Geometry

        Last item access

        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theIndex) -> NCollection_Sequence_Handle_Geom2d_Geometry

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_TColGeom2d_SequenceOfGeometry self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Geom2d_Geometry theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_SetValue(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_Sequence_TColGeom2d_SequenceOfGeometry
NCollection_Sequence_TColGeom2d_SequenceOfGeometry_swigregister = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_swigregister
NCollection_Sequence_TColGeom2d_SequenceOfGeometry_swigregister(NCollection_Sequence_TColGeom2d_SequenceOfGeometry)

def NCollection_Sequence_TColGeom2d_SequenceOfGeometry_delNode(*args):
    """
    NCollection_Sequence_TColGeom2d_SequenceOfGeometry_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_delNode(*args)

class NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IteratorHelper___next__(self)
NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IteratorHelper_swigregister = _MAT2d.NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IteratorHelper_swigregister
NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IteratorHelper_swigregister(NCollection_Sequence_TColGeom2d_SequenceOfGeometry_IteratorHelper)


try:
	MAT2d_SequenceOfSequenceOfGeometry = NCollection_Sequence_TColGeom2d_SequenceOfGeometry
except NameError:
	pass # does not exist, probably ignored

class MAT2d_Mat2d(object):
    """
    this class contains the generic algoritm of
    computation of the bisecting locus.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(MAT2d_Mat2d self, Standard_Boolean const IsOpenResult) -> MAT2d_Mat2d

        Empty construtor.

        :type IsOpenResult: bool

        """
        this = _MAT2d.new_MAT2d_Mat2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateMat(self, *args):
        """
        CreateMat(MAT2d_Mat2d self, MAT2d_Tool2d aTool)

        Algoritm of computation of the bisecting locus.

        :type aTool: OCC.wrapper.MAT2d.MAT2d_Tool2d

        """
        return _MAT2d.MAT2d_Mat2d_CreateMat(self, *args)


    def CreateMatOpen(self, *args):
        """
        CreateMatOpen(MAT2d_Mat2d self, MAT2d_Tool2d aTool)

        Algoritm of computation of the bisecting locus for
        open wire.

        :type aTool: OCC.wrapper.MAT2d.MAT2d_Tool2d

        """
        return _MAT2d.MAT2d_Mat2d_CreateMatOpen(self, *args)


    def IsDone(self, *args):
        """
        IsDone(MAT2d_Mat2d self) -> Standard_Boolean

        Returns <TRUE> if CreateMat has succeeded.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_Mat2d_IsDone(self, *args)


    def Init(self, *args):
        """
        Init(MAT2d_Mat2d self)

        Initialize an iterator on the set of the roots
        of the trees of bisectors.


        """
        return _MAT2d.MAT2d_Mat2d_Init(self, *args)


    def More(self, *args):
        """
        More(MAT2d_Mat2d self) -> Standard_Boolean

        Return False if there is no more roots.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_Mat2d_More(self, *args)


    def Next(self, *args):
        """
        Next(MAT2d_Mat2d self)

        Move to the next root.


        """
        return _MAT2d.MAT2d_Mat2d_Next(self, *args)


    def Bisector_(self, *args):
        """
        Bisector_(MAT2d_Mat2d self) -> Handle_MAT_Bisector

        Returns the current root.

        :rtype: OCC.wrapper.MAT.Handle_MAT_Bisector

        """
        return _MAT2d.MAT2d_Mat2d_Bisector_(self, *args)


    def SemiInfinite(self, *args):
        """
        SemiInfinite(MAT2d_Mat2d self) -> Standard_Boolean

        Returns True if there are semi_infinite bisectors.
        So there is a tree for each semi_infinte bisector.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_Mat2d_SemiInfinite(self, *args)


    def NumberOfBisectors(self, *args):
        """
        NumberOfBisectors(MAT2d_Mat2d self) -> Standard_Integer

        Returns the total number of bisectors.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_Mat2d_NumberOfBisectors(self, *args)

    __swig_destroy__ = _MAT2d.delete_MAT2d_Mat2d
MAT2d_Mat2d_swigregister = _MAT2d.MAT2d_Mat2d_swigregister
MAT2d_Mat2d_swigregister(MAT2d_Mat2d)

class NCollection_Sequence_Handle_MAT2d_Connexion(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_MAT2d_Connexion self) -> NCollection_Sequence< opencascade::handle< MAT2d_Connexion > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_MAT2d_Connexion self) -> NCollection_Sequence< opencascade::handle< MAT2d_Connexion > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_MAT2d_Connexion self) -> NCollection_Sequence< opencascade::handle< MAT2d_Connexion > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_MAT2d_Connexion self) -> NCollection_Sequence< opencascade::handle< MAT2d_Connexion > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _MAT2d.new_NCollection_Sequence_Handle_MAT2d_Connexion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_MAT2d_Connexion self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_MAT2d_Connexion self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_MAT2d_Connexion self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_MAT2d_Connexion self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_MAT2d_Connexion self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_MAT2d_Connexion self)

        Reverse sequence


        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_MAT2d_Connexion self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_MAT2d_Connexion self, NCollection_Sequence_Handle_MAT2d_Connexion theOther) -> NCollection_Sequence_Handle_MAT2d_Connexion

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_MAT2d_Connexion self, NCollection_Sequence_Handle_MAT2d_Connexion theOther) -> NCollection_Sequence_Handle_MAT2d_Connexion

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_MAT2d_Connexion self, NCollection_Sequence< opencascade::handle< MAT2d_Connexion > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_MAT2d_Connexion self, Handle_MAT2d_Connexion theItem)
        Append(NCollection_Sequence_Handle_MAT2d_Connexion self, NCollection_Sequence_Handle_MAT2d_Connexion theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_MAT2d_Connexion self, Handle_MAT2d_Connexion theItem)
        Prepend(NCollection_Sequence_Handle_MAT2d_Connexion self, NCollection_Sequence_Handle_MAT2d_Connexion theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theIndex, Handle_MAT2d_Connexion theItem)
        InsertBefore(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theIndex, NCollection_Sequence_Handle_MAT2d_Connexion theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_MAT2d_Connexion self, NCollection_Sequence< opencascade::handle< MAT2d_Connexion > >::Iterator & thePosition, Handle_MAT2d_Connexion theItem)
        InsertAfter(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theIndex, NCollection_Sequence_Handle_MAT2d_Connexion theSeq)
        InsertAfter(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theIndex, Handle_MAT2d_Connexion theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theIndex, NCollection_Sequence_Handle_MAT2d_Connexion theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_MAT2d_Connexion self) -> Handle_MAT2d_Connexion

        First item access

        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_MAT2d_Connexion self) -> Handle_MAT2d_Connexion

        Last item access

        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theIndex) -> Handle_MAT2d_Connexion

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_MAT2d_Connexion self, Standard_Integer const theIndex, Handle_MAT2d_Connexion theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_SetValue(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_Sequence_Handle_MAT2d_Connexion
NCollection_Sequence_Handle_MAT2d_Connexion_swigregister = _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_swigregister
NCollection_Sequence_Handle_MAT2d_Connexion_swigregister(NCollection_Sequence_Handle_MAT2d_Connexion)

def NCollection_Sequence_Handle_MAT2d_Connexion_delNode(*args):
    """
    NCollection_Sequence_Handle_MAT2d_Connexion_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_delNode(*args)

class NCollection_Sequence_Handle_MAT2d_Connexion_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_Sequence_Handle_MAT2d_Connexion_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_Sequence_Handle_MAT2d_Connexion_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_IteratorHelper___next__(self)
NCollection_Sequence_Handle_MAT2d_Connexion_IteratorHelper_swigregister = _MAT2d.NCollection_Sequence_Handle_MAT2d_Connexion_IteratorHelper_swigregister
NCollection_Sequence_Handle_MAT2d_Connexion_IteratorHelper_swigregister(NCollection_Sequence_Handle_MAT2d_Connexion_IteratorHelper)


try:
	MAT2d_SequenceOfConnexion = NCollection_Sequence_Handle_MAT2d_Connexion
except NameError:
	pass # does not exist, probably ignored

class NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,gp_Vec2d,TColStd_MapIntegerHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,gp_Vec2d,TColStd_MapIntegerHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,gp_Vec2d,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,gp_Vec2d,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, int const & theKey, gp_Vec2d theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, int const & theKey, gp_Vec2d theItem) -> gp_Vec2d

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, int const & theKey) -> gp_Vec2d

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, int const & theKey) -> gp_Vec2d

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, int const & theKey) -> gp_Vec2d

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_Size(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher
NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_swigregister
NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_swigregister(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher)

class NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IteratorHelper___next__(self)
NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IteratorHelper_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IteratorHelper_swigregister
NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IteratorHelper_swigregister(NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher_IteratorHelper)


try:
	MAT2d_DataMapOfIntegerVec2d = NCollection_DataMap_Standard_Integer_gp_Vec2d_TColStd_MapIntegerHasher
except NameError:
	pass # does not exist, probably ignored

class MAT2d_MiniPath(object):
    """
    MiniPath computes a path to link all the  lines in
    a set of lines. The path is described as a  set of
    connexions.

    The set of connexions can be  seen as an arbitrary Tree.
    The node of the  tree are the  lines.  The arcs of the
    tree are the connexions.  The ancestror  of  a line is
    the connexion which ends on it. The children of a line
    are the connexions which start on it.

    The children of a line are ordered by the relation
    <IsAfter> defined on the connexions.
    (See MAT2s_Connexion.cdl).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(MAT2d_MiniPath self) -> MAT2d_MiniPath

        MiniPath computes a path to link all the  lines in
        a set of lines. The path is described as a  set of
        connexions.

        The set of connexions can be  seen as an arbitrary Tree.
        The node of the  tree are the  lines.  The arcs of the
        tree are the connexions.  The ancestror  of  a line is
        the connexion which ends on it. The children of a line
        are the connexions which start on it.

        The children of a line are ordered by the relation
        <IsAfter> defined on the connexions.
        (See MAT2s_Connexion.cdl).
        """
        this = _MAT2d.new_MAT2d_MiniPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(MAT2d_MiniPath self, NCollection_Sequence_TColGeom2d_SequenceOfGeometry Figure, Standard_Integer const IndStart, Standard_Boolean const Sense)

        Computes the path  to link the  lines in <Figure>.
        the path   starts on the  line  of index <IndStart>
        <Sense>  = True    if  the Circuit turns in the
        trigonometric  sense.

        :type Figure: OCC.wrapper.MAT2d.MAT2d_SequenceOfSequenceOfGeometry
        :type IndStart: int
        :type Sense: bool

        """
        return _MAT2d.MAT2d_MiniPath_Perform(self, *args)


    def RunOnConnexions(self, *args):
        """
        RunOnConnexions(MAT2d_MiniPath self)

        Run on the set of connexions to compute the path.
        the path is an exploration of the tree which contains
        the connexions and their reverses.
        if the tree of connexions is
        A
        / |
        B  E
        / |  |
        C  D  F

        the path is A->B, B->C, C->B, B->D, D->B, B->A, A->E,
        E->F, F->E, E->A.


        """
        return _MAT2d.MAT2d_MiniPath_RunOnConnexions(self, *args)


    def Path(self, *args):
        """
        Returns  the  sequence of  connexions corresponding to
        the  path.

        :rtype: OCC.wrapper.MAT2d.MAT2d_SequenceOfConnexion

        """
        res = _MAT2d.MAT2d_MiniPath_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsConnexionsFrom(self, *args):
        """
        IsConnexionsFrom(MAT2d_MiniPath self, Standard_Integer const Index) -> Standard_Boolean

        Returns <True> if there is one Connexion which starts
        on line designed by <Index>.

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_MiniPath_IsConnexionsFrom(self, *args)


    def ConnexionsFrom(self, *args):
        """
        ConnexionsFrom(MAT2d_MiniPath self, Standard_Integer const Index) -> NCollection_Sequence_Handle_MAT2d_Connexion

        Returns    the  connexions  which   start  on line
        designed  by <Index>.

        :type Index: int
        :rtype: OCC.wrapper.MAT2d.MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_MiniPath_ConnexionsFrom(self, *args)


    def IsRoot(self, *args):
        """
        IsRoot(MAT2d_MiniPath self, Standard_Integer const Index) -> Standard_Boolean

        Returns <True> if the line designed by <Index> is
        the root.

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_MiniPath_IsRoot(self, *args)


    def Father(self, *args):
        """
        Father(MAT2d_MiniPath self, Standard_Integer const Index) -> Handle_MAT2d_Connexion

        Returns    the  connexion  which ends  on line
        designed  by <Index>.

        :type Index: int
        :rtype: OCC.wrapper.MAT2d.Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_MiniPath_Father(self, *args)

    __swig_destroy__ = _MAT2d.delete_MAT2d_MiniPath
MAT2d_MiniPath_swigregister = _MAT2d.MAT2d_MiniPath_swigregister
MAT2d_MiniPath_swigregister(MAT2d_MiniPath)

class MAT2d_Tool2d(object):
    """
    Set of the methods useful for the MAT's computation.
    Tool2d contains the geometry of the bisecting locus.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(MAT2d_Tool2d self) -> MAT2d_Tool2d

        Empty Constructor.


        """
        this = _MAT2d.new_MAT2d_Tool2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sense(self, *args):
        """
        Sense(MAT2d_Tool2d self, MAT_Side const aside)

        <aSide> defines the side of the computation of the map.

        :type aside: OCC.wrapper.MAT.MAT_Side

        """
        return _MAT2d.MAT2d_Tool2d_Sense(self, *args)


    def SetJoinType(self, *args):
        """
        SetJoinType(MAT2d_Tool2d self, GeomAbs_JoinType const aJoinType)

        :type aJoinType: OCC.wrapper.GeomAbs.GeomAbs_JoinType

        """
        return _MAT2d.MAT2d_Tool2d_SetJoinType(self, *args)


    def InitItems(self, *args):
        """
        InitItems(MAT2d_Tool2d self, Handle_MAT2d_Circuit aCircuit)

        InitItems cuts the line in Items.
        this Items are the geometrics representations of
        the BasicElts from MAT.

        :type aCircuit: OCC.wrapper.MAT2d.Handle_MAT2d_Circuit

        """
        return _MAT2d.MAT2d_Tool2d_InitItems(self, *args)


    def NumberOfItems(self, *args):
        """
        NumberOfItems(MAT2d_Tool2d self) -> Standard_Integer

        Returns the Number of Items .

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_Tool2d_NumberOfItems(self, *args)


    def ToleranceOfConfusion(self, *args):
        """
        ToleranceOfConfusion(MAT2d_Tool2d self) -> Standard_Real

        Returns tolerance to test the confusion of two points.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _MAT2d.MAT2d_Tool2d_ToleranceOfConfusion(self, *args)


    def FirstPoint(self, *args):
        """
        FirstPoint(MAT2d_Tool2d self, Standard_Integer const anitem) -> Standard_Integer

        Creates the point at the origin of the bisector between
        anitem and the previous  item.
        dist is the distance from the FirstPoint to <anitem>.
        Returns the index of this point in <theGeomPnts>.

        :type anitem: int
        :type dist: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_Tool2d_FirstPoint(self, *args)


    def TangentBefore(self, *args):
        """
        TangentBefore(MAT2d_Tool2d self, Standard_Integer const anitem, Standard_Boolean const IsOpenResult) -> Standard_Integer

        Creates the Tangent at the end of the Item defined
        by <anitem>. Returns the index of this vector in
        <theGeomVecs>

        :type anitem: int
        :type IsOpenResult: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_Tool2d_TangentBefore(self, *args)


    def TangentAfter(self, *args):
        """
        TangentAfter(MAT2d_Tool2d self, Standard_Integer const anitem, Standard_Boolean const IsOpenResult) -> Standard_Integer

        Creates the Reversed Tangent at the origin of the Item
        defined by <anitem>. Returns the index of this vector in
        <theGeomVecs>

        :type anitem: int
        :type IsOpenResult: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_Tool2d_TangentAfter(self, *args)


    def Tangent(self, *args):
        """
        Tangent(MAT2d_Tool2d self, Standard_Integer const bisector) -> Standard_Integer

        Creates the Tangent at the end of the bisector defined
        by <bisector>. Returns the index of this vector in
        <theGeomVecs>

        :type bisector: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.MAT2d_Tool2d_Tangent(self, *args)


    def CreateBisector(self, *args):
        """
        CreateBisector(MAT2d_Tool2d self, Handle_MAT_Bisector abisector)

        Creates the geometric bisector defined by <abisector>.

        :type abisector: OCC.wrapper.MAT.Handle_MAT_Bisector

        """
        return _MAT2d.MAT2d_Tool2d_CreateBisector(self, *args)


    def TrimBisector(self, *args):
        """
        TrimBisector(MAT2d_Tool2d self, Handle_MAT_Bisector abisector) -> Standard_Boolean
        TrimBisector(MAT2d_Tool2d self, Handle_MAT_Bisector abisector, Standard_Integer const apoint) -> Standard_Boolean

        Trims the geometric bisector by the point of index
        <apoint> in <theGeomPnts>.
        If the point is out of the bisector, Return FALSE.
        else Return True.

        :type abisector: OCC.wrapper.MAT.Handle_MAT_Bisector
        :type apoint: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.MAT2d_Tool2d_TrimBisector(self, *args)


    def IntersectBisector(self, *args):
        """
        IntersectBisector(MAT2d_Tool2d self, Handle_MAT_Bisector bisectorone, Handle_MAT_Bisector bisectortwo) -> Standard_Real

        Computes  the point  of  intersection between  the
        bisectors defined  by  <bisectorone>  and
        <bisectortwo> .
        If this point exists,  <intpnt> is its  index
        in <theGeomPnts> and Return the distance of the point
        from the bisector else Return <RealLast>.

        :type bisectorone: OCC.wrapper.MAT.Handle_MAT_Bisector
        :type bisectortwo: OCC.wrapper.MAT.Handle_MAT_Bisector
        :type intpnt: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _MAT2d.MAT2d_Tool2d_IntersectBisector(self, *args)


    def Distance(self, *args):
        """
        Distance(MAT2d_Tool2d self, Handle_MAT_Bisector abisector, Standard_Real const param1, Standard_Real const param2) -> Standard_Real

        Returns the distance between the two points designed
        by their parameters on <abisector>.

        :type abisector: OCC.wrapper.MAT.Handle_MAT_Bisector
        :type param1: float
        :type param2: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _MAT2d.MAT2d_Tool2d_Distance(self, *args)


    def Dump(self, *args):
        """
        Dump(MAT2d_Tool2d self, Standard_Integer const bisector, Standard_Integer const erease)

        displays informations about the bisector defined by
        <bisector>.

        :type bisector: int
        :type erease: int

        """
        return _MAT2d.MAT2d_Tool2d_Dump(self, *args)


    def GeomBis(self, *args):
        """
        Returns the <Bisec> of index <Index> in
        <theGeomBisectors>.

        :type Index: int
        :rtype: OCC.wrapper.Bisector.Bisector_Bisec

        """
        res = _MAT2d.MAT2d_Tool2d_GeomBis(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GeomElt(self, *args):
        """
        GeomElt(MAT2d_Tool2d self, Standard_Integer const Index) -> Handle_Geom2d_Geometry

        Returns the Geometry of index <Index> in <theGeomElts>.

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Geometry

        """
        return _MAT2d.MAT2d_Tool2d_GeomElt(self, *args)


    def GeomPnt(self, *args):
        """
        Returns the point of index <Index> in the <theGeomPnts>.

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        res = _MAT2d.MAT2d_Tool2d_GeomPnt(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GeomVec(self, *args):
        """
        Returns the  vector  of index <Index> in the
        <theGeomVecs>.

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        res = _MAT2d.MAT2d_Tool2d_GeomVec(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Circuit(self, *args):
        """
        Circuit(MAT2d_Tool2d self) -> Handle_MAT2d_Circuit

        :rtype: OCC.wrapper.MAT2d.Handle_MAT2d_Circuit

        """
        return _MAT2d.MAT2d_Tool2d_Circuit(self, *args)


    def BisecFusion(self, *args):
        """
        BisecFusion(MAT2d_Tool2d self, Standard_Integer const Index1, Standard_Integer const Index2)

        :type Index1: int
        :type Index2: int

        """
        return _MAT2d.MAT2d_Tool2d_BisecFusion(self, *args)


    def ChangeGeomBis(self, *args):
        """
        ChangeGeomBis(MAT2d_Tool2d self, Standard_Integer const Index) -> Bisector_Bisec

        Returns the <Bisec> of index <Index> in
        <theGeomBisectors>.

        :type Index: int
        :rtype: OCC.wrapper.Bisector.Bisector_Bisec

        """
        return _MAT2d.MAT2d_Tool2d_ChangeGeomBis(self, *args)

    __swig_destroy__ = _MAT2d.delete_MAT2d_Tool2d
MAT2d_Tool2d_swigregister = _MAT2d.MAT2d_Tool2d_swigregister
MAT2d_Tool2d_swigregister(MAT2d_Tool2d)

class NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,gp_Pnt2d,TColStd_MapIntegerHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,gp_Pnt2d,TColStd_MapIntegerHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,gp_Pnt2d,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,gp_Pnt2d,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, int const & theKey, gp_Pnt2d theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, int const & theKey, gp_Pnt2d theItem) -> gp_Pnt2d

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, int const & theKey) -> gp_Pnt2d

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, int const & theKey) -> gp_Pnt2d

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, int const & theKey) -> gp_Pnt2d

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_Size(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher
NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_swigregister
NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_swigregister(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher)

class NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IteratorHelper___next__(self)
NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IteratorHelper_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IteratorHelper_swigregister
NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IteratorHelper_swigregister(NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher_IteratorHelper)


try:
	MAT2d_DataMapOfIntegerPnt2d = NCollection_DataMap_Standard_Integer_gp_Pnt2d_TColStd_MapIntegerHasher
except NameError:
	pass # does not exist, probably ignored

class NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self) -> NCollection_DataMap< MAT2d_BiInt,Standard_Integer,MAT2d_MapBiIntHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self) -> NCollection_DataMap< MAT2d_BiInt,Standard_Integer,MAT2d_MapBiIntHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self) -> NCollection_DataMap< MAT2d_BiInt,Standard_Integer,MAT2d_MapBiIntHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self) -> NCollection_DataMap< MAT2d_BiInt,Standard_Integer,MAT2d_MapBiIntHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _MAT2d.new_NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher theOther) -> NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher theOther) -> NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey, int const & theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey, int const & theItem) -> int *

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> int const *

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> int *

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> int &

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_Size(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher
NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_swigregister = _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_swigregister
NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_swigregister(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher)

class NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IteratorHelper___next__(self)
NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IteratorHelper_swigregister = _MAT2d.NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IteratorHelper_swigregister
NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IteratorHelper_swigregister(NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher_IteratorHelper)


try:
	MAT2d_DataMapOfBiIntInteger = NCollection_DataMap_MAT2d_BiInt_Standard_Integer_MAT2d_MapBiIntHasher
except NameError:
	pass # does not exist, probably ignored

class NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,MAT2d_SequenceOfConnexion,TColStd_MapIntegerHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,MAT2d_SequenceOfConnexion,TColStd_MapIntegerHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,MAT2d_SequenceOfConnexion,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,MAT2d_SequenceOfConnexion,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, int const & theKey, NCollection_Sequence_Handle_MAT2d_Connexion theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, int const & theKey, NCollection_Sequence_Handle_MAT2d_Connexion theItem) -> NCollection_Sequence_Handle_MAT2d_Connexion

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_Sequence_Handle_MAT2d_Connexion

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_Sequence_Handle_MAT2d_Connexion

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_Sequence_Handle_MAT2d_Connexion

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_Size(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher
NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_swigregister
NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_swigregister(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher)

class NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IteratorHelper___next__(self)
NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IteratorHelper_swigregister = _MAT2d.NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IteratorHelper_swigregister
NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IteratorHelper_swigregister(NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher_IteratorHelper)


try:
	MAT2d_DataMapOfIntegerSequenceOfConnexion = NCollection_DataMap_Standard_Integer_MAT2d_SequenceOfConnexion_TColStd_MapIntegerHasher
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array2_Handle_MAT2d_Connexion(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _MAT2d.new_NCollection_Array2_Handle_MAT2d_Connexion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Handle_MAT2d_Connexion self, Handle_MAT2d_Connexion theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Handle_MAT2d_Connexion self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Handle_MAT2d_Connexion self, NCollection_Array2_Handle_MAT2d_Connexion theOther) -> NCollection_Array2_Handle_MAT2d_Connexion

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Handle_MAT2d_Connexion self, NCollection_Array2_Handle_MAT2d_Connexion theOther) -> NCollection_Array2_Handle_MAT2d_Connexion

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Handle_MAT2d_Connexion self, Standard_Integer const theRow, Standard_Integer const theCol) -> Handle_MAT2d_Connexion

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Handle_MAT2d_Connexion self, Standard_Integer const theRow, Standard_Integer const theCol, Handle_MAT2d_Connexion theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_SetValue(self, *args)

    __swig_destroy__ = _MAT2d.delete_NCollection_Array2_Handle_MAT2d_Connexion
NCollection_Array2_Handle_MAT2d_Connexion_swigregister = _MAT2d.NCollection_Array2_Handle_MAT2d_Connexion_swigregister
NCollection_Array2_Handle_MAT2d_Connexion_swigregister(NCollection_Array2_Handle_MAT2d_Connexion)


try:
	MAT2d_Array2OfConnexion = NCollection_Array2_Handle_MAT2d_Connexion
except NameError:
	pass # does not exist, probably ignored

class Handle_MAT2d_Circuit(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_MAT2d_Circuit self)

        Nullify the handle


        """
        return _MAT2d.Handle_MAT2d_Circuit_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_MAT2d_Circuit self) -> bool

        Check for being null

        :rtype: bool

        """
        return _MAT2d.Handle_MAT2d_Circuit_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_MAT2d_Circuit self, MAT2d_Circuit thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _MAT2d.Handle_MAT2d_Circuit_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_MAT2d_Circuit self, Handle_MAT2d_Circuit theHandle) -> Handle_MAT2d_Circuit
        assign(Handle_MAT2d_Circuit self, MAT2d_Circuit thePtr) -> Handle_MAT2d_Circuit
        assign(Handle_MAT2d_Circuit self, Handle_MAT2d_Circuit theHandle) -> Handle_MAT2d_Circuit

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _MAT2d.Handle_MAT2d_Circuit_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_MAT2d_Circuit self) -> MAT2d_Circuit

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _MAT2d.Handle_MAT2d_Circuit_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_MAT2d_Circuit self) -> MAT2d_Circuit

        Member access operator (note non-const)

        :rtype: T *

        """
        return _MAT2d.Handle_MAT2d_Circuit___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_MAT2d_Circuit self) -> MAT2d_Circuit

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _MAT2d.Handle_MAT2d_Circuit___ref__(self, *args)


    def __hash__(self):
        return _MAT2d.Handle_MAT2d_Circuit___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _MAT2d.Handle_MAT2d_Circuit___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _MAT2d.new_Handle_MAT2d_Circuit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_Circuit_DownCast)
    __swig_destroy__ = _MAT2d.delete_Handle_MAT2d_Circuit

    def Perform(self, *args):
        """
        Perform(Handle_MAT2d_Circuit self, NCollection_Sequence_TColGeom2d_SequenceOfGeometry aFigure, NCollection_Sequence_Standard_Boolean IsClosed, Standard_Integer const IndRefLine, Standard_Boolean const Trigo)

        :type aFigure: OCC.wrapper.MAT2d.MAT2d_SequenceOfSequenceOfGeometry
        :type IsClosed: OCC.wrapper.TColStd.TColStd_SequenceOfBoolean
        :type IndRefLine: int
        :type Trigo: bool

        """
        return _MAT2d.Handle_MAT2d_Circuit_Perform(self, *args)


    def NumberOfItems(self, *args):
        """
        NumberOfItems(Handle_MAT2d_Circuit self) -> Standard_Integer

        Returns the Number of Items .

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.Handle_MAT2d_Circuit_NumberOfItems(self, *args)


    def Value(self, *args):
        """
        Value(Handle_MAT2d_Circuit self, Standard_Integer const Index) -> Handle_Geom2d_Geometry

        Returns the item at position <Index> in <me>.

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Geometry

        """
        return _MAT2d.Handle_MAT2d_Circuit_Value(self, *args)


    def LineLength(self, *args):
        """
        LineLength(Handle_MAT2d_Circuit self, Standard_Integer const IndexLine) -> Standard_Integer

        Returns the number of items on the line <IndexLine>.

        :type IndexLine: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.Handle_MAT2d_Circuit_LineLength(self, *args)


    def RefToEqui(self, *args):
        """
        Returns the set of index of the items in <me>corresponding
        to the curve <IndCurve> on the line <IndLine> from the
        initial figure.

        :type IndLine: int
        :type IndCurve: int
        :rtype: OCC.wrapper.TColStd.TColStd_SequenceOfInteger

        """
        res = _MAT2d.Handle_MAT2d_Circuit_RefToEqui(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Connexion(self, *args):
        """
        Connexion(Handle_MAT2d_Circuit self, Standard_Integer const Index) -> Handle_MAT2d_Connexion

        Returns the Connexion on the item <Index> in me.

        :type Index: int
        :rtype: OCC.wrapper.MAT2d.Handle_MAT2d_Connexion

        """
        return _MAT2d.Handle_MAT2d_Circuit_Connexion(self, *args)


    def ConnexionOn(self, *args):
        """
        ConnexionOn(Handle_MAT2d_Circuit self, Standard_Integer const Index) -> Standard_Boolean

        Returns <True> is there is a connexion on the item <Index>
        in <me>.

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.Handle_MAT2d_Circuit_ConnexionOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_MAT2d_Circuit self) -> char const *

        :rtype: const char *

        """
        return _MAT2d.Handle_MAT2d_Circuit_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _MAT2d.Handle_MAT2d_Circuit_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _MAT2d.Handle_MAT2d_Circuit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_MAT2d_Circuit self)

        Memory deallocator for transient classes


        """
        return _MAT2d.Handle_MAT2d_Circuit_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_MAT2d_Circuit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_MAT2d_Circuit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.Handle_MAT2d_Circuit_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_MAT2d_Circuit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_MAT2d_Circuit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.Handle_MAT2d_Circuit_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_MAT2d_Circuit self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _MAT2d.Handle_MAT2d_Circuit_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_MAT2d_Circuit self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.Handle_MAT2d_Circuit_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_MAT2d_Circuit self)

        Increments the reference counter of this object


        """
        return _MAT2d.Handle_MAT2d_Circuit_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_MAT2d_Circuit self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.Handle_MAT2d_Circuit_DecrementRefCounter(self, *args)

Handle_MAT2d_Circuit_swigregister = _MAT2d.Handle_MAT2d_Circuit_swigregister
Handle_MAT2d_Circuit_swigregister(Handle_MAT2d_Circuit)

def Handle_MAT2d_Circuit_DownCast(thing):
    return _MAT2d.Handle_MAT2d_Circuit_DownCast(thing)
Handle_MAT2d_Circuit_DownCast = _MAT2d.Handle_MAT2d_Circuit_DownCast


try:
	TColGeom2d_SequenceOfCurve = TColGeom2d.NCollection_Sequence_Handle_Geom2d_Curve
except AttributeError:
	pass # does not exist, probably ignored


try:
	TColStd_MapIntegerHasher = TColStd.NCollection_DefaultHasher_Standard_Integer
except AttributeError:
	pass # does not exist, probably ignored


try:
	TColGeom2d_SequenceOfGeometry = TColGeom2d.NCollection_Sequence_Handle_Geom2d_Geometry
except AttributeError:
	pass # does not exist, probably ignored

class NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self) -> NCollection_DataMap< MAT2d_BiInt,TColStd_SequenceOfInteger,MAT2d_MapBiIntHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self) -> NCollection_DataMap< MAT2d_BiInt,TColStd_SequenceOfInteger,MAT2d_MapBiIntHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self) -> NCollection_DataMap< MAT2d_BiInt,TColStd_SequenceOfInteger,MAT2d_MapBiIntHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self) -> NCollection_DataMap< MAT2d_BiInt,TColStd_SequenceOfInteger,MAT2d_MapBiIntHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _MAT2d.new_NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher theOther) -> NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher theOther) -> NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey, NCollection_Sequence_Standard_Integer theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey, NCollection_Sequence_Standard_Integer theItem) -> NCollection_Sequence_Standard_Integer

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> NCollection_Sequence_Standard_Integer

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> NCollection_Sequence_Standard_Integer

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, MAT2d_BiInt theKey) -> NCollection_Sequence_Standard_Integer

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_Size(self, *args)


    def __iter__(self):
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher___iter__(self)
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher
NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_swigregister = _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_swigregister
NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_swigregister(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher)

class NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _MAT2d.new_NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MAT2d.delete_NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IteratorHelper

    def __next__(self):
        return _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IteratorHelper___next__(self)
NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IteratorHelper_swigregister = _MAT2d.NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IteratorHelper_swigregister
NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IteratorHelper_swigregister(NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher_IteratorHelper)


try:
	MAT2d_DataMapOfBiIntSequenceOfInteger = NCollection_DataMap_MAT2d_BiInt_TColStd_SequenceOfInteger_MAT2d_MapBiIntHasher
except NameError:
	pass # does not exist, probably ignored



