# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DDocStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DDocStd')
    _DDocStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DDocStd', [dirname(__file__)])
        except ImportError:
            import _DDocStd
            return _DDocStd
        try:
            _mod = imp.load_module('_DDocStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DDocStd = swig_import_helper()
    del swig_import_helper
else:
    import _DDocStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DDocStd.delete_SwigPyIterator

    def value(self):
        return _DDocStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DDocStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DDocStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DDocStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DDocStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DDocStd.SwigPyIterator_copy(self)

    def next(self):
        return _DDocStd.SwigPyIterator_next(self)

    def __next__(self):
        return _DDocStd.SwigPyIterator___next__(self)

    def previous(self):
        return _DDocStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DDocStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DDocStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DDocStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DDocStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DDocStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DDocStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DDocStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DDocStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DDocStd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_DDocStd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _DDocStd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DDocStd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDocStd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _DDocStd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _DDocStd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _DDocStd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DDocStd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_DDocStd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _DDocStd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DDocStd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDocStd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _DDocStd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _DDocStd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _DDocStd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _DDocStd.ptr_to_number(item)
ptr_to_number = _DDocStd.ptr_to_number

def HashCode(*args):
    return _DDocStd.HashCode(*args)
HashCode = _DDocStd.HashCode

def ptr_equal(a, b):
    return _DDocStd.ptr_equal(a, b)
ptr_equal = _DDocStd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DDF
else:
    import DDF
del _swig_python_version_info
class DDocStd_DrawDocument(DDF.DDF_Data):
    """
    draw variable for TDocStd_Document.
    ==================================
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DDocStd_DrawDocument
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DDocStd_DrawDocument(self) 
            return h


    def Find(*args):
        """
        Find(Handle_TDocStd_Document Doc) -> Handle_DDocStd_DrawDocument

        :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :rtype: OCC.wrapper.DDocStd.Handle_DDocStd_DrawDocument

        """
        return _DDocStd.DDocStd_DrawDocument_Find(*args)

    Find = staticmethod(Find)

    def __init__(self, *args):
        """
        __init__(DDocStd_DrawDocument self, Handle_TDocStd_Document Doc) -> DDocStd_DrawDocument

        :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        this = _DDocStd.new_DDocStd_DrawDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetDocument(self, *args):
        """
        GetDocument(DDocStd_DrawDocument self) -> Handle_TDocStd_Document

        :rtype: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _DDocStd.DDocStd_DrawDocument_GetDocument(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DDocStd_DrawDocument self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DDocStd.DDocStd_DrawDocument_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(DDocStd_DrawDocument self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDocStd.DDocStd_DrawDocument_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DDocStd_DrawDocument self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDocStd.DDocStd_DrawDocument_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DDocStd_DrawDocument self, Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.DDocStd_DrawDocument_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DDocStd.DDocStd_DrawDocument_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DDocStd.DDocStd_DrawDocument_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDocStd.DDocStd_DrawDocument_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DDocStd.delete_DDocStd_DrawDocument
DDocStd_DrawDocument_swigregister = _DDocStd.DDocStd_DrawDocument_swigregister
DDocStd_DrawDocument_swigregister(DDocStd_DrawDocument)

def DDocStd_DrawDocument_Find(*args):
    """
    DDocStd_DrawDocument_Find(Handle_TDocStd_Document Doc) -> Handle_DDocStd_DrawDocument

    :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
    :rtype: OCC.wrapper.DDocStd.Handle_DDocStd_DrawDocument

    """
    return _DDocStd.DDocStd_DrawDocument_Find(*args)

def DDocStd_DrawDocument_get_type_name(*args):
    """
    DDocStd_DrawDocument_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DDocStd.DDocStd_DrawDocument_get_type_name(*args)

def DDocStd_DrawDocument_get_type_descriptor(*args):
    """
    DDocStd_DrawDocument_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DDocStd.DDocStd_DrawDocument_get_type_descriptor(*args)

class DDocStd_(object):
    """
    This package   provides Draw services to test  CAF
    standard documents (see TDocStd package)

    It provides :

    * Modification registration and Update management.

    * External references mechanism

    * UNDO/REDO

    * Document Creation, Save and Restore
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetApplication(*args):
        """
        GetApplication() -> Handle_TDocStd_Application

        Returns the global instance of application.

        :rtype: OCC.wrapper.TDocStd.Handle_TDocStd_Application

        """
        return _DDocStd.DDocStd__GetApplication(*args)

    GetApplication = staticmethod(GetApplication)

    def GetDocument(*args):
        """
        GetDocument(Standard_CString & Name, Handle_TDocStd_Document Doc, Standard_Boolean const Complain) -> Standard_Boolean

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :type Complain: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDocStd.DDocStd__GetDocument(*args)

    GetDocument = staticmethod(GetDocument)

    def Find(*args):
        """
        Find(Handle_TDocStd_Document Document, Standard_CString const Entry, TDF_Label Label, Standard_Boolean const Complain) -> Standard_Boolean
        Find(Handle_TDocStd_Document Document, Standard_CString const Entry, Standard_GUID ID, Handle_TDF_Attribute A, Standard_Boolean const Complain) -> Standard_Boolean

        :type Document: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :type Entry: OCC.wrapper.Standard.Standard_CString
        :type ID: OCC.wrapper.Standard.Standard_GUID
        :type A: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Complain: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDocStd.DDocStd__Find(*args)

    Find = staticmethod(Find)

    def ReturnLabel(*args):
        """
        ReturnLabel(Draw_Interpretor theCommands, TDF_Label L) -> Draw_Interpretor

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor
        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.DDocStd__ReturnLabel(*args)

    ReturnLabel = staticmethod(ReturnLabel)

    def AllCommands(*args):
        """
        AllCommands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.DDocStd__AllCommands(*args)

    AllCommands = staticmethod(AllCommands)

    def ApplicationCommands(*args):
        """
        ApplicationCommands(Draw_Interpretor theCommands)

        NewDocument, Open, SaveAs, Save

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.DDocStd__ApplicationCommands(*args)

    ApplicationCommands = staticmethod(ApplicationCommands)

    def DocumentCommands(*args):
        """
        DocumentCommands(Draw_Interpretor theCommands)

        Undo, Redo, SetModified, Propagate

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.DDocStd__DocumentCommands(*args)

    DocumentCommands = staticmethod(DocumentCommands)

    def ToolsCommands(*args):
        """
        ToolsCommands(Draw_Interpretor theCommands)

        Modified, Update

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.DDocStd__ToolsCommands(*args)

    ToolsCommands = staticmethod(ToolsCommands)

    def MTMCommands(*args):
        """
        MTMCommands(Draw_Interpretor theCommands)

        Create, Add, Remove, Open, Commit, Undo, Redo, SetNestedMode

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.DDocStd__MTMCommands(*args)

    MTMCommands = staticmethod(MTMCommands)

    def ShapeSchemaCommands(*args):
        """
        ShapeSchemaCommands(Draw_Interpretor theCommands)

        ShapeSchema_Read

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.DDocStd__ShapeSchemaCommands(*args)

    ShapeSchemaCommands = staticmethod(ShapeSchemaCommands)

    def __init__(self):
        """
        This package   provides Draw services to test  CAF
        standard documents (see TDocStd package)

        It provides :

        * Modification registration and Update management.

        * External references mechanism

        * UNDO/REDO

        * Document Creation, Save and Restore
        """
        this = _DDocStd.new_DDocStd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDocStd.delete_DDocStd_
DDocStd__swigregister = _DDocStd.DDocStd__swigregister
DDocStd__swigregister(DDocStd_)

def DDocStd__GetApplication(*args):
    """
    DDocStd__GetApplication() -> Handle_TDocStd_Application

    Returns the global instance of application.

    :rtype: OCC.wrapper.TDocStd.Handle_TDocStd_Application

    """
    return _DDocStd.DDocStd__GetApplication(*args)

def DDocStd__GetDocument(*args):
    """
    DDocStd__GetDocument(Standard_CString & Name, Handle_TDocStd_Document Doc, Standard_Boolean const Complain) -> Standard_Boolean

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
    :type Complain: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DDocStd.DDocStd__GetDocument(*args)

def DDocStd__Find(*args):
    """
    Find(Handle_TDocStd_Document Document, Standard_CString const Entry, TDF_Label Label, Standard_Boolean const Complain) -> Standard_Boolean
    DDocStd__Find(Handle_TDocStd_Document Document, Standard_CString const Entry, Standard_GUID ID, Handle_TDF_Attribute A, Standard_Boolean const Complain) -> Standard_Boolean

    :type Document: OCC.wrapper.TDocStd.Handle_TDocStd_Document
    :type Entry: OCC.wrapper.Standard.Standard_CString
    :type ID: OCC.wrapper.Standard.Standard_GUID
    :type A: OCC.wrapper.TDF.Handle_TDF_Attribute
    :type Complain: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DDocStd.DDocStd__Find(*args)

def DDocStd__ReturnLabel(*args):
    """
    DDocStd__ReturnLabel(Draw_Interpretor theCommands, TDF_Label L) -> Draw_Interpretor

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor
    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDocStd.DDocStd__ReturnLabel(*args)

def DDocStd__AllCommands(*args):
    """
    DDocStd__AllCommands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDocStd.DDocStd__AllCommands(*args)

def DDocStd__ApplicationCommands(*args):
    """
    DDocStd__ApplicationCommands(Draw_Interpretor theCommands)

    NewDocument, Open, SaveAs, Save

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDocStd.DDocStd__ApplicationCommands(*args)

def DDocStd__DocumentCommands(*args):
    """
    DDocStd__DocumentCommands(Draw_Interpretor theCommands)

    Undo, Redo, SetModified, Propagate

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDocStd.DDocStd__DocumentCommands(*args)

def DDocStd__ToolsCommands(*args):
    """
    DDocStd__ToolsCommands(Draw_Interpretor theCommands)

    Modified, Update

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDocStd.DDocStd__ToolsCommands(*args)

def DDocStd__MTMCommands(*args):
    """
    DDocStd__MTMCommands(Draw_Interpretor theCommands)

    Create, Add, Remove, Open, Commit, Undo, Redo, SetNestedMode

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDocStd.DDocStd__MTMCommands(*args)

def DDocStd__ShapeSchemaCommands(*args):
    """
    DDocStd__ShapeSchemaCommands(Draw_Interpretor theCommands)

    ShapeSchema_Read

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDocStd.DDocStd__ShapeSchemaCommands(*args)

class Handle_DDocStd_DrawDocument(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DDocStd_DrawDocument self)

        Nullify the handle


        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DDocStd_DrawDocument self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DDocStd_DrawDocument self, DDocStd_DrawDocument thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DDocStd_DrawDocument self, Handle_DDocStd_DrawDocument theHandle) -> Handle_DDocStd_DrawDocument
        assign(Handle_DDocStd_DrawDocument self, DDocStd_DrawDocument thePtr) -> Handle_DDocStd_DrawDocument
        assign(Handle_DDocStd_DrawDocument self, Handle_DDocStd_DrawDocument theHandle) -> Handle_DDocStd_DrawDocument

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DDocStd_DrawDocument self) -> DDocStd_DrawDocument

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DDocStd_DrawDocument self) -> DDocStd_DrawDocument

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DDocStd.Handle_DDocStd_DrawDocument___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DDocStd_DrawDocument self) -> DDocStd_DrawDocument

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DDocStd.Handle_DDocStd_DrawDocument___ref__(self, *args)


    def __hash__(self):
        return _DDocStd.Handle_DDocStd_DrawDocument___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DDocStd.Handle_DDocStd_DrawDocument___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DDocStd.new_Handle_DDocStd_DrawDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DDocStd.Handle_DDocStd_DrawDocument_DownCast)
    __swig_destroy__ = _DDocStd.delete_Handle_DDocStd_DrawDocument

    def Find(self, *args):
        """
        Find(Handle_DDocStd_DrawDocument self, Handle_TDocStd_Document Doc) -> Handle_DDocStd_DrawDocument

        :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :rtype: OCC.wrapper.DDocStd.Handle_DDocStd_DrawDocument

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Find(self, *args)


    def GetDocument(self, *args):
        """
        GetDocument(Handle_DDocStd_DrawDocument self) -> Handle_TDocStd_Document

        :rtype: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_GetDocument(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DDocStd_DrawDocument self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DDocStd_DrawDocument self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DDocStd_DrawDocument self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DDocStd_DrawDocument self, Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DDocStd_DrawDocument self) -> char const *

        :rtype: const char *

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDocStd.Handle_DDocStd_DrawDocument_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDocStd.Handle_DDocStd_DrawDocument_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DataFramework(self, *args):
        """
        DataFramework(Handle_DDocStd_DrawDocument self, Handle_TDF_Data aDF)
        DataFramework(Handle_DDocStd_DrawDocument self) -> Handle_TDF_Data

        :rtype: OCC.wrapper.TDF.Handle_TDF_Data

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_DataFramework(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DDocStd_DrawDocument self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DDocStd_DrawDocument self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DDocStd_DrawDocument self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DDocStd_DrawDocument self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DDocStd_DrawDocument self) -> Standard_Boolean
        Visible(Handle_DDocStd_DrawDocument self, Standard_Boolean const V)

        :type V: bool

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DDocStd_DrawDocument self) -> Standard_Boolean
        Protected(Handle_DDocStd_DrawDocument self, Standard_Boolean const P)

        :type P: bool

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DDocStd_DrawDocument self) -> Standard_CString
        Name(Handle_DDocStd_DrawDocument self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DDocStd_DrawDocument self)

        Memory deallocator for transient classes


        """
        return _DDocStd.Handle_DDocStd_DrawDocument_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DDocStd_DrawDocument self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DDocStd_DrawDocument self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DDocStd_DrawDocument self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DDocStd_DrawDocument self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DDocStd_DrawDocument self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DDocStd_DrawDocument self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DDocStd_DrawDocument self)

        Increments the reference counter of this object


        """
        return _DDocStd.Handle_DDocStd_DrawDocument_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DDocStd_DrawDocument self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDocStd.Handle_DDocStd_DrawDocument_DecrementRefCounter(self, *args)

Handle_DDocStd_DrawDocument_swigregister = _DDocStd.Handle_DDocStd_DrawDocument_swigregister
Handle_DDocStd_DrawDocument_swigregister(Handle_DDocStd_DrawDocument)

def Handle_DDocStd_DrawDocument_DownCast(thing):
    return _DDocStd.Handle_DDocStd_DrawDocument_DownCast(thing)
Handle_DDocStd_DrawDocument_DownCast = _DDocStd.Handle_DDocStd_DrawDocument_DownCast



