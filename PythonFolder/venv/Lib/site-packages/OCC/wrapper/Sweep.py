# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Sweep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Sweep')
    _Sweep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Sweep', [dirname(__file__)])
        except ImportError:
            import _Sweep
            return _Sweep
        try:
            _mod = imp.load_module('_Sweep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Sweep = swig_import_helper()
    del swig_import_helper
else:
    import _Sweep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Sweep.delete_SwigPyIterator

    def value(self):
        return _Sweep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Sweep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Sweep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Sweep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Sweep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Sweep.SwigPyIterator_copy(self)

    def next(self):
        return _Sweep.SwigPyIterator_next(self)

    def __next__(self):
        return _Sweep.SwigPyIterator___next__(self)

    def previous(self):
        return _Sweep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Sweep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Sweep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Sweep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Sweep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Sweep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Sweep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Sweep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Sweep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Sweep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Sweep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Sweep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Sweep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Sweep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Sweep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Sweep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Sweep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Sweep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Sweep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Sweep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Sweep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Sweep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Sweep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Sweep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Sweep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Sweep.ptr_to_number(item)
ptr_to_number = _Sweep.ptr_to_number

def HashCode(*args):
    return _Sweep.HashCode(*args)
HashCode = _Sweep.HashCode

def ptr_equal(a, b):
    return _Sweep.ptr_equal(a, b)
ptr_equal = _Sweep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
class Sweep_NumShapeTool(object):
    """
    This class provides  the indexation and  type analysis
    services required by  the NumShape Directing Shapes of
    Swept Primitives.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Sweep_NumShapeTool self, Sweep_NumShape aShape) -> Sweep_NumShapeTool

        Create a new NumShapeTool with <aShape>.  The Tool
        must prepare an indexation  for  all the subshapes
        of this shape.

        :type aShape: OCC.wrapper.Sweep.Sweep_NumShape

        """
        this = _Sweep.new_Sweep_NumShapeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NbShapes(self, *args):
        """
        NbShapes(Sweep_NumShapeTool self) -> Standard_Integer

        Returns the number of subshapes in the shape.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Sweep.Sweep_NumShapeTool_NbShapes(self, *args)


    def Index(self, *args):
        """
        Index(Sweep_NumShapeTool self, Sweep_NumShape aShape) -> Standard_Integer

        Returns the index of <aShape>.

        :type aShape: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Sweep.Sweep_NumShapeTool_Index(self, *args)


    def Shape(self, *args):
        """
        Shape(Sweep_NumShapeTool self, Standard_Integer const anIndex) -> Sweep_NumShape

        Returns the Shape at index anIndex

        :type anIndex: int
        :rtype: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _Sweep.Sweep_NumShapeTool_Shape(self, *args)


    def Type(self, *args):
        """
        Type(Sweep_NumShapeTool self, Sweep_NumShape aShape) -> TopAbs_ShapeEnum

        Returns the type of <aShape>.

        :type aShape: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _Sweep.Sweep_NumShapeTool_Type(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Sweep_NumShapeTool self, Sweep_NumShape aShape) -> TopAbs_Orientation

        Returns the orientation of <aShape>.

        :type aShape: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _Sweep.Sweep_NumShapeTool_Orientation(self, *args)


    def HasFirstVertex(self, *args):
        """
        HasFirstVertex(Sweep_NumShapeTool self) -> Standard_Boolean

        Returns true if there is a First Vertex in the Shape.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Sweep.Sweep_NumShapeTool_HasFirstVertex(self, *args)


    def HasLastVertex(self, *args):
        """
        HasLastVertex(Sweep_NumShapeTool self) -> Standard_Boolean

        Returns true if there is a Last Vertex in the Shape.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Sweep.Sweep_NumShapeTool_HasLastVertex(self, *args)


    def FirstVertex(self, *args):
        """
        FirstVertex(Sweep_NumShapeTool self) -> Sweep_NumShape

        Returns the first vertex.

        :rtype: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _Sweep.Sweep_NumShapeTool_FirstVertex(self, *args)


    def LastVertex(self, *args):
        """
        LastVertex(Sweep_NumShapeTool self) -> Sweep_NumShape

        Returns the last vertex.

        :rtype: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _Sweep.Sweep_NumShapeTool_LastVertex(self, *args)

    __swig_destroy__ = _Sweep.delete_Sweep_NumShapeTool
Sweep_NumShapeTool_swigregister = _Sweep.Sweep_NumShapeTool_swigregister
Sweep_NumShapeTool_swigregister(Sweep_NumShapeTool)

class Sweep_NumShapeIterator(object):
    """
    This class provides iteration services required by
    the   Swept Primitives  for   a Directing NumShape
    Line.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Sweep_NumShapeIterator self) -> Sweep_NumShapeIterator

        This class provides iteration services required by
        the   Swept Primitives  for   a Directing NumShape
        Line.
        """
        this = _Sweep.new_Sweep_NumShapeIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(Sweep_NumShapeIterator self, Sweep_NumShape aShape)

        Resest the NumShapeIterator on sub-shapes of <aShape>.

        :type aShape: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _Sweep.Sweep_NumShapeIterator_Init(self, *args)


    def More(self, *args):
        """
        More(Sweep_NumShapeIterator self) -> Standard_Boolean

        Returns True if there is a current sub-shape.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Sweep.Sweep_NumShapeIterator_More(self, *args)


    def Next(self, *args):
        """
        Next(Sweep_NumShapeIterator self)

        Moves to the next sub-shape.


        """
        return _Sweep.Sweep_NumShapeIterator_Next(self, *args)


    def Value(self, *args):
        """
        Returns the current sub-shape.

        :rtype: OCC.wrapper.Sweep.Sweep_NumShape

        """
        res = _Sweep.Sweep_NumShapeIterator_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Orientation(self, *args):
        """
        Orientation(Sweep_NumShapeIterator self) -> TopAbs_Orientation

        Returns the orientation of the current sub-shape.

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _Sweep.Sweep_NumShapeIterator_Orientation(self, *args)

    __swig_destroy__ = _Sweep.delete_Sweep_NumShapeIterator
Sweep_NumShapeIterator_swigregister = _Sweep.Sweep_NumShapeIterator_swigregister
Sweep_NumShapeIterator_swigregister(Sweep_NumShapeIterator)

class Sweep_NumShape(object):
    """
    Gives    a  simple  indexed   representation  of a
    Directing Edge topology.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Sweep_NumShape self) -> Sweep_NumShape
        __init__(Sweep_NumShape self, Standard_Integer const Index, TopAbs_ShapeEnum const Type, Standard_Boolean const Closed, Standard_Boolean const BegInf, Standard_Boolean const EndInf) -> Sweep_NumShape

        Creates a new simple indexed edge.

        For an Edge : Index is the  number of vertices (0,
        1 or 2),Type is TopAbs_EDGE, Closed  is true if it
        is a  closed edge, BegInf is true  if  the Edge is
        infinite at the  begenning, EndInf is true  if the
        edge is infinite at the end.

        For a Vertex : Index is the index of the vertex in
        the edge (1 or 2),  Type  is TopAbsVERTEX, all the
        other fields have no meanning.

        :type Index: int
        :type Type: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type Closed: bool
        :type BegInf: bool
        :type EndInf: bool

        """
        this = _Sweep.new_Sweep_NumShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(Sweep_NumShape self, Standard_Integer const Index, TopAbs_ShapeEnum const Type, Standard_Boolean const Closed, Standard_Boolean const BegInf, Standard_Boolean const EndInf)

        Reinitialize a simple indexed edge.

        For an Edge : Index is the  number of vertices (0,
        1 or 2),Type is TopAbs_EDGE, Closed  is true if it
        is a  closed edge, BegInf is true  if  the Edge is
        infinite at the  begenning, EndInf is true  if the
        edge is infinite at the end.

        For a Vertex : Index is the index of the vertex in
        the edge (1 or 2), Type is TopAbsVERTEX, Closed is
        true if it is the vertex of a closed edge, all the
        other fields have no meanning.

        :type Index: int
        :type Type: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type Closed: bool
        :type BegInf: bool
        :type EndInf: bool

        """
        return _Sweep.Sweep_NumShape_Init(self, *args)


    def Index(self, *args):
        """
        Index(Sweep_NumShape self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Sweep.Sweep_NumShape_Index(self, *args)


    def Type(self, *args):
        """
        Type(Sweep_NumShape self) -> TopAbs_ShapeEnum

        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _Sweep.Sweep_NumShape_Type(self, *args)


    def Closed(self, *args):
        """
        Closed(Sweep_NumShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Sweep.Sweep_NumShape_Closed(self, *args)


    def BegInfinite(self, *args):
        """
        BegInfinite(Sweep_NumShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Sweep.Sweep_NumShape_BegInfinite(self, *args)


    def EndInfinite(self, *args):
        """
        EndInfinite(Sweep_NumShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Sweep.Sweep_NumShape_EndInfinite(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Sweep_NumShape self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _Sweep.Sweep_NumShape_Orientation(self, *args)

    __swig_destroy__ = _Sweep.delete_Sweep_NumShape
Sweep_NumShape_swigregister = _Sweep.Sweep_NumShape_swigregister
Sweep_NumShape_swigregister(Sweep_NumShape)



