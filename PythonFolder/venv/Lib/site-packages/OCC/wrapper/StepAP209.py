# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepAP209')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepAP209')
    _StepAP209 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepAP209', [dirname(__file__)])
        except ImportError:
            import _StepAP209
            return _StepAP209
        try:
            _mod = imp.load_module('_StepAP209', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepAP209 = swig_import_helper()
    del swig_import_helper
else:
    import _StepAP209
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP209.delete_SwigPyIterator

    def value(self):
        return _StepAP209.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepAP209.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepAP209.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepAP209.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepAP209.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepAP209.SwigPyIterator_copy(self)

    def next(self):
        return _StepAP209.SwigPyIterator_next(self)

    def __next__(self):
        return _StepAP209.SwigPyIterator___next__(self)

    def previous(self):
        return _StepAP209.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepAP209.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepAP209.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepAP209.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepAP209.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepAP209.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepAP209.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepAP209.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepAP209.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepAP209.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepAP209.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepAP209.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepAP209.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP209.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepAP209.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepAP209.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepAP209.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepAP209.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepAP209.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepAP209.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepAP209.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP209.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepAP209.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepAP209.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepAP209.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepAP209.ptr_to_number(item)
ptr_to_number = _StepAP209.ptr_to_number

def HashCode(*args):
    return _StepAP209.HashCode(*args)
HashCode = _StepAP209.HashCode

def ptr_equal(a, b):
    return _StepAP209.ptr_equal(a, b)
ptr_equal = _StepAP209.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import STEPConstruct
else:
    import STEPConstruct
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepAP203
else:
    import StepAP203
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepVisual
else:
    import StepVisual
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepAP214
else:
    import StepAP214
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XSControl
else:
    import XSControl
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFSelect
else:
    import IFSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFGraph
else:
    import IFGraph
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepElement
else:
    import StepElement
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepFEA
else:
    import StepFEA
del _swig_python_version_info
class StepAP209_Construct(STEPConstruct.STEPConstruct_Tool):
    """Basic tool for working with AP209 model"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP209_Construct self) -> StepAP209_Construct
        __init__(StepAP209_Construct self, Handle_XSControl_WorkSession WS) -> StepAP209_Construct

        Creates a tool and initializes it

        :type WS: OCC.wrapper.XSControl.Handle_XSControl_WorkSession

        """
        this = _StepAP209.new_StepAP209_Construct(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(StepAP209_Construct self, Handle_XSControl_WorkSession WS) -> Standard_Boolean

        Initializes tool; returns True if succeeded

        :type WS: OCC.wrapper.XSControl.Handle_XSControl_WorkSession
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP209.StepAP209_Construct_Init(self, *args)


    def IsDesing(self, *args):
        """
        IsDesing(StepAP209_Construct self, Handle_StepBasic_ProductDefinitionFormation PD) -> Standard_Boolean

        :type PD: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP209.StepAP209_Construct_IsDesing(self, *args)


    def IsAnalys(self, *args):
        """
        IsAnalys(StepAP209_Construct self, Handle_StepBasic_ProductDefinitionFormation PD) -> Standard_Boolean

        :type PD: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP209.StepAP209_Construct_IsAnalys(self, *args)


    def GetFeaAxis2Placement3d(self, *args):
        """
        GetFeaAxis2Placement3d(StepAP209_Construct self, Handle_StepFEA_FeaModel theFeaModel) -> Handle_StepFEA_FeaAxis2Placement3d

        :type theFeaModel: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel
        :rtype: OCC.wrapper.StepFEA.Handle_StepFEA_FeaAxis2Placement3d

        """
        return _StepAP209.StepAP209_Construct_GetFeaAxis2Placement3d(self, *args)


    def NominShape(self, *args):
        """
        NominShape(StepAP209_Construct self, Handle_StepBasic_Product Prod) -> Handle_StepShape_ShapeRepresentation
        NominShape(StepAP209_Construct self, Handle_StepBasic_ProductDefinitionFormation PDF) -> Handle_StepShape_ShapeRepresentation

        :type PDF: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_ShapeRepresentation

        """
        return _StepAP209.StepAP209_Construct_NominShape(self, *args)


    def GetElementMaterial(self, *args):
        """
        GetElementMaterial(StepAP209_Construct self) -> Handle_StepElement_HSequenceOfElementMaterial

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HSequenceOfElementMaterial

        """
        return _StepAP209.StepAP209_Construct_GetElementMaterial(self, *args)


    def GetElemGeomRelat(self, *args):
        """
        GetElemGeomRelat(StepAP209_Construct self) -> Handle_StepFEA_HSequenceOfElementGeometricRelationship

        :rtype: OCC.wrapper.StepFEA.Handle_StepFEA_HSequenceOfElementGeometricRelationship

        """
        return _StepAP209.StepAP209_Construct_GetElemGeomRelat(self, *args)


    def GetElements1D(self, *args):
        """
        GetElements1D(StepAP209_Construct self, Handle_StepFEA_FeaModel theFeaModel) -> Handle_StepFEA_HSequenceOfElementRepresentation

        :type theFeaModel: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel
        :rtype: OCC.wrapper.StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation

        """
        return _StepAP209.StepAP209_Construct_GetElements1D(self, *args)


    def GetElements2D(self, *args):
        """
        GetElements2D(StepAP209_Construct self, Handle_StepFEA_FeaModel theFEAModel) -> Handle_StepFEA_HSequenceOfElementRepresentation

        :type theFEAModel: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel
        :rtype: OCC.wrapper.StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation

        """
        return _StepAP209.StepAP209_Construct_GetElements2D(self, *args)


    def GetElements3D(self, *args):
        """
        GetElements3D(StepAP209_Construct self, Handle_StepFEA_FeaModel theFEAModel) -> Handle_StepFEA_HSequenceOfElementRepresentation

        :type theFEAModel: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel
        :rtype: OCC.wrapper.StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation

        """
        return _StepAP209.StepAP209_Construct_GetElements3D(self, *args)


    def GetCurElemSection(self, *args):
        """
        GetCurElemSection(StepAP209_Construct self, Handle_StepFEA_Curve3dElementRepresentation ElemRepr) -> Handle_StepElement_HSequenceOfCurveElementSectionDefinition

        Getting list of curve_element_section_definitions
        for given element_representation

        :type ElemRepr: OCC.wrapper.StepFEA.Handle_StepFEA_Curve3dElementRepresentation
        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition

        """
        return _StepAP209.StepAP209_Construct_GetCurElemSection(self, *args)


    def GetShReprForElem(self, *args):
        """
        GetShReprForElem(StepAP209_Construct self, Handle_StepFEA_ElementRepresentation ElemRepr) -> Handle_StepShape_ShapeRepresentation

        :type ElemRepr: OCC.wrapper.StepFEA.Handle_StepFEA_ElementRepresentation
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_ShapeRepresentation

        """
        return _StepAP209.StepAP209_Construct_GetShReprForElem(self, *args)


    def CreateAnalysStructure(self, *args):
        """
        CreateAnalysStructure(StepAP209_Construct self, Handle_StepBasic_Product Prod) -> Standard_Boolean

        Create empty structure for idealized_analysis_shape

        :type Prod: OCC.wrapper.StepBasic.Handle_StepBasic_Product
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP209.StepAP209_Construct_CreateAnalysStructure(self, *args)


    def CreateFeaStructure(self, *args):
        """
        CreateFeaStructure(StepAP209_Construct self, Handle_StepBasic_Product Prod) -> Standard_Boolean

        Create fea structure

        :type Prod: OCC.wrapper.StepBasic.Handle_StepBasic_Product
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP209.StepAP209_Construct_CreateFeaStructure(self, *args)


    def ReplaceCcDesingToApplied(self, *args):
        """
        ReplaceCcDesingToApplied(StepAP209_Construct self) -> Standard_Boolean

        Put into model entities Applied... for AP209 instead of
        entities CcDesing... from AP203.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP209.StepAP209_Construct_ReplaceCcDesingToApplied(self, *args)


    def CreateAddingEntities(self, *args):
        """
        CreateAddingEntities(StepAP209_Construct self, Handle_StepBasic_ProductDefinition AnaPD) -> Standard_Boolean

        Create approval.. , date.. , time.. , person.. and
        organization.. entities for analysis structure

        :type AnaPD: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP209.StepAP209_Construct_CreateAddingEntities(self, *args)


    def CreateAP203Structure(self, *args):
        """
        CreateAP203Structure(StepAP209_Construct self) -> Handle_StepData_StepModel

        Create AP203 structure from existing AP209 structure

        :rtype: OCC.wrapper.StepData.Handle_StepData_StepModel

        """
        return _StepAP209.StepAP209_Construct_CreateAP203Structure(self, *args)


    def CreateAdding203Entities(self, *args):
        """
        CreateAdding203Entities(StepAP209_Construct self, Handle_StepBasic_ProductDefinition PD, Handle_StepData_StepModel aModel) -> Standard_Boolean

        Create approval.. , date.. , time.. , person.. and
        organization.. entities for 203 structure

        :type PD: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition
        :type aModel: OCC.wrapper.StepData.Handle_StepData_StepModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP209.StepAP209_Construct_CreateAdding203Entities(self, *args)


    def FeaModel(self, *args):
        """
        FeaModel(StepAP209_Construct self, Handle_StepBasic_Product Prod) -> Handle_StepFEA_FeaModel
        FeaModel(StepAP209_Construct self, Handle_StepBasic_ProductDefinitionFormation PDF) -> Handle_StepFEA_FeaModel
        FeaModel(StepAP209_Construct self, Handle_StepRepr_ProductDefinitionShape PDS) -> Handle_StepFEA_FeaModel
        FeaModel(StepAP209_Construct self, Handle_StepBasic_ProductDefinition PD) -> Handle_StepFEA_FeaModel

        :type PD: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition
        :rtype: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel

        """
        return _StepAP209.StepAP209_Construct_FeaModel(self, *args)


    def IdealShape(self, *args):
        """
        IdealShape(StepAP209_Construct self, Handle_StepBasic_Product Prod) -> Handle_StepShape_ShapeRepresentation
        IdealShape(StepAP209_Construct self, Handle_StepBasic_ProductDefinitionFormation PDF) -> Handle_StepShape_ShapeRepresentation
        IdealShape(StepAP209_Construct self, Handle_StepBasic_ProductDefinition PD) -> Handle_StepShape_ShapeRepresentation
        IdealShape(StepAP209_Construct self, Handle_StepRepr_ProductDefinitionShape PDS) -> Handle_StepShape_ShapeRepresentation

        :type PDS: OCC.wrapper.StepAP209.Handle_StepRepr_ProductDefinitionShape
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_ShapeRepresentation

        """
        return _StepAP209.StepAP209_Construct_IdealShape(self, *args)

    __swig_destroy__ = _StepAP209.delete_StepAP209_Construct
StepAP209_Construct_swigregister = _StepAP209.StepAP209_Construct_swigregister
StepAP209_Construct_swigregister(StepAP209_Construct)



