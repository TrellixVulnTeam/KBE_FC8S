# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinObjMgt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinObjMgt')
    _BinObjMgt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinObjMgt', [dirname(__file__)])
        except ImportError:
            import _BinObjMgt
            return _BinObjMgt
        try:
            _mod = imp.load_module('_BinObjMgt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinObjMgt = swig_import_helper()
    del swig_import_helper
else:
    import _BinObjMgt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinObjMgt.delete_SwigPyIterator

    def value(self):
        return _BinObjMgt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinObjMgt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinObjMgt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinObjMgt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinObjMgt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinObjMgt.SwigPyIterator_copy(self)

    def next(self):
        return _BinObjMgt.SwigPyIterator_next(self)

    def __next__(self):
        return _BinObjMgt.SwigPyIterator___next__(self)

    def previous(self):
        return _BinObjMgt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinObjMgt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinObjMgt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinObjMgt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinObjMgt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinObjMgt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinObjMgt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinObjMgt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinObjMgt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinObjMgt.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinObjMgt.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinObjMgt.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinObjMgt.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinObjMgt.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinObjMgt.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinObjMgt.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinObjMgt.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinObjMgt.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinObjMgt.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinObjMgt.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinObjMgt.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinObjMgt.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinObjMgt.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinObjMgt.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinObjMgt.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinObjMgt.ptr_to_number(item)
ptr_to_number = _BinObjMgt.ptr_to_number

def HashCode(*args):
    return _BinObjMgt.HashCode(*args)
HashCode = _BinObjMgt.HashCode

def ptr_equal(a, b):
    return _BinObjMgt.ptr_equal(a, b)
ptr_equal = _BinObjMgt.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
class BinObjMgt_RRelocationTable(TColStd.NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher):
    """
    Retrieval relocation table is modeled as a child class of
    TColStd_DataMapOfIntegerTransient that stores a handle to the file
    header section. With that attribute drivers have access to the file header
    section.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetHeaderData(self, *args):
        """
        Returns a handle to the header data of the file that is begin read

        :rtype: OCC.wrapper.Storage.Handle_Storage_HeaderData

        """
        res = _BinObjMgt.BinObjMgt_RRelocationTable_GetHeaderData(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHeaderData(self, *args):
        """
        SetHeaderData(BinObjMgt_RRelocationTable self, Handle_Storage_HeaderData theHeaderData)

        Sets the storage header data.

        @param theHeaderData header data of the file that is begin read

        :type theHeaderData: OCC.wrapper.Storage.Handle_Storage_HeaderData

        """
        return _BinObjMgt.BinObjMgt_RRelocationTable_SetHeaderData(self, *args)


    def Clear(self, *args):
        """
        Clear(BinObjMgt_RRelocationTable self, Standard_Boolean const doReleaseMemory)

        :type doReleaseMemory: bool

        """
        return _BinObjMgt.BinObjMgt_RRelocationTable_Clear(self, *args)


    def __init__(self):
        """
        Retrieval relocation table is modeled as a child class of
        TColStd_DataMapOfIntegerTransient that stores a handle to the file
        header section. With that attribute drivers have access to the file header
        section.
        """
        this = _BinObjMgt.new_BinObjMgt_RRelocationTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinObjMgt.delete_BinObjMgt_RRelocationTable
BinObjMgt_RRelocationTable_swigregister = _BinObjMgt.BinObjMgt_RRelocationTable_swigregister
BinObjMgt_RRelocationTable_swigregister(BinObjMgt_RRelocationTable)

class BinObjMgt_Persistent(object):
    """
    Binary persistent representation of an object.
    Really it is used as a buffer for read/write an object.

    It takes care of Little/Big endian by inversing bytes
    in objects of standard types (see FSD_FileHeader.hxx
    for the default value of DO_INVERSE).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BinObjMgt_Persistent self) -> BinObjMgt_Persistent

        Empty constructor


        """
        this = _BinObjMgt.new_BinObjMgt_Persistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PutCharacter(self, *args):
        """
        PutCharacter(BinObjMgt_Persistent self, Standard_Character const theValue) -> BinObjMgt_Persistent

        :type theValue: OCC.wrapper.Standard.Standard_Character
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCharacter(self, *args)


    def PutByte(self, *args):
        """
        PutByte(BinObjMgt_Persistent self, Standard_Byte const theValue) -> BinObjMgt_Persistent

        :type theValue: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutByte(self, *args)


    def PutExtCharacter(self, *args):
        """
        PutExtCharacter(BinObjMgt_Persistent self, Standard_ExtCharacter const theValue) -> BinObjMgt_Persistent

        :type theValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtCharacter(self, *args)


    def PutInteger(self, *args):
        """
        PutInteger(BinObjMgt_Persistent self, Standard_Integer const theValue) -> BinObjMgt_Persistent

        :type theValue: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutInteger(self, *args)


    def PutBoolean(self, *args):
        """
        PutBoolean(BinObjMgt_Persistent self, Standard_Boolean const theValue) -> BinObjMgt_Persistent

        :type theValue: bool
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutBoolean(self, *args)


    def PutReal(self, *args):
        """
        PutReal(BinObjMgt_Persistent self, Standard_Real const theValue) -> BinObjMgt_Persistent

        :type theValue: float
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutReal(self, *args)


    def PutShortReal(self, *args):
        """
        PutShortReal(BinObjMgt_Persistent self, Standard_ShortReal const theValue) -> BinObjMgt_Persistent

        :type theValue: float
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutShortReal(self, *args)


    def PutCString(self, *args):
        """
        PutCString(BinObjMgt_Persistent self, Standard_CString const theValue) -> BinObjMgt_Persistent

        Offset in output buffer is not aligned

        :type theValue: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCString(self, *args)


    def PutAsciiString(self, *args):
        """
        PutAsciiString(BinObjMgt_Persistent self, TCollection_AsciiString theValue) -> BinObjMgt_Persistent

        Offset in output buffer is word-aligned

        :type theValue: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutAsciiString(self, *args)


    def PutExtendedString(self, *args):
        """
        PutExtendedString(BinObjMgt_Persistent self, TCollection_ExtendedString theValue) -> BinObjMgt_Persistent

        Offset in output buffer is word-aligned

        :type theValue: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtendedString(self, *args)


    def PutLabel(self, *args):
        """
        PutLabel(BinObjMgt_Persistent self, TDF_Label theValue) -> BinObjMgt_Persistent

        :type theValue: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutLabel(self, *args)


    def PutGUID(self, *args):
        """
        PutGUID(BinObjMgt_Persistent self, Standard_GUID theValue) -> BinObjMgt_Persistent

        :type theValue: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutGUID(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(BinObjMgt_Persistent self, Standard_Character const theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, Standard_Byte const theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, Standard_ExtCharacter const theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, Standard_Integer const theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, Standard_Boolean const theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, Standard_Real const theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, Standard_ShortReal const theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, Standard_CString const theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, TCollection_AsciiString theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, TCollection_ExtendedString theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, TDF_Label theValue) -> BinObjMgt_Persistent
        __lshift__(BinObjMgt_Persistent self, Standard_GUID theValue) -> BinObjMgt_Persistent

        :type theValue: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent___lshift__(self, *args)


    def PutCharArray(self, *args):
        """
        PutCharArray(BinObjMgt_Persistent self, BinObjMgt_PChar const theArray, Standard_Integer const theLength) -> BinObjMgt_Persistent

        Put C array of char, theLength is the number of elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PChar
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCharArray(self, *args)


    def PutByteArray(self, *args):
        """
        PutByteArray(BinObjMgt_Persistent self, BinObjMgt_PByte const theArray, Standard_Integer const theLength) -> BinObjMgt_Persistent

        Put C array of unsigned chars, theLength is the number of elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PByte
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutByteArray(self, *args)


    def PutExtCharArray(self, *args):
        """
        PutExtCharArray(BinObjMgt_Persistent self, BinObjMgt_PExtChar const theArray, Standard_Integer const theLength) -> BinObjMgt_Persistent

        Put C array of ExtCharacter, theLength is the number of elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PExtChar
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtCharArray(self, *args)


    def PutIntArray(self, *args):
        """
        PutIntArray(BinObjMgt_Persistent self, BinObjMgt_PInteger const theArray, Standard_Integer const theLength) -> BinObjMgt_Persistent

        Put C array of int, theLength is the number of elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PInteger
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutIntArray(self, *args)


    def PutRealArray(self, *args):
        """
        PutRealArray(BinObjMgt_Persistent self, BinObjMgt_PReal const theArray, Standard_Integer const theLength) -> BinObjMgt_Persistent

        Put C array of double, theLength is the number of elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PReal
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutRealArray(self, *args)


    def PutShortRealArray(self, *args):
        """
        PutShortRealArray(BinObjMgt_Persistent self, BinObjMgt_PShortReal const theArray, Standard_Integer const theLength) -> BinObjMgt_Persistent

        Put C array of float, theLength is the number of elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PShortReal
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutShortRealArray(self, *args)


    def GetCharacter(self, *args):
        """
        :type theValue: OCC.wrapper.Standard.Standard_Character
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetCharacter(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetByte(self, *args):
        """
        :type theValue: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetByte(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetExtCharacter(self, *args):
        """
        :type theValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetExtCharacter(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetInteger(self, *args):
        """
        :type theValue: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetInteger(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetBoolean(self, *args):
        """
        :type theValue: bool
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetBoolean(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetReal(self, *args):
        """
        :type theValue: float
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetReal(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetShortReal(self, *args):
        """
        :type theValue: float
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetShortReal(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetAsciiString(self, *args):
        """
        :type theValue: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetAsciiString(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetExtendedString(self, *args):
        """
        :type theValue: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetExtendedString(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetLabel(self, *args):
        """
        :type theDS: OCC.wrapper.TDF.Handle_TDF_Data
        :type theValue: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetLabel(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetGUID(self, *args):
        """
        :type theValue: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetGUID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __rshift__(self, *args):
        """
        __rshift__(BinObjMgt_Persistent self) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self, TCollection_AsciiString theValue) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self, TCollection_ExtendedString theValue) -> BinObjMgt_Persistent
        __rshift__(BinObjMgt_Persistent self, Standard_GUID theValue) -> BinObjMgt_Persistent

        :type theValue: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent___rshift__(self, *args)


    def GetCharArray(self, *args):
        """
        Get C array of char, theLength is the number of elements;
        theArray must point to a
        space enough to place theLength elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PChar
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetCharArray(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetByteArray(self, *args):
        """
        Get C array of unsigned chars, theLength is the number of elements;
        theArray must point to a
        space enough to place theLength elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PByte
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetByteArray(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetExtCharArray(self, *args):
        """
        Get C array of ExtCharacter, theLength is the number of elements;
        theArray must point to a
        space enough to place theLength elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PExtChar
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetExtCharArray(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetIntArray(self, *args):
        """
        Get C array of int, theLength is the number of elements;
        theArray must point to a
        space enough to place theLength elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PInteger
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetIntArray(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetRealArray(self, *args):
        """
        Get C array of double, theLength is the number of elements;
        theArray must point to a
        space enough to place theLength elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PReal
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetRealArray(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetShortRealArray(self, *args):
        """
        Get C array of float, theLength is the number of elements;
        theArray must point to a
        space enough to place theLength elements

        :type theArray: OCC.wrapper.BinObjMgt.BinObjMgt_PShortReal
        :type theLength: int
        :rtype: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent

        """
        res = _BinObjMgt.BinObjMgt_Persistent_GetShortRealArray(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Position(self, *args):
        """
        Position(BinObjMgt_Persistent self) -> Standard_Integer

        Tells the current position for get/put

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinObjMgt.BinObjMgt_Persistent_Position(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(BinObjMgt_Persistent self, Standard_Integer const thePos) -> Standard_Boolean

        Sets the current position for get/put.
        Resets an error state depending on the validity of thePos.
        Returns the new state (value of IsOK())

        :type thePos: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinObjMgt.BinObjMgt_Persistent_SetPosition(self, *args)


    def Truncate(self, *args):
        """
        Truncate(BinObjMgt_Persistent self)

        Truncates the buffer by current position,
        i.e. updates mySize


        """
        return _BinObjMgt.BinObjMgt_Persistent_Truncate(self, *args)


    def IsError(self, *args):
        """
        IsError(BinObjMgt_Persistent self) -> Standard_Boolean

        Indicates an error after Get methods or SetPosition

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinObjMgt.BinObjMgt_Persistent_IsError(self, *args)


    def Not(self, *args):
        """
        Not(BinObjMgt_Persistent self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinObjMgt.BinObjMgt_Persistent_Not(self, *args)


    def IsOK(self, *args):
        """
        IsOK(BinObjMgt_Persistent self) -> Standard_Boolean

        Indicates a good state after Get methods or SetPosition

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinObjMgt.BinObjMgt_Persistent_IsOK(self, *args)


    def Init(self, *args):
        """
        Init(BinObjMgt_Persistent self)

        Initializes me to reuse again


        """
        return _BinObjMgt.BinObjMgt_Persistent_Init(self, *args)


    def SetId(self, *args):
        """
        SetId(BinObjMgt_Persistent self, Standard_Integer const theId)

        Sets the Id of the object

        :type theId: int

        """
        return _BinObjMgt.BinObjMgt_Persistent_SetId(self, *args)


    def SetTypeId(self, *args):
        """
        SetTypeId(BinObjMgt_Persistent self, Standard_Integer const theId)

        Sets the Id of the type of the object

        :type theId: int

        """
        return _BinObjMgt.BinObjMgt_Persistent_SetTypeId(self, *args)


    def Id(self, *args):
        """
        Id(BinObjMgt_Persistent self) -> Standard_Integer

        Returns the Id of the object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinObjMgt.BinObjMgt_Persistent_Id(self, *args)


    def TypeId(self, *args):
        """
        TypeId(BinObjMgt_Persistent self) -> Standard_Integer

        Returns the Id of the type of the object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinObjMgt.BinObjMgt_Persistent_TypeId(self, *args)


    def Length(self, *args):
        """
        Length(BinObjMgt_Persistent self) -> Standard_Integer

        Returns the length of data

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinObjMgt.BinObjMgt_Persistent_Length(self, *args)


    def Write(self, *args):
        """
        Write(BinObjMgt_Persistent self, Standard_OStream & theOS) -> Standard_OStream &

        Stores <me> to the stream.
        inline Standard_OStream& operator<< (Standard_OStream&,
        BinObjMgt_Persistent&) is also available

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinObjMgt.BinObjMgt_Persistent_Write(self, *args)


    def Read(self, *args):
        """
        Read(BinObjMgt_Persistent self, Standard_IStream & theIS) -> Standard_IStream &

        Retrieves <me> from the stream.
        inline Standard_IStream& operator>> (Standard_IStream&,
        BinObjMgt_Persistent&) is also available

        :type theIS: OCC.wrapper.Standard.Standard_IStream
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinObjMgt.BinObjMgt_Persistent_Read(self, *args)


    def Destroy(self, *args):
        """
        Destroy(BinObjMgt_Persistent self)

        Frees the allocated memory;
        This object can be reused after call to Init


        """
        return _BinObjMgt.BinObjMgt_Persistent_Destroy(self, *args)

    __swig_destroy__ = _BinObjMgt.delete_BinObjMgt_Persistent
BinObjMgt_Persistent_swigregister = _BinObjMgt.BinObjMgt_Persistent_swigregister
BinObjMgt_Persistent_swigregister(BinObjMgt_Persistent)



