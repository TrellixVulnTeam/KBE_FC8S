# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TCollection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TCollection')
    _TCollection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TCollection', [dirname(__file__)])
        except ImportError:
            import _TCollection
            return _TCollection
        try:
            _mod = imp.load_module('_TCollection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TCollection = swig_import_helper()
    del swig_import_helper
else:
    import _TCollection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TCollection.delete_SwigPyIterator

    def value(self):
        return _TCollection.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TCollection.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TCollection.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TCollection.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TCollection.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TCollection.SwigPyIterator_copy(self)

    def next(self):
        return _TCollection.SwigPyIterator_next(self)

    def __next__(self):
        return _TCollection.SwigPyIterator___next__(self)

    def previous(self):
        return _TCollection.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TCollection.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TCollection.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TCollection.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TCollection.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TCollection.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TCollection.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TCollection.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TCollection.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TCollection.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TCollection.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TCollection.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TCollection.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TCollection.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TCollection.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TCollection.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TCollection.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TCollection.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TCollection.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TCollection.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TCollection.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TCollection.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TCollection.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TCollection.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TCollection.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TCollection.ptr_to_number(item)
ptr_to_number = _TCollection.ptr_to_number

def HashCode(*args):
    return _TCollection.HashCode(*args)
HashCode = _TCollection.HashCode

def ptr_equal(a, b):
    return _TCollection.ptr_equal(a, b)
ptr_equal = _TCollection.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
TCollection_Left = _TCollection.TCollection_Left
TCollection_Right = _TCollection.TCollection_Right
class TCollection_MapNode(Standard.Standard_Transient):
    """Basic class root of all the Maps."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TCollection_MapNode
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TCollection_MapNode(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TCollection_MapNode self, TCollection_MapNode n) -> TCollection_MapNode

        :type n: OCC.wrapper.TCollection.TCollection_MapNodePtr

        """
        this = _TCollection.new_TCollection_MapNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Next(self, *args):
        """
        Next(TCollection_MapNode self) -> TCollection_MapNodePtr &

        :rtype: OCC.wrapper.TCollection.TCollection_MapNodePtr

        """
        return _TCollection.TCollection_MapNode_Next(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TCollection.TCollection_MapNode_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TCollection.TCollection_MapNode_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.TCollection_MapNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TCollection.delete_TCollection_MapNode
TCollection_MapNode_swigregister = _TCollection.TCollection_MapNode_swigregister
TCollection_MapNode_swigregister(TCollection_MapNode)

def TCollection_MapNode_get_type_name(*args):
    """
    TCollection_MapNode_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TCollection.TCollection_MapNode_get_type_name(*args)

def TCollection_MapNode_get_type_descriptor(*args):
    """
    TCollection_MapNode_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TCollection.TCollection_MapNode_get_type_descriptor(*args)

class TCollection_HAsciiString(Standard.Standard_Transient):
    """
    A variable-length sequence of ASCII characters
    (normal 8-bit character type). It provides editing
    operations with built-in memory management to
    make HAsciiString objects easier to use than ordinary character arrays.
    HAsciiString objects are handles to strings.
    -   HAsciiString strings may be shared by several objects.
    -   You may use an AsciiString object to get the actual string.
    Note: HAsciiString objects use an AsciiString string as a field.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TCollection_HAsciiString
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TCollection_HAsciiString(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TCollection_HAsciiString self) -> TCollection_HAsciiString
        __init__(TCollection_HAsciiString self, Standard_CString const message) -> TCollection_HAsciiString
        __init__(TCollection_HAsciiString self, Standard_Character const aChar) -> TCollection_HAsciiString
        __init__(TCollection_HAsciiString self, Standard_Integer const length, Standard_Character const filler) -> TCollection_HAsciiString
        __init__(TCollection_HAsciiString self, Standard_Integer const value) -> TCollection_HAsciiString
        __init__(TCollection_HAsciiString self, Standard_Real const value) -> TCollection_HAsciiString
        __init__(TCollection_HAsciiString self, TCollection_AsciiString aString) -> TCollection_HAsciiString
        __init__(TCollection_HAsciiString self, Handle_TCollection_HAsciiString aString) -> TCollection_HAsciiString
        __init__(TCollection_HAsciiString self, Handle_TCollection_HExtendedString aString, Standard_Character const replaceNonAscii) -> TCollection_HAsciiString

        Initializes a HAsciiString with a HAsciiString.
        If replaceNonAscii is non-null charecter, it will be used
        in place of any non-ascii character found in the source string.
        Otherwise, raises OutOfRange exception if at least one character
        in the source string is not in the "Ascii range".

        :type aString: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :type replaceNonAscii: OCC.wrapper.Standard.Standard_Character

        """
        this = _TCollection.new_TCollection_HAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AssignCat(self, *args):
        """
        AssignCat(TCollection_HAsciiString self, Standard_CString const other)
        AssignCat(TCollection_HAsciiString self, Handle_TCollection_HAsciiString other)

        Appends <other>  to me.
        Example:  aString = aString + anotherString

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_AssignCat(self, *args)


    def Capitalize(self, *args):
        """
        Capitalize(TCollection_HAsciiString self)

        Converts the first character into its corresponding
        upper-case character and the other characters into lowercase.
        Example:
        before
        me = "hellO "
        after
        me = "Hello "


        """
        return _TCollection.TCollection_HAsciiString_Capitalize(self, *args)


    def Cat(self, *args):
        """
        Cat(TCollection_HAsciiString self, Standard_CString const other) -> Handle_TCollection_HAsciiString
        Cat(TCollection_HAsciiString self, Handle_TCollection_HAsciiString other) -> Handle_TCollection_HAsciiString

        Creates a new string by concatenation of this
        ASCII string and the other ASCII string.
        Example:  aString = aString + anotherString

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_Cat(self, *args)


    def Center(self, *args):
        """
        Center(TCollection_HAsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        Modifies this ASCII string so that its length
        becomes equal to Width and the new characters
        are equal to Filler. New characters are added
        both at the beginning and at the end of this string.
        If Width is less than the length of this ASCII string, nothing happens.
        Example
        Handle(TCollection_HAsciiString)
        myAlphabet
        = new
        TCollection_HAsciiString
        ("abcdef");
        myAlphabet->Center(9,' ');
        assert ( !strcmp(
        myAlphabet->ToCString(),
        " abcdef ") );

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_HAsciiString_Center(self, *args)


    def ChangeAll(self, *args):
        """
        ChangeAll(TCollection_HAsciiString self, Standard_Character const aChar, Standard_Character const NewChar, Standard_Boolean const CaseSensitive)

        Replaces all characters equal to aChar by
        NewChar in this ASCII string. The substitution is
        case sensitive if CaseSensitive is true (default value).
        If you do not use the default case sensitive
        option, it does not matter whether aChar is upper-case or not.
        Example
        Handle(TCollection_HAsciiString)
        myMistake = new
        TCollection_HAsciiString
        ("Hather");
        myMistake->ChangeAll('H','F');
        assert ( !strcmp(
        myMistake->ToCString(),
        "Father") );

        :type aChar: OCC.wrapper.Standard.Standard_Character
        :type NewChar: OCC.wrapper.Standard.Standard_Character
        :type CaseSensitive: bool

        """
        return _TCollection.TCollection_HAsciiString_ChangeAll(self, *args)


    def Clear(self, *args):
        """
        Clear(TCollection_HAsciiString self)

        Removes all characters contained in <me>.
        This produces an empty HAsciiString.


        """
        return _TCollection.TCollection_HAsciiString_Clear(self, *args)


    def FirstLocationInSet(self, *args):
        """
        FirstLocationInSet(TCollection_HAsciiString self, Handle_TCollection_HAsciiString Set, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the first character of <me> that is
        present in <Set>.
        The search begins to the index FromIndex and ends to the
        the index ToIndex.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range
        Example:
        before
        me = "aabAcAa", S = "Aa", FromIndex = 1, Toindex = 7
        after
        me = "aabAcAa"
        returns
        1

        :type Set: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HAsciiString_FirstLocationInSet(self, *args)


    def FirstLocationNotInSet(self, *args):
        """
        FirstLocationNotInSet(TCollection_HAsciiString self, Handle_TCollection_HAsciiString Set, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the first character of <me>
        that is not present in the set <Set>.
        The search begins to the index FromIndex and ends to the
        the index ToIndex in <me>.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range.
        Example:
        before
        me = "aabAcAa", S = "Aa", FromIndex = 1, Toindex = 7
        after
        me = "aabAcAa"
        returns
        3

        :type Set: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HAsciiString_FirstLocationNotInSet(self, *args)


    def Insert(self, *args):
        """
        Insert(TCollection_HAsciiString self, Standard_Integer const where, Standard_Character const what)
        Insert(TCollection_HAsciiString self, Standard_Integer const where, Standard_CString const what)
        Insert(TCollection_HAsciiString self, Standard_Integer const where, Handle_TCollection_HAsciiString what)

        Insert a HAsciiString at position <where>.

        :type where: int
        :type what: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_Insert(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(TCollection_HAsciiString self, Standard_Integer const Index, Handle_TCollection_HAsciiString other)

        Inserts the other ASCII string a after a specific index in the string <me>
        Example:
        before
        me = "cde" , Index = 0 , other = "ab"
        after
        me = "abcde" , other = "ab"

        :type Index: int
        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_InsertAfter(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(TCollection_HAsciiString self, Standard_Integer const Index, Handle_TCollection_HAsciiString other)

        Inserts the other ASCII string a before a specific index in the string <me>
        Raises an exception if Index is out of bounds
        Example:
        before
        me = "cde" , Index = 1 , other = "ab"
        after
        me = "abcde" , other = "ab"

        :type Index: int
        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_InsertBefore(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(TCollection_HAsciiString self) -> Standard_Boolean

        Returns True if the string <me> contains zero character

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsEmpty(self, *args)


    def IsLess(self, *args):
        """
        IsLess(TCollection_HAsciiString self, Handle_TCollection_HAsciiString other) -> Standard_Boolean

        Returns TRUE if <me> is 'ASCII' less than <other>.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsLess(self, *args)


    def IsGreater(self, *args):
        """
        IsGreater(TCollection_HAsciiString self, Handle_TCollection_HAsciiString other) -> Standard_Boolean

        Returns TRUE if <me> is 'ASCII' greater than <other>.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsGreater(self, *args)


    def IntegerValue(self, *args):
        """
        IntegerValue(TCollection_HAsciiString self) -> Standard_Integer

        Converts a HAsciiString containing a numeric expression to
        an Integer.
        Example: "215" returns 215.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HAsciiString_IntegerValue(self, *args)


    def IsIntegerValue(self, *args):
        """
        IsIntegerValue(TCollection_HAsciiString self) -> Standard_Boolean

        Returns True if the string contains an integer value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsIntegerValue(self, *args)


    def IsRealValue(self, *args):
        """
        IsRealValue(TCollection_HAsciiString self) -> Standard_Boolean

        Returns True if the string contains a real value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsRealValue(self, *args)


    def IsAscii(self, *args):
        """
        IsAscii(TCollection_HAsciiString self) -> Standard_Boolean

        Returns True if the string contains only ASCII characters
        between ' ' and '~'.
        This means no control character and no extended ASCII code.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsAscii(self, *args)


    def IsDifferent(self, *args):
        """
        IsDifferent(TCollection_HAsciiString self, Handle_TCollection_HAsciiString S) -> Standard_Boolean

        Returns True if the string S not contains same characters than
        the string <me>.

        :type S: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsDifferent(self, *args)


    def IsSameString(self, *args):
        """
        IsSameString(TCollection_HAsciiString self, Handle_TCollection_HAsciiString S) -> Standard_Boolean
        IsSameString(TCollection_HAsciiString self, Handle_TCollection_HAsciiString S, Standard_Boolean const CaseSensitive) -> Standard_Boolean

        Returns True if the string S contains same characters than the
        string <me>.

        :type S: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type CaseSensitive: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsSameString(self, *args)


    def LeftAdjust(self, *args):
        """
        LeftAdjust(TCollection_HAsciiString self)

        Removes all space characters in the begining of the string


        """
        return _TCollection.TCollection_HAsciiString_LeftAdjust(self, *args)


    def LeftJustify(self, *args):
        """
        LeftJustify(TCollection_HAsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        Left justify.
        Length becomes equal to Width and the new characters are
        equal to Filler
        if Width < Length nothing happens
        Raises an exception if Width is less than zero
        Example:
        before
        me = "abcdef" , Width = 9 , Filler = ' '
        after
        me = "abcdef   "

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_HAsciiString_LeftJustify(self, *args)


    def Length(self, *args):
        """
        Length(TCollection_HAsciiString self) -> Standard_Integer

        Returns number of characters in <me>.
        This is the same functionality as 'strlen' in C.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HAsciiString_Length(self, *args)


    def Location(self, *args):
        """
        Location(TCollection_HAsciiString self, Handle_TCollection_HAsciiString other, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer
        Location(TCollection_HAsciiString self, Standard_Integer const N, Standard_Character const C, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the nth occurence of the character C
        in the string <me> from the starting index FromIndex to the
        ending index ToIndex.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range
        Example:
        before
        me = "aabAa", N = 3, C = 'a', FromIndex = 1, ToIndex = 5
        after
        me = "aabAa"
        returns 5

        :type N: int
        :type C: OCC.wrapper.Standard.Standard_Character
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HAsciiString_Location(self, *args)


    def LowerCase(self, *args):
        """
        LowerCase(TCollection_HAsciiString self)

        Converts <me> to its lower-case equivalent.


        """
        return _TCollection.TCollection_HAsciiString_LowerCase(self, *args)


    def Prepend(self, *args):
        """
        Prepend(TCollection_HAsciiString self, Handle_TCollection_HAsciiString other)

        Inserts the other string at the begining of the string <me>
        Example:
        before
        me = "cde" , S = "ab"
        after
        me = "abcde" , S = "ab"

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_Prepend(self, *args)


    def Print(self, *args):
        """
        Print(TCollection_HAsciiString self, Standard_OStream & astream)

        Prints this string on the stream <astream>.

        :type astream: OCC.wrapper.Standard.Standard_OStream

        """
        return _TCollection.TCollection_HAsciiString_Print(self, *args)


    def RealValue(self, *args):
        """
        RealValue(TCollection_HAsciiString self) -> Standard_Real

        Converts a string containing a numeric expression to a Real.
        Example:
        "215" returns 215.0.
        "3.14159267" returns 3.14159267.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TCollection.TCollection_HAsciiString_RealValue(self, *args)


    def RemoveAll(self, *args):
        """
        RemoveAll(TCollection_HAsciiString self, Standard_Character const C, Standard_Boolean const CaseSensitive)
        RemoveAll(TCollection_HAsciiString self, Standard_Character const what)

        Removes every <what> characters from <me>

        :type what: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_HAsciiString_RemoveAll(self, *args)


    def Remove(self, *args):
        """
        Remove(TCollection_HAsciiString self, Standard_Integer const where, Standard_Integer const ahowmany=1)

        Erases <ahowmany> characters from position <where>,
        <where> included.
        Example:
        aString contains "Hello"
        aString.Erase(2,2) erases 2 characters from position 1
        This gives "Hlo".

        :type where: int
        :type ahowmany: int

        """
        return _TCollection.TCollection_HAsciiString_Remove(self, *args)


    def RightAdjust(self, *args):
        """
        RightAdjust(TCollection_HAsciiString self)

        Removes all space characters at the end of the string.


        """
        return _TCollection.TCollection_HAsciiString_RightAdjust(self, *args)


    def RightJustify(self, *args):
        """
        RightJustify(TCollection_HAsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        Right justify.
        Length becomes equal to Width and the new characters are
        equal to Filler
        if Width < Length nothing happens
        Raises an exception if Width is less than zero
        Example:
        before
        me = "abcdef" , Width = 9 , Filler = ' '
        after
        me = "   abcdef"

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_HAsciiString_RightJustify(self, *args)


    def Search(self, *args):
        """
        Search(TCollection_HAsciiString self, Standard_CString const what) -> Standard_Integer
        Search(TCollection_HAsciiString self, Handle_TCollection_HAsciiString what) -> Standard_Integer

        Searches a String in <me> from the beginning
        and returns position of first item <what> matching.
        it returns -1 if not found.

        :type what: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HAsciiString_Search(self, *args)


    def SearchFromEnd(self, *args):
        """
        SearchFromEnd(TCollection_HAsciiString self, Standard_CString const what) -> Standard_Integer
        SearchFromEnd(TCollection_HAsciiString self, Handle_TCollection_HAsciiString what) -> Standard_Integer

        Searches a HAsciiString in another HAsciiString from the end
        and returns position of first item <what> matching.
        It returns -1 if not found.

        :type what: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HAsciiString_SearchFromEnd(self, *args)


    def SetValue(self, *args):
        """
        SetValue(TCollection_HAsciiString self, Standard_Integer const where, Standard_Character const what)
        SetValue(TCollection_HAsciiString self, Standard_Integer const where, Standard_CString const what)
        SetValue(TCollection_HAsciiString self, Standard_Integer const where, Handle_TCollection_HAsciiString what)

        Replaces a part of <me> by another string.

        :type where: int
        :type what: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_SetValue(self, *args)


    def Split(self, *args):
        """
        Split(TCollection_HAsciiString self, Standard_Integer const where) -> Handle_TCollection_HAsciiString

        Splits a HAsciiString into two sub-strings.
        Example:
        aString contains "abcdefg"
        aString.Split(3) gives <me> = "abc" and returns "defg"

        :type where: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_Split(self, *args)


    def SubString(self, *args):
        """
        SubString(TCollection_HAsciiString self, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Handle_TCollection_HAsciiString

        Creation of a sub-string of the string <me>.
        The sub-string starts to the index Fromindex and ends
        to the index ToIndex.
        Raises an exception if ToIndex or FromIndex is out of
        bounds
        Example:
        before
        me = "abcdefg", ToIndex=3, FromIndex=6
        after
        me = "abcdefg"
        returns
        "cdef"

        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_SubString(self, *args)


    def ToCString(self, *args):
        """
        ToCString(TCollection_HAsciiString self) -> Standard_CString

        Returns pointer to string (char *)
        This is useful for some casual manipulations
        Because this "char *" is 'const', you can't modify its contents.

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TCollection.TCollection_HAsciiString_ToCString(self, *args)


    def Token(self, *args):
        """
        Token(TCollection_HAsciiString self, Standard_CString const separators, Standard_Integer const whichone=1) -> Handle_TCollection_HAsciiString

        Extracts <whichone> token from <me>.
        By default, the <separators> is set to space and tabulation.
        By default, the token extracted is the first one (whichone = 1).
        <separators> contains all separators you need.
        If no token indexed by <whichone> is found, it returns an empty String.
        Example:
        aString contains "This is a     message"
        aString.Token()  returns "This"
        aString.Token(" ",4) returns "message"
        aString.Token(" ",2) returns "is"
        aString.Token(" ",9) returns ""
        Other separators than space character and tabulation are allowed
        aString contains "1234; test:message   , value"
        aString.Token("; :,",4) returns "value"
        aString.Token("; :,",2) returns "test"

        :type separators: OCC.wrapper.Standard.Standard_CString
        :type whichone: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_Token(self, *args)


    def Trunc(self, *args):
        """
        Trunc(TCollection_HAsciiString self, Standard_Integer const ahowmany)

        Truncates <me> to <ahowmany> characters.
        Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel"

        :type ahowmany: int

        """
        return _TCollection.TCollection_HAsciiString_Trunc(self, *args)


    def UpperCase(self, *args):
        """
        UpperCase(TCollection_HAsciiString self)

        Converts <me> to its upper-case equivalent.


        """
        return _TCollection.TCollection_HAsciiString_UpperCase(self, *args)


    def UsefullLength(self, *args):
        """
        UsefullLength(TCollection_HAsciiString self) -> Standard_Integer

        Length of the string ignoring all spaces (' ') and the
        control character at the end.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HAsciiString_UsefullLength(self, *args)


    def Value(self, *args):
        """
        Value(TCollection_HAsciiString self, Standard_Integer const where) -> Standard_Character

        Returns character at position <where> in <me>.
        If <where> is less than zero or greater than the lenght of
        <me>, an exception is raised.
        Example:
        aString contains "Hello"
        aString.Value(2) returns 'e'

        :type where: int
        :rtype: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_HAsciiString_Value(self, *args)


    def String(self, *args):
        """
        Returns the field myString.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _TCollection.TCollection_HAsciiString_String(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsSameState(self, *args):
        """
        IsSameState(TCollection_HAsciiString self, Handle_TCollection_HAsciiString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HAsciiString_IsSameState(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TCollection.TCollection_HAsciiString_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TCollection.TCollection_HAsciiString_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.TCollection_HAsciiString_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TCollection.delete_TCollection_HAsciiString
TCollection_HAsciiString_swigregister = _TCollection.TCollection_HAsciiString_swigregister
TCollection_HAsciiString_swigregister(TCollection_HAsciiString)

def TCollection_HAsciiString_get_type_name(*args):
    """
    TCollection_HAsciiString_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TCollection.TCollection_HAsciiString_get_type_name(*args)

def TCollection_HAsciiString_get_type_descriptor(*args):
    """
    TCollection_HAsciiString_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TCollection.TCollection_HAsciiString_get_type_descriptor(*args)

class TCollection_SeqNode(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TCollection_SeqNode
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TCollection_SeqNode(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TCollection_SeqNode self, TCollection_SeqNode n, TCollection_SeqNode p) -> TCollection_SeqNode

        :type n: OCC.wrapper.TCollection.TCollection_SeqNodePtr
        :type p: OCC.wrapper.TCollection.TCollection_SeqNodePtr

        """
        this = _TCollection.new_TCollection_SeqNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Next(self, *args):
        """
        Next(TCollection_SeqNode self) -> TCollection_SeqNodePtr &

        :rtype: OCC.wrapper.TCollection.TCollection_SeqNodePtr

        """
        return _TCollection.TCollection_SeqNode_Next(self, *args)


    def Previous(self, *args):
        """
        Previous(TCollection_SeqNode self) -> TCollection_SeqNodePtr &

        :rtype: OCC.wrapper.TCollection.TCollection_SeqNodePtr

        """
        return _TCollection.TCollection_SeqNode_Previous(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TCollection.TCollection_SeqNode_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TCollection.TCollection_SeqNode_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.TCollection_SeqNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TCollection.delete_TCollection_SeqNode
TCollection_SeqNode_swigregister = _TCollection.TCollection_SeqNode_swigregister
TCollection_SeqNode_swigregister(TCollection_SeqNode)

def TCollection_SeqNode_get_type_name(*args):
    """
    TCollection_SeqNode_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TCollection.TCollection_SeqNode_get_type_name(*args)

def TCollection_SeqNode_get_type_descriptor(*args):
    """
    TCollection_SeqNode_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TCollection.TCollection_SeqNode_get_type_descriptor(*args)

class TCollection_HExtendedString(Standard.Standard_Transient):
    """
    A variable-length sequence of "extended"
    (UNICODE) characters (16-bit character
    type). It provides editing operations with
    built-in memory management to make
    ExtendedString objects easier to use than
    ordinary extended character arrays.
    HExtendedString objects are handles to strings.
    - HExtendedString strings may be shared by several objects.
    - You may use an ExtendedString object to get the actual string.
    Note: HExtendedString objects use an
    ExtendedString string as a field.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TCollection_HExtendedString
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TCollection_HExtendedString(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TCollection_HExtendedString self) -> TCollection_HExtendedString
        __init__(TCollection_HExtendedString self, Standard_CString const message) -> TCollection_HExtendedString
        __init__(TCollection_HExtendedString self, Standard_ExtString const message) -> TCollection_HExtendedString
        __init__(TCollection_HExtendedString self, Standard_ExtCharacter const aChar) -> TCollection_HExtendedString
        __init__(TCollection_HExtendedString self, Standard_Integer const length, Standard_ExtCharacter const filler) -> TCollection_HExtendedString
        __init__(TCollection_HExtendedString self, TCollection_ExtendedString aString) -> TCollection_HExtendedString
        __init__(TCollection_HExtendedString self, Handle_TCollection_HAsciiString aString) -> TCollection_HExtendedString
        __init__(TCollection_HExtendedString self, Handle_TCollection_HExtendedString aString) -> TCollection_HExtendedString

        Initializes a HExtendedString with a HExtendedString.

        :type aString: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        this = _TCollection.new_TCollection_HExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AssignCat(self, *args):
        """
        AssignCat(TCollection_HExtendedString self, Handle_TCollection_HExtendedString other)

        Appends <other>  to me.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_AssignCat(self, *args)


    def Cat(self, *args):
        """
        Cat(TCollection_HExtendedString self, Handle_TCollection_HExtendedString other) -> Handle_TCollection_HExtendedString

        Returns a string appending <other>  to me.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_Cat(self, *args)


    def ChangeAll(self, *args):
        """
        ChangeAll(TCollection_HExtendedString self, Standard_ExtCharacter const aChar, Standard_ExtCharacter const NewChar)

        Substitutes all the characters equal to aChar by NewChar
        in the string <me>.

        :type aChar: OCC.wrapper.Standard.Standard_ExtCharacter
        :type NewChar: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.TCollection_HExtendedString_ChangeAll(self, *args)


    def Clear(self, *args):
        """
        Clear(TCollection_HExtendedString self)

        Removes all characters contained in <me>.
        This produces an empty ExtendedString.


        """
        return _TCollection.TCollection_HExtendedString_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(TCollection_HExtendedString self) -> Standard_Boolean

        Returns True if the string <me> contains zero character

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HExtendedString_IsEmpty(self, *args)


    def Insert(self, *args):
        """
        Insert(TCollection_HExtendedString self, Standard_Integer const where, Standard_ExtCharacter const what)
        Insert(TCollection_HExtendedString self, Standard_Integer const where, Handle_TCollection_HExtendedString what)

        Insert a HExtendedString at position <where>.

        :type where: int
        :type what: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_Insert(self, *args)


    def IsLess(self, *args):
        """
        IsLess(TCollection_HExtendedString self, Handle_TCollection_HExtendedString other) -> Standard_Boolean

        Returns TRUE if <me> is less than <other>.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HExtendedString_IsLess(self, *args)


    def IsGreater(self, *args):
        """
        IsGreater(TCollection_HExtendedString self, Handle_TCollection_HExtendedString other) -> Standard_Boolean

        Returns TRUE if <me> is greater than <other>.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HExtendedString_IsGreater(self, *args)


    def IsAscii(self, *args):
        """
        IsAscii(TCollection_HExtendedString self) -> Standard_Boolean

        Returns True if the string contains only "Ascii Range"  characters

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HExtendedString_IsAscii(self, *args)


    def Length(self, *args):
        """
        Length(TCollection_HExtendedString self) -> Standard_Integer

        Returns number of characters in <me>.
        This is the same functionality as 'strlen' in C.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HExtendedString_Length(self, *args)


    def Remove(self, *args):
        """
        Remove(TCollection_HExtendedString self, Standard_Integer const where, Standard_Integer const ahowmany=1)

        Erases <ahowmany> characters from position <where>,
        <where> included.
        Example:
        aString contains "Hello"
        aString.Erase(2,2) erases 2 characters from position 1
        This gives "Hlo".

        :type where: int
        :type ahowmany: int

        """
        return _TCollection.TCollection_HExtendedString_Remove(self, *args)


    def RemoveAll(self, *args):
        """
        RemoveAll(TCollection_HExtendedString self, Standard_ExtCharacter const what)

        Removes every <what> characters from <me>.

        :type what: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.TCollection_HExtendedString_RemoveAll(self, *args)


    def SetValue(self, *args):
        """
        SetValue(TCollection_HExtendedString self, Standard_Integer const where, Standard_ExtCharacter const what)
        SetValue(TCollection_HExtendedString self, Standard_Integer const where, Handle_TCollection_HExtendedString what)

        Replaces a part of <me> by another string.

        :type where: int
        :type what: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_SetValue(self, *args)


    def Split(self, *args):
        """
        Split(TCollection_HExtendedString self, Standard_Integer const where) -> Handle_TCollection_HExtendedString

        Splits a ExtendedString into two sub-strings.
        Example:
        aString contains "abcdefg"
        aString.Split(3) gives <me> = "abc" and returns "defg"

        :type where: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_Split(self, *args)


    def Search(self, *args):
        """
        Search(TCollection_HExtendedString self, Handle_TCollection_HExtendedString what) -> Standard_Integer

        Searches a String in <me> from the beginning
        and returns position of first item <what> matching.
        It returns -1 if not found.

        :type what: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HExtendedString_Search(self, *args)


    def SearchFromEnd(self, *args):
        """
        SearchFromEnd(TCollection_HExtendedString self, Handle_TCollection_HExtendedString what) -> Standard_Integer

        Searches a ExtendedString in another ExtendedString from the end
        and returns position of first item <what> matching.
        It returns -1 if not found.

        :type what: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_HExtendedString_SearchFromEnd(self, *args)


    def ToExtString(self, *args):
        """
        ToExtString(TCollection_HExtendedString self) -> Standard_ExtString

        Returns pointer to ExtString

        :rtype: OCC.wrapper.Standard.Standard_ExtString

        """
        return _TCollection.TCollection_HExtendedString_ToExtString(self, *args)


    def Token(self, *args):
        """
        Token(TCollection_HExtendedString self, Standard_ExtString const separators, Standard_Integer const whichone=1) -> Handle_TCollection_HExtendedString

        Extracts <whichone> token from <me>.
        By default, the <separators> is set to space and tabulation.
        By default, the token extracted is the first one (whichone = 1).
        <separators> contains all separators you need.
        If no token indexed by <whichone> is found, it returns an empty String.
        Example:
        aString contains "This is a     message"
        aString.Token()  returns "This"
        aString.Token(" ",4) returns "message"
        aString.Token(" ",2) returns "is"
        aString.Token(" ",9) returns ""
        Other separators than space character and tabulation are allowed
        aString contains "1234; test:message   , value"
        aString.Token("; :,",4) returns "value"
        aString.Token("; :,",2) returns "test"

        :type separators: OCC.wrapper.Standard.Standard_ExtString
        :type whichone: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_Token(self, *args)


    def Trunc(self, *args):
        """
        Trunc(TCollection_HExtendedString self, Standard_Integer const ahowmany)

        Truncates <me> to <ahowmany> characters.
        Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel"

        :type ahowmany: int

        """
        return _TCollection.TCollection_HExtendedString_Trunc(self, *args)


    def Value(self, *args):
        """
        Value(TCollection_HExtendedString self, Standard_Integer const where) -> Standard_ExtCharacter

        Returns ExtCharacter at position <where> in <me>.
        If <where> is less than zero or greater than the length of
        <me>, an exception is raised.
        Example:
        aString contains "Hello"
        aString.Value(2) returns 'e'

        :type where: int
        :rtype: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.TCollection_HExtendedString_Value(self, *args)


    def String(self, *args):
        """
        Returns the field myString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _TCollection.TCollection_HExtendedString_String(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(TCollection_HExtendedString self, Standard_OStream & astream)

        Displays <me> .

        :type astream: OCC.wrapper.Standard.Standard_OStream

        """
        return _TCollection.TCollection_HExtendedString_Print(self, *args)


    def IsSameState(self, *args):
        """
        IsSameState(TCollection_HExtendedString self, Handle_TCollection_HExtendedString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_HExtendedString_IsSameState(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TCollection.TCollection_HExtendedString_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TCollection.TCollection_HExtendedString_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.TCollection_HExtendedString_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TCollection.delete_TCollection_HExtendedString
TCollection_HExtendedString_swigregister = _TCollection.TCollection_HExtendedString_swigregister
TCollection_HExtendedString_swigregister(TCollection_HExtendedString)

def TCollection_HExtendedString_get_type_name(*args):
    """
    TCollection_HExtendedString_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TCollection.TCollection_HExtendedString_get_type_name(*args)

def TCollection_HExtendedString_get_type_descriptor(*args):
    """
    TCollection_HExtendedString_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TCollection.TCollection_HExtendedString_get_type_descriptor(*args)

class TCollection_ExtendedString(object):
    """
    A variable-length sequence of "extended" (UNICODE) characters (16-bit character type).
    It provides editing operations with built-in memory management
    to make ExtendedString objects easier to use than ordinary extended character arrays.
    ExtendedString objects follow "value semantics", that is, they are the actual strings,
    not handles to strings, and are copied through assignment.
    You may use HExtendedString objects to get handles to strings.

    Beware that class can transparently store UTF-16 string with surrogate pairs
    (Unicode symbol represented by two 16-bit code units).
    However, surrogate pairs are not considered by the following methods:
    - Method ::Length() return the number of 16-bit code units, not the number of Unicode symbols.
    - Methods taking/returning symbol index work with 16-bit code units, not true Unicode symbols,
    including ::Remove(), ::SetValue(), ::Value(), ::Search(), ::Trunc() and others.
    If application needs to process surrogate pairs, NCollection_Utf16Iter class can be used
    for iterating through Unicode string (UTF-32 code unit will be returned for each position).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TCollection_ExtendedString self) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, Standard_CString const astring, Standard_Boolean const isMultiByte) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, Standard_ExtString const astring) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, Standard_WideChar const * theStringUtf) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, Standard_Character const aChar) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, Standard_ExtCharacter const aChar) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, Standard_Integer const length, Standard_ExtCharacter const filler) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, Standard_Integer const value) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, Standard_Real const value) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, TCollection_ExtendedString astring) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, TCollection_ExtendedString theOther) -> TCollection_ExtendedString
        __init__(TCollection_ExtendedString self, TCollection_AsciiString astring) -> TCollection_ExtendedString

        Creation by converting an Ascii string to an extended
        string. The string is treated as having UTF-8 coding.
        If it is not a UTF-8 then each character is copied to ExtCharacter.

        :type astring: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        this = _TCollection.new_TCollection_ExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignCat(self, *args):
        """
        AssignCat(TCollection_ExtendedString self, TCollection_ExtendedString other)

        Appends the other extended string to this extended string.
        Note that this method is an alias of operator +=.
        Example: aString += anotherString

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_AssignCat(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(TCollection_ExtendedString self, TCollection_ExtendedString other)

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString___iadd__(self, *args)


    def Cat(self, *args):
        """
        Cat(TCollection_ExtendedString self, TCollection_ExtendedString other) -> TCollection_ExtendedString

        Appends <other> to me.

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Cat(self, *args)


    def __add__(self, *args):
        """
        __add__(TCollection_ExtendedString self, TCollection_ExtendedString other) -> TCollection_ExtendedString

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString___add__(self, *args)


    def ChangeAll(self, *args):
        """
        ChangeAll(TCollection_ExtendedString self, Standard_ExtCharacter const aChar, Standard_ExtCharacter const NewChar)

        Substitutes all the characters equal to aChar by NewChar
        in the ExtendedString <me>.
        The substitution can be case sensitive.
        If you don't use default case sensitive, no matter wether aChar
        is uppercase or not.

        :type aChar: OCC.wrapper.Standard.Standard_ExtCharacter
        :type NewChar: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.TCollection_ExtendedString_ChangeAll(self, *args)


    def Clear(self, *args):
        """
        Clear(TCollection_ExtendedString self)

        Removes all characters contained in <me>.
        This produces an empty ExtendedString.


        """
        return _TCollection.TCollection_ExtendedString_Clear(self, *args)


    def Copy(self, *args):
        """
        Copy(TCollection_ExtendedString self, TCollection_ExtendedString fromwhere)

        Copy <fromwhere> to <me>.
        Used as operator =

        :type fromwhere: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Copy(self, *args)


    def Swap(self, *args):
        """
        Swap(TCollection_ExtendedString self, TCollection_ExtendedString theOther)

        Exchange the data of two strings (without reallocating memory).

        :type theOther: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Swap(self, *args)


    def assign(self, *args):
        """
        assign(TCollection_ExtendedString self, TCollection_ExtendedString fromwhere)
        assign(TCollection_ExtendedString self, TCollection_ExtendedString theOther) -> TCollection_ExtendedString

        Move assignment operator

        :type theOther: OCC.wrapper.TCollection.TCollection_ExtendedString &&
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_assign(self, *args)


    def Insert(self, *args):
        """
        Insert(TCollection_ExtendedString self, Standard_Integer const where, Standard_ExtCharacter const what)
        Insert(TCollection_ExtendedString self, Standard_Integer const where, TCollection_ExtendedString what)

        Insert a ExtendedString at position <where>.

        :type where: int
        :type what: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Insert(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(TCollection_ExtendedString self) -> Standard_Boolean

        Returns True if this string contains no characters.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString_IsEmpty(self, *args)


    def __eq__(self, *args):
        """
        __eq__(TCollection_ExtendedString self, Standard_ExtString const other) -> Standard_Boolean
        __eq__(TCollection_ExtendedString self, TCollection_ExtendedString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString___eq__(self, *args)


    def IsDifferent(self, *args):
        """
        IsDifferent(TCollection_ExtendedString self, Standard_ExtString const other) -> Standard_Boolean
        IsDifferent(TCollection_ExtendedString self, TCollection_ExtendedString other) -> Standard_Boolean

        Returns true if there are differences between the
        characters in this extended string and the other extended string.
        Note that this method is an alias of operator !=.

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString_IsDifferent(self, *args)


    def __ne__(self, *args):
        """
        __ne__(TCollection_ExtendedString self, Standard_ExtString const other) -> Standard_Boolean
        __ne__(TCollection_ExtendedString self, TCollection_ExtendedString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString___ne__(self, *args)


    def IsLess(self, *args):
        """
        IsLess(TCollection_ExtendedString self, Standard_ExtString const other) -> Standard_Boolean
        IsLess(TCollection_ExtendedString self, TCollection_ExtendedString other) -> Standard_Boolean

        Returns TRUE if <me> is less than <other>.

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString_IsLess(self, *args)


    def __lt__(self, *args):
        """
        __lt__(TCollection_ExtendedString self, Standard_ExtString const other) -> Standard_Boolean
        __lt__(TCollection_ExtendedString self, TCollection_ExtendedString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString___lt__(self, *args)


    def IsGreater(self, *args):
        """
        IsGreater(TCollection_ExtendedString self, Standard_ExtString const other) -> Standard_Boolean
        IsGreater(TCollection_ExtendedString self, TCollection_ExtendedString other) -> Standard_Boolean

        Returns TRUE if <me> is greater than <other>.

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString_IsGreater(self, *args)


    def __gt__(self, *args):
        """
        __gt__(TCollection_ExtendedString self, Standard_ExtString const other) -> Standard_Boolean
        __gt__(TCollection_ExtendedString self, TCollection_ExtendedString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString___gt__(self, *args)


    def StartsWith(self, *args):
        """
        StartsWith(TCollection_ExtendedString self, TCollection_ExtendedString theStartString) -> Standard_Boolean

        Determines whether the beginning of this string instance matches the specified string.

        :type theStartString: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString_StartsWith(self, *args)


    def EndsWith(self, *args):
        """
        EndsWith(TCollection_ExtendedString self, TCollection_ExtendedString theEndString) -> Standard_Boolean

        Determines whether the end of this string instance matches the specified string.

        :type theEndString: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString_EndsWith(self, *args)


    def IsAscii(self, *args):
        """
        IsAscii(TCollection_ExtendedString self) -> Standard_Boolean

        Returns True if the ExtendedString contains only
        "Ascii Range" characters .

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString_IsAscii(self, *args)


    def Length(self, *args):
        """
        Length(TCollection_ExtendedString self) -> Standard_Integer

        Returns the number of 16-bit code units
        (might be greater than number of Unicode symbols if string contains surrogate pairs).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_ExtendedString_Length(self, *args)


    def Print(self, *args):
        """
        Print(TCollection_ExtendedString self, Standard_OStream & astream)

        Displays <me> .

        :type astream: OCC.wrapper.Standard.Standard_OStream

        """
        return _TCollection.TCollection_ExtendedString_Print(self, *args)


    def RemoveAll(self, *args):
        """
        RemoveAll(TCollection_ExtendedString self, Standard_ExtCharacter const what)

        Removes every <what> characters from <me>.

        :type what: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.TCollection_ExtendedString_RemoveAll(self, *args)


    def Remove(self, *args):
        """
        Remove(TCollection_ExtendedString self, Standard_Integer const where, Standard_Integer const ahowmany=1)

        Erases <ahowmany> characters from position <where>,<where> included.

        :type where: int
        :type ahowmany: int

        """
        return _TCollection.TCollection_ExtendedString_Remove(self, *args)


    def Search(self, *args):
        """
        Search(TCollection_ExtendedString self, TCollection_ExtendedString what) -> Standard_Integer

        Searches a ExtendedString in <me> from the beginning
        and returns position of first item <what> matching.
        it returns -1 if not found.

        :type what: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_ExtendedString_Search(self, *args)


    def SearchFromEnd(self, *args):
        """
        SearchFromEnd(TCollection_ExtendedString self, TCollection_ExtendedString what) -> Standard_Integer

        Searches a ExtendedString in another ExtendedString from the
        end and returns position of first item <what> matching.
        it returns -1 if not found.

        :type what: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_ExtendedString_SearchFromEnd(self, *args)


    def SetValue(self, *args):
        """
        SetValue(TCollection_ExtendedString self, Standard_Integer const where, Standard_ExtCharacter const what)
        SetValue(TCollection_ExtendedString self, Standard_Integer const where, TCollection_ExtendedString what)

        Replaces a part of <me> by another ExtendedString see above.

        :type where: int
        :type what: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_SetValue(self, *args)


    def Split(self, *args):
        """
        Split(TCollection_ExtendedString self, Standard_Integer const where) -> TCollection_ExtendedString

        Splits this extended string into two sub-strings at position where.
        -   The second sub-string (from position
        where + 1 of this string to the end) is
        returned in a new extended string.
        -   this extended string is modified: its last
        characters are removed, it becomes equal to
        the first sub-string (from the first character to position where).
        Example:
        aString contains "abcdefg"
        aString.Split(3) gives <me> = "abc" and returns "defg"

        :type where: int
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Split(self, *args)


    def Token(self, *args):
        """
        Token(TCollection_ExtendedString self, Standard_ExtString const separators, Standard_Integer const whichone=1) -> TCollection_ExtendedString

        Extracts <whichone> token from <me>.
        By default, the <separators> is set to space and tabulation.
        By default, the token extracted is the first one (whichone = 1).
        <separators> contains all separators you need.
        If no token indexed by <whichone> is found, it returns an empty AsciiString.
        Example:
        aString contains "This is a     message"
        aString.Token()  returns "This"
        aString.Token(" ",4) returns "message"
        aString.Token(" ",2) returns "is"
        aString.Token(" ",9) returns ""
        Other separators than space character and tabulation are allowed :
        aString contains "1234; test:message   , value"
        aString.Token("; :,",4) returns "value"
        aString.Token("; :,",2) returns "test"

        :type separators: OCC.wrapper.Standard.Standard_ExtString
        :type whichone: int
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Token(self, *args)


    def ToExtString(self, *args):
        """
        ToExtString(TCollection_ExtendedString self) -> Standard_ExtString

        Returns pointer to ExtString

        :rtype: OCC.wrapper.Standard.Standard_ExtString

        """
        return _TCollection.TCollection_ExtendedString_ToExtString(self, *args)


    def Trunc(self, *args):
        """
        Trunc(TCollection_ExtendedString self, Standard_Integer const ahowmany)

        Truncates <me> to <ahowmany> characters.
        Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel"
        Exceptions
        Standard_OutOfRange if ahowmany is greater
        than the length of this string.

        :type ahowmany: int

        """
        return _TCollection.TCollection_ExtendedString_Trunc(self, *args)


    def Value(self, *args):
        """
        Value(TCollection_ExtendedString self, Standard_Integer const where) -> Standard_ExtCharacter

        Returns character at position <where> in <me>.
        If <where> is less than zero or greater than the lenght of
        <me>, an exception is raised.
        Example:
        aString contains "Hello"
        aString.Value(2) returns 'e'
        Exceptions
        Standard_OutOfRange if where lies outside
        the bounds of this extended string.

        :type where: int
        :rtype: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.TCollection_ExtendedString_Value(self, *args)


    def HashCode(*args):
        """
        HashCode(TCollection_ExtendedString theString, Standard_Integer const theUpper) -> Standard_Integer

        Returns a hashed value for the extended string within the range 1..theUpper.
        Note: if string is ASCII, the computed value is the same as the value computed with the HashCode function on a
        TCollection_AsciiString string composed with equivalent ASCII characters.

        :type theString: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theUpper: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_ExtendedString_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        IsEqual(Standard_ExtString const other) -> Standard_Boolean
        IsEqual(TCollection_ExtendedString other) -> Standard_Boolean
        IsEqual(TCollection_ExtendedString theString1, TCollection_ExtendedString theString2) -> Standard_Boolean

        Returns true if the characters in this extended
        string are identical to the characters in the other extended string.
        Note that this method is an alias of operator ==.

        :type theString1: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theString2: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_ExtendedString_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def ToUTF8CString(self, *args):
        """
        ToUTF8CString(TCollection_ExtendedString self, Standard_PCharacter & theCString) -> Standard_Integer

        Converts the internal <mystring> to UTF8 coding and
        returns length of the out CString. A memory for the
        <theCString> should be allocated before call!

        :type theCString: OCC.wrapper.Standard.Standard_PCharacter
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_ExtendedString_ToUTF8CString(self, *args)


    def LengthOfCString(self, *args):
        """
        LengthOfCString(TCollection_ExtendedString self) -> Standard_Integer

        Returns expected CString length in UTF8 coding.
        It can be used for  memory  calculation  before converting
        to CString containing symbols in UTF8 coding.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_ExtendedString_LengthOfCString(self, *args)

    __swig_destroy__ = _TCollection.delete_TCollection_ExtendedString
TCollection_ExtendedString_swigregister = _TCollection.TCollection_ExtendedString_swigregister
TCollection_ExtendedString_swigregister(TCollection_ExtendedString)

def TCollection_ExtendedString_HashCode(*args):
    """
    TCollection_ExtendedString_HashCode(TCollection_ExtendedString theString, Standard_Integer const theUpper) -> Standard_Integer

    Returns a hashed value for the extended string within the range 1..theUpper.
    Note: if string is ASCII, the computed value is the same as the value computed with the HashCode function on a
    TCollection_AsciiString string composed with equivalent ASCII characters.

    :type theString: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type theUpper: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _TCollection.TCollection_ExtendedString_HashCode(*args)

def TCollection_ExtendedString_IsEqual(*args):
    """
    IsEqual(Standard_ExtString const other) -> Standard_Boolean
    IsEqual(TCollection_ExtendedString other) -> Standard_Boolean
    TCollection_ExtendedString_IsEqual(TCollection_ExtendedString theString1, TCollection_ExtendedString theString2) -> Standard_Boolean

    Returns true if the characters in this extended
    string are identical to the characters in the other extended string.
    Note that this method is an alias of operator ==.

    :type theString1: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type theString2: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TCollection.TCollection_ExtendedString_IsEqual(*args)

class TCollection_BaseSequence(object):
    """
    Definition of a base class for all instanciations
    of sequence.

    The methods : Clear, Remove accepts a pointer to a
    function  to use  to delete the  nodes. This allow
    proper    call of  the  destructor  on  the Items.
    Without adding a  virtual function pointer to each
    node or each sequence.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsEmpty(self, *args):
        """
        IsEmpty(TCollection_BaseSequence self) -> Standard_Boolean

        returns True if the sequence <me> contains no elements.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_BaseSequence_IsEmpty(self, *args)


    def Length(self, *args):
        """
        Length(TCollection_BaseSequence self) -> Standard_Integer

        Returns  the  number  of element(s) in the
        sequence.  Returns zero if the sequence is empty.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_BaseSequence_Length(self, *args)


    def Reverse(self, *args):
        """
        Reverse(TCollection_BaseSequence self)

        Reverses the order of items on <me>.
        Example:
        before
        me = (A B C)
        after
        me = (C B A)


        """
        return _TCollection.TCollection_BaseSequence_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(TCollection_BaseSequence self, Standard_Integer const I, Standard_Integer const J)

        Swaps  elements  which    are  located  at
        positions <I> and <J> in <me>.
        Raises an exception if I or J is out of bound.
        Example:
        before
        me = (A B C), I = 1, J = 3
        after
        me = (C B A)

        :type I: int
        :type J: int

        """
        return _TCollection.TCollection_BaseSequence_Exchange(self, *args)

    __swig_destroy__ = _TCollection.delete_TCollection_BaseSequence
TCollection_BaseSequence_swigregister = _TCollection.TCollection_BaseSequence_swigregister
TCollection_BaseSequence_swigregister(TCollection_BaseSequence)

class Handle_TCollection_MapNode(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TCollection_MapNode self)

        Nullify the handle


        """
        return _TCollection.Handle_TCollection_MapNode_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TCollection_MapNode self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TCollection.Handle_TCollection_MapNode_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TCollection_MapNode self, TCollection_MapNode thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TCollection.Handle_TCollection_MapNode_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TCollection_MapNode self, Handle_TCollection_MapNode theHandle) -> Handle_TCollection_MapNode
        assign(Handle_TCollection_MapNode self, TCollection_MapNode thePtr) -> Handle_TCollection_MapNode
        assign(Handle_TCollection_MapNode self, Handle_TCollection_MapNode theHandle) -> Handle_TCollection_MapNode

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TCollection.Handle_TCollection_MapNode_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TCollection_MapNode self) -> TCollection_MapNode

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TCollection.Handle_TCollection_MapNode_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TCollection_MapNode self) -> TCollection_MapNode

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TCollection.Handle_TCollection_MapNode___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TCollection_MapNode self) -> TCollection_MapNode

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TCollection.Handle_TCollection_MapNode___ref__(self, *args)


    def __hash__(self):
        return _TCollection.Handle_TCollection_MapNode___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TCollection.Handle_TCollection_MapNode___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TCollection.new_Handle_TCollection_MapNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TCollection.Handle_TCollection_MapNode_DownCast)
    __swig_destroy__ = _TCollection.delete_Handle_TCollection_MapNode

    def Next(self, *args):
        """
        Next(Handle_TCollection_MapNode self) -> TCollection_MapNodePtr &

        :rtype: OCC.wrapper.TCollection.TCollection_MapNodePtr

        """
        return _TCollection.Handle_TCollection_MapNode_Next(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TCollection_MapNode self) -> char const *

        :rtype: const char *

        """
        return _TCollection.Handle_TCollection_MapNode_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.Handle_TCollection_MapNode_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.Handle_TCollection_MapNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TCollection_MapNode self)

        Memory deallocator for transient classes


        """
        return _TCollection.Handle_TCollection_MapNode_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TCollection_MapNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TCollection_MapNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_MapNode_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TCollection_MapNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TCollection_MapNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_MapNode_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TCollection_MapNode self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TCollection.Handle_TCollection_MapNode_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TCollection_MapNode self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_MapNode_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TCollection_MapNode self)

        Increments the reference counter of this object


        """
        return _TCollection.Handle_TCollection_MapNode_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TCollection_MapNode self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_MapNode_DecrementRefCounter(self, *args)

Handle_TCollection_MapNode_swigregister = _TCollection.Handle_TCollection_MapNode_swigregister
Handle_TCollection_MapNode_swigregister(Handle_TCollection_MapNode)

def Handle_TCollection_MapNode_DownCast(thing):
    return _TCollection.Handle_TCollection_MapNode_DownCast(thing)
Handle_TCollection_MapNode_DownCast = _TCollection.Handle_TCollection_MapNode_DownCast

class Handle_TCollection_SeqNode(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TCollection_SeqNode self)

        Nullify the handle


        """
        return _TCollection.Handle_TCollection_SeqNode_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TCollection_SeqNode self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TCollection.Handle_TCollection_SeqNode_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TCollection_SeqNode self, TCollection_SeqNode thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TCollection.Handle_TCollection_SeqNode_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TCollection_SeqNode self, Handle_TCollection_SeqNode theHandle) -> Handle_TCollection_SeqNode
        assign(Handle_TCollection_SeqNode self, TCollection_SeqNode thePtr) -> Handle_TCollection_SeqNode
        assign(Handle_TCollection_SeqNode self, Handle_TCollection_SeqNode theHandle) -> Handle_TCollection_SeqNode

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TCollection.Handle_TCollection_SeqNode_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TCollection_SeqNode self) -> TCollection_SeqNode

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TCollection.Handle_TCollection_SeqNode_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TCollection_SeqNode self) -> TCollection_SeqNode

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TCollection.Handle_TCollection_SeqNode___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TCollection_SeqNode self) -> TCollection_SeqNode

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TCollection.Handle_TCollection_SeqNode___ref__(self, *args)


    def __hash__(self):
        return _TCollection.Handle_TCollection_SeqNode___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TCollection.Handle_TCollection_SeqNode___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TCollection.new_Handle_TCollection_SeqNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TCollection.Handle_TCollection_SeqNode_DownCast)
    __swig_destroy__ = _TCollection.delete_Handle_TCollection_SeqNode

    def Next(self, *args):
        """
        Next(Handle_TCollection_SeqNode self) -> TCollection_SeqNodePtr &

        :rtype: OCC.wrapper.TCollection.TCollection_SeqNodePtr

        """
        return _TCollection.Handle_TCollection_SeqNode_Next(self, *args)


    def Previous(self, *args):
        """
        Previous(Handle_TCollection_SeqNode self) -> TCollection_SeqNodePtr &

        :rtype: OCC.wrapper.TCollection.TCollection_SeqNodePtr

        """
        return _TCollection.Handle_TCollection_SeqNode_Previous(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TCollection_SeqNode self) -> char const *

        :rtype: const char *

        """
        return _TCollection.Handle_TCollection_SeqNode_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.Handle_TCollection_SeqNode_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.Handle_TCollection_SeqNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TCollection_SeqNode self)

        Memory deallocator for transient classes


        """
        return _TCollection.Handle_TCollection_SeqNode_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TCollection_SeqNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TCollection_SeqNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_SeqNode_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TCollection_SeqNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TCollection_SeqNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_SeqNode_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TCollection_SeqNode self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TCollection.Handle_TCollection_SeqNode_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TCollection_SeqNode self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_SeqNode_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TCollection_SeqNode self)

        Increments the reference counter of this object


        """
        return _TCollection.Handle_TCollection_SeqNode_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TCollection_SeqNode self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_SeqNode_DecrementRefCounter(self, *args)

Handle_TCollection_SeqNode_swigregister = _TCollection.Handle_TCollection_SeqNode_swigregister
Handle_TCollection_SeqNode_swigregister(Handle_TCollection_SeqNode)

def Handle_TCollection_SeqNode_DownCast(thing):
    return _TCollection.Handle_TCollection_SeqNode_DownCast(thing)
Handle_TCollection_SeqNode_DownCast = _TCollection.Handle_TCollection_SeqNode_DownCast

class TCollection_BasicMap(object):
    """
    Root  class of  all the maps,  provides utilitites
    for managing the buckets.
    Maps are dynamically extended data structures where
    data is quickly accessed with a key.
    General properties of maps
    -   Map items may be (complex) non-unitary data; they
    may be difficult to manage with an array. Moreover, the
    map allows a data structure to be indexed by complex   data.
    -   The size of a map is dynamically extended. So a map
    may be first dimensioned for a little number of items.
    Maps avoid the use of large and quasi-empty arrays.
    -   The access to a map item is much faster than the one
    to a sequence, a list, a queue or a stack item.
    -   The access time to a map item may be compared with
    the one to an array item. First of all, it depends on the
    size of the map. It also depends on the quality of a user
    redefinable function (the hashing function) to find
    quickly where the item is.
    -   The exploration of a map may be of better performance
    than the exploration of an array because the size of the
    map is adapted to the number of inserted items.
    These properties explain why maps are commonly used as
    internal data structures for algorithms.
    Definitions
    -   A map is a data structure for which data is addressed   by keys.
    -   Once inserted in the map, a map item is referenced as   an entry of the map.
    -   Each entry of the map is addressed by a key. Two
    different keys address two different entries of the map.
    -   The position of an entry in the map is called a bucket.
    -   A map is dimensioned by its number of buckets, i.e. the
    maximum number of entries in the map. The
    performance of a map is conditioned by the number of buckets.
    -   The hashing function transforms a key into a bucket
    index. The number of values that can be computed by
    the hashing function is equal to the number of buckets of the map.
    -   Both the hashing function and the equality test
    between two keys are provided by a hasher object.
    -   A map may be explored by a map iterator. This
    exploration provides only inserted entries in the map
    (i.e. non empty buckets).
    Collections' generic maps
    The Collections component provides numerous generic derived maps.
    -   These maps include automatic management of the
    number of buckets: they are automatically resized when
    the number of keys exceeds the number of buckets. If
    you have a fair idea of the number of items in your map,
    you can save on automatic resizing by specifying a
    number of buckets at the time of construction, or by using
    a resizing function. This may be considered for crucial optimization issues.
    -   Keys, items and hashers are parameters of these generic derived maps.
    -   TCollection_MapHasher class describes the
    functions required by any hasher which is to be used
    with a map instantiated from the Collections component.
    -   An iterator class is automatically instantiated at the
    time of instantiation of a map provided by the
    Collections component if this map is to be explored
    with an iterator. Note that some provided generic maps
    are not to be explored with an iterator but with indexes   (indexed maps).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbBuckets(self, *args):
        """
        NbBuckets(TCollection_BasicMap self) -> Standard_Integer

        Returns the number of buckets in <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_BasicMap_NbBuckets(self, *args)


    def Extent(self, *args):
        """
        Extent(TCollection_BasicMap self) -> Standard_Integer

        Returns the number of keys already stored in <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_BasicMap_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(TCollection_BasicMap self) -> Standard_Boolean

        Returns  True when the map  contains no keys.
        This is exactly Extent() == 0.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_BasicMap_IsEmpty(self, *args)


    def Statistics(self, *args):
        """
        Statistics(TCollection_BasicMap self, Standard_OStream & S)

        Prints  on <S> usefull  statistics  about  the map
        <me>.  It  can be used  to test the quality of the hashcoding.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _TCollection.TCollection_BasicMap_Statistics(self, *args)

    __swig_destroy__ = _TCollection.delete_TCollection_BasicMap
TCollection_BasicMap_swigregister = _TCollection.TCollection_BasicMap_swigregister
TCollection_BasicMap_swigregister(TCollection_BasicMap)

class TCollection_(object):
    """
    The package <TCollection> provides the services for the
    transient basic data structures.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def NextPrimeForMap(*args):
        """
        NextPrimeForMap(Standard_Integer const I) -> Standard_Integer

        Returns a  prime number greater than  <I> suitable
        to dimension a Map.  When  <I> becomes great there
        is  a  limit on  the  result (today  the  limit is
        around 1 000 000). This is not a limit of the number of
        items but a limit in the number  of buckets.  i.e.
        there will be more collisions  in  the map.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection__NextPrimeForMap(*args)

    NextPrimeForMap = staticmethod(NextPrimeForMap)

    def __init__(self):
        """
        The package <TCollection> provides the services for the
        transient basic data structures.
        """
        this = _TCollection.new_TCollection_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TCollection.delete_TCollection_
TCollection__swigregister = _TCollection.TCollection__swigregister
TCollection__swigregister(TCollection_)

def TCollection__NextPrimeForMap(*args):
    """
    TCollection__NextPrimeForMap(Standard_Integer const I) -> Standard_Integer

    Returns a  prime number greater than  <I> suitable
    to dimension a Map.  When  <I> becomes great there
    is  a  limit on  the  result (today  the  limit is
    around 1 000 000). This is not a limit of the number of
    items but a limit in the number  of buckets.  i.e.
    there will be more collisions  in  the map.

    :type I: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _TCollection.TCollection__NextPrimeForMap(*args)

class Handle_TCollection_HExtendedString(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TCollection_HExtendedString self)

        Nullify the handle


        """
        return _TCollection.Handle_TCollection_HExtendedString_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TCollection_HExtendedString self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TCollection.Handle_TCollection_HExtendedString_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TCollection_HExtendedString self, TCollection_HExtendedString thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TCollection.Handle_TCollection_HExtendedString_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString theHandle) -> Handle_TCollection_HExtendedString
        assign(Handle_TCollection_HExtendedString self, TCollection_HExtendedString thePtr) -> Handle_TCollection_HExtendedString
        assign(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString theHandle) -> Handle_TCollection_HExtendedString

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TCollection.Handle_TCollection_HExtendedString_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TCollection_HExtendedString self) -> TCollection_HExtendedString

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TCollection.Handle_TCollection_HExtendedString_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TCollection_HExtendedString self) -> TCollection_HExtendedString

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TCollection.Handle_TCollection_HExtendedString___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TCollection_HExtendedString self) -> TCollection_HExtendedString

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TCollection.Handle_TCollection_HExtendedString___ref__(self, *args)


    def __hash__(self):
        return _TCollection.Handle_TCollection_HExtendedString___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TCollection.Handle_TCollection_HExtendedString___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TCollection.new_Handle_TCollection_HExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TCollection.Handle_TCollection_HExtendedString_DownCast)
    __swig_destroy__ = _TCollection.delete_Handle_TCollection_HExtendedString

    def AssignCat(self, *args):
        """
        AssignCat(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString other)

        Appends <other>  to me.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.Handle_TCollection_HExtendedString_AssignCat(self, *args)


    def Cat(self, *args):
        """
        Cat(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString other) -> Handle_TCollection_HExtendedString

        Returns a string appending <other>  to me.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.Handle_TCollection_HExtendedString_Cat(self, *args)


    def ChangeAll(self, *args):
        """
        ChangeAll(Handle_TCollection_HExtendedString self, Standard_ExtCharacter const aChar, Standard_ExtCharacter const NewChar)

        Substitutes all the characters equal to aChar by NewChar
        in the string <me>.

        :type aChar: OCC.wrapper.Standard.Standard_ExtCharacter
        :type NewChar: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.Handle_TCollection_HExtendedString_ChangeAll(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_TCollection_HExtendedString self)

        Removes all characters contained in <me>.
        This produces an empty ExtendedString.


        """
        return _TCollection.Handle_TCollection_HExtendedString_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_TCollection_HExtendedString self) -> Standard_Boolean

        Returns True if the string <me> contains zero character

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HExtendedString_IsEmpty(self, *args)


    def Insert(self, *args):
        """
        Insert(Handle_TCollection_HExtendedString self, Standard_Integer const where, Standard_ExtCharacter const what)
        Insert(Handle_TCollection_HExtendedString self, Standard_Integer const where, Handle_TCollection_HExtendedString what)

        Insert a HExtendedString at position <where>.

        :type where: int
        :type what: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.Handle_TCollection_HExtendedString_Insert(self, *args)


    def IsLess(self, *args):
        """
        IsLess(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString other) -> Standard_Boolean

        Returns TRUE if <me> is less than <other>.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HExtendedString_IsLess(self, *args)


    def IsGreater(self, *args):
        """
        IsGreater(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString other) -> Standard_Boolean

        Returns TRUE if <me> is greater than <other>.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HExtendedString_IsGreater(self, *args)


    def IsAscii(self, *args):
        """
        IsAscii(Handle_TCollection_HExtendedString self) -> Standard_Boolean

        Returns True if the string contains only "Ascii Range"  characters

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HExtendedString_IsAscii(self, *args)


    def Length(self, *args):
        """
        Length(Handle_TCollection_HExtendedString self) -> Standard_Integer

        Returns number of characters in <me>.
        This is the same functionality as 'strlen' in C.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HExtendedString_Length(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_TCollection_HExtendedString self, Standard_Integer const where, Standard_Integer const ahowmany=1)

        Erases <ahowmany> characters from position <where>,
        <where> included.
        Example:
        aString contains "Hello"
        aString.Erase(2,2) erases 2 characters from position 1
        This gives "Hlo".

        :type where: int
        :type ahowmany: int

        """
        return _TCollection.Handle_TCollection_HExtendedString_Remove(self, *args)


    def RemoveAll(self, *args):
        """
        RemoveAll(Handle_TCollection_HExtendedString self, Standard_ExtCharacter const what)

        Removes every <what> characters from <me>.

        :type what: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.Handle_TCollection_HExtendedString_RemoveAll(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_TCollection_HExtendedString self, Standard_Integer const where, Standard_ExtCharacter const what)
        SetValue(Handle_TCollection_HExtendedString self, Standard_Integer const where, Handle_TCollection_HExtendedString what)

        Replaces a part of <me> by another string.

        :type where: int
        :type what: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.Handle_TCollection_HExtendedString_SetValue(self, *args)


    def Split(self, *args):
        """
        Split(Handle_TCollection_HExtendedString self, Standard_Integer const where) -> Handle_TCollection_HExtendedString

        Splits a ExtendedString into two sub-strings.
        Example:
        aString contains "abcdefg"
        aString.Split(3) gives <me> = "abc" and returns "defg"

        :type where: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.Handle_TCollection_HExtendedString_Split(self, *args)


    def Search(self, *args):
        """
        Search(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString what) -> Standard_Integer

        Searches a String in <me> from the beginning
        and returns position of first item <what> matching.
        It returns -1 if not found.

        :type what: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HExtendedString_Search(self, *args)


    def SearchFromEnd(self, *args):
        """
        SearchFromEnd(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString what) -> Standard_Integer

        Searches a ExtendedString in another ExtendedString from the end
        and returns position of first item <what> matching.
        It returns -1 if not found.

        :type what: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HExtendedString_SearchFromEnd(self, *args)


    def ToExtString(self, *args):
        """
        ToExtString(Handle_TCollection_HExtendedString self) -> Standard_ExtString

        Returns pointer to ExtString

        :rtype: OCC.wrapper.Standard.Standard_ExtString

        """
        return _TCollection.Handle_TCollection_HExtendedString_ToExtString(self, *args)


    def Token(self, *args):
        """
        Token(Handle_TCollection_HExtendedString self, Standard_ExtString const separators, Standard_Integer const whichone=1) -> Handle_TCollection_HExtendedString

        Extracts <whichone> token from <me>.
        By default, the <separators> is set to space and tabulation.
        By default, the token extracted is the first one (whichone = 1).
        <separators> contains all separators you need.
        If no token indexed by <whichone> is found, it returns an empty String.
        Example:
        aString contains "This is a     message"
        aString.Token()  returns "This"
        aString.Token(" ",4) returns "message"
        aString.Token(" ",2) returns "is"
        aString.Token(" ",9) returns ""
        Other separators than space character and tabulation are allowed
        aString contains "1234; test:message   , value"
        aString.Token("; :,",4) returns "value"
        aString.Token("; :,",2) returns "test"

        :type separators: OCC.wrapper.Standard.Standard_ExtString
        :type whichone: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _TCollection.Handle_TCollection_HExtendedString_Token(self, *args)


    def Trunc(self, *args):
        """
        Trunc(Handle_TCollection_HExtendedString self, Standard_Integer const ahowmany)

        Truncates <me> to <ahowmany> characters.
        Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel"

        :type ahowmany: int

        """
        return _TCollection.Handle_TCollection_HExtendedString_Trunc(self, *args)


    def Value(self, *args):
        """
        Value(Handle_TCollection_HExtendedString self, Standard_Integer const where) -> Standard_ExtCharacter

        Returns ExtCharacter at position <where> in <me>.
        If <where> is less than zero or greater than the length of
        <me>, an exception is raised.
        Example:
        aString contains "Hello"
        aString.Value(2) returns 'e'

        :type where: int
        :rtype: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _TCollection.Handle_TCollection_HExtendedString_Value(self, *args)


    def String(self, *args):
        """
        Returns the field myString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _TCollection.Handle_TCollection_HExtendedString_String(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_TCollection_HExtendedString self, Standard_OStream & astream)

        Displays <me> .

        :type astream: OCC.wrapper.Standard.Standard_OStream

        """
        return _TCollection.Handle_TCollection_HExtendedString_Print(self, *args)


    def IsSameState(self, *args):
        """
        IsSameState(Handle_TCollection_HExtendedString self, Handle_TCollection_HExtendedString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HExtendedString_IsSameState(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TCollection_HExtendedString self) -> char const *

        :rtype: const char *

        """
        return _TCollection.Handle_TCollection_HExtendedString_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.Handle_TCollection_HExtendedString_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.Handle_TCollection_HExtendedString_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TCollection_HExtendedString self)

        Memory deallocator for transient classes


        """
        return _TCollection.Handle_TCollection_HExtendedString_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TCollection_HExtendedString self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TCollection_HExtendedString self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HExtendedString_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TCollection_HExtendedString self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TCollection_HExtendedString self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HExtendedString_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TCollection_HExtendedString self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TCollection.Handle_TCollection_HExtendedString_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TCollection_HExtendedString self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HExtendedString_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TCollection_HExtendedString self)

        Increments the reference counter of this object


        """
        return _TCollection.Handle_TCollection_HExtendedString_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TCollection_HExtendedString self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HExtendedString_DecrementRefCounter(self, *args)

Handle_TCollection_HExtendedString_swigregister = _TCollection.Handle_TCollection_HExtendedString_swigregister
Handle_TCollection_HExtendedString_swigregister(Handle_TCollection_HExtendedString)

def Handle_TCollection_HExtendedString_DownCast(thing):
    return _TCollection.Handle_TCollection_HExtendedString_DownCast(thing)
Handle_TCollection_HExtendedString_DownCast = _TCollection.Handle_TCollection_HExtendedString_DownCast

class Handle_TCollection_HAsciiString(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TCollection_HAsciiString self)

        Nullify the handle


        """
        return _TCollection.Handle_TCollection_HAsciiString_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TCollection_HAsciiString self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TCollection_HAsciiString self, TCollection_HAsciiString thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TCollection.Handle_TCollection_HAsciiString_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString theHandle) -> Handle_TCollection_HAsciiString
        assign(Handle_TCollection_HAsciiString self, TCollection_HAsciiString thePtr) -> Handle_TCollection_HAsciiString
        assign(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString theHandle) -> Handle_TCollection_HAsciiString

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TCollection.Handle_TCollection_HAsciiString_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TCollection_HAsciiString self) -> TCollection_HAsciiString

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TCollection.Handle_TCollection_HAsciiString_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TCollection_HAsciiString self) -> TCollection_HAsciiString

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TCollection.Handle_TCollection_HAsciiString___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TCollection_HAsciiString self) -> TCollection_HAsciiString

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TCollection.Handle_TCollection_HAsciiString___ref__(self, *args)


    def __hash__(self):
        return _TCollection.Handle_TCollection_HAsciiString___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TCollection.Handle_TCollection_HAsciiString___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TCollection.new_Handle_TCollection_HAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TCollection.Handle_TCollection_HAsciiString_DownCast)
    __swig_destroy__ = _TCollection.delete_Handle_TCollection_HAsciiString

    def AssignCat(self, *args):
        """
        AssignCat(Handle_TCollection_HAsciiString self, Standard_CString const other)
        AssignCat(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString other)

        Appends <other>  to me.
        Example:  aString = aString + anotherString

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_AssignCat(self, *args)


    def Capitalize(self, *args):
        """
        Capitalize(Handle_TCollection_HAsciiString self)

        Converts the first character into its corresponding
        upper-case character and the other characters into lowercase.
        Example:
        before
        me = "hellO "
        after
        me = "Hello "


        """
        return _TCollection.Handle_TCollection_HAsciiString_Capitalize(self, *args)


    def Cat(self, *args):
        """
        Cat(Handle_TCollection_HAsciiString self, Standard_CString const other) -> Handle_TCollection_HAsciiString
        Cat(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString other) -> Handle_TCollection_HAsciiString

        Creates a new string by concatenation of this
        ASCII string and the other ASCII string.
        Example:  aString = aString + anotherString

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_Cat(self, *args)


    def Center(self, *args):
        """
        Center(Handle_TCollection_HAsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        Modifies this ASCII string so that its length
        becomes equal to Width and the new characters
        are equal to Filler. New characters are added
        both at the beginning and at the end of this string.
        If Width is less than the length of this ASCII string, nothing happens.
        Example
        Handle(TCollection_HAsciiString)
        myAlphabet
        = new
        TCollection_HAsciiString
        ("abcdef");
        myAlphabet->Center(9,' ');
        assert ( !strcmp(
        myAlphabet->ToCString(),
        " abcdef ") );

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.Handle_TCollection_HAsciiString_Center(self, *args)


    def ChangeAll(self, *args):
        """
        ChangeAll(Handle_TCollection_HAsciiString self, Standard_Character const aChar, Standard_Character const NewChar, Standard_Boolean const CaseSensitive)

        Replaces all characters equal to aChar by
        NewChar in this ASCII string. The substitution is
        case sensitive if CaseSensitive is true (default value).
        If you do not use the default case sensitive
        option, it does not matter whether aChar is upper-case or not.
        Example
        Handle(TCollection_HAsciiString)
        myMistake = new
        TCollection_HAsciiString
        ("Hather");
        myMistake->ChangeAll('H','F');
        assert ( !strcmp(
        myMistake->ToCString(),
        "Father") );

        :type aChar: OCC.wrapper.Standard.Standard_Character
        :type NewChar: OCC.wrapper.Standard.Standard_Character
        :type CaseSensitive: bool

        """
        return _TCollection.Handle_TCollection_HAsciiString_ChangeAll(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_TCollection_HAsciiString self)

        Removes all characters contained in <me>.
        This produces an empty HAsciiString.


        """
        return _TCollection.Handle_TCollection_HAsciiString_Clear(self, *args)


    def FirstLocationInSet(self, *args):
        """
        FirstLocationInSet(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString Set, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the first character of <me> that is
        present in <Set>.
        The search begins to the index FromIndex and ends to the
        the index ToIndex.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range
        Example:
        before
        me = "aabAcAa", S = "Aa", FromIndex = 1, Toindex = 7
        after
        me = "aabAcAa"
        returns
        1

        :type Set: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_FirstLocationInSet(self, *args)


    def FirstLocationNotInSet(self, *args):
        """
        FirstLocationNotInSet(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString Set, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the first character of <me>
        that is not present in the set <Set>.
        The search begins to the index FromIndex and ends to the
        the index ToIndex in <me>.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range.
        Example:
        before
        me = "aabAcAa", S = "Aa", FromIndex = 1, Toindex = 7
        after
        me = "aabAcAa"
        returns
        3

        :type Set: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_FirstLocationNotInSet(self, *args)


    def Insert(self, *args):
        """
        Insert(Handle_TCollection_HAsciiString self, Standard_Integer const where, Standard_Character const what)
        Insert(Handle_TCollection_HAsciiString self, Standard_Integer const where, Standard_CString const what)
        Insert(Handle_TCollection_HAsciiString self, Standard_Integer const where, Handle_TCollection_HAsciiString what)

        Insert a HAsciiString at position <where>.

        :type where: int
        :type what: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_Insert(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(Handle_TCollection_HAsciiString self, Standard_Integer const Index, Handle_TCollection_HAsciiString other)

        Inserts the other ASCII string a after a specific index in the string <me>
        Example:
        before
        me = "cde" , Index = 0 , other = "ab"
        after
        me = "abcde" , other = "ab"

        :type Index: int
        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_InsertAfter(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(Handle_TCollection_HAsciiString self, Standard_Integer const Index, Handle_TCollection_HAsciiString other)

        Inserts the other ASCII string a before a specific index in the string <me>
        Raises an exception if Index is out of bounds
        Example:
        before
        me = "cde" , Index = 1 , other = "ab"
        after
        me = "abcde" , other = "ab"

        :type Index: int
        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_InsertBefore(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_TCollection_HAsciiString self) -> Standard_Boolean

        Returns True if the string <me> contains zero character

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsEmpty(self, *args)


    def IsLess(self, *args):
        """
        IsLess(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString other) -> Standard_Boolean

        Returns TRUE if <me> is 'ASCII' less than <other>.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsLess(self, *args)


    def IsGreater(self, *args):
        """
        IsGreater(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString other) -> Standard_Boolean

        Returns TRUE if <me> is 'ASCII' greater than <other>.

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsGreater(self, *args)


    def IntegerValue(self, *args):
        """
        IntegerValue(Handle_TCollection_HAsciiString self) -> Standard_Integer

        Converts a HAsciiString containing a numeric expression to
        an Integer.
        Example: "215" returns 215.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_IntegerValue(self, *args)


    def IsIntegerValue(self, *args):
        """
        IsIntegerValue(Handle_TCollection_HAsciiString self) -> Standard_Boolean

        Returns True if the string contains an integer value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsIntegerValue(self, *args)


    def IsRealValue(self, *args):
        """
        IsRealValue(Handle_TCollection_HAsciiString self) -> Standard_Boolean

        Returns True if the string contains a real value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsRealValue(self, *args)


    def IsAscii(self, *args):
        """
        IsAscii(Handle_TCollection_HAsciiString self) -> Standard_Boolean

        Returns True if the string contains only ASCII characters
        between ' ' and '~'.
        This means no control character and no extended ASCII code.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsAscii(self, *args)


    def IsDifferent(self, *args):
        """
        IsDifferent(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString S) -> Standard_Boolean

        Returns True if the string S not contains same characters than
        the string <me>.

        :type S: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsDifferent(self, *args)


    def IsSameString(self, *args):
        """
        IsSameString(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString S) -> Standard_Boolean
        IsSameString(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString S, Standard_Boolean const CaseSensitive) -> Standard_Boolean

        Returns True if the string S contains same characters than the
        string <me>.

        :type S: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type CaseSensitive: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsSameString(self, *args)


    def LeftAdjust(self, *args):
        """
        LeftAdjust(Handle_TCollection_HAsciiString self)

        Removes all space characters in the begining of the string


        """
        return _TCollection.Handle_TCollection_HAsciiString_LeftAdjust(self, *args)


    def LeftJustify(self, *args):
        """
        LeftJustify(Handle_TCollection_HAsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        Left justify.
        Length becomes equal to Width and the new characters are
        equal to Filler
        if Width < Length nothing happens
        Raises an exception if Width is less than zero
        Example:
        before
        me = "abcdef" , Width = 9 , Filler = ' '
        after
        me = "abcdef   "

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.Handle_TCollection_HAsciiString_LeftJustify(self, *args)


    def Length(self, *args):
        """
        Length(Handle_TCollection_HAsciiString self) -> Standard_Integer

        Returns number of characters in <me>.
        This is the same functionality as 'strlen' in C.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_Length(self, *args)


    def Location(self, *args):
        """
        Location(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString other, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer
        Location(Handle_TCollection_HAsciiString self, Standard_Integer const N, Standard_Character const C, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the nth occurence of the character C
        in the string <me> from the starting index FromIndex to the
        ending index ToIndex.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range
        Example:
        before
        me = "aabAa", N = 3, C = 'a', FromIndex = 1, ToIndex = 5
        after
        me = "aabAa"
        returns 5

        :type N: int
        :type C: OCC.wrapper.Standard.Standard_Character
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_Location(self, *args)


    def LowerCase(self, *args):
        """
        LowerCase(Handle_TCollection_HAsciiString self)

        Converts <me> to its lower-case equivalent.


        """
        return _TCollection.Handle_TCollection_HAsciiString_LowerCase(self, *args)


    def Prepend(self, *args):
        """
        Prepend(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString other)

        Inserts the other string at the begining of the string <me>
        Example:
        before
        me = "cde" , S = "ab"
        after
        me = "abcde" , S = "ab"

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_Prepend(self, *args)


    def Print(self, *args):
        """
        Print(Handle_TCollection_HAsciiString self, Standard_OStream & astream)

        Prints this string on the stream <astream>.

        :type astream: OCC.wrapper.Standard.Standard_OStream

        """
        return _TCollection.Handle_TCollection_HAsciiString_Print(self, *args)


    def RealValue(self, *args):
        """
        RealValue(Handle_TCollection_HAsciiString self) -> Standard_Real

        Converts a string containing a numeric expression to a Real.
        Example:
        "215" returns 215.0.
        "3.14159267" returns 3.14159267.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TCollection.Handle_TCollection_HAsciiString_RealValue(self, *args)


    def RemoveAll(self, *args):
        """
        RemoveAll(Handle_TCollection_HAsciiString self, Standard_Character const C, Standard_Boolean const CaseSensitive)
        RemoveAll(Handle_TCollection_HAsciiString self, Standard_Character const what)

        Removes every <what> characters from <me>

        :type what: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.Handle_TCollection_HAsciiString_RemoveAll(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_TCollection_HAsciiString self, Standard_Integer const where, Standard_Integer const ahowmany=1)

        Erases <ahowmany> characters from position <where>,
        <where> included.
        Example:
        aString contains "Hello"
        aString.Erase(2,2) erases 2 characters from position 1
        This gives "Hlo".

        :type where: int
        :type ahowmany: int

        """
        return _TCollection.Handle_TCollection_HAsciiString_Remove(self, *args)


    def RightAdjust(self, *args):
        """
        RightAdjust(Handle_TCollection_HAsciiString self)

        Removes all space characters at the end of the string.


        """
        return _TCollection.Handle_TCollection_HAsciiString_RightAdjust(self, *args)


    def RightJustify(self, *args):
        """
        RightJustify(Handle_TCollection_HAsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        Right justify.
        Length becomes equal to Width and the new characters are
        equal to Filler
        if Width < Length nothing happens
        Raises an exception if Width is less than zero
        Example:
        before
        me = "abcdef" , Width = 9 , Filler = ' '
        after
        me = "   abcdef"

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.Handle_TCollection_HAsciiString_RightJustify(self, *args)


    def Search(self, *args):
        """
        Search(Handle_TCollection_HAsciiString self, Standard_CString const what) -> Standard_Integer
        Search(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString what) -> Standard_Integer

        Searches a String in <me> from the beginning
        and returns position of first item <what> matching.
        it returns -1 if not found.

        :type what: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_Search(self, *args)


    def SearchFromEnd(self, *args):
        """
        SearchFromEnd(Handle_TCollection_HAsciiString self, Standard_CString const what) -> Standard_Integer
        SearchFromEnd(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString what) -> Standard_Integer

        Searches a HAsciiString in another HAsciiString from the end
        and returns position of first item <what> matching.
        It returns -1 if not found.

        :type what: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_SearchFromEnd(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_TCollection_HAsciiString self, Standard_Integer const where, Standard_Character const what)
        SetValue(Handle_TCollection_HAsciiString self, Standard_Integer const where, Standard_CString const what)
        SetValue(Handle_TCollection_HAsciiString self, Standard_Integer const where, Handle_TCollection_HAsciiString what)

        Replaces a part of <me> by another string.

        :type where: int
        :type what: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_SetValue(self, *args)


    def Split(self, *args):
        """
        Split(Handle_TCollection_HAsciiString self, Standard_Integer const where) -> Handle_TCollection_HAsciiString

        Splits a HAsciiString into two sub-strings.
        Example:
        aString contains "abcdefg"
        aString.Split(3) gives <me> = "abc" and returns "defg"

        :type where: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_Split(self, *args)


    def SubString(self, *args):
        """
        SubString(Handle_TCollection_HAsciiString self, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Handle_TCollection_HAsciiString

        Creation of a sub-string of the string <me>.
        The sub-string starts to the index Fromindex and ends
        to the index ToIndex.
        Raises an exception if ToIndex or FromIndex is out of
        bounds
        Example:
        before
        me = "abcdefg", ToIndex=3, FromIndex=6
        after
        me = "abcdefg"
        returns
        "cdef"

        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_SubString(self, *args)


    def ToCString(self, *args):
        """
        ToCString(Handle_TCollection_HAsciiString self) -> Standard_CString

        Returns pointer to string (char *)
        This is useful for some casual manipulations
        Because this "char *" is 'const', you can't modify its contents.

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TCollection.Handle_TCollection_HAsciiString_ToCString(self, *args)


    def Token(self, *args):
        """
        Token(Handle_TCollection_HAsciiString self, Standard_CString const separators, Standard_Integer const whichone=1) -> Handle_TCollection_HAsciiString

        Extracts <whichone> token from <me>.
        By default, the <separators> is set to space and tabulation.
        By default, the token extracted is the first one (whichone = 1).
        <separators> contains all separators you need.
        If no token indexed by <whichone> is found, it returns an empty String.
        Example:
        aString contains "This is a     message"
        aString.Token()  returns "This"
        aString.Token(" ",4) returns "message"
        aString.Token(" ",2) returns "is"
        aString.Token(" ",9) returns ""
        Other separators than space character and tabulation are allowed
        aString contains "1234; test:message   , value"
        aString.Token("; :,",4) returns "value"
        aString.Token("; :,",2) returns "test"

        :type separators: OCC.wrapper.Standard.Standard_CString
        :type whichone: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TCollection.Handle_TCollection_HAsciiString_Token(self, *args)


    def Trunc(self, *args):
        """
        Trunc(Handle_TCollection_HAsciiString self, Standard_Integer const ahowmany)

        Truncates <me> to <ahowmany> characters.
        Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel"

        :type ahowmany: int

        """
        return _TCollection.Handle_TCollection_HAsciiString_Trunc(self, *args)


    def UpperCase(self, *args):
        """
        UpperCase(Handle_TCollection_HAsciiString self)

        Converts <me> to its upper-case equivalent.


        """
        return _TCollection.Handle_TCollection_HAsciiString_UpperCase(self, *args)


    def UsefullLength(self, *args):
        """
        UsefullLength(Handle_TCollection_HAsciiString self) -> Standard_Integer

        Length of the string ignoring all spaces (' ') and the
        control character at the end.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_UsefullLength(self, *args)


    def Value(self, *args):
        """
        Value(Handle_TCollection_HAsciiString self, Standard_Integer const where) -> Standard_Character

        Returns character at position <where> in <me>.
        If <where> is less than zero or greater than the lenght of
        <me>, an exception is raised.
        Example:
        aString contains "Hello"
        aString.Value(2) returns 'e'

        :type where: int
        :rtype: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.Handle_TCollection_HAsciiString_Value(self, *args)


    def String(self, *args):
        """
        Returns the field myString.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _TCollection.Handle_TCollection_HAsciiString_String(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsSameState(self, *args):
        """
        IsSameState(Handle_TCollection_HAsciiString self, Handle_TCollection_HAsciiString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsSameState(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TCollection_HAsciiString self) -> char const *

        :rtype: const char *

        """
        return _TCollection.Handle_TCollection_HAsciiString_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.Handle_TCollection_HAsciiString_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TCollection.Handle_TCollection_HAsciiString_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TCollection_HAsciiString self)

        Memory deallocator for transient classes


        """
        return _TCollection.Handle_TCollection_HAsciiString_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TCollection_HAsciiString self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TCollection_HAsciiString self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TCollection_HAsciiString self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TCollection_HAsciiString self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.Handle_TCollection_HAsciiString_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TCollection_HAsciiString self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TCollection.Handle_TCollection_HAsciiString_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TCollection_HAsciiString self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TCollection_HAsciiString self)

        Increments the reference counter of this object


        """
        return _TCollection.Handle_TCollection_HAsciiString_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TCollection_HAsciiString self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.Handle_TCollection_HAsciiString_DecrementRefCounter(self, *args)

Handle_TCollection_HAsciiString_swigregister = _TCollection.Handle_TCollection_HAsciiString_swigregister
Handle_TCollection_HAsciiString_swigregister(Handle_TCollection_HAsciiString)

def Handle_TCollection_HAsciiString_DownCast(thing):
    return _TCollection.Handle_TCollection_HAsciiString_DownCast(thing)
Handle_TCollection_HAsciiString_DownCast = _TCollection.Handle_TCollection_HAsciiString_DownCast

class TCollection_AsciiString(object):
    """
    Class defines a variable-length sequence of 8-bit characters.
    Despite class name (kept for historical reasons), it is intended to store UTF-8 string, not just ASCII characters.
    However, multi-byte nature of UTF-8 is not considered by the following methods:
    - Method ::Length() return the number of bytes, not the number of Unicode symbols.
    - Methods taking/returning symbol index work with 8-bit code units, not true Unicode symbols,
    including ::Remove(), ::SetValue(), ::Value(), ::Search(), ::Trunc() and others.
    If application needs to process multi-byte Unicode symbols explicitly, NCollection_Utf8Iter class can be used
    for iterating through Unicode string (UTF-32 code unit will be returned for each position).

    Class provides editing operations with built-in memory management to make AsciiString objects easier to use than ordinary character arrays.
    AsciiString objects follow value semantics; in other words, they are the actual strings,
    not handles to strings, and are copied through assignment.
    You may use HAsciiString objects to get handles to strings.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TCollection_AsciiString self) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, Standard_CString const message) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, Standard_CString const message, Standard_Integer const aLen) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, Standard_Character const aChar) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, Standard_Integer const length, Standard_Character const filler) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, Standard_Integer const value) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, Standard_Real const value) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, TCollection_AsciiString astring) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, TCollection_AsciiString theOther) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, TCollection_AsciiString astring, Standard_Character const message) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, TCollection_AsciiString astring, Standard_CString const message) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, TCollection_AsciiString astring, TCollection_AsciiString message) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, TCollection_ExtendedString astring, Standard_Character const replaceNonAscii=0) -> TCollection_AsciiString
        __init__(TCollection_AsciiString self, Standard_WideChar const * theStringUtf) -> TCollection_AsciiString

        Initialize UTF-8 Unicode string from wide-char string considering it as Unicode string
        (the size of wide char is a platform-dependent - e.g. on Windows wchar_t is UTF-16).

        This constructor is unavailable if application is built with deprecated msvc option "-Zc:wchar_t-",
        since OCCT itself is never built with this option.

        :type theStringUtf: OCC.wrapper.Standard.Standard_WideChar

        """
        this = _TCollection.new_TCollection_AsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignCat(self, *args):
        """
        AssignCat(TCollection_AsciiString self, Standard_Character const other)
        AssignCat(TCollection_AsciiString self, Standard_Integer const other)
        AssignCat(TCollection_AsciiString self, Standard_Real const other)
        AssignCat(TCollection_AsciiString self, Standard_CString const other)
        AssignCat(TCollection_AsciiString self, TCollection_AsciiString other)

        Appends <other> to me. This is an unary operator.
        Example: aString += anotherString

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_AssignCat(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(TCollection_AsciiString self, Standard_Character const other)
        __iadd__(TCollection_AsciiString self, Standard_Integer const other)
        __iadd__(TCollection_AsciiString self, Standard_Real const other)
        __iadd__(TCollection_AsciiString self, Standard_CString const other)
        __iadd__(TCollection_AsciiString self, TCollection_AsciiString other)

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString___iadd__(self, *args)


    def Capitalize(self, *args):
        """
        Capitalize(TCollection_AsciiString self)

        Converts the first character into its corresponding
        upper-case character and the other characters into lowercase
        Example: before
        me = "hellO "
        after
        me = "Hello "


        """
        return _TCollection.TCollection_AsciiString_Capitalize(self, *args)


    def Cat(self, *args):
        """
        Cat(TCollection_AsciiString self, Standard_Character const other) -> TCollection_AsciiString
        Cat(TCollection_AsciiString self, Standard_Integer const other) -> TCollection_AsciiString
        Cat(TCollection_AsciiString self, Standard_Real const other) -> TCollection_AsciiString
        Cat(TCollection_AsciiString self, Standard_CString const other) -> TCollection_AsciiString
        Cat(TCollection_AsciiString self, TCollection_AsciiString other) -> TCollection_AsciiString

        Appends <other> to me.
        Example: aString = aString + anotherString

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Cat(self, *args)


    def __add__(self, *args):
        """
        __add__(TCollection_AsciiString self, Standard_Character const other) -> TCollection_AsciiString
        __add__(TCollection_AsciiString self, Standard_Integer const other) -> TCollection_AsciiString
        __add__(TCollection_AsciiString self, Standard_Real const other) -> TCollection_AsciiString
        __add__(TCollection_AsciiString self, Standard_CString const other) -> TCollection_AsciiString
        __add__(TCollection_AsciiString self, TCollection_AsciiString other) -> TCollection_AsciiString

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString___add__(self, *args)


    def Center(self, *args):
        """
        Center(TCollection_AsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        Modifies this ASCII string so that its length
        becomes equal to Width and the new characters
        are equal to Filler. New characters are added
        both at the beginning and at the end of this string.
        If Width is less than the length of this ASCII string, nothing happens.
        Example
        TCollection_AsciiString
        myAlphabet("abcdef");
        myAlphabet.Center(9,' ');
        assert ( myAlphabet == "
        abcdef " );

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_AsciiString_Center(self, *args)


    def ChangeAll(self, *args):
        """
        ChangeAll(TCollection_AsciiString self, Standard_Character const aChar, Standard_Character const NewChar, Standard_Boolean const CaseSensitive)

        Substitutes all the characters equal to aChar by NewChar
        in the AsciiString <me>.
        The substitution can be case sensitive.
        If you don't use default case sensitive, no matter wether aChar
        is uppercase or not.
        Example: me = "Histake" -> ChangeAll('H','M',Standard_True)
        gives me = "Mistake"

        :type aChar: OCC.wrapper.Standard.Standard_Character
        :type NewChar: OCC.wrapper.Standard.Standard_Character
        :type CaseSensitive: bool

        """
        return _TCollection.TCollection_AsciiString_ChangeAll(self, *args)


    def Clear(self, *args):
        """
        Clear(TCollection_AsciiString self)

        Removes all characters contained in <me>.
        This produces an empty AsciiString.


        """
        return _TCollection.TCollection_AsciiString_Clear(self, *args)


    def Copy(self, *args):
        """
        Copy(TCollection_AsciiString self, Standard_CString const fromwhere)
        Copy(TCollection_AsciiString self, TCollection_AsciiString fromwhere)

        Copy <fromwhere> to <me>.
        Used as operator =
        Example: aString = anotherString;

        :type fromwhere: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Copy(self, *args)


    def Swap(self, *args):
        """
        Swap(TCollection_AsciiString self, TCollection_AsciiString theOther)

        Exchange the data of two strings (without reallocating memory).

        :type theOther: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Swap(self, *args)


    def assign(self, *args):
        """
        assign(TCollection_AsciiString self, Standard_CString const fromwhere)
        assign(TCollection_AsciiString self, TCollection_AsciiString fromwhere)
        assign(TCollection_AsciiString self, TCollection_AsciiString theOther) -> TCollection_AsciiString

        Move assignment operator

        :type theOther: OCC.wrapper.TCollection.TCollection_AsciiString &&
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_assign(self, *args)


    def FirstLocationInSet(self, *args):
        """
        FirstLocationInSet(TCollection_AsciiString self, TCollection_AsciiString Set, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the first character of <me> that is
        present in <Set>.
        The search begins to the index FromIndex and ends to the
        the index ToIndex.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range.
        Example: before
        me = "aabAcAa", S = "Aa", FromIndex = 1, Toindex = 7
        after
        me = "aabAcAa"
        returns
        1

        :type Set: OCC.wrapper.TCollection.TCollection_AsciiString
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_FirstLocationInSet(self, *args)


    def FirstLocationNotInSet(self, *args):
        """
        FirstLocationNotInSet(TCollection_AsciiString self, TCollection_AsciiString Set, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the first character of <me>
        that is not present in the set <Set>.
        The search begins to the index FromIndex and ends to the
        the index ToIndex in <me>.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range.
        Example: before
        me = "aabAcAa", S = "Aa", FromIndex = 1, Toindex = 7
        after
        me = "aabAcAa"
        returns
        3

        :type Set: OCC.wrapper.TCollection.TCollection_AsciiString
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_FirstLocationNotInSet(self, *args)


    def Insert(self, *args):
        """
        Insert(TCollection_AsciiString self, Standard_Integer const where, Standard_Character const what)
        Insert(TCollection_AsciiString self, Standard_Integer const where, Standard_CString const what)
        Insert(TCollection_AsciiString self, Standard_Integer const where, TCollection_AsciiString what)

        Inserts a AsciiString at position <where>.

        :type where: int
        :type what: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Insert(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(TCollection_AsciiString self, Standard_Integer const Index, TCollection_AsciiString other)

        Pushing a string after a specific index in the string <me>.
        Raises an exception if Index is out of bounds.
        -   less than 0 (InsertAfter), or less than 1 (InsertBefore), or
        -   greater than the number of characters in this ASCII string.
        Example:
        before
        me = "cde" , Index = 0 , other = "ab"
        after
        me = "abcde" , other = "ab"

        :type Index: int
        :type other: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_InsertAfter(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(TCollection_AsciiString self, Standard_Integer const Index, TCollection_AsciiString other)

        Pushing a string before a specific index in the string <me>.
        Raises an exception if Index is out of bounds.
        -   less than 0 (InsertAfter), or less than 1 (InsertBefore), or
        -   greater than the number of characters in this ASCII string.
        Example:
        before
        me = "cde" , Index = 1 , other = "ab"
        after
        me = "abcde" , other = "ab"

        :type Index: int
        :type other: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_InsertBefore(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(TCollection_AsciiString self) -> Standard_Boolean

        Returns True if the string <me> contains zero character.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsEmpty(self, *args)


    def __eq__(self, *args):
        """
        __eq__(TCollection_AsciiString self, Standard_CString const other) -> Standard_Boolean
        __eq__(TCollection_AsciiString self, TCollection_AsciiString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString___eq__(self, *args)


    def IsDifferent(self, *args):
        """
        IsDifferent(TCollection_AsciiString self, Standard_CString const other) -> Standard_Boolean
        IsDifferent(TCollection_AsciiString self, TCollection_AsciiString other) -> Standard_Boolean

        Returns true if there are differences between the
        characters in this ASCII string and ASCII string other.
        Note that this method is an alias of operator !=

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsDifferent(self, *args)


    def __ne__(self, *args):
        """
        __ne__(TCollection_AsciiString self, Standard_CString const other) -> Standard_Boolean
        __ne__(TCollection_AsciiString self, TCollection_AsciiString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString___ne__(self, *args)


    def IsLess(self, *args):
        """
        IsLess(TCollection_AsciiString self, Standard_CString const other) -> Standard_Boolean
        IsLess(TCollection_AsciiString self, TCollection_AsciiString other) -> Standard_Boolean

        Returns TRUE if <me> is 'ASCII' less than <other>.

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsLess(self, *args)


    def __lt__(self, *args):
        """
        __lt__(TCollection_AsciiString self, Standard_CString const other) -> Standard_Boolean
        __lt__(TCollection_AsciiString self, TCollection_AsciiString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString___lt__(self, *args)


    def IsGreater(self, *args):
        """
        IsGreater(TCollection_AsciiString self, Standard_CString const other) -> Standard_Boolean
        IsGreater(TCollection_AsciiString self, TCollection_AsciiString other) -> Standard_Boolean

        Returns TRUE if <me> is 'ASCII' greater than <other>.

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsGreater(self, *args)


    def __gt__(self, *args):
        """
        __gt__(TCollection_AsciiString self, Standard_CString const other) -> Standard_Boolean
        __gt__(TCollection_AsciiString self, TCollection_AsciiString other) -> Standard_Boolean

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString___gt__(self, *args)


    def StartsWith(self, *args):
        """
        StartsWith(TCollection_AsciiString self, TCollection_AsciiString theStartString) -> Standard_Boolean

        Determines whether the beginning of this string instance matches the specified string.

        :type theStartString: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_StartsWith(self, *args)


    def EndsWith(self, *args):
        """
        EndsWith(TCollection_AsciiString self, TCollection_AsciiString theEndString) -> Standard_Boolean

        Determines whether the end of this string instance matches the specified string.

        :type theEndString: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_EndsWith(self, *args)


    def IntegerValue(self, *args):
        """
        IntegerValue(TCollection_AsciiString self) -> Standard_Integer

        Converts a AsciiString containing a numeric expression to
        an Integer.
        Example: "215" returns 215.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_IntegerValue(self, *args)


    def IsIntegerValue(self, *args):
        """
        IsIntegerValue(TCollection_AsciiString self) -> Standard_Boolean

        Returns True if the AsciiString contains an integer value.
        Note: an integer value is considered to be a real value as well.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsIntegerValue(self, *args)


    def IsRealValue(self, *args):
        """
        IsRealValue(TCollection_AsciiString self) -> Standard_Boolean

        Returns True if the AsciiString contains a real value.
        Note: an integer value is considered to be a real value as well.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsRealValue(self, *args)


    def IsAscii(self, *args):
        """
        IsAscii(TCollection_AsciiString self) -> Standard_Boolean

        Returns True if the AsciiString contains only ASCII characters
        between ' ' and '~'.
        This means no control character and no extended ASCII code.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsAscii(self, *args)


    def LeftAdjust(self, *args):
        """
        LeftAdjust(TCollection_AsciiString self)

        Removes all space characters in the begining of the string.


        """
        return _TCollection.TCollection_AsciiString_LeftAdjust(self, *args)


    def LeftJustify(self, *args):
        """
        LeftJustify(TCollection_AsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        left justify
        Length becomes equal to Width and the new characters are
        equal to Filler.
        If Width < Length nothing happens.
        Raises an exception if Width is less than zero.
        Example:
        before
        me = "abcdef" , Width = 9 , Filler = ' '
        after
        me = "abcdef   "

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_AsciiString_LeftJustify(self, *args)


    def Length(self, *args):
        """
        Length(TCollection_AsciiString self) -> Standard_Integer

        Returns number of characters in <me>.
        This is the same functionality as 'strlen' in C.
        Example
        TCollection_AsciiString myAlphabet("abcdef");
        assert ( myAlphabet.Length() == 6 );
        -   1 is the position of the first character in this string.
        -   The length of this string gives the position of its last character.
        -   Positions less than or equal to zero, or
        greater than the length of this string are
        invalid in functions which identify a character
        of this string by its position.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_Length(self, *args)


    def Location(self, *args):
        """
        Location(TCollection_AsciiString self, TCollection_AsciiString other, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer
        Location(TCollection_AsciiString self, Standard_Integer const N, Standard_Character const C, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> Standard_Integer

        Returns the index of the nth occurence of the character C
        in the string <me> from the starting index FromIndex to the
        ending index ToIndex.
        Returns zero if failure.
        Raises an exception if FromIndex or ToIndex is out of range.
        Example:
        before
        me = "aabAa", N = 3, C = 'a', FromIndex = 1, ToIndex = 5
        after
        me = "aabAa"
        returns
        5

        :type N: int
        :type C: OCC.wrapper.Standard.Standard_Character
        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_Location(self, *args)


    def LowerCase(self, *args):
        """
        LowerCase(TCollection_AsciiString self)

        Converts <me> to its lower-case equivalent.
        Example
        TCollection_AsciiString myString("Hello Dolly");
        myString.UpperCase();
        assert ( myString == "HELLO DOLLY" );
        myString.LowerCase();
        assert ( myString == "hello dolly" );


        """
        return _TCollection.TCollection_AsciiString_LowerCase(self, *args)


    def Prepend(self, *args):
        """
        Prepend(TCollection_AsciiString self, TCollection_AsciiString other)

        Inserts the string other at the beginning of this ASCII string.
        Example
        TCollection_AsciiString myAlphabet("cde");
        TCollection_AsciiString myBegin("ab");
        myAlphabet.Prepend(myBegin);
        assert ( myAlphabet == "abcde" );

        :type other: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Prepend(self, *args)


    def Print(self, *args):
        """
        Print(TCollection_AsciiString self, Standard_OStream & astream)

        Displays <me> on a stream.

        :type astream: OCC.wrapper.Standard.Standard_OStream

        """
        return _TCollection.TCollection_AsciiString_Print(self, *args)


    def Read(self, *args):
        """
        Read(TCollection_AsciiString self, Standard_IStream & astream)

        Read <me> from a stream.

        :type astream: OCC.wrapper.Standard.Standard_IStream

        """
        return _TCollection.TCollection_AsciiString_Read(self, *args)


    def RealValue(self, *args):
        """
        RealValue(TCollection_AsciiString self) -> Standard_Real

        Converts an AsciiString containing a numeric expression.
        to a Real.
        Example: ex: "215" returns 215.0.
        ex: "3.14159267" returns 3.14159267.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TCollection.TCollection_AsciiString_RealValue(self, *args)


    def RemoveAll(self, *args):
        """
        RemoveAll(TCollection_AsciiString self, Standard_Character const C, Standard_Boolean const CaseSensitive)
        RemoveAll(TCollection_AsciiString self, Standard_Character const what)

        Removes every <what> characters from <me>.

        :type what: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_AsciiString_RemoveAll(self, *args)


    def Remove(self, *args):
        """
        Remove(TCollection_AsciiString self, Standard_Integer const where, Standard_Integer const ahowmany=1)

        Erases <ahowmany> characters from position <where>,
        <where> included.
        Example:
        aString contains "Hello"
        aString.Remove(2,2) erases 2 characters from position 2
        This gives "Hlo".

        :type where: int
        :type ahowmany: int

        """
        return _TCollection.TCollection_AsciiString_Remove(self, *args)


    def RightAdjust(self, *args):
        """
        RightAdjust(TCollection_AsciiString self)

        Removes all space characters at the end of the string.


        """
        return _TCollection.TCollection_AsciiString_RightAdjust(self, *args)


    def RightJustify(self, *args):
        """
        RightJustify(TCollection_AsciiString self, Standard_Integer const Width, Standard_Character const Filler)

        Right justify.
        Length becomes equal to Width and the new characters are
        equal to Filler.
        if Width < Length nothing happens.
        Raises an exception if Width is less than zero.
        Example:
        before
        me = "abcdef" , Width = 9 , Filler = ' '
        after
        me = "   abcdef"

        :type Width: int
        :type Filler: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_AsciiString_RightJustify(self, *args)


    def Search(self, *args):
        """
        Search(TCollection_AsciiString self, Standard_CString const what) -> Standard_Integer
        Search(TCollection_AsciiString self, TCollection_AsciiString what) -> Standard_Integer

        Searches an AsciiString in <me> from the beginning
        and returns position of first item <what> matching.
        It returns -1 if not found.

        :type what: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_Search(self, *args)


    def SearchFromEnd(self, *args):
        """
        SearchFromEnd(TCollection_AsciiString self, Standard_CString const what) -> Standard_Integer
        SearchFromEnd(TCollection_AsciiString self, TCollection_AsciiString what) -> Standard_Integer

        Searches a AsciiString in another AsciiString from the end
        and returns position of first item <what> matching.
        It returns -1 if not found.

        :type what: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_SearchFromEnd(self, *args)


    def SetValue(self, *args):
        """
        SetValue(TCollection_AsciiString self, Standard_Integer const where, Standard_Character const what)
        SetValue(TCollection_AsciiString self, Standard_Integer const where, Standard_CString const what)
        SetValue(TCollection_AsciiString self, Standard_Integer const where, TCollection_AsciiString what)

        Replaces a part of <me> by another AsciiString.

        :type where: int
        :type what: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_SetValue(self, *args)


    def Split(self, *args):
        """
        Split(TCollection_AsciiString self, Standard_Integer const where) -> TCollection_AsciiString

        Splits a AsciiString into two sub-strings.
        Example:
        aString contains "abcdefg"
        aString.Split(3) gives <me> = "abc" and returns "defg"

        :type where: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Split(self, *args)


    def SubString(self, *args):
        """
        SubString(TCollection_AsciiString self, Standard_Integer const FromIndex, Standard_Integer const ToIndex) -> TCollection_AsciiString

        Creation of a sub-string of the string <me>.
        The sub-string starts to the index Fromindex and ends
        to the index ToIndex.
        Raises an exception if ToIndex or FromIndex is out of bounds
        Example:
        before
        me = "abcdefg", ToIndex=3, FromIndex=6
        after
        me = "abcdefg"
        returns
        "cdef"

        :type FromIndex: int
        :type ToIndex: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_SubString(self, *args)


    def ToCString(self, *args):
        """
        ToCString(TCollection_AsciiString self) -> Standard_CString

        Returns pointer to AsciiString (char *).
        This is useful for some casual manipulations.
        Warning: Because this "char *" is 'const', you can't modify its contents.

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TCollection.TCollection_AsciiString_ToCString(self, *args)


    def Token(self, *args):
        """
        Token(TCollection_AsciiString self, Standard_CString const separators, Standard_Integer const whichone=1) -> TCollection_AsciiString

        Extracts <whichone> token from <me>.
        By default, the <separators> is set to space and tabulation.
        By default, the token extracted is the first one (whichone = 1).
        <separators> contains all separators you need.
        If no token indexed by <whichone> is found, it returns empty AsciiString.
        Example:
        aString contains "This is a     message"
        aString.Token()  returns "This"
        aString.Token(" ",4) returns "message"
        aString.Token(" ",2) returns "is"
        aString.Token(" ",9) returns ""
        Other separators than space character and tabulation are allowed :
        aString contains "1234; test:message   , value"
        aString.Token("; :,",4) returns "value"
        aString.Token("; :,",2) returns "test"

        :type separators: OCC.wrapper.Standard.Standard_CString
        :type whichone: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Token(self, *args)


    def Trunc(self, *args):
        """
        Trunc(TCollection_AsciiString self, Standard_Integer const ahowmany)

        Truncates <me> to <ahowmany> characters.
        Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel"

        :type ahowmany: int

        """
        return _TCollection.TCollection_AsciiString_Trunc(self, *args)


    def UpperCase(self, *args):
        """
        UpperCase(TCollection_AsciiString self)

        Converts <me> to its upper-case equivalent.


        """
        return _TCollection.TCollection_AsciiString_UpperCase(self, *args)


    def UsefullLength(self, *args):
        """
        UsefullLength(TCollection_AsciiString self) -> Standard_Integer

        Length of the string ignoring all spaces (' ') and the
        control character at the end.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_UsefullLength(self, *args)


    def Value(self, *args):
        """
        Value(TCollection_AsciiString self, Standard_Integer const where) -> Standard_Character

        Returns character at position <where> in <me>.
        If <where> is less than zero or greater than the lenght of <me>,
        an exception is raised.
        Example:
        aString contains "Hello"
        aString.Value(2) returns 'e'

        :type where: int
        :rtype: OCC.wrapper.Standard.Standard_Character

        """
        return _TCollection.TCollection_AsciiString_Value(self, *args)


    def HashCode(*args):
        """
        HashCode(TCollection_AsciiString astring, Standard_Integer const Upper) -> Standard_Integer

        Hash function for AsciiString
        (returns the same Integer value that the hash function for ExtendedString)

        :type astring: OCC.wrapper.TCollection.TCollection_AsciiString
        :type Upper: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TCollection.TCollection_AsciiString_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        IsEqual(Standard_CString const other) -> Standard_Boolean
        IsEqual(TCollection_AsciiString other) -> Standard_Boolean
        IsEqual(TCollection_AsciiString string1, TCollection_AsciiString string2) -> Standard_Boolean
        IsEqual(TCollection_AsciiString string1, Standard_CString const string2) -> Standard_Boolean

        Returns True  when the two  strings are the same.
        (Just for HashCode for AsciiString)

        :type string1: OCC.wrapper.TCollection.TCollection_AsciiString
        :type string2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def IsSameString(*args):
        """
        IsSameString(TCollection_AsciiString theString1, TCollection_AsciiString theString2, Standard_Boolean const theIsCaseSensitive) -> Standard_Boolean

        Returns True if the strings contain same characters.

        :type theString1: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theString2: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theIsCaseSensitive: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_AsciiString_IsSameString(*args)

    IsSameString = staticmethod(IsSameString)
    __swig_destroy__ = _TCollection.delete_TCollection_AsciiString
TCollection_AsciiString_swigregister = _TCollection.TCollection_AsciiString_swigregister
TCollection_AsciiString_swigregister(TCollection_AsciiString)

def TCollection_AsciiString_HashCode(*args):
    """
    TCollection_AsciiString_HashCode(TCollection_AsciiString astring, Standard_Integer const Upper) -> Standard_Integer

    Hash function for AsciiString
    (returns the same Integer value that the hash function for ExtendedString)

    :type astring: OCC.wrapper.TCollection.TCollection_AsciiString
    :type Upper: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _TCollection.TCollection_AsciiString_HashCode(*args)

def TCollection_AsciiString_IsEqual(*args):
    """
    IsEqual(Standard_CString const other) -> Standard_Boolean
    IsEqual(TCollection_AsciiString other) -> Standard_Boolean
    IsEqual(TCollection_AsciiString string1, TCollection_AsciiString string2) -> Standard_Boolean
    TCollection_AsciiString_IsEqual(TCollection_AsciiString string1, Standard_CString const string2) -> Standard_Boolean

    Returns True  when the two  strings are the same.
    (Just for HashCode for AsciiString)

    :type string1: OCC.wrapper.TCollection.TCollection_AsciiString
    :type string2: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TCollection.TCollection_AsciiString_IsEqual(*args)

def TCollection_AsciiString_IsSameString(*args):
    """
    TCollection_AsciiString_IsSameString(TCollection_AsciiString theString1, TCollection_AsciiString theString2, Standard_Boolean const theIsCaseSensitive) -> Standard_Boolean

    Returns True if the strings contain same characters.

    :type theString1: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theString2: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theIsCaseSensitive: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TCollection.TCollection_AsciiString_IsSameString(*args)

class TCollection_BasicMapIterator(object):
    """
    This  class  provides    basic   services  for the
    iterators  on Maps. The  iterators  are  inherited
    from this one.

    The  iterator   contains  an   array   of pointers
    (buckets). Each bucket is a  pointer  on a node. A
    node contains a pointer on the next node.

    This class  provides also basic  services for  the
    implementation of Maps.
    A map iterator provides a step by step exploration of all
    entries of a map. After initialization of a concrete derived
    iterator, use in a loop:
    -   the function More to know if there is a current entry for
    the iterator in the map,
    -   then the functions which read data on an entry of the
    map (these functions are provided by each type of map),
    -   then the function Next to set the iterator to the next   entry of the map.
    Warning
    -   A map is a non-ordered data structure. The order in
    which entries of a map are explored by the iterator
    depends on its contents, and change when the map is edited.
    -   It is not recommended to modify the contents of a map
    during iteration: the result is unpredictable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Reset(self, *args):
        """
        Reset(TCollection_BasicMapIterator self)

        Resets the iterator to the first node.


        """
        return _TCollection.TCollection_BasicMapIterator_Reset(self, *args)


    def More(self, *args):
        """
        More(TCollection_BasicMapIterator self) -> Standard_Boolean

        Returns true if there is a current entry for this iterator in the map.
        Use the function Next to set this iterator to the position of
        the next entry, if it exists.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TCollection.TCollection_BasicMapIterator_More(self, *args)


    def Next(self, *args):
        """
        Next(TCollection_BasicMapIterator self)

        Sets this iterator to the position of the next entry of the map.
        Nothing is changed if there is no more entry to explore in
        the map: this iterator is always positioned on the last entry
        of the map but the function More returns false.


        """
        return _TCollection.TCollection_BasicMapIterator_Next(self, *args)

    __swig_destroy__ = _TCollection.delete_TCollection_BasicMapIterator
TCollection_BasicMapIterator_swigregister = _TCollection.TCollection_BasicMapIterator_swigregister
TCollection_BasicMapIterator_swigregister(TCollection_BasicMapIterator)



