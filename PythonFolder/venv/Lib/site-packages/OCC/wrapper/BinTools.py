# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinTools')
    _BinTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinTools', [dirname(__file__)])
        except ImportError:
            import _BinTools
            return _BinTools
        try:
            _mod = imp.load_module('_BinTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinTools = swig_import_helper()
    del swig_import_helper
else:
    import _BinTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinTools.delete_SwigPyIterator

    def value(self):
        return _BinTools.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinTools.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinTools.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinTools.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinTools.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinTools.SwigPyIterator_copy(self)

    def next(self):
        return _BinTools.SwigPyIterator_next(self)

    def __next__(self):
        return _BinTools.SwigPyIterator___next__(self)

    def previous(self):
        return _BinTools.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinTools.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinTools.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinTools.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinTools.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinTools.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinTools.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinTools.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinTools.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinTools.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinTools.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinTools.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinTools.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinTools.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinTools.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinTools.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinTools.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinTools.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinTools.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinTools.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinTools.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinTools.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinTools.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinTools.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinTools.ptr_to_number(item)
ptr_to_number = _BinTools.ptr_to_number

def HashCode(*args):
    return _BinTools.HashCode(*args)
HashCode = _BinTools.HashCode

def ptr_equal(a, b):
    return _BinTools.ptr_equal(a, b)
ptr_equal = _BinTools.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class BinTools_Curve2dSet(object):
    """Stores a set of Curves from Geom2d in binary format"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BinTools_Curve2dSet self) -> BinTools_Curve2dSet

        Returns an empty set of Curves.


        """
        this = _BinTools.new_BinTools_Curve2dSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(BinTools_Curve2dSet self)

        Clears the content of the set.


        """
        return _BinTools.BinTools_Curve2dSet_Clear(self, *args)


    def Add(self, *args):
        """
        Add(BinTools_Curve2dSet self, Handle_Geom2d_Curve C) -> Standard_Integer

        Incorporate a new Curve in the  set and returns
        its index.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_Curve2dSet_Add(self, *args)


    def Curve2d(self, *args):
        """
        Curve2d(BinTools_Curve2dSet self, Standard_Integer const I) -> Handle_Geom2d_Curve

        Returns the Curve of index <I>.

        :type I: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _BinTools.BinTools_Curve2dSet_Curve2d(self, *args)


    def Index(self, *args):
        """
        Index(BinTools_Curve2dSet self, Handle_Geom2d_Curve C) -> Standard_Integer

        Returns the index of <L>.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_Curve2dSet_Index(self, *args)


    def Write(self, *args):
        """
        Write(BinTools_Curve2dSet self, Standard_OStream & OS)

        Writes the content of  me  on the stream <OS> in a
        format that can be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_Curve2dSet_Write(self, *args)


    def Read(self, *args):
        """
        Read(BinTools_Curve2dSet self, Standard_IStream & IS)

        Reads the content of me from the  stream  <IS>. me
        is first cleared.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_Curve2dSet_Read(self, *args)


    def WriteCurve2d(*args):
        """
        WriteCurve2d(Handle_Geom2d_Curve C, Standard_OStream & OS)

        Dumps the curve on the binary stream, that can be read back.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_Curve2dSet_WriteCurve2d(*args)

    WriteCurve2d = staticmethod(WriteCurve2d)

    def ReadCurve2d(*args):
        """
        ReadCurve2d(Standard_IStream & IS, Handle_Geom2d_Curve C) -> Standard_IStream &

        Reads the curve  from  the stream.  The  curve  is
        assumed   to have  been  written  with  the Write
        method.

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_Curve2dSet_ReadCurve2d(*args)

    ReadCurve2d = staticmethod(ReadCurve2d)
    __swig_destroy__ = _BinTools.delete_BinTools_Curve2dSet
BinTools_Curve2dSet_swigregister = _BinTools.BinTools_Curve2dSet_swigregister
BinTools_Curve2dSet_swigregister(BinTools_Curve2dSet)

def BinTools_Curve2dSet_WriteCurve2d(*args):
    """
    BinTools_Curve2dSet_WriteCurve2d(Handle_Geom2d_Curve C, Standard_OStream & OS)

    Dumps the curve on the binary stream, that can be read back.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type OS: OCC.wrapper.Standard.Standard_OStream

    """
    return _BinTools.BinTools_Curve2dSet_WriteCurve2d(*args)

def BinTools_Curve2dSet_ReadCurve2d(*args):
    """
    BinTools_Curve2dSet_ReadCurve2d(Standard_IStream & IS, Handle_Geom2d_Curve C) -> Standard_IStream &

    Reads the curve  from  the stream.  The  curve  is
    assumed   to have  been  written  with  the Write
    method.

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :rtype: OCC.wrapper.Standard.Standard_IStream

    """
    return _BinTools.BinTools_Curve2dSet_ReadCurve2d(*args)

class BinTools_LocationSet(object):
    """
    The class LocationSet stores a set of location in
    a relocatable state.

    It can be created from Locations.

    It can create Locations.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BinTools_LocationSet self) -> BinTools_LocationSet

        Returns an empty set of locations.


        """
        this = _BinTools.new_BinTools_LocationSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(BinTools_LocationSet self)

        Clears the content of the set.


        """
        return _BinTools.BinTools_LocationSet_Clear(self, *args)


    def Add(self, *args):
        """
        Add(BinTools_LocationSet self, TopLoc_Location L) -> Standard_Integer

        Incorporate a new Location in the  set and returns
        its index.

        :type L: OCC.wrapper.TopLoc.TopLoc_Location
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_LocationSet_Add(self, *args)


    def Location(self, *args):
        """
        Returns the location of index <I>.

        :type I: int
        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        res = _BinTools.BinTools_LocationSet_Location(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Index(self, *args):
        """
        Index(BinTools_LocationSet self, TopLoc_Location L) -> Standard_Integer

        Returns the index of <L>.

        :type L: OCC.wrapper.TopLoc.TopLoc_Location
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_LocationSet_Index(self, *args)


    def NbLocations(self, *args):
        """
        NbLocations(BinTools_LocationSet self) -> Standard_Integer

        Returns number of locations.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_LocationSet_NbLocations(self, *args)


    def Write(self, *args):
        """
        Write(BinTools_LocationSet self, Standard_OStream & OS)

        Writes the content of  me  on the stream <OS> in a
        format that can be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_LocationSet_Write(self, *args)


    def Read(self, *args):
        """
        Read(BinTools_LocationSet self, Standard_IStream & IS)

        Reads the content of me from the  stream  <IS>. me
        is first cleared.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_LocationSet_Read(self, *args)

    __swig_destroy__ = _BinTools.delete_BinTools_LocationSet
BinTools_LocationSet_swigregister = _BinTools.BinTools_LocationSet_swigregister
BinTools_LocationSet_swigregister(BinTools_LocationSet)

class BinTools_ShapeSet(object):
    """Writes topology in OStream in binary format"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BinTools_ShapeSet self, Standard_Boolean const isWithTriangles) -> BinTools_ShapeSet

        Builds an empty ShapeSet.
        Parameter <isWithTriangles> is added for XML Persistence

        :type isWithTriangles: bool

        """
        this = _BinTools.new_BinTools_ShapeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsWithTriangles(self, *args):
        """
        IsWithTriangles(BinTools_ShapeSet self) -> Standard_Boolean

        Return true if shape should be stored with triangles.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTools.BinTools_ShapeSet_IsWithTriangles(self, *args)


    def SetWithTriangles(self, *args):
        """
        SetWithTriangles(BinTools_ShapeSet self, Standard_Boolean const isWithTriangles)

        Define if shape will be stored with triangles.
        Ignored (always written) if face defines only triangulation (no surface).

        :type isWithTriangles: bool

        """
        return _BinTools.BinTools_ShapeSet_SetWithTriangles(self, *args)


    def SetFormatNb(self, *args):
        """
        SetFormatNb(BinTools_ShapeSet self, Standard_Integer const theFormatNb)

        :type theFormatNb: int

        """
        return _BinTools.BinTools_ShapeSet_SetFormatNb(self, *args)


    def FormatNb(self, *args):
        """
        FormatNb(BinTools_ShapeSet self) -> Standard_Integer

        two formats available for the moment:
        First: does not write CurveOnSurface UV Points into the file
        on reading calls Check() method.
        Second: stores CurveOnSurface UV Points.
        On reading format is recognized from Version string.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_ShapeSet_FormatNb(self, *args)


    def Clear(self, *args):
        """
        Clear(BinTools_ShapeSet self)

        Clears the content of the set.


        """
        return _BinTools.BinTools_ShapeSet_Clear(self, *args)


    def Add(self, *args):
        """
        Add(BinTools_ShapeSet self, TopoDS_Shape S) -> Standard_Integer

        Stores <S> and its sub-shape. Returns the index of <S>.
        The method AddGeometry is called on each sub-shape.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_ShapeSet_Add(self, *args)


    def Shape(self, *args):
        """
        Returns the sub-shape of index <I>.

        :type I: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _BinTools.BinTools_ShapeSet_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Index(self, *args):
        """
        Index(BinTools_ShapeSet self, TopoDS_Shape S) -> Standard_Integer

        Returns the index of <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_ShapeSet_Index(self, *args)


    def Locations(self, *args):
        """
        :rtype: OCC.wrapper.BinTools.BinTools_LocationSet

        """
        res = _BinTools.BinTools_ShapeSet_Locations(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLocations(self, *args):
        """
        ChangeLocations(BinTools_ShapeSet self) -> BinTools_LocationSet

        :rtype: OCC.wrapper.BinTools.BinTools_LocationSet

        """
        return _BinTools.BinTools_ShapeSet_ChangeLocations(self, *args)


    def NbShapes(self, *args):
        """
        NbShapes(BinTools_ShapeSet self) -> Standard_Integer

        Returns number of shapes read from file.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_ShapeSet_NbShapes(self, *args)


    def Write(self, *args):
        """
        Write(BinTools_ShapeSet self, Standard_OStream & OS)
        Write(BinTools_ShapeSet self, TopoDS_Shape S, Standard_OStream & OS)

        Writes   on  <OS>   the shape   <S>.    Writes the
        orientation, the index of the TShape and the index
        of the Location.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_ShapeSet_Write(self, *args)


    def Read(self, *args):
        """
        Read(BinTools_ShapeSet self, Standard_IStream & IS)
        Read(BinTools_ShapeSet self, TopoDS_Shape S, Standard_IStream & IS, Standard_Integer const NbShapes)

        Reads  from <IS>  a shape  and  returns  it in  S.
        <NbShapes> is the number of tshapes in the set.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type NbShapes: int

        """
        return _BinTools.BinTools_ShapeSet_Read(self, *args)


    def WriteGeometry(self, *args):
        """
        WriteGeometry(BinTools_ShapeSet self, Standard_OStream & OS)
        WriteGeometry(BinTools_ShapeSet self, TopoDS_Shape S, Standard_OStream & OS)

        Writes the geometry of <S>  on the stream <OS> in a
        binary format that can be read back by Read.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_ShapeSet_WriteGeometry(self, *args)


    def ReadGeometry(self, *args):
        """
        ReadGeometry(BinTools_ShapeSet self, Standard_IStream & IS)
        ReadGeometry(BinTools_ShapeSet self, TopAbs_ShapeEnum const T, Standard_IStream & IS, TopoDS_Shape S)

        Reads the geometry of a shape of type <T> from the
        stream <IS> and returns it in <S>.

        :type T: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BinTools.BinTools_ShapeSet_ReadGeometry(self, *args)


    def AddGeometry(self, *args):
        """
        AddGeometry(BinTools_ShapeSet self, TopoDS_Shape S)

        Stores the goemetry of <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BinTools.BinTools_ShapeSet_AddGeometry(self, *args)


    def AddShapes(self, *args):
        """
        AddShapes(BinTools_ShapeSet self, TopoDS_Shape S1, TopoDS_Shape S2)

        Inserts  the shape <S2> in  the  shape <S1>.

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BinTools.BinTools_ShapeSet_AddShapes(self, *args)


    def ReadPolygon3D(self, *args):
        """
        ReadPolygon3D(BinTools_ShapeSet self, Standard_IStream & IS)

        Reads the 3d polygons  of me
        from the  stream  <IS>.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_ShapeSet_ReadPolygon3D(self, *args)


    def WritePolygon3D(self, *args):
        """
        WritePolygon3D(BinTools_ShapeSet self, Standard_OStream & OS)

        Writes the 3d polygons
        on the stream <OS> in a format that can
        be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_ShapeSet_WritePolygon3D(self, *args)


    def ReadTriangulation(self, *args):
        """
        ReadTriangulation(BinTools_ShapeSet self, Standard_IStream & IS)

        Reads the triangulation of me
        from the  stream  <IS>.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_ShapeSet_ReadTriangulation(self, *args)


    def WriteTriangulation(self, *args):
        """
        WriteTriangulation(BinTools_ShapeSet self, Standard_OStream & OS)

        Writes the triangulation
        on the stream <OS> in a format that can
        be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_ShapeSet_WriteTriangulation(self, *args)


    def ReadPolygonOnTriangulation(self, *args):
        """
        ReadPolygonOnTriangulation(BinTools_ShapeSet self, Standard_IStream & IS)

        Reads the polygons on triangulation of me
        from the  stream  <IS>.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_ShapeSet_ReadPolygonOnTriangulation(self, *args)


    def WritePolygonOnTriangulation(self, *args):
        """
        WritePolygonOnTriangulation(BinTools_ShapeSet self, Standard_OStream & OS)

        Writes the polygons on triangulation
        on the stream <OS> in a format that can
        be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_ShapeSet_WritePolygonOnTriangulation(self, *args)

    __swig_destroy__ = _BinTools.delete_BinTools_ShapeSet
BinTools_ShapeSet_swigregister = _BinTools.BinTools_ShapeSet_swigregister
BinTools_ShapeSet_swigregister(BinTools_ShapeSet)

class BinTools_(object):
    """Tool to keep shapes in binary format"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def PutReal(*args):
        """
        PutReal(Standard_OStream & OS, Standard_Real const theValue) -> Standard_OStream &

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type theValue: float
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools__PutReal(*args)

    PutReal = staticmethod(PutReal)

    def PutInteger(*args):
        """
        PutInteger(Standard_OStream & OS, Standard_Integer const theValue) -> Standard_OStream &

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type theValue: int
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools__PutInteger(*args)

    PutInteger = staticmethod(PutInteger)

    def PutBool(*args):
        """
        PutBool(Standard_OStream & OS, Standard_Boolean const theValue) -> Standard_OStream &

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type theValue: bool
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools__PutBool(*args)

    PutBool = staticmethod(PutBool)

    def PutExtChar(*args):
        """
        PutExtChar(Standard_OStream & OS, Standard_ExtCharacter const theValue) -> Standard_OStream &

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type theValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools__PutExtChar(*args)

    PutExtChar = staticmethod(PutExtChar)

    def GetReal(*args):
        """
        GetReal(Standard_IStream & IS) -> Standard_IStream &

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type theValue: float
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools__GetReal(*args)

    GetReal = staticmethod(GetReal)

    def GetInteger(*args):
        """
        GetInteger(Standard_IStream & IS) -> Standard_IStream &

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type theValue: int
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools__GetInteger(*args)

    GetInteger = staticmethod(GetInteger)

    def GetBool(*args):
        """
        GetBool(Standard_IStream & IS) -> Standard_IStream &

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type theValue: bool
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools__GetBool(*args)

    GetBool = staticmethod(GetBool)

    def GetExtChar(*args):
        """
        GetExtChar(Standard_IStream & IS) -> Standard_IStream &

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type theValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools__GetExtChar(*args)

    GetExtChar = staticmethod(GetExtChar)

    def Write(*args):
        """
        Write(TopoDS_Shape theShape, Standard_OStream & theStream)
        Write(TopoDS_Shape theShape, Standard_CString const theFile) -> Standard_Boolean

        Writes <theShape> in <theFile>.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theFile: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTools.BinTools__Write(*args)

    Write = staticmethod(Write)

    def Read(*args):
        """
        Read(TopoDS_Shape theShape, Standard_IStream & theStream)
        Read(TopoDS_Shape theShape, Standard_CString const theFile) -> Standard_Boolean

        Reads a shape from <theFile> and returns it in <theShape>.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theFile: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTools.BinTools__Read(*args)

    Read = staticmethod(Read)

    def __init__(self):
        """Tool to keep shapes in binary format"""
        this = _BinTools.new_BinTools_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinTools.delete_BinTools_
BinTools__swigregister = _BinTools.BinTools__swigregister
BinTools__swigregister(BinTools_)

def BinTools__PutReal(*args):
    """
    BinTools__PutReal(Standard_OStream & OS, Standard_Real const theValue) -> Standard_OStream &

    :type OS: OCC.wrapper.Standard.Standard_OStream
    :type theValue: float
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _BinTools.BinTools__PutReal(*args)

def BinTools__PutInteger(*args):
    """
    BinTools__PutInteger(Standard_OStream & OS, Standard_Integer const theValue) -> Standard_OStream &

    :type OS: OCC.wrapper.Standard.Standard_OStream
    :type theValue: int
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _BinTools.BinTools__PutInteger(*args)

def BinTools__PutBool(*args):
    """
    BinTools__PutBool(Standard_OStream & OS, Standard_Boolean const theValue) -> Standard_OStream &

    :type OS: OCC.wrapper.Standard.Standard_OStream
    :type theValue: bool
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _BinTools.BinTools__PutBool(*args)

def BinTools__PutExtChar(*args):
    """
    BinTools__PutExtChar(Standard_OStream & OS, Standard_ExtCharacter const theValue) -> Standard_OStream &

    :type OS: OCC.wrapper.Standard.Standard_OStream
    :type theValue: OCC.wrapper.Standard.Standard_ExtCharacter
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _BinTools.BinTools__PutExtChar(*args)

def BinTools__GetReal(*args):
    """
    BinTools__GetReal(Standard_IStream & IS) -> Standard_IStream &

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :type theValue: float
    :rtype: OCC.wrapper.Standard.Standard_IStream

    """
    return _BinTools.BinTools__GetReal(*args)

def BinTools__GetInteger(*args):
    """
    BinTools__GetInteger(Standard_IStream & IS) -> Standard_IStream &

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :type theValue: int
    :rtype: OCC.wrapper.Standard.Standard_IStream

    """
    return _BinTools.BinTools__GetInteger(*args)

def BinTools__GetBool(*args):
    """
    BinTools__GetBool(Standard_IStream & IS) -> Standard_IStream &

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :type theValue: bool
    :rtype: OCC.wrapper.Standard.Standard_IStream

    """
    return _BinTools.BinTools__GetBool(*args)

def BinTools__GetExtChar(*args):
    """
    BinTools__GetExtChar(Standard_IStream & IS) -> Standard_IStream &

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :type theValue: OCC.wrapper.Standard.Standard_ExtCharacter
    :rtype: OCC.wrapper.Standard.Standard_IStream

    """
    return _BinTools.BinTools__GetExtChar(*args)

def BinTools__Write(*args):
    """
    Write(TopoDS_Shape theShape, Standard_OStream & theStream)
    BinTools__Write(TopoDS_Shape theShape, Standard_CString const theFile) -> Standard_Boolean

    Writes <theShape> in <theFile>.

    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theFile: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _BinTools.BinTools__Write(*args)

def BinTools__Read(*args):
    """
    Read(TopoDS_Shape theShape, Standard_IStream & theStream)
    BinTools__Read(TopoDS_Shape theShape, Standard_CString const theFile) -> Standard_Boolean

    Reads a shape from <theFile> and returns it in <theShape>.

    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theFile: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _BinTools.BinTools__Read(*args)

class BinTools_SurfaceSet(object):
    """Stores a set of Surfaces from Geom in binary format."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BinTools_SurfaceSet self) -> BinTools_SurfaceSet

        Returns an empty set of Surfaces.


        """
        this = _BinTools.new_BinTools_SurfaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(BinTools_SurfaceSet self)

        Clears the content of the set.


        """
        return _BinTools.BinTools_SurfaceSet_Clear(self, *args)


    def Add(self, *args):
        """
        Add(BinTools_SurfaceSet self, Handle_Geom_Surface S) -> Standard_Integer

        Incorporate a new Surface in the  set and returns
        its index.

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_SurfaceSet_Add(self, *args)


    def Surface(self, *args):
        """
        Surface(BinTools_SurfaceSet self, Standard_Integer const I) -> Handle_Geom_Surface

        Returns the Surface of index <I>.

        :type I: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _BinTools.BinTools_SurfaceSet_Surface(self, *args)


    def Index(self, *args):
        """
        Index(BinTools_SurfaceSet self, Handle_Geom_Surface S) -> Standard_Integer

        Returns the index of <L>.

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_SurfaceSet_Index(self, *args)


    def Write(self, *args):
        """
        Write(BinTools_SurfaceSet self, Standard_OStream & OS)

        Writes the content of  me  on the stream <OS> in
        binary format that can be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_SurfaceSet_Write(self, *args)


    def Read(self, *args):
        """
        Read(BinTools_SurfaceSet self, Standard_IStream & IS)

        Reads the content of me from the  stream  <IS>. me
        is first cleared.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_SurfaceSet_Read(self, *args)


    def WriteSurface(*args):
        """
        WriteSurface(Handle_Geom_Surface S, Standard_OStream & OS)

        Dumps the surface on the stream in binary
        format that can be read back.

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_SurfaceSet_WriteSurface(*args)

    WriteSurface = staticmethod(WriteSurface)

    def ReadSurface(*args):
        """
        ReadSurface(Standard_IStream & IS, Handle_Geom_Surface S) -> Standard_IStream &

        Reads the surface  from  the stream.  The  surface  is
        assumed   to have  been  written  with  the Write
        method.

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_SurfaceSet_ReadSurface(*args)

    ReadSurface = staticmethod(ReadSurface)
    __swig_destroy__ = _BinTools.delete_BinTools_SurfaceSet
BinTools_SurfaceSet_swigregister = _BinTools.BinTools_SurfaceSet_swigregister
BinTools_SurfaceSet_swigregister(BinTools_SurfaceSet)

def BinTools_SurfaceSet_WriteSurface(*args):
    """
    BinTools_SurfaceSet_WriteSurface(Handle_Geom_Surface S, Standard_OStream & OS)

    Dumps the surface on the stream in binary
    format that can be read back.

    :type S: OCC.wrapper.Geom.Handle_Geom_Surface
    :type OS: OCC.wrapper.Standard.Standard_OStream

    """
    return _BinTools.BinTools_SurfaceSet_WriteSurface(*args)

def BinTools_SurfaceSet_ReadSurface(*args):
    """
    BinTools_SurfaceSet_ReadSurface(Standard_IStream & IS, Handle_Geom_Surface S) -> Standard_IStream &

    Reads the surface  from  the stream.  The  surface  is
    assumed   to have  been  written  with  the Write
    method.

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :type S: OCC.wrapper.Geom.Handle_Geom_Surface
    :rtype: OCC.wrapper.Standard.Standard_IStream

    """
    return _BinTools.BinTools_SurfaceSet_ReadSurface(*args)

class BinTools_CurveSet(object):
    """Stores a set of Curves from Geom in binary format."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BinTools_CurveSet self) -> BinTools_CurveSet

        Returns an empty set of Curves.


        """
        this = _BinTools.new_BinTools_CurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(BinTools_CurveSet self)

        Clears the content of the set.


        """
        return _BinTools.BinTools_CurveSet_Clear(self, *args)


    def Add(self, *args):
        """
        Add(BinTools_CurveSet self, Handle_Geom_Curve C) -> Standard_Integer

        Incorporate a new Curve in the  set and returns
        its index.

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_CurveSet_Add(self, *args)


    def Curve(self, *args):
        """
        Curve(BinTools_CurveSet self, Standard_Integer const I) -> Handle_Geom_Curve

        Returns the Curve of index <I>.

        :type I: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _BinTools.BinTools_CurveSet_Curve(self, *args)


    def Index(self, *args):
        """
        Index(BinTools_CurveSet self, Handle_Geom_Curve C) -> Standard_Integer

        Returns the index of <L>.

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTools.BinTools_CurveSet_Index(self, *args)


    def Write(self, *args):
        """
        Write(BinTools_CurveSet self, Standard_OStream & OS)

        Writes the content of  me  on the stream <OS> in a
        format that can be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_CurveSet_Write(self, *args)


    def Read(self, *args):
        """
        Read(BinTools_CurveSet self, Standard_IStream & IS)

        Reads the content of me from the  stream  <IS>. me
        is first cleared.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_CurveSet_Read(self, *args)


    def WriteCurve(*args):
        """
        WriteCurve(Handle_Geom_Curve C, Standard_OStream & OS)

        Dumps the curve on the stream in binary format
        that can be read back.

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTools.BinTools_CurveSet_WriteCurve(*args)

    WriteCurve = staticmethod(WriteCurve)

    def ReadCurve(*args):
        """
        ReadCurve(Standard_IStream & IS, Handle_Geom_Curve C) -> Standard_IStream &

        Reads the curve  from  the stream.  The  curve  is
        assumed  to have  been  written  with  the Write
        method

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinTools.BinTools_CurveSet_ReadCurve(*args)

    ReadCurve = staticmethod(ReadCurve)
    __swig_destroy__ = _BinTools.delete_BinTools_CurveSet
BinTools_CurveSet_swigregister = _BinTools.BinTools_CurveSet_swigregister
BinTools_CurveSet_swigregister(BinTools_CurveSet)

def BinTools_CurveSet_WriteCurve(*args):
    """
    BinTools_CurveSet_WriteCurve(Handle_Geom_Curve C, Standard_OStream & OS)

    Dumps the curve on the stream in binary format
    that can be read back.

    :type C: OCC.wrapper.Geom.Handle_Geom_Curve
    :type OS: OCC.wrapper.Standard.Standard_OStream

    """
    return _BinTools.BinTools_CurveSet_WriteCurve(*args)

def BinTools_CurveSet_ReadCurve(*args):
    """
    BinTools_CurveSet_ReadCurve(Standard_IStream & IS, Handle_Geom_Curve C) -> Standard_IStream &

    Reads the curve  from  the stream.  The  curve  is
    assumed  to have  been  written  with  the Write
    method

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :type C: OCC.wrapper.Geom.Handle_Geom_Curve
    :rtype: OCC.wrapper.Standard.Standard_IStream

    """
    return _BinTools.BinTools_CurveSet_ReadCurve(*args)



