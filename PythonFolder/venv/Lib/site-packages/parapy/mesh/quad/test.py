#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""doc"""

import math
from parapy.core import * # @UnusedWildImport
from parapy.geom import * # @UnusedWildImport
from parapy.geom.generic.positioning import VY
from parapy.mesh.quad.globals import c1, c2, c3, c4
from parapy.mesh.quad.main import QuadMesh
from examples.geom.occ.surfaces import SplineSurfaces


class QuadMeshSample1(GeomBase):
    """
    classdoc
    """
    @Part
    def face_in(self):
        return Face([c1, c2, c3, c4])

    @Part
    def mesh(self):
        return QuadMesh(pass_down="face_in",
                        NPointsU=50,
                        NPointsV=50,
                        reverse_c0=True,
                        reverse_c1=True)

class QuadMeshSample2(GeomBase):

    @Input(in_tree=True)
    def surface(self):
        return SplineSurfaces().bsplines[2]
    
    @Part
    def rectangle(self):
        return Rectangle(2, 2, position=ZOX.translate_to(self.surface.bbox.face_center('y')).\
                                            rotate(self.position.Vy, math.radians(45)))
        
    @Part
    def reduced_surface(self):
        return RectangularTrimmedSurface(self.surface, [0, 0.9, 0, 0.9])
    
    @Part
    def project(self):
        return ProjectedCurve(self.rectangle, self.surface, -VY)

    @Part
    def face_in(self):
        return TrimmedSurface(self.surface, self.project)

    @Part
    def mesh(self):
        return QuadMesh(pass_down="reduced_surface.brep->face_in",
                        NPointsU=50,
                        NPointsV=50)


class QuadMeshSamples(GeomBase):
    
    sample1 = Part(QuadMeshSample1)
    sample2 = Part(QuadMeshSample2)


if __name__ == '__main__':
    
    from parapy.gui import display
    obj = QuadMeshSamples()
    display(obj)
