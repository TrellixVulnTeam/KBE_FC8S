#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""File to get some UDF 1D distributions"""

from math import *  # @UnusedWildImport

from parapy.core import Attribute, Input
from parapy.geom import GeomBase


def cosine(N, theta1=0, theta2=90, L1=0, L2=1, A=1):
    """Half cosine distribution || |  |   |    |     |

    :param int N: number of segments
    :param float theta1: start angle
    :param float theta2: end angle
    :param float L1: start length
    :param float L2: end length
    :param float A: amplitude
    :rtype: list[float]
    """
    fn = lambda t: A * cos(t)
    theta1 = radians(theta1)
    theta2 = radians(theta2)
    dL = L2 - L1
    dt = (theta2 - theta1) / N
    Dt = (fn(theta1) - fn(theta2))
    Ls = []
    for i in range(0, N):
        theta_i = theta1 + dt * i
        L = L1 + (fn(theta1) - fn(theta_i)) / Dt * dL
        Ls.append(L)
    Ls.append(L2)
    return Ls


def full_cosine(N, theta1=0, theta2=180, L1=0, L2=1):
    """Full cosine distribution || |  |   |    |     |     |    |   |  | ||

    :param int N: number of segments
    :param float theta1: start angle
    :param float theta2: end angle
    :param float L1: start length
    :param float L2: end length
    :param float A: amplitude
    :rtype: list[float]
    """
    return cosine(N, theta1=theta1, theta2=theta2, L1=L1, L2=L2)


def sine(N, theta1=0, theta2=90, L1=0, L2=1, A=1):
    """
    Half sine distribution |     |    |   |  | ||
    N = number of segments.
    """
    fn = lambda t: A * sin(t)

    theta1 = radians(theta1)
    theta2 = radians(theta2)
    dL = L2 - L1
    dt = (theta2 - theta1) / N
    Dt = (fn(theta2) - fn(theta1))
    res = []
    for i in range(0, N):
        theta_i = theta1 + dt * i
        L = L1 + (fn(theta_i) - fn(theta1)) / Dt * dL
        res.append(L)
    res.append(L2)
    return res


def sine_adapt(N, theta1=0, theta2=90, L1=0, L2=1, A=1):
    """
    Half sine distribution |     |    |   |  | ||
    N = number of segments.
    """
    fn = lambda t: A * sin(t) if t <= 0.5 * pi else 2 - A * cos(t - 0.5 * pi)

    theta1 = radians(theta1)
    theta2 = radians(theta2)
    dL = L2 - L1
    dt = (theta2 - theta1) / N
    Dt = (fn(theta2) - fn(theta1))
    res = []
    for i in range(0, N):
        theta_i = theta1 + dt * i
        L = L1 + (fn(theta_i) - fn(theta1)) / Dt * dL
        res.append(L)
    res.append(L2)
    return res


def full_sine(N, theta1=0, theta2=180, L1=0, L2=1):
    """
    Full sine distribution |     |    |   |  | ||| |  |   |    |      |
    N = number of segments.
    """
    fn = lambda t: sin(t) if t <= 0.5 * pi else 2 - cos(t - 0.5 * pi)

    theta1 = radians(theta1)
    theta2 = radians(theta2)
    dL = L2 - L1
    dt = (theta2 - theta1) / N
    Dt = (fn(theta2) - fn(theta1))
    res = []
    for i in range(0, N):
        theta_i = theta1 + dt * i
        L = L1 + (fn(theta_i) - fn(theta1)) / Dt * dL
        res.append(L)
    res.append(L2)
    return res


def solve(Ls, s1):
    """Given a list of segments and forced starting point, moves points."""
    L1 = Ls[0]
    LN = Ls[-1]
    L2 = Ls[1]
    dL = LN - L2
    s1_orig = L2 - L1
    ds = s1 - s1_orig
    res = [L1]
    for Li_orig in Ls[1:]:
        Li = Li_orig + (1 - (Li_orig - L2) / dL) * ds
        res.append(Li)
    return res


class DistributionPrinter(GeomBase):
    lengths = Input()

    @Attribute(in_tree=True)
    def points(self):
        pos = self.position
        return [pos(x=l) for l in self.lengths]


if __name__ == '__main__':
    from parapy.gui import display

    Ls_orig = sine(50, A=3)
    Ls_new = solve(Ls_orig, 0.1)
    print(sine(10, A=1))
    print(sine(10, A=3))

    obj = DistributionPrinter(lengths=Ls_orig)
    display(obj)
