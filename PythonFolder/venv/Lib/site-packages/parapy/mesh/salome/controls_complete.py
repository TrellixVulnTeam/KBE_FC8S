#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from parapy.core import Input
from parapy.core.part import PartNoParsing
from parapy.mesh.core.controls import Controls
from parapy.mesh.salome.netgen import Tri, Tetra, _NETGEN_Hypothesis


class TriControls(Controls, _NETGEN_Hypothesis):
    """Utility to quickly make a 2d NETGEN triangle mesh for one solid.

    Usage:

    >>> from parapy.geom import Box
    >>> from parapy.mesh.salome import FixedNumber, Mesh
    >>> solid = Box(1, 1, 1)
    >>> nb_segments = 4
    >>> hyp_1d2d = TriControls(shape=solid, nb_seg_per_edge=nb_segments)
    >>> mesh = Mesh(shape_to_mesh=solid, controls=hyp_1d2d)
    >>> len(mesh.grid.faces)
    190
    """

    #: Solid, Shell, Face or Surface
    #: :type: parapy.geom.BRep | parapy.geom.Surface
    shape_to_mesh = Input(defaulting=True)

    #: Solid, Shell, Face or Surface
    #: :type: parapy.geom.BRep | parapy.geom.Surface
    shape = Input(shape_to_mesh)

    solid = PartNoParsing(Tri)
    solid.pass_down=("shape, max_size, fineness, growth_rate, "
                     "nb_seg_per_edge, nb_seg_per_radius, second_order, "
                     "optimize")
    solid.bind_child_rule(only_2d=False)


class TetraControls(Controls, _NETGEN_Hypothesis):
    """
    Utility to quickly make structured 3d netgen mesh for one solid.

    Usage:

    >>> from parapy.geom import Box
    >>> from parapy.mesh.salome import FixedNumber, Mesh
    >>> solid = Box(1, 1, 1)
    >>> nb_segments = 4
    >>> hyp_1d2d = TetraControls(shape=solid, nb_seg_per_edge=nb_segments)
    >>> mesh = Mesh(shape_to_mesh=solid, controls=hyp_1d2d)
    """

    #: Solid to put a volume tetra mesh on.
    #: :type: parapy.geom.BRep
    shape_to_mesh = Input(defaulting=True)
    #: Solid to put a volume tetra mesh on.
    #: :type: parapy.geom.BRep
    shape = Input(shape_to_mesh)

    solid = PartNoParsing(Tetra)
    solid.pass_down=("shape, max_size, fineness, growth_rate, "
                     "nb_seg_per_edge, nb_seg_per_radius, "
                     "second_order, optimize")
    solid.bind_child_rule(only_3d=False)
