#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""some utilities"""

import os
import sys
from OCC.wrapper.Quantity import Quantity_Color, Quantity_TOC_RGB


def convert_parameters(curve, parameters):
    """Salome fixed points algorithms uses curve parameterization from [0-1]
    based on arc_length.
    Some curves, however, may not be parameterized on basis of length,
    here you can do conversion.

    :param parapy.geom.Curve curve: The curve on which the u-``parameters``
        lie.
    :param collections.Iterable[float] parameters: u parameters on ``curve`` to
        convert.
    :rtype: list[float]
    """
    L = curve.length
    return [curve.get_length(u2=p)/L for p in parameters]


def RGB2QuantityColor(color):
    """Convert an RHB ``color`` to a :class:`OCC.Quantity.Quantity_Color`
    instance.

    :param collections.Sequence[int, int, int] color: Should be a sequence of
    :rtype: OCC.Quantity.Quantity_Color
    """
    return Quantity_Color(color[0] / 255, color[1] / 255, color[2] / 255,
                          Quantity_TOC_RGB)


# adapted http://www.greghaskins.com/2011/python-forcibly-redirect-stdout-stderr-from-extension-modules.html
class SuppresStdOut:
    """Context manager which uses file descriptors to suppress
    output to stdout (also from C extension modules), optionally
    redirecting to the named file(s). If ``stdout`` is False/None,
    this context does nothing.

    Usage:

    >>> from sys import stdout
    >>> with SuppresStdOut():
    ...     stdout.write("This is not printed")
    """
    # doctest doesn't work due to the doctest runner and stdout

    def __init__(self, stdout=os.devnull, mode='w'):
        self.stdout = stdout
        self.mode = mode

    def __enter__(self):
        if self.stdout:
            # save previous stdout/stderr
            self.old_stdout = old_stdout = sys.__stdout__
            self.fd = fd = old_stdout.fileno()
            self.saved_fd = os.dup(fd)
            # flush any pending output
            old_stdout.flush()

            buffering = 'b' not in self.mode  # text-streams should be buffered
            self.null_stream = null_stream = open(self.stdout, self.mode,
                                                  buffering)
            # overwrite file objects and low-level file descriptors
            os.dup2(null_stream.fileno(), fd)

    def __exit__(self, *args):
        if self.stdout:
            # flush any pending output
            self.old_stdout.flush()
            # restore original streams and file descriptors
            os.dup2(self.saved_fd, self.fd)
            sys.stdout = self.old_stdout
            # clean up
            self.null_stream.close()
        return False


if __name__ == '__main__':

    print("This is not going to fall on deaf ears")

    with SuppresStdOut():
        print("This is going to fall on deaf ears")
