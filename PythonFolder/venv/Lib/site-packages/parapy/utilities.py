#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import functools
import warnings

from parapy.core.exceptions import ParaPyDeprecationWarning


def deprecated(function_or_class=None, replaced_by=None, stacklevel=2,
               repr=None, repr_init_as_class=True, base_is_alias=False,
               category=ParaPyDeprecationWarning):
    """Decorator to deprecate a function or a class. Will show a
    ParaPyDeprecationWarning if deprecated function is called or class is
    instantiated. Usage:

    >>> # functions
    >>> def foo(a):
    ...     return a + 1
    ...
    >>> @deprecated
    ... def bar(*args, **kwargs):
    ...     return foo(*args, **kwargs)
    ...
    >>> bar(1)  # doctest: +SKIP
    ParaPyDeprecationWarning: <function bar at ...> has been deprecated.
    2
    >>> @deprecated(replaced_by=foo)
    ... def bar(*args, **kwargs):
    ...     return foo(*args, **kwargs)
    ...
    >>> bar(1)  # doctest: +SKIP
    ParaPyDeprecationWarning: <function bar ...> has been deprecated. Use <function foo ...> instead.
    2

    >>> # slots (use name)
    >>> from parapy.core import Attribute, Base
    >>> class Foo(Base):
    ...     @Attribute
    ...     @deprecated(repr="Foo.foo", stacklevel=4)
    ...     def foo(self):
    ...         return 1
    ... 
    ...     @Attribute
    ...     @deprecated(repr="Foo.bar", replaced_by="Foo.qux", stacklevel=4)
    ...     def bar(self):
    ...         return 1
    ... 
    >>> obj = Foo()
    >>> obj.foo  # doctest: +SKIP
    ParaPyDeprecationWarning: Foo.foo has been deprecated.
    1
    >>> obj.bar  # doctest: +SKIP
    ParaPyDeprecationWarning: Foo.bar has been deprecated. Use Foo.qux instead.
    1

    >>> # classes
    >>> @deprecated
    ... class Bar(Foo):
    ...     pass
    ...
    >>> Bar()  # doctest: +SKIP
    ParaPyDeprecationWarning: <class '__main__.Bar'> has been deprecated.
    <Bar root ...>
    >>> @deprecated(base_is_alias=True)
    ... class Bar(Foo):
    ...     pass
    ...
    >>> Bar()  # doctest: +SKIP
    ParaPyDeprecationWarning: <class '__main__.Bar'> has been deprecated. Use <class '__main__.Foo'> instead.
    <Bar root ...>

    :param function_or_class: function or class to deprecate
    :param replaced_by: append :py:`"Use {replaced_by} instead".
    :param int stacklevel: see warnings.warn
    :param repr: object that is used to display :py:`"{repr} has been
        deprecated". If not specified, ``function_or_class`` object is used.
    :param bool repr_init_as_class: show class object instead of ``__init__``
        method (if that was decorated).
    :param bool base_is_alias: if class is decorated, base class is used as
        ``replaced_by``.
    :param category: Warning class, e.g. ``warnings.UserWarning``.
    """
    if not function_or_class:
        return functools.partial(
            deprecated, replaced_by=replaced_by, stacklevel=stacklevel,
            repr=repr, repr_init_as_class=repr_init_as_class,
            base_is_alias=base_is_alias, category=category)

    if isinstance(function_or_class, type):  # class
        class_ = function_or_class
        replaced_by = None
        if base_is_alias:
            if replaced_by:
                msg = "Don't specify replaced_by if base_is_alias"
                raise ValueError(msg)
            bases = class_.__bases__
            if len(bases) != 1:
                msg = "If base_is_alias, only 1 base class allowed"
                raise RuntimeError(msg)
            replaced_by = bases[0]

        class_.__init__ = deprecated(
            class_.__init__, replaced_by=replaced_by, stacklevel=stacklevel,
            repr=class_, repr_init_as_class=False, base_is_alias=False,
            category=category)
        return class_

    else:  # function
        function = function_or_class
        if repr_init_as_class and function.__name__ != "__init__":
            repr_init_as_class = False

        def wrapper(*args, **kwargs):
            repr_ = repr
            if repr_init_as_class:
                self = args[0]
                repr_ = type(self)
            elif not repr:
                repr_ = function

            msg = "{} has been deprecated.".format(repr_)
            if replaced_by:
                msg += " Use {} instead.".format(replaced_by)
            warnings.warn(msg, category, stacklevel=stacklevel)
            return function(*args, **kwargs)

        return try_update_wrapper(wrapper, function)


def try_update_wrapper(wrapper, wrapped):
    try:
        wrapper = functools.update_wrapper(wrapper, wrapped)
    except:  # can fail, e.g. object.__init__() can't be wrapped in PY2
        # most probably __module__ attribute is missing
        try:
            assigned = ('__name__', '__doc__')
            wrapper = functools.update_wrapper(
                wrapper, wrapped, assigned=assigned)
        except:
            pass  # give up

    return wrapper


if __name__ == '__main__':
    from parapy.core import Base, Attribute

    # usage 1: functions
    def foo(a):
        return a + 1

    @deprecated
    def bar(*args, **kwargs):
        return foo(*args, **kwargs)

    bar(1)

    @deprecated(replaced_by=foo)
    def bar(*args, **kwargs):
        return foo(*args, **kwargs)

    bar(1)

    # usage 2: slots
    class Foo(Base):
        @Attribute
        @deprecated(repr="Foo.foo", stacklevel=4)
        def foo(self):
            return 1

        @Attribute
        @deprecated(repr="Foo.bar", replaced_by="Foo.qux", stacklevel=4)
        def bar(self):
            return 1

    obj = Foo()
    obj.foo
    obj.bar

    # usage 3: classes
    @deprecated
    class Bar(Foo):
        pass

    Bar()

    @deprecated(base_is_alias=True)
    class Bar(Foo):
        pass

    Bar()

