#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper.BRepPrimAPI import BRepPrimAPI_MakeHalfSpace
from OCC.wrapper.gp import gp_Pnt
from OCC.utils.top import find_uv_in_face

from parapy.core import Attribute, Input, derived
from parapy.geom.occ.solid import Solid_
from parapy.geom.occ.surface import Plane
from parapy.geom.occ.utilities import downcast_topods_shape

__all__ = ["HalfSpaceSolid"]


class HalfSpaceSolid(Solid_):
    """A half-space is an infinite solid, limited by a surface
    :attr:`built_from`. It is built from either a face or a shell,
    that bounds it, and with a reference :attr:`point` that specifies the
    side of the surface where matter of the half-space is located. A
    half-space is a tool commonly used in topological operations to cut
    another shape. The reference :attr:`point` if optional. If not
    specified, a default point will be created using an arbitrary point on
    the input surface offset in the direction of the local normal vector or
    opposite if :attr:`flip_normal` is True. Usage:

    >>> from parapy.geom import Plane, Box, SubtractedSolid, HalfSpaceSolid
    >>> solid = Box(1, 1, 1, centered=True)
    >>> # remove top half of box with half-space above Plane
    >>> srf_plane = Plane()
    >>> tool = HalfSpaceSolid(srf_plane)
    >>> sub = SubtractedSolid(solid, tool)  # doctest: +ELLIPSIS
    >>> sub.volume  # doctest: +ELLIPSIS
    0.499...
    >>> sub.cog
    Point(0, 0, -0.25)
    >>> # for the other side
    >>> tool = HalfSpaceSolid(srf_plane, flip_normal=True)
    >>> sub = SubtractedSolid(solid, tool)
    >>> sub.cog
    Point(0, 0, 0.25)

    .. caution:: if you use a half-space solid to cut another shape, make sure
        the half-space fully intersects the target shape. If not, auxiliary
        faces may be *baked* into the target shape or the result may not
        even exist at all.
    """

    __initargs__ = ["built_from", "point"]

    #: Surface from which to create a HalfSpaceSolid.
    #: :type: parapy.geom.occ.surface.Surface or shell
    built_from = Input()

    #: A point determines on which side of provided surface solid lies. This
    #: input is optional. By default, the positive side is defined by
    #: translating an arbitrary point on the surface along it's local normal.
    #: To get the opposite half-space, consider using :attr:`flip_normal`.
    #: :type: parapy.geom.Point
    point = Input(derived)

    #: Flip the (local) face normal used to place the default :attr:`point`?
    #: :type: bool
    flip_normal = Input(False)

    @point.getter
    def point(self):
        """A point determines on which side of provided surface solid lies.
        This input is optional. By default, the positive side is defined by
        translating an arbitrary point on the surface along it's local normal.

        :rtype: parapy.geom.Point
        :raises RuntimeError: if point could not be found. Specify one
            yourself.
        """
        built_from = self.built_from
        if isinstance(built_from, Plane):
            point, normal = built_from.location, built_from.plane_normal
        else:
            srf = built_from.faces[0]
            topods_face = srf.TopoDS_Face
            try:
                u, v = find_uv_in_face(topods_face)
            except RuntimeError as e:
                print(e)
                msg = ("Couldn't find a point on the input shape {}. Please "
                       "specify 'point' Input. Object: {}.")
                raise RuntimeError(msg.format(built_from, self))
            else:
                point, normal = srf.point(u, v), srf.normal(u, v)

        factor = 0.1

        if self.flip_normal:
            factor *= -1

        return point + factor * normal

    @Attribute
    def builder(self):
        """The builder object that constructs this :class:`HalfSpaceSolid`.

        :rtype: OCC.BRepPrimAPI.BRepPrimAPI_MakeHalfSpace
        :raises RuntimeError: If construction of the HalfSpaceSolid fails.
        """
        s = self.built_from.TopoDS_Shape
        st = s.ShapeType()
        if st in {3, 4}:
            s = downcast_topods_shape(s)
        else:
            # TODO (TBD): show intuitive shape type here.
            msg = "Shape is not a valid face or shell, but shapetype: {:}."
            raise RuntimeError(msg.format(st))

        point = self.point
        builder = BRepPrimAPI_MakeHalfSpace(s, gp_Pnt(*point))
        if builder.IsDone():
            return builder
        else:
            msg = "BRepPrimAPI_MakeHalfSpace failed."
            raise RuntimeError(msg)

    @Attribute
    def TopoDS_Shape(self):
        """The brep shape representing this :class:`HalfSpaceSolid`.

        :rtype: OCC.TopoDS.TopoDS_Solid
        """
        return self.builder.Solid()

if __name__ == '__main__':
    from parapy.gui import display
    from parapy.geom import Box, SubtractedSolid

    solid = Box(1, 1, 1, centered=True)
    surf = Plane()
    obj = HalfSpaceSolid(surf)
    subtr = SubtractedSolid(solid, obj)
    display((solid, subtr))
