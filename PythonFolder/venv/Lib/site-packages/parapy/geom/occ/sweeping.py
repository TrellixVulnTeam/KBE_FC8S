#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Sweeps are objects you obtain by sweeping a profile along a path."""

import math

from OCC.wrapper.BRepPrimAPI import BRepPrimAPI_MakeRevol
from OCC.wrapper.gp import gp_Ax1, gp_Dir, gp_Pnt

from parapy.core import Attribute, Input
from parapy.geom.generic.positioning import Point
from parapy.geom.occ.curve import Curve
from parapy.geom.occ.face import PlanarFace
from parapy.geom.occ.primitives import check_IsDone
from parapy.geom.occ.solid import _SweptSolid
from parapy.geom.occ.wire import Polygon, Wire

TWO_PI = 2 * math.pi


class RevolvedSolid(_SweptSolid):
    """Revolve a :attr:`built_from` shape over :attr`:angle` around
    :attr`center` with rotation vector :attr`direction`. to make a solid.

    The :attr:`built_from`: shape may be a curve / wire. If it's open and
    :attr:`force_closure` is True, this object will try to make closed planar
    face by joining the curve/wire endpoint to the rotation axis in order to
    from a closed contour. Alternatively, you can specify your own Face (not
    necessarily planar).

    Usage:

    >>> from parapy.geom import (Point, Polygon, PolygonalFace, RevolvedSolid,
    ...                          Vector)
    >>> # open wire
    >>> points = (Point(1, 0, 0), Point(1, 0, 5), Point(2, 0, 5.5), Point(2, 0, 7))
    >>> built_from = Polygon(points=points, force_closure=False)
    >>> obj1 = RevolvedSolid(label="from open wire",
    ...                      built_from=built_from,
    ...                      center=Point(0, 0, 0),
    ...                      direction=Vector(0, 0, 1))

    >>> # closed face
    >>> points = (Point(0, 0, 0), Point(1, 0, 0), Point(1, 0, 5), Point(2, 0, 5.5),
    ...           Point(2, 0, 7), Point(0, 0, 7))
    >>> built_from = PolygonalFace(points=points)
    >>> obj2 = RevolvedSolid(label="From face",
    ...                      built_from=built_from,
    ...                      center=Point(0, 0, 0),
    ...                      direction=Vector(0, 0, 1))

    """
    __initargs__ = "built_from", "center", "direction", "angle"

    #: :type: parapy.geom.occ.curve.Curve | parapy.geom.occ.face.Face_
    built_from = Input()

    #: Center of revolution.
    #: :type: Point
    center = Input()

    #: Firection of revolution.
    #: :type: Vector
    direction = Input()

    #: Angle of revolution, ``None`` (i.e. ``2 * math.pi``) by default.
    #: :type: float | None
    angle = Input(TWO_PI)

    #: If :attr`built_from` is an open curve / wire, try to make a closed
    #: planar face from it. If this fails, specify your own face in
    # :attr:`built_from`.
    force_closure = Input(True)

    @Attribute
    def is_partial(self):
        """Full revolution or partial?

        :rtype: bool
        """
        mod_angle = math.fmod(self.angle, TWO_PI)
        return not math.isclose(mod_angle, 0)

    @Attribute
    def bottom_face(self):
        """First shape of revolution, only returns a Face if :attr:`angle`
        is not a multiple of 2 PI (represents a complete revolution).

        :rtype: parapy.geom.occ.face.Face_ | None
        """
        if self.is_partial:
            topods_shape = self.builder.FirstShape()
            return self._TopoDS2Shape(topods_shape)
        else:
            return None

    @Attribute
    def top_face(self):
        """Last shape of revolution, only returns a Face if :attr:`angle`
        is not a multiple of 2 PI (represents a complete revolution).

        :rtype: parapy.geom.occ.face.Face_ | None
        """
        if self.is_partial:
            topods_shape = self.builder.LastShape()
            return self._TopoDS2Shape(topods_shape)
        else:
            return None

    @Attribute
    def _built_from_face(self):
        built_from = self.built_from
        if isinstance(built_from, Curve):
            if not built_from.is_closed and self.force_closure:
                center = self.center
                direction = self.direction
                start, end = built_from.start, built_from.end

                pt1 = Point.project(end, center, direction)
                pt2 = Point.project(start, center, direction)

                # start/end point may already coincide with line, skip if true
                pts = []
                if pt1.is_almost_equal(end):
                    pts.append(end)
                else:
                    pts.extend([end, pt1])  # add new linesegment

                if pt2.is_almost_equal(start):
                    pts.append(start)
                else:
                    pts.extend([pt2, start])  # add new linesegment

                polygon = Polygon(points=pts,
                                  force_closure=False)
                wire = Wire(curves_in=[built_from, polygon])
                built_from = PlanarFace(island=wire)
        return built_from

    @Attribute
    def builder(self):
        s = self._built_from_face.TopoDS_Shape
        a = gp_Ax1(gp_Pnt(*self.center), gp_Dir(*self.direction))
        if self.is_partial:
            d = self.angle
            builder = BRepPrimAPI_MakeRevol(s, a, d, True)
        else:
            builder = BRepPrimAPI_MakeRevol(s, a, True)
        return check_IsDone(builder)


if __name__ == '__main__':
    from parapy.geom import PolygonalFace, Vector
    from parapy.gui import display

    # implicit open wire
    points = (Point(1, 0, 0), Point(1, 0, 5), Point(2, 0, 5.5), Point(2, 0, 7))
    built_from = Polygon(points=points, force_closure=False)
    obj2 = RevolvedSolid(label="from open wire",
                         built_from=built_from,
                         center=Point(0, 0, 0),
                         direction=Vector(0, 0, 1))

    # explicit closed face
    points = (Point(0, 0, 0), Point(1, 0, 0), Point(1, 0, 5), Point(2, 0, 5.5),
              Point(2, 0, 7), Point(0, 0, 7))
    built_from = PolygonalFace(points=points)
    obj1 = RevolvedSolid(label="From face",
                         built_from=built_from,
                         center=Point(0, 0, 0),
                         direction=Vector(0, 0, 1))

    display((obj1, obj2))
