#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Local boolean operations"""

from OCC.wrapper.BRepFeat import BRepFeat_MakePrism

from parapy.core import Attribute, HiddenPart, Input, derived
from parapy.geom.occ.solid import Solid_


class Pad(Solid_):
    """Adds or removes material to a solid, :attr:`solid_in`. A closed
    :attr:`wire`, projected on a :attr:`face` of the solid, is translated
    along the normal vector of the face by a distance, :attr:`height`. The
    material between these two wires is added to the original solid if
    :attr:`add_material` is set to True. The material between the wires can
    be removed by setting :attr:`add_material` to False. Usage:

    >>> from parapy.geom.occ.pad import Pad
    >>> from parapy.geom import Box, Cylinder, Vector
    >>> box = Box(1, 1, 1, centered=True)
    >>> cylinder = Cylinder(radius=0.3, height=1, centered=True)
    # Remove material
    >>> pad1 = Pad(solid_in=box, wire=cylinder.top_face.outer_wire, height=0.5,
    ...            direction=Vector(0, 0, -1), face=box.top_face,
    ...            add_material=False)
    # Add material (add_material defaults to True)
    >>> pad2 = Pad(solid_in=box, wire=cylinder.top_face.outer_wire, height=0.5,
    ...            face=box.top_face, direction=Vector(0, 0, 1))
    """
    
    __initargs__ = ["solid_in", "wire", "face", "direction", "height", "add_material"]

    #: :type: Solid_
    solid_in = Input()

    #: closed curve on a face of the solid
    #: :type: Wire_
    wire = Input()

    #: the face of the solid on which the padding will be done
    #: :type: Wire_
    face = Input()

    #: :type: float
    height = Input()

    #: :type: Vector
    direction = Input()

    #: If False, material is removed. If True, material is added. Defaults
    #: to True.
    #: :type: bool
    add_material = Input(True)

    BUILDERKEY = "Shape"

    @HiddenPart
    def base_face(self):
        return TrimmedSurface(self.face, self.wire)

    @Attribute
    def builder(self):
        builder = BRepFeat_MakePrism(self.solid_in.TopoDS_Shape,
                                     self.base_face.TopoDS_Shape,
                                     self.face.TopoDS_Face,
                                     self.direction.gp_Dir,
                                     self.add_material,
                                     False)
        builder.Perform(self.height)
        if builder.IsDone():
            return builder
        else:
            raise Exception("pad operation failed: %s" % builder.CurrentStatusError())


class Protrusion(Pad):
    """Adds material to a solid, :attr:`solid_in`. A closed :attr:`wire`,
    projected on a :attr:`face` of the solid, is translated from the solid
    along the normal vector of the face by a distance, :attr:`height`. The
    material between these two wires is added to the original solid. Usage:

    >>> from parapy.geom.occ.pad import Protrusion
    >>> from parapy.geom import Box, Cylinder
    >>> box = Box(1, 1, 1, centered=True)
    >>> cylinder = Cylinder(radius=0.3, height=1, centered=True)
    >>> obj = Protrusion(solid_in=box, wire=cylinder.top_face.outer_wire,
    ...                  face=box.top_face, height=0.5)
    """
    
    __initargs__ = ["solid_in", "wire", "face", "height"]

    #: :type: Vector
    direction = Input(derived)
    add_material = Attribute(True)
    
    def _get_direction(self):
        return self.base_face.uv_center_normal



class Depression(Pad):
    """Removes material from a solid, :attr:`solid_in`. A closed :attr:`wire`,
    projected on a :attr:`face` of the solid, is translated into the solid
    along the normal vector of the face by a distance, :attr:`height`. The
    material between these two wires is removed. Usage:

    >>> from parapy.geom.occ.pad import Depression
    >>> from parapy.geom import Box, Cylinder
    >>> box = Box(1, 1, 1, centered=True)
    >>> cylinder = Cylinder(radius=0.3, height=1, centered=True)
    >>> obj = Depression(solid_in=box, wire=cylinder.top_face.outer_wire,
    ...                  face=box.top_face, height=0.5)
    """
    
    __initargs__ = ["solid_in", "wire", "face", "height"]

    #: :type: Vector
    direction    = Input(derived)
    add_material = Attribute(False)

    def _get_direction(self):
        return -self.base_face.uv_center_normal


if __name__ == '__main__':
    
    from parapy.geom import *
    from parapy.gui import display
    c = Cube(1)
    w = Rectangle(0.2, 0.2, position=OXY(z=1,x=0.5,y=0.5))
    prot = Protrusion(c, w, c.top_face, 0.5)
    depr = Depression(c, w, c.top_face, 0.5)
    display([prot, depr])
