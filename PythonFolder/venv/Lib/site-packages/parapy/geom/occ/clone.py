#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""To clone existing geometry or topology, you use the Clone class"""

from OCC.wrapper.Geom import (
    Handle_Geom_Curve, Handle_Geom_Geometry, Handle_Geom_Surface)
from OCC.wrapper.Geom2d import Handle_Geom2d_Curve
from OCC.wrapper.TopoDS import TopoDS_Shape
from OCC.utils.utilities import handle_is_instance

from parapy.core import Input
from parapy.core.abstract import ParaPyObject
from parapy.geom.occ.brep import BRep, ClonedShape
from parapy.geom.occ.curve import ClonedCurve, Curve
from parapy.geom.occ.curve2d import ClonedCurve2d, Curve2d
from parapy.geom.occ.drawable import DrawableShape
from parapy.geom.occ.surface import Surface
from parapy.geom.occ.transform import ClonedSurface


def Geom2ParaPy(obj):
    """Tries to find most corresponding ParaPy class to any geometry
    object, be it another ParaPy
    object or an :class:`OCC.Geom.Handle_Geom_Geometry`,
    :class:`OCC.TopoDS.TopoDS_Shape`.

    :type obj: BRep|Curve|Surface|Curve2d|TopoDS_Shape|Handle_Geom_Geometry|Handle_Geom_Surface|ClonedCurve2d
    :returns: :class:`ClonedShape`, :class:`ClonedCurve`,
        :class:`ClonedSurface`, :class:`ClonedCurve2d`
    :rtype: parapy.core.meta.basetype
    :raises Exception: if ``obj`` does not have a supported type.
    """
    # ParaPy objects
    if isinstance(obj, ParaPyObject):
        if isinstance(obj, BRep):
            return ClonedShape
        elif isinstance(obj, Curve):
            return ClonedCurve
        elif isinstance(obj, Surface):
            return ClonedSurface
        elif isinstance(obj, Curve2d):
            return ClonedCurve2d
        raise Exception("built_from was not Curve, Surface or BRep, but:", obj)

    # OCC instances
    else:
        if isinstance(obj, TopoDS_Shape):
            return ClonedShape
        elif handle_is_instance(obj, Handle_Geom_Geometry):
            if handle_is_instance(obj, Handle_Geom_Curve):
                return ClonedCurve
            elif handle_is_instance(obj, Handle_Geom_Surface):
                return ClonedSurface
        elif handle_is_instance(obj, Handle_Geom2d_Curve):
            return ClonedCurve2d

        raise Exception("built_from was not a ParaPyObject, "
                        "OCC.Handle_Geom_Geometry, "
                        "OCC.Handle_Geom2d_Curve, or "
                        "OCC.TopoDS_Shape, but:", obj)


class Clone(DrawableShape):
    """Can be used to make a new clone of an existing curve(s) or
    OCC.Handle_Geom_Curve(s).

    * parapy.geom.Curve, parapy.geom.Surface or parapy.geom.BRep
    * OCC.Geom.Handle_Geom_Curve, OCC.Geom.Handle_Geom2d_Curve,
      OCC.Geom.Handle_Geom_Surface, OCC.TopoDS_Shape.

    Usage:

    >>> from parapy.geom import Clone, BezierCurve, Point
    >>> pts = [Point(0, 0, 0), Point(0, 1, 0), Point(1, 1, 0), Point(1, 0, 0)]
    >>> crv = BezierCurve(control_points=pts)
    >>> obj = Clone(built_from=crv)
    """

    __initargs__ = ["built_from"]
    __newargs__ = ["built_from"]

    #: The object to clone. Can be another curve, Edge or Handle_Geom_Curve.
    #: :type: BRep|Curve|Surface|Curve2d|TopoDS_Shape|Handle_Geom_Geometry|Handle_Geom_Surface|ClonedCurve2d
    built_from = Input()

    @classmethod
    def make(cls, built_from, *args, **kwargs):
        """Deals with single objects.

        :type built_from: BRep|Curve|Surface|Curve2d|TopoDS_Shape|Handle_Geom_Geometry|Handle_Geom_Surface|ClonedCurve2d
        :returns: :class:`ClonedShape`, :class:`ClonedCurve`,
            :class:`ClonedSurface`, :class:`ClonedCurve2d`
        :rtype: parapy.core.meta.basetype
        """
        return Geom2ParaPy(built_from)(built_from, *args, **kwargs)

    def __new__(cls, built_from, *args, **kwargs):
        """tests for iterables

        :type built_from: BRep|Curve|Surface|Curve2d|TopoDS_Shape|Handle_Geom_Geometry|Handle_Geom_Surface|ClonedCurve2d
        :returns: :class:`ClonedShape`, :class:`ClonedCurve`,
            :class:`ClonedSurface`, :class:`ClonedCurve2d`
        :rtype: parapy.core.meta.basetype
        """
        if hasattr(built_from, "__iter__"):
            return [cls.make(obj, *args, **kwargs) for obj in built_from]
        else:
            return cls.make(built_from, *args, **kwargs)
