#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Description of the code"""

from OCC.wrapper.BRep import BRep_Tool_Pnt, BRep_Tool_Parameters
from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeVertex
from OCC.wrapper.TopAbs import TopAbs_VERTEX
from OCC.utils.top import downcast_shape

from parapy.core import Input, Attribute
from parapy.geom.occ.patched.gp import * # @UnusedWildImport
from parapy.geom.occ.brep import BRep


class Vertex_(BRep):
    """OCC TopoDS_Vertex representation holder.

    Usage:

    >>> from parapy.geom.occ.vertex import Vertex_
    >>> from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeVertex
    >>> from OCC.wrapper.gp import gp_Pnt
    >>> point = gp_Pnt(1.1, 2.2, 3.3)
    >>> builder = BRepBuilderAPI_MakeVertex(point)
    >>> pt = Vertex_(builder=builder)
    >>> pt.point
    Point(1.1, 2.2, 3.3)

    """

    TOPODIM = 0
    TOPOLEVEL = 7 # 7: Vertex, 6: Edge, 5: Wire, 4: Face,
                  # 3: Shell, 2: Solid, 1: CompSolid, 0: Compound

    @Attribute
    def TopoDS_Vertex(self):
        """
        :rtype: OCC.TopoDS.TopoDS_Vertex
        """
        return downcast_shape(self.TopoDS_Shape, TopAbs_VERTEX)
    
    @Attribute
    def gp_Pnt(self):
        """
        :rtype: OCC.gp.gp_Pnt
        """
        return self.point.gp_Pnt

    @Attribute
    def point(self):
        """
        :rtype: parapy.geom.Point | parapy.geom.Position
        """
        return BRep_Tool_Pnt(self.TopoDS_Vertex).point

    @Attribute
    def on_edges(self):
        """
        :rtype: collections.Sequence[parapy.geom.occ.edge.Edge_]
        """
        return self.get_ancestors("edge")

    @Attribute
    def on_faces(self):
        """
        :rtype: collections.Sequence[parapy.geom.occ.edge.Face_]
        """
        return self.get_ancestors("face")

    def parameters(self, face):
        """Return the uv-parameters of the vertex on the ``face``.

        :type face: parapy.geom.Face
        :rtype: tuple[float, float]
        """
        topods_vertex = self.TopoDS_Vertex
        topods_face = face.TopoDS_Face
        pt = BRep_Tool_Parameters(topods_vertex, topods_face)
        return pt.X(), pt.Y()

#     def __iter__(self):
#         return iter(self.point)


# monkey_patch BRep class
BRep.VertexClass = Vertex_


class Vertex(Vertex_):
    """Convert point or position to Vertex.

    Usage:

    >>> from parapy.geom import Vertex, Point, Position
    >>> pnt = Point(1,1,1)
    >>> vert1 = Vertex(pnt)
    >>> vert1.point
    Point(1, 1, 1)
    >>> # alternative way to do the same:
    >>> vert1_alt = Vertex(point=pnt)
    >>> vert1_alt.point
    Point(1, 1, 1)
    >>> # now initialize it with a default position:
    >>> pos = Position()
    >>> vert2 = Vertex(pos)
    >>> vert2.point
    Position(Point(0, 0, 0))
    """
    
    __initargs__ = ["point"]

    #: :type: parapy.geom.Point | parapy.geom.Position
    point = Input()

    @Attribute
    def builder(self):
        """
        :rtype: OCC.BRepBuilderAPI.BRepBuilderAPI_MakeVertex
        """
        return BRepBuilderAPI_MakeVertex(self.point.gp_Pnt)

    @Attribute
    def TopoDS_Shape(self):
        """Give as input, otherwise derive from builder.

        :rtype: OCC.TopoDS.TopoDS_Shape
        """
        return self.builder.Vertex()
