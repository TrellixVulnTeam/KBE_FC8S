#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Monkey-patches on OCC classes"""

from OCC.wrapper.gp import (gp_Pnt, gp_Pnt2d, gp_Dir, gp_Vec, gp_Vec2d, gp_Ax2,
                    gp_Ax3, gp_Trsf, gp_XYZ)
from parapy.geom.generic.positioning import (Point, Vector, Orientation,
                                             Position)


# ==================================================================================================
# Monkey-Patch Some OCC proxy classes for convencience
# ==================================================================================================
def _gp_Pnt_point(self):
    """new method for the gp_Pnt class
    Converts self (gp_Pnt) to Point instance.
    Returns:
        Point"""
    return Point(*self.Coord())


def _gp_Pnt_tuple(self):
    return tuple(self.Coord())


def _gp_Pnt_list(self):
    return self.Coord()


def _gp_Pnt_string(self):
    return "{:1.6f} {:1.6f} {:1.6f}".format(*self.Coord())


def _gp_Pnt2d_point(self):
    """new method for the gp_Pnt class
    Converts self (gp_Pnt) to Point instance.
    Returns:
        Point"""
    return Point(*self.Coord())


def _gp_Pnt2d_tuple(self):
    return tuple(self.Coord())


def _gp_Pnt2d_list(self):
    return self.Coord()


def _gp_Pnt2d_string(self):
    return "{:1.6f} {:1.6f}".format(*self.Coord())


def _gp_Vec_vector(self):
    """new method for the gp_Vec class
    Converts self (gp_Vec) to Vector instance.
    Returns:
        Vector"""
    return Vector(*self.Coord())


def _gp_Vec2d_vector(self):
    """new method for the gp_Vec class
    Converts self (gp_Vec) to Vector instance.
    Returns:
        Vector"""
    return Vector(*self.Coord())


def _gp_Dir_vector(self):
    """new method for the gp_Dir class
    Converts self (gp_Dir) to Vector instance.
    Returns: 
        Vector"""
    return Vector(*self.Coord())


def _gp_Ax2_position(self):
    return Position(self.Location().point,
                    Orientation(self.XDirection().vector,
                                self.YDirection().vector))


def _gp_Ax3_position(self):
    return Position(self.Location().point,
                    Orientation(self.XDirection().vector,
                                self.YDirection().vector))


def _gp_XYZ_point(self):
    return Point(*self.Coord())


def _gp_XYZ_vector(self):
    return Vector(*self.Coord())


def _gp_Trsf_position(self):
    trsl = self.TranslationPart()
    mat = self.HVectorialPart()
    return Position(trsl.point,
                    Orientation(mat.Column(1).vector,
                                mat.Column(2).vector))


gp_Pnt.tuple = property(_gp_Pnt_tuple)
gp_Pnt.list = property(_gp_Pnt_list)
gp_Pnt.string = property(_gp_Pnt_string)
gp_Pnt.point = property(_gp_Pnt_point)
gp_Pnt2d.tuple = property(_gp_Pnt2d_tuple)
gp_Pnt2d.list = property(_gp_Pnt2d_list)
gp_Pnt2d.string = property(_gp_Pnt2d_string)
gp_Pnt2d.point = property(_gp_Pnt2d_point)
gp_Vec.vector = property(_gp_Vec_vector)
gp_Vec2d.vector = property(_gp_Vec2d_vector)
gp_Dir.vector = property(_gp_Dir_vector)
gp_Ax2.position = property(_gp_Ax2_position)
gp_Ax3.position = property(_gp_Ax3_position)
gp_XYZ.point = property(_gp_XYZ_point)
gp_XYZ.vector = property(_gp_XYZ_vector)
gp_Trsf.position = property(_gp_Trsf_position)
