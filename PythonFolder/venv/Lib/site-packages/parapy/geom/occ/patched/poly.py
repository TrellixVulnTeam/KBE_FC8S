#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Monkey-patches some OCC Poly (Array) classes simple for conversion into
Python objects"""

from OCC.wrapper.Poly import Poly_Array1OfTriangle, Poly_Triangle


# =============================================================================
# Poly_Triangle patches
# =============================================================================
def _Poly_Triangle_GetReBasedList(self, start=0, reverse=False):
    tup = reversed(self.Get()) if reverse else self.Get()
    return [x + start for x in tup]


def _Poly_Triangle_GetReBasedTuple(self, start=0, reverse=False):
    tup = reversed(self.Get()) if reverse else self.Get()
    return tuple(x + start for x in tup)


def _Poly_Triangle_GetReBasedString(self, start=0, reverse=False):
    tup = reversed(self.Get()) if reverse else self.Get()
    return "%d %d %d" % tuple(x + start for x in tup)


Poly_Triangle.list_rebased = _Poly_Triangle_GetReBasedList
Poly_Triangle.tuple_rebased = _Poly_Triangle_GetReBasedTuple
Poly_Triangle.string_rebased = _Poly_Triangle_GetReBasedString


# =============================================================================
# Poly_Array1OfTriangle patches
# =============================================================================
def _Poly_Array1OfTriangle_Lists(self):
    return [self.Value(i + 1).Get() for i in range(self.Length())]


def _Poly_Array1OfTriangle_Tuples(self):
    return tuple(self.Value(i + 1).Get() for i in range(self.Length()))


def _Poly_Array1OfTriangle_ListsReBased(self, start=-1, reverse=False):
    return [self.Value(i + 1).list_rebased(start, reverse) for i in
            range(self.Length())]


def _Poly_Array1OfTriangle_StringReBased(self, start=-1, reverse=False):
    return " -1 ".join(
        self.Value(i + 1).string_rebased(start, reverse) for i in
        range(self.Length()))


def _Poly_Array1OfTriangle_TuplesReBased(self, start=-1, reverse=False):
    return tuple(self.Value(i + 1).tuple_rebased(start, reverse) for i in
                 range(self.Length()))


Poly_Array1OfTriangle.lists = property(_Poly_Array1OfTriangle_Lists)
Poly_Array1OfTriangle.tuples = property(_Poly_Array1OfTriangle_Tuples)
Poly_Array1OfTriangle.lists_rebased = _Poly_Array1OfTriangle_ListsReBased
Poly_Array1OfTriangle.tuples_rebased = _Poly_Array1OfTriangle_TuplesReBased
Poly_Array1OfTriangle.string_rebased = _Poly_Array1OfTriangle_StringReBased
