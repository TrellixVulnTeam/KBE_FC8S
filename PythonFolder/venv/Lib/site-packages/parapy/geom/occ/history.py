#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.utils.utilities import TopTools_ListOfShape2list


class HistoryMixin(object):
    """Provides history methods. Assumes implementation of:

    - :meth:`parapy.geom.occ.brep.BRep.builder`
    - :meth:`parapy.geom.occ.brep.BRep._TopoDS2Shape`
    - :meth:`parapy.geom.occ.brep.BRep._TopoDS2Shapes`
    """

    def partner(self, shape, shape_type=None, failure='raise'):
        """Return the shape that is a partner of ``shape``.

        :type shape: parapy.geom.BRep
        :type shape_type: int | None
        :param str failure: one of 'raise', 'warn', 'ignore'
        :rtype: parapy.geom.BRep
        :raises KeyError: if no partner was found.
        """
        topods_shape = shape.TopoDS_Shape
        return self._TopoDS2Shape(
            topods_shape, shape_type=shape_type, failure=failure)

    def has_partner(self, shape, shape_type=None):
        """Does ``shape`` have a partner of ``shape_type`` in the shape
        resulting from this boolean operation.

        :type shape: parapy.geom.BRep
        :type shape_type: int
        :rtype: bool
        """
        topods_shape = shape.TopoDS_Shape
        try:
            self._TopoDS2Shape(topods_shape, shape_type)
        except KeyError:
            return False
        else:
            return True

    def history(self, shape):
        """Method to find the shapes in the current topology derived from given
        ``shape`` during shape evolution. If no link is found to given
        ``shape`` and empty list is returned. Tries various methods in order:

        1. SubShapeHistory.modified()
        2. SubShapeHistory.generated()
        3. SubShapeHistory.partner()

        :param BRep shape:
        :rtype list[BRep]
        """
        lst = self.modified(shape)
        if not lst:
            lst = self.generated(shape)
            if not lst:
                if self.has_partner(shape):
                    lst = [self.partner(shape)]
                else:
                    lst = []
        return lst

    def generated(self, shape):
        """Return list of shapes generated from ``shape``.

        :param BRep shape:
        :rtype: list[BRep]
        """
        if hasattr(self.builder, "Generated"):
            topods_shape = shape.TopoDS_Shape
            mod = self.builder.Generated(topods_shape)
            lst = TopTools_ListOfShape2list(mod)
            return self._TopoDS2Shapes(lst)
        else:
            return []

    def modified(self, shape):
        """Return list of shapes modified from ``shape``.

        :param BRep shape:
        :rtype: list[BRep]
        """
        topods_shape = shape.TopoDS_Shape
        mod = self.builder.Modified(topods_shape)
        lst = TopTools_ListOfShape2list(mod)
        return self._TopoDS2Shapes(lst)

    def is_deleted(self, shape):
        """Return True if the ``shape`` has been deleted.

        :param BRep shape:
        :rtype: bool
        """
        topods_shape = shape.TopoDS_Shape
        return bool(self.builder.IsDeleted(topods_shape))
