#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import os
import warnings

from parapy.core import Base, Part
from parapy.core.attribute import Attribute
from parapy.core.exceptions import ParaPyDeprecationWarning
from parapy.core.input import Input
from parapy.core.validate import Optional, file_exists, is_positive
from parapy.geom.globs import ICN_DIR
from parapy.geom.occ.compound import Compound
from parapy.geom.occ.drawable import DrawableShape
from parapy.geom.occ.edge import Edge_
from parapy.geom.occ.surface import RectangularSurface
from parapy.geom.occ.utilities import sub_shapes

__all__ = "EdgeVisual", "Image"


def _validate_img_display_mode_is_none(value):
    if value is not None:
        msg = ("Cannot change the display_mode of the "
               "Image object to {!r}. Currently only "
               "'None' is supported as a display mode for "
               "an Image.")
        False, msg.format(value)
    return True


# TODO (TBD): remove this class once user can specify edge_color and
# /todo edge_line_thickness for shapes.
class EdgeVisual(Base):
    """Convenience class for visually appealing displaying of a 2D or 3D shape
    :attr:`built_from` with its edges. Edges may have custom :attr:`color`
    and/or :attr:`line_thickness` values. Usage:

    >>> solid = Box(1, 1, 1)
    >>> obj = EdgeVisual(solid, color="red", line_thickness=3)
    """

    __initargs__ = ["built_from", "color", "line_thickness"]
    __icon__ = os.path.join(ICN_DIR, "eye.png")

    #: Shape or sequence of shapes whose edges will be visualized.
    #: :type: parapy.geom.occ.drawable.DrawableShape | collections.Sequence[parapy.geom.occ.drawable.DrawableShape]
    built_from = Input(in_tree=True)

    #: Either a valid string from parapy.globals.X11_COLORS or a 3-integer
    #: iterable with RGB values. RGB ranges 0-255.
    #: Example: :py:`[255,192,203]`. Defaults to "black".
    #: :type: str | (int, int, int)
    color = Input("black")

    #: line thickness of edge compound
    #: :type: int | None
    line_thickness = Input(None)

    @Attribute
    def suppress_edges(self):
        color, thickness = self.color, self.line_thickness
        if color == "black" or color == (0, 0, 0) and \
                (thickness is None or thickness == 1):
            msg = ("EdgeVisual with 'black' colored edges and standard line "
                   "thickness has been deprecated, because it's the default "
                   "display mode since ParaPy 1.2.x Just display the original "
                   "object. Object: {}.")
            warnings.warn(msg.format(self), ParaPyDeprecationWarning)
            return True
        else:
            return False

    @Attribute
    def edges(self):
        gen = sub_shapes(self.built_from._drawable_TopoDS_Shape, shape_type=6)
        return [Edge_(TopoDS_Shape=e) for e in gen]

    @Part
    def edge_compound(self):
        return Compound(built_from=self.edges,
                        suppress=self.suppress_edges)


class TexturedShape(DrawableShape):
    """A shape with a texture stretched out over
    each of its faces. It can be used to display images that are oriented in 3D
    space.

    The specified texture is stretched over the
    shape on each of its faces. The faces are
    parameterized in u, v coordinates in the range (0, 1), which
    corresponds to the different Inputs that regulate the positioning
    and scaling of the texture on the shape.

    Usage:

    >>> from parapy.geom import Cylinder
    >>> from parapy.geom.occ.visual import TexturedShape
    >>> cylinder = Cylinder(1, 2)
    >>> image = TexturedShape(filename="path/to/image.jpg",
    ...                       built_from=cylinder)

    .. note:: The texture will always span the whole uv-space of the Face.
        When setting a scaling of values smaller than 1, the texture will be
        repeated and 'wrapped around'.

    .. note:: currently the TexturedShape only supports its
        default 'texturized' display mode, and will show up like that, even
        when in wireframe or shaded mode.

    """

    __initargs__ = "filename", "built_from"

    #: The shape of which the faces get a texture, it should be a single
    #: (sur)face or a topology composing faces.
    built_from = Input()

    #: Path to the image that will be used as a texture. Supported image
    # extensions include '*.gif', '*.bmp', '*.jpg', '*.png'
    #: :type: str
    filename = Input(validator=file_exists)

    #: Left-lower corner in u-v space of the surface where the texture starts
    #: :type: typing.Sequence[float, float] | None
    uv_origin = Input(None)

    #: The number of times the texture will be repeated on the surface in the
    #: parametric u-direction. Setting it to :py:`None` is the same as
    #: setting it to 1.
    #: :type: float | None
    repeat_u = Input(None, validator=Optional(is_positive))

    #: The number of times the texture will be repeated on the surface in the
    #: parametric v-direction. Setting it to :py:`None` is the same as
    #: setting it to 1.
    #: :type: float | None
    repeat_v = Input(None, validator=Optional(is_positive))

    #: Scaling of the picture in the u-direction of the surface. Negative
    #: values will reverse the picture in this direction.
    #: Note that :py:`0` will be interpreted as :py:`None`.
    #: :type: float | None
    scale_u = Input(None)

    #: Scaling of the picture in v-direction of the surface. Negative
    #: values will reverse the picture in this direction.
    #: Note that :py:`0` will be interpreted as :py:`None`.
    #: :type: float | None
    scale_v = Input(None)

    #: If set to True, it will try respect the shape its color and material
    #: when applying the texture to the shape. Otherwise, it will display
    #: the without surface materials and underlying colors.
    #: :type: bool | None
    modulate_texture = Input(False)

    # TODO (TBD): at this moment, it cannot be changed
    display_mode = Input(None, validator=_validate_img_display_mode_is_none)

    @property
    def _Handle_AIS_InteractiveObject(self):
        raise RuntimeError("This property is patched in parapy.gui. First "
                           "import ``from parapy.gui import display``.")


# TODO (TBD): Remove this class when textures can be applied to all shapes.
class Image(TexturedShape, RectangularSurface):
    """A :class:`parapy.geom.RectangularSurface` with a texture stretched out over
    its surface. It can be used to display images.

    Usage:

    >>> from parapy.geom.occ.visual import Image
    >>> image = Image(filename="path/to/image.jpg", width=1, length=1)

    Note that this is a shorthand for using the
    :class:`parapy.geom.occ.visual.TexturedShape` class for the common case
    where one wants to display a rectangular image:

    >>> from parapy.geom import RectangularSurface
    >>> from parapy.geom.occ.visual import TexturedShape
    >>> shape = RectangularSurface(width=1, length=1)
    >>> obj = TexturedShape(filename="path/to/image.jpg", built_from=shape)

    .. note:: If you do not want to distort the representation of an image,
        the aspect ratio of the RectangularSurface should match the aspect
        ratio
        of the image, otherwise the scaling might be different in the x and y
        direction of the image.

    """

    __initargs__ = "filename", "width", "length"

    color = Input('white')

    @Attribute
    def built_from(self):
        return self


if __name__ == '__main__':

    from parapy.gui import display
    from parapy.geom import Box

    solid = Box(1, 2, 3, color="green")
    obj = EdgeVisual(solid, color="red", line_thickness=3)
    display(obj)

    # deprecated
    obj = EdgeVisual(solid, color="black", line_thickness=1)
    display(obj)
