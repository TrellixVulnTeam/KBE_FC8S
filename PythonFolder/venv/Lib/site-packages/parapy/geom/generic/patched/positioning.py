#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""This module monkey-patches the basic positioning classes with OCC methods"""

# TODO: Geom stuff still necessary?



from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeVertex
from OCC.wrapper.gp import (gp_Pnt, gp_Dir, gp_Ax1, gp_Ax2, gp_Ax3, gp_Vec, gp_XYZ,
                    gp_Pln)
from OCC.wrapper.Geom import Geom_VectorWithMagnitude

from parapy.geom.generic.positioning import (AbstractPoint, Vector,
                                             Orientation, Axis, Position)

_GP_DIR_Z = gp_Dir(0, 0, 1)
_GP_DIRX = gp_Dir(1, 0, 0)


def convert2gp_Pnt(obj):
    """
    :type obj: AbstractPoint | (float, float, float)
    """
    if hasattr(obj, "gp_Pnt"):
        return obj.gp_Pnt
    else:
        try:
            if hasattr(obj, "__iter__") and len(obj) == 3:
                return gp_Pnt(*obj)
        except:
            msg = ("Object {:} could not be converted to OCC.gp.gp_Pnt. Valid "
                   "types are AbstractPoint and iterables with three numbers.")
            raise ValueError(msg.format(repr(obj)))


def convert2gp_Vec(obj):
    """Valid obj: Vector, Axis, Position or any iterable with three numbers."""
    if hasattr(obj, "gp_Vec"):
        return obj.gp_Vec
    else:
        try:
            if hasattr(obj, "__iter__") and len(obj) == 3:
                return gp_Vec(*obj)
        except:
            raise ValueError(
                "obj %s could not be converted to OCC.gp.gp_Vec. Valid types include"
                " Vector, Axis, Position or any iterable with three numbers." % (
                obj,))


def _AbstractPoint_gp_Pnt(self):
    return gp_Pnt(self[0], self[1], self[2])


def _AbstractPoint_gp_Ax1(self):
    return gp_Ax1(self.gp_Pnt, _GP_DIR_Z)


def _AbstractPoint_gp_Ax2(self):
    return gp_Ax2(self.gp_Pnt, _GP_DIR_Z, _GP_DIRX)


def _AbstractPoint_gp_Ax3(self):
    return gp_Ax3(self.gp_Pnt, _GP_DIR_Z, _GP_DIRX)


def _AbstractPoint_gp_Pln(self):
    return gp_Pln(self.gp_Ax3)


def _AbstractPoint_gp_XYZ(self):
    return gp_XYZ(self[0], self[1], self[2])


def _AbstractPoint_builder(self):
    return BRepBuilderAPI_MakeVertex(self.gp_Pnt)


def _AbstractPoint_TopoDS_Vertex(self):
    return self.builder.Vertex()


def _AbstractPoint_TopoDS_Shape(self):
    return self.builder.Vertex()


def _Vector_gp_Dir(self):
    return gp_Dir(self.x, self.y, self.z)


def _Vector_gp_Vec(self):
    return gp_Vec(self.x, self.y, self.z)


def _Vector_gp_XYZ(self):
    return gp_XYZ(self.x, self.y, self.z)


def _Vector_Geom_Vector(self):
    return Geom_VectorWithMagnitude(self.x, self.y, self.z)


def _Vector_gp_Ax1(self, point):
    return gp_Ax1(point.gp_Pnt, self.gp_Dir)


def _Orientation_gp_Ax1(self, point, direction):
    return getattr(self, direction).gp_Ax1(point)


def _Orientation_gp_Ax2(self, point):
    return gp_Ax2(point.gp_Pnt, self.top.gp_Dir, self.right.gp_Dir)


def _Orientation_gp_Ax3(self, point):
    return gp_Ax3(self.gp_Ax2(point))


def _Axis_gp_Vec(self):
    """override from AbstractPoint"""
    return self.vector.gp_Vec


def _Axis_gp_Dir(self):
    """override from AbstractPoint"""
    return self.vector.gp_Dir


def _Axis_gp_Ax1(self):
    """override from AbstractPoint"""
    return gp_Ax1(self.location.gp_Pnt, self.vector.gp_Dir)


def _Axis_gp_Ax2(self):
    """override from AbstractPoint"""
    return gp_Ax2(self.gp_Pnt, self.vector.gp_Dir)


def _Axis_gp_Ax3(self):
    """override from AbstractPoint"""
    return gp_Ax3(self.gp_Pnt, self.vector.gp_Dir)


def _Position_gp_Vec(self):
    """override from AbstractPoint"""
    return self.Vz.gp_Vec


# TODO (TBD): Scheduled for removal. Author: FT.
def _Position_gp_Dir(self):
    """override from AbstractPoint"""
    return self.Vz.gp_Dir


def _Position_gp_Ax1(self):
    """override from AbstractPoint"""
    return gp_Ax1(self.location.gp_Pnt, self.Vz.gp_Dir)


def _Position_gp_Ax2(self):
    return self.orientation.gp_Ax2(self.location)


def _Position_gp_Ax3(self):
    return gp_Ax3(self.gp_Ax2)


AbstractPoint.gp_Pnt = property(_AbstractPoint_gp_Pnt)
AbstractPoint.gp_Ax1 = property(_AbstractPoint_gp_Ax1)
AbstractPoint.gp_Ax2 = property(_AbstractPoint_gp_Ax2)
AbstractPoint.gp_Ax3 = property(_AbstractPoint_gp_Ax3)
AbstractPoint.gp_Pln = property(_AbstractPoint_gp_Pln)
AbstractPoint.gp_XYZ = property(_AbstractPoint_gp_XYZ)
AbstractPoint.builder = property(_AbstractPoint_builder)
AbstractPoint.TopoDS_Vertex = property(_AbstractPoint_TopoDS_Vertex)
AbstractPoint.TopoDS_Shape = property(_AbstractPoint_TopoDS_Shape)

Vector.gp_Dir = property(_Vector_gp_Dir)
Vector.gp_XYZ = property(_Vector_gp_XYZ)
Vector.gp_Vec = property(_Vector_gp_Vec)
Vector._Geom_Vector = property(_Vector_Geom_Vector)
Vector.gp_Ax1 = _Vector_gp_Ax1

Orientation.gp_Ax1 = _Orientation_gp_Ax1
Orientation.gp_Ax2 = _Orientation_gp_Ax2
Orientation.gp_Ax3 = _Orientation_gp_Ax3

Axis.gp_Dir = property(_Axis_gp_Dir)
Axis.gp_Vec = property(_Axis_gp_Vec)
Axis.gp_Ax1 = property(_Axis_gp_Ax1)
Axis.gp_Ax2 = property(_Axis_gp_Ax2)
Axis.gp_Ax3 = property(_Axis_gp_Ax3)

Position.gp_Dir = property(_Position_gp_Dir)
Position.gp_Vec = property(_Position_gp_Vec)
Position.gp_Ax1 = property(_Position_gp_Ax1)
Position.gp_Ax2 = property(_Position_gp_Ax2)
Position.gp_Ax3 = property(_Position_gp_Ax3)

if __name__ == '__main__':
    from parapy.geom import Point

    pt = Point(1, 2, 3)
    pos = Position(pt)

    a = convert2gp_Pnt(pt)
    b = convert2gp_Pnt(pos)
    c = convert2gp_Pnt((1, 2, 3))
    print(a.Coord() == b.Coord() == c.Coord())
