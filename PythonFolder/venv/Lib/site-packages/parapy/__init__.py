#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

#
#                    _____                _____
#                   |  __ \              |  __ \
#                   | |__) |_ _ _ __ __ _| |__) |   _
#                   |  ___/ _` | '__/ _` |  ___/ | | |
#                   | |  | (_| | | | (_| | |   | |_| |
#                   |_|   \__,_|_|  \__,_|_|    \__, |
#                                                __/ |
#                                               |___/

"""Welcome to ParaPy, a Knowledge-Based Engineering platform in and for the
Python programming language. ParaPy "extends" the basic Python language with
additional built-ins. Import the most basic features using::

    from parapy.core import *

The set of variables that are imported with this statement are deliberately
kept small and are named such that it is unlikely that names accidentally
collide with other packages. Hello world::

    >>> from parapy.core import *
    >>> # define a first class
    >>> class Aircraft(Base):
    ... 
    ...     pax = Input(label="number of passengers")
    ... 
    ...     range = Input(default=1000.)
    ... 
    ...     @Attribute
    ...     def weight(self):
    ...         print("I'm applying some engineering rules")
    ...         return self.pax * self.range / 500.
    ... 
    ...     @Part
    ...     def fuselage(self):
    ...         return Fuselage(length=self.range / 5.0)
    ... 
    >>> class Fuselage(Base):
    ...
    ...     length = Input()
    ...
    >>> # instantiate the object
    >>> obj = Aircraft(pax=200)
    >>> obj # doctest: +ELLIPSIS
    <Aircraft root at 0x...>
    >>> obj.weight
    I'm applying some engineering rules
    400.0
    >>> # values are cached (no recalculation)
    >>> obj.weight
    400.0
    >>> # run-time dependency tracking
    >>> obj.range = 2000
    >>> obj.weight
    I'm applying some engineering rules
    800.0
    >>> # object aggregration
    >>> obj.fuselage  # doctest: +ELLIPSIS
    <Fuselage root.fuselage at 0x...>
    >>> obj.fuselage.parent # doctest: +ELLIPSIS
    <Aircraft root at 0x...>
    >>> obj.fuselage.length
    400.0

Other packages of interest:

- parapy.io: read from or write to common data files (.csv, .json, .xlsx)
- parapy.geom: library with curve, surface and solid classes and routines.
- parapy.geom.exchange: import from or export to standard geometry formats
    (.iges, .step, .stl, .brep).
- parapy.mesh: library with mesh control and algorithms classes and routines.
- parapy.cae: solutions specific to Computer-Aided Engineering tools
    (NASTRAN, VSAERO, etc.).
- parapy.api: communicating with ParaPy (HTTP, TCP, etc.).
- parapy.gui: the graphical user interface and its components.
"""

import os

import parapy.version
from parapy.globs import ENV_PARAPY_LIC, PKG_DIR

__all__ = ["__version__", "VERSION", "__datetime__", "LIC_FILE"]

__version__ = "1.7.0"
__datetime__ = '2021-01-05 12:53:35'

#: Can be pre-set by user to defined custom path to parapy.lic file:
#:
#: >>> import parapy
#: >>> parapy.LIC_FILE = 'path/to/your/parapy.lic'
#: >>> from parapy.core import *
#:
#: Or by setting the ``PARAPY_LIC`` environment variable to the parapy.lic
#: file.
#:
#: :type: str | None
LIC_FILE = os.getenv(ENV_PARAPY_LIC)

__version__ = VERSION = parapy.version.Version(__version__)

