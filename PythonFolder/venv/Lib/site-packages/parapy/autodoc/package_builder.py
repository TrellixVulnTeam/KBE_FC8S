#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import os
import shutil

from jinja2 import Environment, PackageLoader

import parapy.autodoc
from parapy.autodoc.documenters import ClassDocumenter, FunctionDocumenter

_AUTODOC_DIR = os.path.dirname(parapy.autodoc.__file__)
_TEMPLATES_DIR = os.path.join(_AUTODOC_DIR, "templates", "")


def prep_package(directory):
    """
    Function that prepares a directory to generate documentation using the
    Sphinx package. Functions checks and creates if required a /themes
    directory, checks for /_static dir and add a gitingore file.
    :param directory: path to directory where the doc package shall be created.
    :return: None.
    """

    if os.path.exists(directory):
        shutil.rmtree(directory)
    if not os.path.exists(directory):
        os.makedirs(directory)

    themes_dir_src = os.path.join(_TEMPLATES_DIR, "themes", "")
    themes_dir_dst = os.path.abspath(
        os.path.join(directory, "..", "..", "themes", ""))

    if not os.path.exists(themes_dir_dst):
        os.makedirs(themes_dir_dst)
        for file in os.listdir(themes_dir_src):
            if file.endswith(".zip"):
                src = os.path.join(themes_dir_src, file)
                dst = os.path.join(themes_dir_dst, file)
                shutil.copy(src, dst)

    static_dir_dst = os.path.abspath(
        os.path.join(directory, "..", "..", "_static", ""))

    if not os.path.exists(static_dir_dst):
        raise Exception("_static directory not found.")

    with open(os.path.join(directory, ".gitignore"), 'w') as f:
        f.write("*\n\n!.gitignore\n")


def build_package(classes,
                  directory,
                  functions=None,
                  private_members=False,
                  inherited_members=True,
                  inheritance_diagram=True,
                  special_members=False,
                  current_module=True,
                  undoc_members=True,
                  index=False,
                  substitutions=False,
                  examples_mapping=None):
    names = []
    for cls in classes:
        examples = []
        if examples_mapping and cls in examples_mapping:
            examples = examples_mapping[cls]

        filename = cls.__name__ + ".rst"
        with open(os.path.join(directory, filename), 'w') as f:
            Documenter = ClassDocumenter
            doc = Documenter(cls,
                             inheritance_diagram=inheritance_diagram,
                             inherited_members=inherited_members,
                             private_members=private_members,
                             special_members=special_members,
                             current_module=current_module,
                             undoc_members=undoc_members,
                             preamble=True,
                             examples=examples)
            doc.write(f)
        print("Written:", filename)
        names.append(cls.__name__)

    if functions:
        for fn in functions:
            filename = fn.__name__ + ".rst"
            with open(os.path.join(directory, filename), 'w') as f:
                Documenter = FunctionDocumenter
                doc = Documenter(fn)
                doc.write(f)
            print("Written:", filename)

    if index:
        # create an index and a substitutions.txt file, which go together
        loader = PackageLoader('parapy.autodoc', "templates")
        env = Environment(loader=loader)
        tmplt = env.get_template('index.rst.tmplt')
        s = tmplt.render(names=names)
        filename = os.path.join(directory, "index.rst")
        with open(filename, 'w') as f:
            f.write(s)

        print("Written:", filename)

    if substitutions:
        substitutions_from = os.path.join(_TEMPLATES_DIR, "substitutions.txt")
        substitutions_to = os.path.join(directory, "substitutions.txt")
        shutil.copyfile(substitutions_from, substitutions_to)

        print(f"copied {substitutions_from} to {substitutions_to}")
