#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""
Override of standard sphinx.ext.graphviz.render_dot_html.
This function embeds raw, clickable SVG in HTML.
"""

import re
from docutils import nodes
from sphinx.ext.graphviz import GraphvizError, render_dot


mapname_re = re.compile(r'<map id="(.*?)"')


def render_dot_html(self, node, code, options, prefix='graphviz',
                    imgcls=None, alt=None):
    format = self.builder.config.graphviz_output_format
    try:
        if format not in ('png', 'svg'):
            raise GraphvizError("graphviz_output_format must be one of 'png', "
                                "'svg', but is %r" % format)
        fname, outfn = render_dot(self, code, options, format, prefix)
    except GraphvizError as exc:
        self.builder.warn('dot code %r: ' % code + str(exc))
        raise nodes.SkipNode

    if fname is None:
        self.body.append(self.encode(code))
    else:
        if alt is None:
            alt = node.get('alt', self.encode(code).strip())
        imgcss = imgcls and 'class="%s"' % imgcls or ''
        if format == 'svg':
            svgtag = '''<object data="%s" type="image/svg+xml">
            <p class="warning">%s</p></object>\n''' % (fname, alt)
            self.body.append(svgtag)
            # if format == 'svg':
            #     # RvD: read SVG contents from file.
            #     # svgtag = '<img src="%s" alt="%s" %s/>\n' % (fname, alt, imgcss)
            #     with open(outfn, 'r') as content_file:
            #         svg_content = content_file.read()
            #     # delete file
            #     os.remove(outfn)
            #     # svgtag = '<object data="%s" alt="%s" type="image/svg+xml" %s>' \
            #     #         '\n</object>\n' % (fname, alt, imgcss)
            #     self.body.append(svg_content)
        else:
            if 'align' in node:
                self.body.append('<div align="%s" class="align-%s">' %
                                 (node['align'], node['align']))
            with open(outfn + '.map', 'rb') as mapfile:
                imgmap = mapfile.readlines()
            if len(imgmap) == 2:
                # nothing in image map (the lines are <map> and </map>)
                self.body.append('<img src="%s" alt="%s" %s/>\n' %
                                 (fname, alt, imgcss))
            else:
                # has a map: get the name of the map and connect the parts
                mapname = mapname_re.match(imgmap[0].decode('utf-8')).group(1)
                self.body.append('<img src="%s" alt="%s" usemap="#%s" %s/>\n' %
                                 (fname, alt, mapname, imgcss))
                self.body.extend([item.decode('utf-8') for item in imgmap])
            if 'align' in node:
                self.body.append('</div>\n')

    raise nodes.SkipNode


def setup(app):
    from sphinx.ext import graphviz
    graphviz.render_dot_html = render_dot_html
    from sphinx.ext.inheritance_diagram import setup
    return setup(app)
