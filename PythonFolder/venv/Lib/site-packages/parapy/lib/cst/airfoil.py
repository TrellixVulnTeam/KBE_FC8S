#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2014-2016 Reinier van Dijk, Max Baan
#
# This code is subject to a Non-Disclosure Agreement. You have received a
# temporary copy of the ParaPy software for non-commercial, educational
# purposes only.
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from parapy.core import Base, Input, Attribute, Part
from parapy.geom import Point, FittedCurve, Wire

from parapy.lib.cst.utils import cst_to_points


class CSTAirfoil(Base):
    """Implements CST-parametrization for airfoils. Signature:

    ``CSTAirfoil(upper_coefficients, lower_coefficients, n, N1=0.5, N2=1.0, chord=1.0, **kwargs)``

    You provide upper- and lower coefficients, :attr:`upper_coefficients`
    and :attr:`lower_coefficients`, respectively, and the total number of
    points ``n``. Optional inputs ``N1`` and ``N2`` are exponents to the
    “Class Function”. Different combinations of these exponents define a
    variety of basic general classes of geometric shapes. For a round nose
    airfoil, N1 = 0.5 and N2 = 1.0. Usage:

    >>> from parapy.lib.cst import CSTAirfoil
    >>> # standard symmetrical airfoil with 100 points
    >>> upper_coefficients = [1, 1, 1]
    >>> lower_coefficients = [-1, -1, -1]
    >>> n = 100
    >>> obj = CSTAirfoil(upper_coefficients, lower_coefficients, n)
    >>> # Clark-Y airfoil
    >>> upper_coefficients = [0.206, 0.2728, 0.2292]
    >>> lower_coefficients = [-0.1294, -0.0036, -0.0666]
    >>> n = 400
    >>> obj = CSTAirfoil(upper_coefficients, lower_coefficients, n)

    >>> # use the various slots
    >>> obj.curve  # doctest: +ELLIPSIS
    <FittedCurve root.curve at 0x...>
    >>> obj.lower_curve  # doctest: +ELLIPSIS
    <FittedCurve root.lower_curve at 0x...>
    >>> obj.upper_curve  # doctest: +ELLIPSIS
    <FittedCurve root.upper_curve at 0x...>
    """

    __initargs__ = ["upper_coefficients", "lower_coefficients", "n"]

    #: lower surface coefficients
    #: :type: list[float]
    upper_coefficients = Input()

    #: upper surface coefficients
    #: :type: list[float]
    lower_coefficients = Input()

    #: number of (unique) points on airfoil.
    #: :type: int
    n = Input()

    #: First coefficient to "Class Function".
    #: :type: float
    N1 = Input(0.5)

    #: Second coefficient to "Class Function".
    #: :type: float
    N2 = Input(1.0)

    #: Chord of airfoil. Default is 1.0.
    #: :type: float
    chord = Input(1.0)

    #: minimum degree for curve fitting. Default is 3.
    #: :type: int
    min_degree = Input(3)

    #: maximum degree for fitted curves. Default is 3.
    #: :type: int
    max_degree = Input(3)

    #: desired continuity for fitted curves. Defaults to 2, i.e. 'C2'.
    #: :type: int
    continuity = Input(2)

    #: allowed distance between points and fitted curves. Defaults to 1.0e-3.
    #: :type: float
    tolerance = Input(1e-3)

    @Attribute
    def upper_points(self):
        """List of upper surface points ordered from LE to TE. Number of
        points equals ``n // 2 + 1``, viz. if ``n == 100``, you'll see 51
        points here.

        :rtype: list[Point]
        """
        return cst_to_points(self.upper_coefficients, self.n // 2 + 1,
                             self.N1, self.N2, self.chord)

    @Attribute
    def lower_points(self):
        """List of lower surface points ordered from LE to TE. Number of
        points equals ``n // 2 + 1``, viz. if ``n == 100``, you'll see 51
        points here.

        :rtype: list[Point]
        """
        return cst_to_points(self.lower_coefficients, self.n // 2 + 1,
                             self.N1, self.N2, self.chord)

    @Attribute
    def points(self):
        """Airfoil points ordered in anti-clockwise fashion, i.e. from TE over
        upper surface to LE, and then back down to TE. If you have requested
        an even number of ``n`` points you'll find N+1 points here as the TE
        point is double, viz. if you request 100 points, you get 101 points
        back.

        :rtype: list[Point]
        """
        return self.upper_points[::-1] + self.lower_points[1:]

    @Part
    def lower_curve(self):
        """Curve fitted through :attr:`lower_points`, starting at LE, ending
        at TE.

        :rtype: FittedCurve
        """
        return FittedCurve(self.lower_points, color="red",
                           pass_down="min_degree, max_degree, "
                                     "continuity, tolerance")

    @Part
    def upper_curve(self):
        """Curve fitted through :attr:`upper_points`, starting at LE, ending
        at TE.

        :rtype: FittedCurve
        """
        return FittedCurve(self.upper_points, color="green",
                           pass_down="min_degree, max_degree, "
                                     "continuity, tolerance")

    @Part
    def curve(self):
        """Curve fitted through :attr:`points`, starting at TE
        over upper surface to LE, and then back down ending at TE.

        :rtype: FittedCurve
        """
        return FittedCurve(self.points,
                           pass_down="min_degree, max_degree, "
                                     "continuity, tolerance")

    @Part
    def wire(self):
        """Wire composed of two edges, :attr:`upper_curve` (reversed) and then
        :attr:`lower_curve`.

        :rtype: Wire
        """
        return Wire([self.upper_curve.reversed, self.lower_curve])


if __name__ == '__main__':

    from parapy.gui import display

    n = 100

    # standard symmetrical airfoil with 100 points
    upper_coefficients = [1, 1, 1]
    lower_coefficients = [-1, -1, -1]
    obj1 = CSTAirfoil(upper_coefficients, lower_coefficients, n)

    # Clark-Y airfoil
    upper_coefficients = [0.206, 0.2728, 0.2292]
    lower_coefficients = [-0.1294, -0.0036, -0.0666]
    obj2 = CSTAirfoil(upper_coefficients, lower_coefficients, n)

    # some random airfoil
    upper_coefficients = [0.1700, 0.1000, 0.2468, 0.0982, 0.1242]
    lower_coefficients = [-0.1700, -0.1000, -0.2468, -0.0982, -0.1242]
    obj3 = CSTAirfoil(upper_coefficients, lower_coefficients, n)

    display((obj1, obj2, obj3))
