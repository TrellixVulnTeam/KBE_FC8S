#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""STEP Writer"""

from parapy.core import Input
from parapy.core.validate import OneOf, Optional
from parapy.geom.occ.drawable import DrawableShape
from parapy.exchange.cafcontrol.writer import CAFControl_Writer
from parapy.exchange.step.helpers import STEPCAFRoot


class STEPWriter(CAFControl_Writer):
    """Write shapes contained in :attr:`nodes` to a STEP file (.stp/.step)
    located at :attr:`filename`. Default STEP schema used is `AP214IS`. You
    can also export to 203 (and 242 soon) (sub-) formats. For this purpose
    specify :attr:`schema`. Usage:

    >>> from parapy.exchange.step import STEPWriter
    >>> from parapy.geom import Box
    >>> box = Box(1, 2, 3)
    >>> writer = STEPWriter(nodes=[box], filename="path/to/your/file.stp")
    >>> writer.write()
    Written: path/to/your/file.stp

    There is also experimental support for writing entire ParaPy assemblies
    to STEP using :attr:`trees`, maintaining the assembly structure:

    >>> from parapy.core import Part
    >>> class Assembly(Box):
    ... 
    ...     label = "bigger box"
    ... 
    ...     @Part
    ...     def child(self):
    ...         return Box(pass_down="width, length",
    ...                    height=self.height * 0.5,
    ...                    color="blue",
    ...                    label="smaller box")
    ... 
    ...     @Part
    ...     def writer(self):
    ...         return STEPWriter(trees=[self],
    ...                           filename="path/to/your/file.stp")
    ... 
    >>> assy = Assembly(1, 2, 3)
    >>> assy.writer.write()
    Written: path/to/your/file.stp

    .. note: ParaPy geometry is monkey-patched with a ``write_step`` method::

    >>> box.write_step("path/to/your/file.stp")

    .. caution: if you set :attr:`schema` to :py:`'AP203'` and set
        :attr:`color_mode` to :py:`True`, it will result in an AP203 schema
        with modular extension ``SHAPE_APPEARANCE_LAYER_MIM``. This may not be
        importable by other software (known problem: MSC Patran). In such case,
        set :attr:`color_mode` to :py:`False` to prevent the schema extension
        from being used.
    """

    wildcard = ("step file (*.stp,*.step,*.STP,*.STEP)|"
                "*.stp;*.step;*.STP;*.STEP")

    SCHEMA_OPTIONS = ["AP214CD", "AP214DIS", "AP203", "AP214IS"]
    UNIT_OPTIONS = ["INCH", "MM", "FT", "MI", "M",
                    "KM", "MIL", "UM", "CM", "UIN"]

    #: Defines the version of the schema used for the STEP file.
    #: Options: "AP214CD", "AP214DIS", "AP203", "AP214IS" (default). Details:
    #:
    #: - :py:`"AP214CD"`: AP214, CD version (dated 26 November 1996),
    #: - :py:`"AP214DIS"`: AP214, DIS version (dated 15 September 1998).
    #: - :py:`"AP203"`: AP203, possibly with modular extensions (depending on :attr:`color_mode`).
    #: - :py:`"AP214IS"`: (default) AP214, IS version (dated 2002)
    #: - :py:`"AP242DIS"`: AP242, DIS version. COMING SOON.
    #:
    #: :type: str | None
    schema = Input(None, validator=Optional(OneOf(SCHEMA_OPTIONS)))
    #: Defines a unit in which the STEP file should be written. If set to
    #: unit other than :py:`'MM'`, the model is converted to these units during
    #: the translation. For example, if unit is :py:`'M'` all dimensions will
    #: be divided by :py:`1000`. Valid options are: :py:`["INCH", "MM", "FT",
    #: "MI", "M", "KM", "MIL", "UM", "CM", "UIN"]`. Default: :py:`'MM'`.
    unit = Input("MM", validator=OneOf(UNIT_OPTIONS))
    #: Name of this exchange structure. It may correspond to the name of the
    #: file in a file system or reflect data in this file. There is no strict
    #: rule how to use this field.
    #: :type: str | None
    name = Input(None)
    #: Author of STEP file.
    #: :type: str | None
    author = Input(None)
    #: Organization of STEP file.
    #: :type: str | None
    organization = Input(None)
    #: Description inside STEP file.
    #: :type: str | None
    description = Input(None)
    #: The name of the preprocessor used to write this STEP file. Default:
    #: :py:`"ParaPy {VERSION} - Open CASCADE STEP processor {OCC_VERSION}"`
    #: :type: str | None
    preprocessor_version = Input(None)
    #: the name of the system and its version which originally created the
    #: information contained in this STEP-file. Default:
    #: :py:`"ParaPy {VERSION} - Open CASCADE {OCC_VERSION}"`
    #: :type: str | None
    originating_system = Input(None)
    #: The name and mailing address of the person who authorized this file.
    #: :type: str | None
    authorization = Input(None)
    #: Defines the text string that will be used for field ‘name’ of PRODUCT
    #: entities written to the STEP file. Default:
    #: :py:`"ParaPy {VERSION} - OCCT STEP translator {OCC_VERSION}"`
    #: :type: str | None
    product_name = Input(None)

    def _provide_parapy_inputs_to_occ_mapping(self):
        return {"schema": "write.step.schema",
                "product_name": "write.step.product.name",
                "unit": "write.step.unit"
                }

    def _init_helper(self):
        return STEPCAFRoot(settings=self._merged_settings,
                           name=self.name,
                           color_mode=self.color_mode,
                           name_mode=self.name_mode,
                           layer_mode=self.layer_mode,
                           author=self.author,
                           organization=self.organization,
                           description=self.description,
                           preprocessor_version=self.preprocessor_version,
                           originating_system=self.originating_system,
                           authorization=self.authorization)


def _write_step(self, filename, **kwargs):
    STEPWriter(self, filename=filename, **kwargs).write()


DrawableShape.write_step = _write_step

