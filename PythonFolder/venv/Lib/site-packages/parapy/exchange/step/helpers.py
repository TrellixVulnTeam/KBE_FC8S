#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import warnings

from OCC.wrapper.APIHeaderSection import APIHeaderSection_MakeHeader
from OCC.wrapper.STEPCAFControl import (STEPCAFControl_Reader, STEPCAFControl_Writer,
                                STEPCAFControl_Controller)
from OCC.wrapper.StepRepr import (Handle_StepRepr_RepresentationItem,
                          Handle_StepRepr_Representation)
from OCC.wrapper.TCollection import TCollection_HAsciiString

import parapy
from parapy.globs import SUPPORT_EMAIL
from parapy.geom.occ import OCC_VERSION
from parapy.exchange.cafcontrol.helpers import (XCAFRoot,
                                                Interface_Static_Manager)

STEP_CASTS = (Handle_StepRepr_RepresentationItem,
              Handle_StepRepr_Representation)


class STEPCAFRoot(XCAFRoot):

    DEFAULT_PRODUCT_NAME = "ParaPy {} - OCCT STEP translator {}".format(
        parapy.__version__, OCC_VERSION)

    DEFAULT_PREPROCESSOR_VERSION = "ParaPy {} - Open CASCADE STEP processor {}" \
        .format(parapy.__version__, OCC_VERSION)

    DEFAULT_ORIGINATING_SYSTEM = "ParaPy {} - Open CASCADE {}" \
        .format(parapy.__version__, OCC_VERSION)

    __initialized = False

    def __init__(self, name=None, author=None, organization=None,
                 description=None, authorization=None,
                 preprocessor_version=None, originating_system=None, **kwargs):
        self.name = name
        self.author = author
        self.organization = organization
        self.description = description
        self.preprocessor_version = preprocessor_version or self.DEFAULT_PREPROCESSOR_VERSION
        self.originating_system = originating_system or self.DEFAULT_ORIGINATING_SYSTEM
        self.authorization = authorization

        super(STEPCAFRoot, self).__init__(**kwargs)

        if not self.__initialized:
            self._init()
            self.__initialized = True

    @staticmethod
    def _init():
        # Important to have OCC set up all Interface_Static variables here,
        # before we create our first Writer or Reader, otherwise our own
        # settings get overwritten
        STEPCAFControl_Controller.Init()
        # Override some header stuff here.
        Interface_Static_Manager.set_value(
            "write.step.product.name", STEPCAFRoot.DEFAULT_PRODUCT_NAME)

    def _init_reader(self):
        return STEPCAFControl_Reader()

    def _init_writer(self):
        writer = STEPCAFControl_Writer()
        self._set_header_entities(writer)
        return writer

    def _set_header_entities(self, writer):
        model = writer.Writer().Model()
        header = APIHeaderSection_MakeHeader(model)

        if self.name:
            s = TCollection_HAsciiString(self.name).handle
            header.SetName(s)
        if self.author:
            s = TCollection_HAsciiString(self.author).handle
            header.SetAuthorValue(1, s)
        if self.organization:
            s = TCollection_HAsciiString(self.organization).handle
            header.SetOrganizationValue(1, s)
        if self.description:
            s = TCollection_HAsciiString(self.description).handle
            header.SetDescriptionValue(1, s)
        if self.preprocessor_version:
            s = TCollection_HAsciiString(self.preprocessor_version).handle
            header.SetPreprocessorVersion(s)
        if self.originating_system:
            s = TCollection_HAsciiString(self.originating_system).handle
            header.SetOriginatingSystem(s)
        if self.authorization:
            s = TCollection_HAsciiString(self.authorization).handle
            header.SetAuthorisation(s)

    # def _print_header_values(self):
    #     model = self.writer.Writer().Model()
    #     it = model.Header()
    #     """type: OCC.Interface.Interface_EntityIterator"""
    #     print it.NbEntities()
    #     while it.More():
    #         ent = it.Value()
    #         name = ent.DynamicType().Name()
    #         print name
    #         if name == "HeaderSection_FileSchema":
    #             ent = Handle_HeaderSection_FileSchema(ent)
    #             print ent.SchemaIdentifiersValue(1).ToCString()
    #
    #         it.Next()

    def _init_xs_control_reader(self):
        """:rtype: OCC.XSControl.XSControl_Reader"""
        return self.reader.Reader()

    def _init_interface_model(self):
        """:rtype: OCC.StepData.Handle_StepData_StepModel"""
        return self.reader.Reader().StepModel()

    def _handle_name(self, handle):
        """
        :param OCC.Standard.Handle_Standard_Transient handle:
        :rtype: str
        """
        for cast in STEP_CASTS:
            entity = cast(handle)
            if entity.IsNull():
                continue
            else:
                name = entity.Name()
                if name.IsNull():
                    return self.default_name
                else:
                    return name.ToCString()

        msg = ("Failed to retrieve name from STEP file. Issue: downcast of {} "
               "not supported yet. Contact: {}.")
        warnings.warn(msg.format(handle.DynamicType().Name(), SUPPORT_EMAIL))
        return self.default_name
