#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""STEP reader"""

from parapy.exchange.cafcontrol.reader import CAFControl_Reader
from parapy.exchange.step.helpers import STEPCAFRoot


class STEPReader(CAFControl_Reader):
    """Read shape(s) from .step or .stp file. Result is accessible from
    :attr:`children` attribute. Typically the top-level child object is an
    :class:`~parapy.exchange.cafcontrol.base.Assembly` composing other
    assemblies, :class:`~parapy.exchange.cafcontrol.base.Reference` or
    :class:`~parapy.exchange.cafcontrol.base.Shape` objects. Usage:

    >>> from parapy.exchange.step import STEPReader
    >>> reader = STEPReader(filename="path/to/your/file.stp")
    >>> reader.children  # doctest: +SKIP
    Read: path/to/your/file.stp
    [<Assembly root.children[0] at 0x...>]
    >>> reader.children[0].children  # doctest: +SKIP
    [<Face root.children[0].children[0] at 0x...>, ...]
    >>> reader.children[0].children.doc_id  # doctest: +SKIP
    'Some name'

    You can specify additional :attr:`settings` for the reading process. See
    `OCCT docs <https://dev.opencascade.org/doc/overview/html/occt_user_guides
    __step.html#occt_step_2_3_3>`_ for all options. Usage:

    >>> reader = STEPReader(filename="path/to/your/file.stp",
    ...                     settings={"read.precision.mode": 1,
    ...                               "read.precision.val": 0.001})

    Finally, you can control the label of shapes that have no name inside the
    STEP document using the :attr:`default_name` Input:

    >>> reader = STEPReader(filename="path/to/your/file.stp",
    ...                     default_name="some custom name")
    """

    wildcard = ("step file (*.stp,*.step,*.STP,*.STEP)|"
                "*.stp;*.step;*.STP;*.STEP")

    def _init_helper(self):
        return STEPCAFRoot(default_name=self.default_name,
                           settings=self.settings,
                           color_mode=self.color_mode,
                           name_mode=self.name_mode,
                           layer_mode=self.layer_mode)
