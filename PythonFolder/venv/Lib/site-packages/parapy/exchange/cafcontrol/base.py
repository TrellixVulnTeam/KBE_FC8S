#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import os
import warnings

from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_Transform

from parapy.core import Attribute, Base, Input, Part
from parapy.core.exceptions import ParaPyDeprecationWarning
from parapy.exchange.cafcontrol.helpers import (
    XCAFAssembly, XCAFReference, XCAFShape)
from parapy.exchange.globs import ICN_DIR
from parapy.geom.occ.brep import BRep
from parapy.geom.occ.compound import Compound_
from parapy.geom.occ.edge import Edge_
from parapy.geom.occ.face import Face_
from parapy.geom.occ.shell import Shell_
from parapy.geom.occ.solid import Solid_
from parapy.geom.occ.vertex import Vertex_
from parapy.geom.occ.wire import Wire_


class XCAFControl_Base(Base):

    @property
    def _xcaf_helper(self):
        """:rtype: parapy.exchange.cafcontrol.helpers.XCAFLabel"""
        raise NotImplementedError()

    @property
    def _xcaf_control_root(self):
        """:rtype: XCAFControl_Root"""
        raise NotImplementedError()

    @Part(parse=None)
    def children(self):
        """
        :rtype: list[XCAFControl_Child]
        """
        fn = self._xcaf_control_root._xcaf_child_getter
        return list(fn(self._xcaf_helper))

    @Attribute
    def assemblies(self):
        """
        :rtype: list[Assembly]
        """
        msg = ("XCAFControl_Base.assemblies has been deprecated. Use "
               "XCAFControl_Base.children instead. Object: {}.")
        warnings.warn(msg.format(self), ParaPyDeprecationWarning, stacklevel=4)
        return [obj for obj in self.children if isinstance(obj, Assembly)]

    @Attribute
    def shapes(self):
        """
        :rtype: list[Shape]
        """
        msg = ("XCAFControl_Base.shapes has been deprecated. Use "
               "XCAFControl_Base.children instead. Object: {}.")
        warnings.warn(msg.format(self), ParaPyDeprecationWarning, stacklevel=4)
        return [obj for obj in self.children if not isinstance(obj, Assembly)]

    def find_entity_by_label(self, string, **kwargs):
        """First STEP entity where string is part of the name used in the
        STEP file.

        :rtype: XCAFControl_Child
        """
        return self.find_child_by_label(string, start=self.children,
                                        **kwargs)

    def find_all_entities_by_label(self, string, **kwargs):
        """All STEP entities where string is part of the name used in the
        STEP file.

        :rtype: list[XCAFControl_Child]
        """
        return self.find_children_by_label(string, start=self.children,
                                           **kwargs)

    @Attribute(private=True)
    def _relative_trsf(self):
        """The transformation need to place the sub-children of this element
        in the global coordinate system.

        :rtype: OCC.gp.gp_Trsf
        """
        return self._xcaf_helper.transformation


# TODO (TBD): find proper label and doc_id for root node
class XCAFControl_Root(XCAFControl_Base):
    #: :type: bool
    bypass_compound_shape = Input(True)
    #: :type: bool
    bypass_assembly_reference = Input(True)

    @property
    def _xcaf_helper(self):
        raise NotImplementedError("Implement in subclass")

    @property
    def _xcaf_control_root(self):
        return self

    @Attribute
    def _xcaf_child_getter(self):
        return caf_children_closure(self,
                                    self.bypass_compound_shape,
                                    self.bypass_assembly_reference)


class XCAFControl_Child(XCAFControl_Base):
    #: :type: XCAFControl_Root
    _xcaf_control_root = None
    #: :type: parapy.exchange.cafcontrol.helpers.XCAFLabel
    _xcaf_helper = None
    #: :type: parapy.exchange.cafcontrol.helpers.XCAFReference
    _xcaf_helper_reference = None

    def __init__(self, root, helper, reference=None):
        super(XCAFControl_Child, self).__init__()
        self._xcaf_control_root = root
        self._xcaf_helper = helper
        self._xcaf_helper_reference = reference

    @Attribute
    def label(self):
        helper = self._xcaf_helper_reference or self._xcaf_helper
        return helper.name()

    @Attribute
    def doc_id(self):
        return self._xcaf_helper.id()


class Assembly(XCAFControl_Child):
    __icon__ = os.path.join(ICN_DIR, 'assembly.png')


class Reference(XCAFControl_Child):
    __icon__ = os.path.join(ICN_DIR, 'assembly.png')


class CompoundShape(XCAFControl_Child):
    __icon__ = os.path.join(ICN_DIR, 'assembly.png')


class Shape(XCAFControl_Child, BRep):
    #: :type: parapy.exchange.cafcontrol.helpers.XCAFShape
    _xcaf_helper = None

    children = []

    @Attribute(private=True)
    def TopoDS_Shape(self):
        topods_shape = self._xcaf_helper.topods_shape
        #: :type: OCC.gp.gp_Trsf
        trsf = self._relative_trsf

        topods_shape = BRepBuilderAPI_Transform(topods_shape, trsf).Shape()
        return topods_shape

    @Attribute(settable=True)
    def color(self):
        return self._xcaf_helper.color()


class Vertex(Shape, Vertex_):
    pass


class Edge(Shape, Edge_):
    pass


class Wire(Shape, Wire_):
    pass


class Face(Shape, Face_):
    pass


class Shell(Shape, Shell_):
    pass


class Solid(Shape, Solid_):
    pass


class Compound(Shape, Compound_):
    pass


map_topods_shape_to_cafcontrol_node = {7: Vertex,
                                       6: Edge,
                                       5: Wire,
                                       4: Face,
                                       3: Shell,
                                       2: Solid,
                                       1: Shape,  # CompSolid
                                       0: Compound}


def topods_shape_to_cafcontrol_node(topods_shape):
    st = topods_shape.ShapeType()
    return map_topods_shape_to_cafcontrol_node[st]


def caf_children_closure(root,
                         bypass_compound_shape=True,
                         bypass_assembly_reference=True):
    def fn(obj):
        for child in obj.children():
            for subchild in caf_children(root, child,
                                         bypass_compound_shape,
                                         bypass_assembly_reference):
                yield subchild
    return fn


def caf_children(root, obj, bypass_compound_shape,
                 bypass_assembly_reference):
    if isinstance(obj, XCAFAssembly):
        yield Assembly(root, obj)
    elif isinstance(obj, XCAFReference):
        if bypass_assembly_reference and obj.refers_assembly():
            child = next(obj.children())
            yield Assembly(root, child, reference=obj)
        else:
            yield Reference(root, obj)
    elif isinstance(obj, XCAFShape):
        has_children = obj.has_children
        if bypass_compound_shape and has_children:
            for subchild in obj.children():
                for subsubchild in caf_children(root, subchild,
                                                bypass_compound_shape,
                                                bypass_assembly_reference):
                    yield subsubchild
        elif has_children:
            yield CompoundShape(root, obj)
        else:
            topods_shape = obj.topods_shape
            cls = topods_shape_to_cafcontrol_node(topods_shape)
            yield cls(root, obj)
