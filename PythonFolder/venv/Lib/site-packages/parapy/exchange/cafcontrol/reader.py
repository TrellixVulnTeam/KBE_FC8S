#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""CAFControl_Reader base class for STEP and IGES readers."""

import os

from parapy.core import Attribute, FileReader, Input, val
from parapy.exchange.cafcontrol.base import XCAFControl_Root
from parapy.exchange.cafcontrol.helpers import DEFAULT_NAME
from parapy.exchange.globs import ICN_DIR


class CAFControl_Reader(XCAFControl_Root, FileReader):
    """Abstract Base Class for STEPReader and IGESReader"""

    __icon__ = os.path.join(ICN_DIR, 'import.png')
    __initargs__ = ["filename"]
    file_or_dir = "file"

    #: Path to STEP/IGES file. Full path including extension.
    #: :type: str
    filename = Input(validator=val.file_exists)

    #: An optional iterable of tuples with name-value pairs. Valid names and
    #: values are found in the link below. E.g.::
    #:
    #:     settings = {"read.precision.mode": 1,
    #:                 "read.precision.val": 1.0e-3,
    #:                 "xstep.cascade.unit": "MM"}
    #:
    #: http://dev.opencascade.org/doc/overview/html/occt_user_guides__step.html
    #: #occt_step_2_3_3
    #: :type: dict[str, T]
    settings = Input({})

    #: default name used for entities in STEP/IGES file without explicit name
    #: :type: str
    default_name = Input(DEFAULT_NAME)

    #: Write colors or not? Default: True.
    #: :type: bool
    color_mode = Input(True)

    #: Write names or not? Default: True.
    #: :type: bool
    name_mode = Input(True)

    #: Write layers or not? Default: True.
    #: :type: bool
    layer_mode = Input(True)

    def _init_helper(self):
        """:rtype: parapy.exchange._cafcontrol.helpers.XCAFRoot"""
        raise NotImplementedError()

    #: depends solely on filename, so if it changes everything is re-read.
    @Attribute(pickle=False)
    def _xcaf_helper(self):
        """
        :rtype: XCAFRoot
        """
        helper = self._init_helper()
        helper.read(self.filename)  # important dependency!
        return helper

    def read(self, pathname=None):
        old_filename = self.filename
        # note that we cannot set filename, because we do not know if it is
        # settable in an inherited class
        new_filename = self.resolve_pathname(pathname)
        if new_filename == old_filename:
            print(f"Skipped re-reading file: {old_filename}")
        else:
            self.filename = new_filename
        try:
            _ = self._xcaf_helper
        except Exception:
            # when it fails, restore the old filename
            self.filename = old_filename
            raise
