#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from parapy.core import Input, val, Attribute
from parapy.geom.occ.drawable import DrawableShape
from parapy.exchange.cafcontrol.writer import CAFControl_Writer
from parapy.exchange.iges.helpers import IGESCAFRoot


def bool_to_int(v):
    return 1 if v else 0


class IGESWriter(CAFControl_Writer):
    """Write shapes contained in :attr:`nodes` to a IGES file (.igs/.iges)
    located at :attr:`filename`. Usage:

    >>> from parapy.exchange.iges import IGESWriter
    >>> from parapy.geom import Box
    >>> box = Box(1, 2, 3)
    >>> writer = IGESWriter(nodes=[box], filename="path/to/your/file.igs")
    >>> writer.write()
    Written: path/to/your/file.igs

    There is also experimental support for writing entire ParaPy assemblies
    to IGES using :attr:`trees`. Note that IGES will not maintain the tree
    structure, because the format does not support it:

    >>> from parapy.core import Part
    >>> class Assembly(Box):
    ... 
    ...     label = "bigger box"
    ... 
    ...     @Part
    ...     def child(self):
    ...         return Box(pass_down="width, length",
    ...                    height = self.height * 0.5,
    ...                    color = "blue",
    ...                    label = "smaller box")
    ... 
    >>> assy = Assembly(1, 2, 3)
    >>> writer = IGESWriter(trees=[assy], filename="path/to/your/file.igs")
    >>> writer.write()
    Written: path/to/your/file.igs

    .. note: ParaPy geometry is monkey-patched with a ``write_iges`` method::

    >>> box.write_iges("path/to/your/file.igs")
    """

    wildcard = "iges file (*.igs,*.iges) |*.igs;*.iges"
    UNIT_OPTIONS = ["INCH", "MM", "FT", "MI", "M",
                    "KM", "MIL", "UM", "CM", "UIN"]

    #: Defines a unit in which the IGES file should be written. If set to
    #: unit other than :py:`'MM'`, the model is converted to these units during
    #: the translation. For example, if unit is :py:`'M'` all dimensions will
    #: be divided by :py:`1000`. Valid options are: :py:`["INCH", "MM", "FT",
    #: "MI", "M", "KM", "MIL", "UM", "CM", "UIN"]`. Default: :py:`'MM'`.
    unit = Input("MM", validator=val.OneOf(UNIT_OPTIONS))
    #: Author of IGES file. The default value (None) results in the system
    #: name of the user.
    #: :type: str | None
    author = Input(None)
    #: name of the sending company.
    #: :type: str | None
    company = Input(None)
    #: name of the receiving company.
    #: :type: str | None
    receiver = Input(None)
    #: name of system of the sending system for this IGES file. Default:
    #: :py:`"ParaPy {VERSION} - Open CASCADE IGES processor {OCC_VERSION}"`
    #: :type: str | None
    send_name = Input(None)
    #: name of the pre-processor used to write the IGES file. Default:
    #: :py:`"ParaPy {VERSION} - Open CASCADE IGES processor {OCC_VERSION}"`
    #: :type: str | None
    interface_version = Input(None)
    #: If True (default), faces will be translated into IGES 510 (Face)
    #: entities. The IGES file will contain BRep entities. If False, faces
    #: will be translated into IGES 144 (Trimmed Surface) entities, no BRep
    #: entities will be written to the IGES file.
    #: :type: bool
    brep_mode = Input(True)
    #: this parameter indicates whether elementary surfaces (cylindrical,
    #: conical, spherical, and toroidal) are converted into corresponding IGES
    #: 5.3 entities (if :py:`True`), or written as surfaces of revolution
    #: (if :py:`False`, the default value).
    #: :type: bool
    convert_surface_mode = Input(False)

    def _provide_parapy_inputs_to_occ_mapping(self):
        return {"unit": "write.iges.unit",
                "author": "write.iges.header.author",
                "company": "write.iges.header.company",
                "receiver": "write.iges.header.receiver",
                "brep_mode": ("write.iges.brep.mode",
                              bool_to_int),
                "convert_surface_mode": ("write.convertsurface.mode",
                                         bool_to_int),
                }

    def _init_helper(self):
        return IGESCAFRoot(settings=self._merged_settings,
                           color_mode=self.color_mode,
                           name_mode=self.name_mode,
                           layer_mode=self.layer_mode,
                           send_name=self.send_name,
                           interface_version=self.interface_version)


def _write_iges(self, filename, **kwargs):
    IGESWriter(self, filename=filename, **kwargs).write()


DrawableShape.write_iges = _write_iges

