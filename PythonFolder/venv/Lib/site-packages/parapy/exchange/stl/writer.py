#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""STLWriter class"""

import warnings

from OCC.utils.exchange.stl import (_DEFAULT_LINEAR_DEFLECTION,
                                    _DEFAULT_ANGULAR_DEFLECTION,
                                    shape_to_stl_file)
from parapy.core import Input, FileWriter
from parapy.core.exceptions import ParaPyDeprecationWarning
from parapy.geom import Compound
from parapy.geom.occ.drawable import DrawableShape


class STLWriter(FileWriter):
    """Write one shape :attr:`shape_in` to an .stl file located at
    :attr:`filename`. Usage:

    >>> from parapy.exchange import STLWriter
    >>> from parapy.geom import Box
    >>> box = Box(1, 2, 3)
    >>> writer = STLWriter(box, "path/to/your/file.stl")
    >>> writer.write()
    Written: path/to/your/file.stl

    .. note: ParaPy geometry is monkey-patched with a ``write_stl`` method::

        >>> box.write_stl("path/to/your/file.stl")
    """

    __initargs__ = ["shape_in", "filename"]
    file_or_dir = "file"
    wildcard = "STL files (*.stl,*.STL) |*.stl;*.STL"

    #: shape to write or sequence of these
    #: :type: parapy.geom.occ.drawable.DrawableShape | collections.Sequence[parapy.geom.occ.drawable.DrawableShape]
    shape_in = Input()

    #: linear deflection for the meshing algorithm. If :attr:`relative` is
    #: True, the deflection used for discretization of each edge will be
    #: this linear_deflection value * <size of="" edge>="">. Deflection
    #: used for the faces will be the maximum deflection of their edges.
    #: :type: float
    linear_deflection = Input(_DEFAULT_LINEAR_DEFLECTION)

    #: If True, the deflection used for discretization of each edge will be
    #: :attr:`linear_deflection` * <size of="" edge>="">. Deflection
    #: used for the faces will be the maximum deflection of their edges.
    #: :type: bool
    relative = Input(True)

    #: angular deflection
    #: :type: float
    angular_deflection = Input(_DEFAULT_ANGULAR_DEFLECTION)

    #: if True the minimal parametric tolerance is computed taking minimal
    #: parametric distance between vertices into account.
    #: :type: bool
    adaptive_min = Input(False)

    #: if True shape will be meshed in parallel.
    #: :type: bool
    parallel = Input(True)

    #: *DEPRECATED*, use :attr:`linear_deflection` and :attr:`relative` is True
    coefficient = Input(_DEFAULT_LINEAR_DEFLECTION)

    #: *DEPRECATED*, use :attr:`linear_deflection`
    deflection = Input(None)

    def write(self, pathname=None):
        filename = self.resolve_pathname(pathname)
        shape_in = self.shape_in

        linear_deflection = self.linear_deflection
        relative = self.relative
        angular_deflection = self.angular_deflection
        adaptive_min = self.adaptive_min
        parallel = self.parallel

        if self.is_user_defined("coefficient"):
            coefficient = self.coefficient
            msg = ("STLWriter.coefficient has been deprecated. Specify "
                   "`linear_deflection={}.` and `relative=True` instead.")
            warnings.warn(msg.format(coefficient), ParaPyDeprecationWarning)
            linear_deflection = coefficient
            relative = True

        if self.is_user_defined("deflection"):
            deflection = self.deflection
            msg = ("STLWriter.deflection has been deprecated. Specify "
                   "`linear_deflection={}.` and `relative=False` instead.")
            warnings.warn(msg.format(deflection), ParaPyDeprecationWarning)
            linear_deflection = deflection
            relative = False

        if hasattr(type(shape_in), "__iter__"):
            if len(shape_in) > 1:
                shape_in = Compound(shape_in)
            else:
                shape_in = next(iter(shape_in))

        shape_to_stl_file(shape_in.TopoDS_Shape, filename, linear_deflection,
                          relative, angular_deflection, parallel, adaptive_min)
        print("Written:", filename)


def _write_stl(self, filename, **kwargs):
    STLWriter(self, filename=filename, **kwargs).write()

DrawableShape.write_stl = _write_stl
