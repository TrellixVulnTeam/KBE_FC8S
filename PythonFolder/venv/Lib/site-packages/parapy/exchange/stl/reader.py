#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.utils.exchange.stl import shape_from_stl_file

from parapy.core import Attribute, FileReader
from parapy.geom.occ.brep import TopoDS_Shape2ParaPy


class STLReader(FileReader):
    """Read shape from .stl file. Result is accessible from :attr:`shape`
    Attribute. Usage:

    >>> from parapy.exchange import STLReader
    >>> reader = STLReader(filename="path/to/your/file.stl")
    >>> reader.shape  # doctest: +ELLIPSIS
    Read: path/to/your/file.stl
    <Compound_ ...>
    """

    __initargs__ = ["filename"]
    file_or_dir = "file"
    wildcard = "STL files (*.stl,*.STL) |*.stl;*.STL"

    @Attribute(in_tree=True)
    def shape(self):
        """Shape read from .brep file, returned as a (derived) instance of
        :class:`~parapy.geom.occ.brep.Brep`.

        :rtype: parapy.geom.BRep
        """
        filename = self.resolve_pathname(None)
        topods_shape = shape_from_stl_file(filename)
        print("Read:", filename)

        cls = TopoDS_Shape2ParaPy(topods_shape)
        return cls(TopoDS_Shape=topods_shape)

    def read(self, pathname=None):
        old_filename = self.filename

        new_filename = self.resolve_pathname(pathname)
        if new_filename == old_filename:
            print(f"Skipped re-reading file: {old_filename}")
        else:
            self.filename = new_filename
        try:
            return self.shape
        except Exception:
            # when it fails, restore the old filename
            self.filename = old_filename
            raise
