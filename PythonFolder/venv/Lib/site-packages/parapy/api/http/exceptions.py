#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Server exceptions"""

#===============================================================================
# Exceptions
#===============================================================================

# Standard Flask Exception system can not be used, because Flask-restful monkey-patches it.
# New Exception classes below need code and data attributes. The latter needs a "message" key.

class ParaPyServerError(Exception):
    
    """
    Abstract class for all new restful exceptions below.
    subclass this class and just reset the code and data attributes
    The constructor of this class will do the rest.
    
    constructor: __init__(self, message=None, code=None, **kwargs).
    side-effects 
    - self.code = code (defaults to class attribute)
    - self.data = {"message" : message, **kwargs} (message defaults to class attribute) 
    
    """
    
    #__metaclass__ = ABCMeta
    
    code = None
    message = None

    def __init__(self, message=None, code=None, **kwargs):
        
        """
        Initializes instance. Typically you don't provide message or code on initialization, instead define them in
        the class definition. However kwargs can be used to send more info to the client. Any key and value will do
        as long as the ParaPyJSONEncoder can handle it.
        
        arguments
            message(str) Will be send in the response to client. Default = None (in which case it uses class attribute)
            code(integer) HTTP Reponse code. Default = None (in which case class attribute is used)
            kwargs(dict) Extra keys that will be send to the client.
        
        """
        
        Exception.__init__(self)
        self.code = code or self.code
        self.message = message or self.message
        self.data = {"message" : self.message}
        self.data.update(kwargs)


class BadJSON(ParaPyServerError):
    
    code = 400
    message = "Bad request. Provided JSON data could not be decoded. Check sanity of provide JSON data."


class InstanceNotFound(ParaPyServerError):
    
    code = 404
    message = "Not found. Base instance does not exist. Create it first."


class SlotNotFound(ParaPyServerError):
    
    code = 404
    message = "Not found. Slot does not exist for this instance."


class SlotEvaluationError(ParaPyServerError):
    
    code = 500
    message = "Slot evaluation failed."


class TypeNotFound(ParaPyServerError):
    
    code = 404
    message = "Not found. This type_converter does not exist. Use add_type_converter to add new converters."
