#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Contains functions that represent different ParaPy scripts"""

import argparse
import os
import warnings

from parapy.config import create_config
from parapy.globs import PARAPY_USER_DIR


def pp_create_config_main():
    parser = argparse.ArgumentParser(description='ParaPy Config File Creator')
    msg = ('Path to file or directory where you want to create a default '
           'ParaPy config file. If nothing is specified, it will copy the '
           'config file to the ParaPy user directory "{pp_user_dir}". Note '
           'that paths including an extension (e.g. .INI) will be '
           'interpreted as files, otherwise they will be interpreted as '
           'directories."')
    parser.add_argument('file_or_dir', nargs='?', default=None,
                        help=msg.format(pp_user_dir=PARAPY_USER_DIR))
    args = parser.parse_args()

    file_or_dir = args.file_or_dir
    if file_or_dir is None:
        file_or_dir = os.path.join(PARAPY_USER_DIR, 'config.INI')
    else:
        file_or_dir = os.path.abspath(file_or_dir)  # also unpacks '.'

    # check if the directory exists where we want to place the config file
    dirname = os.path.dirname(file_or_dir)
    if not os.path.exists(dirname):
        msg = ('Cannot copy config file to "{}": directory "{}" does not '
               'exist! Please create it manually before running this script.')
        warnings.warn(msg.format(file_or_dir, dirname))
        return
    elif not os.path.isdir(dirname):
        msg = ('Cannot copy config file to "{}": "{}" is not a directory! '
               'Please specify a correct path.')
        warnings.warn(msg.format(file_or_dir, dirname))
        return

    config_file = create_config(file_or_dir)
    print("Written config file to: ", config_file)


def pp_check_lic_main():
    from parapy._compiled.license_utils import test_license

    description = ('Tool to check if your license is valid. '
                   'When not specifying a license file, it shows you if the '
                   'default license lookup-mechanism can find a valid license.'
                   'When specifying a file, it will check if the given '
                   'license file is valid.\n\nThis tool can be easily '
                   'used in an automated environment. If the exit-code of '
                   'this application is 0, the provided license is valid. '
                   'If the exit code is 1 either the license is not valid, or '
                   'the license file does not exist. For all other '
                   'non-zero exit codes something unexpected happened.')
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('file', help='path to ParaPy license file', nargs='?',
                        default=None)
    args = parser.parse_args()

    if args.file:
        license_file = os.path.abspath(args.file)
        if not os.path.isfile(license_file):
            msg = f"Cannot check license, {license_file} is not a file!"
            raise FileNotFoundError(msg)
    else:
        license_file = None

    test_license(license_file)


if __name__ == '__main__':
    pp_create_config_main()
    pp_check_lic_main()
