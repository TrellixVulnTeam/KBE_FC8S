#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from math import sqrt, acos, sin


def area_quad(pt1, pt2, pt3, pt4):
    return area_triangle(pt1, pt2, pt3)+\
           area_triangle(pt2, pt3, pt4)

def area_triangle(pt1, pt2, pt3):
    x1, y1, z1 = pt2[0]-pt1[0], pt2[1]-pt1[1], pt2[2]-pt1[2]
    x2, y2, z2 = pt3[0]-pt2[0], pt3[1]-pt2[1], pt3[2]-pt2[2]
    mag1 = sqrt(x1**2 + y1**2 + z1**2)
    mag2 = sqrt(x2**2 + y2**2 + z2**2)
    dot = x1*x2+y1*y2+z1*z2
    # angle = acos(dot / (mag1 * mag2))
    return 0.5 * mag1 * mag2 * sin(acos(dot / (mag1 * mag2)))

# def vector(pt1, pt2):
#     x1, y1, z1 = pt1
#     x2, y2, z2 = pt2
#     return (x2-x1), (y2-y1), (z2-z1)
#
# def angle(v1, v2, mag1, mag2):
#     dot = v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2]
#     return acos(dot / (mag1 * mag2))
#
# def magnitude(v):
#     return sqrt(v[0]**2 + v[1]**2 + v[2]**2)
#
# def distance(pt1, pt2):
#     x1, y1, z1 = pt1
#     x2, y2, z2 = pt2
#     return sqrt(abs(x2-x1)**2 + abs(y2-y1)**2 + abs(z2-z1)**2)

if __name__ == '__main__':

    pt1 = (0, 0, 0)
    pt2 = (1, 0, 0)
    pt3 = (1, 1, 0)
    pt4 = (0, 1, 0)
    print(area_triangle(pt1, pt2, pt3)+area_triangle(pt2, pt3, pt4))

    def time_trial():
        for _ in range(32000):
            area_triangle(pt1, pt2, pt3)+area_triangle(pt2, pt3, pt4)

    from parapy.core import duration
    with duration():
        time_trial()

    from cProfile import run
    run("time_trial()", None, True)
