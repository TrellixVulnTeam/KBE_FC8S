#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""
Template strings for BDFWriter.

SUBCASE-LOAD-FORCE rational
Each SUBCASE specified a LOADID. Use even numbers for this starting at 2.
Each new LOAD statement refers to this LOADID and to N FORCE statements.
FORCE STATEMENTS use odd numbers starting at 1. Example::

    SUBCASE 1
        LOAD = 2  <--- start at 2
    SUBCASE 2
        LOAD = 4  <--- next even integer

    LOAD 2 1. 1. 1 1. 3  <--- 2 matches above, 1&3 matches below.
    LOAD 4 1. 1. 5 1. 7  <--- 4 matches above, 5&7 matches below.

    FORCE 1 220 0 1001. 1. 0. 0.  <--- start at 1
    FORCE 3 221 0 1002. 1. 0. 0.  <--- next odd integer...
    FORCE 5 222 0 1003. 1. 0. 0.  <--- etc
    FORCE 7 223 0 1004. 1. 0. 0.  <--- etc

SUBCASE-SPCADD-SPCD-SPC1 rational
Each SUBCASE specified a SPCID. Use even numbers for this starting at 2.
Each new SPCADD statement refers to this SPCID and to N SPC1 statements.
Each SPCD statement refers to the SPCID
SPC1 STATEMENTS define their own SID starting at 1. Example::

    SUBCASE 1
        SPC = 2  <--- start at 2
    SUBCASE 2
        SPC = 4  <--- next even integer

    SPCADD 2 1 2  <--- 2 matches above, 1&2 matches below.
    SPCADD 4 3 4  <--- 4 matches above, 3&4 matches below.

    SPC1 1 123456 220 <--- start at 1
    SPC1 2 1346 221  <--- next integer...
    SPC1 3 146 222  <--- etc
    SPC1 4 1 223  <--- etc
    SPCD 2 217 3 1.03 <-- 2 refers to SUBCASE 1.SPC
    SPCD 4 218 3 1.03 <-- 2 refers to SUBCASE 2.SPC
"""

from parapy.core.utilities import by_pairs

_HEADER =\
"""$
$ Generated by ParaPy-NASTRAN INTERFACE
$ Date: {datetime}
$ Project: RUDDER IN A MONTH
$ UseCase: HINGE LINE OPTMISATION
$
ID RUDDER
SOL 101
TIME 5
CEND
TITLE = RUDDER IN A MONTH
SUBTITLE = HINGE LINE OPTIMISATION
"""

_BEGINBULK=\
"""
BEGIN BULK
$   1  ><   2  ><   3  ><   4  ><   5  ><   6  ><   7  ><   8  ><   9  ><  10  >
"""

_ENDDATA=\
"""ENDDATA"""

#: TODO: what about cases without SPC / LOAD?
#: ID: The subcase identification number.
#: SPCID Single-point constraint set identification number.
#: LOADID: Load set identification number.
_SUBCASE=\
"""SUBCASE {ID:d}
$ Subcase name : {name}
   SUBTITLE={name}
   {SPC_string}
   {LOAD_string}
   DISPLACEMENT(SORT1,REAL)=ALL
   SPCFORCES(SORT1,REAL)=ALL
   STRESS(SORT1,REAL,VONMISES,BILIN)=ALL
"""

_SUBCASESPC = \
"""$ Selects a single-point constraint set to be applied.
   SPC = {SPCID:d}"""

_SUBCASELOAD = \
"""$ Selects an external static loading set.
   LOAD = {LOADID:d}"""

class _TMPLT(object):

    HEADER = _HEADER
    SUBCASE = _SUBCASE
    SUBCASESPC = _SUBCASESPC
    SUBCASELOAD = _SUBCASELOAD
    BEGINBULK = _BEGINBULK
    ENDDATA = _ENDDATA

    BLANKS = None
    MAT = None
    RBAR = None
    GRID = None
    CQUAD4 = None
    PSHELL = None
    LOAD = None
    SPCADD = None
    FORCE = None


class TMPLT8(_TMPLT):
    """Template container for NASTRAN Cards. All cards
    are printed in short 8-character fields. TMPLT16
    should be used in case of one wants higher accuracy
    for numbers. Input ``decimals`` (int) controls formatting
    of reals. Usage::

    >>> tmplt = TMPLT8(2)
    >>> tmplt.CQUAD4
    CQUAD4  {EID:<8d}{PID:<8d}{G1:<8d}{G2:<8d}{G3:<8d}{G4:<8d}{THETA:<8.2f}{ZOFFS:<8.2f}
                {TFLAG:<8d}{T1:<8.2f}{T2:<8.2f}{T3:<8.2f}{T4:<8.2f}
    >>> tmplt.CQUAD4.format(EID=1, PID=1, G1=1, G2=2, G3=3, G4=4, THETA=0, ZOFFS=0,
                            TFLAG=0, T1=1.1, T2=1.2, T3=1.3, T4=1.4)
    CQUAD4  1       1       1       2       3       4       0.00    0.00
                    0       1.10    1.20    1.30    1.40
    >>> tmplt.LOAD(SID=1, S=1, SiLi=[1, 1, 1, 2, 1, 3, 1, 4, 1, 5])
    LOAD    1       1.00    1.00    1       1.00    2
            1.00    3       1.00    4       1.00    5
    >>> tmplt.FORCE.format(SID=2, G=5, CID=6, F=2.9, N1=0.0, N2=1.0, N3=0.0)
    FORCE   2       5       6       2.90    0.00    1.00    0.00
    """

    def __init__(self, decimals):

        BLANKS = " " * 8
        BLANKS16 = " " * 16
        def NAME(name):
            return "{:<8}".format(name)
        def NAME16(name):
            return "{:<16}".format(name)
        def STR(name):
            return "{{{:}:<8}}".format(name)
        def STR16(name):
            return "{{{:}:<16}}".format(name)
        def INT(name):
            return "{{{:}:<8d}}".format(name)
        def INT16(name):
            return "{{{:}:<16d}}".format(name)
        def REAL(name):
            return "{{{:}:<8.{:}f}}".format(name, decimals)
        def REAL16(name):
            return "{{{:}:<16.{:}f}}".format(name, decimals)
        def EXPT(name, dec=None):
            return "{{{:}:<8.{:}e}}".format(name, dec or decimals)
        def EXPT16(name, dec=None):
            return "{{{:}:<16.{:}e}}".format(name, dec or decimals)

        self._LOADHEAD = NAME("LOAD")+INT("SID")+REAL("S")
        self._LOADTAIL = REAL("Si")+INT("Li")
        self._SPCADDHEAD = NAME("SPCADD")+INT("SID")
        self._SPCADDTAIL = INT("Si")
        self._SPC1HEAD = NAME("SPC1")+INT("SID")+STR("C")
        self._SPC1TAIL = INT("Gi")

        self.BLANKS = BLANKS
        self.MAT = NAME("MAT1")+INT("MID")+\
                   EXPT("E", 1)+EXPT("G", 1)+EXPT("NU", 1)+EXPT("RHO", 1)+"\n"
        self.RBAR = NAME("RBAR")+INT("EID")+INT("GA")+INT("GB")+BLANKS+\
                    INT("CNA")+INT("CNB")+"\n"
        self.GRID = NAME("GRID")+INT("EID")+BLANKS+\
                    REAL("x")+REAL("y")+REAL("z")+"\n"
        self.GRID_w_CD = NAME("GRID")+INT("EID")+BLANKS+\
                         REAL("x")+REAL("y")+REAL("z")+INT("CD")+"\n"
        self.GRID16 = NAME("GRID*")+INT16("EID")+BLANKS16+REAL16("x")+REAL16("y")+BLANKS+"\n"+\
                      BLANKS+REAL16("z")+"\n"
        self.GRID_w_CD16 = NAME("GRID*")+INT16("EID")+BLANKS16+REAL16("x")+REAL16("y")+BLANKS+"\n"+\
                           BLANKS+REAL16("z")+INT16("CD")+"\n"
        self.CTRIA3 = NAME("CTRIA3")+INT("EID")+INT("PID")+\
                      INT("G1")+INT("G2")+INT("G3")+\
                      REAL("THETA")+REAL("ZOFFS")+"\n"+\
                      BLANKS+BLANKS+INT("TFLAG")+REAL("T1")+REAL("T2")+REAL("T3")+"\n"
        self.CQUAD4 = NAME("CQUAD4")+INT("EID")+INT("PID")+\
                      INT("G1")+INT("G2")+INT("G3")+INT("G4")+\
                      REAL("THETA")+REAL("ZOFFS")+"\n"+\
                      BLANKS+BLANKS+INT("TFLAG")+REAL("T1")+REAL("T2")+REAL("T3")+REAL("T4")+"\n"
        self.PSHELL = NAME("PSHELL")+INT("PID")+INT("MID1")+REAL("T")+INT("MID2")+BLANKS+INT("MID3")+"\n"
        self.FORCE = NAME("FORCE")+INT("SID")+INT("G")+INT("CID")+\
                     REAL("F")+REAL("N1")+REAL("N2")+REAL("N3")+"\n"
        # FIXME: velocity and acceleration currently not supported.
        self.SPCD = NAME("SPCD")+INT("SID")+INT("Gi")+INT("Ci")+REAL("Di")
        # Defines a rectangular coordinate system using the xy_coordinates of three points.
        # A1-A3 define the center. B1-B3 z-direction. C1-C3 x-direction.
        self._CORD2R = NAME("CORD2R")+INT("CID")+INT("RID")+REAL("A1")+REAL("A2")+REAL("A3")+\
                      REAL("B1")+REAL("B2")+REAL("B3")+"\n"+\
                      BLANKS+REAL("C1")+REAL("C2")+REAL("C3")+"\n"
        self._CORD2R16 = NAME("CORD2R*")+INT16("CID")+INT16("RID")+REAL16("A1")+REAL16("A2")+STR("CONT1")+"\n"+\
                        STR("CONT1")+REAL16("A3")+REAL16("B1")+REAL16("B2")+REAL16("B3")+STR("CONT2")+"\n"+\
                        STR("CONT2")+REAL16("C1")+REAL16("C2")+REAL16("C3")+"\n"
        self.CBAR = NAME("CBAR")+INT("EID")+INT("PID")+INT("GA")+INT("GB")+REAL("X1")+REAL("X2")+REAL("X3")+BLANKS+"\n"+\
                    BLANKS+BLANKS+BLANKS+REAL("W1A")+REAL("W2A")+REAL("W3A")+REAL("W1B")+REAL("W2B")+REAL("W3B")+"\n"
        self.PBARL = NAME("PBARL")+INT("MID")+BLANKS+STR("TYPE")+"\n"+\
                     BLANKS+REAL("DIM1")+REAL("DIM2")

    def CORD2R(self, CID, RID, A1C3_list):
        A1, A2, A3, B1, B2, B3, C1, C2, C3 = A1C3_list
        return self._CORD2R.format(
            CID=CID, RID=RID,
            A1=A1, A2=A2, A3=A3,
            B1=B1, B2=B2, B3=B3,
            C1=C1, C2=C2, C3=C3)

    def CORD2R16(self, CID, RID, A1C3_list):
        if not 0 < CID < 100:
            raise ValueError("Coordinate system ID should be in range [1-99]. Received: {0}".format(CID))
        CONT1 = "*CRD2A" + str(CID)
        CONT2 = "*CRD2B" + str(CID)
        A1, A2, A3, B1, B2, B3, C1, C2, C3 = A1C3_list
        return self._CORD2R16.format(
            CID=CID, RID=RID,
            A1=A1, A2=A2, A3=A3,
            B1=B1, B2=B2, B3=B3,
            C1=C1, C2=C2, C3=C3,
            CONT1=CONT1, CONT2=CONT2)

    def SPCADD(self, SID=None, Si_list=[]):
        """Si_list is list of [int, int, ...]"""
        string = self._SPCADDHEAD.format(SID=SID)
        column = 3
        for Si in Si_list:
            if column < 10:
                # append on same line
                string += self._SPCADDTAIL.format(Si=Si)
                column += 1
            else:
                # newline and column now at 3
                string+= "\n"+self.BLANKS+self._SPCADDTAIL.format(Si=Si)
                column = 3
        return string+"\n"

    def LOAD(self, SID, S, SiLi_list=[]):
        """SiLi_list is list of [number, int, number, int, ...]"""
        string = self._LOADHEAD.format(SID=SID, S=S)
        column = 5
        for Si, Li in by_pairs(SiLi_list):
            if column < 9:
                # append on same line
                string += self._LOADTAIL.format(Si=Si, Li=Li)
                column += 2
            else:
                # newline and column now at 4
                string+= "\n"+self.BLANKS+self._LOADTAIL.format(Si=Si, Li=Li)
                column = 4
        return string+"\n"

    def SPC1(self, SID=None, C=None, Gi_list=[]):
        string = self._SPC1HEAD.format(SID=SID, C=C)
        column = 4
        for Gi in Gi_list:
            if column < 10:
                # append on same line
                string += self._SPC1TAIL.format(Gi=Gi)
                column += 1
            else:
                # newline and column now at 3
                string+= "\n"+self.BLANKS+self._SPC1TAIL.format(Gi=Gi)
                column = 3
        return string+"\n"


if __name__ == '__main__':

    tmplt = TMPLT8(2)
    print(tmplt.CQUAD4)
    print(tmplt.CQUAD4.format(EID=1, PID=1, G1=1, G2=2, G3=3, G4=4, THETA=0, ZOFFS=0,
                              TFLAG=0, T1=1.1, T2=1.2, T3=1.3, T4=1.4))
    print(tmplt.LOAD(SID=1, S=1, SiLi_list=[1, 1, 1, 2, 1, 3, 1, 4, 1, 5]))
    print(tmplt.FORCE.format(SID=2, G=5, CID=6, F=2.9, N1=0.0, N2=1.0, N3=0.0))
