#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""
This module is Adapted from pyNastran. Removed dependencies to Numpy
and six. And made the code faster.

Source: https://github.com/SteveDoyle2/pyNastran/tree/master/pyNastran/bdf
Data accessed: 05-Aug-2015
"""

import sys


if sys.version_info[0] == 3:
    import builtins

    string_types = str,
    integer_types = int,
    range = builtins.range

else:
    import builtins
    string_types = str,
    integer_types = (int, int)
    range=  builtins.xrange


BLANKS = " "*8


def print_scientific_8(value):
    """
    Prints a value in 8-character scientific notation.
    This is a sub-method and shouldnt typically be called

    .. seealso:: :func: `print_float_8` for a better method
    """
    if not value:
        return '%8s' % '0.'

    python_value = '%8.11e' % value
    svalue, sexponent = python_value.strip().split('e')
    exponent = int(sexponent)  # removes 0s

    sign = '-' if abs(value) < 1. else '+'

    # the exponent will be added later...
    exp2 = str(exponent).strip('-+')
    value2 = float(svalue)

    leftover = 5 - len(exp2)

    if value < 0:
        fmt = "%%1.%sf" % (leftover - 1)
    else:
        fmt = "%%1.%sf" % leftover

    svalue3 = fmt % value2
    svalue4 = svalue3.strip('0')
    field = "%8s" % (svalue4 + sign + exp2)
    return field


def print_float_8(value):
    """
    Prints a float in nastran 8-character width syntax using the
    highest precision possible.
    """
    if not value:
        return '%8s' % '0.'
    elif value > 0.:  # positive, not perfect...
        if value < 5e-8:
            return print_scientific_8(value)
        elif value < 0.001:
            field = print_scientific_8(value)
            field2 = "%8.7f" % value  # small value
            field2 = field2.strip('0 ')

            field1 = field.replace('-', 'e-')

            if field2 == '.':
                return print_scientific_8(value)
            if len(field2) <= 8 and float(field1) == float(field2):
                field = field2
                field = field.strip(' 0')
        elif value < 0.1:
            field = "%8.7f" % value
        elif value < 1.:
            field = "%8.7f" % value  # same as before...
        elif value < 10.:
            field = "%8.6f" % value
        elif value < 100.:
            field = "%8.5f" % value
        elif value < 1000.:
            field = "%8.4f" % value
        elif value < 10000.:
            field = "%8.3f" % value
        elif value < 100000.:
            field = "%8.2f" % value
        elif value < 1000000.:
            field = "%8.1f" % value
        else:  # big value
            field = "%8.1f" % value
            if field.index('.') < 8:
                field = '%8.1f' % round(value)
                field = field[0:8]
                #assert '.' != field[0], field
            else:
                field = print_scientific_8(value)
            return field
    else:
        if value > -5e-7:
            field = print_scientific_8(value)
            return field
        elif value > -0.01:  # -0.001
            field = print_scientific_8(value)
            field2 = "%8.6f" % value  # small value
            field2 = field2.strip('0 ')

            # get rid of the first minus sign, add it on afterwards
            field1 = '-' + field.strip(' 0-').replace('-', 'e-')

            if len(field2) <= 8 and float(field1) == float(field2):
                field = field2.rstrip(' 0')
                field = field.replace('-0.', '-.')

        elif value > -0.1:
            # -0.01 >x>-0.1...should be 5 (maybe scientific...)
            field = "%8.6f" % value
            field = field.replace('-0.', '-.')
        elif value > -1.:
            # -0.1  >x>-1.....should be 6, but the baseline 0 is kept...
            field = "%8.6f" % value
            field = field.replace('-0.', '-.')
        elif value > -10.:
            field = "%8.5f" % value   # -1    >x>-10
        elif value > -100.:
            field = "%8.4f" % value   # -10   >x>-100
        elif value > -1000.:
            field = "%8.3f" % value   # -100  >x>-1000
        elif value > -10000.:
            field = "%8.2f" % value   # -1000 >x>-10000
        elif value > -100000.:
            field = "%8.1f" % value   # -10000>x>-100000
        else:
            field = "%8.1f" % value
            try:
                ifield = field.index('.')
            except ValueError:
                raise ValueError('error printing float; cant find decimal; field=%r value=%s' % (field, value))
            if ifield < 8:
                field = '%7s.' % int(round(value, 0))
                #assert '.' != field[0], field
            else:
                field = print_scientific_8(value)
            return field
    field = field.strip(' 0')
    field = '%8s' % field

    #assert len(field) == 8, ('value=|%s| field=|%s| is not 8 characters '
    #                         'long, its %s' % (value, field, len(field)))
    return field


def print_field_8(value): #, _isinstance=isinstance):
    """
    Prints a 8-character width field

    :param value:   the value to print
    :returns field: an 8-character string
    """
    if value is None:
        return BLANKS
    elif isinstance(value, integer_types):
        assert value < 100000000, value
        return "%8s" % value
    elif isinstance(value, float):
        return print_float_8(value)
    else:
        string = "%8s" % value
        assert len(string) <= 8, value
        return string


def print_card_8(fields):
    """
    Prints a nastran-style card with 8-character width fields.

    :param fields: all the fields in the BDF card (no trailing Nones)
    :returns card: string representation of the card in small field format

    .. note:: An internal field value of None or '' will be treated as
              a blank field
    .. note:: A small field format follows the  8-8-8-8-8-8-8-8 = 80
              format where the first 8 is the card name or
              blank (continuation).  The last 8-character field indicates
              an optional continuation, but because it's a left-justified
              unneccessary field, print_card doesnt use it.

    .. code-block:: python

      >>> fields = ['DUMMY', 1, 2, 3, None, 4, 5, 6, 7, 8.]
      >>> print_card_8(fields)
      DUMMY          1       2       3               4       5       6       7
      DUMMY          1       2       3               4       5       6       7
                    8.
    """
    # f = print_field_8
    out = "%-8s%s\n" % (fields[0], "".join(map(print_field_8, fields[1:9])))
    # out = "%-8s%s\n" % (fields[0], "".join([f(field) for field in fields[1:9]]))
    idx = 9
    L = len(fields)
    while idx < L:
        out+= "        %s\n" %("".join(map(print_field_8, fields[idx:idx+8])))
        # out+= "        %s\n" %("".join([f(field) for field in fields[idx:idx+8]]))
        idx +=8
    return out


if __name__ == '__main__':

    # |       |       |       |       |       |       |       |       |       |
    # CQUAD4  EID     PID     G1      G2      G3      G4      THETA   ZOFFS
    #                 TFLAG   T1      T2      T3      T4

    values = \
    ["CQUAD4",1,      1,      2,      3,      4,      5,      0.,     None,
                      1,      None,   None,   None,   None]

    print((print_card_8(values)))

    def test():
        for i in range(10000):
            print_card_8(values)

    from parapy.core import duration
    with duration():
        test()

    from cProfile import run
    run("test()", None, True)
