#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""
This module is Adapted from pyNastran. Removed dependencies to Numpy
and six. And made the code faster.

Source: https://github.com/SteveDoyle2/pyNastran/tree/master/pyNastran/bdf
Data accessed: 05-Aug-2015
"""

import sys


if sys.version_info[0] == 3:
    import builtins

    string_types = str,
    integer_types = int,
    range = builtins.range

else:
    import builtins
    string_types = str,
    integer_types = (int, int)
    range=  builtins.xrange


BLANKS = " "*16


def print_scientific_16(value):
    """
    Prints a value in 16-character scientific notation.
    This is a sub-method and shouldnt typically be called
    .. seealso:: print_float_16 for a better method
    """
    if not value:
        return '%16s' % '0.'

    python_value = '%16.14e' % value  # -1.e-2
    svalue, sexponent = python_value.strip().split('e')
    exponent = int(sexponent)  # removes 0s

    if abs(value) < 1.:
        sign = '-'
    else:
        sign = '+'

    # the exponent will be added later...
    sexp2 = str(exponent).strip('-+')
    value2 = float(svalue)

    # the plus 1 is for the sign
    len_sexp = len(sexp2) + 1
    leftover = 16 - len_sexp

    if value < 0:
        fmt = "%%1.%sf" % (leftover - 3)
    else:
        fmt = "%%1.%sf" % (leftover - 2)

    svalue3 = fmt % value2
    svalue4 = svalue3.strip('0')
    field = "%16s" % (svalue4 + sign + sexp2)
    return field


def print_float_16(value):
    """
    Prints a float in nastran 16-character width syntax
    using the highest precision possbile.
    .. seealso:: print_float_8
    """
    if not value:
        return '%16s' % '0.'
    elif value > 0.:  # positive, not perfect...
        if value < 5e-16:
            field = print_scientific_16(value)
            return field
        elif value < 0.001:
            field = print_scientific_16(value)
            field2 = "%16.15f" % value  # small value
            field2 = field2.strip('0 ')

            field1 = field.replace('-', 'e-')

            if field2 == '.':
                return print_scientific_16(value)
            if len(field2) <= 16 and float(field1) == float(field2):
                field = field2
                field = field.strip(' 0')
            return '%16s' % field
        elif value < 0.1:
            field = "%16.15f" % value
        elif value < 1.:
            field = "%16.15f" % value
        elif value < 10.:
            field = "%16.14f" % value
        elif value < 100.:
            field = "%16.13f" % value   # 10 < x < 100
        elif value < 1000.:
            field = "%16.12f" % value
        elif value < 10000.:
            field = "%16.11f" % value
        elif value < 100000.:
            field = "%16.10f" % value
        elif value < 1000000.:
            field = "%16.9f" % value
        elif value < 10000000.:
            field = "%16.8f" % value
        elif value < 100000000.:
            field = "%16.7f" % value
        elif value < 1000000000.:
            field = "%16.6f" % value
        elif value < 10000000000.:
            field = "%16.5f" % value
        elif value < 100000000000.:
            field = "%16.4f" % value
        elif value < 1000000000000.:
            field = "%16.3f" % value
        elif value < 10000000000000.:
            field = "%16.2f" % value
        elif value < 100000000000000.:
            field = "%16.1f" % value
        else:  # big value  # 123456789012345.
            field = "%16.1f" % value
            if field.index('.') < 16:
                field = '%16.1f' % (round(value))
                field = field[0:16]  # drop off the .1f
                #assert '.' != field[0], field
            else:
                field = print_scientific_16(value)
            return field
    else:
        if value > -5e-15:
            field = print_scientific_16(value)
            return field
        elif value > -0.01:  # -0.001
            field = print_scientific_16(value)
            field2 = "%16.14f" % value  # small value
            field2 = field2.strip('0 ')

            # get rid of the first minus sign, add it on afterwards
            field1 = '-' + field.strip(' 0-').replace('-', 'e-')

            if len(field2) <= 16 and float(field1) == float(field2):
                field = field2.rstrip(' 0')
                field = field.replace('-0.', '-.')
            return '%16s' % field
        elif value > -0.1:
            # -0.01 >x>-0.1...should be 5 (maybe scientific...)
            field = "%16.14f" % value
            field = field.replace('-0.', '-.')
        elif value > -1.:
            # -0.1  >x>-1.....should be 6, but the baseline 0 is kept...
            field = "%16.14f" % value
            field = field.replace('-0.', '-.')
        elif value > -10.:
            field = "%16.13f" % value  # -1    >x>-10
        elif value > -100.:
            field = "%16.12f" % value  #       -1 > x >      -10
        elif value > -1000.:
            field = "%16.11f" % value  #      -10 > x >     -100
        elif value > -10000.:
            field = "%16.10f" % value  #     -100 > x >    -1000
        elif value > -100000.:
            field = "%16.9f" % value   #    -1000 > x >   -10000
        elif value > -1000000.:
            field = "%16.8f" % value   #  -10,000 > x > -100,000
        elif value > -10000000.:
            field = "%16.7f" % value   #           -100,000 > x >          -1,000,000
        elif value > -100000000.:
            field = "%16.6f" % value   #         -1,000,000 > x >         -10,000,000
        elif value > -1000000000.:
            field = "%16.5f" % value   #        -10,000,000 > x >        -100,000,000
        elif value > -10000000000.:
            field = "%16.4f" % value   #       -100,000,000 > x >      -1,000,000,000
        elif value > -100000000000.:
            field = "%16.3f" % value   #     -1,000,000,000 > x >     -10,000,000,000
        elif value > -1000000000000.:
            field = "%16.2f" % value   #    -10,000,000,000 > x >    -100,000,000,000
        elif value > -10000000000000.:
            field = "%16.1f" % value   #   -100,000,000,000 > x >  -1,000,000,000,000
        else:
            field = "%16.1f" % value
            try:
                ifield = field.index('.')
            except ValueError:
                print(('field =', field))
                raise
            if ifield < 16:
                field = '%15s.' % (int(round(value, 0)))
                #assert '.' != field[0], field
            else:
                field = print_scientific_16(value)
            return field
    field = field.strip(' 0')
    field = '%16s' % field

    #assert len(field) == 16, ('value=%r field=%r is not 16 characters '
    #                          'long, its %s' % (value, field, len(field)))
    return field


def print_field_16(value): #, _isinstance=isinstance):
    """
    Prints a 16-character width field

    :param value:   the value to print
    :returns field: an 16-character string
    """
    if value is None:
        return BLANKS
    elif isinstance(value, integer_types):
        assert value < 1e16, value
        return "%16s" % value
    elif isinstance(value, float):
        return print_float_16(value)
    else:
        string = "%16s" % value
        assert len(string) <= 16, value
        return string


def print_card_16(fields):
    """Print a nastran-style card with 16-character width fields.

    :param fields: all the fields in the BDF card (no trailing Nones)

    .. note:: An internal field value of None or '' will be treated as
              a blank field

    .. note:: A large field format follows the  8-16-16-16-16-8 = 80
              format where the first 8 is the card name or
              blank (continuation).  The last 8-character field indicates
              an optional continuation, but because it's a left-justified
              unneccessary field, print_card doesnt use it.

    >>> fields = ['DUMMY', 1, 2, 3, None, 4, 5, 6, 7, 8.]
    >>> print_card_16(fields)
    DUMMY*                 1               2               3
    *                      4               5               6               7
    *                     8.
    *
    """
    f=print_field_16
    out="%-8s%s\n"%(fields[0]+"*","".join(map(f,fields[1:5])))
    idx=5
    L=len(fields)
    while idx<L:
        out+="%-8s%s\n"%("*","".join(map(f,fields[idx:idx+4])))
        idx+=4
    return out


if __name__ == '__main__':

    # |       |       |       |       |       |       |       |       |       |
    # CQUAD4  EID     PID     G1      G2      G3      G4      THETA   ZOFFS
    #                 TFLAG   T1      T2      T3      T4

    values = \
    ["CQUAD4",1,      1,      2,      3,      4,      5,      0.,     None,
                      1,      None,   None,   None,   None]

    print((print_card_16(values)))

    def test():
        for i in range(10000):
            print_card_16(values)

    from parapy.core import duration
    with duration():
        test()

    from cProfile import run
    run("test()", None, True)
