#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import re
import datetime
import math

regex = re.compile("(\d*)([A-Z])(\d*)")
character_map = {"I": "d", "A": "", "F": "f", "D": "f"}


# TODO RvD: remove superfluous negative 0 cases, e.g. fmt_real(-1e-8) -> '-0.'
def fmt_real(x, width=10):
    w = width - 1  # make room for trailing . sign.
    if x < 0:  # make room for - sign.
        w -= 1
    x_abs = abs(x)
    if x_abs < 1:
        w_integers = 1
    else:
        w_integers = int(math.log(x_abs, 10)) + 1
    if w_integers > w:
        msg = ("Number {} is too large to fit as real in a {}-width field. "
               "Change dimensions.")
        raise RuntimeError(msg.format(repr(x), width))
    else:
        w_decimals = w - w_integers
        if w_decimals == 0:
            fmt = "{{:{}.0f}}.".format(w)  # force extra '.'
        else:
            fmt = "{{:{}.{}f}}".format(w, w_decimals)
        s = fmt.format(x).rstrip("0")
        s = "{{:>{}}}".format(width).format(s)
        # TODO RvD: remove this guard in future
        if len(s) > width:
            msg = ("Failed to format number {} within {} characters. Attempt: "
                   "{}. Adapt parapy.cae.vsaero.writer_utils.fmt_real().")
            raise RuntimeError(msg.format(repr(x), width, repr(s)))
        return s


# def fmt_real(x, width=10):
#     x = str(float(x))
#     w_integers = x.find(".")
#     w_decimals = width - w_integers - 1
#     if w_decimals < 0:
#         msg = ("Number {} is too large to fit as real in a {}-width field. "
#                "Change dimensions.")
#         raise RuntimeError(msg.format(repr(x), width))
#     n_decimals = min(len(x) - w_integers - 1, w_decimals)
#     x = float(x)
#     if n_decimals == 0:
#         fmt = "{{:>{}.0f}}.".format(width - 1)  # force extra '.' at end
#     else:
#         fmt = "{{:>{}.{}f}}".format(width, n_decimals)
#     return fmt.format(x)


def fmt_string(format, optional=None):
    """
    :param format: VSAERO formatting string.
    :param optional: list. List of integers specifiying potential blanks.
        Starts at index 0!
    :return: str
    """
    optional = optional or []
    tokens = list(map(str.strip, format.split(",")))
    string = ""
    count = 0
    for token in tokens:
        t1, character, t3 = re.match(regex, token).groups()
        if t1 and t3:
            quantifier = int(t1)
            width = int(t3)
        else:
            quantifier = 1
            width = int(t3) if t3 else int(t1)
        for _ in range(quantifier):
            if character == "X":
                string += " " * width
            elif count in optional:
                string += "{{:>{:}}}".format(width)
            else:
                python_character = character_map[character]
                string += "{{:>{:}{:}}}".format(width, python_character)
            count += 1
    string += "\n"
    return string


def get_settings(settings, card, keys):
    """
    :param settings: dictionary
    :param int|str card: integer or name of CARD, e.g. 1 or "12A".
    :param keys: ``"IPRI", "IPRLEV", "IPRESS", "MSTOP", "MSTART", "MCASE", "IPLOT"``.
    :return:
    """
    card = str(card)
    return [settings["CARD_" + card + "_" + key] for key in keys]


def datetime_string():
    """
    Returns the current datetime string in iso-format, e.g. 2013-10-05T00:15:31
    :return: str
    """
    return datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S')


if __name__ == '__main__':
    from parapy.cae.vsaero.globs import SETTINGS

    keys = ["MSTOP", "MSTART", "MCASE"]
    print(get_settings(SETTINGS, 2, keys))
    print(datetime_string())
