#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Template strings for VSAEROWriter."""

from parapy.cae.vsaero.writer_utils import (fmt_string, fmt_real)


def CARD6_format(aldeg, yawdeg, rminf, rnb, rmach=None, compop=0.):
    """Onset conditions.

    :param float aldeg: angle of attack in degrees
    :param float yawdeg: side slip angle in degrees
    :param float rminf: freestream Mach number
    :param float rnb: Reynolds number
    :param float|None rmach: Reference Mach number. If ``None``, defaults
        to ``rminf``.
    :param float compop: Compressibility option.
    :rtype: str
    """
    if rmach is None:
        rmach = rminf
    return (fmt_real(aldeg) + fmt_real(yawdeg) + fmt_real(rmach) +
            fmt_real(rminf) + " " * 20 + fmt_real(rnb) + fmt_real(compop) +
            "\n")


def CARD7_format(cbar, sref, sspan, rmpx, rmpy, rmpz):
    """REFERENCE GEOMETRY.

    :param float cbar: Reference chord
    :param float sref: Reference area
    :param float sspan: Reference length for normalizing rolling and yawing
        moments
    :param float rmpx: x-coordinates of the moment reference point in gcs
    :param float rmpy: y-coordinates of the moment reference point in gcs
    :param float rmpz: z-coordinates of the moment reference point in gcs
    :return:
    """
    return (fmt_real(cbar) + fmt_real(sref) + fmt_real(sspan) +
            fmt_real(rmpx) + fmt_real(rmpy,) + fmt_real(rmpz) +
            "\n")


def CARD13D_format(x, y, z, width=10):
    return fmt_real(x, width=width) + \
           fmt_real(y, width=width) + \
           fmt_real(z, width=width) + "\n"


def CARD20D_format(x, y, z, width=10):
    return fmt_real(x, width=width) + \
           fmt_real(y, width=width) + \
           fmt_real(z, width=width) + "\n"


def CARD24B_format(F, KP, NS, KPCH, ISLRST, HTURB, RTHETA, XSTRT,
                   width=10):
    return fmt_real(F, width=width) + \
           fmt_string("8I5", [3, 4, 5, 6]).format(
               KP, NS, KPCH, "", "", "", "", ISLRST)[:-1] + \
           fmt_real(HTURB, width=width) + \
           fmt_real(RTHETA, width=width) + \
           fmt_real(XSTRT, width=width) + "\n"


def CARD_UNSTR2_format(x, y, z, width=16):
    return fmt_real(x, width=width) + \
           fmt_real(y, width=width) + \
           fmt_real(z, width=width) + "\n"


class CARDS(object):
    """Template container for VSAERO Cards.
    Optional inputs should be given as ``""``.
    VSEARO v7.4.
    Constraints: single case only.
    """

    # CARD 1: CASE DESCRIPTION
    CARD1 = fmt_string("A80")
    # CARD 2: CONTROL CARD
    CARD2 = fmt_string("8I5", [5, 6])
    # CARD 3: MODE CARD
    CARD3 = fmt_string("6I5", [1, 2, 3])
    # CARD 4: NUMBER OF ITERATIONS.
    CARD4 = fmt_string("6I5", [4, 5])
    # CARD 5: SYMMETRY CARD.
    CARD5 = fmt_string("8F10", [2, 3, 4, 5, 6, 7])
    # CARD 6: ONSET CONDITIONS
    CARD6 = fmt_string("8F10", [2, 4, 5])
    # CARD 6A: QUASI-STEADY ROTATION OPTION.
    # RULE: (Include if MODE=31 on CARD 3)
    CARD6A = fmt_string("6F10", [3, 4, 5])
    # CARD 7: REFERENCE GEOMETRY
    CARD7 = fmt_string("6F10")
    # CARD 8: SPECIAL OPTIONS
    CARD8 = fmt_string("14I5", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
    # CARD 8K: Panel Normal Rotations
    CARD8K = fmt_string("5I5, 4F10")
    # CARD 9A: COMPONENT DATA LABEL
    CARD9A = fmt_string("A10").format("BGINCOMPNT")
    # CARD 9B: COMPONENT CARD.
    CARD9B = fmt_string("7F10, I5")
    # CARD 9F: COMPONENT END LABEL
    CARD9F = fmt_string("A10").format("END COMPNT")
    # CARD 10: PATCH CARD.
    CARD10 = fmt_string("I3, I2, 3I5, A60", [0])
    # CARD 11: SECTION CARD.
    CARD11 = fmt_string("6F10, 4I5")
    # CARD 13D: BASIC POINTS.
    CARD13D = fmt_string("3F10")  # RvD: deprecated -> CARD13D_format
    # CARD 14: CHORDWISE NODE CARD.
    CARD14 = fmt_string("30X, 4I5")
    # CARD 17: WAKE GRID PLANE.
    CARD17 = fmt_string("F10")
    # CARD 18: GRID PLANE NODE CARD.
    CARD18 = fmt_string("30X, 4I5", [3, 4])
    # CARD 19: WAKE CARD
    CARD19 = fmt_string("3I5, 5X, A24", [3])
    # CARD 20: SHEDDING PANEL SPECIFICATION
    CARD20 = fmt_string("9I5, 2F10", [0, 1, 2, 3, 4, 7, 8, 9, 10])
    # CARD 21: STREAMWISE WAKE LINE POINTS
    CARD21D = fmt_string("3F10")
    # CARD 22: WAKE LINE NODE CARD.
    CARD22 = fmt_string("30X, 3I5")
    # CARD 23: JET WAKE VELOCITIES
    CARD23 = fmt_string("2F10")
    # CARD 24B: STREAMLINE STARTING POINTS. (Station Cut Option)
    CARD24B = fmt_string("F10, 8I5, 3F10", [4, 5, 6, 7])
    # CARD 25G: AUTOMATIC STREAMLINES
    CARD25G = fmt_string("A10").format("BGINAUTOSL")
    # CARD 25H: Label
    CARD25H = fmt_string("A10").format("END AUTOSL")
    # CARD 26: LAST CARD OF STREAMLINE INPUT
    CARD26 = fmt_string("F10, 3I5, 35X, 2F10", [0])
    # CARD 27: SCAN BOX.
    CARD27 = fmt_string("6I5")
    # CARD 35: OFF-BODY STREAMLINE
    CARD35 = fmt_string("6F10, 2I5")
    # CARD SOL1: SOLVER DATA LABEL
    CARD_SOL1 = fmt_string("A10").format("BGINNMLSOL")
    # CARD SOL2: SOLVER PARAMETERS
    # TODO RvD: understand this better!!!
    CARD_SOL2 = "&NMLSOL MATSOL='{:}',ITGSMX={:d},SOLRES={:f},RHSRES={:f} &END\n"
    # CARD SOL3: SOLVER END LABEL.
    CARD_SOL3 = fmt_string("A10").format("END NMLSOL")
    # BOUNDARY LAYER CONTROL START LABEL
    BLAYER1 = fmt_string("A10").format("BGINBLAYER")
    # BOUNDARY LAYER CONTROL PARAMETERS LABEL
    BLAYER2 = "&BLAYER BLWIT={:d} &END\n"
    # BOUNDARY LAYER CONTROL END LABEL
    BLAYER3 = fmt_string("A10").format("END BLAYER")
    # CARD UNSTR1: UNSTRUCTURED PATCH PARAMETERS.
    CARD_UNSTR1 = fmt_string("3I10")
    # CARD UNSTR2: COORDINATES OF CORNER POINTS (Repeat NCPT times)
    CARD_UNSTR2 = fmt_string("3D16")  # RvD: deprecated -> CARD_UNSTR2_format
    # CARD UNSTR3: CORNER POINT INDICES (Repeat NTRI times)
    CARD_UNSTR3 = fmt_string("3I10")


if __name__ == '__main__':
    print(CARDS.CARD2.format(0, 0, 0, 0, 0, "", 0, 0))
    print(CARDS.CARD3.format(1, "", "", "", 0, 10))
    print(CARDS.CARD3.format(1, 4096, "", "", 0, 10))
    print(CARD6_format(0.0, 0.0, 0.3, 300e6))
    print(CARDS.CARD10.format(1, 2, 3, 4, 5, "patch foo"))
    print(CARDS.CARD11)
    print(CARDS.CARD11.format(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 4, 0, 0, 0))
    print(CARDS.CARD_UNSTR3)
    print(CARDS.CARD19)
    print(CARDS.CARD19.format(22, 0, 0, "END OF WAKE"))
