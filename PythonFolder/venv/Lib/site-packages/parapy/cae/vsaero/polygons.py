#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakePolygon
from OCC.wrapper.gp import gp_Pnt

from parapy.core import Attribute, Part, Input, pairwise
from parapy.geom import Polygon, FilledSurface, LineSegment


class PanelPolygon(Polygon):
    """Can deal with quad panels that are triangular in nature, i.e.
    4 points in total of which 3 unique."""

    @Attribute
    def builder(self):
        """
        :rtype: OCC.BRepBuilderAPI.BRepBuilderAPI_MakePolygon
        """
        points = self.points
        if points[0] == points[-1]:
            points = points[:-1]
        builder = BRepBuilderAPI_MakePolygon()
        for point in points:
            builder.Add(gp_Pnt(*point))
        if self.force_closure and not points[0] == points[-1]:
            builder.Add(gp_Pnt(*points[0]))
        if not builder.IsDone():
            raise Exception("building polygon failed")
        return builder


class PanelFace(FilledSurface):
    """Can deal with quad panels that have similar start and end points."""

    __initargs__ = ("points",)

    #: 4 corner points of panel
    #: :type: collections.Sequence[parapy.geom.Point]
    points = Input()

    @Attribute
    def curves(self):
        points = self.points
        if points[0] == points[-1]:
            points = points[:-1]
        return [LineSegment(pt1, pt2) for pt1, pt2 in pairwise(points)]


