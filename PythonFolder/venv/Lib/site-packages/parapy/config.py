#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Reads configuration settings for ParaPy."""

import logging
import os
import shutil
import warnings
from configparser import ConfigParser
from collections import OrderedDict

from parapy.globs import ENV_PARAPY_CONFIG, PARAPY_USER_DIR, PKG_DIR
from parapy.version import Version as _Version

__all__ = ["CONFIGURATION"]


class ParaPyConfigParser(ConfigParser):
    """Extension to built-in ConfigParser that implements the save() method to
    save a ConfigParser object and overrides the config.INI. Use:

    >>> parser = ParaPyConfigParser()
    >>> parser.read("path/to/your/config.INI")  # doctest: +SKIP
    >>> parser.set_defaults(ParaPyConfigDefaults)  # doctest: +SKIP
    """

    # hack to preserve case while reading
    optionxform = str

    def __init__(self, **kwargs):
        # super() can not be used because ConfigParser is old-style
        ConfigParser.__init__(self, **kwargs)
        self._filename = None
        self._defaults = None

    def read(self, filename):
        filename = os.path.abspath(filename)
        if not os.path.exists(filename):
            msg = "ParaPy: config.INI not found at: {}"
            raise RuntimeError(msg.format(filename))
        self._filename = filename
        return ConfigParser.read(self, filename)

    def set_defaults(self, defaults):
        assert isinstance(defaults, ParaPyConfigDefaults)
        self._defaults = defaults

    def save(self, restore_defaults=False):
        """You can settings at runtime using methods from ConfigParser,
        see: https://docs.python.org/2/library/configparser.html. Example::

            from parapy.gui.config import Config
            Config.set("Tree", "LINES", False)
            Config.save()

        If you want to restore the default ParaPy configuration file::

            Config.save(restore_defaults=True)
        """
        if self._filename is None:
            msg = ("Can't save settings because self._filename is None. "
                   "Did you use read() before save()?")
            raise RuntimeError(msg)

        NewConfig = ConfigParser(allow_no_value=True)
        # hack to preserve case while writing
        NewConfig.optionxform = str
        defaults = self._defaults

        if restore_defaults:
            if self._defaults is None:
                msg = ("Can't save settings because self._filename is None. "
                       "Did you use read() before save()?")
                raise RuntimeError(msg)
            for section, options in defaults.items():
                NewConfig.add_section(section)
                for option, values in options.items():
                    comment = values[0]
                    value = values[1]
                    for line in comment.split('\n'):
                        NewConfig.set(section, "# " + line)
                    # copy value
                    NewConfig.set(section, option, value)
        else:
            for section in self.sections():
                NewConfig.add_section(section)
                for option in self.options(section):
                    try:
                        comment = defaults[section][option][0]
                    except Exception:
                        comment = None
                    if comment:
                        for line in comment.split('\n'):
                            NewConfig.set(section, "# " + line)
                    # copy value
                    NewConfig.set(section, option, self.get(section, option))

        with open(self._filename, "w") as fp:
            NewConfig.write(fp)
        print("Saved:", os.path.abspath(self._filename))

    def dump(self):
        for section in self.sections():
            for option in self.options(section):
                fmt = "{}.{} = {}"
                print(fmt.format(section, option, self.get(section, option)))


class ParaPyConfigDefaults(OrderedDict):
    """OrderedDict with default values for a Config.INI file. Structure::

        {Section: {Option: [default, comment],
                   Option: [default, comment],
                   ...},
         Section: ...}

    Use the :meth:`set()` method on sections, options, default values and a
    comment string. Comments strings can have '\n' characters. Example:

    >>> GUI_DEFAULTS = ParaPyConfigDefaults()
    >>> GUI_DEFAULTS.set('Tree', 'LINES', True,
    ...                  'Some description. Options: True| False')  # doctest: +SKIP
    >>> GUI_DEFAULTS.set('Tree', 'TWIST_BUTTONS', True,
    ...                  'Some description. Options: True| False.')  # doctest: +SKIP
    """

    def __init__(self):
        super(ParaPyConfigDefaults, self).__init__()

    def set(self, section, option, value, comment=None):
        self.setdefault(section, OrderedDict())[option] = [comment, value]


_DEF = ParaPyConfigDefaults()
_DEF.set("general", "IDE", "Undefined",
         "Name of your IDE. Options: \"PyCharm\", \"PyDev\", \"Undefined\"")
_DEF.set("general", "banner", True,
         "Show ParaPy banner in console at start-up. Options: True|False")

_DEF.set("core.import", "parse_part_slots", True,
         "Should ParaPy lazify Part expressions? Options: True|False")
_DEF.set("core.import", "fail_on_part_parser_error", True,
         "Should ParaPy fail on parser errors? Options: True|False")

_DEF.set("core.runtime", "precedents_tracking", True,
         "Should ParaPy trace `precedents`, besides `dependents`? Options: "
         "True|False")
_DEF.set("core.runtime", "circular_reference_detection", True,
         "Should ParaPy check for circular references at run-time? Options: "
         "True|False")
_DEF.set("core.runtime", "cleanup_traceback", True,
         "Should ParaPy clean up the traceback with frames from parapy.core "
         "and parapy.gui"
         " modules? Options: True|False")
_DEF.set("core.runtime", "multi_threaded", True,
         "Should ParaPy work in multi-threaded configurations? Options: "
         "True|False")
_DEF.set("core.runtime", "show_deprecated", True,
         "Show ParaPyDeprecationWarning? Options: True|False")
_DEF.set("core.runtime", "raise_on_event_handler_exception", False,
         "Raise when an on_slot_change handler throws an Exception? If "
         "set to True it will raise, and not execute any subsequent "
         "on_slot_change calls. If set to False (default) it will log the "
         "exception and continue to execute any subsequent event handlers. "
         "Options: True|False")

_DEF.set("core.debug", "warn_slot_setting_during_evaluation", False,
         "Should ParaPy warn when setting a slot during evaluation? Note that "
         "this slows down ParaPy. Options True|False")

_DEF.set("core.debug", "patch_pydevd_f_trace", True,
         "Patch the PyDev Debugger so it will continue execution when it "
         "fails to write to f_trace? Patching is only done when ParaPy is "
         "started in pydevd. Options True|False")

_DEF.set("core.debug", "patch_pydevd_step_compiled_frame", True,
         "Patch the PyDev Debugger so it is able to step through compiled "
         "frames? Patching is only done when ParaPy is started in pydevd in "
         "PyCharm 2019.2 and above. Options True|False")

_DEF.set("gui", "backend", 'wx', "Options: 'wx'.")
_DEF.set("gui", "warn_on_close_inspector", False,
         "Should the data-panel be set to an object that you click in the "
         "geometry viewer? Options: True| False")
_DEF.set("gui", "update_data_panel_on_geom_click", True,
         "Should the Property View be set to an object that you click in the "
         "geometry viewer? Options: True| False")
_DEF.set("gui", "update_tree_on_viewer_object_click", 'item',
         "What should happen if a object in the Viewer is clicked? None: "
         "nothing, item: expand the tree to the selected item. "
         "item_no_expand: do not expand the tree, highlight the closest "
         "ancestor in the expanded part of the tree instead. Options: "
         "None | item | item_no_expand")
_DEF.set('gui', "autodraw", False,
         "Should entire model tree be redrawn automatically each time the "
         "users changes model values? Options: True|False")
_DEF.set("gui", "main_window_class", "parapy.gui.main.MainWindow",
         "fully qualified path to default MainWindow class used in display()")
_DEF.set("gui", "print_selection_in_console", True,
         "Should the viewer object selection be printed in the console? Options: True|False"
         "Options: True|False")
_DEF.set("gui.tree", "lines", True,
         "Use this style to hide vertical level connectors. Options: "
         "True| False")
_DEF.set("gui.tree", "twist_button", True,
         "Selects alternative style of +/- buttons and shows rotating "
         "('twisting') arrows"
         " instead. Options: True| False.")
_DEF.set('gui.viewport', 'position_rendering_mode', 'point',
         "How to display a Position object in the geometry Viewer? "
         "Options: 'point' | 'axes'")
_DEF.set('gui.viewport', 'position_rendering_size', None,
         "Setting to override the size of the axes system if 'axes' was "
         "specified as position_rendering_mode. If None, a default size is "
         "used by the viewer. Options: float | None.")
_DEF.set("gui.viewport.tooltip", "show", True,
         "Show tooltip when hovering over objects in viewer? "
         "Options: True|False")
_DEF.set("gui.viewport.tooltip", "delay", 500,
         "Delay in milliseconds after which the tooltip is shown. Value > 0.")
_DEF.set("geom", "tolerance", 1e-8,
         "Default tolerance for geometric operations. Value > 0.")
_DEF.set("geom.generic", "apply_occ_patches_on_geom_generic", True,
         "Should the generic Point, Vector, ..., classes be patched with "
         "OpenCascade methods?"
         " Options: True|False")

CONFIGURATION = ParaPyConfigParser()
CONFIGURATION.set_defaults(_DEF)

#: Configuration file shipped in the ParaPy Package
PKG_CONFIG_FILE = os.path.join(PKG_DIR, "config.INI")
#: Default configuration file: It is placed in the ParaPy user directory.
DEFAULT_CONFIG_FILE = os.path.join(PARAPY_USER_DIR, "config.INI")


def find_config_file():
    """Check if ``path`` is a config file, if not, will try
    ``DEFAULT_CONFIG_FILE`` and then ``PKG_CONFIG_FILE``
    :rtype: str
    """
    env_config = os.getenv(ENV_PARAPY_CONFIG)
    if env_config:
        if os.path.isfile(env_config):
            return env_config
        else:
            msg = ("Environment variable {} was set to '{}', but it does not "
                   "reference a ParaPy configuration file!")
            warnings.warn(
                msg.format(ENV_PARAPY_CONFIG, env_config))

    # either no environment variable was set, or it was set to wrong path
    if os.path.isfile(DEFAULT_CONFIG_FILE):
        # there is a config file in the user '.parapy' directory
        return DEFAULT_CONFIG_FILE
    else:
        return PKG_CONFIG_FILE


PARAPY_CONFIG = find_config_file()


CONFIGURATION.read(PARAPY_CONFIG)
logging.info("Using Configuration file '{}'".format(PARAPY_CONFIG))


def restore_defaults():
    """Restores the original config.INI"""
    CONFIGURATION.save(restore_defaults=True)


def create_config(file_or_dir):
    """Create a default ParaPy config file in ``file_or_dir``.

    :param str file_or_dir: Either a path to a file or a directory. If
        ``file_or_dir`` contains an extension, it will be interpreted as
        a file and the default config file will be created at
        ``<file_or_dir>``, otherwise it will interpret it as a directory
        and create the file at ``<file_or_dir>/config.INI``.
    :returns: The path to the config file that has been written
    """
    _, ext = os.path.splitext(file_or_dir)
    if not ext:
        filepath = os.path.join(file_or_dir, 'config.INI')
    else:
        filepath = file_or_dir

    config_tmplt = os.path.join(PKG_DIR, 'config.INI.tmplt')
    shutil.copy(config_tmplt, filepath)
    return filepath


class Version(_Version):
    def __init__(self, *args, **kwargs):
        from parapy.core.exceptions import ParaPyDeprecationWarning
        warnings.warn("parapy.config.Version is deprecated, "
                      "use parapy.version.Version instead!",
                      ParaPyDeprecationWarning, stacklevel=2)
        super(Version, self).__init__(*args, **kwargs)


if __name__ == '__main__':
    CONFIGURATION.dump()
    # CONFIGURATION.save(restore_defaults=True)
