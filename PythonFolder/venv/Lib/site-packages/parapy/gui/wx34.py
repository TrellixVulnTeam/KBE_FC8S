#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import wx
import wx.propgrid as wxpg
from OCC.gui.wx34 import SetFrameSize, WX_MAJOR_VERSION

from parapy.core.exceptions import Wx3NotSupportedError
from parapy.utilities import try_update_wrapper

__all__ = ['CallSuper', 'GetItemData', 'LongStringProperty', 'SetItemData',
           'SetFrameSize', 'InsertMenuItem', 'InsertMenu',
           'RemoveMenuItem', 'WX_MAJOR_VERSION', 'WXPG_LABEL_STRING',
           'SystemSettings_GetColour', 'PGTextCtrlEditor']

if WX_MAJOR_VERSION > 3:
    WXPG_LABEL_STRING = wxpg.PG_LABEL_STRING
    LongStringProperty = wxpg.LongStringProperty
    PGTextCtrlEditor = wxpg.PGTextCtrlEditor
    PGEditor = wxpg.PGEditor
    PGProperty = wxpg.PGProperty
    PGTextCtrlAndButtonEditor = wxpg.PGTextCtrlAndButtonEditor
else:
    WXPG_LABEL_STRING = wxpg.LABEL_AS_NAME
    LongStringProperty = wxpg.PyLongStringProperty
    PGTextCtrlEditor = wxpg.PyTextCtrlEditor
    PGEditor = wxpg.PyEditor
    PGProperty = wxpg.PyProperty

    # Should be similar to the PGTextCtrlAndButtonEditor from wx4, it is not
    # present in wx3
    class PGTextCtrlAndButtonEditor(PGTextCtrlEditor):
        def CreateControls(self, propgrid, property, pos, sz):
            x, y = pos
            w, h = sz

            w_button = propgrid.GetRowHeight()
            w_textctrl = w - w_button

            # Create the 'primary' textctrl editor control
            textctrl = CallSuper(self, "CreateControls", propgrid, property,
                                 pos, (w_textctrl, h))

            button = wx.Button(propgrid.GetPanel(), wxpg.PG_SUBID2, "...",
                               (x + w_textctrl, y), (w_button, h),
                               wx.WANTS_CHARS)

            return textctrl, button

    def _RegisterMethods(self):
        # fix so it will register function when a class inherits indirectly
        # from PyProperty
        # TODO (TBD): Should this become a wx_utils fix instead?
        cls = self.__class__
        cls_dct = cls.__dict__
        if '_pyswig_methods_registered' not in cls_dct:
            cls._pyswig_methods_registered = True
            ls = [ab for ab in cls.__dict__.items()]
            for a, b in ls:
                if not a.startswith('_'):
                    setattr(cls, '%s_t_' % a, b)

    wxpg.PyProperty._RegisterMethods = _RegisterMethods


def wx3_not_supported(function_or_class, _repr=None):
    """Decorator to raise an error when a function or class that is not
    supported by wxPython 3 is used in conjunction with wxPython 3.
    Will raise a Wx3NotSupportedError if unsupported function is called or
    class is instantiated. Usage:

    >>> from parapy.gui import wx34
    >>> @wx34.wx3_not_supported
    ... class Bar(object):
    ...     pass
    ...
    >>> bar = Bar() # doctest: +SKIP
    Wx3NotSupportedError: <unbound method Bar.__init__> is not supported when
    using wxPython 3. If you want to use this feature, consider using wxPython
    4.

    """
    if isinstance(function_or_class, type):  # class
        cls = function_or_class
        cls.__init__ = wx3_not_supported(cls.__init__, _repr=cls)
        return cls

    else:  # function
        fn = function_or_class
        obj = _repr or fn

        def wrapper(*args, **kwargs):
            if WX_MAJOR_VERSION == 3:
                msg = ("{!r} is not supported when using wxPython 3. "
                       "If you want to use this feature, consider installing "
                       "wxPython 4.").format(obj)
                raise Wx3NotSupportedError(msg)
            return fn(*args, **kwargs)

        return try_update_wrapper(wrapper, fn)


def SetValidationFailureBehavior(evt, flags):
    if WX_MAJOR_VERSION > 3:
        flags = bytes([flags])
    evt.SetValidationFailureBehavior(flags)


def GetValidationFailureBehavior(evt):
    flags = evt.GetValidationFailureBehavior()
    if WX_MAJOR_VERSION > 3:
        flags = flags[0]
    return flags


def CallSuper(obj, funcname, *args, **kwargs):
    """Replace deprecated :func:`CallSuperMethod` while maintaining backwards-
    compatibility with wxPython 3.

    Usage:
    >>> from wx import propgrid as wxpg
    >>> from parapy.gui import wx34
    >>> obj = wxpg.StringProperty()
    >>> wx34.CallSuper(obj, "Foo")
    >>> wx34.CallSuper(obj, "Bar", 1, 2, a=3, b=4)

    :param obj: The object to call the super method of.
    :param str funcname: Name of the super method.
    :param string label: The string to be displayed with the tool.
    :param args: Positional arguments to be passed to the super method.
    :param kwargs: Keyword arguments to be passed to the super method.
    """
    if WX_MAJOR_VERSION > 3:
        cls = type(obj)
        fn = getattr(super(cls, obj), funcname)
        res = fn(*args, **kwargs)
    else:
        fn = getattr(obj, "CallSuperMethod")
        res = fn(funcname, *args, **kwargs)
    return res


def GetItemData(obj, item):
    """Replace deprecated :func:`GetPyData` while maintaining backwards-
    compatibility with wxPython 3. :func:`GetItemData` in wxPython 4 now
    behaves exactly as :func:`GetPyData` did in wxPython 3, i.e. it is no
    longer necessary to create and use instances of wx.TreeItemData to
    associate Python data objects with tree items; the Python objects
    can be used directly.

    :param wx.TreeCtrl obj: Control for the tree that the item belongs to.
    :param wx.TreeItemId item: Reference to the tree item.

    :rtype: PyObject
    """
    if WX_MAJOR_VERSION > 3:
        fn = getattr(obj, "GetItemData", None)
    else:
        fn = getattr(obj, "GetPyData", None)
    return fn(item)


def SetItemData(obj, item, data):
    """Replace deprecated :func:`SetPyData` while maintaining backwards-
    compatibility with wxPython 3. :func:`SetItemData` in wxPython 4 now
    behaves exactly as :func:`SetPyData` did in wxPython 3, i.e. it is no
    longer necessary to create and use instances of wx.TreeItemData to
    associate Python data objects with tree items; the Python objects
    can be used directly.

    :param wx.TreeCtrl obj: Control for the tree whose item data will be set.
    :param wx.TreeItemId item: Reference to the tree item.
    :param PyObject data: The data to be set for the tree item.
    """

    if WX_MAJOR_VERSION > 3:
        fn = getattr(obj, "SetItemData")
    else:
        fn = getattr(obj, "SetPyData")
    return fn(item, data)


def SystemSettings_GetColour(colour):
    """Replace deprecated :func:`SystemSettings_GetColour` while maintaining
    backwards-compatibility with wxPython 3.

    :param wx.SystemColour colour:
    :rtype: wx.Colour
    """
    if WX_MAJOR_VERSION > 3:
        return wx.SystemSettings.GetColour(colour)
    else:
        return wx.SystemSettings_GetColour(colour)


def InsertMenuItem(obj, pos, item):
    """Replace deprecated :func:`InsertItem` while maintaining backwards-
    compatibility with wxPython 3. Note that in wxPython 4, overloaded
    implementations are available for :func:`Insert` which are not supported
    through this function.

    :param wx.Menu obj: The parent menu to add the menu item to.
    :param int pos: Position where the item will be inserted.
    :param wx.MenuItem item: The menu item to be inserted into the menu.

    :rtype: wx.MenuItem
    """

    if WX_MAJOR_VERSION > 3:
        fn = getattr(obj, "Insert")
    else:
        fn = getattr(obj, "InsertItem")
    return fn(pos, item)


def InsertMenu(obj, pos, id, text, sub_menu, **kwargs):
    """Replace deprecated :func:`InsertMenu` while maintaining backwards-
    compatibility with wxPython 3. Note that in wxPython 4, overloaded
    implementations are available for :func:`Insert` which are not supported
    through this function.

    :param wx.Menu obj: The parent menu to add the submenu to.
    :param int id: Menu item identifier.
    :param int pos: Position where the item will be inserted.
    :param string text: Text shown in the menu on the submenu item.
    :param wx.Menu sub_menu: The submenu to be inserted into the menu.
    :param string help: Optional string shown in the status bar when the
        submenu item is selected (default is wx.EmptyString).

    :rtype: wx.MenuItem
    """

    if WX_MAJOR_VERSION > 3:
        fn = getattr(obj, "Insert")
    else:
        fn = getattr(obj, "InsertMenu")
    return fn(pos, id, text, sub_menu, **kwargs)


def RemoveMenuItem(obj, item):
    """Replace deprecated :func:`RemoveItem` while maintaining backwards-
    compatibility with wxPython 3. Note that in wxPython 4, overloaded
    implementations are available for :func:`Remove` which are not supported
    through this function.

    :param wx.Menu obj: The parent menu to remove the menu item from.
    :param wx.MenuItem item: The menu item to be removed from the menu.

    :rtype: wx.MenuItem
    """

    if WX_MAJOR_VERSION > 3:
        fn = getattr(obj, "Remove")
    else:
        fn = getattr(obj, "RemoveItem")
    return fn(item)


if WX_MAJOR_VERSION > 3:
    Cursor = wx.Cursor
else:
    def Cursor(*args, **kwargs):
        """Allows one to, except for the default construction methods in
        wx3, also pass a stock-cursor ID as a positional argument.
        """
        if len(args) == 1 and isinstance(args[0], int):
            cls = wx.StockCursor
        else:
            cls = wx.Cursor
        return cls(*args, **kwargs)
