#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""The graphical inspector is an application to view and interact with a
tree of ParaPy objects, display their attributes and geometry.
"""

import wx

from parapy.core.utilities import running_IPython
from parapy.gui import globs, WX_MAJOR_VERSION
from parapy.gui.ipython_integration import (
    get_interactive_shell, patch_ipython_wx4)
from parapy.gui.main import MainWindow
from parapy.gui.taskbar import set_parapy_icon

_show_grid_setting = globs.VIEWPORT_GRID_SETTINGS[0]


class ParaPyApp(wx.App):

    def OnInit(self):
        self.locale = wx.Locale(wx.LANGUAGE_ENGLISH)
        return True


def display(obj, display_number=1,
            viewport_grid=_show_grid_setting, view='iso',
            show=True, mainloop=True, autodraw=None, cls=None):
    """Can be used to use the GUI in interactive mode, only when iPython is
    running. obj is Base instance to visualize. **kwargs are arguments
    corresponding to MainWindow.__init__. The interactive session *WILL*
    create or overwrite the ``self`` variable in the invoking module's
    globals(). So ensure that ``self`` is free to be bound to new values.
    Usage:

    >>> from parapy.geom import Box
    >>> obj = Box(1, 2, 3)
    >>> from parapy.gui import display
    >>> display(obj)

    Now when you right-click any node, you can choose ``set self``. When you
    now try to evaluate self, it will be bound to whatever you clicked. For
    example:

    >>> self
    <Box root at 196880448>

    Happy hacking!

    :param object obj: object to display
    :param int display_number: to specify target display for gui in case of
        multiple displays connected.
    :param bool viewport_grid: show a background grid?
    :param str view: standard view to open. Either 'iso' (default), 'front',
        'back', 'right', 'left', 'top', 'bottom'.
    :param bool show: If set to ``True``, it shows the ParaPy GUI, otherwise
        it will not. Setting this to ``False`` is mainly useful when
        running tests where the GUI should not show up. (Default: :py:`True`)
    :param bool mainloop: Executes the main GUI event loop, meaning it will
        open the GUI 'blocking' on display. Setting this to ``False`` requires
        the caller of display to run ``app.MainLoop()``, allowing you to
        , for example, bind several events to it. In this case the
        the :class:`wx.Frame` containing the ParaPy GUI will be returned
        from ``display``. (Default: :py:`True`)
    :param bool | None autodraw: Automatically redraw all displayable tree
        objects on a model change? If set to :py:`None`, it will pick the
        value set in ``CONFIGURATION["autodraw"]`` in :mod:`parapy.gui.globs`.
        (which is the value in ``CONFIG.INI`` unless it has been
        overridden at runtime. (Default: :py:`None`)
    :param type[MainWindow]|None cls: by default,
        ``parapy.gui.globs.MAIN_WINDOW_CLASS`` is used to instantiate the
        GUI window (resolving typically
        to :class:`parapy.gui.main.MainWindow`), but a derived ``MainWindow``
        class can also be specified.

        .. note:: signature of ``MainWindow``-derived class has to be::

            cls(obj, globals=globals, display_number=display_number, view=view)
    """
    import inspect

    try:
        frm = inspect.stack()[1]
        globals = frm[0].f_globals
    except Exception:
        globals = {}

    if not cls:
        cls = globs.MAIN_WINDOW_CLASS

    globs.VIEWPORT_GRID_SETTINGS[0] = viewport_grid

    app = wx.GetApp()
    if not app:
        app = ParaPyApp(redirect=False)

    frame = cls(obj, globals=globals, display_number=display_number, view=view)
    set_parapy_icon(frame)
    app.SetTopWindow(frame)
    frame.Show(show)
    frame.Raise()

    if autodraw is not None:
        # set autodraw on the TreeViewer
        tree_viewer = frame.tree_viewer_panel
        tree_viewer.autodraw = autodraw
        if autodraw:
            tree_viewer.display_all()
            frame.refresh()  # drawing might have triggered slots

    if running_IPython():
        interactive_shell = get_interactive_shell()

        if interactive_shell:
            # enable wx Phoenix gui (not standard supported by IPython)
            if WX_MAJOR_VERSION == 4:
                patch_ipython_wx4(interactive_shell)

            # enable the UI
            interactive_shell.enable_gui('wx')

            frame._app = app  # keeps ParaPyApp alive / no early gc
            return frame

    if mainloop:
        app.MainLoop()
        return None  # better to be explicit
    else:
        return frame


def get_top_window():
    """Returns *top* ParaPy GUI window. From all open windows, this is the one
    that has been last created.

    :rtype: MainWindow
    """
    app = wx.GetApp()
    if not app:
        return None
    else:
        return app.GetTopWindow()


def refresh_top_window():
    window = get_top_window()
    if not window:
        msg = ("There is currently no ParaPy GUI window open. Make sure you "
               "open one first using display(obj). To test whether there is a "
               "window, use get_top_window().")
        raise RuntimeError(msg)
    else:
        window.refresh()


def get_all_windows():
    """Returns all ParaPy GUI windows that are currently open. The
    order of windows is from oldest (i.e. first created) to newest (i.e. last
    created).

    :rtype: list[MainWindow]
    """
    return [w for w in wx.GetTopLevelWindows() if isinstance(w, MainWindow)]


if __name__ == '__main__':
    from parapy.geom import Box
    obj = Box(1, 2, 3)
    frame1 = display(obj)
    frame2 = display(obj)

    print([frame1, frame2])

    print(get_top_window())
    print(get_all_windows())
