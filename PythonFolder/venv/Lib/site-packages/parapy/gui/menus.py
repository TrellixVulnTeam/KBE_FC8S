#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import functools

import wx

from parapy.gui import wx34
from parapy.gui.events import create_disp_event, create_hide_event
from parapy.gui.wx_utils import get_icon

DRAW_ACTION_MAPPING = {
    "display": True,
    "hide": False
}

DRAW_STATE_MAPPING = {
    "all": True,
    "node": False,
    "children": None
}

# TODO: does not work without wx.App
# DEFAULT_BITMAP_IF_NOT_FOUND = wx.ArtProvider.GetBitmap(wx.ART_QUESTION,
#                                                        size=ICON_SIZE)

get_context_menu_icon = functools.partial(get_icon, default=None)


class ContextMenu(wx.Menu):
    """Base class for Context Menus"""

    def __init__(self, parent=None):
        super(ContextMenu, self).__init__()

        self.parent = parent  # needs to be set before topmost_menu resolving

        # the topmost wx.Menu in the Menu hierarchy. We can only bind events
        # to this window, sub-menus do not receive events.
        # expectedly we will need this value at least once, otherwise
        # we cannot bind events to it, so we pre-compute
        topmost_menu = self
        while isinstance(topmost_menu.parent, wx.Menu):
            topmost_menu = topmost_menu.parent

        self.topmost_menu = topmost_menu

    def insert_item(self, pos, label, icon=None, handler=None, disable=False,
                    standard=False):
        """Insert a new menu item before the given location.
        :param int pos: index of menu item before which the new menu item
               will be inserted (0 for top of menu)
        :param str label: the string to appear on the menu item
        :param str icon: optional path of icon image to appear on the menu
               item
        :param callable handler: optional callable that is called when the
               menu item is selected. Signature is callable(self, evt=None)
        :param bool disable: optional flag whether the item should be disabled
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        id = wx.NewId()
        item = wx.MenuItem(self, id, label)

        if handler:
            self.topmost_menu.Bind(wx.EVT_MENU, handler, item)
        if icon:
            self._set_icon(item, icon)

        wx34.InsertMenuItem(self, pos, item)
        # We should disable after the item has been added to the menu
        # as now it is a native menu item.
        item.Enable(not disable)

        return item

    def append_item(self, label, icon=None, handler=None, disable=False,
                    standard=False):
        """Append a new menu item to the menu.
        :param str label: the string to appear on the menu item
        :param str icon: optional path of icon image to appear on the menu
               item
        :param callable handler: optional callable that is called when the
               menu item is selected. Signature is callable(self, evt=None)
        :param bool disable: optional flag whether the item should be disabled
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        pos = self.MenuItemCount
        item = self.insert_item(pos=pos, label=label, icon=icon,
                                handler=handler, disable=disable,
                                standard=standard)
        return item

    def insert_submenu(self, pos, label, standard=False, icon=None,
                       disable=False):
        """Append a new submenu to the menu.
        :param int pos: index of menu item before which the new separator
               will be inserted (0 for top of menu)
        :param str label: the string to appear on the menu item (which the
               submenu opens from)
        :param bool standard: optional flag whether the submenu is a standard
               menu item
        :param str icon: optional path of icon image to appear on the menu
               item
        :param bool disable: optional flag whether the item should be disabled
        :rtype: parapy.gui.ContextMenu
        """
        menu_item = wx.MenuItem(self, wx.NewId(), label)
        if icon:
            self._set_icon(menu_item, icon)

        sub_menu = self.make_new_submenu()
        menu_item.SetSubMenu(sub_menu)
        wx34.InsertMenuItem(self, pos, menu_item)

        menu_item.Enable(not disable)

        return menu_item.GetSubMenu(), menu_item

    def append_submenu(self, label, standard=False, icon=None, disable=False):
        """Append a new submenu to the menu.
        :param str label: the string to appear on the menu item (which the
               submenu opens from)
        :param bool standard: optional flag whether the submenu is a standard
               menu item
        :param str icon: optional path of icon image to appear on the menu
               item
        :param bool disable: optional flag whether the item should be disabled
        :rtype: parapy.gui.ContextMenu
        """
        pos = self.MenuItemCount
        sub_menu, sub_menu_item = self.insert_submenu(
            pos, label, standard=standard, icon=icon, disable=disable)
        return sub_menu, sub_menu_item

    def insert_separator(self, pos, standard=False):
        """Insert a new separator before the given location.
        :param int pos: index of menu item before which the new separator
               will be inserted (0 for top of menu)
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        return self.InsertSeparator(pos)

    def append_separator(self, standard=False):
        """Append a separator to the menu.
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        return self.AppendSeparator()

    def make_new_submenu(self):
        """Create and return a new menu of the same type.
        :rtype: parapy.gui.ContextMenu
        """
        # cls = type(self)
        return ContextMenu(self)

    def _set_icon(self, item, icon):
        """Set the icon of a menu item.
        :param wx.MenuItem: menu item to set the icon for
        :param str icon: path of icon image to appear on the menu item
        """
        bitmap = get_context_menu_icon(icon)
        if bitmap:
            item.SetBitmap(bitmap)


class DisplayContextMenu(ContextMenu):

    def __init__(self, parent=None, obj=None, path=None,
                 add_default_items=False):
        super(DisplayContextMenu, self).__init__(parent=parent)
        # tuple containing the path for this selected branch as seen from the
        # root
        self.path = path
        # ParaPyObject that the selected branch wraps
        self.obj = obj

        #: :type: list[wx.MenuItem]
        self.non_standard_items = []
        self.standard_items = []

        if add_default_items:
            self.append_default_items(standard=True)

    def insert_item(self, pos, label, icon=None, handler=None, disable=False,
                    standard=False):
        """Insert a new menu item before the given location.
        :param int pos: index of menu item before which the new menu item
               will be inserted (0 for top of menu)
        :param str label: the string to appear on the menu item
        :param str icon: optional path of icon image to appear on the menu
               item
        :param callable handler: optional callable that is called when the
               menu item is selected. Signature is callable(self, evt=None)
        :param bool disable: optional flag whether the item should be disabled
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        item = super(DisplayContextMenu, self).insert_item(
            pos, label, icon=icon, handler=handler, disable=disable,
            standard=standard)

        if not standard:
            self.non_standard_items.append(item)

        return item

    def append_submenu(self, label, standard=False):
        """Append a new submenu to the menu.
        :param str label: the string to appear on the menu item (which the
               submenu opens from)
        :param bool standard: optional flag whether the submenu is a standard
               menu item
        :rtype: parapy.gui.ContextMenu
        """
        sub_menu, item = super(DisplayContextMenu, self).append_submenu(
            label, standard=standard)

        if not standard:
            self.non_standard_items.append(item)

        return sub_menu, item

    def insert_separator(self, pos, standard=False):
        """Insert a new separator before the given location.
        :param int pos: index of menu item before which the new separator
               will be inserted (0 for top of menu)
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        item = super(DisplayContextMenu, self).insert_separator(
            pos, standard=standard)

        if not standard:
            self.non_standard_items.append(item)

        return item

    def append_separator(self, standard=False):
        """Append a separator to the menu.
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        pos = self.MenuItemCount
        return self.insert_separator(pos, standard=standard)

    def make_new_submenu(self):
        """Create and return a new menu of the same type.
        :rtype: parapy.gui.DisplayContextMenu
        """
        # cls = type(self)
        return DisplayContextMenu(self, self.obj, self.path)

    def insert_default_items(self, pos, standard=False):
        # DisplayContextMenu does not have any default items
        pass

    def append_default_items(self, standard=False):
        # DisplayContextMenu does not have any default items
        pass

    def insert_default_display_items(self, pos, standard=False):
        self.append_display_item("Display", icon="draw_all.png",
                                 draw_action="display", draw_state="all",
                                 standard=standard)
        self.append_display_item("Display node", icon="draw_node.png",
                                 draw_action="display", draw_state="node",
                                 standard=standard)
        self.append_display_item("Display children", icon="draw_children.png",
                                 draw_action="display", draw_state="children",
                                 standard=standard)

        self.append_separator(standard=standard)

        self.append_display_item("Hide", icon="hide_all.png",
                                 draw_action="hide", draw_state="all",
                                 standard=standard)
        self.append_display_item("Hide node", icon="hide_node.png",
                                 draw_action="hide", draw_state="all",
                                 standard=standard)
        self.append_display_item("Hide children", icon="hide_children.png",
                                 draw_action="hide", draw_state="children",
                                 standard=standard)

    def append_default_display_items(self, standard=False):
        pos = self.MenuItemCount
        return self.insert_default_display_items(pos, standard=standard)


    def insert_display_item(self, pos, label, icon=None, draw_action=None,
                            draw_state=None, standard=False):
        """Closure to attach display event handlers to this menu.
        :param str label: label shown on menu item
        :param str icon: path to an icon to be shown on the menu item
        :param str draw_action: "display" or "hide"
        :param str draw_state: may have three values:
            - "all": display/hide this object and all children
            - "node": display/hide only top object
            - "children": display/hide only the children
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        try:
            display = DRAW_ACTION_MAPPING[draw_action]
        except KeyError:
            raise ValueError("Key ""{}"" is not valid.".format(draw_action))

        try:
            state = DRAW_STATE_MAPPING[draw_state]
        except KeyError:
            raise ValueError("Key ""{}"" is not valid.".format(draw_state))

        def handler(evt=None):
            fn = create_disp_event if display else create_hide_event
            event = fn(self.path, state=state)
            # need to post event on the panel i.e. InvokingWindow
            parent = self.topmost_menu.GetInvokingWindow()
            wx.PostEvent(parent, event)

        item = self.insert_item(pos, label, icon=icon, handler=handler,
                                standard=standard)
        return item

    def append_display_item(self, label, icon=None, draw_action=None,
                            draw_state=None, standard=False):
        """Closure to attach display event handlers to this menu.
        :param str label: label shown on menu item
        :param str icon: path to an icon to be shown on the menu item
        :param str draw_action: "display" or "hide"
        :param str draw_state: may have three values:
            - "all": display/hide this object and all children
            - "node": display/hide only top object
            - "children": display/hide only the children
        :param bool standard: optional flag whether the item is a standard
               menu item
        """
        pos = self.MenuItemCount
        return self.insert_display_item(
            pos, label, icon=icon, draw_action=draw_action,
            draw_state=draw_state, standard=standard)

    def on_bind_self(self, evt):
        """creates a SETSELF event"""
        parent = self.topmost_menu.GetInvokingWindow()
        parent.bind_self(self.obj)

    def remove_standard_items(self):
        for item in self.standard_items:
            wx34.RemoveMenuItem(self, item)
        self.standard_items = []

    def remove_non_standard_items(self):
        for item in self.non_standard_items:
            wx34.RemoveMenuItem(self, item)

        self.non_standard_items = []


