#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import logging
import os

import wx

from parapy.gui.globs import ICN_DIR

ICON_SIZE = 16, 16
_IMAGE_NOT_FOUND_MSG = ("GUI: Intercepted attempt to set non-existing "
                        "icon: {!r}")


class FrameContext(object):
    __slots__ = ("app", "frame", "show", "close", "main_loop", "_frame_cls",
                 "_frame_args", "_frame_kwargs")

    def __init__(self, show=False, close=True, main_loop=True,
                 frame_cls=wx.Frame, frame_args=None, frame_kwargs=None):
        """Create a :class:`wx.Frame` that can be used within a context,
        and will be automatically closed when exiting the context.
        The FrameContext gives access to created frame and the
        :class:`wx.App` through respectively :attr:`frame` and :attr:`app`.

        Usage:

        >>> import wx
        >>> from parapy.gui.wx_utils import FrameContext
        >>> with FrameContext() as fc:
        ...     panel = wx.Panel(fc.frame)
        >>> # example on how to show the frame, but close it ourselves
        >>> with FrameContext(close=False, show=True, main_loop=False) as fc:
        ...     panel = wx.Panel(fc.frame)
        >>> fc.frame.Close()
        True
        >>> fc.app.MainLoop()
        >>> # example custom Frame class
        >>> from parapy.gui.main import MainWindow
        >>> with FrameContext(frame_cls=MainWindow,
        ...                   frame_args=[()],
        ...                   frame_kwargs={"title": "my title"}) as fc:
        ...     fc.frame.set_view('front')  # access to MainWindow instance

        :param bool show: Show the frame when exiting the context?
        :param bool close: Close the frame when exiting the context? The frame
            will be shown AFTER it has been closed if this is set to True.
        :param bool main_loop: Should ``app.MainLoop()`` be called when
            exiting the context.
        :param type frame_cls: A custom :class:`wx.Frame`` class used to
            create the Frame.
        :param collections.Iterable frame_args: arguments to be passed to
            ``frame_cls`` upon instantiation
        :param dict frame_kwargs: keyword arguments to be passed to
            ``frame_cls`` upon instantiation
        """
        self.show = show
        self.close = close
        self.main_loop = main_loop
        self._frame_cls = frame_cls
        if frame_args is None:
            self._frame_args = [None]
        else:
            self._frame_args = frame_args
        if frame_kwargs is None:
            self._frame_kwargs = {}
        else:
            self._frame_kwargs = frame_kwargs

    def __enter__(self):
        self.app = wx.GetApp() or wx.App(False)
        self.frame = self._frame_cls(*self._frame_args, **self._frame_kwargs)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        frame = self.frame
        if self.close:
            frame.Close()
        if self.show:
            frame.Show()
        if self.main_loop:
            self.app.MainLoop()


def popup(title, msg, cancel_button=True):
    """show a message dialog with ``title`` and ``msg`` and OK / Cancel
    buttons. If ``cancel_button==False``, only OK button is shown. Returns
    wx.ID_OK or wx.ID_CANCEL.
    """
    style = wx.OK | wx.CENTER
    if cancel_button:
        style |= wx.CANCEL
    dlg = wx.MessageDialog(None, msg, title, style=style)
    flag = dlg.ShowModal()
    dlg.Destroy()
    return flag


def get_bitmap(filename):
    """Create a :class:`wx.Bitmap` from ``filename``. Return :py:`None` if
    that the filename does not exist.

    :type filename: str
    :rtype: wx.Bitmap | None
    """
    if os.path.exists(filename):
        # on an exception, wx will give a clear error message
        return wx.Bitmap(filename, wx.BITMAP_TYPE_ANY)
    else:
        return None


def get_icon(filename, default=None):
    """Create a :class:`wx.Bitmap` from ``filename`` or return a
    ``default`` bitmap if ``filename`` does not exist.
    :type filename: str
    :type default wx.Bitmap | None
    :rtype: wx.Bitmap | None
    """
    filename_candidate = filename
    if not os.path.exists(filename):
        # try to search for icon in ``parapy/gui/icons`` dir
        filename_candidate = os.path.join(ICN_DIR, filename)

    if os.path.exists(filename_candidate):
        return wx.Bitmap(filename_candidate, wx.BITMAP_TYPE_ANY)
    else:
        logging.warning(_IMAGE_NOT_FOUND_MSG.format(filename))
        return default


class StatusBarMessage(object):
    """If status bar is present, will push ``msg`` and pop it on exit.

    >>> with StatusBarMessage(window, "Busy...")
    >>>     # do something

    :param wx.Window win: a window in UI
    :param str msg: message to show in status bar
    """
    def __init__(self, win, msg):
        #: :type: wx.StatusBar
        self._status_bar = win.GetTopLevelParent().GetStatusBar()
        self._msg = msg

    def __enter__(self):
        status_bar = self._status_bar
        if status_bar:
            status_bar.PushStatusText(self._msg)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        status_bar = self._status_bar
        if status_bar:
            status_bar.PopStatusText()
