#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""The graphical inspector is an application to view and interact with a tree
of ParaPy objects, display their attributes and geometry. Usage::

    from parapy.gui import display

    obj = Box(1,2,3)
    display(obj)
"""

import warnings

from OCC.gui import WX_MAJOR_VERSION

from parapy.core.exceptions import ParaPyDeprecationWarning
from parapy.gui import globs

__all__ = ["display", "set_position_rendering", "reset_position_rendering",
           "Manipulable"]

try:
    import wx

    if WX_MAJOR_VERSION < 4:
        msg = "Support for wxPython {} has been deprecated, use wxPython 4 " \
              "instead."
        warnings.warn(
            msg.format(WX_MAJOR_VERSION), ParaPyDeprecationWarning,
            stacklevel=2)

except ImportError:
    raise Exception("wx is required for the gui package to work. "
                    "Use: pip install wxpython.")

try:
    import wx.propgrid  # wxpg: included in wxPython 2.9 and higher
except ImportError:
    raise Exception("wx.propgrid is required for the gui package to work.")

# let the import errors and deprecation warnings go first
from parapy.gui.display import (
    display, get_all_windows, get_top_window, refresh_top_window)
from parapy.gui.manipulation import Manipulable


def set_position_rendering(mode='point', size=None):
    """Control how Position instances are rendered in the GUI.

    >>> from parapy.gui import set_position_rendering
    >>> set_position_rendering(mode='point')
    >>> set_position_rendering(mode='axes')
    >>> set_position_rendering(mode='axes', size=10)
    >>> # resetting would simple be
    >>> set_position_rendering()

    :param str mode: either 'point' or 'axes'.
    :param float size: size of axes (only when mode == 'axes')
    """
    from parapy.gui.viewer_patch import (apply_position_patch,
                                         retract_position_patch)
    if mode == "point":
        retract_position_patch()
    elif mode == "axes":
        apply_position_patch(size=size)


def reset_position_rendering():
    """Reset how Position instances are rendered in the GUI to the
    CONFIG.INI defaults.

    >>> from parapy.gui import reset_position_rendering
    >>> reset_position_rendering()
    """
    if globs.POSITION_RENDERING_MODE == 'axes':
        set_position_rendering('axes', size=globs.POSITION_RENDERING_SIZE)
    else:
        set_position_rendering('point')


reset_position_rendering()
